[
    {
        "title": "Simplify Path",
        "question_content": "Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\nIn a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\nThe canonical path should have the following format:\n\n\tThe path starts with a single slash '/'.\n\tAny two directories are separated by a single slash '/'.\n\tThe path does not end with a trailing '/'.\n\tThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\n\nReturn the simplified canonical path.\n&nbsp;\nExample 1:\n\nInput: path = \"/home/\"\nOutput: \"/home\"\nExplanation: Note that there is no trailing slash after the last directory name.\n\nExample 2:\n\nInput: path = \"/../\"\nOutput: \"/\"\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n\nExample 3:\n\nInput: path = \"/home//foo/\"\nOutput: \"/home/foo\"\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n\n&nbsp;\nConstraints:\n\n\t1 <= path.length <= 3000\n\tpath consists of English letters, digits, period '.', slash '/' or '_'.\n\tpath is a valid absolute Unix path.",
        "solutions": [
            {
                "id": 1847357,
                "title": "c-easy-stack-simple-explained-algorithm",
                "content": "# 71. Simplify Path\\n**KNOCKCAT**\\n\\nPlease ALso have a look to my Leetcode Repository Link Given Below :)\\n```\\n1. Easy C++\\n2. Line by Line Explanation with Comments.\\n3. Detailed Explanation \\u2705\\n4. Stack Problem with Initution.\\n5. Please Upvote if it helps\\u2B06\\uFE0F\\n6. Link to my Github Profile contains a repository of Leetcode with all my Solutions. \\u2B07\\uFE0F\\n\\t// \\uD83D\\uDE09If you Like the repository don\\'t foget to star & fork the repository\\uD83D\\uDE09\\n```\\n``` ```\\n[LeetCode](https://github.com/knockcat/Leetcode)     **LINK TO LEETCODE REPOSITORY**\\n\\nPlease upvote my comment so that i get to win the 2022 giveaway and motivate to make such discussion post.\\n**Happy new Year 2023 to all of you**\\n**keep solving keep improving**\\nLink To comment\\n[Leetcode Give away comment](https://leetcode.com/discuss/general-discussion/2946993/2022-Annual-Badge-and-the-Giveaway/1734919)\\n``` ```\\n\\n**EXPLANATION**\\n* Create a **Stack of String** with following condition.\\n\\t* **Iterate the loop till you doesn\\'t reaches the end of string.**\\n\\t* If you **encounter a  \"/\" then ignore it.**\\n\\t* **Create a temp String** & **Iterate the while loop** till you **doesn\\'t find  \"/\"** and **append it to temp**.\\n\\t* Now check if **temp  == \".\"** , t**hen ignore it**.\\n\\t* If **temp == \"..\"** then **pop the element from the stack if it exists.**\\n\\t* If **no of the above 2 matches** **push temp to stack** as you find a valid path.\\n\\t* **Check out temp** string on **basis of above conditions till you doesn\\'t find \"/\".**\\n* \\tNow **add all stack elements** to result as **res = \"/\" + st.top() + res**\\n* \\tIf **res.size() is 0** then **return \"/\"**  if no directory or file is present.\\n* \\tAt last **return res**.\\n\\n```\\nInput: path = \"/../\"\\nOutput: \"/\"\\nInput: path = \"/home//foo/\"\\nOutput: \"/home/foo\"\\n```\\n\\n**ALGORITHM**\\n* By looking at examples we can see that the above **simplification process** just **behaves like a stack**.\\n* **Whenever we encounter any file\\u2019s name**, **we simply push it into the stack**.\\n* when we come across **\\u201D . \\u201D** **we do nothing**\\n* When **we find \\u201C..\\u201D** in our path, **we simply pop the topmost element** as we **have to jump back to parent\\u2019s directory.**\\n* When we **see multiple \\u201C////\\u201D** we **just ignore them** as **they are equivalent to one single \\u201C/\\u201D.** \\n* After **iterating through the whole string** the **elements remaining in the stack** is our **simplified absolute path.**\\n\\n\\n``` ```\\n**CODE WITH EXPLANATION**\\n```\\n\\t\\t\\t\\t\\t// \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        \\n        stack<string> st;\\n        string res;\\n        \\n        for(int i = 0;  i<path.size(); ++i)\\n        {\\n            if(path[i] == \\'/\\')    \\n                continue;\\n            string temp;\\n\\t\\t\\t// iterate till we doesn\\'t traverse the whole string and doesn\\'t encounter the last /\\n            while(i < path.size() && path[i] != \\'/\\')\\n            {\\n\\t\\t\\t\\t// add path to temp string\\n                temp += path[i];\\n                ++i;\\n            }\\n            if(temp == \".\")\\n                continue;\\n\\t\\t\\t// pop the top element from stack if exists\\n            else if(temp == \"..\")\\n            {\\n                if(!st.empty())\\n                    st.pop();\\n            }\\n            else\\n\\t\\t\\t// push the directory file name to stack\\n                st.push(temp);\\n        }\\n        \\n\\t\\t// adding all the stack elements to res\\n        while(!st.empty())\\n        {\\n            res = \"/\" + st.top() + res;\\n            st.pop();\\n        }\\n        \\n\\t\\t// if no directory or file is present\\n        if(res.size() == 0)\\n            return \"/\";\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Stack"
                ],
                "code": "```\\n1. Easy C++\\n2. Line by Line Explanation with Comments.\\n3. Detailed Explanation \\u2705\\n4. Stack Problem with Initution.\\n5. Please Upvote if it helps\\u2B06\\uFE0F\\n6. Link to my Github Profile contains a repository of Leetcode with all my Solutions. \\u2B07\\uFE0F\\n\\t// \\uD83D\\uDE09If you Like the repository don\\'t foget to star & fork the repository\\uD83D\\uDE09\\n```\n``` ```\n``` ```\n```\\nInput: path = \"/../\"\\nOutput: \"/\"\\nInput: path = \"/home//foo/\"\\nOutput: \"/home/foo\"\\n```\n``` ```\n```\\n\\t\\t\\t\\t\\t// \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        \\n        stack<string> st;\\n        string res;\\n        \\n        for(int i = 0;  i<path.size(); ++i)\\n        {\\n            if(path[i] == \\'/\\')    \\n                continue;\\n            string temp;\\n\\t\\t\\t// iterate till we doesn\\'t traverse the whole string and doesn\\'t encounter the last /\\n            while(i < path.size() && path[i] != \\'/\\')\\n            {\\n\\t\\t\\t\\t// add path to temp string\\n                temp += path[i];\\n                ++i;\\n            }\\n            if(temp == \".\")\\n                continue;\\n\\t\\t\\t// pop the top element from stack if exists\\n            else if(temp == \"..\")\\n            {\\n                if(!st.empty())\\n                    st.pop();\\n            }\\n            else\\n\\t\\t\\t// push the directory file name to stack\\n                st.push(temp);\\n        }\\n        \\n\\t\\t// adding all the stack elements to res\\n        while(!st.empty())\\n        {\\n            res = \"/\" + st.top() + res;\\n            st.pop();\\n        }\\n        \\n\\t\\t// if no directory or file is present\\n        if(res.size() == 0)\\n            return \"/\";\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1847526,
                "title": "best-explanation-ever-possible-not-a-clickbait",
                "content": "How\\'s going Ladies - n - GentleMen, today we are going to solve another coolest problem i.e. **Simplify Path**\\n\\nAlright, so let\\'s understand this problem with an example :-\\n\\n**Input:** `path = \"/a/./b/../../c/\"`\\n**Output:** `\"/c\"`\\n\\nLet\\'s understand what this mean\\'s, so basically this seems like you a path of your folder, so generically we use this kind of command\\'s in terminal. I hope u know a bit about that. Anyway\\'s let\\'s move further on.\\n\\n* okay, so the first command `/a/` means get into the folder `/a/`\\n\\n\\n* The next command is `/./` means stay over there\\n* The next command is `/b/` means get into the folder `/b/`\\n* The next command is `/../` means come out from the folder `/b/`\\n* The next command is `/../` means come out from the folder `/a/`\\n* Now we are kind of in home directory\\n* The next command is `/c/` means get into the folder `/c/`\\n* And in the output we return what command we left with.\\n\\nLet\\'s understand it a bit visually.\\n* Going to **`/a/./b/`**\\n![image](https://assets.leetcode.com/users/images/fda0afe4-f04d-4ab4-a5e8-950859e88a94_1647224192.301499.png)\\n* Coming out **`/../../`**\\n![image](https://assets.leetcode.com/users/images/d4a78ce7-b5a1-40c6-bf09-39270dd86a90_1647224302.6337845.png)\\n* Going to **`/c/`**\\n![image](https://assets.leetcode.com/users/images/1490e3dd-f3be-4b22-bcc9-0518f99ad38c_1647224553.681243.png)\\n\\nSo, basically what are we doing:-\\n**Pushing** and **Popping** directory names based on rules\\n\\nAnd what are the rules :-\\n1. **/..** come out from the directory\\n2. **/nameOfDirectory** going into directory\\n\\nNow you say, Dude that\\'s A-OK but which Data Structure do we use to solve this problem. Well. i had already gives you a hint if you remember **Pushing** and **Popping**. So where do we Generically used in `Stack` or `Queue`\\n\\nWe\\'ll solve this problem using Stack. But if you want the solution of `Queue` as well, **do lemmino (:**\\n\\nAlright, back to the problem - So, what we can do is by looking at the rules, split the directrory by the slash`/` given and that will give us in the form of array e.g :- **`[a, ., b, .., .., c]`**\\n\\nLet\\'s understand it\\'s working visually:-\\n\\n![image](https://assets.leetcode.com/users/images/2a40a0e0-3a9d-4e4a-bdf6-19f3aada5bea_1647225944.7493086.gif)\\n\\nBut remeber when returning we have to go in the form of reverse order. Because Stack use **LIFO** order and the highest one will comes out. But we need the lowest once first. So, we need to append in the carefull manner.\\n\\n*I hope ladies and gentlemen approach is clear* **Let\\'s code it up**\\n\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> s = new Stack<>();\\n        StringBuilder res = new StringBuilder();\\n        String[] p =path.split(\"/\");\\n        \\n        for(int i=0;i<p.length;i++){\\n            if(!s.isEmpty()  && p[i].equals(\"..\")) s.pop();\\n            else if(!p[i].equals(\"\") && !p[i].equals(\".\") && !p[i].equals(\"..\"))\\n                s.push(p[i]);\\n        }\\n        \\n        \\n        if(s.isEmpty()) return \"/\";\\n        while(!s.isEmpty()){\\n            res.insert(0,s.pop()).insert(0,\"/\");\\n        }\\n        \\n        return res.toString();\\n    }\\n}\\n```\\n\\nANALYSIS :-\\n* **Time Complexity :-** O(N)\\n\\n* **Space Complexity :-** O(N)",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> s = new Stack<>();\\n        StringBuilder res = new StringBuilder();\\n        String[] p =path.split(\"/\");\\n        \\n        for(int i=0;i<p.length;i++){\\n            if(!s.isEmpty()  && p[i].equals(\"..\")) s.pop();\\n            else if(!p[i].equals(\"\") && !p[i].equals(\".\") && !p[i].equals(\"..\"))\\n                s.push(p[i]);\\n        }\\n        \\n        \\n        if(s.isEmpty()) return \"/\";\\n        while(!s.isEmpty()){\\n            res.insert(0,s.pop()).insert(0,\"/\");\\n        }\\n        \\n        return res.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25686,
                "title": "java-10-lines-solution-with-stack",
                "content": "Hi guys!\\n\\nThe main idea is to push to the stack every valid file name (not in {\"\",\".\",\"..\"}), popping only if there's smth to pop and we met \"..\". I don't feel like the code below needs any additional comments.\\n\\n    public String simplifyPath(String path) {\\n        Deque<String> stack = new LinkedList<>();\\n        Set<String> skip = new HashSet<>(Arrays.asList(\"..\",\".\",\"\"));\\n        for (String dir : path.split(\"/\")) {\\n            if (dir.equals(\"..\") && !stack.isEmpty()) stack.pop();\\n            else if (!skip.contains(dir)) stack.push(dir);\\n        }\\n        String res = \"\";\\n        for (String dir : stack) res = \"/\" + dir + res;\\n        return res.isEmpty() ? \"/\" : res;\\n    }\\n\\nHope it helps!",
                "solutionTags": [
                    "Java"
                ],
                "code": "Hi guys!\\n\\nThe main idea is to push to the stack every valid file name (not in {\"\",\".\",\"..\"}), popping only if there's smth to pop and we met \"..\". I don't feel like the code below needs any additional comments.\\n\\n    public String simplifyPath(String path) {\\n        Deque<String> stack = new LinkedList<>();\\n        Set<String> skip = new HashSet<>(Arrays.asList(\"..\",\".\",\"\"));\\n        for (String dir : path.split(\"/\")) {\\n            if (dir.equals(\"..\") && !stack.isEmpty()) stack.pop();\\n            else if (!skip.contains(dir)) stack.push(dir);\\n        }\\n        String res = \"\";\\n        for (String dir : stack) res = \"/\" + dir + res;\\n        return res.isEmpty() ? \"/\" : res;\\n    }\\n\\nHope it helps!",
                "codeTag": "Unknown"
            },
            {
                "id": 25680,
                "title": "c-10-lines-solution",
                "content": "C++ also have  *getline* which acts like Java's *split*. I guess the code can comment itself.\\n\\n    string simplifyPath(string path) {\\n        string res, tmp;\\n        vector<string> stk;\\n        stringstream ss(path);\\n        while(getline(ss,tmp,'/')) {\\n            if (tmp == \"\" or tmp == \".\") continue;\\n            if (tmp == \"..\" and !stk.empty()) stk.pop_back();\\n            else if (tmp != \"..\") stk.push_back(tmp);\\n        }\\n        for(auto str : stk) res += \"/\"+str;\\n        return res.empty() ? \"/\" : res;\\n    }",
                "solutionTags": [],
                "code": "C++ also have  *getline* which acts like Java's *split*. I guess the code can comment itself.\\n\\n    string simplifyPath(string path) {\\n        string res, tmp;\\n        vector<string> stk;\\n        stringstream ss(path);\\n        while(getline(ss,tmp,'/')) {\\n            if (tmp == \"\" or tmp == \".\") continue;\\n            if (tmp == \"..\" and !stk.empty()) stk.pop_back();\\n            else if (tmp != \"..\") stk.push_back(tmp);\\n        }\\n        for(auto str : stk) res += \"/\"+str;\\n        return res.empty() ? \"/\" : res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1050573,
                "title": "python-short-stack-solution-explained",
                "content": "When you see this problem, you should think about stack. Why? Because we have directories and you can go deeper or come back and when you come back, you basically forgot about all element after and stack is ideal simulation of this process. Also in python you can use `.split(\"/\")` function, which will split our string into parts, separated by `/` symbol.\\n\\nSo, the algorithm will look like this:\\n1. If stack is not empty and we meet `..` element, it means, that we need to go one level up, so we just pop element from stack and forgot about it.\\n2. If we have any other element except several cases, we put it to the end of stack. So, what cases we need to avoid: if we meet `.`, it means current directory according to problem description, so we do not need to go deeper; if we meet `..`, and it means that stack is empty, so we already at the top of our path, so we againd do nothing in this case. Finally, we can meet empty string also, it corresponds to case, when we have `//`, then there is empty string between two `/`.\\n3. In the end we reconstruct string from all element, using `/` to join them.\\n\\n**Complexity**: time complexity is `O(n)`, because we only traverse our path once. Space complexity is `O(n)`, because there can be potentially `O(n)` elements inside.\\n\\n```\\nclass Solution:\\n    def simplifyPath(self, path):\\n        stack = []\\n        for elem in path.split(\"/\"):\\n            if stack and elem == \"..\":\\n                stack.pop()\\n            elif elem not in [\".\", \"\", \"..\"]:\\n                stack.append(elem)\\n                \\n        return \"/\" + \"/\".join(stack)\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Stack"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path):\\n        stack = []\\n        for elem in path.split(\"/\"):\\n            if stack and elem == \"..\":\\n                stack.pop()\\n            elif elem not in [\".\", \"\", \"..\"]:\\n                stack.append(elem)\\n                \\n        return \"/\" + \"/\".join(stack)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25691,
                "title": "9-lines-of-python-code",
                "content": "    class Solution(object):\\n        def simplifyPath(self, path):\\n            places = [p for p in path.split(\"/\") if p!=\".\" and p!=\"\"]\\n            stack = []\\n            for p in places:\\n                if p == \"..\":\\n                    if len(stack) > 0:\\n                        stack.pop()\\n                else:\\n                    stack.append(p)\\n            return \"/\" + \"/\".join(stack)",
                "solutionTags": [],
                "code": "    class Solution(object):\\n        def simplifyPath(self, path):\\n            places = [p for p in path.split(\"/\") if p!=\".\" and p!=\"\"]\\n            stack = []\\n            for p in places:\\n                if p == \"..\":\\n                    if len(stack) > 0:\\n                        stack.pop()\\n                else:\\n                    stack.append(p)\\n            return \"/\" + \"/\".join(stack)",
                "codeTag": "Java"
            },
            {
                "id": 25778,
                "title": "java-easy-to-understand-stack-solution",
                "content": "    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<>();\\n        String[] p = path.split(\"/\");\\n        for (int i = 0; i < p.length; i++) {\\n            if (!stack.empty() && p[i].equals(\"..\"))\\n                stack.pop();\\n            else if (!p[i].equals(\".\") && !p[i].equals(\"\") && !p[i].equals(\"..\"))\\n                stack.push(p[i]);\\n        }\\n        List<String> list = new ArrayList(stack);\\n        return \"/\"+String.join(\"/\", list);\\n    }",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<>();\\n        String[] p = path.split(\"/\");\\n        for (int i = 0; i < p.length; i++) {\\n            if (!stack.empty() && p[i].equals(\"..\"))\\n                stack.pop();\\n            else if (!p[i].equals(\".\") && !p[i].equals(\"\") && !p[i].equals(\"..\"))\\n                stack.push(p[i]);\\n        }\\n        List<String> list = new ArrayList(stack);\\n        return \"/\"+String.join(\"/\", list);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3407361,
                "title": "easy-solutions-in-java-python-and-c-look-at-once-with-exaplanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem requires to convert a given absolute path to a simplified canonical path. The simplified canonical path should have the following format:\\n- The path starts with a single slash \\'/\\'.\\n\\n- Any two directories are separated by a single slash \\'/\\'.\\n\\n- The path does not end with a trailing \\'/\\'.\\n\\n- The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period \\'.\\' or double period \\'..\\').\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe problem can be solved using a stack to keep track of the directories in the path. We split the input path by slash \\'/\\', iterate over the directories, and perform the following operations:\\n\\n- Ignore the current directory \\'.\\' and empty directories.\\n- Go one level up for double period \\'..\\' by popping the top element from the stack if it is not empty.\\n- For any other directory, push it to the stack.\\n- Finally, we join the directories in the stack with slash \\'/\\' and add a slash at the beginning to form the simplified canonical path.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the algorithm is $$O(n)$$, where n is the length of the input path. This is because we iterate over each directory in the path only once.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n The space complexity of the algorithm is $$O(n)$$ where n is the length of\\n\\n \\n![image.png](https://assets.leetcode.com/users/images/b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png)\\n\\n\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\\n# Code\\n``` Java []\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<>(); // create a stack to keep track of directories\\n        String[] directories = path.split(\"/\"); // split the path by slash \\'/\\'\\n        for (String dir : directories) { // iterate over the directories\\n            if (dir.equals(\".\") || dir.isEmpty()) { // ignore the current directory \\'.\\' and empty directories\\n                continue;\\n            } else if (dir.equals(\"..\")) { // go one level up for double period \\'..\\'\\n                if (!stack.isEmpty()) { // if stack is not empty, pop the top element\\n                    stack.pop();\\n                }\\n            } else { // for any other directory, push it to the stack\\n                stack.push(dir);\\n            }\\n        }\\n        return \"/\" + String.join(\"/\", stack); // join the directories in the stack with slash \\'/\\' and add a slash at the beginning\\n    }\\n}\\n```\\n```JavaScript []\\n/**\\n * @param {string} path\\n * @return {string}\\n */\\nvar simplifyPath = function(path) {\\n    const stack = [];\\n    const directories = path.split(\"/\");\\n    for (const dir of directories) {\\n        if (dir === \".\" || !dir) {\\n            continue;\\n        } else if (dir === \"..\") {\\n            if (stack.length > 0) {\\n                stack.pop();\\n            }\\n        } else {\\n            stack.push(dir);\\n        }\\n    }\\n    return \"/\" + stack.join(\"/\");\\n};\\n\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> s;\\n        stringstream ss(path);\\n        string dir;\\n        while (getline(ss, dir, \\'/\\')) {\\n            if (dir.empty() || dir == \".\") {\\n                continue;\\n            } else if (dir == \"..\") {\\n                if (!s.empty()) {\\n                    s.pop();\\n                }\\n            } else {\\n                s.push(dir);\\n            }\\n        }\\n        string res;\\n        while (!s.empty()) {\\n            res = \"/\" + s.top() + res;\\n            s.pop();\\n        }\\n        return res.empty() ? \"/\" : res;\\n    }\\n};\\n\\n```\\n``` Python []\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        stack = []\\n        directories = path.split(\"/\")\\n        for dir in directories:\\n            if dir == \".\" or not dir:\\n                continue\\n            elif dir == \"..\":\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(dir)\\n        return \"/\" + \"/\".join(stack)\\n\\n```\\n# Please Comment\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\n``` Java []\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<>(); // create a stack to keep track of directories\\n        String[] directories = path.split(\"/\"); // split the path by slash \\'/\\'\\n        for (String dir : directories) { // iterate over the directories\\n            if (dir.equals(\".\") || dir.isEmpty()) { // ignore the current directory \\'.\\' and empty directories\\n                continue;\\n            } else if (dir.equals(\"..\")) { // go one level up for double period \\'..\\'\\n                if (!stack.isEmpty()) { // if stack is not empty, pop the top element\\n                    stack.pop();\\n                }\\n            } else { // for any other directory, push it to the stack\\n                stack.push(dir);\\n            }\\n        }\\n        return \"/\" + String.join(\"/\", stack); // join the directories in the stack with slash \\'/\\' and add a slash at the beginning\\n    }\\n}\\n```\n```JavaScript []\\n/**\\n * @param {string} path\\n * @return {string}\\n */\\nvar simplifyPath = function(path) {\\n    const stack = [];\\n    const directories = path.split(\"/\");\\n    for (const dir of directories) {\\n        if (dir === \".\" || !dir) {\\n            continue;\\n        } else if (dir === \"..\") {\\n            if (stack.length > 0) {\\n                stack.pop();\\n            }\\n        } else {\\n            stack.push(dir);\\n        }\\n    }\\n    return \"/\" + stack.join(\"/\");\\n};\\n\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> s;\\n        stringstream ss(path);\\n        string dir;\\n        while (getline(ss, dir, \\'/\\')) {\\n            if (dir.empty() || dir == \".\") {\\n                continue;\\n            } else if (dir == \"..\") {\\n                if (!s.empty()) {\\n                    s.pop();\\n                }\\n            } else {\\n                s.push(dir);\\n            }\\n        }\\n        string res;\\n        while (!s.empty()) {\\n            res = \"/\" + s.top() + res;\\n            s.pop();\\n        }\\n        return res.empty() ? \"/\" : res;\\n    }\\n};\\n\\n```\n``` Python []\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        stack = []\\n        directories = path.split(\"/\")\\n        for dir in directories:\\n            if dir == \".\" or not dir:\\n                continue\\n            elif dir == \"..\":\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(dir)\\n        return \"/\" + \"/\".join(stack)\\n\\n```\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406788,
                "title": "image-explanation-simple-easy-concise-stack-c-java-python",
                "content": "# Video Solution (`Aryan Mittal`) - Link in LeetCode Profile\\n`Simplify Path` by `Aryan Mittal`\\n![lc.png](https://assets.leetcode.com/users/images/0dcce590-ae89-40a6-81b8-727f896098a7_1681264846.7869709.png)\\n\\n\\n# Approach & Intution\\n![image.png](https://assets.leetcode.com/users/images/6c0be3d7-dea4-44ec-a4a8-2dccaaa8620b_1681261958.6440732.png)\\n![image.png](https://assets.leetcode.com/users/images/02bb1515-d70c-42dc-973a-fc331bd0a580_1681261967.111279.png)\\n![image.png](https://assets.leetcode.com/users/images/d3e91201-18f5-4795-8b3a-867b24b72210_1681261976.8542857.png)\\n![image.png](https://assets.leetcode.com/users/images/323ca517-6e1b-4add-bc63-31eef7febcf1_1681261985.6800873.png)\\n![image.png](https://assets.leetcode.com/users/images/33c5dffa-174b-448b-a205-cdce9b775339_1681261994.3601491.png)\\n![image.png](https://assets.leetcode.com/users/images/18a44cdd-62af-447a-a754-13d4e7ec1d6a_1681262007.9926193.png)\\n![image.png](https://assets.leetcode.com/users/images/f39db0ae-1a00-4d22-a9e9-434dd10ee4df_1681262020.5986128.png)\\n![image.png](https://assets.leetcode.com/users/images/a1639cf9-ff51-4139-a191-29b7b8f18834_1681262026.56356.png)\\n![image.png](https://assets.leetcode.com/users/images/8016c9ad-edc6-48ae-ae80-2ebfbdd28597_1681262033.6350305.png)\\n![image.png](https://assets.leetcode.com/users/images/e74fbc13-897d-4397-b6ae-90fdc991544a_1681262039.6172855.png)\\n\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string> dirOrFiles;\\n        stringstream ss(path);\\n        string dirOrFile;\\n        while (getline(ss, dirOrFile, \\'/\\')) {\\n            if (!dirOrFiles.empty() && dirOrFile == \"..\") {\\n                dirOrFiles.pop_back();\\n            } else if (dirOrFile != \".\" && dirOrFile != \"\" && dirOrFile != \"..\") {\\n                dirOrFiles.push_back(dirOrFile);\\n            }\\n        }\\n        string simplified_path = \"\";\\n        for (string dirOrFile : dirOrFiles) {\\n            simplified_path += \"/\" + dirOrFile;\\n        }\\n        return simplified_path.empty() ? \"/\" : simplified_path;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Deque<String> dirOrFiles = new ArrayDeque<>();\\n        for (String dirOrFile : path.split(\"/\")) {\\n            if (!dirOrFiles.isEmpty() && dirOrFile.equals(\"..\")) {\\n                dirOrFiles.removeLast();\\n            } else if (!dirOrFile.equals(\".\") && !dirOrFile.equals(\"\") && !dirOrFile.equals(\"..\")) {\\n                dirOrFiles.addLast(dirOrFile);\\n            }\\n        }\\n        StringBuilder simplified_path = new StringBuilder();\\n        for (String dirOrFile : dirOrFiles) {\\n            simplified_path.append(\"/\").append(dirOrFile);\\n        }\\n        return simplified_path.length() == 0 ? \"/\" : simplified_path.toString();\\n    }\\n}\\n```\\n```Python []\\nclass Solution:\\n    def simplifyPath(self, path):\\n        dirOrFiles = []\\n        path = path.split(\"/\")\\n        for elem in path:\\n            if dirOrFiles and elem == \"..\":\\n                dirOrFiles.pop()\\n            elif elem not in [\".\", \"\", \"..\"]:\\n                dirOrFiles.append(elem)\\n                \\n        return \"/\" + \"/\".join(dirOrFiles)\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "String",
                    "Stack"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string> dirOrFiles;\\n        stringstream ss(path);\\n        string dirOrFile;\\n        while (getline(ss, dirOrFile, \\'/\\')) {\\n            if (!dirOrFiles.empty() && dirOrFile == \"..\") {\\n                dirOrFiles.pop_back();\\n            } else if (dirOrFile != \".\" && dirOrFile != \"\" && dirOrFile != \"..\") {\\n                dirOrFiles.push_back(dirOrFile);\\n            }\\n        }\\n        string simplified_path = \"\";\\n        for (string dirOrFile : dirOrFiles) {\\n            simplified_path += \"/\" + dirOrFile;\\n        }\\n        return simplified_path.empty() ? \"/\" : simplified_path;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Deque<String> dirOrFiles = new ArrayDeque<>();\\n        for (String dirOrFile : path.split(\"/\")) {\\n            if (!dirOrFiles.isEmpty() && dirOrFile.equals(\"..\")) {\\n                dirOrFiles.removeLast();\\n            } else if (!dirOrFile.equals(\".\") && !dirOrFile.equals(\"\") && !dirOrFile.equals(\"..\")) {\\n                dirOrFiles.addLast(dirOrFile);\\n            }\\n        }\\n        StringBuilder simplified_path = new StringBuilder();\\n        for (String dirOrFile : dirOrFiles) {\\n            simplified_path.append(\"/\").append(dirOrFile);\\n        }\\n        return simplified_path.length() == 0 ? \"/\" : simplified_path.toString();\\n    }\\n}\\n```\n```Python []\\nclass Solution:\\n    def simplifyPath(self, path):\\n        dirOrFiles = []\\n        path = path.split(\"/\")\\n        for elem in path:\\n            if dirOrFiles and elem == \"..\":\\n                dirOrFiles.pop()\\n            elif elem not in [\".\", \"\", \"..\"]:\\n                dirOrFiles.append(elem)\\n                \\n        return \"/\" + \"/\".join(dirOrFiles)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1050620,
                "title": "c-stack-o-n-0ms-beats-100-easy-explanation",
                "content": "**EXPLANATION** (Idea is pretty simple)\\n- First make sure the given *path* **starts and ends** with ```\\'/\\'``` if **not** so then **append** a ```\\'/\\'``` at the end of *path*.\\n- Create a **stack of string**.\\n- Initialize **ans** string to ```\"\"``` and start iterating the *path* string from **\\'1\\' index as path[0] will always be ```\\'/\\'```**.\\n- Create a **temp** variable which will keep **substrings** upto ```\\'/\\'```, after that it will be checked with some conditions and then reset it back to ```\"\"```. \\n- In each iteration check whether **```path[i] == \\'/\\'```**, if **true** then check our **temp string** on the basis of below conditions (according to question ) :\\n\\t- If ```temp==\"\" || temp==\".\"``` then **ignore.**\\n\\t- If ```temp==\"..\"``` then **pop the top element from stack if it exists**.\\n\\t- If ```non of above matches``` then **push temp to stack**. \\nAfter checking the above conditions, **reset temp to ```\"\"```**\\n- Finally, after the above loop ends, **pop all the elements of the stack and store it in ans** with a ```\\'/\\'``` in front, shown as follows : ```ans=\"/\"+s.top()+ans```.\\n - Return **ans**\\n\\n\\n**CODE IMPLEMENTATION**\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        int n=path.length();\\n        stack<string>s;\\n                \\n        if(path[n-1]!=\\'/\\') // so that initially path always ends with \\'/\\'\\n            path+=\"/\", ++n;\\n            \\n        int i=1; // since path always starts from \\'/\\'\\n        string ans=\"\";\\n        string temp=\"\";\\n        while(i<n){\\n            \\n            if(path[i]==\\'/\\'){ // check only if we encounter \\'/\\'\\n                \\n                if(temp==\"\" || temp==\".\"){\\n                    // ignore\\n                }\\n                else if(temp==\"..\"){\\n                    if(!s.empty()) s.pop(); // pop the top element from stack if exists\\n                }\\n                else{\\n                    s.push(temp); //push the directory or file name to stack\\n                }\\n                \\n                temp=\"\"; // reset temp\\n            }\\n            else{\\n                temp.push_back(path[i]); // else append to temp\\n            }\\n            \\n            ++i; // increment index\\n        }\\n        \\n        while(!s.empty()){ // add all the stack elements\\n            ans=\"/\"+s.top()+ans;\\n            s.pop();\\n        }\\n        \\n        if(ans.length()==0) // if no directory or file is present\\n            ans=\"/\"; // minimum root directory must be present in ans\\n        \\n        return ans;\\n    }\\n};\\n```\\n\\n**NOTE**\\nBecause of ```ans=\"/\"+s.top()+ans``` , the time complexity will be **O(n^2)**, but it can be further optimized to **O(n) amotized time-complexity** by reversing the stack using another stack and then then appending it to the end of the same memory of the *ans* string, ```ans+=reversed_stack.top()+\"/\"``` as shown below :\\n```\\nans=\"/\";\\n\\nstack<string>reversed_stack;\\n\\nif(s.empty()){\\n    return ans;\\n}\\n\\nwhile(!s.empty()){ // reverse the stack elements\\n    reversed_stack.push(s.top());\\n    s.pop();\\n}\\n\\nwhile(!reversed_stack.empty()){\\n    ans+=reversed_stack.top()+\"/\";\\n    reversed_stack.pop();\\n}\\n\\nreturn ans.substr(0,ans.length()-1);\\n```\\n\\n\\n**TIME COMPLEXITY**\\nO(n) [ Because of the iterating the path string once ]\\n\\n**SPACE COMPLEXITY**\\nO(n+n) [ Because of the above two stacks ]",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\'/\\'```\n```\\'/\\'```\n```\"\"```\n```\\'/\\'```\n```\\'/\\'```\n```\"\"```\n```path[i] == \\'/\\'```\n```temp==\"\" || temp==\".\"```\n```temp==\"..\"```\n```non of above matches```\n```\"\"```\n```\\'/\\'```\n```ans=\"/\"+s.top()+ans```\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        int n=path.length();\\n        stack<string>s;\\n                \\n        if(path[n-1]!=\\'/\\') // so that initially path always ends with \\'/\\'\\n            path+=\"/\", ++n;\\n            \\n        int i=1; // since path always starts from \\'/\\'\\n        string ans=\"\";\\n        string temp=\"\";\\n        while(i<n){\\n            \\n            if(path[i]==\\'/\\'){ // check only if we encounter \\'/\\'\\n                \\n                if(temp==\"\" || temp==\".\"){\\n                    // ignore\\n                }\\n                else if(temp==\"..\"){\\n                    if(!s.empty()) s.pop(); // pop the top element from stack if exists\\n                }\\n                else{\\n                    s.push(temp); //push the directory or file name to stack\\n                }\\n                \\n                temp=\"\"; // reset temp\\n            }\\n            else{\\n                temp.push_back(path[i]); // else append to temp\\n            }\\n            \\n            ++i; // increment index\\n        }\\n        \\n        while(!s.empty()){ // add all the stack elements\\n            ans=\"/\"+s.top()+ans;\\n            s.pop();\\n        }\\n        \\n        if(ans.length()==0) // if no directory or file is present\\n            ans=\"/\"; // minimum root directory must be present in ans\\n        \\n        return ans;\\n    }\\n};\\n```\n```ans=\"/\"+s.top()+ans```\n```ans+=reversed_stack.top()+\"/\"```\n```\\nans=\"/\";\\n\\nstack<string>reversed_stack;\\n\\nif(s.empty()){\\n    return ans;\\n}\\n\\nwhile(!s.empty()){ // reverse the stack elements\\n    reversed_stack.push(s.top());\\n    s.pop();\\n}\\n\\nwhile(!reversed_stack.empty()){\\n    ans+=reversed_stack.top()+\"/\";\\n    reversed_stack.pop();\\n}\\n\\nreturn ans.substr(0,ans.length()-1);\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25779,
                "title": "9-line-python-solution-easy-to-understand",
                "content": "    def simplifyPath(self, path):\\n        stack = []\\n        for token in path.split('/'):\\n            if token in ('', '.'):\\n                pass\\n            elif token == '..':\\n                if stack: stack.pop()\\n            else:\\n                stack.append(token)\\n        return '/' + '/'.join(stack)",
                "solutionTags": [
                    "Python",
                    "Stack"
                ],
                "code": "    def simplifyPath(self, path):\\n        stack = []\\n        for token in path.split('/'):\\n            if token in ('', '.'):\\n                pass\\n            elif token == '..':\\n                if stack: stack.pop()\\n            else:\\n                stack.append(token)\\n        return '/' + '/'.join(stack)",
                "codeTag": "Python3"
            },
            {
                "id": 3406682,
                "title": "python-java-c-simple-solution-easy-to-understand",
                "content": "# Please UPVOTE \\uD83D\\uDC4D\\n\\n**!! BIG ANNOUNCEMENT !!**\\nI am Giving away my premium content videos related to computer science and data science and also will be sharing well-structured assignments and study materials to clear interviews at top companies to my first 10,000 Subscribers. So, **DON\\'T FORGET** to Subscribe\\n\\n**Search \\uD83D\\uDC49`Tech Wired leetcode` on YouTube to Subscribe**\\n# OR \\n**Click the Link in my Leetcode Profile to Subscribe**\\n\\n# Video Solution\\n\\n**Search \\uD83D\\uDC49 `Simplify Path by Tech Wired` on YouTube**\\n\\n![Yellow & Black Earn Money YouTube Thumbnail (14).png](https://assets.leetcode.com/users/images/a5f0dbb8-6a74-403e-b875-e24a2ba32966_1681263193.499577.png)\\n\\n\\nHappy Learning, Cheers Guys \\uD83D\\uDE0A\\n\\n# Approach:\\n\\n- Initialize an empty stack to hold the directories in the simplified path.\\n- Split the input path string into individual directories using the forward slash (\"/\") as a separator.\\nFor each directory:\\n- If the directory is a parent directory reference (\"..\") and the stack is non-empty, pop the last directory off the stack to remove the preceding directory.\\n- If the directory is not a special directory reference (i.e. neither \".\", \"\" nor \"..\"), append it to the stack.\\n- Construct the simplified path by joining the directories in the stack with forward slashes (\"/\") and adding a leading forward slash (\"/\").\\n\\n\\n# Intuition:\\nThe problem asks us to simplify a path in the Unix-style directory format, which consists of a sequence of directory names separated by forward slashes. The path may contain special directory references, such as \".\" (current directory), \"\" (empty directory), and \"..\" (parent directory). We need to remove any redundant directories and parent directory references to simplify the path.\\n\\nTo solve the problem, we can use a stack to keep track of the directories in the simplified path. We iterate over each directory in the input path and perform the following actions:\\n\\n- If the directory is a parent directory reference (\"..\") and the stack is non-empty, we pop the last directory off the stack to remove the preceding directory.\\n- If the directory is not a special directory reference, we append it to the stack.\\n- We then construct the simplified path by joining the directories in the stack with forward slashes and adding a leading forward slash.\\n- Using a stack allows us to keep track of the directories in the path in a last-in-first-out (LIFO) order, which is convenient for removing parent directory references. By only appending non-special directories to the stack, we can ensure that the simplified path does not contain any redundant directories or empty directory references. - Finally, joining the directories in the stack with forward slashes gives us the simplified path in the correct format.\\n\\n\\n```Python []\\nclass Solution:\\n    def simplifyPath(self, path):\\n        dir_stack = []\\n        path = path.split(\"/\")\\n        for elem in path:\\n            if dir_stack and elem == \"..\":\\n                dir_stack.pop()\\n            elif elem not in [\".\", \"\", \"..\"]:\\n                dir_stack.append(elem)\\n                \\n        return \"/\" + \"/\".join(dir_stack)\\n\\n```\\n```Java []\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Deque<String> dir_stack = new ArrayDeque<>();\\n        for (String dir : path.split(\"/\")) {\\n            if (!dir_stack.isEmpty() && dir.equals(\"..\")) {\\n                dir_stack.removeLast();\\n            } else if (!dir.equals(\".\") && !dir.equals(\"\") && !dir.equals(\"..\")) {\\n                dir_stack.addLast(dir);\\n            }\\n        }\\n        StringBuilder simplified_path = new StringBuilder();\\n        for (String dir : dir_stack) {\\n            simplified_path.append(\"/\").append(dir);\\n        }\\n        return simplified_path.length() == 0 ? \"/\" : simplified_path.toString();\\n    }\\n}\\n\\n```\\n```C++ []\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string> dir_stack;\\n        stringstream ss(path);\\n        string dir;\\n        while (getline(ss, dir, \\'/\\')) {\\n            if (!dir_stack.empty() && dir == \"..\") {\\n                dir_stack.pop_back();\\n            } else if (dir != \".\" && dir != \"\" && dir != \"..\") {\\n                dir_stack.push_back(dir);\\n            }\\n        }\\n        string simplified_path = \"\";\\n        for (string dir : dir_stack) {\\n            simplified_path += \"/\" + dir;\\n        }\\n        return simplified_path.empty() ? \"/\" : simplified_path;\\n    }\\n};\\n\\n```\\n![image.png](https://assets.leetcode.com/users/images/e2515d84-99cf-4499-80fb-fe458e1bbae2_1678932606.8004954.png)\\n\\n# Please UPVOTE \\uD83D\\uDC4D\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "String",
                    "Stack"
                ],
                "code": "```Python []\\nclass Solution:\\n    def simplifyPath(self, path):\\n        dir_stack = []\\n        path = path.split(\"/\")\\n        for elem in path:\\n            if dir_stack and elem == \"..\":\\n                dir_stack.pop()\\n            elif elem not in [\".\", \"\", \"..\"]:\\n                dir_stack.append(elem)\\n                \\n        return \"/\" + \"/\".join(dir_stack)\\n\\n```\n```Java []\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Deque<String> dir_stack = new ArrayDeque<>();\\n        for (String dir : path.split(\"/\")) {\\n            if (!dir_stack.isEmpty() && dir.equals(\"..\")) {\\n                dir_stack.removeLast();\\n            } else if (!dir.equals(\".\") && !dir.equals(\"\") && !dir.equals(\"..\")) {\\n                dir_stack.addLast(dir);\\n            }\\n        }\\n        StringBuilder simplified_path = new StringBuilder();\\n        for (String dir : dir_stack) {\\n            simplified_path.append(\"/\").append(dir);\\n        }\\n        return simplified_path.length() == 0 ? \"/\" : simplified_path.toString();\\n    }\\n}\\n\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string> dir_stack;\\n        stringstream ss(path);\\n        string dir;\\n        while (getline(ss, dir, \\'/\\')) {\\n            if (!dir_stack.empty() && dir == \"..\") {\\n                dir_stack.pop_back();\\n            } else if (dir != \".\" && dir != \"\" && dir != \"..\") {\\n                dir_stack.push_back(dir);\\n            }\\n        }\\n        string simplified_path = \"\";\\n        for (string dir : dir_stack) {\\n            simplified_path += \"/\" + dir;\\n        }\\n        return simplified_path.empty() ? \"/\" : simplified_path;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25687,
                "title": "c-using-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        string res, s;\\n        stack<string>stk;\\n        stringstream ss(path);\\n        while(getline(ss, s, '/')) {\\n            if (s == \"\" || s == \".\") continue;\\n            if (s == \"..\" && !stk.empty()) stk.pop();\\n            else if (s != \"..\") stk.push(s);\\n        }\\n        while(!stk.empty()){\\n            res = \"/\"+ stk.top() + res;\\n            stk.pop();\\n        }\\n        return res.empty() ? \"/\" : res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        string res, s;\\n        stack<string>stk;\\n        stringstream ss(path);\\n        while(getline(ss, s, '/')) {\\n            if (s == \"\" || s == \".\") continue;\\n            if (s == \"..\" && !stk.empty()) stk.pop();\\n            else if (s != \"..\") stk.push(s);\\n        }\\n        while(!stk.empty()){\\n            res = \"/\"+ stk.top() + res;\\n            stk.pop();\\n        }\\n        return res.empty() ? \"/\" : res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1050697,
                "title": "c-simple-and-easy-solution-faster-than-94",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string> stack;\\n        string res, temp;\\n        stringstream p(path);\\n        \\n        while (getline(p, temp, \\'/\\')) {\\n            if (temp == \"\" or temp == \".\") continue;\\n            if (!stack.empty() && temp == \"..\")\\n                stack.pop_back();\\n            else if (temp != \"..\")\\n                stack.push_back(temp);\\n        }\\n        \\n        for (auto s : stack)\\n            res += \"/\" + s;\\n        \\n        return stack.empty() ? \"/\" : res;\\n    }\\n};\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string> stack;\\n        string res, temp;\\n        stringstream p(path);\\n        \\n        while (getline(p, temp, \\'/\\')) {\\n            if (temp == \"\" or temp == \".\") continue;\\n            if (!stack.empty() && temp == \"..\")\\n                stack.pop_back();\\n            else if (temp != \"..\")\\n                stack.push_back(temp);\\n        }\\n        \\n        for (auto s : stack)\\n            res += \"/\" + s;\\n        \\n        return stack.empty() ? \"/\" : res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 500734,
                "title": "javascript-solution",
                "content": "### The idea\\n1. Split commands with `/`\\n2. Use a stack to apply commands\\n``` javascript\\n/**\\n * @param {string} path\\n * @return {string}\\n */\\nvar simplifyPath = function(path) {\\n    let stack = [];\\n    path = path.split(\\'/\\');\\n    \\n    for (let i=0;i<path.length;i++) {\\n        if (path[i]==\\'.\\' || path[i]==\\'\\') continue;\\n        if (path[i]==\\'..\\') stack.pop();\\n        else stack.push(path[i]);\\n    }\\n    \\n    return \\'/\\'+stack.join(\\'/\\');\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` javascript\\n/**\\n * @param {string} path\\n * @return {string}\\n */\\nvar simplifyPath = function(path) {\\n    let stack = [];\\n    path = path.split(\\'/\\');\\n    \\n    for (let i=0;i<path.length;i++) {\\n        if (path[i]==\\'.\\' || path[i]==\\'\\') continue;\\n        if (path[i]==\\'..\\') stack.pop();\\n        else stack.push(path[i]);\\n    }\\n    \\n    return \\'/\\'+stack.join(\\'/\\');\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 25773,
                "title": "my-o-n-ac-code-just-need-to-handle-two-special-cases",
                "content": " 1. traverse the string to record each folder name.\\n 2. two special cases:\\n\\na.double dot:pop one.\\n  \\nb.single dot: do nothing (don`t push it).\\n\\n\\n\\n\\n    string simplifyPath(string path) {\\n    \\tvector<string>   nameVect;\\n    \\tstring name;\\n    \\t\\n    \\tpath.push_back('/');\\n    \\tfor(int i=0;i<path.size();i++){\\n    \\t\\tif(path[i]=='/'){\\n    \\t\\t\\tif(name.size()==0)continue;\\n    \\t\\t\\tif(name==\"..\"){\\t\\t//special case 1\\uff1adouble dot\\uff0cpop dir\\n    \\t\\t\\t     if(nameVect.size()>0)nameVect.pop_back();\\n    \\t\\t\\t}else if(name==\".\"){//special case 2:singel dot\\uff0cdon`t push\\n    \\t\\t\\t}else{\\t\\t\\t\\n    \\t\\t\\t\\tnameVect.push_back(name);\\n    \\t\\t\\t}\\n    \\t\\t\\tname.clear();\\n    \\t\\t}else{\\n    \\t\\t\\tname.push_back(path[i]);//record the name\\n    \\t\\t}\\n    \\t}\\n    \\n    \\tstring result;\\n    \\tif(nameVect.empty())return \"/\";\\n    \\tfor(int i=0;i<nameVect.size();i++){\\n    \\t\\tresult.append(\"/\"+nameVect[i]);\\n    \\t}\\n    \\treturn result;\\n    }",
                "solutionTags": [],
                "code": " 1. traverse the string to record each folder name.\\n 2. two special cases:\\n\\na.double dot:pop one.\\n  \\nb.single dot: do nothing (don`t push it).\\n\\n\\n\\n\\n    string simplifyPath(string path) {\\n    \\tvector<string>   nameVect;\\n    \\tstring name;\\n    \\t\\n    \\tpath.push_back('/');\\n    \\tfor(int i=0;i<path.size();i++){\\n    \\t\\tif(path[i]=='/'){\\n    \\t\\t\\tif(name.size()==0)continue;\\n    \\t\\t\\tif(name==\"..\"){\\t\\t//special case 1\\uff1adouble dot\\uff0cpop dir\\n    \\t\\t\\t     if(nameVect.size()>0)nameVect.pop_back();\\n    \\t\\t\\t}else if(name==\".\"){//special case 2:singel dot\\uff0cdon`t push\\n    \\t\\t\\t}else{\\t\\t\\t\\n    \\t\\t\\t\\tnameVect.push_back(name);\\n    \\t\\t\\t}\\n    \\t\\t\\tname.clear();\\n    \\t\\t}else{\\n    \\t\\t\\tname.push_back(path[i]);//record the name\\n    \\t\\t}\\n    \\t}\\n    \\n    \\tstring result;\\n    \\tif(nameVect.empty())return \"/\";\\n    \\tfor(int i=0;i<nameVect.size();i++){\\n    \\t\\tresult.append(\"/\"+nameVect[i]);\\n    \\t}\\n    \\treturn result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3406777,
                "title": "c-java-python-beginner-friendly-explanation-multiple-testcase-using-stack",
                "content": "# Approach\\n1. Create a Stack of String with following condition.\\n2. Iterate the loop till you doesn\\'t reaches the end of string.\\n3. If you encounter a \"/\" then ignore it.\\n4. Create a temp String & Iterate the while loop till you doesn\\'t find \"/\" and append it to temp.\\n4. Now check if temp == \".\" , then ignore it.\\n5. If temp == \"..\" then pop the element from the stack if it exists.\\n6. If no of the above 2 matches push temp to stack as you find a valid path.\\n7. Check out temp string on basis of above conditions till you doesn\\'t find \"/\".\\n8. Now add all stack elements to result as res = \"/\" + st.top() + res\\n9. If res.size() is 0 then return \"/\" if no directory or file is present.\\nAt last return res.\\n```\\n**See This Testcase for better understanding **\\ninput : \"/home/../foo/\"             output : \"/foo\"\\ninput : \"/home/test/../foo/\"        output : \"/home/foo\"\\ninput : \"/home/...//foo/\"           output : \"/home/.../foo\"\\n```\\n# Complexity\\n- Time complexity:\\n$$O(n)$$ \\n\\n- Space complexity:\\n $$O(n)$$\\n\\n```C++ []\\nclass Solution {\\npublic:\\nclass Solution\\n{\\npublic:\\n    string simplifyPath(string path)\\n    {\\n\\n        stack<string> st;\\n        string res;\\n\\n        for (int i = 0; i < path.size(); ++i)\\n        {\\n            if (path[i] == \\'/\\')\\n                continue;\\n            string temp;\\n\\n            while (i < path.size() && path[i] != \\'/\\')\\n            {\\n                temp += path[i];\\n                ++i;\\n            }\\n            if (temp == \".\")\\n                continue;\\n            else if (temp == \"..\")\\n            {\\n                if (!st.empty())\\n                    st.pop();\\n            }\\n            else\\n                st.push(temp);\\n        }\\n\\n        while (!st.empty())\\n        {\\n            res = \"/\" + st.top() + res;\\n            st.pop();\\n        }\\n\\n        if (res.size() == 0)\\n            return \"/\";\\n\\n        return res;\\n    }\\n};\\n```\\n```Java []\\nclass Solution\\n{\\npublic\\n    String simplifyPath(String path)\\n    {\\n        Stack<String> stack = new Stack<>();    \\n        String[] directories = path.split(\"/\"); \\n        for (String dir : directories)\\n        { \\n            if (dir.equals(\".\") || dir.isEmpty())\\n            { \\n                continue;\\n            }\\n            else if (dir.equals(\"..\"))\\n            { \\n                if (!stack.isEmpty())\\n                { \\n                    stack.pop();\\n                }\\n            }\\n            else\\n            { \\n                stack.push(dir);\\n            }\\n        }\\n        return \"/\" + String.join(\"/\", stack); \\n    }\\n}\\n```\\n```python []\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        stack = []\\n        directories = path.split(\"/\")\\n        for dir in directories:\\n            if dir == \".\" or not dir:\\n                continue\\n            elif dir == \"..\":\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(dir)\\n        return \"/\" + \"/\".join(stack)\\n```\\n![Screenshot 2023-04-12 at 11.31.36 AM.png](https://assets.leetcode.com/users/images/69e6623a-6d9d-43dd-8618-c170cb4d1a33_1681279337.5105672.png)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "String",
                    "Stack"
                ],
                "code": "```\\n**See This Testcase for better understanding **\\ninput : \"/home/../foo/\"             output : \"/foo\"\\ninput : \"/home/test/../foo/\"        output : \"/home/foo\"\\ninput : \"/home/...//foo/\"           output : \"/home/.../foo\"\\n```\n```C++ []\\nclass Solution {\\npublic:\\nclass Solution\\n{\\npublic:\\n    string simplifyPath(string path)\\n    {\\n\\n        stack<string> st;\\n        string res;\\n\\n        for (int i = 0; i < path.size(); ++i)\\n        {\\n            if (path[i] == \\'/\\')\\n                continue;\\n            string temp;\\n\\n            while (i < path.size() && path[i] != \\'/\\')\\n            {\\n                temp += path[i];\\n                ++i;\\n            }\\n            if (temp == \".\")\\n                continue;\\n            else if (temp == \"..\")\\n            {\\n                if (!st.empty())\\n                    st.pop();\\n            }\\n            else\\n                st.push(temp);\\n        }\\n\\n        while (!st.empty())\\n        {\\n            res = \"/\" + st.top() + res;\\n            st.pop();\\n        }\\n\\n        if (res.size() == 0)\\n            return \"/\";\\n\\n        return res;\\n    }\\n};\\n```\n```Java []\\nclass Solution\\n{\\npublic\\n    String simplifyPath(String path)\\n    {\\n        Stack<String> stack = new Stack<>();    \\n        String[] directories = path.split(\"/\"); \\n        for (String dir : directories)\\n        { \\n            if (dir.equals(\".\") || dir.isEmpty())\\n            { \\n                continue;\\n            }\\n            else if (dir.equals(\"..\"))\\n            { \\n                if (!stack.isEmpty())\\n                { \\n                    stack.pop();\\n                }\\n            }\\n            else\\n            { \\n                stack.push(dir);\\n            }\\n        }\\n        return \"/\" + String.join(\"/\", stack); \\n    }\\n}\\n```\n```python []\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        stack = []\\n        directories = path.split(\"/\")\\n        for dir in directories:\\n            if dir == \".\" or not dir:\\n                continue\\n            elif dir == \"..\":\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(dir)\\n        return \"/\" + \"/\".join(stack)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1493083,
                "title": "java-tc-o-n-sc-o-n-using-stack-stringbuilder",
                "content": "```\\n/**\\n * Time Complexity: O(N)\\n * 1. O(N) - Each character will be traversed once.\\n * 2. O(N) - Each character will be added to StringBuilder.\\n * 3. O(N) - sb.toString()\\n *\\n * Space Complexity: O(N)\\n * 1. StringBuilder can take upto N characters.\\n * 2. Stack will store an integer for each valid directory. (This is also bounded by O(N))\\n *\\n * N = Length of input path.\\n */\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        if (path == null) {\\n            throw new IllegalArgumentException(\"Input string is null\");\\n        }\\n\\n        if (path.length() <= 1) {\\n            return \"/\";\\n        }\\n\\n        // Stack is used to store the length of StringBuilder until previous directory.\\n        Deque<Integer> stack = new ArrayDeque<>();\\n        StringBuilder sb = new StringBuilder();\\n\\n        int i = 0;\\n        int len = path.length();\\n\\n        while (i < len) {\\n            if (path.charAt(i) == \\'/\\') {\\n                i++;\\n                continue;\\n            }\\n\\n            StringBuilder dir = new StringBuilder();\\n            while (i < len && path.charAt(i) != \\'/\\') {\\n                dir.append(path.charAt(i));\\n                i++;\\n            }\\n\\n            String dirName = dir.toString();\\n            switch (dirName) {\\n                case \".\":\\n                    break;\\n                case \"..\":\\n                    if (!stack.isEmpty()) {\\n                        sb.setLength(stack.pop());\\n                    }\\n                    break;\\n                default:\\n                    stack.push(sb.length());\\n                    sb.append(\\'/\\').append(dirName);\\n            }\\n        }\\n\\n        return sb.length() != 0 ? sb.toString() : \"/\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Stack"
                ],
                "code": "```\\n/**\\n * Time Complexity: O(N)\\n * 1. O(N) - Each character will be traversed once.\\n * 2. O(N) - Each character will be added to StringBuilder.\\n * 3. O(N) - sb.toString()\\n *\\n * Space Complexity: O(N)\\n * 1. StringBuilder can take upto N characters.\\n * 2. Stack will store an integer for each valid directory. (This is also bounded by O(N))\\n *\\n * N = Length of input path.\\n */\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        if (path == null) {\\n            throw new IllegalArgumentException(\"Input string is null\");\\n        }\\n\\n        if (path.length() <= 1) {\\n            return \"/\";\\n        }\\n\\n        // Stack is used to store the length of StringBuilder until previous directory.\\n        Deque<Integer> stack = new ArrayDeque<>();\\n        StringBuilder sb = new StringBuilder();\\n\\n        int i = 0;\\n        int len = path.length();\\n\\n        while (i < len) {\\n            if (path.charAt(i) == \\'/\\') {\\n                i++;\\n                continue;\\n            }\\n\\n            StringBuilder dir = new StringBuilder();\\n            while (i < len && path.charAt(i) != \\'/\\') {\\n                dir.append(path.charAt(i));\\n                i++;\\n            }\\n\\n            String dirName = dir.toString();\\n            switch (dirName) {\\n                case \".\":\\n                    break;\\n                case \"..\":\\n                    if (!stack.isEmpty()) {\\n                        sb.setLength(stack.pop());\\n                    }\\n                    break;\\n                default:\\n                    stack.push(sb.length());\\n                    sb.append(\\'/\\').append(dirName);\\n            }\\n        }\\n\\n        return sb.length() != 0 ? sb.toString() : \"/\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25704,
                "title": "share-my-8ms-java-solution",
                "content": "\\tpublic String simplifyPath(String path) {\\n\\t\\tString[] dir = path.split(\"/\");\\n\\t\\tString[] stack = new String[dir.length];\\n\\t\\tint ptr = 0;\\n\\t\\tfor(int i = 0; i < dir.length; i++){\\n\\t\\t\\tif(dir[i].equals(\".\") || dir[i].equals(\"\")){\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}else if(dir[i].equals(\"..\")){\\n\\t\\t\\t\\tif(ptr > 0) ptr--;\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tstack[ptr] = dir[i];\\n\\t\\t\\t\\tptr++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tStringBuilder result = new StringBuilder();\\n\\t\\tfor(int i = 0; i < ptr; i++){\\n\\t\\t\\tresult.append(\"/\");\\n\\t\\t\\tresult.append(stack[i]);\\n\\t\\t}\\n\\t\\treturn result.length() == 0 ? \"/\" : result.toString();\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\tpublic String simplifyPath(String path) {\\n\\t\\tString[] dir = path.split(\"/\");\\n\\t\\tString[] stack = new String[dir.length];\\n\\t\\tint ptr = 0;\\n\\t\\tfor(int i = 0; i < dir.length; i++){\\n\\t\\t\\tif(dir[i].equals(\".\") || dir[i].equals(\"\")){\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}else if(dir[i].equals(\"..\")){\\n\\t\\t\\t\\tif(ptr > 0) ptr--;\\n\\t\\t\\t}else{\\n\\t\\t\\t\\tstack[ptr] = dir[i];\\n\\t\\t\\t\\tptr++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tStringBuilder result = new StringBuilder();\\n\\t\\tfor(int i = 0; i < ptr; i++){\\n\\t\\t\\tresult.append(\"/\");\\n\\t\\t\\tresult.append(stack[i]);\\n\\t\\t}\\n\\t\\treturn result.length() == 0 ? \"/\" : result.toString();\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 3407155,
                "title": "java-explained-with-example-beginner-friendly-stack",
                "content": "# Intuition\\nSince our operations of moving ahead or moving down a directory depend on the current string we see, so data structure that comes to mind is Stack\\n\\nIf you have used linux based system you must be already aware of these\\n- /abc/  --> means get into the folder /abc/\\n- /./  --> \".\" indicates current directory, that is stay where you are\\n- /../ --> \"..\" means step down a directory where you are, equivalent to a back in windows.\\n\\n- Now Lets understand by an **Example**\\n**Input**: \"/a/./b/../../c/\"\\n**Output**: /c\\nWe always start with home directory\\nAfter spilting Array [\"a\", \".\", \"b\", \"..\", \"..\", \"c]\\n\"a\" --> move to /a\\n\".\" --> stay in current directory still in /a\\n\"b\" --> move to directory b i.e /a/b\\n\"..\" --> move back i.e is /a again\\n\"..\" --> move back i.e back to home directory /\\n\"c\" --> move to c directory i.e /c\\nAnswer is /c\\n---\\n\\n# Approach\\n1) Split the input string on basis of \\'/\\'\\nThis will separate all input will also resolve are double \\'//\\' cases(leading to \"\" empty string).\\n2) Now that we got a \\'/\\' speparated string array\\n3) We define a skip set (\"..\", \".\", \"\")\\n- if we encouter \".\" means stay in the current directory\\n- \"\" is a result of // being separated, so skip that\\nI mainted a skip set to write clean code\\n\\n```\\nif(!dir.equals(\"..\") || !dir.equals(\".\") || !dir.equals(\"\"))\\n//instead did this\\nif(!skip.contains(dir))\\n```\\n4) Now we start iterating over array. \\n- If we encouter \"..\" and stack is non empty than we need to pop-out or move backwards\\n- If we encounter anything other than these (\"..\", \".\", \"\") we add to stack\\n5) At end, form a Stringbuilder out of the stack.\\n### Why StringBuilder and not String is being used. [See this](https://leetcode.com/problems/removing-stars-from-a-string/solutions/3402865/java-explained-why-use-stringbuilder-than-string-beginner-friendly/)\\n\\n---\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n) : Since we are going through all the elements of the string once.\\n\\n---\\n\\nHope it is easy to understand.\\nLet me know if there is something unclear and i can fix it.\\n\\nOtherwise, please upvote if you like the solution, it would be encouraging\\n\\n---\\n\\n\\n# Code\\n```\\nclass Solution {\\n   public String simplifyPath(String path) {\\n    Stack<String> stack = new Stack<>();\\n    Set<String> skip = new HashSet<>(Arrays.asList(\"..\", \".\", \"\"));\\n    for (String dir : path.split(\"/\")) {\\n        if (dir.equals(\"..\") && !stack.isEmpty())\\n         stack.pop();\\n        else if (!skip.contains(dir))\\n         stack.push(dir);\\n    }\\n    StringBuilder res = new StringBuilder();\\n    while(!stack.isEmpty()){\\n            res.insert(0,stack.pop()).insert(0,\"/\");\\n        }\\n    return res.isEmpty() ? \"/\" : res.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```\\nif(!dir.equals(\"..\") || !dir.equals(\".\") || !dir.equals(\"\"))\\n//instead did this\\nif(!skip.contains(dir))\\n```\n```\\nclass Solution {\\n   public String simplifyPath(String path) {\\n    Stack<String> stack = new Stack<>();\\n    Set<String> skip = new HashSet<>(Arrays.asList(\"..\", \".\", \"\"));\\n    for (String dir : path.split(\"/\")) {\\n        if (dir.equals(\"..\") && !stack.isEmpty())\\n         stack.pop();\\n        else if (!skip.contains(dir))\\n         stack.push(dir);\\n    }\\n    StringBuilder res = new StringBuilder();\\n    while(!stack.isEmpty()){\\n            res.insert(0,stack.pop()).insert(0,\"/\");\\n        }\\n    return res.isEmpty() ? \"/\" : res.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1847338,
                "title": "beginner-friendly-java-javascript-python-solution",
                "content": "**Python**\\n```\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        stack = []\\n        for p in path.split(\"/\"):\\n            if p == \\'..\\' and len(stack) > 0:\\n                stack.pop()\\n            if p == \\'\\' or p == \\'.\\' or p ==\\'..\\':\\n                continue\\n            else:\\n                stack.append(p)\\n        return \\'/\\' + \\'/\\'.join(stack)\\n```\\n**JavaScript**\\n```\\nvar simplifyPath = function(path) {\\n    path = path.split(\\'/\\');\\n    let stack = [];\\n    for(let p of path){\\n        if(p == \\'.\\' || p == \\'\\') continue;\\n        else if(p == \\'..\\')   stack.pop();\\n        else stack.push(p);\\n    }\\n    return \\'/\\' + stack.join(\\'/\\');\\n};\\n```\\n**Java**\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack();\\n        Set<String> skip = new HashSet<>(Arrays.asList(\"..\", \".\", \"\"));\\n        for(String dir : path.split(\"/\")){\\n            if(dir.equals(\"..\") && !stack.isEmpty())    stack.pop();\\n            else if(!skip.contains(dir)) stack.push(dir);\\n        }\\n        return \"/\" + String.join(\"/\", stack);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "JavaScript"
                ],
                "code": "```\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        stack = []\\n        for p in path.split(\"/\"):\\n            if p == \\'..\\' and len(stack) > 0:\\n                stack.pop()\\n            if p == \\'\\' or p == \\'.\\' or p ==\\'..\\':\\n                continue\\n            else:\\n                stack.append(p)\\n        return \\'/\\' + \\'/\\'.join(stack)\\n```\n```\\nvar simplifyPath = function(path) {\\n    path = path.split(\\'/\\');\\n    let stack = [];\\n    for(let p of path){\\n        if(p == \\'.\\' || p == \\'\\') continue;\\n        else if(p == \\'..\\')   stack.pop();\\n        else stack.push(p);\\n    }\\n    return \\'/\\' + stack.join(\\'/\\');\\n};\\n```\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack();\\n        Set<String> skip = new HashSet<>(Arrays.asList(\"..\", \".\", \"\"));\\n        for(String dir : path.split(\"/\")){\\n            if(dir.equals(\"..\") && !stack.isEmpty())    stack.pop();\\n            else if(!skip.contains(dir)) stack.push(dir);\\n        }\\n        return \"/\" + String.join(\"/\", stack);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1739219,
                "title": "easy-c-solution-using-stl-with-detailed-explanations",
                "content": "> **If you\\u2019re interested in coding you can join my Discord Server, link in the comment section. Also if you find any mistake please let me know. Thank you!\\u2764\\uFE0F**\\n> \\n\\n---\\n\\n\\n## Explanation:\\n\\n### Solution 01\\n\\n- Using STL functions.\\n- We took a stack to store all the paths. We\\u2019ll have 3 operations to find all the paths:\\n    - `if(temp == \"\" || temp == \".\") continue;` we\\u2019ll ignore all empty or \\u2018.\\u2019 indexs.\\n    - `if(temp != \"..\" ) s.push(temp);` if it\\u2019s not a \\u2018..\\u2019 means it indicates a path, simply push it to stack.\\n    - `else if(!s.empty()) s.pop();` and finally if it\\u2019s \\u2018..\\u2019 means we have to go previous directory, so pop the last path from stack.\\n- If we find the stack is empty that means we\\u2019re in the root directory, so `return \\u201C/\\u201D`.\\n- Now we\\u2019ll add all the paths with a \\u2018/\\u2019. But for stack the last element will be on top. So we need to reverse the stack.\\n- Here we used a trick & added the top element before the current ans, by this top element of the stack will go end every time.\\n- **Time complexity:** O(n).\\n\\n---\\n\\n## Code:\\n\\n```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> s;\\n        string ans, temp;\\n        int n = path.size();\\n        stringstream X(path);\\n        \\n        while(getline(X, temp, \\'/\\')){\\n            if(temp == \"\" || temp == \".\") continue;\\n            if(temp != \"..\" ) s.push(temp);\\n            else if(!s.empty()) s.pop();\\n        }\\n        if(s.empty()) return \"/\";\\n        \\n        while(!s.empty()){\\n            ans = \\'/\\' + s.top() + ans;\\n            s.pop();\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n---\\n\\n> **Please upvote this solution**\\n>",
                "solutionTags": [
                    "C++",
                    "C",
                    "Stack"
                ],
                "code": "```cpp\\n//Solution 01:\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> s;\\n        string ans, temp;\\n        int n = path.size();\\n        stringstream X(path);\\n        \\n        while(getline(X, temp, \\'/\\')){\\n            if(temp == \"\" || temp == \".\") continue;\\n            if(temp != \"..\" ) s.push(temp);\\n            else if(!s.empty()) s.pop();\\n        }\\n        if(s.empty()) return \"/\";\\n        \\n        while(!s.empty()){\\n            ans = \\'/\\' + s.top() + ans;\\n            s.pop();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25794,
                "title": "python-easy-to-understand-solution-with-stack",
                "content": "```\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        parts = path.split(\"/\")\\n        stack = []\\n        for p in parts:\\n            if p in [\\'\\', \\'.\\']:\\n                continue\\n            elif p == \\'..\\':\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(p)\\n        return \\'/\\' + \\'/\\'.join(stack)\\n```",
                "solutionTags": [
                    "Python",
                    "Stack",
                    "Queue"
                ],
                "code": "```\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        parts = path.split(\"/\")\\n        stack = []\\n        for p in parts:\\n            if p in [\\'\\', \\'.\\']:\\n                continue\\n            elif p == \\'..\\':\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(p)\\n        return \\'/\\' + \\'/\\'.join(stack)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1847706,
                "title": "easy-java-solution-without-stack",
                "content": "```\\nclass Solution {\\n\\n    public String simplifyPath(String path) {\\n        String[] x = path.split(\"/\");\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = x.length - 1, sk = 0; i >= 0; i--) {\\n            if (x[i].equals(\".\") || x[i].length() == 0) continue;\\n            if (x[i].equals(\"..\")) sk++;  // increment skip count \\n            else if (sk > 0) sk--;  // skip it\\n            else sb.insert(0, \"/\" + x[i]);  // skip = 0? then add it.\\n        }\\n        if (sb.length() == 0) sb.append(\"/\");\\n        return sb.toString();\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n\\n    public String simplifyPath(String path) {\\n        String[] x = path.split(\"/\");\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = x.length - 1, sk = 0; i >= 0; i--) {\\n            if (x[i].equals(\".\") || x[i].length() == 0) continue;\\n            if (x[i].equals(\"..\")) sk++;  // increment skip count \\n            else if (sk > 0) sk--;  // skip it\\n            else sb.insert(0, \"/\" + x[i]);  // skip = 0? then add it.\\n        }\\n        if (sb.length() == 0) sb.append(\"/\");\\n        return sb.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1050559,
                "title": "java-easy-to-read-easy-to-understand",
                "content": "```\\npublic String simplifyPath(String path) {\\n        String[] dirs = path.split(\"/\");\\n        Deque<String> stack = new ArrayDeque<>();\\n        for(String s: dirs) {\\n            if(s.equals(\"\")) continue;\\n            if(s.equals(\".\")) continue;\\n            if(s.equals(\"..\")) stack.pollLast();\\n            else stack.add(s);\\n        }\\n        return \"/\" + String.join(\"/\", stack);\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic String simplifyPath(String path) {\\n        String[] dirs = path.split(\"/\");\\n        Deque<String> stack = new ArrayDeque<>();\\n        for(String s: dirs) {\\n            if(s.equals(\"\")) continue;\\n            if(s.equals(\".\")) continue;\\n            if(s.equals(\"..\")) stack.pollLast();\\n            else stack.add(s);\\n        }\\n        return \"/\" + String.join(\"/\", stack);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1915724,
                "title": "100-fastest-swift-solution-time-o-n-space-o-n",
                "content": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of path.\\n    //   - space: O(n), where n is the length of path.\\n\\n    func simplifyPath(_ path: String) -> String {\\n        let paths = path.split(separator: \"/\")\\n        \\n        var stack = [String]()\\n        for path in paths {\\n            guard path != \".\", !path.isEmpty else { continue }\\n            \\n            if path == \"..\" {\\n                if !stack.isEmpty {\\n                    stack.removeLast()\\n                }\\n            } else {\\n                stack.append(String(path))\\n            }\\n        }\\n        \\n        return \"/\\\\(stack.joined(separator: \"/\"))\"\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    // - Complexity:\\n    //   - time: O(n), where n is the length of path.\\n    //   - space: O(n), where n is the length of path.\\n\\n    func simplifyPath(_ path: String) -> String {\\n        let paths = path.split(separator: \"/\")\\n        \\n        var stack = [String]()\\n        for path in paths {\\n            guard path != \".\", !path.isEmpty else { continue }\\n            \\n            if path == \"..\" {\\n                if !stack.isEmpty {\\n                    stack.removeLast()\\n                }\\n            } else {\\n                stack.append(String(path))\\n            }\\n        }\\n        \\n        return \"/\\\\(stack.joined(separator: \"/\"))\"\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 550900,
                "title": "python-3-stack-2-solutions",
                "content": "```\\nclass Solution1:\\n    def simplifyPath(self, path: str) -> str:\\n        stack = []\\n        i = 0\\n        while i<len(path):\\n            while i< len(path) and path[i]==\\'/\\':\\n                i+=1\\n            start = i\\n            while i< len(path) and path[i]!=\\'/\\':\\n                i+=1\\n            strr = path[start:i]\\n            if strr == \\'..\\':\\n                if stack:\\n                    stack.pop()\\n            elif strr and strr != \\'.\\' :\\n                    stack.append(strr)\\n        if not stack:\\n            return \\'/\\'\\n        return \\'/\\' + \\'/\\'.join(stack)\\n```\\n\\n```\\nclass Solution2:\\n    def simplifyPath(self, path: str) -> str:\\n        strs = path.split(\\'/\\')\\n        res = []\\n        for s in strs:\\n            if s == \\'..\\':\\n                if res:\\n                    res.pop()\\n            elif s.isalpha() or (s and s!=\\'.\\'):\\n                res.append(s)\\n        return \\'/\\' + \\'/\\'.join(res)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution1:\\n    def simplifyPath(self, path: str) -> str:\\n        stack = []\\n        i = 0\\n        while i<len(path):\\n            while i< len(path) and path[i]==\\'/\\':\\n                i+=1\\n            start = i\\n            while i< len(path) and path[i]!=\\'/\\':\\n                i+=1\\n            strr = path[start:i]\\n            if strr == \\'..\\':\\n                if stack:\\n                    stack.pop()\\n            elif strr and strr != \\'.\\' :\\n                    stack.append(strr)\\n        if not stack:\\n            return \\'/\\'\\n        return \\'/\\' + \\'/\\'.join(stack)\\n```\n```\\nclass Solution2:\\n    def simplifyPath(self, path: str) -> str:\\n        strs = path.split(\\'/\\')\\n        res = []\\n        for s in strs:\\n            if s == \\'..\\':\\n                if res:\\n                    res.pop()\\n            elif s.isalpha() or (s and s!=\\'.\\'):\\n                res.append(s)\\n        return \\'/\\' + \\'/\\'.join(res)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25725,
                "title": "accepted-solution-using-deque",
                "content": "I think using Deque is probably the most intuitive way to solve this problem.\\n\\n    /**\\n     * Deque of strings (directories).\\n     * iterate path:\\n     *  if \"/\", continue,\\n     *  if \".\", conitnue,\\n     *  if \"..\", poll last,\\n     *  else, add a new directory\\n     * in the end, build result from deque.\\n     */\\n    public String simplifyPath(String path) {\\n        Deque<String> deque = new LinkedList<String>();\\n        String[] splits = path.split(\"/\");\\n        for (String split : splits) {\\n            // CATCH: must use \"equals()\" instead of \"==\",\\n            // because 'split' is a variable!\\n            // Also, 'split' could be empty string.\\n            if (split.equals(\"\"))\\n                continue;\\n            else if (split.equals(\".\"))\\n                continue;\\n            else if (split.equals(\"..\"))\\n                deque.pollLast();\\n            else\\n                deque.addLast(split);\\n        }\\n        StringBuilder builder = new StringBuilder();\\n        while (!deque.isEmpty()) {\\n            String s = deque.pollFirst();\\n            builder.append(\"/\").append(s);\\n        }\\n        if (builder.length() == 0)\\n            return \"/\";\\n        return builder.toString();\\n    }",
                "solutionTags": [],
                "code": "I think using Deque is probably the most intuitive way to solve this problem.\\n\\n    /**\\n     * Deque of strings (directories).\\n     * iterate path:\\n     *  if \"/\", continue,\\n     *  if \".\", conitnue,\\n     *  if \"..\", poll last,\\n     *  else, add a new directory\\n     * in the end, build result from deque.\\n     */\\n    public String simplifyPath(String path) {\\n        Deque<String> deque = new LinkedList<String>();\\n        String[] splits = path.split(\"/\");\\n        for (String split : splits) {\\n            // CATCH: must use \"equals()\" instead of \"==\",\\n            // because 'split' is a variable!\\n            // Also, 'split' could be empty string.\\n            if (split.equals(\"\"))\\n                continue;\\n            else if (split.equals(\".\"))\\n                continue;\\n            else if (split.equals(\"..\"))\\n                deque.pollLast();\\n            else\\n                deque.addLast(split);\\n        }\\n        StringBuilder builder = new StringBuilder();\\n        while (!deque.isEmpty()) {\\n            String s = deque.pollFirst();\\n            builder.append(\"/\").append(s);\\n        }\\n        if (builder.length() == 0)\\n            return \"/\";\\n        return builder.toString();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1847624,
                "title": "c-easy-to-understand-without-getline-or-split-simple-stack",
                "content": "**71. Simplify Path**\\n##### **APPROACH -**\\n*Use a **stack to store the directories**\\nCreate **curr to store the data between two forward slashes**\\nTraverse through the path maintaining the curr\\nWhenever / is encountered **push or pop the stack based upon curr**\\nFinally get the simplified path from the directories left in the stack*\\n\\n**Note: Initially add / to the end of the given path to ensure that the last curr is always considered**\\n\\n<br/>\\n\\n##### **COMPLEXITY -**\\n* **Time Complexity : O(N)**, where N = length of path\\n* **Space Complexity : O(M)**, where M = number of directories in path\\n\\n<br/>\\n\\n##### **CODE -**\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        string curr, simplifiedPath;\\n        stack<string> st;\\n        path.push_back(\\'/\\');\\n        \\n        for(char c : path) {\\n            if(c == \\'/\\') {\\n                if(curr.empty())    continue;\\n                else if(curr == \"..\") {\\n                    if(!st.empty())   st.pop();   // go to previous i.e. parent directory \\n                }\\n                else if(curr != \".\")    st.push(curr);   // add the new directory or file \\n                curr = \"\";\\n            }\\n            else\\n                curr.push_back(c);\\n        }\\n        \\n        while(!st.empty()) {\\n            simplifiedPath = \"/\" + st.top() + simplifiedPath;\\n            st.pop();\\n        }\\n        return simplifiedPath.empty() ? \"/\" : simplifiedPath;\\n    }\\n};\\n```\\n**If you found this helpful, please Upvote \\u2B06\\uFE0F**\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        string curr, simplifiedPath;\\n        stack<string> st;\\n        path.push_back(\\'/\\');\\n        \\n        for(char c : path) {\\n            if(c == \\'/\\') {\\n                if(curr.empty())    continue;\\n                else if(curr == \"..\") {\\n                    if(!st.empty())   st.pop();   // go to previous i.e. parent directory \\n                }\\n                else if(curr != \".\")    st.push(curr);   // add the new directory or file \\n                curr = \"\";\\n            }\\n            else\\n                curr.push_back(c);\\n        }\\n        \\n        while(!st.empty()) {\\n            simplifiedPath = \"/\" + st.top() + simplifiedPath;\\n            st.pop();\\n        }\\n        return simplifiedPath.empty() ? \"/\" : simplifiedPath;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407303,
                "title": "c-easy-solution-stack-explained",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> st;   // Stack is going to store folders\\n        string ans=\"\";  // Answer path\\n        for(int i=0;i<path.length();i++){  // Traversing through string\\n            if(path[i] == \\'/\\'){  // We always going to ignore \\'/\\'\\n                continue;\\n            }\\n            string temp=\"\";  // We are gonna store folder names in temp\\n            while(i<path.length() && path[i] != \\'/\\'){  // To store names we use this while loop\\n                temp += path[i];\\n                i++;\\n            }\\n            if(temp == \".\") continue;  // If we get a single \\'.\\' then there is no need of pushing in stamp\\n            else if(temp == \"..\"){  // This means that we have to go up in path\\n                if(!st.empty()) st.pop();  // To go up we have to pop\\n            }\\n            else{\\n                st.push(temp);  // If we get no . or .. that means we got the name of the folder\\n            }           \\n        } \\n        if(st.empty())  ans = \\'/\\';  // If there is nothing in our stack then we just need to return /;\\n        while(!st.empty()){  // If we have something in stack then we have to give in this order \"/home/xyz/abc\" etc\\n            ans = \\'/\\' + st.top() + ans;  // For that I am using this \\n            st.pop();\\n        }       \\n        return ans;  // Returning the resulting string \\n    }\\n};\\n```\\n\\n`If you are still not able to understand and know hindi, then I\\'ll suggest to search \"CodeFreaks Simplify paths\" on Youtube`  \\n\\n![upvote cat.jpeg](https://assets.leetcode.com/users/images/d3f17c86-efa7-4873-bd1f-a2564dceb9e6_1681275250.3060498.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> st;   // Stack is going to store folders\\n        string ans=\"\";  // Answer path\\n        for(int i=0;i<path.length();i++){  // Traversing through string\\n            if(path[i] == \\'/\\'){  // We always going to ignore \\'/\\'\\n                continue;\\n            }\\n            string temp=\"\";  // We are gonna store folder names in temp\\n            while(i<path.length() && path[i] != \\'/\\'){  // To store names we use this while loop\\n                temp += path[i];\\n                i++;\\n            }\\n            if(temp == \".\") continue;  // If we get a single \\'.\\' then there is no need of pushing in stamp\\n            else if(temp == \"..\"){  // This means that we have to go up in path\\n                if(!st.empty()) st.pop();  // To go up we have to pop\\n            }\\n            else{\\n                st.push(temp);  // If we get no . or .. that means we got the name of the folder\\n            }           \\n        } \\n        if(st.empty())  ans = \\'/\\';  // If there is nothing in our stack then we just need to return /;\\n        while(!st.empty()){  // If we have something in stack then we have to give in this order \"/home/xyz/abc\" etc\\n            ans = \\'/\\' + st.top() + ans;  // For that I am using this \\n            st.pop();\\n        }       \\n        return ans;  // Returning the resulting string \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2977070,
                "title": "line-by-line-explanation-beats-100-time-and-space-python",
                "content": "Here is Line by line code in \\n**Python :**\\n```\\ndef simplify_path(path):\\n    # Split path into a list of directory names\\n    dirs = path.split(\\'/\\')\\n    # Initialize the stack of directories\\n    stack = []\\n    # Iterate through the directories\\n    for d in dirs:\\n        # Ignore double slashes\\n        if d == \\'\\':\\n            continue\\n        # If it\\'s a double period, pop the top directory from the stack\\n        elif d == \\'..\\':\\n            if stack:\\n                stack.pop()\\n        # If it\\'s a single period or a regular directory name, add it to the stack\\n        elif d != \\'.\\':\\n            stack.append(d)\\n    # Construct the simplified canonical path\\n    simplified_path = \\'/\\' + \\'/\\'.join(stack)\\n    return simplified_path\\n```\\nUpvote if you find it useful",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Stack"
                ],
                "code": "```\\ndef simplify_path(path):\\n    # Split path into a list of directory names\\n    dirs = path.split(\\'/\\')\\n    # Initialize the stack of directories\\n    stack = []\\n    # Iterate through the directories\\n    for d in dirs:\\n        # Ignore double slashes\\n        if d == \\'\\':\\n            continue\\n        # If it\\'s a double period, pop the top directory from the stack\\n        elif d == \\'..\\':\\n            if stack:\\n                stack.pop()\\n        # If it\\'s a single period or a regular directory name, add it to the stack\\n        elif d != \\'.\\':\\n            stack.append(d)\\n    # Construct the simplified canonical path\\n    simplified_path = \\'/\\' + \\'/\\'.join(stack)\\n    return simplified_path\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1847554,
                "title": "python-go-stack-array-solution-and-explanation",
                "content": "**\\uD83D\\uDC46Please UPVOTE it if you find my soulutions are useful \\uD83D\\uDC46 Feel free to ask any question**\\n# [Python/GO] \\uD83C\\uDF1F Stack/Array Solution and Explanation \\uD83D\\uDC95\\n## 1\\uFE0F\\u20E3 Main Idea:\\n```A double period \\'..\\' refers to the directory up a level``` would definitely be a thing we need to solve. We can use stack to implement pop out to up a level\\n\\n**Algo**\\n1. Make path split by \"/\" into pathList\\n2. Iterate through pathList\\n\\t * If current directory == \"\" or directory ==\".\"  We do noops continue to next directory\\n\\t * If directory == \"..\", we have to pop out last member in stack, by doing this we can make path up a level\\n\\t * If it\\'s a directory, append it into stack\\n3. Iterate through stack and combine all directory into a output path\\n\\n**Note** : We implement we call *stack* by array, So we can pop out last element and still can iterate from begining to the end.\\n\\n## Complexity Analysis\\n* Time: O(N): Let N be the length of string\\n* Space: O(N): Iterate through path.split(\\'/\\') take O(N) and Add up res in stack take O(N) => O(2N) = O(N)\\n\\n## Code\\n\\n**Python**\\n```python\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        dirList = []\\n        \\n        for directory in path.split(\\'/\\') :\\n            # Ignore\\n            if not directory or directory == \".\":\\n                continue\\n            # Directory up a level\\n            if directory == \"..\":\\n                if dirList:\\n                    dirList.pop()\\n            # Append it in dirList\\n            else:\\n                dirList.append(directory)\\n                \\n        res = \"/\"\\n        # Make all dir in dirList add in res\\n        for directory in dirList:\\n            res += directory\\n            res += \"/\"\\n        # If res == \"/\" return it else pop out last string\\n        return res[:-1] if res != \"/\" else \"/\"\\n```\\n**Go**\\n```go\\nfunc simplifyPath(path string) string {\\n    pathList := strings.Split(path, \"/\")\\n    dirList := make([]string, 0)\\n    \\n    for _ , dir := range pathList{\\n        // Ignore\\n        if dir == \"\" || dir == \".\"{\\n            continue\\n        }\\n        // Directory up a level\\n        if dir == \"..\"{\\n            if len(dirList) != 0{\\n                dirList = dirList[:len(dirList) - 1]\\n            }\\n        // Append it in dirList\\n        } else {\\n            dirList = append(dirList, dir)\\n        }\\n    }\\n    output := \"/\"\\n    // Make all dir in dirList add in res\\n    for _, dir := range dirList{\\n        output += dir\\n        output += \"/\"\\n    }\\n    // If res == \"/\" return it else pop out last string\\n    if output == \"/\"{\\n        return output\\n    }\\n\\n    return output[:len(output) - 1]\\n}\\n```\\n* See more 2022 Daily Challenge Solution : [GitHub](https://github.com/gcobs0834/2022-Daily-LeetCoding-Challenge-python3-)",
                "solutionTags": [],
                "code": "```A double period \\'..\\' refers to the directory up a level```\n```python\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        dirList = []\\n        \\n        for directory in path.split(\\'/\\') :\\n            # Ignore\\n            if not directory or directory == \".\":\\n                continue\\n            # Directory up a level\\n            if directory == \"..\":\\n                if dirList:\\n                    dirList.pop()\\n            # Append it in dirList\\n            else:\\n                dirList.append(directory)\\n                \\n        res = \"/\"\\n        # Make all dir in dirList add in res\\n        for directory in dirList:\\n            res += directory\\n            res += \"/\"\\n        # If res == \"/\" return it else pop out last string\\n        return res[:-1] if res != \"/\" else \"/\"\\n```\n```go\\nfunc simplifyPath(path string) string {\\n    pathList := strings.Split(path, \"/\")\\n    dirList := make([]string, 0)\\n    \\n    for _ , dir := range pathList{\\n        // Ignore\\n        if dir == \"\" || dir == \".\"{\\n            continue\\n        }\\n        // Directory up a level\\n        if dir == \"..\"{\\n            if len(dirList) != 0{\\n                dirList = dirList[:len(dirList) - 1]\\n            }\\n        // Append it in dirList\\n        } else {\\n            dirList = append(dirList, dir)\\n        }\\n    }\\n    output := \"/\"\\n    // Make all dir in dirList add in res\\n    for _, dir := range dirList{\\n        output += dir\\n        output += \"/\"\\n    }\\n    // If res == \"/\" return it else pop out last string\\n    if output == \"/\"{\\n        return output\\n    }\\n\\n    return output[:len(output) - 1]\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1180786,
                "title": "c-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        \\n        stack <string> st;\\n        for(int i = 0;i<path.size();i++)\\n        {\\n            if(path[i] == \\'/\\')\\n                continue;\\n            string s;\\n            while(i<path.size() && path[i] != \\'/\\')\\n            {\\n                s += path[i];\\n                i++;\\n            }\\n            if(s == \".\")\\n                continue;\\n            else if(s == \"..\")\\n            {\\n                if(!st.empty())\\n                    st.pop();\\n            }\\n            else\\n                st.push(s);\\n        }\\n        string res;\\n        while(!st.empty())\\n        {\\n            res = \"/\" + st.top() + res;\\n            st.pop();\\n        }\\n        if(res.size() == 0)\\n            return \"/\";\\n        return res;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        \\n        stack <string> st;\\n        for(int i = 0;i<path.size();i++)\\n        {\\n            if(path[i] == \\'/\\')\\n                continue;\\n            string s;\\n            while(i<path.size() && path[i] != \\'/\\')\\n            {\\n                s += path[i];\\n                i++;\\n            }\\n            if(s == \".\")\\n                continue;\\n            else if(s == \"..\")\\n            {\\n                if(!st.empty())\\n                    st.pop();\\n            }\\n            else\\n                st.push(s);\\n        }\\n        string res;\\n        while(!st.empty())\\n        {\\n            res = \"/\" + st.top() + res;\\n            st.pop();\\n        }\\n        if(res.size() == 0)\\n            return \"/\";\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1671723,
                "title": "rust",
                "content": "```rust\\n    pub fn simplify_path(path: String) -> String {\\n        format!(\\n            \"/{}\",\\n            path.split(\\'/\\')\\n                .filter(|&x| x != \"\" && x != \".\")\\n                .fold(vec![], |mut acc, item| {\\n                    if item == \"..\" { acc.pop(); } \\n                    else { acc.push(item); }\\n                    acc\\n                })\\n                .join(\"/\")\\n        )\\n    }\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\n    pub fn simplify_path(path: String) -> String {\\n        format!(\\n            \"/{}\",\\n            path.split(\\'/\\')\\n                .filter(|&x| x != \"\" && x != \".\")\\n                .fold(vec![], |mut acc, item| {\\n                    if item == \"..\" { acc.pop(); } \\n                    else { acc.push(item); }\\n                    acc\\n                })\\n                .join(\"/\")\\n        )\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3021358,
                "title": "some-people-really-like-to-complicate-things",
                "content": "# Intuition\\nDon\\'t overthink. Free your mind https://www.youtube.com/watch?v=5TyHTxANcPw\\n\\n# Approach\\n1. Split array by **/**\\n2. Filter empty elements (empty strings)\\n3. Then follow 2 simple rules\\n    **..** - means we go one directory up, in other words we pop element from the **res** array\\n    **.** - just skip it\\nEverything else push to the **res** array\\nAnd don\\'t forget **/** in the beginning of the response.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nconst simplifyPath = (path) => {\\n    const res = [];\\n    const arr = path.split(\\'/\\').filter(v => v);\\n    for (let i = 0; i < arr.length; i++) {\\n        if (arr[i] === \\'..\\') {\\n            res.pop();\\n        } else if (arr[i] === \\'.\\') {\\n            continue;\\n        } else {\\n            res.push(arr[i])\\n        }\\n    }\\n\\n    return \\'/\\' + res.join(\\'/\\');\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst simplifyPath = (path) => {\\n    const res = [];\\n    const arr = path.split(\\'/\\').filter(v => v);\\n    for (let i = 0; i < arr.length; i++) {\\n        if (arr[i] === \\'..\\') {\\n            res.pop();\\n        } else if (arr[i] === \\'.\\') {\\n            continue;\\n        } else {\\n            res.push(arr[i])\\n        }\\n    }\\n\\n    return \\'/\\' + res.join(\\'/\\');\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2702809,
                "title": "c-98-faster-tc-o-n-sc-o-1-no-stack-simple-explained-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string s) {\\n        string res; \\n        int n = s.size();\\n        \\n        // If the size is 1, return \\'/\\'\\n        if(n == 1) return \"/\";\\n        \\n        // There might be a case where the absolute path does not end with \\'/\\' , so Add \\'/\\' for simpler calculation\\n        if(s[n - 1] != \\'/\\') s.push_back(\\'/\\');\\n        \\n        // Take temporary string to check for \\'.\\' or \\'..\\' , you may also use temporary integer\\n        string temp = \"\";\\n        \\n        for(int i = 0; i < s.size(); i++){\\n            // There are two cases \\n            // 1) s[i] == \\'/\\'\\n            // 2) s[i] != \\'/\\'\\n            \\n            // We will do operation when ever we reached \\'/\\' except for i = 0\\n            \\n            if(s[i] != \\'/\\'){\\n                // Update the temp string and result string\\n                string t = \"\";\\n                t += s[i];\\n                res += t;\\n                temp += t;\\n                \\n            } else if (i != 0){\\n                // Since we cannot have continuous \\'/\\', if the result string ended with \\'/\\', then continue\\n                if(res.back() == \\'/\\') continue;\\n                \\n                if(temp == \".\"){\\n                    // If there is one \\'.\\', remove last two elements from the result\\n                    res.pop_back();\\n                    res.pop_back();\\n                    \\n                } else if(temp == \"..\"){\\n                    // If there is two \\'..\\', then remove until we remove two \\'/\\' from the result\\n                    int c = 0;\\n                    while(c < 2){\\n                        if(res.back() == \\'/\\') c++;\\n                        if(res.size() == 0) break;\\n                        res.pop_back();\\n                    }\\n                }\\n                // Make temp string as empty\\n                temp = \"\";\\n                res.push_back(\\'/\\');\\n            } else {\\n                // Case when i = 0\\n                res.push_back(s[i]);\\n            }\\n        }\\n        \\n        // Finally remove the last \\'/\\' in the result\\n        if(res.size() > 1) res.pop_back();\\n        return res;\\n    }\\n};\\n```\\n\\nIf you like the Solution , please do \"**UPVOTE**\"",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string s) {\\n        string res; \\n        int n = s.size();\\n        \\n        // If the size is 1, return \\'/\\'\\n        if(n == 1) return \"/\";\\n        \\n        // There might be a case where the absolute path does not end with \\'/\\' , so Add \\'/\\' for simpler calculation\\n        if(s[n - 1] != \\'/\\') s.push_back(\\'/\\');\\n        \\n        // Take temporary string to check for \\'.\\' or \\'..\\' , you may also use temporary integer\\n        string temp = \"\";\\n        \\n        for(int i = 0; i < s.size(); i++){\\n            // There are two cases \\n            // 1) s[i] == \\'/\\'\\n            // 2) s[i] != \\'/\\'\\n            \\n            // We will do operation when ever we reached \\'/\\' except for i = 0\\n            \\n            if(s[i] != \\'/\\'){\\n                // Update the temp string and result string\\n                string t = \"\";\\n                t += s[i];\\n                res += t;\\n                temp += t;\\n                \\n            } else if (i != 0){\\n                // Since we cannot have continuous \\'/\\', if the result string ended with \\'/\\', then continue\\n                if(res.back() == \\'/\\') continue;\\n                \\n                if(temp == \".\"){\\n                    // If there is one \\'.\\', remove last two elements from the result\\n                    res.pop_back();\\n                    res.pop_back();\\n                    \\n                } else if(temp == \"..\"){\\n                    // If there is two \\'..\\', then remove until we remove two \\'/\\' from the result\\n                    int c = 0;\\n                    while(c < 2){\\n                        if(res.back() == \\'/\\') c++;\\n                        if(res.size() == 0) break;\\n                        res.pop_back();\\n                    }\\n                }\\n                // Make temp string as empty\\n                temp = \"\";\\n                res.push_back(\\'/\\');\\n            } else {\\n                // Case when i = 0\\n                res.push_back(s[i]);\\n            }\\n        }\\n        \\n        // Finally remove the last \\'/\\' in the result\\n        if(res.size() > 1) res.pop_back();\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1051414,
                "title": "c-single-pass-solutions-compared-and-explained-100-time-75-space",
                "content": "Nice problem and the first one I did about parsing string(ified) input in a while.\\n\\nTo proceed with it, we will firsst of all declare 2 support variables:\\n* `res` is our accumulator variable, but, just to further optimise and squeeze even more efficiency, we will also use it to create temporary strings;\\n* `tmp` is a vector of strings we will use to store (or pop) our parsed strings as we go.\\n\\nWe will then parse the string character by character, other than the first one (that we know is always going to be `\\'\\\\\\'`, so no point in considering it).\\n\\nLooping from `i` from `1` to the last character (`lmt`), we will:\\n* assign the value of `path[i]` to `c`;\\n* deal with `c`, depending if:\\n\\t* `c != \\'/\\'`, we will append it to `res`;\\n\\t* in any other case and if `i == lmt` (ie: we are parsing the last character - and note that this might happen even if after we appended it to `res` above):\\n\\t* if `res == \"..\"` and we have at least one element in `tmp`, we will pop the last one from it;\\n\\t* if `res` is not empty and `!= \".\"`, we will add it to `tmp`;\\n\\t* reset `res` to be `\"\"`.\\n\\nOnce done, time to finally use `res` for its proper function: if `tmp` is not empty, we will set it to be `\"\"`, `\"/\"` otherwise.\\n\\nWe will then loop through all the strings `w` collected in `tmp` and append `\"/\" + w` to `res`.\\n\\nOnce done, we can return it.\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        // support variables\\n        string res;\\n        vector<string> tmp;\\n        // parsing path\\n        // for (int i = i, lmt = path.size(); i < lmt; i++) {\\n            // if (path[i] != \\'/\\') res.append(path[i]);\\n        for (int i = 1, c, lmt = path.size() - 1; i <= lmt; i++) {\\n            c = path[i];\\n            // case 1: c is part of a folder name\\n            if (c != \\'/\\') res.append(1, c);\\n            // case 2: end of a folder name\\n            if (c == \\'/\\' || i == lmt) {\\n                // sub-case 2-1: parent directory\\n                if (res == \"..\") {\\n                    if (tmp.size()) tmp.pop_back();\\n                }\\n                // sub-case 2-2: res is valid and not the current directory\\n                else if (res.size() && res != \".\") tmp.push_back(res);\\n                // resetting res\\n                res = \"\";\\n            }\\n        }\\n        // composing res\\n        res = tmp.size() ? \"\" : \"/\";\\n        for (string w: tmp) res += \"/\" + w;\\n        return res;\\n    }\\n};\\n```\\n\\nCould I be happy with it? Well, no: not a huge fan of stacks and whenever I can, I like to use arrays in their place, provided I can guesstimate their size, as I did with a bit of trial and error, setting `tmp` to be of size `100` with a bit of trial and error; `pos` is our pointer to write in it, initially set to `0` and all the logic is the same, with significantly better performance:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        // support variables\\n        string res, tmp[50];\\n        int pos = 0;\\n        // parsing path\\n        // for (int i = i, lmt = path.size(); i < lmt; i++) {\\n            // if (path[i] != \\'/\\') res.append(path[i]);\\n        for (int i = 1, c, lmt = path.size() - 1; i <= lmt; i++) {\\n            c = path[i];\\n            // case 1: c is part of a folder name\\n            if (c != \\'/\\') res.append(1, c);\\n            // case 2: end of a folder name\\n            if (c == \\'/\\' || i == lmt) {\\n                // sub-case 2-1: parent directory\\n                if (res == \"..\") {\\n                    if (pos) pos--;\\n                }\\n                // sub-case 2-2: res is valid and not the current directory\\n                else if (res.size() && res != \".\") tmp[pos++] = res;\\n                // resetting res\\n                res = \"\";\\n            }\\n        }\\n        // composing res\\n        res = pos ? \"\" : \"/\";\\n        for (int i = 0; i < pos; i++) res += \"/\" + tmp[i];\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        // support variables\\n        string res;\\n        vector<string> tmp;\\n        // parsing path\\n        // for (int i = i, lmt = path.size(); i < lmt; i++) {\\n            // if (path[i] != \\'/\\') res.append(path[i]);\\n        for (int i = 1, c, lmt = path.size() - 1; i <= lmt; i++) {\\n            c = path[i];\\n            // case 1: c is part of a folder name\\n            if (c != \\'/\\') res.append(1, c);\\n            // case 2: end of a folder name\\n            if (c == \\'/\\' || i == lmt) {\\n                // sub-case 2-1: parent directory\\n                if (res == \"..\") {\\n                    if (tmp.size()) tmp.pop_back();\\n                }\\n                // sub-case 2-2: res is valid and not the current directory\\n                else if (res.size() && res != \".\") tmp.push_back(res);\\n                // resetting res\\n                res = \"\";\\n            }\\n        }\\n        // composing res\\n        res = tmp.size() ? \"\" : \"/\";\\n        for (string w: tmp) res += \"/\" + w;\\n        return res;\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        // support variables\\n        string res, tmp[50];\\n        int pos = 0;\\n        // parsing path\\n        // for (int i = i, lmt = path.size(); i < lmt; i++) {\\n            // if (path[i] != \\'/\\') res.append(path[i]);\\n        for (int i = 1, c, lmt = path.size() - 1; i <= lmt; i++) {\\n            c = path[i];\\n            // case 1: c is part of a folder name\\n            if (c != \\'/\\') res.append(1, c);\\n            // case 2: end of a folder name\\n            if (c == \\'/\\' || i == lmt) {\\n                // sub-case 2-1: parent directory\\n                if (res == \"..\") {\\n                    if (pos) pos--;\\n                }\\n                // sub-case 2-2: res is valid and not the current directory\\n                else if (res.size() && res != \".\") tmp[pos++] = res;\\n                // resetting res\\n                res = \"\";\\n            }\\n        }\\n        // composing res\\n        res = pos ? \"\" : \"/\";\\n        for (int i = 0; i < pos; i++) res += \"/\" + tmp[i];\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2187271,
                "title": "easy-java-solution-using-stack",
                "content": "```\\npublic String simplifyPath(String path) {\\n        String[] paths = path.split(\"/\");\\n        Stack<String> st = new Stack<>();\\n        for(String s:paths){\\n            if(s.equals(\"\")) continue;\\n            else if(s.equals(\".\")) continue;\\n            else if(s.equals(\"..\")) \\n                if(!st.isEmpty()) st.pop();\\n                else continue;\\n            else st.add(s);\\n        }\\n        return \"/\"+String.join(\"/\", st);\\n    }\\n```\\n**Please upvote if you appreciate the solution**\\n*Feel free to ask any questions in the comment section*",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```\\npublic String simplifyPath(String path) {\\n        String[] paths = path.split(\"/\");\\n        Stack<String> st = new Stack<>();\\n        for(String s:paths){\\n            if(s.equals(\"\")) continue;\\n            else if(s.equals(\".\")) continue;\\n            else if(s.equals(\"..\")) \\n                if(!st.isEmpty()) st.pop();\\n                else continue;\\n            else st.add(s);\\n        }\\n        return \"/\"+String.join(\"/\", st);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1847420,
                "title": "java-simple-java-code-explained-algorithm-stack",
                "content": "Sample case  2 Explain  ->   ![image](https://assets.leetcode.com/users/images/8cbf8af5-2ad5-4fa8-ba71-f8b077be63a2_1647222748.909183.jpeg)\\n\\n\\n![image](https://assets.leetcode.com/users/images/33223edb-ee01-4b32-ba7c-f3680384d4bd_1647222828.2566357.jpeg)\\n\\n\\n\\n\\n\\n\\n\\n\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        \\n        Stack<String> s = new Stack<>();\\n        StringBuilder res = new StringBuilder();\\n        String[] p =path.split(\"/\");\\n        \\n        for(int i=0;i<p.length;i++){\\n            if(!s.isEmpty()  && p[i].equals(\"..\")) s.pop();\\n            else if(!p[i].equals(\"\") && !p[i].equals(\".\") && !p[i].equals(\"..\"))\\n                s.push(p[i]);\\n        }\\n        \\n        \\n        if(s.isEmpty()) return \"/\";\\n        while(!s.isEmpty()){\\n            res.insert(0,s.pop()).insert(0,\"/\");\\n        }\\n        \\n        return res.toString();\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        \\n        Stack<String> s = new Stack<>();\\n        StringBuilder res = new StringBuilder();\\n        String[] p =path.split(\"/\");\\n        \\n        for(int i=0;i<p.length;i++){\\n            if(!s.isEmpty()  && p[i].equals(\"..\")) s.pop();\\n            else if(!p[i].equals(\"\") && !p[i].equals(\".\") && !p[i].equals(\"..\"))\\n                s.push(p[i]);\\n        }\\n        \\n        \\n        if(s.isEmpty()) return \"/\";\\n        while(!s.isEmpty()){\\n            res.insert(0,s.pop()).insert(0,\"/\");\\n        }\\n        \\n        return res.toString();\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1492803,
                "title": "c-76-ms-manipulate-string-array-from-split-or-80-ms-linkedlist",
                "content": "I originally used a Stack, but realized I had to reverse it, then I switched to a List, but deletions are slow, so I switched to a LinkedList and it is pretty quick and requires no reversal, then I realized you can just manipulate the array returned from the string.Split and keep track of how many tokens in the path.\\n\\n76 ms.\\n```\\n    public string SimplifyPath(string path) {\\n        \\n        var tokens = path.Split(\\'/\\', StringSplitOptions.RemoveEmptyEntries);\\n        int itemCount = 0;\\n        \\n        for(int i = 0; i < tokens.Length; i++){\\n            switch(tokens[i]){\\n                case \".\":\\n                    break;\\n                case \"..\":\\n                    if(itemCount > 0) itemCount--;\\n                    break;\\n                default:\\n                    tokens[itemCount++] = tokens[i];\\n                    break;\\n            }\\n        }\\n        \\n        return \"/\" + string.Join(\\'/\\', tokens, 0, itemCount);\\n    }\\n```\\n\\n80 ms. Linked List\\n\\n```\\n    public string SimplifyPath(string path) {\\n\\t\\n        var tokens = path.Split(\\'/\\', StringSplitOptions.RemoveEmptyEntries);\\n        var answerList = new LinkedList<string>();\\n\\t\\t\\n        for(int i = 0; i < tokens.Length; i++){\\n            switch(tokens[i]){\\n                case \".\":\\n                    break;\\n                case \"..\":\\n                    if(answerList.Count > 0) answerList.RemoveLast();\\n                    break;\\n                default:\\n                    answerList.AddLast(tokens[i]);\\n                    break;\\n            }\\n        }\\n        \\n        return \"/\" + string.Join(\\'/\\', answerList);\\n    }\\n```\\n",
                "solutionTags": [],
                "code": "```\\n    public string SimplifyPath(string path) {\\n        \\n        var tokens = path.Split(\\'/\\', StringSplitOptions.RemoveEmptyEntries);\\n        int itemCount = 0;\\n        \\n        for(int i = 0; i < tokens.Length; i++){\\n            switch(tokens[i]){\\n                case \".\":\\n                    break;\\n                case \"..\":\\n                    if(itemCount > 0) itemCount--;\\n                    break;\\n                default:\\n                    tokens[itemCount++] = tokens[i];\\n                    break;\\n            }\\n        }\\n        \\n        return \"/\" + string.Join(\\'/\\', tokens, 0, itemCount);\\n    }\\n```\n```\\n    public string SimplifyPath(string path) {\\n\\t\\n        var tokens = path.Split(\\'/\\', StringSplitOptions.RemoveEmptyEntries);\\n        var answerList = new LinkedList<string>();\\n\\t\\t\\n        for(int i = 0; i < tokens.Length; i++){\\n            switch(tokens[i]){\\n                case \".\":\\n                    break;\\n                case \"..\":\\n                    if(answerList.Count > 0) answerList.RemoveLast();\\n                    break;\\n                default:\\n                    answerList.AddLast(tokens[i]);\\n                    break;\\n            }\\n        }\\n        \\n        return \"/\" + string.Join(\\'/\\', answerList);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 455100,
                "title": "c-stack-solution",
                "content": "We use a stack to store each layer of the directory.\\nWe loop the path and parse each directory separating by `/`\\n\\n- If we get an empty directory or `.`, we do nothing\\n- If we get a `..`, we pop out the top element from the stack (if it is not empty)\\n- If we get anything else, we push the directory to the stack\\n\\nAt the end, we reconstruct the simplified path from the stack and return.\\n\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> st;\\n        int i = 0;\\n        string cur = \"\";\\n        path += \\'/\\';\\n        // loop path and construct stack\\n        while (i < path.size()) {\\n            if (path[i] == \\'/\\') {\\n                if (!cur.empty()) {\\n                    if (cur == \".\") {\\n                        // do nothing\\n                    }\\n                    else if (cur == \"..\") {\\n                        // remove the last dir\\n                        if (!st.empty()) {\\n                            st.pop();\\n                        }\\n                    }\\n                    else {\\n                        // append the cur dir\\n                        st.push(cur);\\n                    }\\n                }\\n                cur.clear();\\n                i += 1;\\n            }\\n            else {\\n                cur += path[i];\\n                i += 1;\\n            }\\n        }\\n        // construct result string from stack\\n        string rst = \"\";\\n        while (!st.empty()) {\\n            rst = \"/\" + st.top() + rst;\\n            st.pop();\\n        }\\n        if (rst.empty()) rst += \\'/\\';\\n        return rst;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> st;\\n        int i = 0;\\n        string cur = \"\";\\n        path += \\'/\\';\\n        // loop path and construct stack\\n        while (i < path.size()) {\\n            if (path[i] == \\'/\\') {\\n                if (!cur.empty()) {\\n                    if (cur == \".\") {\\n                        // do nothing\\n                    }\\n                    else if (cur == \"..\") {\\n                        // remove the last dir\\n                        if (!st.empty()) {\\n                            st.pop();\\n                        }\\n                    }\\n                    else {\\n                        // append the cur dir\\n                        st.push(cur);\\n                    }\\n                }\\n                cur.clear();\\n                i += 1;\\n            }\\n            else {\\n                cur += path[i];\\n                i += 1;\\n            }\\n        }\\n        // construct result string from stack\\n        string rst = \"\";\\n        while (!st.empty()) {\\n            rst = \"/\" + st.top() + rst;\\n            st.pop();\\n        }\\n        if (rst.empty()) rst += \\'/\\';\\n        return rst;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 379753,
                "title": "java-stack-explained-clean",
                "content": "Stack is superb for this problem - in case we go back (up) - just pop from stack. We can tokenize initial path using string.split.\\n\\n```\\n    public String simplifyPath(String path) {\\n        //parse string to initial tokens\\n        String[] vals = path.split(\"/\");\\n        //start iterating on path segments using stack to store results. Most tokens we can simply ignore\\n        Stack<String> s = new Stack();\\n        for (String p : vals) {\\n            //these cases refer to current dir and multiple \"/\"\\n            if (p.length() == 0 || p.equals(\".\"))\\n                continue;\\n            //in case we have to go back - just pop from stack\\n            else if (p.equals(\"..\")) {\\n                if (!s.isEmpty())\\n                    s.pop();\\n            }\\n            //all other cases - push to stack\\n            else\\n                s.push(p);\\n        }\\n        //no build the final path string\\n        String res = \"\";\\n        while (!s.isEmpty()) {\\n            res = \"/\" + s.pop() + res;\\n        }\\n        //in case we haven\\'t met any path segments - return just root folder\\n        return res.length() == 0 ? \"/\" : res;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public String simplifyPath(String path) {\\n        //parse string to initial tokens\\n        String[] vals = path.split(\"/\");\\n        //start iterating on path segments using stack to store results. Most tokens we can simply ignore\\n        Stack<String> s = new Stack();\\n        for (String p : vals) {\\n            //these cases refer to current dir and multiple \"/\"\\n            if (p.length() == 0 || p.equals(\".\"))\\n                continue;\\n            //in case we have to go back - just pop from stack\\n            else if (p.equals(\"..\")) {\\n                if (!s.isEmpty())\\n                    s.pop();\\n            }\\n            //all other cases - push to stack\\n            else\\n                s.push(p);\\n        }\\n        //no build the final path string\\n        String res = \"\";\\n        while (!s.isEmpty()) {\\n            res = \"/\" + s.pop() + res;\\n        }\\n        //in case we haven\\'t met any path segments - return just root folder\\n        return res.length() == 0 ? \"/\" : res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 181198,
                "title": "c-easy-to-understand-solution",
                "content": "```\\n    string simplifyPath(string path) {\\n        stack<string> dir;\\n        string res = \"\", val;\\n        istringstream ss(path);\\n        while(getline(ss, val, \\'/\\')){\\n            if(val.size() == 0 || val == \".\")\\n                continue;\\n            if(val == \"..\") {\\n                if(!dir.empty())\\n                    dir.pop();\\n            } else {\\n                dir.push(val);\\n            }\\n        }\\n        \\n        if(dir.empty())\\n            return \"/\";\\n        \\n        while(!dir.empty()){\\n            res = \"/\" + dir.top() + res;\\n            dir.pop();\\n        }\\n        return res;\\n    }\\n",
                "solutionTags": [],
                "code": "```\\n    string simplifyPath(string path) {\\n        stack<string> dir;\\n        string res = \"\", val;\\n        istringstream ss(path);\\n        while(getline(ss, val, \\'/\\')){\\n            if(val.size() == 0 || val == \".\")\\n                continue;\\n            if(val == \"..\") {\\n                if(!dir.empty())\\n                    dir.pop();\\n            } else {\\n                dir.push(val);\\n            }\\n        }\\n        \\n        if(dir.empty())\\n            return \"/\";\\n        \\n        while(!dir.empty()){\\n            res = \"/\" + dir.top() + res;\\n            dir.pop();\\n        }\\n        return res;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 25820,
                "title": "ac-solution-in-java",
                "content": "    public class Solution {\\n        public String simplifyPath(String path) {\\n            Set<String> isSkip = new HashSet<>(Arrays.asList(\"\", \".\", \"..\"));\\n            Deque<String> stack = new ArrayDeque<>();\\n            for (String token : path.split(\"/\")) {\\n                if (token.equals(\"..\") && !stack.isEmpty()) stack.pop();\\n                if (isSkip.contains(token)) continue;\\n                stack.push(token);\\n            }\\n            StringBuilder sb = new StringBuilder();\\n            while (!stack.isEmpty()) {\\n                sb.append(\"/\" + stack.pollLast());\\n            }\\n            return sb.length() == 0 ? \"/\" : sb.toString();\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public String simplifyPath(String path) {\\n            Set<String> isSkip = new HashSet<>(Arrays.asList(\"\", \".\", \"..\"));\\n            Deque<String> stack = new ArrayDeque<>();\\n            for (String token : path.split(\"/\")) {\\n                if (token.equals(\"..\") && !stack.isEmpty()) stack.pop();\\n                if (isSkip.contains(token)) continue;\\n                stack.push(token);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3406723,
                "title": "very-simple-and-concise-solution-with-explanation",
                "content": "## Approach \\n\\nIn a Unix-style file system, a period `.` refers to the current directory and a double period `..` refers to the directory up a level. For example, if we are in the directory /a/b/c/d and we want to go up one level, we can use `..` to get to /a/b/c.\\n\\nThe simplified canonical path should start with a single slash `/`, and any two directories should be separated by a single slash `/`. It should not end with a trailing slash `/`, and it should not contain any periods `.` or double periods `..`.\\n\\nTo achieve this, the given solution first creates an empty array called `simplifiedPath` to store the simplified path. It then splits the input `path` into individual directories using the forward slash `/` as a separator, and stores them in an array called `dirs`.\\n\\nThe function then goes through each directory in the `dirs` array using a `for...of` loop. If the directory is an empty string or a period `.`, it skips over it and moves to the next directory. If the directory is a double period `..`, it removes the last directory added to the `simplifiedPath` array using the `pop()` method, effectively moving up one level. If the directory is anything else, it adds it to the `simplifiedPath` array.\\n\\nFinally, the function joins all the directories in the `simplifiedPath` array using the forward slash `/` as a separator, and concatenates it with a single slash `/` at the beginning to create the simplified canonical path. The resulting path is then returned as a string.\\n\\n## JavaScript Solution\\n```\\nvar simplifyPath = function (path) {\\n  const simplifiedPath = [];\\n  const dirs = path.split(\"/\");\\n\\n  for (const dir of dirs) {\\n    if (dir === \"\" || dir === \".\") continue;\\n    dir === \"..\" ? simplifiedPath.pop() : simplifiedPath.push(dir);\\n  }\\n\\n  return \"/\" + simplifiedPath.join(\"/\");\\n};\\n\\n```\\n\\n## Go Solution\\n```go\\nimport \"strings\"\\n\\nfunc simplifyPath(path string) string {\\n\\tsimplifiedPath := make([]string, 0)\\n\\tdirs := strings.Split(path, \"/\")\\n\\n\\tfor _, dir := range dirs {\\n\\t\\tif dir == \"\" || dir == \".\" { continue }\\n\\t\\tif dir != \"..\" {\\n\\t\\t\\tsimplifiedPath = append(simplifiedPath, dir)\\n\\t\\t} else if len(simplifiedPath) > 0 {\\n\\t\\t\\tsimplifiedPath = simplifiedPath[:len(simplifiedPath)-1]\\n\\t\\t}\\n\\t}\\n\\n\\treturn \"/\" + strings.Join(simplifiedPath, \"/\")\\n}\\n```\\n\\n## Rust Solution\\n```rust\\nimpl Solution {\\n    pub fn simplify_path(path: String) -> String {\\n        let mut simplified_path = vec![];\\n        for dir in path.split(\\'/\\') {\\n            match dir {\\n                \"\" | \".\" => continue,\\n                \"..\" => { simplified_path.pop(); }\\n                _ => simplified_path.push(dir),\\n            }\\n        }\\n\\n        \"/\".to_owned() + &simplified_path.join(\"/\")\\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Go",
                    "Rust",
                    "String",
                    "Stack"
                ],
                "code": "```\\nvar simplifyPath = function (path) {\\n  const simplifiedPath = [];\\n  const dirs = path.split(\"/\");\\n\\n  for (const dir of dirs) {\\n    if (dir === \"\" || dir === \".\") continue;\\n    dir === \"..\" ? simplifiedPath.pop() : simplifiedPath.push(dir);\\n  }\\n\\n  return \"/\" + simplifiedPath.join(\"/\");\\n};\\n\\n```\n```go\\nimport \"strings\"\\n\\nfunc simplifyPath(path string) string {\\n\\tsimplifiedPath := make([]string, 0)\\n\\tdirs := strings.Split(path, \"/\")\\n\\n\\tfor _, dir := range dirs {\\n\\t\\tif dir == \"\" || dir == \".\" { continue }\\n\\t\\tif dir != \"..\" {\\n\\t\\t\\tsimplifiedPath = append(simplifiedPath, dir)\\n\\t\\t} else if len(simplifiedPath) > 0 {\\n\\t\\t\\tsimplifiedPath = simplifiedPath[:len(simplifiedPath)-1]\\n\\t\\t}\\n\\t}\\n\\n\\treturn \"/\" + strings.Join(simplifiedPath, \"/\")\\n}\\n```\n```rust\\nimpl Solution {\\n    pub fn simplify_path(path: String) -> String {\\n        let mut simplified_path = vec![];\\n        for dir in path.split(\\'/\\') {\\n            match dir {\\n                \"\" | \".\" => continue,\\n                \"..\" => { simplified_path.pop(); }\\n                _ => simplified_path.push(dir),\\n            }\\n        }\\n\\n        \"/\".to_owned() + &simplified_path.join(\"/\")\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1848456,
                "title": "c-easy-to-understand-using-stack-daily-leetcoding-challenge-march-day-14",
                "content": "// \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\n\\n**Approach**\\n* Just store the **Folder** names in the stack (string between the 2 slashes) one by one\\n\\n* when we come across \\u201D . \\u201D we do nothing\\n\\n* When we find \\u201C..\\u201D in our path, we simply pop the topmost element as we have to jump back to parent\\u2019s directory according to given condition\\n\\n* When we see multiple \\u201C////\\u201D we just ignore them as they are equivalent to one single \\u201C/\\u201D\\n\\n* After iterating through the whole string the elements remaining in the stack is our answer\\n\\n**Time Complexity   : O(n)**\\n**Space Complexity : O(n)**\\n\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) \\n    {\\n        stack<string> st;                            // created the stack for stroing the Folder names\\n        string ans =\"\";                              // it will store the final ans\\n        \\n        for(int i=0;i<path.size();i++)               // iterate over the whole given string\\n        {\\n            // if it is a backslash then just ignore it because it is not the Folder name\\n            if(path[i]==\\'/\\')\\n                continue;\\n            \\n            // if it is not / then try to store our Folder name till we do not find next /\\n            // store the Folder name in temp string\\n            string temp = \"\";\\n            while(i<path.size() && path[i] != \\'/\\')\\n            {\\n                temp += path[i];\\n                i++;\\n            }\\n            \\n            // after storing the Folder\\n            // just check the symbols \\n            \\n            // ignoring .\\n            if(temp==\".\")\\n                continue;\\n            \\n            // if it is \\'..\\' move to previous Folder \\n            else if(temp==\"..\")\\n            {\\n                // according to our given condition \\n                // if it is \\'..\\' move to previous Folder\\n                if(!st.empty())\\n                    st.pop();\\n            }\\n            \\n            else\\n            {\\n                // else store our all Folder names into the stack\\n                st.push(temp);\\n            }\\n        }\\n        \\n        // store the Folder names from stack to the ans string \\n        // in given firmat \"/Folder_name\"\\n        while(!st.empty())\\n        {\\n            ans = \"/\" + st.top() + ans;            // just following the format\\n            st.pop();\\n        }\\n        \\n        // if there is empty string \\n        if(ans.size() == 0)\\n            return \"/\";\\n        \\n        return ans;\\n    }\\n};\\n```\\n// \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) \\n    {\\n        stack<string> st;                            // created the stack for stroing the Folder names\\n        string ans =\"\";                              // it will store the final ans\\n        \\n        for(int i=0;i<path.size();i++)               // iterate over the whole given string\\n        {\\n            // if it is a backslash then just ignore it because it is not the Folder name\\n            if(path[i]==\\'/\\')\\n                continue;\\n            \\n            // if it is not / then try to store our Folder name till we do not find next /\\n            // store the Folder name in temp string\\n            string temp = \"\";\\n            while(i<path.size() && path[i] != \\'/\\')\\n            {\\n                temp += path[i];\\n                i++;\\n            }\\n            \\n            // after storing the Folder\\n            // just check the symbols \\n            \\n            // ignoring .\\n            if(temp==\".\")\\n                continue;\\n            \\n            // if it is \\'..\\' move to previous Folder \\n            else if(temp==\"..\")\\n            {\\n                // according to our given condition \\n                // if it is \\'..\\' move to previous Folder\\n                if(!st.empty())\\n                    st.pop();\\n            }\\n            \\n            else\\n            {\\n                // else store our all Folder names into the stack\\n                st.push(temp);\\n            }\\n        }\\n        \\n        // store the Folder names from stack to the ans string \\n        // in given firmat \"/Folder_name\"\\n        while(!st.empty())\\n        {\\n            ans = \"/\" + st.top() + ans;            // just following the format\\n            st.pop();\\n        }\\n        \\n        // if there is empty string \\n        if(ans.size() == 0)\\n            return \"/\";\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1050681,
                "title": "python-simple-short-6-line-solution-faster-than-90",
                "content": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack = []\\n        \\n        for d in path.split(\"/\"):\\n            if d == \"..\": \\n                if stack: stack.pop(-1)\\n                    \\n            elif d and d != \".\": stack.append(d)\\n                \\n        return \"/\" + \"/\".join(stack)\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack = []\\n        \\n        for d in path.split(\"/\"):\\n            if d == \"..\": \\n                if stack: stack.pop(-1)\\n                    \\n            elif d and d != \".\": stack.append(d)\\n                \\n        return \"/\" + \"/\".join(stack)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 161111,
                "title": "java-string",
                "content": "We build the simplified path from scratch:\\n1. split path by \"/\"\\n2. backtrack if meets \"..\", do nothing if meets \".\" or \"\"\\n3. reconstruct the path by adding \"/\" in between (with heading \"/\")\\n\\n```\\n    public String simplifyPath(String path) {\\n        String[] dirNames = path.split(\"/\");\\n        \\n        // shortest (substitute . or ..)\\n        List<String> simplified = new ArrayList<>();\\n        for (String name : dirNames) {\\n            if (!name.isEmpty() && !name.equals(\".\")) {\\n                if (name.equals(\"..\")) {\\n                    if (!simplified.isEmpty()) {\\n                        simplified.remove(simplified.size() - 1);\\n                    }\\n                } else { \\n                    simplified.add(name);\\n                }\\n            } \\n        }\\n            \\n        // start with /, single / between two directory names\\n        StringBuilder simplifiedPath = new StringBuilder();\\n        for (String name : simplified) {\\n            simplifiedPath.append(\"/\").append(name);\\n        }\\n        \\n        return simplifiedPath.length() == 0 ? \"/\" : simplifiedPath.toString();   \\n    }\\n```\\n",
                "solutionTags": [],
                "code": "```\\n    public String simplifyPath(String path) {\\n        String[] dirNames = path.split(\"/\");\\n        \\n        // shortest (substitute . or ..)\\n        List<String> simplified = new ArrayList<>();\\n        for (String name : dirNames) {\\n            if (!name.isEmpty() && !name.equals(\".\")) {\\n                if (name.equals(\"..\")) {\\n                    if (!simplified.isEmpty()) {\\n                        simplified.remove(simplified.size() - 1);\\n                    }\\n                } else { \\n                    simplified.add(name);\\n                }\\n            } \\n        }\\n            \\n        // start with /, single / between two directory names\\n        StringBuilder simplifiedPath = new StringBuilder();\\n        for (String name : simplified) {\\n            simplifiedPath.append(\"/\").append(name);\\n        }\\n        \\n        return simplifiedPath.length() == 0 ? \"/\" : simplifiedPath.toString();   \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 25781,
                "title": "c-implementation",
                "content": "    class Solution {\\n    public:\\n        string simplifyPath(string path) {\\n            vector<string> st;\\n            vector<string> nodes;\\n            string result;\\n            split(path, '/', nodes);\\n            for(auto node : nodes) {\\n                //empty or only '.' path no change\\n                if(node == \"\" || node == \".\")  continue;\\n                //go back to the upper directory\\n                if(node == \"..\" && !st.empty())  st.pop_back();\\n                //push back the current directory\\n                else if(node != \"..\")  st.push_back(node);\\n            }\\n            for(auto it : st) result += \"/\" + it;\\n            return result.empty() ? \"/\" : result;\\n        }\\n        \\n        void split(string s, char delim, vector<string>& nodes) {\\n            string temp;\\n            stringstream ss(s);\\n            while(getline(ss, temp, delim)) {\\n                nodes.push_back(temp);\\n            }\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        string simplifyPath(string path) {\\n            vector<string> st;\\n            vector<string> nodes;\\n            string result;\\n            split(path, '/', nodes);\\n            for(auto node : nodes) {\\n                //empty or only '.' path no change\\n                if(node == \"\" || node == \".\")  continue;\\n                //go back to the upper directory\\n                if(node == \"..\" && !st.empty())  st.pop_back();\\n                //push back the current directory\\n                else if(node != \"..\")  st.push_back(node);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3408365,
                "title": "one-line-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        return __import__(\\'os\\').path.abspath(path)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        return __import__(\\'os\\').path.abspath(path)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407238,
                "title": "python-simple-solution-using-stack",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack = []\\n\\n        # different directories present in the string\\n        temp = path.split(\\'/\\') \\n\\n        for i in temp:\\n            if i != \\'.\\' and i != \\'\\' and i != \\'..\\':\\n                stack.append(i) # add if it is directory\\n\\n            # move to back directory if \\'..\\'\\n            elif i == \\'..\\':\\n                if stack:\\n                    stack.pop()\\n        \\n        return \\'/\\' + \\'/\\'.join(stack)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack = []\\n\\n        # different directories present in the string\\n        temp = path.split(\\'/\\') \\n\\n        for i in temp:\\n            if i != \\'.\\' and i != \\'\\' and i != \\'..\\':\\n                stack.append(i) # add if it is directory\\n\\n            # move to back directory if \\'..\\'\\n            elif i == \\'..\\':\\n                if stack:\\n                    stack.pop()\\n        \\n        return \\'/\\' + \\'/\\'.join(stack)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406774,
                "title": "java-easy-solution-using-split-method-beginner-friendly-98-faster-code-stringbuilder",
                "content": "\\n\\n# Code\\nPLEASE UPVOTE IF YOU LIKE.\\n```\\nclass Solution {\\n     public String simplifyPath(String path) {\\n        String[] paths = path.split(\"/\");\\n        int left = -1, right = 0;\\n        while (right < paths.length) {\\n        \\tif (paths[right].equals(\"..\"))\\n        \\t\\tleft = left == -1 ? -1 : left - 1;\\n        \\telse if (!paths[right].equals(\".\") && !paths[right].equals(\"\"))\\n        \\t\\tpaths[++left] = paths[right];\\n        \\tright++;\\n        }\\n        if (left == -1)\\n        \\treturn \"/\";\\n        StringBuilder buf = new StringBuilder();\\n        for (int i = 0; i <= left; i++)\\n        \\tbuf.append(\\'/\\').append(paths[i]);\\n        return buf.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n     public String simplifyPath(String path) {\\n        String[] paths = path.split(\"/\");\\n        int left = -1, right = 0;\\n        while (right < paths.length) {\\n        \\tif (paths[right].equals(\"..\"))\\n        \\t\\tleft = left == -1 ? -1 : left - 1;\\n        \\telse if (!paths[right].equals(\".\") && !paths[right].equals(\"\"))\\n        \\t\\tpaths[++left] = paths[right];\\n        \\tright++;\\n        }\\n        if (left == -1)\\n        \\treturn \"/\";\\n        StringBuilder buf = new StringBuilder();\\n        for (int i = 0; i <= left; i++)\\n        \\tbuf.append(\\'/\\').append(paths[i]);\\n        return buf.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1808626,
                "title": "c-easy-solution-stack",
                "content": "**If you like the solution please upvote it.**\\n\\n\\tstring simplifyPath(string path) {\\n        int n = path.size();\\n        if(path.back()!=\\'/\\') {\\n            path.push_back(\\'/\\');\\n            n++;\\n        }\\n        cout << path << \" \" << n << endl;\\n        string temp;\\n        stack<string> st;\\n        int i=1;\\n        while(i<n) {\\n            if(path[i] == \\'/\\') {\\n                if(temp==\"\" || temp==\".\") {\\n                    temp = \"\";\\n                }\\n                else if(temp==\"..\") {\\n                    if(!st.empty())\\n                        st.pop();\\n                }\\n                else \\n                    st.push(temp);\\n                temp=\"\";\\n            }\\n            else {\\n                temp.push_back(path[i]);\\n            }\\n            i++;\\n        }\\n        string res=\"\";\\n        while(!st.empty()) {\\n            res = \"/\"+st.top()+res;\\n            st.pop();\\n        }\\n        if(res.length()==0)\\n            res.push_back(\\'/\\');\\n        return res;\\n    }",
                "solutionTags": [
                    "C",
                    "String",
                    "Stack"
                ],
                "code": "**If you like the solution please upvote it.**\\n\\n\\tstring simplifyPath(string path) {\\n        int n = path.size();\\n        if(path.back()!=\\'/\\') {\\n            path.push_back(\\'/\\');\\n            n++;\\n        }\\n        cout << path << \" \" << n << endl;\\n        string temp;\\n        stack<string> st;\\n        int i=1;\\n        while(i<n) {\\n            if(path[i] == \\'/\\') {\\n                if(temp==\"\" || temp==\".\") {\\n                    temp = \"\";\\n                }\\n                else if(temp==\"..\") {\\n                    if(!st.empty())\\n                        st.pop();\\n                }\\n                else \\n                    st.push(temp);\\n                temp=\"\";\\n            }\\n            else {\\n                temp.push_back(path[i]);\\n            }\\n            i++;\\n        }\\n        string res=\"\";\\n        while(!st.empty()) {\\n            res = \"/\"+st.top()+res;\\n            st.pop();\\n        }\\n        if(res.length()==0)\\n            res.push_back(\\'/\\');\\n        return res;\\n    }",
                "codeTag": "C++"
            },
            {
                "id": 1553245,
                "title": "stack-solution-easy-to-understand-tc-sc-o-n",
                "content": "**71. Simply Path - Solution**\\n\\nPseudo Code:\\nfunction simplyPath (string path)\\n1. Input : *path*\\n2. Declare a stack variable, *s*\\n3.  Declare string variables, *directory* & *result*\\n4.  Add \\'/\\' to path (why: to mark the end of the last directory if the *path* doesn\\'t end with \\'/\\' )\\n5.  Traverse through *path*\\n     a. Let current character be *curr*\\n\\t b.if *curr* is not \\'/\\' , then concatenate *curr* to *directory* (why: Assuming anything that is not \\'/\\' is going to be the directory name, and we handle \".\" , \"..\" accordingly)\\n\\t c. else\\n\\t     &nbsp;&nbsp;&nbsp; - if *directory* is empty or \".\" , then do nothing\\n\\t\\t &nbsp;&nbsp;&nbsp; - else if *directory* = \"..\" , then pop from stack, *s* (why: \"..\" represent directory up a level. so, the last encountered directory is not required)\\n\\t\\t &nbsp;&nbsp;&nbsp; - else push *directory* to the stack, *s* (why: anything non-null string other than \".\" , \"..\" represent a directory)\\n\\t\\t &nbsp;&nbsp;&nbsp; - end if\\n\\t\\t &nbsp;&nbsp;&nbsp; - clear *directory* value (why: to store next directory name)\\n\\t  d. end if\\n6. if stack, *s* is empty return \"/\"\\n7. end if\\n8. while stack, *s* is not empty\\n     a. Replace *result* with \\'/\\' + stack top + *result*\\n     b. pop from stack, *s*\\n9. end while\\n10. return *result*\\n\\n```\\nstring simplifyPath(string path) {\\n        stack<string> s; \\n        string directory, result;\\n        \\n        path+=\\'/\\';               \\n        \\n        for(int i=0;i<path.size();i++){\\n            if(path[i]!=\\'/\\')\\n                directory+=path[i];\\n            else {\\n                  if(directory.length()==0 || directory==\".\") {}\\n                  else if(directory==\"..\") {\\n                     if(!s.empty())\\n                        s.pop();\\n                  }\\n                  else               \\n                     s.push(directory);\\n                  directory=\"\";\\n            }            \\n        }\\n        \\n        if(s.size()==0)\\n            return \"/\";\\n        \\n        while(!s.empty()){\\n            result=\"/\"+s.top()+result;\\n            s.pop();\\n        }\\n        \\n        return result;\\n}\\n```\\nHope it helps!\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Stack"
                ],
                "code": "```\\nstring simplifyPath(string path) {\\n        stack<string> s; \\n        string directory, result;\\n        \\n        path+=\\'/\\';               \\n        \\n        for(int i=0;i<path.size();i++){\\n            if(path[i]!=\\'/\\')\\n                directory+=path[i];\\n            else {\\n                  if(directory.length()==0 || directory==\".\") {}\\n                  else if(directory==\"..\") {\\n                     if(!s.empty())\\n                        s.pop();\\n                  }\\n                  else               \\n                     s.push(directory);\\n                  directory=\"\";\\n            }            \\n        }\\n        \\n        if(s.size()==0)\\n            return \"/\";\\n        \\n        while(!s.empty()){\\n            result=\"/\"+s.top()+result;\\n            s.pop();\\n        }\\n        \\n        return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1051451,
                "title": "go-stack-100-o-n-two-solutions-unit-test",
                "content": "The problem statement asks us to normalize a given path from notation having references to a  current `\".\"` and/or parent `\"..\"` directories to the canonical, absolute path. A given path is a list of directories separated by `\"/\"`, optionally having aforementioned references injected into it. To convert a path into canonical one we can split it by the separator `\"/\"` and normalize split list using _stack_ (basically, truncate split list) to manage references to parent directories `\"..\"` efficiently.\\n\\n    import (\\n    \\t\"strings\"\\n    )\\n    \\n    func simplifyPath(path string) string {\\n    \\tstack := []string{}\\n    \\tchunks := strings.Split(path, \"/\")\\n    \\tfor _, chunk := range chunks {\\n    \\t\\tswitch chunk {\\n    \\t\\tcase \".\", \"\":\\n    \\t\\t\\tcontinue\\n    \\t\\tcase \"..\":\\n    \\t\\t\\tif len(stack) > 0 {\\n    \\t\\t\\t\\tstack = stack[:len(stack)-1]\\n    \\t\\t\\t}\\n    \\t\\tdefault:\\n    \\t\\t\\tstack = append(stack, chunk)\\n    \\t\\t}\\n    \\t}\\n    \\treturn \"/\" + strings.Join(stack, \"/\")\\n    }\\n\\n**Complexity:**\\n- Time: 0(n)\\n- Space: 0(n)\\n\\nAnother approach is to (cheat ;) and use standard library: \\n\\n    import (\\n    \\tp \"path\"\\n    )\\n    \\n    func simplifyPath(path string) string {\\n    \\treturn p.Clean(path)\\n    }\\n\\nThe code of both approaches covered with unit test is available at the Go playground by the URL https://play.golang.org/p/d9gP8PI5mnj\\n\\nIf you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Go"
                ],
                "code": "The problem statement asks us to normalize a given path from notation having references to a  current `\".\"` and/or parent `\"..\"` directories to the canonical, absolute path. A given path is a list of directories separated by `\"/\"`, optionally having aforementioned references injected into it. To convert a path into canonical one we can split it by the separator `\"/\"` and normalize split list using _stack_ (basically, truncate split list) to manage references to parent directories `\"..\"` efficiently.\\n\\n    import (\\n    \\t\"strings\"\\n    )\\n    \\n    func simplifyPath(path string) string {\\n    \\tstack := []string{}\\n    \\tchunks := strings.Split(path, \"/\")\\n    \\tfor _, chunk := range chunks {\\n    \\t\\tswitch chunk {\\n    \\t\\tcase \".\", \"\":\\n    \\t\\t\\tcontinue\\n    \\t\\tcase \"..\":\\n    \\t\\t\\tif len(stack) > 0 {\\n    \\t\\t\\t\\tstack = stack[:len(stack)-1]\\n    \\t\\t\\t}\\n    \\t\\tdefault:\\n    \\t\\t\\tstack = append(stack, chunk)\\n    \\t\\t}\\n    \\t}\\n    \\treturn \"/\" + strings.Join(stack, \"/\")\\n    }\\n\\n**Complexity:**\\n- Time: 0(n)\\n- Space: 0(n)\\n\\nAnother approach is to (cheat ;) and use standard library: \\n\\n    import (\\n    \\tp \"path\"\\n    )\\n    \\n    func simplifyPath(path string) string {\\n    \\treturn p.Clean(path)\\n    }\\n\\nThe code of both approaches covered with unit test is available at the Go playground by the URL https://play.golang.org/p/d9gP8PI5mnj\\n\\nIf you like solution and explanations, please **Upvote!**",
                "codeTag": "Python3"
            },
            {
                "id": 1051132,
                "title": "simplify-path-easy-python-solution",
                "content": "```\\ndef simplifyPath(self, path: str) -> str:\\n        \\n        stack = []\\n        \\n        path = path.split(\\'/\\')\\n        \\n        for p in path:\\n            if not p or p==\\'.\\':\\n                continue\\n            elif p==\\'..\\':\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(p)\\n                \\n                \\n        root = \"/\"\\n        \\n        return root + \"/\".join(stack)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef simplifyPath(self, path: str) -> str:\\n        \\n        stack = []\\n        \\n        path = path.split(\\'/\\')\\n        \\n        for p in path:\\n            if not p or p==\\'.\\':\\n                continue\\n            elif p==\\'..\\':\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(p)\\n                \\n                \\n        root = \"/\"\\n        \\n        return root + \"/\".join(stack)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 225602,
                "title": "c-4ms-beats-100-simple-explanation",
                "content": "## Simplify Path\\n\\n### Approach: 4ms, beats 100%\\nThe approach for this question is really simple. The visited directories are kept track of using a stack. The following rules need to be taken care of:\\n1)Each non empty string between two consecutive \\'/\\' resemble a directory.\\n2)If this string is \\'.\\' then ignore it.\\n3)If this string is \\'..\\' then remove the last opened directory(present working directory) from the top of stack, if the stack is non empty.\\n4)Otherwise, the string resembles a new directory name and hence it is to be pushed into the stack.\\n\\nContinue the above procedure till the entire input path hasnt been traversed. In case the last character of the path is not \\'/\\', we have to check the string constituting the name of the last directory in the path and check if it is \\'.\\', \\'..\\' or something else and operate on it as in the above steps.\\n\\nPop the stack and store the strings in reserse order in the answer string seperated by using \\'/\\' as delimiter. If the answer string is empty then return \"/\", else return the answer string.\\n\\nCode:\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        string s = \"\";\\n        stack<string> stck;\\n        for(int i=0;i<path.size();i++)\\n        {\\n            char c = path[i];\\n            if(c==\\'/\\')\\n            {\\n                if(s==\"..\")\\n                {\\n                    if(!stck.empty())\\n                    {\\n                    stck.pop();\\n                    s=\"\";\\n                    }\\n            }\\n            else if(s!=\"\" && s!=\".\")\\n            {\\n                stck.push(s);\\n            }\\n            s=\"\";\\n            continue;\\n            }\\n            s+=c;\\n        }\\n        if(path[path.size()-1]!=\\'/\\')\\n        {\\n            if(s==\"..\")\\n            {\\n                if(!stck.empty())\\n                {\\n                    stck.pop();\\n                }\\n            }\\n            else if(s!=\"\" && s!=\".\")\\n            {\\n                stck.push(s);\\n            }\\n        }\\n        s = \"\";\\n        while(!stck.empty())\\n        {\\n            s = \"/\"+stck.top()+s;\\n            stck.pop();\\n        }\\n        if(s==\"\")\\n        {\\n            return \"/\";\\n        }\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        string s = \"\";\\n        stack<string> stck;\\n        for(int i=0;i<path.size();i++)\\n        {\\n            char c = path[i];\\n            if(c==\\'/\\')\\n            {\\n                if(s==\"..\")\\n                {\\n                    if(!stck.empty())\\n                    {\\n                    stck.pop();\\n                    s=\"\";\\n                    }\\n            }\\n            else if(s!=\"\" && s!=\".\")\\n            {\\n                stck.push(s);\\n            }\\n            s=\"\";\\n            continue;\\n            }\\n            s+=c;\\n        }\\n        if(path[path.size()-1]!=\\'/\\')\\n        {\\n            if(s==\"..\")\\n            {\\n                if(!stck.empty())\\n                {\\n                    stck.pop();\\n                }\\n            }\\n            else if(s!=\"\" && s!=\".\")\\n            {\\n                stck.push(s);\\n            }\\n        }\\n        s = \"\";\\n        while(!stck.empty())\\n        {\\n            s = \"/\"+stck.top()+s;\\n            stck.pop();\\n        }\\n        if(s==\"\")\\n        {\\n            return \"/\";\\n        }\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25756,
                "title": "my-5ms-java-solution-without-stack-and-deque-beats-98-of-solutions",
                "content": "First to first, there is no stack or deque used in my solution. The only thing I did is just to transfer original string into char array.\\n\\nMy idea is:\\n Key: Use a counter to count how many times \"..\" appears before we handle a normal string of part of the path.\\n\\n1. go through the char array from end to start\\n2. ignore all '/' characters\\n3. get string between '/'\\n4. handle this string in 4 branches:\\n4.a if it is empty or equals to \".\", do nothing\\n4.b if it is equals to \"..\", counter++\\n4.c if the counter is greater than 0, then counter--\\n4.d else ( counter == 0) do concatenation of result with current part of path.\\n\\nMy code: \\n```\\npublic String simplifyPath(String path) {\\n        String ans = \"\";\\n        char[] chars = path.toCharArray();\\n        int i = chars.length - 1;\\n        // a counter to count how many times \"..\" shows up\\n        int count = 0;  \\n        while ( i >=0) {\\n            int j = i;\\n            while( j >= 0 && chars[j] == '/')\\n                j--;\\n            int k = j;\\n            while(k >=0 && chars[k] != '/')\\n                k--;\\n            String part = String.valueOf(chars, k+1, j-k);\\n            if (part.isEmpty() || part.equals(\".\")){\\n                // do nothing\\n            }\\n            // count appearence of \"..\"\\n            else if(part.equals(\"..\")) \\n                count++;\\n           // ignore current part, \\n           //because there is \"..\" after it\\n           else if (count > 0) \\n                count--;\\n           // count == 0, no need to ignore current part \\n           // and do result concatenation\\n            else\\n                ans = \"/\" + part + ans;\\n            i = k;\\n        }\\n        return ans.isEmpty()? \"/\" : ans;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "First to first, there is no stack or deque used in my solution. The only thing I did is just to transfer original string into char array.\\n\\nMy idea is:\\n Key: Use a counter to count how many times \"..\" appears before we handle a normal string of part of the path.\\n\\n1. go through the char array from end to start\\n2. ignore all '/' characters\\n3. get string between '/'\\n4. handle this string in 4 branches:\\n4.a if it is empty or equals to \".\", do nothing\\n4.b if it is equals to \"..\", counter++\\n4.c if the counter is greater than 0, then counter--\\n4.d else ( counter == 0) do concatenation of result with current part of path.\\n\\nMy code: \\n```\\npublic String simplifyPath(String path) {\\n        String ans = \"\";\\n        char[] chars = path.toCharArray();\\n        int i = chars.length - 1;\\n        // a counter to count how many times \"..\" shows up\\n        int count = 0;  \\n        while ( i >=0) {\\n            int j = i;\\n            while( j >= 0 && chars[j] == '/')\\n                j--;\\n            int k = j;\\n            while(k >=0 && chars[k] != '/')\\n                k--;\\n            String part = String.valueOf(chars, k+1, j-k);\\n            if (part.isEmpty() || part.equals(\".\")){\\n                // do nothing\\n            }\\n            // count appearence of \"..\"\\n            else if(part.equals(\"..\")) \\n                count++;\\n           // ignore current part, \\n           //because there is \"..\" after it\\n           else if (count > 0) \\n                count--;\\n           // count == 0, no need to ignore current part \\n           // and do result concatenation\\n            else\\n                ans = \"/\" + part + ans;\\n            i = k;\\n        }\\n        return ans.isEmpty()? \"/\" : ans;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 25766,
                "title": "java-solution-without-using-build-in-split-function-beats-over-91",
                "content": "When we encounter \"/\", we try to find the next \"/\" and get the string between them. If it equals \"..\" and the stack is not empty, then we pop one element. If it does not equal \".\" and is not empty, then we can push it into the stack.\\n\\n    public class Solution {\\n        public String simplifyPath(String path) {\\n            StringBuilder sb = new StringBuilder();\\n            Stack<String> stack = new Stack<>();\\n            int i = 0, len = path.length();\\n            while (i < len) {\\n                if (path.charAt(i) == '/') {\\n                    int j = i+1;\\n                    while (j < len && path.charAt(j) != '/') {\\n                        j++;\\n                    }\\n                    String current = path.substring(i+1, j);\\n                    if (current.equals(\"..\")) {\\n                        if (!stack.isEmpty()) {\\n                            stack.pop();\\n                        }\\n                    } else {\\n                        if (!current.equals(\".\") && !current.equals(\"\")) {\\n                            stack.push(current);\\n                        }\\n                    }\\n                    i = j;\\n                }\\n            }\\n            for (String s : stack) {\\n                sb.append(\"/\"+s);\\n            }\\n            return sb.length() == 0 ? \"/\" : sb.toString();\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public String simplifyPath(String path) {\\n            StringBuilder sb = new StringBuilder();\\n            Stack<String> stack = new Stack<>();\\n            int i = 0, len = path.length();\\n            while (i < len) {\\n                if (path.charAt(i) == '/') {\\n                    int j = i+1;\\n                    while (j < len && path.charAt(j) != '/') {\\n                        j++;\\n                    }",
                "codeTag": "Java"
            },
            {
                "id": 3408403,
                "title": "c-solution-with-approach",
                "content": "# \\u2B06\\uFE0FLike|\\uD83C\\uDFAFShare|\\u2B50Favourite\\n\\n# Approach\\n1. Split the path into parts using \\'/\\' as the delimiter.\\n2. Iterate through the parts and push the parts into a stack.\\n3. If the part is \"..\" then pop the stack.\\n4. If the part is \".\" or \"\" then do nothing.\\n5. If the part is anything else then push it into the stack.\\n6. Iterate through the stack and build the result string.\\n7. Return the result string.\\n\\n# Complexity\\n- Time complexity:\\nO(n) where n is the length of the path.\\n\\n- Space complexity:\\nO(n) where n is the length of the path.\\n\\n# C# Code\\n```\\npublic class Solution \\n{\\n    public string SimplifyPath(string path)\\n    {\\n        var stack = new Stack<string>();\\n        var parts = path.Split(\\'/\\');\\n        foreach (var part in parts)\\n        {\\n            if (part == \"..\")\\n            {\\n                if (stack.Count > 0)\\n                {\\n                    stack.Pop();\\n                }\\n            }\\n            else if (part != \".\" && part != \"\")\\n            {\\n                stack.Push(part);\\n            }\\n        }\\n        var result = new StringBuilder();\\n        while (stack.Count > 0)\\n        {\\n            result.Insert(0, stack.Pop());\\n            result.Insert(0, \"/\");\\n        }\\n        return result.Length == 0 ? \"/\" : result.ToString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "String",
                    "Stack"
                ],
                "code": "```\\npublic class Solution \\n{\\n    public string SimplifyPath(string path)\\n    {\\n        var stack = new Stack<string>();\\n        var parts = path.Split(\\'/\\');\\n        foreach (var part in parts)\\n        {\\n            if (part == \"..\")\\n            {\\n                if (stack.Count > 0)\\n                {\\n                    stack.Pop();\\n                }\\n            }\\n            else if (part != \".\" && part != \"\")\\n            {\\n                stack.Push(part);\\n            }\\n        }\\n        var result = new StringBuilder();\\n        while (stack.Count > 0)\\n        {\\n            result.Insert(0, stack.Pop());\\n            result.Insert(0, \"/\");\\n        }\\n        return result.Length == 0 ? \"/\" : result.ToString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407220,
                "title": "easy-commented-code-in-c-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n      stack<string> st;\\n        string res = \"\";\\n        for(int i = 0;  i < path.length() ; i++)\\n        {\\n            if(path[i] == \\'/\\') continue; // skip it\\n            string temp;\\n\\t\\t\\t// iterate till we doesn\\'t traverse the whole string and doesn\\'t encounter the last\\n            while(i < path.size() && path[i] != \\'/\\')\\n            {\\n                temp += path[i]; // add the current path\\n                i++;\\n            }\\n            if(temp == \".\") continue; // skip again\\n            else if(temp == \"..\") {\\n                if(!st.empty())\\n                    st.pop();\\n            }\\n            else\\n\\t\\t\\t// push the directory file name to stack\\n                st.push(temp);\\n        }\\n\\n        while(!st.empty()) {\\n            res = \"/\" + st.top() + res; // adding this way, helps us, that we don\\'t need to reverse the string after that\\n            st.pop();\\n        }\\n        \\n        if(res.size() == 0)  return \"/\"; // if no directory is there \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n      stack<string> st;\\n        string res = \"\";\\n        for(int i = 0;  i < path.length() ; i++)\\n        {\\n            if(path[i] == \\'/\\') continue; // skip it\\n            string temp;\\n\\t\\t\\t// iterate till we doesn\\'t traverse the whole string and doesn\\'t encounter the last\\n            while(i < path.size() && path[i] != \\'/\\')\\n            {\\n                temp += path[i]; // add the current path\\n                i++;\\n            }\\n            if(temp == \".\") continue; // skip again\\n            else if(temp == \"..\") {\\n                if(!st.empty())\\n                    st.pop();\\n            }\\n            else\\n\\t\\t\\t// push the directory file name to stack\\n                st.push(temp);\\n        }\\n\\n        while(!st.empty()) {\\n            res = \"/\" + st.top() + res; // adding this way, helps us, that we don\\'t need to reverse the string after that\\n            st.pop();\\n        }\\n        \\n        if(res.size() == 0)  return \"/\"; // if no directory is there \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407036,
                "title": "python3-solution",
                "content": "\\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n    \\n        stack=[]\\n        for a in path.split(\\'/\\'):\\n            if a==\\'..\\':\\n                if stack:\\n                    stack.pop()\\n\\n            elif a not in (\\'\\',\\'.\\'):\\n                stack.append(a)\\n\\n\\n        return \"/\"+\"/\".join(stack)                   \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n    \\n        stack=[]\\n        for a in path.split(\\'/\\'):\\n            if a==\\'..\\':\\n                if stack:\\n                    stack.pop()\\n\\n            elif a not in (\\'\\',\\'.\\'):\\n                stack.append(a)\\n\\n\\n        return \"/\"+\"/\".join(stack)                   \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406942,
                "title": "advance-string-manipulations-split-and-iterate-java",
                "content": "# Intuition\\nThe things you need to keep in mind:\\n- The path will be a valid Unix command. Yes you read that right. Unix path command.\\n- Entering \"../\" will change the current directory to it\\'s parent directory.\\n- Entering \"./\" will stay in the same current directory.\\n- Entering \"x\" will visit the child directory named **x**.\\n\\nNow for the output your result must ensure the following things:\\n- The path starts with a single slash \\'/\\'.\\n- Any two directories are separated by a single slash \\'/\\'.\\n- The path does not end with a trailing \\'/\\'.\\n- The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period \\'.\\' or double period \\'..\\')\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n## The main idea of this solution is to use a stack. How you decide to process the input string is a personal choice.\\n\\nYour mind is telling you to split the path according to **\"/\"**. So, what are you waiting for? Split it!\\nNow the arrays you found. This array will contain paths. Some of them are simple \"xyz\". Some are **\".\"** . Some are **\"..\"** and some are empty **\"\"**. So, based on these elements we will insert the values in an arraylist.\\n- If we encounter \"..\" we pop the last element from the arraylist.\\n- If we encounter \".\", we do nothing.\\n- In other cases, we insert in the arraylist.\\n\\n# Complexity\\n- Time Complexity: $$O(N)$$ if there are $$N$$ characters in the `path` variable. First, we spend $$O(N)$$ trying to split the input path into components and then we process each component one by one which is again an $$O(N)$$ operation.\\n\\n- Space Complexity: $$O(N)$$. Actually, it\\'s $$2N$$ because we have the array that contains the split components and then we have the arraylist stack.\\n\\n# Code\\n``` Java []\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        // I didn\\'t know yesterday that we could use vars like this!\\n        var dirs = new ArrayList<String>();\\n        for(var dir : path.split(\"/\")) {\\n            if(dir.isEmpty() || dir.equals(\".\")){\\n                continue;\\n            }\\n            if(dir.equals(\"..\")) {\\n                if(!dirs.isEmpty()){\\n                    dirs.remove(dirs.size()-1);\\n                }\\n            }\\n            else {\\n                dirs.add(dir);\\n            }\\n        }\\n        return \"/\" + String.join(\"/\", dirs);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "``` Java []\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        // I didn\\'t know yesterday that we could use vars like this!\\n        var dirs = new ArrayList<String>();\\n        for(var dir : path.split(\"/\")) {\\n            if(dir.isEmpty() || dir.equals(\".\")){\\n                continue;\\n            }\\n            if(dir.equals(\"..\")) {\\n                if(!dirs.isEmpty()){\\n                    dirs.remove(dirs.size()-1);\\n                }\\n            }\\n            else {\\n                dirs.add(dir);\\n            }\\n        }\\n        return \"/\" + String.join(\"/\", dirs);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406744,
                "title": "easy-to-understand-code-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path)\\n    {\\n        //\\'/\\' is used as a marker for end of the previous directory\\n        path.push_back(\\'/\\'); \\n        stack<string>st;\\n        //===============================================================================================\\n        string directory = \"\";\\n        for (int i = 0; i < path.size(); i++)\\n        {\\n            if (path[i] == \\'/\\') //for every \\'/\\' try to consider the recorded \"directory\"\\n            {\\n                //==========================================================\\n                if (directory == \"..\") //go  back one directory\\n                {\\n                    if (!st.empty()) st.pop();\\n                }\\n                else if (directory != \".\" && directory != \"\")  //if directory is valid string\\n                    st.push(directory);\\n                //==========================================================\\n                //else if (directory == \".\") => do Nothing [stay in curr directory]\\n                //else if (directory == \"/\") => this will occur when there are consecutive \\'/\\' => doNothing\\n                directory = \"\";\\n            }\\n            else directory.push_back(path[i]);\\n        }\\n        //=============================================================================================\\n        string ans = \"\";\\n        while(!st.empty()) \\n        { \\n            ans = \"/\" + st.top() + ans; \\n            st.pop(); \\n        }\\n        //==============================================================================================\\n        return (ans == \"\" ? \"/\" : ans);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path)\\n    {\\n        //\\'/\\' is used as a marker for end of the previous directory\\n        path.push_back(\\'/\\'); \\n        stack<string>st;\\n        //===============================================================================================\\n        string directory = \"\";\\n        for (int i = 0; i < path.size(); i++)\\n        {\\n            if (path[i] == \\'/\\') //for every \\'/\\' try to consider the recorded \"directory\"\\n            {\\n                //==========================================================\\n                if (directory == \"..\") //go  back one directory\\n                {\\n                    if (!st.empty()) st.pop();\\n                }\\n                else if (directory != \".\" && directory != \"\")  //if directory is valid string\\n                    st.push(directory);\\n                //==========================================================\\n                //else if (directory == \".\") => do Nothing [stay in curr directory]\\n                //else if (directory == \"/\") => this will occur when there are consecutive \\'/\\' => doNothing\\n                directory = \"\";\\n            }\\n            else directory.push_back(path[i]);\\n        }\\n        //=============================================================================================\\n        string ans = \"\";\\n        while(!st.empty()) \\n        { \\n            ans = \"/\" + st.top() + ans; \\n            st.pop(); \\n        }\\n        //==============================================================================================\\n        return (ans == \"\" ? \"/\" : ans);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1847723,
                "title": "c-very-easy-logic-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        \\n        path.push_back(\\'/\\');   // to handle cases like \"/...\"\\n        \\n        stack<string> st;   // to hold directories\\n        \\n        string directory = \"\";\\n        for(int i=0; i<path.size(); i++) {\\n            \\n            if( path[i] == \\'/\\' ) {      // push valid directories to stack\\n                if( directory == \"..\" && !st.empty() ) st.pop();\\n                else if( directory != \"\" && directory != \".\" && directory != \"..\") st.push(directory);\\n                directory = \"\";\\n            }\\n            else directory.push_back(path[i]);  // adding chars to directory name until finds any \\'/\\' slash\\n        }\\n        \\n        \\n        // now construct the canonical directory\\n        string result = \"\";\\n        while(!st.empty()) {\\n            result = \"/\"+st.top()+result;\\n            st.pop();\\n        }\\n        \\n        if(result==\"\") return \"/\";\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        \\n        path.push_back(\\'/\\');   // to handle cases like \"/...\"\\n        \\n        stack<string> st;   // to hold directories\\n        \\n        string directory = \"\";\\n        for(int i=0; i<path.size(); i++) {\\n            \\n            if( path[i] == \\'/\\' ) {      // push valid directories to stack\\n                if( directory == \"..\" && !st.empty() ) st.pop();\\n                else if( directory != \"\" && directory != \".\" && directory != \"..\") st.push(directory);\\n                directory = \"\";\\n            }\\n            else directory.push_back(path[i]);  // adding chars to directory name until finds any \\'/\\' slash\\n        }\\n        \\n        \\n        // now construct the canonical directory\\n        string result = \"\";\\n        while(!st.empty()) {\\n            result = \"/\"+st.top()+result;\\n            st.pop();\\n        }\\n        \\n        if(result==\"\") return \"/\";\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1050588,
                "title": "python-stack",
                "content": "The idea is that when we see a `..` we are going up, so the last element should be removed (if it exists), which is implemented by stack.\\n\\n```python\\nclass Solution:\\n    def simplifyPath(self, path):\\n        s = []\\n        for x in path.split(\\'/\\'):\\n            if not x: \\n                continue\\n            elif x == \\'.\\':\\n                continue\\n            elif x == \\'..\\':\\n                if s:\\n                    s.pop()\\n            else:\\n                s.append(x)\\n        return \\'/\\' + \\'/\\'.join(s)\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def simplifyPath(self, path):\\n        s = []\\n        for x in path.split(\\'/\\'):\\n            if not x: \\n                continue\\n            elif x == \\'.\\':\\n                continue\\n            elif x == \\'..\\':\\n                if s:\\n                    s.pop()\\n            else:\\n                s.append(x)\\n        return \\'/\\' + \\'/\\'.join(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 200362,
                "title": "c-stack-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        istringstream ss(path);\\n        string tempPath;\\n        vector<string> stack;\\n        while(getline(ss,tempPath,\\'/\\')){\\n            if(tempPath == \".\" || tempPath.empty()){\\n                continue;\\n            }else if(tempPath == \"..\"){\\n                if(stack.empty() == false)\\n                    stack.pop_back();\\n            }else{\\n                stack.push_back(tempPath);\\n            }\\n        }\\n        \\n        string result;\\n        for(auto &s : stack){\\n            result += \"/\" + s;\\n        }\\n        \\n        return result.empty() ? \"/\" : result;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        istringstream ss(path);\\n        string tempPath;\\n        vector<string> stack;\\n        while(getline(ss,tempPath,\\'/\\')){\\n            if(tempPath == \".\" || tempPath.empty()){\\n                continue;\\n            }else if(tempPath == \"..\"){\\n                if(stack.empty() == false)\\n                    stack.pop_back();\\n            }else{\\n                stack.push_back(tempPath);\\n            }\\n        }\\n        \\n        string result;\\n        for(auto &s : stack){\\n            result += \"/\" + s;\\n        }\\n        \\n        return result.empty() ? \"/\" : result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 25697,
                "title": "3-lines-javascript-don-t-do-this-in-interviews",
                "content": "Standard stack-based solution, compressed just to make it into 3 lines. Don't do this in interviews.\\n```\\nvar simplifyPath = function(path) {\\n    const stack = [], tokens = path.split('/').filter(t => !['/', '', '.'].includes(t));\\n    tokens.forEach(t => t === '..' ? stack.pop() : stack.push(t));\\n    return '/' + stack.join('/');\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar simplifyPath = function(path) {\\n    const stack = [], tokens = path.split('/').filter(t => !['/', '', '.'].includes(t));\\n    tokens.forEach(t => t === '..' ? stack.pop() : stack.push(t));\\n    return '/' + stack.join('/');\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 25814,
                "title": "java-solution-with-one-stack",
                "content": "General idea: Split the string by slash first and then, using a stack to store the name of directory. There are totally 5 situations when looping through the array:\\n\\n - If elem is empty string, then it means we either meet multiple slashes (\"//\", \"///\"...) or it is the start point. For this case, simply ignore and continue;\\n - If elem is \".\", then we have to stay in current directory, as the same as case 1), do nothing and continue;\\n - If elem is \"..\" and stack is not empty, then we have to go back to parent directory. For this case, simply pop the top element from stack;\\n - If elem has a name (\"home\", \"desktop\"...), push it to stack.\\n - For all other cases, do nothing and continue.\\n\\nWhen pop up elem from stack to get result, there is a special case: If stack is empty, then it means input string is \"/../\" or \"/\", or others which lead us staying in current directory. For this case, simply return \"/\".\\n\\n    public class Solution {\\n        public String simplifyPath(String path) {\\n            String[] arr = path.split(\"/\");\\n            Stack<String> stack = new Stack<>();\\n            for (int i = 0; i < arr.length; i++) {\\n                if (\"\".equals(arr[i]) || \".\".equals(arr[i])) continue;\\n                if (\"..\".equals(arr[i]) && !stack.isEmpty()) stack.pop();\\n                else if (!\"..\".equals(arr[i])) stack.push(arr[i]);\\n            }\\n            if (stack.isEmpty()) return \"/\";\\n            String result = \"\";\\n            while (!stack.isEmpty()) result = \"/\" + stack.pop() + result;\\n            return result;\\n        }\\n    }",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "class Solution {\\n        public String simplifyPath(String path) {\\n            String[] arr = path.split(\"/\");\\n            Stack<String> stack = new Stack<>();\\n            for (int i = 0; i < arr.length; i++) {\\n                if (\"\".equals(arr[i]) || \".\".equals(arr[i])) continue;\\n                if (\"..\".equals(arr[i]) && !stack.isEmpty()) stack.pop();\\n                else if (!\"..\".equals(arr[i])) stack.push(arr[i]);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 25816,
                "title": "my-simple-c-code",
                "content": "    string simplifyPath(string path) {\\n            const char* p = path.c_str();\\n            string res = \"/\";\\n            vector<string> full_path;\\n            char* addr = strtok((char*)p, \"/\");\\n            int cur = 0, size = 0;\\n            while(addr) {\\n                if(strcmp(addr, \".\") == 0) {\\n                }       \\n                else if(strcmp(addr, \"..\") == 0) {\\n                    cur > 0 ? cur-- : cur;\\n                }    \\n                else {\\n                    if(cur == size) {\\n                        full_path.push_back(addr);\\n                        cur++;\\n                        size++;\\n                    }\\n                    else {\\n                        full_path[cur++] = addr;\\n                    }\\n                }     \\n                addr = strtok(NULL, \"/\");\\n            }\\n            for(int i=0; i<cur; i++) {\\n                res = res + full_path[i] + \"/\";\\n            }\\n            return res.size() == 1 ? res : res.substr(0, res.size() - 1);\\n    }",
                "solutionTags": [],
                "code": "    string simplifyPath(string path) {\\n            const char* p = path.c_str();\\n            string res = \"/\";\\n            vector<string> full_path;\\n            char* addr = strtok((char*)p, \"/\");\\n            int cur = 0, size = 0;\\n            while(addr) {\\n                if(strcmp(addr, \".\") == 0) {\\n                }       \\n                else if(strcmp(addr, \"..\") == 0) {\\n                    cur > 0 ? cur-- : cur;\\n                }    \\n                else {\\n                    if(cur == size) {\\n                        full_path.push_back(addr);\\n                        cur++;\\n                        size++;\\n                    }\\n                    else {\\n                        full_path[cur++] = addr;\\n                    }\\n                }     \\n                addr = strtok(NULL, \"/\");\\n            }\\n            for(int i=0; i<cur; i++) {\\n                res = res + full_path[i] + \"/\";\\n            }\\n            return res.size() == 1 ? res : res.substr(0, res.size() - 1);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3767647,
                "title": "java-easy-solution-using-stack",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n      Stack<String> stack = new Stack<>();    \\n        String[] directories = path.split(\"/\"); \\n        for (String dir : directories) { \\n            if (dir.equals(\".\") || dir.isEmpty()) continue;\\n            else if (dir.equals(\"..\")) { \\n                if (!stack.isEmpty())\\n                    stack.pop();\\n            }\\n            else\\n                stack.push(dir);\\n        }\\n        return \"/\" + String.join(\"/\", stack);   \\n    }\\n}\\n```\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
                "solutionTags": [
                    "Java",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n      Stack<String> stack = new Stack<>();    \\n        String[] directories = path.split(\"/\"); \\n        for (String dir : directories) { \\n            if (dir.equals(\".\") || dir.isEmpty()) continue;\\n            else if (dir.equals(\"..\")) { \\n                if (!stack.isEmpty())\\n                    stack.pop();\\n            }\\n            else\\n                stack.push(dir);\\n        }\\n        return \"/\" + String.join(\"/\", stack);   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409586,
                "title": "most-optimal-solution-using-stack-complete-approach-explained",
                "content": "\\n\\n# Approach\\nThe solution first initializes an empty stack to keep track of the directories on the simplified path. It then uses a stringstream to split the input path into individual directory names, and iterates over them one by one.\\n\\nIf the directory name is empty (which can happen due to consecutive slashes in the input path) or equal to \".\", we can skip it and move on to the next directory.\\n\\nIf the directory name is \"..\", we need to move up one level in the directory hierarchy. To do this, we simply pop the last directory from the stack (if it\\'s not empty).\\n\\nIf the directory name is any other valid directory name, we push it onto the stack.\\n\\nOnce we\\'ve processed all the directories on the input path, we need to construct the simplified path by popping the directories from the stack in reverse order and concatenating them with a slash separator. We also need to add a leading slash to the simplified path.\\n\\nIf the stack is empty (which can happen if the input path only contains \".\" or \"..\" directories), we simply return a single slash as the simplified path.\\n\\n\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> s;\\n        stringstream ss(path);\\n        string directory, result;\\n        while (getline(ss, directory, \\'/\\')) {\\n            if (directory == \"\" || directory == \".\") {\\n                continue;\\n            } else if (directory == \"..\") {\\n                if (!s.empty()) {\\n                    s.pop();\\n                }\\n            } else {\\n                s.push(directory);\\n            }\\n        }\\n        while (!s.empty()) {\\n            result = \"/\" + s.top() + result;\\n            s.pop();\\n        }\\n        return result.empty() ? \"/\" : result;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> s;\\n        stringstream ss(path);\\n        string directory, result;\\n        while (getline(ss, directory, \\'/\\')) {\\n            if (directory == \"\" || directory == \".\") {\\n                continue;\\n            } else if (directory == \"..\") {\\n                if (!s.empty()) {\\n                    s.pop();\\n                }\\n            } else {\\n                s.push(directory);\\n            }\\n        }\\n        while (!s.empty()) {\\n            result = \"/\" + s.top() + result;\\n            s.pop();\\n        }\\n        return result.empty() ? \"/\" : result;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409341,
                "title": "easy-python-solution-98-runtime",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        \"\"\"\\n        :type path: str\\n        :rtype: str\\n        \"\"\"\\n        stack=[]\\n        path=path.split(\"/\")\\n        path=[i for i in path if i and i!=\"/\" and i!=\".\"]\\n        for i in path:\\n            if i==\"..\" and stack:\\n                stack.pop()\\n            elif i!=\"..\":\\n                stack.append(i)\\n        return \"/\"+\"/\".join(stack)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        \"\"\"\\n        :type path: str\\n        :rtype: str\\n        \"\"\"\\n        stack=[]\\n        path=path.split(\"/\")\\n        path=[i for i in path if i and i!=\"/\" and i!=\".\"]\\n        for i in path:\\n            if i==\"..\" and stack:\\n                stack.pop()\\n            elif i!=\"..\":\\n                stack.append(i)\\n        return \"/\"+\"/\".join(stack)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409173,
                "title": "java-stack-simplify-path",
                "content": "\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        ArrayList<String> stack = new ArrayList<>();\\n        int start = 0;\\n        int end = 0;\\n        while (end < path.length())\\n        {\\n            start = end;\\n            if (path.charAt(end) == \\'.\\') {\\n                start = end;\\n                while (end < path.length() && path.charAt(end) == \\'.\\')\\n                    end++;\\n                if (end - start == 1 && (end < path.length() && path.charAt(end) == \\'/\\' || end == path.length())) {\\n                    if (!stack.isEmpty()) stack.remove(stack.size() - 1);\\n                }\\n                else if (end - start == 2 && (end < path.length() && path.charAt(end) == \\'/\\' || end == path.length())) {\\n                    stack.remove(stack.size() - 1);\\n                    if (!stack.isEmpty()) stack.remove(stack.size() - 1);\\n                }\\n                else\\n                {\\n                    while (end < path.length() && path.charAt(end) != \\'/\\')\\n                        end++;\\n                    stack.add(path.substring(start,end));\\n                }\\n\\n            }\\n            else if (path.charAt(end) == \\'/\\')\\n            {\\n                if (stack.isEmpty() || !stack.get(stack.size() - 1).equals(\"/\") && end != path.length() - 1)\\n                    stack.add(path.substring(start,end + 1));\\n                end++;\\n            }\\n            else\\n            {\\n                start = end;\\n                while (end < path.length() &&  path.charAt(end) != \\'/\\')\\n                    end++;\\n                if (start != end) stack.add(path.substring(start,end));\\n            }\\n        }\\n        if (stack.isEmpty()) return \"/\";\\n        else if (stack.size() > 1 && stack.get(stack.size() - 1).equals(\"/\")) stack.remove(stack.size() - 1);\\n        StringBuilder srr = new StringBuilder();\\n        for (String d : stack)\\n            srr.append(d);\\n        return srr.toString();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        ArrayList<String> stack = new ArrayList<>();\\n        int start = 0;\\n        int end = 0;\\n        while (end < path.length())\\n        {\\n            start = end;\\n            if (path.charAt(end) == \\'.\\') {\\n                start = end;\\n                while (end < path.length() && path.charAt(end) == \\'.\\')\\n                    end++;\\n                if (end - start == 1 && (end < path.length() && path.charAt(end) == \\'/\\' || end == path.length())) {\\n                    if (!stack.isEmpty()) stack.remove(stack.size() - 1);\\n                }\\n                else if (end - start == 2 && (end < path.length() && path.charAt(end) == \\'/\\' || end == path.length())) {\\n                    stack.remove(stack.size() - 1);\\n                    if (!stack.isEmpty()) stack.remove(stack.size() - 1);\\n                }\\n                else\\n                {\\n                    while (end < path.length() && path.charAt(end) != \\'/\\')\\n                        end++;\\n                    stack.add(path.substring(start,end));\\n                }\\n\\n            }\\n            else if (path.charAt(end) == \\'/\\')\\n            {\\n                if (stack.isEmpty() || !stack.get(stack.size() - 1).equals(\"/\") && end != path.length() - 1)\\n                    stack.add(path.substring(start,end + 1));\\n                end++;\\n            }\\n            else\\n            {\\n                start = end;\\n                while (end < path.length() &&  path.charAt(end) != \\'/\\')\\n                    end++;\\n                if (start != end) stack.add(path.substring(start,end));\\n            }\\n        }\\n        if (stack.isEmpty()) return \"/\";\\n        else if (stack.size() > 1 && stack.get(stack.size() - 1).equals(\"/\")) stack.remove(stack.size() - 1);\\n        StringBuilder srr = new StringBuilder();\\n        for (String d : stack)\\n            srr.append(d);\\n        return srr.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407225,
                "title": "easy-python-solution-using-stacks-easy-to-understand",
                "content": "\\n# Complexity\\n- Time complexity: $$ O(n) $$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$ O(n) $$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        paths = path.split(\\'/\\')\\n        st = []\\n        for path in paths:\\n            if path != \"\" and path != \"..\" and path !=\".\":\\n                st.append(path)\\n            if path == \"..\" and len(st) > 0:\\n                st.pop()\\n        print(st)\\n        return \"/\"+\"/\".join(st)\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        paths = path.split(\\'/\\')\\n        st = []\\n        for path in paths:\\n            if path != \"\" and path != \"..\" and path !=\".\":\\n                st.append(path)\\n            if path == \"..\" and len(st) > 0:\\n                st.pop()\\n        print(st)\\n        return \"/\"+\"/\".join(st)\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406726,
                "title": "java-stack-8-lines-clean-code",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public String simplifyPath(String path) {\\n    var stack = new Stack<String>();\\n\\n    for (var s : path.split(\"/\")) {\\n      if (s.equals(\"..\")) {\\n        if (!stack.empty())\\n          stack.pop();\\n      } else if (!s.equals(\".\") && !s.equals(\"\")) {\\n        stack.push(s);\\n      }\\n    }\\n    return \"/\" + String.join(\"/\", stack);\\n  }\\n}\\n```\\nIf you like my solution, please upvote it!",
                "solutionTags": [
                    "Java",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n  public String simplifyPath(String path) {\\n    var stack = new Stack<String>();\\n\\n    for (var s : path.split(\"/\")) {\\n      if (s.equals(\"..\")) {\\n        if (!stack.empty())\\n          stack.pop();\\n      } else if (!s.equals(\".\") && !s.equals(\"\")) {\\n        stack.push(s);\\n      }\\n    }\\n    return \"/\" + String.join(\"/\", stack);\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406716,
                "title": "one-liner-two-solutions-14-ms-98-77-easy-to-understand",
                "content": "# Seven-liner\\n\\n14 ms 98.77%\\n\\n```swift\\nfunc simplifyPath(_ path: String) -> String {\\n    \"/\" + path.split(separator: \"/\").reduce(into: [Substring]()) {\\n        switch $1 {\\n        case \".\": return\\n        case \"..\": _ = $0.popLast()\\n        default: $0.append($1)\\n        }\\n    }.joined(separator: \"/\")\\n}\\n```\\n\\n# One-liner\\n\\n14 ms 98.77%\\n\\n```swift\\nfunc simplifyPath(_ path: String) -> String {\\n    \"/\" + path.split(separator: \"/\").filter { $0 != \".\" }.reduce(into: [Substring]()) { if $1 == \"..\" { _ = $0.popLast() } else { $0.append($1) } }.joined(separator: \"/\")\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nfunc simplifyPath(_ path: String) -> String {\\n    \"/\" + path.split(separator: \"/\").reduce(into: [Substring]()) {\\n        switch $1 {\\n        case \".\": return\\n        case \"..\": _ = $0.popLast()\\n        default: $0.append($1)\\n        }\\n    }.joined(separator: \"/\")\\n}\\n```\n```swift\\nfunc simplifyPath(_ path: String) -> String {\\n    \"/\" + path.split(separator: \"/\").filter { $0 != \".\" }.reduce(into: [Substring]()) { if $1 == \"..\" { _ = $0.popLast() } else { $0.append($1) } }.joined(separator: \"/\")\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406710,
                "title": "10-lines-code-using-stringstream",
                "content": "# **Please Upvote Me \\uD83E\\uDD79**\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        // creating answer string to store the final ans\\n        string result=\"\", token;\\n\\n        // using stringstream\\n        // << : using to add into the string\\n        // >> : used to read from the string\\n        stringstream ss(path);\\n        vector<string> tokens;\\n\\n        while(getline(ss, token, \\'/\\')){\\n            if(token==\".\" || token==\"\") \\n                continue;\\n            else if(token==\"..\"){\\n                if(tokens.size()!=0)  tokens.pop_back();\\n            }\\n            else{\\n                tokens.push_back(token);\\n            }\\n        }\\n\\n        if(tokens.size()==0) \\n            return \"/\";\\n\\n        for(int i=0; i<tokens.size(); ++i)\\n            result=result+\\'/\\'+tokens[i];\\n            \\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        // creating answer string to store the final ans\\n        string result=\"\", token;\\n\\n        // using stringstream\\n        // << : using to add into the string\\n        // >> : used to read from the string\\n        stringstream ss(path);\\n        vector<string> tokens;\\n\\n        while(getline(ss, token, \\'/\\')){\\n            if(token==\".\" || token==\"\") \\n                continue;\\n            else if(token==\"..\"){\\n                if(tokens.size()!=0)  tokens.pop_back();\\n            }\\n            else{\\n                tokens.push_back(token);\\n            }\\n        }\\n\\n        if(tokens.size()==0) \\n            return \"/\";\\n\\n        for(int i=0; i<tokens.size(); ++i)\\n            result=result+\\'/\\'+tokens[i];\\n            \\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3225748,
                "title": "simplifying-unix-style-absolute-paths",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo solve this problem, we need to construct the simplified canonical path from the input path string. We can use a stack to keep track of the directories on the canonical path as we process the input path string. For each directory name, we need to handle three cases: \".\" (current directory), \"..\" (parent directory), and other directory names.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe start by initializing an empty stack to store the directories on the canonical path. Then, we split the input path string by slashes (\"/\") to get the individual directory names. For each directory name, we do the following:\\n\\n- If the directory name is \".\", we simply skip it (as it refers to the current directory).\\n- If the directory name is \"..\", we pop the top directory from the stack (as it refers to the parent directory).\\n- Otherwise, we push the directory name onto the stack.\\nAt the end, we can construct the simplified canonical path by joining the directories in the stack with slashes and adding a leading slash.\\n# Complexity\\n- Time complexity: The time complexity of the solution is $$O(n)$$, where n is the length of the input path string, since we need to process each directory name in the path string once.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: The space complexity of the solution is $$O(n)$$, where n is the length of the input path string, since we need to store the directories on the canonical path in the stack. In the worst case, when all directories in the path string are valid directory names (i.e., no \".\" or \"..\"), the stack can have a maximum size of n/2 (when the input path string has alternating directory names and slashes).\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack = []\\n        for directory in path.split(\"/\"):\\n            if directory == \"\" or directory == \".\":\\n                continue\\n            elif directory == \"..\":\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(directory)\\n        return \"/\" + \"/\".join(stack)\\n```",
                "solutionTags": [
                    "Python3",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack = []\\n        for directory in path.split(\"/\"):\\n            if directory == \"\" or directory == \".\":\\n                continue\\n            elif directory == \"..\":\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(directory)\\n        return \"/\" + \"/\".join(stack)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3171817,
                "title": "c-easy-dequeue-o-n-0ms-beats-100-with-explanation",
                "content": "# Approach\\nWe can iterate over the given string and store the string between two `\\'/\\'` inside a dequeue. This stored string can be one of the 3 possible nature.\\n\\n    1) It can be a normal file or folder name.\\n       In this can we will push it at the back of our dequeue. \\n    2) It can be a \".\"\\n       In this can we will just ignore it.\\n    3) It can be \"..\"\\n       In this can we will pop the latest element from the back of our dequeue if it is not empty.\\n\\n\\nIf after `\\'/\\'` we encounter another `\\'/\\'` we can ignore it. \\n\\nThen, after the iteration of whole string is complete, we will run a while loop till the `dequeue` is not empty to store the string present at the front of our `dequeue` to our answer and then pop that front string from our `dequeue`.\\nAfter each addition of string we will seperate the next one by adding `\\'/\\'`\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        deque<string> s;\\n        int i = 0;\\n\\n        while(i<path.size())\\n        {\\n            if(path[i] == \\'/\\')i++;\\n            else\\n            {\\n                string str = \"\";\\n                while(i<path.size() && path[i] != \\'/\\')\\n                {\\n                    str += path[i];i++;\\n                }\\n                if(str == \"..\")\\n                {\\n                    if(!s.empty())s.pop_back();\\n                }\\n                else if(str != \".\") s.push_back(str);\\n            }\\n        }\\n\\n        string ans = \"/\";\\n        while(!s.empty())\\n        {\\n            ans += s.front();\\n            ans += \\'/\\';\\n            s.pop_front();\\n        }\\n        if(ans.size()>1)\\n            ans.pop_back();\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        deque<string> s;\\n        int i = 0;\\n\\n        while(i<path.size())\\n        {\\n            if(path[i] == \\'/\\')i++;\\n            else\\n            {\\n                string str = \"\";\\n                while(i<path.size() && path[i] != \\'/\\')\\n                {\\n                    str += path[i];i++;\\n                }\\n                if(str == \"..\")\\n                {\\n                    if(!s.empty())s.pop_back();\\n                }\\n                else if(str != \".\") s.push_back(str);\\n            }\\n        }\\n\\n        string ans = \"/\";\\n        while(!s.empty())\\n        {\\n            ans += s.front();\\n            ans += \\'/\\';\\n            s.pop_front();\\n        }\\n        if(ans.size()>1)\\n            ans.pop_back();\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2673403,
                "title": "python3-easy-to-understand-solution-o-n-time",
                "content": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack = []\\n        i = 0\\n        while i < len(path):\\n            cur = path[i]\\n            i += 1\\n            if cur == \\'/\\':\\n                while i < len(path) and path[i] == \\'/\\':\\n                    cur += path[i]\\n                    i += 1\\n            else:\\n                while i < len(path) and path[i] != \\'/\\':\\n                    cur += path[i]\\n                    i += 1\\n                    \\n            if cur == \\'..\\': \\n                if stack: stack.pop()\\n            elif cur[0] != \\'/\\' and cur != \\'.\\': \\n                stack.append(cur)\\n        \\n        res = \\'\\'\\n        for s in stack: res += \\'/\\' + s\\n            \\n        return res if res else \\'/\\'\\n\\n    \\n    \\n    \\n\\'\\'\\'Test Cases:\\n\\n\"/home/\"\\n\"/../\"\\n\"/home//foo/\"\\n\"/a/./b/../../c/\"\\n\"/a//b////c/d//././/..\"\\n\"/...\"\\n\"/..hidden\"\\n\"/a/../../b/../c//.//\"\\n\\'\\'\\'\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack = []\\n        i = 0\\n        while i < len(path):\\n            cur = path[i]\\n            i += 1\\n            if cur == \\'/\\':\\n                while i < len(path) and path[i] == \\'/\\':\\n                    cur += path[i]\\n                    i += 1\\n            else:\\n                while i < len(path) and path[i] != \\'/\\':\\n                    cur += path[i]\\n                    i += 1\\n                    \\n            if cur == \\'..\\': \\n                if stack: stack.pop()\\n            elif cur[0] != \\'/\\' and cur != \\'.\\': \\n                stack.append(cur)\\n        \\n        res = \\'\\'\\n        for s in stack: res += \\'/\\' + s\\n            \\n        return res if res else \\'/\\'\\n\\n    \\n    \\n    \\n\\'\\'\\'Test Cases:\\n\\n\"/home/\"\\n\"/../\"\\n\"/home//foo/\"\\n\"/a/./b/../../c/\"\\n\"/a//b////c/d//././/..\"\\n\"/...\"\\n\"/..hidden\"\\n\"/a/../../b/../c//.//\"\\n\\'\\'\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2540337,
                "title": "java-stack-simple",
                "content": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> st = new Stack();\\n        boolean period = false;\\n        \\n        String[] s = path.split(\"/\");\\n        \\n        for(String str : s){\\n            \\n            if(str.equals(\".\") || str.equals(\"\") || str.equals(\" \"))continue;\\n            \\n            else if(str.equals(\"..\")){\\n                if(!st.isEmpty()){\\n                    st.pop();\\n                }\\n            }else{\\n                st.push(\"/\" + str);\\n            }\\n        }\\n        String ans = \"\";\\n        while(!st.isEmpty()){\\n            \\n            ans = st.pop() + ans;\\n        }\\n       \\n        if(ans.equals(\"\"))return \"/\";\\n        return ans;\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> st = new Stack();\\n        boolean period = false;\\n        \\n        String[] s = path.split(\"/\");\\n        \\n        for(String str : s){\\n            \\n            if(str.equals(\".\") || str.equals(\"\") || str.equals(\" \"))continue;\\n            \\n            else if(str.equals(\"..\")){\\n                if(!st.isEmpty()){\\n                    st.pop();\\n                }\\n            }else{\\n                st.push(\"/\" + str);\\n            }\\n        }\\n        String ans = \"\";\\n        while(!st.isEmpty()){\\n            \\n            ans = st.pop() + ans;\\n        }\\n       \\n        if(ans.equals(\"\"))return \"/\";\\n        return ans;\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2462799,
                "title": "c-easy-solution-using-stack",
                "content": "**Approach:- \\n1. Iterate over the string .\\n2. if we got \"/\" , continue .\\n3. Now we need a temp string to store the character between  the two \"/\" , so do store in tmp while we didn\\'t get \"/\".\\n4. If we got temp as only single dot(.) , we need to contiue , it can\\'t be included in our answer.\\n5. If we go temp as double dot , in this case we need to pop from the stack if it is not empty  as double dot means a level up for that .\\n6. At last ,if above two conditions doesn\\'t meant , it means we got tmp , it will be included in our answer , so now push into the stack.****\\n\\nIn the stack , we got those string which are in the  path i.e,\\nAs In stack , elements follow LIFO method , but our answer should have value from the starting . \\nNow , we have anyhow need to put in answer from starting..\\nso we will put answer as answer = \"/\" + st.top()+ answer.\\nIt will take O(N+ N) time for resulting string to be return by popping out elements from stack.\\n\\n\\n**Please UPVOTE if find helpful.**\\n\\n\\n\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string s) {\\n        stack<string>st;\\n        string ans;\\n        int n=s.size();\\n        // Iterating through the string s\\n        for(int i=0;i<n;i++){\\n            if(s[i]==\\'/\\') continue;\\n            string tmp;\\n            while(i<n && s[i]!=\\'/\\') \\n\\t\\t\\t  tmp+=s[i++];            \\n            if(tmp==\".\") continue;\\n            else if(tmp==\"..\"){\\n                  if(!st.empty()) \\n                      st.pop();\\n            }\\n            else\\n               st.push(tmp);\\n            }\\n        while(!st.empty()){\\n            ans=\"/\"+ st.top()+ans;\\n            st.pop();\\n        }\\n        \\n         if(ans.size()==0)return \"/\";\\n        \\n      return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string s) {\\n        stack<string>st;\\n        string ans;\\n        int n=s.size();\\n        // Iterating through the string s\\n        for(int i=0;i<n;i++){\\n            if(s[i]==\\'/\\') continue;\\n            string tmp;\\n            while(i<n && s[i]!=\\'/\\') \\n\\t\\t\\t  tmp+=s[i++];            \\n            if(tmp==\".\") continue;\\n            else if(tmp==\"..\"){\\n                  if(!st.empty()) \\n                      st.pop();\\n            }\\n            else\\n               st.push(tmp);\\n            }\\n        while(!st.empty()){\\n            ans=\"/\"+ st.top()+ans;\\n            st.pop();\\n        }\\n        \\n         if(ans.size()==0)return \"/\";\\n        \\n      return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2285456,
                "title": "71-simplify-path-c-with-comments-and-explanation",
                "content": "\\n\\t\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tstring simplifyPath(string path) {\\n\\t\\t\\tstring canonicalPath = \"\"; //for creating the final path / answer\\n\\t\\t\\tstring curr = \"\"; //to build the current directory\\n\\t\\t\\tstack<string> s; //for implementing \"..\" -> POP feature (to go to the directory up a level)\\n\\t\\t\\tpath += \"/\"; //(**IMP) we add this so that the last directory gets added in case the input doesn\\'t end with \"/\"\\n\\t\\t\\t//example for the above case - \"/a//b////c/d//././/..\"\\n\\t\\t\\tfor(int i=0;i<path.length();i++){\\n\\t\\t\\t\\tif(path[i] == \\'/\\'){ //we have some cases when we find \"/\" \\n\\t\\t\\t\\t\\tif(curr == \"..\"){ //here we have to implement pop to to the directory up a level\\n\\t\\t\\t\\t\\t\\tif(!s.empty()) s.pop(); //check if the stack is already empty , in that case no need to do anything\\n\\t\\t\\t\\t\\t} else if(curr != \".\" and curr!= \"\"){ //we do nothing if curr directory which we built is \".\" or is empty\\n\\t\\t\\t\\t\\t\\ts.push(curr); //push the directory into the stack\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcurr = \"\"; //resetting the curr string after a directory is successfully added into the stack in order to build a new directory\\n\\t\\t\\t\\t} else { //keep building the current string / directory\\n\\t\\t\\t\\t\\tcurr += path[i]; //add the character to build the current directory\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t//by here : - Example : IP - \"/home//foo/\" \\n\\t\\t\\t//our stack now contains - |foo | or \"fool\",\"home\" top to down \\n\\t\\t\\t//                         |home|\\n\\t\\t\\t//now we have to start building our final answer , i.e string canonicalPath\\n\\t\\t\\twhile(!s.empty()){\\n\\t\\t\\t\\tcanonicalPath = \"/\"+s.top()+canonicalPath;\\n\\t\\t\\t\\ts.pop();\\n\\t\\t\\t}\\n\\t\\t\\t//incase our final answer is empty, then we add a condition to return \"/\" as the path always starts with a single slash \"/\"\\n\\t\\t\\tif(canonicalPath.length() == 0){\\n\\t\\t\\t\\treturn \"/\";\\n\\t\\t\\t} else { //return our final answer\\n\\t\\t\\t\\treturn canonicalPath;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Stack"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tstring simplifyPath(string path) {\\n\\t\\t\\tstring canonicalPath = \"\"; //for creating the final path / answer\\n\\t\\t\\tstring curr = \"\"; //to build the current directory\\n\\t\\t\\tstack<string> s; //for implementing \"..\" -> POP feature (to go to the directory up a level)\\n\\t\\t\\tpath += \"/\"; //(**IMP) we add this so that the last directory gets added in case the input doesn\\'t end with \"/\"\\n\\t\\t\\t//example for the above case - \"/a//b////c/d//././/..\"\\n\\t\\t\\tfor(int i=0;i<path.length();i++){\\n\\t\\t\\t\\tif(path[i] == \\'/\\'){ //we have some cases when we find \"/\" \\n\\t\\t\\t\\t\\tif(curr == \"..\"){ //here we have to implement pop to to the directory up a level\\n\\t\\t\\t\\t\\t\\tif(!s.empty()) s.pop(); //check if the stack is already empty , in that case no need to do anything\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2100643,
                "title": "java-solution-using-stack-explanation",
                "content": "let\\'s assume that the given string is \"/home/foo/./java/../bar/\"\\nfirstly we will go to directory home so i push home to stack \\n<img src = \"https://assets.leetcode.com/users/images/6f8513dc-8d89-44f2-84b8-4b2d28a3587c_1654142299.084013.png\" width = \"600\">\\n\\nthen next i will go to directory foo(inside home) to stack\\n<img src=\"https://assets.leetcode.com/users/images/6ae56263-ff30-4628-a7bc-f06f41b6c2ed_1654142398.4118161.png\" width = \"600\">\\n\\n after that i have \".\" in the string so i simply ignore that and proceed to go to java directory \\n<img src=\"https://assets.leetcode.com/users/images/8efc44e9-5206-4f34-b3f7-4b444bb88f11_1654142455.4679081.png\" width =\"600\" >\\n\\nafter that i see\"..\" which means go 1 step back so i pop out last directory entered\\n<img src=\"https://assets.leetcode.com/users/images/b1af2191-6293-4c21-8935-0a3c927b1acc_1654142508.964751.png\" width = \"600\">\\n\\nfinally i go to bar directory and push it\\n<img src=\"https://assets.leetcode.com/users/images/50406caa-7ae0-457e-bd55-a90ff56c8631_1654142572.1674197.png\" width = \"600\">\\n\\nso in the end i have to pop all the enteries in the stack and the top item should be there at the end of string \\n\\nProcedure - \\n- first get all the substrings within \"/\" \\n- if the substring is \".\" then ignore and if it is \"..\" then pop the last element of stack if stack is not empty!\\n- if the above condition not satisfy then simply push the value into stack\\n- finally pop out last value and add it to answer string as -> ``` answer = \"/\" + top value of stack + answer``` \\n- one cornor case when we haven\\'t pushed anthing into stack then simply return \"/\"\\n\\n**If you find this useful then please upvote**\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stk = new Stack<>();\\n        String ans = \"\";\\n        int record = 0;\\n        for(int i = 0 ; i < path.length(); ++i){\\n            if(path.charAt(i) == \\'/\\')\\n                continue;\\n            String temp = \"\"; // make temp string = 0 everytime\\n            while(i<path.length() && path.charAt(i) != \\'/\\'){\\n                temp += path.charAt(i);\\n                ++i;\\n            }\\n            switch(temp){\\n                case \".\":\\n                    // ++i;\\n                    break;\\n                case \"..\":\\n                    if(!stk.isEmpty()) stk.pop();\\n                    break;\\n                default:\\n                    stk.push(temp);\\n            }\\n        }\\n            \\n        while(!stk.isEmpty()){\\n            ans = \"/\"+ stk.pop() + ans ;\\n        }\\n        return (ans.length() == 0 ) ? \"/\" : ans;\\n    }\\n}\\n```\\n\\n\\n\\n\\n",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "``` answer = \"/\" + top value of stack + answer```\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stk = new Stack<>();\\n        String ans = \"\";\\n        int record = 0;\\n        for(int i = 0 ; i < path.length(); ++i){\\n            if(path.charAt(i) == \\'/\\')\\n                continue;\\n            String temp = \"\"; // make temp string = 0 everytime\\n            while(i<path.length() && path.charAt(i) != \\'/\\'){\\n                temp += path.charAt(i);\\n                ++i;\\n            }\\n            switch(temp){\\n                case \".\":\\n                    // ++i;\\n                    break;\\n                case \"..\":\\n                    if(!stk.isEmpty()) stk.pop();\\n                    break;\\n                default:\\n                    stk.push(temp);\\n            }\\n        }\\n            \\n        while(!stk.isEmpty()){\\n            ans = \"/\"+ stk.pop() + ans ;\\n        }\\n        return (ans.length() == 0 ) ? \"/\" : ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1850695,
                "title": "c-superfast-100-faster-solution-using-stacks",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) \\n    {\\n        stack<string>s;\\n        int n=path.size();\\n        for(int i=1;i<n;i++)\\n        {\\n            string ch=\"\";\\n            bool flag=false;\\n            int c=0;\\n            while(i<n && path[i]!=\\'/\\')\\n            {\\n                if(path[i]>=\\'a\\' && path[i]<=\\'z\\' || path[i]>=\\'A\\' && path[i]<=\\'Z\\')\\n                {\\n                    flag=true;\\n                }else if(path[i]==\\'.\\')\\n                {\\n                    c++;\\n                }\\n                ch+=path[i];\\n                i++;\\n                // cout<<ch<<endl;\\n            }\\n            if(c==2 && !s.empty())\\n            {\\n                s.pop();\\n            }else if(c>2 || flag)\\n            {\\n                s.push(ch);\\n            }\\n            // i--;\\n        }\\n        if(s.empty())return \"/\";\\n        \\n        string ans=\"\";\\n        stack<string>st;\\n        while(!s.empty())\\n        {\\n            st.push(s.top());\\n            s.pop();\\n        }\\n\\t\\t//make another stack \\n        while(!st.empty())\\n        {\\n            ans+=\\'/\\';\\n            ans+=st.top();\\n            st.pop();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) \\n    {\\n        stack<string>s;\\n        int n=path.size();\\n        for(int i=1;i<n;i++)\\n        {\\n            string ch=\"\";\\n            bool flag=false;\\n            int c=0;\\n            while(i<n && path[i]!=\\'/\\')\\n            {\\n                if(path[i]>=\\'a\\' && path[i]<=\\'z\\' || path[i]>=\\'A\\' && path[i]<=\\'Z\\')\\n                {\\n                    flag=true;\\n                }else if(path[i]==\\'.\\')\\n                {\\n                    c++;\\n                }\\n                ch+=path[i];\\n                i++;\\n                // cout<<ch<<endl;\\n            }\\n            if(c==2 && !s.empty())\\n            {\\n                s.pop();\\n            }else if(c>2 || flag)\\n            {\\n                s.push(ch);\\n            }\\n            // i--;\\n        }\\n        if(s.empty())return \"/\";\\n        \\n        string ans=\"\";\\n        stack<string>st;\\n        while(!s.empty())\\n        {\\n            st.push(s.top());\\n            s.pop();\\n        }\\n\\t\\t//make another stack \\n        while(!st.empty())\\n        {\\n            ans+=\\'/\\';\\n            ans+=st.top();\\n            st.pop();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1848608,
                "title": "stack-solution-with-easy-detailed-explanation",
                "content": "[Leetcode](https://leetcode.com/) [71. Simplify Path](https://leetcode.com/problems/simplify-path/).\\n\\n***By Frank Luo***\\n\\n# Intuition  \\n\\nWe can just **simulate** the process from the begin to end.\\n\\nFirst we split the given string $\\\\textit{path}$ into a list of strings by the slash $/$, denoted as `names`. According to the **canonical path** in the problem description, the strings contained in `names` can only be the following:\\n\\n1. empty string;\\n2. a dot `.`;\\n3. two dots `..`;\\n4. a directory name containing only English letters, numbers, or `_`.\\n\\nIf we meet empty string or `.`, we can ignore them because empty string means nothing, and `.` means the current directory itself, so we don\\'t need to change directories.\\n\\nIf we meet `..` or \"directory names\", we can use a **Stack** to maintain each directory name in the path. When we encounter \"two dots\", we need to change the directory to the parent directory. As the stack is not empty, we pop the directory of the stack. When we encounter a \"directory\", we put it to the stack.\\n\\nFinally we need to iterate each string in `names` and do the above. After all operations are completed, we connect the strings from the bottom of the stack to the top of the stack with `/`, and then add `/` at the top to indicate the root directory, and we can get the simplified Canonical path.\\n\\n\\n```java []\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        if (path == null || path.length() <= 1) {\\n            return \"/\";\\n        }\\n\\n        Stack<String> pathStack = new Stack<>();\\n        StringBuilder ans = new StringBuilder();\\n        path = path.replaceAll(\"\\\\\\\\/\\\\\\\\/\", \"/\");\\n        String[] folders = path.split(\"\\\\\\\\/\");\\n        int len = folders.length;\\n        for (int i = 0; i < len; i++) {\\n            String folder = folders[i];\\n            if (folder.equalsIgnoreCase(\".\")) {\\n                continue;\\n            } else if (folder.equalsIgnoreCase(\"..\")) {\\n                if (!pathStack.empty()) {\\n                    pathStack.pop();\\n                }\\n            } else if (folder.length() > 0) {\\n                pathStack.push(folder);\\n            }\\n        }\\n\\n        ans.append(\\'/\\');\\n        List<String> res = new ArrayList<>();\\n        while (!pathStack.empty()) {\\n            res.add(pathStack.pop());\\n        }\\n\\n        for (int i = res.size() - 1; i >= 0; i--) {\\n            ans.append(res.get(i));\\n            ans.append(\"/\");\\n        }\\n\\n        if (ans.length() > 1 && ans.charAt(ans.length() - 1) == \\'/\\') {\\n            ans.deleteCharAt(ans.length() - 1);\\n        }\\n\\n        return ans.toString();\\n    }\\n}\\n```\\n\\n\\n```python []\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        ans = []\\n        for p in path.split(\"/\"):\\n            if p == \"..\" and ans:\\n                ans.pop()\\n            elif p not in \"..\":\\n                ans.append(p)\\n        return \"/\" + \"/\".join(ans)\\n```\\n\\n\\n```go []\\nfunc simplifyPath(path string) string {\\n    ans := []string{}\\n    for _, s := range strings.Split(path, \"/\") {\\n        if s != \"\" && s != \".\" && s != \"..\"{\\n            ans = append(ans, s)\\n        } else if s == \"..\" && len(ans) > 0{\\n            ans = ans[:len(ans) - 1]\\n        }\\n    }\\n    return \"/\" + strings.Join(ans, \"/\")\\n}\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(N)$.\\n- **Space Complexity**: $O(N)$.\\n\\n------------\\n\\nAll suggestions are welcome. \\nIf you have any query or suggestion please comment below.\\nPlease upvote\\uD83D\\uDC4D if you like\\uD83D\\uDC97 it. Thank you:-)\\n\\nExplore More [Leetcode Solutions](https://leetcode.com/discuss/general-discussion/1868912/My-Leetcode-Solutions-All-In-One). \\uD83D\\uDE09\\uD83D\\uDE03\\uD83D\\uDC97\\n\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Go",
                    "String",
                    "Stack"
                ],
                "code": "```java []\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        if (path == null || path.length() <= 1) {\\n            return \"/\";\\n        }\\n\\n        Stack<String> pathStack = new Stack<>();\\n        StringBuilder ans = new StringBuilder();\\n        path = path.replaceAll(\"\\\\\\\\/\\\\\\\\/\", \"/\");\\n        String[] folders = path.split(\"\\\\\\\\/\");\\n        int len = folders.length;\\n        for (int i = 0; i < len; i++) {\\n            String folder = folders[i];\\n            if (folder.equalsIgnoreCase(\".\")) {\\n                continue;\\n            } else if (folder.equalsIgnoreCase(\"..\")) {\\n                if (!pathStack.empty()) {\\n                    pathStack.pop();\\n                }\\n            } else if (folder.length() > 0) {\\n                pathStack.push(folder);\\n            }\\n        }\\n\\n        ans.append(\\'/\\');\\n        List<String> res = new ArrayList<>();\\n        while (!pathStack.empty()) {\\n            res.add(pathStack.pop());\\n        }\\n\\n        for (int i = res.size() - 1; i >= 0; i--) {\\n            ans.append(res.get(i));\\n            ans.append(\"/\");\\n        }\\n\\n        if (ans.length() > 1 && ans.charAt(ans.length() - 1) == \\'/\\') {\\n            ans.deleteCharAt(ans.length() - 1);\\n        }\\n\\n        return ans.toString();\\n    }\\n}\\n```\n```python []\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        ans = []\\n        for p in path.split(\"/\"):\\n            if p == \"..\" and ans:\\n                ans.pop()\\n            elif p not in \"..\":\\n                ans.append(p)\\n        return \"/\" + \"/\".join(ans)\\n```\n```go []\\nfunc simplifyPath(path string) string {\\n    ans := []string{}\\n    for _, s := range strings.Split(path, \"/\") {\\n        if s != \"\" && s != \".\" && s != \"..\"{\\n            ans = append(ans, s)\\n        } else if s == \"..\" && len(ans) > 0{\\n            ans = ans[:len(ans) - 1]\\n        }\\n    }\\n    return \"/\" + strings.Join(ans, \"/\")\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1848443,
                "title": "c-strtok",
                "content": "```\\nchar * simplifyPath(char * path){\\n    int len = strlen(path) + 1;\\n    char** pathArray = (char**)calloc(len,sizeof(char*)); ;\\n    int idx = 0;\\n    char* p;\\n    p = strtok(path, \"/\");\\n    while (p != NULL) {\\n        if(strcmp(p, \"..\") == 0){\\n            if(idx-1 >= 0) idx -= 1;\\n        }\\n        else if(strcmp(p, \".\") != 0){\\n            pathArray[idx] = (char*)calloc(strlen(p) + 1,sizeof(char)); \\n            strcpy(pathArray[idx], p);\\n            idx += 1;\\n        }\\n        p = strtok(NULL, \"/\");\\t\\t   \\n    }\\n    char* result = (char*)calloc(len,sizeof(char)); \\n    for(int i=0; i<idx; i++){\\n        strcat(result,\"/\");\\n        strcat(result,pathArray[i]);\\n    }\\n    if(idx==0) strcat(result,\"/\");\\n    return result;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar * simplifyPath(char * path){\\n    int len = strlen(path) + 1;\\n    char** pathArray = (char**)calloc(len,sizeof(char*)); ;\\n    int idx = 0;\\n    char* p;\\n    p = strtok(path, \"/\");\\n    while (p != NULL) {\\n        if(strcmp(p, \"..\") == 0){\\n            if(idx-1 >= 0) idx -= 1;\\n        }\\n        else if(strcmp(p, \".\") != 0){\\n            pathArray[idx] = (char*)calloc(strlen(p) + 1,sizeof(char)); \\n            strcpy(pathArray[idx], p);\\n            idx += 1;\\n        }\\n        p = strtok(NULL, \"/\");\\t\\t   \\n    }\\n    char* result = (char*)calloc(len,sizeof(char)); \\n    for(int i=0; i<idx; i++){\\n        strcat(result,\"/\");\\n        strcat(result,pathArray[i]);\\n    }\\n    if(idx==0) strcat(result,\"/\");\\n    return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1848420,
                "title": "faster-than-99-submission",
                "content": "```\\n/**\\n * @param {string} path\\n * @return {string}\\n */\\nvar simplifyPath = function(path) {\\n    let stack = []\\n    let pathToProcess = path.split(\\'/\\')\\n    for(let path of pathToProcess){\\n        if(path === \\'.\\' || path === \\'\\'){\\n            continue\\n        }\\n        if(path === \\'..\\'){\\n            stack.pop()\\n            continue\\n        }\\n        // console.log(path)\\n        stack.push(path)\\n        \\n    }\\n    return \\'/\\'+stack.join(\\'/\\')\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} path\\n * @return {string}\\n */\\nvar simplifyPath = function(path) {\\n    let stack = []\\n    let pathToProcess = path.split(\\'/\\')\\n    for(let path of pathToProcess){\\n        if(path === \\'.\\' || path === \\'\\'){\\n            continue\\n        }\\n        if(path === \\'..\\'){\\n            stack.pop()\\n            continue\\n        }\\n        // console.log(path)\\n        stack.push(path)\\n        \\n    }\\n    return \\'/\\'+stack.join(\\'/\\')\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1848281,
                "title": "solution-swift-simplify-path",
                "content": "```swift\\nclass Solution {\\n    func simplifyPath(_ path: String) -> String {\\n        var stack: [Substring] = []\\n        \\n        for p in path.split(separator: \"/\") {\\n            if p == \"..\" { stack.popLast() }\\n            else\\n                if p != \".\" { stack.append(p) }\\n        }\\n        return \"/\" + stack.joined(separator: \"/\")\\n    }\\n}\\n```\\n\\n<hr>\\n\\n<details>\\n<summary><img src=\"https://git.io/JDblm\" height=\"24\"> <b>TEST CASES</b></summary>\\n\\n<pre>\\nResult: Executed 3 tests, with 0 failures (0 unexpected) in 0.012 (0.014) seconds\\n</pre>\\n\\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n    \\n    // Note that there is no trailing slash after the last directory name.\\n    func test0() {\\n        let value = solution.simplifyPath(\"/home/\")\\n        XCTAssertEqual(value, \"/home\")\\n    }\\n    \\n    // Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\\n    func test1() {\\n        let value = solution.simplifyPath(\"/../\")\\n        XCTAssertEqual(value, \"/\")\\n    }\\n    \\n    // In the canonical path, multiple consecutive slashes are replaced by a single one.\\n    func test2() {\\n        let value = solution.simplifyPath(\"/home//foo/\")\\n        XCTAssertEqual(value, \"/home/foo\")\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n\\n</details>",
                "solutionTags": [
                    "Swift",
                    "String"
                ],
                "code": "```swift\\nclass Solution {\\n    func simplifyPath(_ path: String) -> String {\\n        var stack: [Substring] = []\\n        \\n        for p in path.split(separator: \"/\") {\\n            if p == \"..\" { stack.popLast() }\\n            else\\n                if p != \".\" { stack.append(p) }\\n        }\\n        return \"/\" + stack.joined(separator: \"/\")\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n    \\n    // Note that there is no trailing slash after the last directory name.\\n    func test0() {\\n        let value = solution.simplifyPath(\"/home/\")\\n        XCTAssertEqual(value, \"/home\")\\n    }\\n    \\n    // Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\\n    func test1() {\\n        let value = solution.simplifyPath(\"/../\")\\n        XCTAssertEqual(value, \"/\")\\n    }\\n    \\n    // In the canonical path, multiple consecutive slashes are replaced by a single one.\\n    func test2() {\\n        let value = solution.simplifyPath(\"/home//foo/\")\\n        XCTAssertEqual(value, \"/home/foo\")\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1847792,
                "title": "using-vector-of-strings-clean-and-concise-beginners-level",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string> ans;\\n        int n = path.size();\\n        int i =0;\\n        while(i < n){\\n            \\n            string tmp = \"\";\\n            if(path[i] == \\'/\\'){\\n                i++;\\n                continue;\\n            }\\n            while(i < n and path[i] != \\'/\\'){\\n                tmp.push_back(path[i]);\\n                i++;\\n            }\\n            if(tmp == \".\"){\\n                continue;\\n            }else if(tmp == \"..\"){\\n                if(ans.size() > 0) ans.pop_back();\\n            }else{\\n                ans.push_back(tmp);\\n            }\\n        }\\n        string rans=\"\";\\n        if(ans.size() == 0) return \"/\";\\n        for(auto x : ans){\\n            rans = rans + \"/\" + x;\\n        }\\n        return rans;\\n        \\n    }\\n};",
                "solutionTags": [
                    "Stack"
                ],
                "code": "class Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string> ans;\\n        int n = path.size();\\n        int i =0;\\n        while(i < n){\\n            \\n            string tmp = \"\";\\n            if(path[i] == \\'/\\'){\\n                i++;\\n                continue;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1847645,
                "title": "java-using-linkedlist-string-very-easy",
                "content": "The algorithm is simple. \\n* First split the given path with slash (/)\\n* Then itterate over the parts of the string\\n* If the part is not empty or is not dot(\".\") then -\\n\\t* If the part is \"..\" then pop last element from LinkedList\\n\\t* Else add the part into the LinkedList\\n* Join the elements in the LinkedList\\n```java\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        var parts = path.split(\"/\");\\n        var list = new LinkedList<String>();\\n        for (var part : parts) {\\n            if (part != null && !part.isEmpty() && !\".\".equals(part)) {\\n                if (\"..\".equals(part)) {\\n                    list.pollLast();\\n                } else {\\n                    list.add(part);\\n                }\\n            }\\n        }\\n        return \"/\" + String.join(\"/\", list);\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String simplifyPath(String path) {\\n        var parts = path.split(\"/\");\\n        var list = new LinkedList<String>();\\n        for (var part : parts) {\\n            if (part != null && !part.isEmpty() && !\".\".equals(part)) {\\n                if (\"..\".equals(part)) {\\n                    list.pollLast();\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1847303,
                "title": "beginner-friendly-java-solution",
                "content": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> q = new Stack();\\n        Set<String> skip = new HashSet<>(Arrays.asList(\"..\", \".\", \"\"));\\n        for(String dir : path.split(\"/\")){\\n            if(dir.equals(\"..\") && !q.isEmpty())    q.pop();\\n            else if(!skip.contains(dir)) q.push(dir);\\n        }\\n        return \"/\" + String.join(\"/\", q);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> q = new Stack();\\n        Set<String> skip = new HashSet<>(Arrays.asList(\"..\", \".\", \"\"));\\n        for(String dir : path.split(\"/\")){\\n            if(dir.equals(\"..\") && !q.isEmpty())    q.pop();\\n            else if(!skip.contains(dir)) q.push(dir);\\n        }\\n        return \"/\" + String.join(\"/\", q);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1721754,
                "title": "c-solution-using-stack",
                "content": "\\n\\tstring simplifyPath(string path) {\\n        stack<string> st;\\n        string word=\"\";\\n        if(path[path.size()-1] !=\\'/\\')\\n            path+=\\'/\\';\\n        for(int i=0;i<path.size();i++)\\n        {\\n            if(path[i]==\\'/\\')\\n            {\\n                if(word==\"\" || word==\".\")\\n                {}\\n                else if(word==\"..\")\\n                {\\n                    if(!st.empty())\\n                        st.pop();\\n                }\\n                else{\\n                //std::cout<<word;\\n                st.push(word);\\n                }\\n                 word=\"\";\\n            }\\n            else\\n                word+=path[i];\\n        }\\n        if(word.size()>0)\\n            st.push(word);\\n        int n=st.size();\\n        stack<string> st2;\\n        for(int i=0;i<n;i++)\\n        {\\n            string temp=st.top();\\n            st.pop();\\n            st2.push(temp);\\n        }\\n        string ans=\"\";\\n        while (!st2.empty())\\n        {\\n            ans+=(\"/\"+st2.top());\\n            //std::cout<<st.top();\\n            st2.pop();\\n        }\\n        if(ans.size()==0)\\n        {ans+=\"/\";\\n        }\\n        \\n        return ans;\\n    }\\n\\t\\nPlease upvote if you find it useful.\\nThanks :)",
                "solutionTags": [
                    "C++",
                    "C",
                    "Stack"
                ],
                "code": "\\n\\tstring simplifyPath(string path) {\\n        stack<string> st;\\n        string word=\"\";\\n        if(path[path.size()-1] !=\\'/\\')\\n            path+=\\'/\\';\\n        for(int i=0;i<path.size();i++)\\n        {\\n            if(path[i]==\\'/\\')\\n            {\\n                if(word==\"\" || word==\".\")\\n                {}\\n                else if(word==\"..\")\\n                {\\n                    if(!st.empty())\\n                        st.pop();\\n                }\\n                else{\\n                //std::cout<<word;\\n                st.push(word);\\n                }\\n                 word=\"\";\\n            }\\n            else\\n                word+=path[i];\\n        }\\n        if(word.size()>0)\\n            st.push(word);\\n        int n=st.size();\\n        stack<string> st2;\\n        for(int i=0;i<n;i++)\\n        {\\n            string temp=st.top();\\n            st.pop();\\n            st2.push(temp);\\n        }\\n        string ans=\"\";\\n        while (!st2.empty())\\n        {\\n            ans+=(\"/\"+st2.top());\\n            //std::cout<<st.top();\\n            st2.pop();\\n        }\\n        if(ans.size()==0)\\n        {ans+=\"/\";\\n        }\\n        \\n        return ans;\\n    }\\n\\t\\nPlease upvote if you find it useful.\\nThanks :)",
                "codeTag": "C++"
            },
            {
                "id": 1457918,
                "title": "simple-clean-easy-to-understand-cpp-solution",
                "content": "\\nThe CPP implementation of the approach is given below with the help of stack:\\n\\n\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        string word=\"\";\\n        stack<string>st;\\n        for(int i=0;i<path.size();i++)\\n        {\\n            while(i<path.size()&&path[i]==\\'/\\')i++;\\n            while(i<path.size()&&path[i]!=\\'/\\')word=word+path[i],i++;\\n           \\n            if(word.size()){\\n            if(word==\".\"){word=\"\";continue;}\\n            else if(word==\"..\"){\\n                word=\"\";\\n                if(st.size())\\n                st.pop();\\n            }\\n            else\\n            st.push(word);\\n            word=\"\";\\n            }\\n        }\\n        if(word.size()){\\n        if(word==\".\"){word=\"\";}\\n            else if(word==\"..\"){\\n                word=\"\";\\n                if(st.size())\\n                st.pop();\\n            }\\n            else\\n            st.push(word);\\n        }\\n        string ans=\"\";\\n        while(st.size()){\\n            string ab=st.top();\\n            st.pop();\\n       ans=\"/\"+ab+ans;\\n        }\\n        \\n       \\n         return ans.size()==0?\"/\":ans;   \\n    }\\n};\\n```\\n\\n* If you find my solution easy to understand do Upvote it :)\\n",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        string word=\"\";\\n        stack<string>st;\\n        for(int i=0;i<path.size();i++)\\n        {\\n            while(i<path.size()&&path[i]==\\'/\\')i++;\\n            while(i<path.size()&&path[i]!=\\'/\\')word=word+path[i],i++;\\n           \\n            if(word.size()){\\n            if(word==\".\"){word=\"\";continue;}\\n            else if(word==\"..\"){\\n                word=\"\";\\n                if(st.size())\\n                st.pop();\\n            }\\n            else\\n            st.push(word);\\n            word=\"\";\\n            }\\n        }\\n        if(word.size()){\\n        if(word==\".\"){word=\"\";}\\n            else if(word==\"..\"){\\n                word=\"\";\\n                if(st.size())\\n                st.pop();\\n            }\\n            else\\n            st.push(word);\\n        }\\n        string ans=\"\";\\n        while(st.size()){\\n            string ab=st.top();\\n            st.pop();\\n       ans=\"/\"+ab+ans;\\n        }\\n        \\n       \\n         return ans.size()==0?\"/\":ans;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1313778,
                "title": "python-solution-71-simplified-path",
                "content": "```\\n#Upvote if you find it useful!\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack=[]\\n        for x in path.split(\"/\"):\\n            if x==\"..\":\\n                if stack:\\n                    stack.pop()\\n            elif x==\\'.\\' or not x:\\n                continue\\n            else:\\n                stack.append(x)\\n        return \"/\"+\"/\".join(stack)\\n```",
                "solutionTags": [
                    "Python",
                    "Stack"
                ],
                "code": "```\\n#Upvote if you find it useful!\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack=[]\\n        for x in path.split(\"/\"):\\n            if x==\"..\":\\n                if stack:\\n                    stack.pop()\\n            elif x==\\'.\\' or not x:\\n                continue\\n            else:\\n                stack.append(x)\\n        return \"/\"+\"/\".join(stack)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1306297,
                "title": "c-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> s;\\n        \\n        int l=0;\\n        int len=path.length();\\n        while(l<len){\\n            \\n            while(l<len and path[l]==\\'/\\')\\n                l++;\\n            string tmp;\\n            while(l<len and path[l]!=\\'/\\')\\n                tmp.push_back(path[l++]);\\n            if(tmp==\".\")\\n                continue;\\n            else if(tmp==\"..\")\\n            {\\n                if(!s.empty())\\n                    s.pop();\\n            }\\n            else if(tmp.length())\\n                s.push(tmp);\\n\\n        }\\n        vector<string> v;\\n    \\n        while(!s.empty())\\n        {\\n            v.push_back(s.top());\\n            s.pop();\\n        }\\n\\n        int sz=v.size();\\n        string ans;\\n\\n        while(sz--)\\n        {\\n            ans+=\"/\";\\n            ans+=v[sz];\\n        }\\n        if(ans.length()==0)\\n            return \"/\";\\n        return ans;\\n    }\\n};```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> s;\\n        \\n        int l=0;\\n        int len=path.length();\\n        while(l<len){\\n            \\n            while(l<len and path[l]==\\'/\\')\\n                l++;\\n            string tmp;\\n            while(l<len and path[l]!=\\'/\\')\\n                tmp.push_back(path[l++]);\\n            if(tmp==\".\")\\n                continue;\\n            else if(tmp==\"..\")\\n            {\\n                if(!s.empty())\\n                    s.pop();\\n            }\\n            else if(tmp.length())\\n                s.push(tmp);\\n\\n        }\\n        vector<string> v;\\n    \\n        while(!s.empty())\\n        {\\n            v.push_back(s.top());\\n            s.pop();\\n        }\\n\\n        int sz=v.size();\\n        string ans;\\n\\n        while(sz--)\\n        {\\n            ans+=\"/\";\\n            ans+=v[sz];\\n        }\\n        if(ans.length()==0)\\n            return \"/\";\\n        return ans;\\n    }\\n};```",
                "codeTag": "Java"
            },
            {
                "id": 1258987,
                "title": "c-4-ms-solution-using-stack-with-explanation",
                "content": "```\\nHere we have to insert \\'/\\' at the end of the string if not present because we are going to complete a string when we will find a \\'/ \\'.\\n```class Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string>st;\\n        string s1,s2;\\n        int n=path.size();\\n        if(path[n-1]!=\\'/\\')\\n            path.insert(n,\"/\");\\n        for(int i=1;i<path.size();i++)\\n        {\\n\\t\\t// checking if \\'/ \\' present or not because it will be the end of string.\\n            if(path[i]!=\\'/\\')\\n            {\\n                s1.push_back(path[i]);\\n            }\\n            else\\n            {\\n                if(s1.size()>0)\\n                st.push(s1);\\n                if(s1==\"..\")\\n                {\\n\\t\\t\\t\\t// suppose you have only \"..\" in stack then stack size will be 1 and two times poping will give runtime error\\n\\t\\t\\t\\t//because we have to pop \"..\" and one more top item from stack to go to it`s parent\\n                    if(st.size()>=2)\\n                    {\\n                            st.pop();\\n                            st.pop();\\n                    }\\n                    else\\n                        st.pop();\\n                }\\n                if(s1==\".\")\\n                {\\n                    st.pop();\\n                }\\n                s1.clear();\\n            }\\n        }\\n         if(st.empty())\\n             return \"/\";\\n        while(st.size()>0)\\n        {\\n            s2.insert(0,st.top());\\n            s2.insert(0,\"/\");\\n            st.pop();\\n        }\\n        return s2;\\n    }\\n};\\n# *if you find this solution useful, please upvote*\\n",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nHere we have to insert \\'/\\' at the end of the string if not present because we are going to complete a string when we will find a \\'/ \\'.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1185521,
                "title": "short-c-solution-using-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string>st;\\n        int i=0, n=path.length();\\n        while(i<n){\\n            string temp;\\n            while(path[i]==\\'/\\' && i<n) i++;\\n            while(path[i]!=\\'/\\' && i<n) temp+=path[i++];\\n            if(temp==\"..\" && !st.empty()) st.pop_back();\\n            else if(temp==\".\" || temp==\"\") continue;\\n            else if(temp!=\"..\") st.push_back(temp);               \\n        }\\n        string res;\\n        for(string s:st) res+= \"/\" + s;\\n        return res.empty() ? \"/\":res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string>st;\\n        int i=0, n=path.length();\\n        while(i<n){\\n            string temp;\\n            while(path[i]==\\'/\\' && i<n) i++;\\n            while(path[i]!=\\'/\\' && i<n) temp+=path[i++];\\n            if(temp==\"..\" && !st.empty()) st.pop_back();\\n            else if(temp==\".\" || temp==\"\") continue;\\n            else if(temp!=\"..\") st.push_back(temp);               \\n        }\\n        string res;\\n        for(string s:st) res+= \"/\" + s;\\n        return res.empty() ? \"/\":res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1179620,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        String[] splitString=path.split(\"/+\");\\n        Stack<String> st= new Stack<>();\\n        \\n        for(String s:splitString){\\n            if(st.size()>0 &&  \"..\".equals(s)){\\n                st.pop();\\n            }else if(!Arrays.asList(\"\",\".\",\"..\").contains(s)){ \\n// A list contain [ \" \",\".\",\"..\"] and if a string(s) contain any list element than continue else put into stack..\\n                //  I strongly recommended please dry run this once to know better how it work \\n                st.push(s);\\n            }            \\n            \\n        }\\n        \\n        \\n        StringBuilder sb = new StringBuilder();      \\n                   \\n        for(String s1: st){\\n            sb.append(\"/\").append(s1);\\n        }\\n        \\n        return sb.length()==0 ? \"/\":sb.toString();\\n        \\n        \\n    // In place of line  16 to 22 we can also  use. .... \\n    //    return \"/\" + String.join(\"/\"+st);     \\n        \\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        String[] splitString=path.split(\"/+\");\\n        Stack<String> st= new Stack<>();\\n        \\n        for(String s:splitString){\\n            if(st.size()>0 &&  \"..\".equals(s)){\\n                st.pop();\\n            }else if(!Arrays.asList(\"\",\".\",\"..\").contains(s)){ \\n// A list contain [ \" \",\".\",\"..\"] and if a string(s) contain any list element than continue else put into stack..\\n                //  I strongly recommended please dry run this once to know better how it work \\n                st.push(s);\\n            }            \\n            \\n        }\\n        \\n        \\n        StringBuilder sb = new StringBuilder();      \\n                   \\n        for(String s1: st){\\n            sb.append(\"/\").append(s1);\\n        }\\n        \\n        return sb.length()==0 ? \"/\":sb.toString();\\n        \\n        \\n    // In place of line  16 to 22 we can also  use. .... \\n    //    return \"/\" + String.join(\"/\"+st);     \\n        \\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1130045,
                "title": "c-100-faster-two-pointers-no-stack",
                "content": "// Two pointers\\n   \\n\\t\\tstring simplifyPath(string path)\\n\\t\\t{\\n\\t\\t\\tstring result;\\n\\n\\t\\t\\tsize_t front = 0;\\n\\t\\t\\tsize_t rear = 0;\\n\\n\\t\\t\\twhile (front < path.length() - 1)\\n\\t\\t\\t{\\n\\t\\t\\t\\trear = path.find(\\'/\\', front + 1);\\n\\n\\t\\t\\t\\tif (rear == path.npos)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\trear = path.length();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Skip \"//\"\\n\\t\\t\\t\\tif (rear - front > 1)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tstring s = path.substr(front + 1, rear - front - 1);\\n\\n\\t\\t\\t\\t\\t// Skip \".\"\\n\\t\\t\\t\\t\\tif (!s.empty() && s != \".\")\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t// Handle \"..\"\\n\\t\\t\\t\\t\\t\\tif (s == \"..\")\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tif (!result.empty())\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tresult.erase(result.find_last_of(\\'/\\'));\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tresult += \"/\" + s;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfront = rear;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (result.empty())\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn \"/\";\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn result;\\n\\t\\t\\t}\\n\\t\\t}",
                "solutionTags": [],
                "code": "// Two pointers\\n   \\n\\t\\tstring simplifyPath(string path)\\n\\t\\t{\\n\\t\\t\\tstring result;\\n\\n\\t\\t\\tsize_t front = 0;\\n\\t\\t\\tsize_t rear = 0;\\n\\n\\t\\t\\twhile (front < path.length() - 1)\\n\\t\\t\\t{\\n\\t\\t\\t\\trear = path.find(\\'/\\', front + 1);\\n\\n\\t\\t\\t\\tif (rear == path.npos)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\trear = path.length();\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Skip \"//\"\\n\\t\\t\\t\\tif (rear - front > 1)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tstring s = path.substr(front + 1, rear - front - 1);\\n\\n\\t\\t\\t\\t\\t// Skip \".\"\\n\\t\\t\\t\\t\\tif (!s.empty() && s != \".\")\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t// Handle \"..\"\\n\\t\\t\\t\\t\\t\\tif (s == \"..\")\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tif (!result.empty())\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tresult.erase(result.find_last_of(\\'/\\'));\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tresult += \"/\" + s;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfront = rear;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (result.empty())\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn \"/\";\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t{\\n\\t\\t\\t\\treturn result;\\n\\t\\t\\t}\\n\\t\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 1055024,
                "title": "c-solution",
                "content": "```\\nstring simplifyPath(string path) {\\n\\tvector<string> parts {};\\n\\tint i = 0;\\n\\twhile (i < path.size()) {\\n\\t\\tif (path[i] != \\'/\\') {\\n\\t\\t\\tstring cur = \"\";\\n\\t\\t\\twhile (i < path.size() && path[i] != \\'/\\')\\n\\t\\t\\t\\tcur += path[i++];\\n\\t\\t\\tif (cur == \"..\") {\\n\\t\\t\\t\\tif (!parts.empty())\\n\\t\\t\\t\\t\\tparts.pop_back();\\n\\t\\t\\t}\\n\\t\\t\\telse if (cur != \".\")\\n\\t\\t\\t\\tparts.push_back(cur);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\ti++;\\n\\t}\\n\\tstring result = \"\";\\n\\tfor (string s : parts)\\n\\t\\tresult += \"/\" + s;\\n\\treturn result.empty() ? \"/\" : result;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nstring simplifyPath(string path) {\\n\\tvector<string> parts {};\\n\\tint i = 0;\\n\\twhile (i < path.size()) {\\n\\t\\tif (path[i] != \\'/\\') {\\n\\t\\t\\tstring cur = \"\";\\n\\t\\t\\twhile (i < path.size() && path[i] != \\'/\\')\\n\\t\\t\\t\\tcur += path[i++];\\n\\t\\t\\tif (cur == \"..\") {\\n\\t\\t\\t\\tif (!parts.empty())\\n\\t\\t\\t\\t\\tparts.pop_back();\\n\\t\\t\\t}\\n\\t\\t\\telse if (cur != \".\")\\n\\t\\t\\t\\tparts.push_back(cur);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\ti++;\\n\\t}\\n\\tstring result = \"\";\\n\\tfor (string s : parts)\\n\\t\\tresult += \"/\" + s;\\n\\treturn result.empty() ? \"/\" : result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1051006,
                "title": "python-3-two-pointers-o-n",
                "content": "- Split ```path``` by the separator ```/```. Note ```path``` is starting with the separator. So first element of the list is empty string.\\n- Iteratively move fast pointer forward. Slow pointer can be incremented (general case), decremented (```..```) or unchanged (``` ```, ```.```). If it is incremented then copy value from the fast pointer.\\n- Delete unnecessary tail from the list and join all items of the list into a string. \\n\\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        arr = path.split(\\'/\\'); j = 1\\n        for a in arr:\\n            if a == \\'..\\':\\n                j = max(1, j-1)\\n            elif a and a != \\'.\\':\\n                arr[j] = a; j += 1\\n        del arr[j:]\\n        \\n        return \\'/\\'.join(arr) or \\'/\\'\\n```",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "```path```\n```/```\n```path```\n```..```\n``` ```\n```.```\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        arr = path.split(\\'/\\'); j = 1\\n        for a in arr:\\n            if a == \\'..\\':\\n                j = max(1, j-1)\\n            elif a and a != \\'.\\':\\n                arr[j] = a; j += 1\\n        del arr[j:]\\n        \\n        return \\'/\\'.join(arr) or \\'/\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1050624,
                "title": "python-by-stack-w-comment",
                "content": "Python by stack\\n\\n---\\n\\n**Implementation**:\\n\\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n\\n        # stack to store directory name\\n        stack = []\\n        \\n        # check each directory name in given path, split by \\'/\\'\\n        for dir_name in path.split(\\'/\\'):\\n            \\n            # do nothing if directory name is either empty string or \\'.\\'\\n            if dir_name == \\'\\' or dir_name == \\'.\\':\\n                continue\\n\\n            # go back to parnet level and pop stack if stack is not empty    \\n            elif dir_name == \\'..\\':    \\n                stack and stack.pop()\\n\\n            # push current directory name into stack                    \\n            else:\\n                stack.append( dir_name )\\n                \\n        return \\'/\\' + \\'/\\'.join( stack )\\n```\\n\\n---\\n\\nReference:\\n\\n[1] [Python official docs about stack operation](https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks)\\n\\n[2] [Python official docs about str.split( ... )](https://docs.python.org/3/library/stdtypes.html?highlight=str%20split#str.split)\\n\\n[3] [Python official docs about str.join( ... )](https://docs.python.org/3/library/stdtypes.html?highlight=str%20split#str.split)",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n\\n        # stack to store directory name\\n        stack = []\\n        \\n        # check each directory name in given path, split by \\'/\\'\\n        for dir_name in path.split(\\'/\\'):\\n            \\n            # do nothing if directory name is either empty string or \\'.\\'\\n            if dir_name == \\'\\' or dir_name == \\'.\\':\\n                continue\\n\\n            # go back to parnet level and pop stack if stack is not empty    \\n            elif dir_name == \\'..\\':    \\n                stack and stack.pop()\\n\\n            # push current directory name into stack                    \\n            else:\\n                stack.append( dir_name )\\n                \\n        return \\'/\\' + \\'/\\'.join( stack )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 750394,
                "title": "simple-c-solution-easy-to-understand-stack-based-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> st;\\n        path+=\"/\";\\n        string temp=\"\";\\n        for(int i=0;i<path.length();i++){\\n            if(path[i]==\\'/\\'){\\n                if(temp==\"\"||temp==\".\"){\\n                    temp=\"\";\\n                    continue;\\n                }else if(temp==\"..\"){\\n                    if(st.size()){\\n                        st.pop();\\n                    }\\n                    \\n                    temp=\"\";\\n                }else{\\n                    st.push(temp);\\n                    temp=\"\";\\n                }\\n            }else{\\n                temp+=path[i];\\n            }\\n        }\\n        \\n        string ans=\"\";\\n        while(st.size()){\\n            ans=st.top()+\"/\"+ans;\\n            st.pop();\\n        }\\n        if(ans!=\"\"){\\n            ans.pop_back();\\n        }\\n        ans=\"/\"+ans;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> st;\\n        path+=\"/\";\\n        string temp=\"\";\\n        for(int i=0;i<path.length();i++){\\n            if(path[i]==\\'/\\'){\\n                if(temp==\"\"||temp==\".\"){\\n                    temp=\"\";\\n                    continue;\\n                }else if(temp==\"..\"){\\n                    if(st.size()){\\n                        st.pop();\\n                    }\\n                    \\n                    temp=\"\";\\n                }else{\\n                    st.push(temp);\\n                    temp=\"\";\\n                }\\n            }else{\\n                temp+=path[i];\\n            }\\n        }\\n        \\n        string ans=\"\";\\n        while(st.size()){\\n            ans=st.top()+\"/\"+ans;\\n            st.pop();\\n        }\\n        if(ans!=\"\"){\\n            ans.pop_back();\\n        }\\n        ans=\"/\"+ans;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 695975,
                "title": "simple-java-solution-with-list",
                "content": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        List<String> paths = new ArrayList<>(path.length());\\n        int i = -1;\\n        for(String folder : path.split(\"/\")){\\n            if(folder.equals(\"..\")){\\n                if(!paths.isEmpty()){\\n                    paths.remove(i);\\n                    i --;   \\n                }\\n            }else if(!folder.isEmpty() && !folder.equals(\".\")){\\n                paths.add(folder);\\n                i++;\\n            }\\n            \\n        }\\n        return \"/\"+String.join(\"/\", paths);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        List<String> paths = new ArrayList<>(path.length());\\n        int i = -1;\\n        for(String folder : path.split(\"/\")){\\n            if(folder.equals(\"..\")){\\n                if(!paths.isEmpty()){\\n                    paths.remove(i);\\n                    i --;   \\n                }\\n            }else if(!folder.isEmpty() && !folder.equals(\".\")){\\n                paths.add(folder);\\n                i++;\\n            }\\n            \\n        }\\n        return \"/\"+String.join(\"/\", paths);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 601469,
                "title": "easy-to-understand-c-code-using-stack",
                "content": "If there is \\'/\\' then continue no need to push or pop anything. Otherwise make a string until another \\'/\\'.\\n1. If string is \".\" the continue\\n2. If string is \"..\" then pop stack if not empty and continue\\n3. Push the string to the stack\\n\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> st;\\n        \\n        int n=path.length();\\n        for(int i=0; i<n; i++)\\n        {\\n            if(path[i]==\\'/\\')\\n                continue;\\n            \\n            string s=\"\";\\n            while(i<n && path[i]!=\\'/\\')\\n            {\\n                s=s+path[i];\\n                i++;\\n            }\\n            i--;\\n            \\n            if(s==\".\")\\n                continue;\\n            if(s==\"..\")\\n            {\\n                if(!st.empty())\\n                    st.pop();\\n                continue;\\n            }\\n            st.push(s);\\n        }\\n        \\n        if(st.empty())\\n            return \"/\";\\n        \\n        string result=\"\";\\n        while(!st.empty())\\n        {\\n            result=\"/\" + st.top() + result;\\n            cout<<st.top()<<\"/\";\\n            st.pop();\\n        }\\n        cout<<endl;\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> st;\\n        \\n        int n=path.length();\\n        for(int i=0; i<n; i++)\\n        {\\n            if(path[i]==\\'/\\')\\n                continue;\\n            \\n            string s=\"\";\\n            while(i<n && path[i]!=\\'/\\')\\n            {\\n                s=s+path[i];\\n                i++;\\n            }\\n            i--;\\n            \\n            if(s==\".\")\\n                continue;\\n            if(s==\"..\")\\n            {\\n                if(!st.empty())\\n                    st.pop();\\n                continue;\\n            }\\n            st.push(s);\\n        }\\n        \\n        if(st.empty())\\n            return \"/\";\\n        \\n        string result=\"\";\\n        while(!st.empty())\\n        {\\n            result=\"/\" + st.top() + result;\\n            cout<<st.top()<<\"/\";\\n            st.pop();\\n        }\\n        cout<<endl;\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 500999,
                "title": "easy-to-understand-java",
                "content": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n\\n        Stack<String> segmentStack = new Stack<>();\\n        for (String segment : path.split(\"/\")) {\\n            if (!segment.isEmpty() && !segment.equals(\".\")) {\\n                if (segment.equals(\"..\")) {\\n                    if (!segmentStack.isEmpty()) {\\n                        segmentStack.pop();\\n                    }\\n                } else {\\n                    segmentStack.push(segment);\\n                }\\n            }\\n        }\\n\\n        if (segmentStack.isEmpty()) {\\n            return \"/\";\\n        }\\n        \\n        Stack<String> reversedStack = new Stack<>();\\n        while (!segmentStack.isEmpty()) {\\n            reversedStack.push(segmentStack.pop());\\n        }\\n        \\n        StringBuilder outputBuilder = new StringBuilder();\\n        while (!reversedStack.isEmpty()) {\\n            outputBuilder.append(\"/\");\\n            outputBuilder.append(reversedStack.pop());\\n        }\\n        \\n        return outputBuilder.toString();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n\\n        Stack<String> segmentStack = new Stack<>();\\n        for (String segment : path.split(\"/\")) {\\n            if (!segment.isEmpty() && !segment.equals(\".\")) {\\n                if (segment.equals(\"..\")) {\\n                    if (!segmentStack.isEmpty()) {\\n                        segmentStack.pop();\\n                    }\\n                } else {\\n                    segmentStack.push(segment);\\n                }\\n            }\\n        }\\n\\n        if (segmentStack.isEmpty()) {\\n            return \"/\";\\n        }\\n        \\n        Stack<String> reversedStack = new Stack<>();\\n        while (!segmentStack.isEmpty()) {\\n            reversedStack.push(segmentStack.pop());\\n        }\\n        \\n        StringBuilder outputBuilder = new StringBuilder();\\n        while (!reversedStack.isEmpty()) {\\n            outputBuilder.append(\"/\");\\n            outputBuilder.append(reversedStack.pop());\\n        }\\n        \\n        return outputBuilder.toString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 472288,
                "title": "accepted-c-stack-solution-easy-to-understand",
                "content": "```\\npublic class Solution {\\n    public string SimplifyPath(string path) \\n    {\\n        string[] pathDir = path.Split(new [] { \\'/\\' });\\n        Stack<string> stack = new Stack<string>();\\n        foreach (string dir in pathDir)\\n        {\\n            if (dir == \".\" || dir.Length == 0) continue;\\n            if (dir == \"..\")\\n            {\\n                if (stack.Count > 0)\\n                    stack.Pop();\\n                continue;\\n            }\\n            stack.Push(dir);\\n        }\\n        \\n        var res = new StringBuilder();\\n        while (stack.Count > 0)\\n            res.Insert(0, \"/\" + stack.Pop());\\n        return res.Length == 0 ? \"/\" : res.ToString();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string SimplifyPath(string path) \\n    {\\n        string[] pathDir = path.Split(new [] { \\'/\\' });\\n        Stack<string> stack = new Stack<string>();\\n        foreach (string dir in pathDir)\\n        {\\n            if (dir == \".\" || dir.Length == 0) continue;\\n            if (dir == \"..\")\\n            {\\n                if (stack.Count > 0)\\n                    stack.Pop();\\n                continue;\\n            }\\n            stack.Push(dir);\\n        }\\n        \\n        var res = new StringBuilder();\\n        while (stack.Count > 0)\\n            res.Insert(0, \"/\" + stack.Pop());\\n        return res.Length == 0 ? \"/\" : res.ToString();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 313909,
                "title": "c-99-beat-iterative-stack-solution-pretty-basic-judge-4-urself",
                "content": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        \\n        vector <string> aList;\\n        \\n        int aPrevIndex = 0;\\n        for (int i=0;i<path.size();i++) {\\n            if (path[i] == \\'/\\') {\\n                if (i > aPrevIndex) {\\n                    aList.push_back(path.substr(aPrevIndex, i - aPrevIndex));\\n                }\\n                aPrevIndex = i + 1;\\n            }\\n        }\\n        \\n        if (path.size() > aPrevIndex) {\\n            aList.push_back(path.substr(aPrevIndex, path.size() - aPrevIndex));\\n        }\\n        \\n        vector <string> aStack;\\n        for (int i=0;i<aList.size();i++) {\\n            if (aList[i] == \".\") { continue; }\\n            if (aList[i] == \"..\") { \\n                if (aStack.empty() == false) {\\n                    aStack.pop_back();\\n                }\\n                continue;\\n            }\\n            if (aList[i].size() > 0) {\\n                aStack.push_back(aList[i]);\\n            }\\n        }\\n        \\n        string aResult = \"/\";\\n        for (int i=0;i<aStack.size();i++) {\\n            aResult += aStack[i];\\n            if (i < (aStack.size() - 1)) {\\n                aResult += \"/\";\\n            }\\n        }\\n        \\n        return aResult;\\n    }\\n};\\n```\\n\\nKaboom, easy solutions. Now you\\'re on the payroll. Lucky ducky.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        \\n        vector <string> aList;\\n        \\n        int aPrevIndex = 0;\\n        for (int i=0;i<path.size();i++) {\\n            if (path[i] == \\'/\\') {\\n                if (i > aPrevIndex) {\\n                    aList.push_back(path.substr(aPrevIndex, i - aPrevIndex));\\n                }\\n                aPrevIndex = i + 1;\\n            }\\n        }\\n        \\n        if (path.size() > aPrevIndex) {\\n            aList.push_back(path.substr(aPrevIndex, path.size() - aPrevIndex));\\n        }\\n        \\n        vector <string> aStack;\\n        for (int i=0;i<aList.size();i++) {\\n            if (aList[i] == \".\") { continue; }\\n            if (aList[i] == \"..\") { \\n                if (aStack.empty() == false) {\\n                    aStack.pop_back();\\n                }\\n                continue;\\n            }\\n            if (aList[i].size() > 0) {\\n                aStack.push_back(aList[i]);\\n            }\\n        }\\n        \\n        string aResult = \"/\";\\n        for (int i=0;i<aStack.size();i++) {\\n            aResult += aStack[i];\\n            if (i < (aStack.size() - 1)) {\\n                aResult += \"/\";\\n            }\\n        }\\n        \\n        return aResult;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 313904,
                "title": "swift-simple-stack-solution-using-all-arrays-o-n-good-speed",
                "content": "```\\nclass Solution {\\n    func simplifyPath(_ path: String) -> String {\\n        \\n        var list = path.split(separator: \"/\")\\n        print(list)\\n        \\n        var stack = [String]()\\n        \\n        for component in list {\\n            \\n            if component == \".\" { continue }\\n            if component == \"..\" {\\n                if stack.count > 0 { stack.removeLast() }\\n                continue\\n            }\\n            \\n            if component.count > 0 { stack.append(String(component)) }\\n        }\\n        \\n        return \"/\" + stack.joined(separator: \"/\")\\n    }\\n}\\n```\\n\\nKaboom, G, you\\'re on the pAyRoLl now BOIIIIIII",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func simplifyPath(_ path: String) -> String {\\n        \\n        var list = path.split(separator: \"/\")\\n        print(list)\\n        \\n        var stack = [String]()\\n        \\n        for component in list {\\n            \\n            if component == \".\" { continue }\\n            if component == \"..\" {\\n                if stack.count > 0 { stack.removeLast() }\\n                continue\\n            }\\n            \\n            if component.count > 0 { stack.append(String(component)) }\\n        }\\n        \\n        return \"/\" + stack.joined(separator: \"/\")\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 307383,
                "title": "short-python-o-n-with-explanation",
                "content": "O(n) - every character in path \\nSpace: O(n) - might just have a long directory name piling on to the stack\\nAlgorithm: Keep a stack tracking the directory level, skip over the . and only append directories which are not the . or ..\\nWhen an .. is encountered pop from the stack (go up a level in the hierarchy) only if you have something in the stack, otherwise do nothing (empty stack encountering ..).\\n\\n```\\ndef simplifyPath(self, path):\\n        \"\"\"\\n        :type path: str\\n        :rtype: str\\n        \"\"\"        \\n        # Splitting is O(n*m) - where m is the length of the character to split, here this is O(n)\\n        plist = path.split(\\'/\\')\\n        stack = []\\n        for directory in plist:\\n            if directory == \".\" or not directory:\\n                continue\\n            # Need this condition nested for case of /../a\\n            elif directory == \"..\":\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(directory)\\n                \\n        return \"/\" + \"/\".join(stack)",
                "solutionTags": [
                    "Python",
                    "Stack"
                ],
                "code": "O(n) - every character in path \\nSpace: O(n) - might just have a long directory name piling on to the stack\\nAlgorithm: Keep a stack tracking the directory level, skip over the . and only append directories which are not the . or ..\\nWhen an .. is encountered pop from the stack (go up a level in the hierarchy) only if you have something in the stack, otherwise do nothing (empty stack encountering ..).\\n\\n```\\ndef simplifyPath(self, path):\\n        \"\"\"\\n        :type path: str\\n        :rtype: str\\n        \"\"\"        \\n        # Splitting is O(n*m) - where m is the length of the character to split, here this is O(n)\\n        plist = path.split(\\'/\\')\\n        stack = []\\n        for directory in plist:\\n            if directory == \".\" or not directory:\\n                continue\\n            # Need this condition nested for case of /../a\\n            elif directory == \"..\":\\n                if stack:\\n                    stack.pop()\\n            else:\\n                stack.append(directory)\\n                \\n        return \"/\" + \"/\".join(stack)",
                "codeTag": "Python3"
            },
            {
                "id": 175951,
                "title": "one-line-golang-solution-for-fun",
                "content": "```\\nfunc simplifyPath(path string) string {\\n    return filepath.Clean(path);\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc simplifyPath(path string) string {\\n    return filepath.Clean(path);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 154576,
                "title": "easy-and-clean-to-understand-no-stack-java",
                "content": "Start from the right most directory. If we encounter \\'..\\' we have to skip one directory. As, in linux \\'..\\' is to go one directory up.\\n\\t\\t\\n```\\npublic String simplifyPath(String path) {\\n        String[] temp = path.split(\"/\");\\n        int skip = 0;\\n        String ans = \"\";\\n        \\n        for(int i = temp.length - 1; i >= 0; i-- ){\\n            if(temp[i].equals(\".\") || temp[i].equals(\"\"))\\n                continue;\\n            else if(temp[i].equals(\"..\"))\\n                skip++;\\n            else if(skip > 0)\\n                skip--;\\n            else\\n                ans =  \"/\" + temp[i]  + ans;\\n        }\\n        return ans == \"\" ? \"/\" : ans;\\n    }\\n```\\n",
                "solutionTags": [],
                "code": "```\\npublic String simplifyPath(String path) {\\n        String[] temp = path.split(\"/\");\\n        int skip = 0;\\n        String ans = \"\";\\n        \\n        for(int i = temp.length - 1; i >= 0; i-- ){\\n            if(temp[i].equals(\".\") || temp[i].equals(\"\"))\\n                continue;\\n            else if(temp[i].equals(\"..\"))\\n                skip++;\\n            else if(skip > 0)\\n                skip--;\\n            else\\n                ans =  \"/\" + temp[i]  + ans;\\n        }\\n        return ans == \"\" ? \"/\" : ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 25750,
                "title": "5-line-js-solution",
                "content": "```js\\nfunction simplifyPath(path) {\\n    const stack = [];\\n    \\n    for (let p of path.split('/').filter(p => p && p !== '.')) {\\n        p === '..' ? stack.pop() : stack.push(p);\\n    }\\n    \\n    return '/' + stack.join('/');\\n}\\n```",
                "solutionTags": [],
                "code": "```js\\nfunction simplifyPath(path) {\\n    const stack = [];\\n    \\n    for (let p of path.split('/').filter(p => p && p !== '.')) {\\n        p === '..' ? stack.pop() : stack.push(p);\\n    }\\n    \\n    return '/' + stack.join('/');\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 25765,
                "title": "5ms-java-implementation-using-stack-beats-99-63",
                "content": "    public String simplifyPath(String path) {\\n        int len = path.length();\\n        Deque<String> stack = new ArrayDeque<>();\\n        for (int i = 0; i < len; ) {\\n            char c = path.charAt(i);\\n            if (c == '/') { ++i; }  // skip the separator '/'\\n            else if (c == '.') {\\n                int j = i + 1;\\n                while (j < len && path.charAt(j) != '/') { ++j; }\\n                if (j - i == 2 && path.charAt(i + 1) == '.' && !stack.isEmpty()) {  // go up to parent directory\\n                    stack.removeLast();\\n                } else if (j - i > 2) {\\n                    stack.addLast(path.substring(i, j));  // go down to child directory\\n                }\\n                i = j;\\n            } else {\\n                int j = i + 1;\\n                while (j < len && path.charAt(j) != '/') { ++j; }\\n                stack.addLast(path.substring(i, j));  // go down to child directory\\n                i = j;\\n            }\\n        }\\n        StringBuilder ans = new StringBuilder();\\n        for (String dir: stack) { ans.append('/').append(dir); }\\n        if (ans.length() == 0) { return \"/\"; }\\n        return ans.toString();\\n    }",
                "solutionTags": [],
                "code": "    public String simplifyPath(String path) {\\n        int len = path.length();\\n        Deque<String> stack = new ArrayDeque<>();\\n        for (int i = 0; i < len; ) {\\n            char c = path.charAt(i);\\n            if (c == '/') { ++i; }  // skip the separator '/'\\n            else if (c == '.') {\\n                int j = i + 1;\\n                while (j < len && path.charAt(j) != '/') { ++j; }\\n                if (j - i == 2 && path.charAt(i + 1) == '.' && !stack.isEmpty()) {  // go up to parent directory\\n                    stack.removeLast();\\n                } else if (j - i > 2) {\\n                    stack.addLast(path.substring(i, j));  // go down to child directory\\n                }\\n                i = j;\\n            } else {\\n                int j = i + 1;\\n                while (j < len && path.charAt(j) != '/') { ++j; }\\n                stack.addLast(path.substring(i, j));  // go down to child directory\\n                i = j;\\n            }\\n        }\\n        StringBuilder ans = new StringBuilder();\\n        for (String dir: stack) { ans.append('/').append(dir); }\\n        if (ans.length() == 0) { return \"/\"; }\\n        return ans.toString();\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 25793,
                "title": "java-easy-version-to-understand",
                "content": "    \\tpublic static String simplifyPath(String path) {\\n\\t\\tif (path == null || path.length() == 0)\\n\\t\\t\\treturn null;\\n\\t\\tString[] parts = path.split(\"/\");\\n\\t\\tStack<String> stack = new Stack<>();\\n\\t\\tfor (int i = 0; i < parts.length; i++) {\\n\\t\\t\\tif (parts[i].equals(\".\")||parts[i].equals(\"\"))\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\telse if (parts[i].equals(\"..\")) {\\n\\t\\t\\t\\tif (!stack.isEmpty())\\n\\t\\t\\t\\t\\tstack.pop();\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t} else\\n\\t\\t\\t\\tstack.push(parts[i]);\\n\\t\\t}\\n\\t\\tif (stack.isEmpty())\\n\\t\\t\\treturn \"/\";\\n\\t\\tString result = \"\";\\n\\t\\twhile (!stack.isEmpty()) {\\n\\t\\t\\tresult = \"/\" + stack.pop() + result;\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}",
                "solutionTags": [],
                "code": "    \\tpublic static String simplifyPath(String path) {\\n\\t\\tif (path == null || path.length() == 0)\\n\\t\\t\\treturn null;\\n\\t\\tString[] parts = path.split(\"/\");\\n\\t\\tStack<String> stack = new Stack<>();\\n\\t\\tfor (int i = 0; i < parts.length; i++) {\\n\\t\\t\\tif (parts[i].equals(\".\")||parts[i].equals(\"\"))\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\telse if (parts[i].equals(\"..\")) {\\n\\t\\t\\t\\tif (!stack.isEmpty())\\n\\t\\t\\t\\t\\tstack.pop();\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t} else\\n\\t\\t\\t\\tstack.push(parts[i]);\\n\\t\\t}\\n\\t\\tif (stack.isEmpty())\\n\\t\\t\\treturn \"/\";\\n\\t\\tString result = \"\";\\n\\t\\twhile (!stack.isEmpty()) {\\n\\t\\t\\tresult = \"/\" + stack.pop() + result;\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 25824,
                "title": "2ms-solution-in-c",
                "content": "    #include<stdlib.h>\\n\\n    char* simplifyPath(char* path) \\n    {\\n        int top = -1;\\n        int i;\\n        int j;\\n    \\n        for(i = 0; path[i] != '\\\\0'; ++i)\\n        {\\n            path[++top] = path[i]; \\n            if(top >= 1 && path[top - 1] == '/' && path[top] == '.' && (path[i + 1] == '/' || path[i + 1] == '\\\\0'))\\n            {\\n                top -= 2;\\n            }\\n            else if(top >= 2 && path[top - 2] == '/' && path[top - 1] == '.' && path[top] == '.' && (path[i + 1] == '/' || path[i + 1] == '\\\\0'))\\n            {\\n                for(j = top - 3; j >= 0; --j)\\n                {\\n                    if(path[j] == '/') break;\\n                }\\n                if(j < 0)\\n                {\\n                    top = -1;\\n                }\\n                else\\n                {\\n                    top = j - 1;\\n                }\\n            }\\n            else if(path[top] == '/' && path[i + 1] == '/') --top;\\n        }\\n        if(top > 0) \\n        {\\n            if(path[top] == '/') path[top] = '\\\\0';\\n            else path[top + 1] = '\\\\0';\\n        }\\n        else if(top == 0) path[top + 1] = '\\\\0';\\n        else \\n        {\\n            path[0] = '/'; \\n            path[1] = '\\\\0';\\n        }\\n        return path;\\n    }",
                "solutionTags": [],
                "code": "    #include<stdlib.h>\\n\\n    char* simplifyPath(char* path) \\n    {\\n        int top = -1;\\n        int i;\\n        int j;\\n    \\n        for(i = 0; path[i] != '\\\\0'; ++i)\\n        {\\n            path[++top] = path[i]; \\n            if(top >= 1 && path[top - 1] == '/' && path[top] == '.' && (path[i + 1] == '/' || path[i + 1] == '\\\\0'))\\n            {\\n                top -= 2;\\n            }\\n            else if(top >= 2 && path[top - 2] == '/' && path[top - 1] == '.' && path[top] == '.' && (path[i + 1] == '/' || path[i + 1] == '\\\\0'))\\n            {\\n                for(j = top - 3; j >= 0; --j)\\n                {\\n                    if(path[j] == '/') break;\\n                }\\n                if(j < 0)\\n                {\\n                    top = -1;\\n                }\\n                else\\n                {\\n                    top = j - 1;\\n                }\\n            }\\n            else if(path[top] == '/' && path[i + 1] == '/') --top;\\n        }\\n        if(top > 0) \\n        {\\n            if(path[top] == '/') path[top] = '\\\\0';\\n            else path[top + 1] = '\\\\0';\\n        }\\n        else if(top == 0) path[top + 1] = '\\\\0';\\n        else \\n        {\\n            path[0] = '/'; \\n            path[1] = '\\\\0';\\n        }\\n        return path;\\n    }",
                "codeTag": "C++"
            },
            {
                "id": 25826,
                "title": "java-already-has-the-method-string-join",
                "content": "    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<String>();\\n        for (String s : path.split(\"/\")) {\\n            if (s.equals(\"..\") && !stack.isEmpty())\\n                stack.pop();\\n            else if (!s.equals(\".\") && !s.equals(\"..\") && !s.equals(\"\"))\\n                stack.push(s);\\n        }\\n        return \"/\" + String.join(\"/\", stack);\\n    }",
                "solutionTags": [],
                "code": "    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<String>();\\n        for (String s : path.split(\"/\")) {\\n            if (s.equals(\"..\") && !stack.isEmpty())\\n                stack.pop();\\n            else if (!s.equals(\".\") && !s.equals(\"..\") && !s.equals(\"\"))\\n                stack.push(s);\\n        }\\n        return \"/\" + String.join(\"/\", stack);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 25741,
                "title": "simple-python-ac-code",
                "content": "    class Solution:\\n    # @param path, a string\\n    # @return a string\\n    def simplifyPath(self, path):\\n        result = []\\n        pathList = path.split('/')\\n        for content in pathList:\\n            if content:\\n                if content == '..':\\n                    try:\\n                        result.pop()\\n                    except:\\n                        result = []\\n                elif content != '.':\\n                    result.append(content)\\n        return '/'+'/'.join(result)",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution:\\n    # @param path, a string\\n    # @return a string\\n    def simplifyPath(self, path):\\n        result = []\\n        pathList = path.split('/')\\n        for content in pathList:\\n            if content:\\n                if content == '..':\\n                    try:\\n                        result.pop()\\n                    except:\\n                        result = []\\n                elif content != '.':\\n                    result.append(content)\\n        return '/'+'/'.join(result)",
                "codeTag": "Java"
            },
            {
                "id": 4050586,
                "title": "simplify-path-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n    std::string simplifyPath(std::string path)\\n    {\\n        if (path.size() == 1)\\n        {\\n            return path;\\n        }\\n        std::string result;\\n        std::stack<std::string> stk;\\n        std::string temp;\\n        for (int i = 0; i < path.size(); i++)\\n        {\\n            temp.clear();\\n\\n            while (path[i] == \\'/\\')\\n            {\\n                i++;\\n            }\\n\\n            while (i < path.size() && path[i] != \\'/\\')\\n            {\\n                temp += path[i];\\n                i++;\\n            }\\n\\n            if (temp == \"..\")\\n            {\\n                if (!stk.empty())\\n                {\\n                    stk.pop();\\n                }\\n            }\\n            else\\n            {\\n                if (temp != \".\" && temp != \"\")\\n                {\\n                    stk.push(temp);\\n                }\\n            }\\n        }\\n        std::stack<std::string> reverse;\\n        while (!stk.empty())\\n        {\\n            reverse.push(stk.top());\\n            stk.pop();\\n        }\\n\\n        while (!reverse.empty())\\n        {\\n            result += \"/\" + reverse.top();\\n            reverse.pop();\\n        }\\n\\n        return result.empty() ? \"/\" : result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    std::string simplifyPath(std::string path)\\n    {\\n        if (path.size() == 1)\\n        {\\n            return path;\\n        }\\n        std::string result;\\n        std::stack<std::string> stk;\\n        std::string temp;\\n        for (int i = 0; i < path.size(); i++)\\n        {\\n            temp.clear();\\n\\n            while (path[i] == \\'/\\')\\n            {\\n                i++;\\n            }\\n\\n            while (i < path.size() && path[i] != \\'/\\')\\n            {\\n                temp += path[i];\\n                i++;\\n            }\\n\\n            if (temp == \"..\")\\n            {\\n                if (!stk.empty())\\n                {\\n                    stk.pop();\\n                }\\n            }\\n            else\\n            {\\n                if (temp != \".\" && temp != \"\")\\n                {\\n                    stk.push(temp);\\n                }\\n            }\\n        }\\n        std::stack<std::string> reverse;\\n        while (!stk.empty())\\n        {\\n            reverse.push(stk.top());\\n            stk.pop();\\n        }\\n\\n        while (!reverse.empty())\\n        {\\n            result += \"/\" + reverse.top();\\n            reverse.pop();\\n        }\\n\\n        return result.empty() ? \"/\" : result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3803142,
                "title": "c-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution\\n{\\npublic:\\n    std::string simplifyPath(std::string path)\\n    {\\n        if (path.size() == 1)\\n        {\\n            return path;\\n        }\\n        std::string result;\\n        std::stack<std::string> stk;\\n        std::string temp;\\n        for (int i = 0; i < path.size(); i++)\\n        {\\n            temp.clear();\\n\\n            while (path[i] == \\'/\\')\\n            {\\n                i++;\\n            }\\n\\n            while (i < path.size() && path[i] != \\'/\\')\\n            {\\n                temp += path[i];\\n                i++;\\n            }\\n\\n            if (temp == \"..\")\\n            {\\n                if (!stk.empty())\\n                {\\n                    stk.pop();\\n                }\\n            }\\n            else\\n            {\\n                if (temp != \".\" && temp != \"\")\\n                {\\n                    stk.push(temp);\\n                }\\n            }\\n        }\\n        std::stack<std::string> reverse;\\n        while (!stk.empty())\\n        {\\n            reverse.push(stk.top());\\n            stk.pop();\\n        }\\n\\n        while (!reverse.empty())\\n        {\\n            result += \"/\" + reverse.top();\\n            reverse.pop();\\n        }\\n\\n        return result.empty() ? \"/\" : result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    std::string simplifyPath(std::string path)\\n    {\\n        if (path.size() == 1)\\n        {\\n            return path;\\n        }\\n        std::string result;\\n        std::stack<std::string> stk;\\n        std::string temp;\\n        for (int i = 0; i < path.size(); i++)\\n        {\\n            temp.clear();\\n\\n            while (path[i] == \\'/\\')\\n            {\\n                i++;\\n            }\\n\\n            while (i < path.size() && path[i] != \\'/\\')\\n            {\\n                temp += path[i];\\n                i++;\\n            }\\n\\n            if (temp == \"..\")\\n            {\\n                if (!stk.empty())\\n                {\\n                    stk.pop();\\n                }\\n            }\\n            else\\n            {\\n                if (temp != \".\" && temp != \"\")\\n                {\\n                    stk.push(temp);\\n                }\\n            }\\n        }\\n        std::stack<std::string> reverse;\\n        while (!stk.empty())\\n        {\\n            reverse.push(stk.top());\\n            stk.pop();\\n        }\\n\\n        while (!reverse.empty())\\n        {\\n            result += \"/\" + reverse.top();\\n            reverse.pop();\\n        }\\n\\n        return result.empty() ? \"/\" : result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3415113,
                "title": "o-n-solution-golang",
                "content": "# Intuition\\nWhen thinking of unix path, first data structure comes to mind is `stack` because we can simply push each directory in our stack when we found \"/\" and also pop the directory on \"..\"\\n\\n# Approach\\nFirst of all, we need to implement the `stack` data structure. The simplest way is using Go struct with property `a` type of []string.\\n\\n```go\\ntype stack struct {\\n\\ta []string\\n}\\n\\nfunc (st *stack) push(x string) {\\n    // implementation here\\n}\\n\\nfunc (st *stack) peek() string {\\n    // implementation here\\n}\\n\\nfunc (st *stack) pop() string {\\n    // implementation here\\n}\\n\\nfunc (st *stack) isEmpty() bool {\\n    // implementation here\\n}\\n```\\n\\nThen, we implement a special method, `constructAbsolutePath` which joins every string in our stack with `\"/\"`. This is not too difficult to understand right?\\n\\n```go\\nfunc (st *stack) constructAbsolutePath() string {\\n\\tpaths := strings.Join(st.a, \"/\")\\n\\treturn \"/\" + paths\\n}\\n```\\n\\nAfter implementing stack data structure, we are now ready to solve this problem!\\n\\nThe approach is to checking every single charactor in our string, At this point, we have some special charactors the handle.\\n\\nIf we found \"/\", we know that this is the end of directory name. Therefore, we have to push something into out stack. However we **CANNOT** push everything without more check.\\n\\n1. \".\" and \"\"\\n\\n    If the directory to push is \".\" or \"\". That mean nothing to push because \".\" is the current directory and \"\" is a special handle for those absolute path input leading with \"/\".\\n\\n2. \"..\"\\n\\n    \"..\" means you are going back one level from currect directory. This means you have to pop the directory from out stack but only in case stack is **NOT** empty. (you are not going to pop the empty stack)\\n\\nWhen we finish looping through the input string, then we just call the method we have implemented `constructAbsolutePath`.\\n\\nThat\\'s all! Thanks for reading my approach.\\n\\n\\n# Complexity\\n- Time complexity: O(n) where n is the length of input string `path`.\\n\\n- Space complexity: Also O(n).\\n\\n# Code\\n```\\ntype stack struct {\\n\\ta []string\\n}\\n\\nfunc (st *stack) push(x string) {\\n\\tst.a = append(st.a, x)\\n}\\n\\nfunc (st *stack) peek() string {\\n\\treturn st.a[len(st.a)-1]\\n}\\n\\nfunc (st *stack) pop() string {\\n\\tret := st.peek()\\n\\tst.a = st.a[:len(st.a)-1]\\n\\treturn ret\\n}\\n\\nfunc (st *stack) isEmpty() bool {\\n\\treturn len(st.a) == 0\\n}\\n\\nfunc (st *stack) constructAbsolutePath() string {\\n\\tpaths := strings.Join(st.a, \"/\")\\n\\treturn \"/\" + paths\\n}\\n\\nfunc simplifyPath(path string) string {\\n\\t// ensure slash at ending\\n\\tpath += \"/\"\\n\\n\\tst := stack{}\\n\\n\\tchars := strings.Split(path, \"\")\\n\\tdir := \"\"\\n\\tfor _, char := range chars {\\n\\t\\tswitch {\\n\\t\\tcase char == \"/\":\\n\\t\\t\\tswitch dir {\\n\\t\\t\\tcase \".\", \"\":\\n\\t\\t\\t\\t// do nothing\\n\\t\\t\\tcase \"..\":\\n\\t\\t\\t\\tif !st.isEmpty() {\\n\\t\\t\\t\\t\\tst.pop()\\n\\t\\t\\t\\t}\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tst.push(dir)\\n\\t\\t\\t}\\n\\t\\t\\tdir = \"\"\\n\\n\\t\\tdefault:\\n\\t\\t\\tdir += char\\n\\t\\t}\\n\\t}\\n\\n\\treturn st.constructAbsolutePath()\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\ntype stack struct {\\n\\ta []string\\n}\\n\\nfunc (st *stack) push(x string) {\\n    // implementation here\\n}\\n\\nfunc (st *stack) peek() string {\\n    // implementation here\\n}\\n\\nfunc (st *stack) pop() string {\\n    // implementation here\\n}\\n\\nfunc (st *stack) isEmpty() bool {\\n    // implementation here\\n}\\n```\n```go\\nfunc (st *stack) constructAbsolutePath() string {\\n\\tpaths := strings.Join(st.a, \"/\")\\n\\treturn \"/\" + paths\\n}\\n```\n```\\ntype stack struct {\\n\\ta []string\\n}\\n\\nfunc (st *stack) push(x string) {\\n\\tst.a = append(st.a, x)\\n}\\n\\nfunc (st *stack) peek() string {\\n\\treturn st.a[len(st.a)-1]\\n}\\n\\nfunc (st *stack) pop() string {\\n\\tret := st.peek()\\n\\tst.a = st.a[:len(st.a)-1]\\n\\treturn ret\\n}\\n\\nfunc (st *stack) isEmpty() bool {\\n\\treturn len(st.a) == 0\\n}\\n\\nfunc (st *stack) constructAbsolutePath() string {\\n\\tpaths := strings.Join(st.a, \"/\")\\n\\treturn \"/\" + paths\\n}\\n\\nfunc simplifyPath(path string) string {\\n\\t// ensure slash at ending\\n\\tpath += \"/\"\\n\\n\\tst := stack{}\\n\\n\\tchars := strings.Split(path, \"\")\\n\\tdir := \"\"\\n\\tfor _, char := range chars {\\n\\t\\tswitch {\\n\\t\\tcase char == \"/\":\\n\\t\\t\\tswitch dir {\\n\\t\\t\\tcase \".\", \"\":\\n\\t\\t\\t\\t// do nothing\\n\\t\\t\\tcase \"..\":\\n\\t\\t\\t\\tif !st.isEmpty() {\\n\\t\\t\\t\\t\\tst.pop()\\n\\t\\t\\t\\t}\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\tst.push(dir)\\n\\t\\t\\t}\\n\\t\\t\\tdir = \"\"\\n\\n\\t\\tdefault:\\n\\t\\t\\tdir += char\\n\\t\\t}\\n\\t}\\n\\n\\treturn st.constructAbsolutePath()\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3412890,
                "title": "easy-solution-with-explanation-in-javascript",
                "content": "# Code\\n```\\n/**\\n * @param {string} path\\n * @return {string}\\n */\\nvar simplifyPath = function(path) {\\n    const res = [];\\n    const arr = path.split(\"/\");\\n    for(let str of arr) {\\n        // when you see .. symbol\\n        // check result array and if it\\'s not empty\\n        // pop the last element\\n        if(str === \"..\") {\\n            if(res.length !== 0) {\\n                res.pop();\\n            }\\n        } \\n        // if you split \"a//b\" the result [\\'a\\',\\'\\',\\'b\\']\\n        // So check the length>=1 and ignore the period\\n        else if(str.length>=1 && str!==\".\") {\\n            res.push(str);\\n        } \\n    }\\n    return \"/\"+res.join(\"/\");\\n};\\n```\\n# If You Like, Please, Upvote!",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} path\\n * @return {string}\\n */\\nvar simplifyPath = function(path) {\\n    const res = [];\\n    const arr = path.split(\"/\");\\n    for(let str of arr) {\\n        // when you see .. symbol\\n        // check result array and if it\\'s not empty\\n        // pop the last element\\n        if(str === \"..\") {\\n            if(res.length !== 0) {\\n                res.pop();\\n            }\\n        } \\n        // if you split \"a//b\" the result [\\'a\\',\\'\\',\\'b\\']\\n        // So check the length>=1 and ignore the period\\n        else if(str.length>=1 && str!==\".\") {\\n            res.push(str);\\n        } \\n    }\\n    return \"/\"+res.join(\"/\");\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3411390,
                "title": "easy-to-understand-c-stack",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n     stack<string> st;\\n        for(int i = 0; i < path.size(); ++i) {\\n            if(path[i] == \\'/\\') continue;\\n            string temp;\\n            while(i < path.size() && path[i] != \\'/\\') {\\n                temp += path[i];\\n                ++i;\\n            }\\n            if(temp == \".\") continue;\\n            else if(temp == \"..\") {\\n                if(!st.empty()) st.pop();\\n            }\\n            else st.push(temp);\\n        }\\n        path = \"\";\\n        while(!st.empty()) {\\n            path = \"/\" + st.top() + path;\\n            st.pop();\\n        }\\n        if(path.size() == 0) return \"/\";\\n        return path;}\\n};\\n \\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n     stack<string> st;\\n        for(int i = 0; i < path.size(); ++i) {\\n            if(path[i] == \\'/\\') continue;\\n            string temp;\\n            while(i < path.size() && path[i] != \\'/\\') {\\n                temp += path[i];\\n                ++i;\\n            }\\n            if(temp == \".\") continue;\\n            else if(temp == \"..\") {\\n                if(!st.empty()) st.pop();\\n            }\\n            else st.push(temp);\\n        }\\n        path = \"\";\\n        while(!st.empty()) {\\n            path = \"/\" + st.top() + path;\\n            st.pop();\\n        }\\n        if(path.size() == 0) return \"/\";\\n        return path;}\\n};\\n \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3410455,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        int len = path.length();\\n        stack<string> st;\\n        string ans = \"\";\\n        for(int i=0; i<len; i++) {\\n            if(path[i] == \\'/\\') continue;\\n            string temp = \"\";\\n            while(i < len && path[i] != \\'/\\') temp += path[i++];\\n            if(temp == \".\") continue;\\n            if(temp == \"..\") {\\n                if(!st.empty()) st.pop();\\n                continue;\\n            }\\n            st.push(temp);\\n        }\\n        while(!st.empty()) {\\n            ans = \"/\" + st.top() + ans;\\n            st.pop();\\n        }\\n        if(ans.size()) return ans;\\n        else return \"/\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        int len = path.length();\\n        stack<string> st;\\n        string ans = \"\";\\n        for(int i=0; i<len; i++) {\\n            if(path[i] == \\'/\\') continue;\\n            string temp = \"\";\\n            while(i < len && path[i] != \\'/\\') temp += path[i++];\\n            if(temp == \".\") continue;\\n            if(temp == \"..\") {\\n                if(!st.empty()) st.pop();\\n                continue;\\n            }\\n            st.push(temp);\\n        }\\n        while(!st.empty()) {\\n            ans = \"/\" + st.top() + ans;\\n            st.pop();\\n        }\\n        if(ans.size()) return ans;\\n        else return \"/\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409893,
                "title": "simplify-path-best-solution-in-c-using-stack",
                "content": "##  PLEASE UPVOTE  \\uD83D\\uDC4D IF SOLUTION HELPED IN ANYWAY\\n\\n# Code :\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        \\n\\n        stack<string> st;\\n        int i=0, j=0;\\n        while(i<path.length())  {\\n            if(path[i] == \\'/\\')  {i++;continue;}\\n            string temp = \"\";\\n            j=i;\\n            while(j<path.length() && path[j] != \\'/\\')   {\\n                temp.push_back(path[j]);\\n                j++;\\n            }\\n            i=j;\\n            if(temp == \".\") continue;\\n            else if(temp == \"..\" && st.empty())   continue;\\n            else if(temp == \"..\" && !st.empty())   st.pop();\\n            else st.push(temp);\\n        }\\n\\n        string ans = \"\";\\n        while(!st.empty())  {\\n            ans = \"/\" + st.top() + ans;\\n            st.pop();\\n        }\\n        if(ans.length() == 0)   return \"/\";\\n        return ans;\\n            \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        \\n\\n        stack<string> st;\\n        int i=0, j=0;\\n        while(i<path.length())  {\\n            if(path[i] == \\'/\\')  {i++;continue;}\\n            string temp = \"\";\\n            j=i;\\n            while(j<path.length() && path[j] != \\'/\\')   {\\n                temp.push_back(path[j]);\\n                j++;\\n            }\\n            i=j;\\n            if(temp == \".\") continue;\\n            else if(temp == \"..\" && st.empty())   continue;\\n            else if(temp == \"..\" && !st.empty())   st.pop();\\n            else st.push(temp);\\n        }\\n\\n        string ans = \"\";\\n        while(!st.empty())  {\\n            ans = \"/\" + st.top() + ans;\\n            st.pop();\\n        }\\n        if(ans.length() == 0)   return \"/\";\\n        return ans;\\n            \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409788,
                "title": "clever-and-easy-with-stringstream-c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stringstream ss(path);\\n        vector<string> stack;\\n        string word;\\n\\n        while(getline(ss, word, \\'/\\')){\\n            if(word.empty() || word == \".\") continue;\\n            if(word == \"..\"){\\n                if(stack.size()) stack.pop_back();\\n                continue;\\n            }\\n            stack.push_back(word);\\n        }\\n\\n        word = \"/\";\\n        for(auto &i: stack) word += i + \"/\";\\n        if(word.size() > 1) word = word.substr(0, word.size() - 1);\\n        return word;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stringstream ss(path);\\n        vector<string> stack;\\n        string word;\\n\\n        while(getline(ss, word, \\'/\\')){\\n            if(word.empty() || word == \".\") continue;\\n            if(word == \"..\"){\\n                if(stack.size()) stack.pop_back();\\n                continue;\\n            }\\n            stack.push_back(word);\\n        }\\n\\n        word = \"/\";\\n        for(auto &i: stack) word += i + \"/\";\\n        if(word.size() > 1) word = word.substr(0, word.size() - 1);\\n        return word;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409752,
                "title": "java-solution-with-simple-explanation",
                "content": "### Stack\\n\\nIdea: First, split array using `/`. Second, iterate array and pop the stack if the path is `..`, push the string while the path is not empty and `.`. Finally, generate result path using string builder.\\n\\n```java\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<>();\\n        String[] pathArray = path.split(\"/\");\\n\\n        for (String s : pathArray) {\\n            if (s.equals(\"..\")) {\\n                if (!stack.isEmpty()) {\\n                    stack.pop();\\n                }\\n            } else if (s.length() != 0 && !s.equals(\".\")) {\\n                stack.push(s);\\n            }\\n        }\\n\\n        StringBuilder res = new StringBuilder();\\n        while (!stack.isEmpty()) {\\n            res.insert(0, \"/\" + stack.pop());\\n        }\\n\\n        return res.toString().length() > 0 ? res.toString() : \"/\";\\n    }\\n}\\n```\\n\\nComplexity Analysis:\\n\\n- Time Complexity: $O(n)$. $n$ is the length of path.\\n- Space Complexity: $O(n)$. Stack costs $O(n)$ space complexity.",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```java\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<>();\\n        String[] pathArray = path.split(\"/\");\\n\\n        for (String s : pathArray) {\\n            if (s.equals(\"..\")) {\\n                if (!stack.isEmpty()) {\\n                    stack.pop();\\n                }\\n            } else if (s.length() != 0 && !s.equals(\".\")) {\\n                stack.push(s);\\n            }\\n        }\\n\\n        StringBuilder res = new StringBuilder();\\n        while (!stack.isEmpty()) {\\n            res.insert(0, \"/\" + stack.pop());\\n        }\\n\\n        return res.toString().length() > 0 ? res.toString() : \"/\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409708,
                "title": "simple-solution",
                "content": "# Approach\\nThis problem can be solved using only one loop. Firstly, one needs to identify that we need to get directories first and store them in an array so that we can generate our path using it. \\n1) Spliting the path and converting into array using simple .split method will return all the directories in the path including `.` and `..`\\n2) Store your generated path in a stack, so that if a special command e.g `..` is entered we simple remove the last directory from the stack or stay on the same directory for `.` and loop over \\n3) for directory name simple keep pushing it in stack\\n\\n# Code\\n```\\n# @param {String} path\\n# @return {String}\\ndef simplify_path(path)\\n    result = []\\n    directories = path.split(\\'/\\') \\n    directories.each_with_index do |dir, index|\\n        if dir.eql?(\\'.\\') or dir.eql?(\\'\\')\\n            next\\n        elsif dir.eql?(\\'..\\')\\n            result.pop() if result.length > 0\\n        else\\n            result << dir\\n        end\\n    end\\n    \\'/\\' + result.join(\\'/\\')\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {String} path\\n# @return {String}\\ndef simplify_path(path)\\n    result = []\\n    directories = path.split(\\'/\\') \\n    directories.each_with_index do |dir, index|\\n        if dir.eql?(\\'.\\') or dir.eql?(\\'\\')\\n            next\\n        elsif dir.eql?(\\'..\\')\\n            result.pop() if result.length > 0\\n        else\\n            result << dir\\n        end\\n    end\\n    \\'/\\' + result.join(\\'/\\')\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3409583,
                "title": "beats-100-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string s) {\\n        int n = s.length();\\n        stack<string>st;\\n        for(int i=0; i<n;){\\n            int id = i+1;\\n            string temp = \"\";\\n            while(id<n && s[id] != \\'/\\'){\\n                temp += s[id];\\n                id++;\\n            }\\n            if(temp == \"\" || temp == \".\"){\\n                // continue;\\n            }\\n            else if(temp == \"..\"){\\n                if(!st.empty()) st.pop();\\n            }\\n            else{\\n                st.push(temp);\\n            }\\n            i = id;\\n        }\\n        stack<string>st2;\\n        while(!st.empty()){\\n            st2.push(st.top());\\n            st.pop();\\n        }\\n\\n        string ans = \"\";\\n        while(!st2.empty()){\\n            ans+=\"/\";\\n            ans+=st2.top();\\n            st2.pop();\\n        }\\n        if(ans.length() == 0) return \"/\";\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string s) {\\n        int n = s.length();\\n        stack<string>st;\\n        for(int i=0; i<n;){\\n            int id = i+1;\\n            string temp = \"\";\\n            while(id<n && s[id] != \\'/\\'){\\n                temp += s[id];\\n                id++;\\n            }\\n            if(temp == \"\" || temp == \".\"){\\n                // continue;\\n            }\\n            else if(temp == \"..\"){\\n                if(!st.empty()) st.pop();\\n            }\\n            else{\\n                st.push(temp);\\n            }\\n            i = id;\\n        }\\n        stack<string>st2;\\n        while(!st.empty()){\\n            st2.push(st.top());\\n            st.pop();\\n        }\\n\\n        string ans = \"\";\\n        while(!st2.empty()){\\n            ans+=\"/\";\\n            ans+=st2.top();\\n            st2.pop();\\n        }\\n        if(ans.length() == 0) return \"/\";\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409428,
                "title": "easy-to-understand-c-solution-optimized",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string s) {\\n        int n = s.length();\\n        vector<string>v;\\n        for(int i=0; i<n;){\\n            int id = i+1;\\n            string temp = \"\";\\n            while(id<n && s[id] != \\'/\\'){\\n                temp += s[id];\\n                id++;\\n            }\\n            v.push_back(temp);\\n            i = id;\\n        }\\n        stack<string>st;\\n        int sz = v.size();\\n        for(int i=0; i<sz; i++){\\n            if(v[i] == \"\" || v[i] == \".\"){\\n                continue;\\n            }\\n            else if(v[i] == \"..\"){\\n                if(!st.empty()) st.pop();\\n            }\\n            else{\\n                st.push(v[i]);\\n            }\\n        }\\n        v.clear();\\n        string ans = \"\";\\n        while(!st.empty()){\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        sz = v.size();\\n        for(int i=sz-1; i>=0; i--){\\n            ans += \"/\";\\n            ans += v[i];\\n        }\\n        if(ans.length() == 0) return \"/\";\\n        return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string s) {\\n        int n = s.length();\\n        vector<string>v;\\n        for(int i=0; i<n;){\\n            int id = i+1;\\n            string temp = \"\";\\n            while(id<n && s[id] != \\'/\\'){\\n                temp += s[id];\\n                id++;\\n            }\\n            v.push_back(temp);\\n            i = id;\\n        }\\n        stack<string>st;\\n        int sz = v.size();\\n        for(int i=0; i<sz; i++){\\n            if(v[i] == \"\" || v[i] == \".\"){\\n                continue;\\n            }\\n            else if(v[i] == \"..\"){\\n                if(!st.empty()) st.pop();\\n            }\\n            else{\\n                st.push(v[i]);\\n            }\\n        }\\n        v.clear();\\n        string ans = \"\";\\n        while(!st.empty()){\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        sz = v.size();\\n        for(int i=sz-1; i>=0; i--){\\n            ans += \"/\";\\n            ans += v[i];\\n        }\\n        if(ans.length() == 0) return \"/\";\\n        return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409393,
                "title": "simple-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nconvert the string to array for easy manulation.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n0(1)\\n# Code\\n```\\n/**\\n * @param {string} path\\n * @return {string}\\n */\\nvar simplifyPath = function(path) {\\n\\n    // Split on slash\\n    let s = path.split(\\'/\\');\\n    \\n    // Filter out empty strings\\n    s = s.filter((el)=>el!==\\'\\');\\n    \\n    const answer = [];\\n    \\n    for(const el of s){        \\n        if(el === \\'.\\'){\\n            // do nothing\\n        }else if(el === \\'..\\'){\\n            answer.pop(); // In JavaScript no need to check whether the array is empty or not before popping\\n        }else{\\n            answer.push(el);\\n        }\\n    }\\n    \\n    return \\'/\\' + answer.join(\\'/\\');\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} path\\n * @return {string}\\n */\\nvar simplifyPath = function(path) {\\n\\n    // Split on slash\\n    let s = path.split(\\'/\\');\\n    \\n    // Filter out empty strings\\n    s = s.filter((el)=>el!==\\'\\');\\n    \\n    const answer = [];\\n    \\n    for(const el of s){        \\n        if(el === \\'.\\'){\\n            // do nothing\\n        }else if(el === \\'..\\'){\\n            answer.pop(); // In JavaScript no need to check whether the array is empty or not before popping\\n        }else{\\n            answer.push(el);\\n        }\\n    }\\n    \\n    return \\'/\\' + answer.join(\\'/\\');\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3409347,
                "title": "very-easy-to-understand-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String>st=new Stack<>();\\n        \\n        for(int i=0;i<path.length();i++){\\n            if(path.charAt(i)==\\'/\\') continue;\\n\\n            String temp=\"\";\\n            while(i<path.length() && path.charAt(i)!=\\'/\\'){\\n                temp+=path.charAt(i);\\n                i++;\\n            }\\n\\n            if(temp.equals(\".\")) continue;\\n            else if(temp.equals(\"..\")){\\n                if(!st.isEmpty()){\\n                    st.pop();\\n                }\\n\\n            }\\n            else{\\n                st.push(temp);\\n            }\\n        }\\n        \\n        String ans=\"\";\\n        while(!st.isEmpty()){\\n            ans=\"/\"+st.pop()+ans;\\n        }\\n        if(ans.length()==0) return \"/\";\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String>st=new Stack<>();\\n        \\n        for(int i=0;i<path.length();i++){\\n            if(path.charAt(i)==\\'/\\') continue;\\n\\n            String temp=\"\";\\n            while(i<path.length() && path.charAt(i)!=\\'/\\'){\\n                temp+=path.charAt(i);\\n                i++;\\n            }\\n\\n            if(temp.equals(\".\")) continue;\\n            else if(temp.equals(\"..\")){\\n                if(!st.isEmpty()){\\n                    st.pop();\\n                }\\n\\n            }\\n            else{\\n                st.push(temp);\\n            }\\n        }\\n        \\n        String ans=\"\";\\n        while(!st.isEmpty()){\\n            ans=\"/\"+st.pop()+ans;\\n        }\\n        if(ans.length()==0) return \"/\";\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409328,
                "title": "java-easy-solutions-99-faster-3-approaches-without-stack-and-using-stack",
                "content": "**PLEASE UPVOTE IF YOU FIND IT USEFUL**\\n\\n# Approach 1\\nUsing Stack and String Split funtion.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N) 4ms \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n       Stack<String> stack=new Stack<>();\\n       String []str=path.split(\"/\");\\n       for(String s: str){\\n           //System.out.println(s);\\n           if(s.equals(\".\") || s.equals(\"\"))continue;\\n           else if(s.equals(\"..\")){if(!stack.isEmpty()) stack.pop();}\\n           else stack.push(s);\\n       }\\n       //System.out.println(stack);\\n       Collections.reverse(stack);\\n       StringBuilder sb=new StringBuilder();\\n       while(!stack.isEmpty()){\\n           sb.append(\"/\");\\n           sb.append(stack.pop());\\n       }\\n       if(sb.length()==0) return \"/\";\\n       return sb.toString();\\n    }\\n}\\n```\\n\\n# Approach 2\\nWithout using Stack\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N) 2ms \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        int len=path.length();\\n        char []stack=new char[len];\\n        int i=0;\\n\\t\\t    int j=-1;\\n        while(i<len){\\n            if(j>=0 && (stack[j] == \\'/\\' || i==len-1) && path.charAt(i)==\\'/\\') {\\n                i++;\\n                continue;\\n            }\\n            if(path.charAt(i)==\\'.\\' && stack[j] == \\'/\\' ){\\n                int dot=0;\\n                while(i<len && path.charAt(i)!=\\'/\\'){\\n                    dot++;\\n                    if(path.charAt(i)!=\\'.\\'){\\n                        dot+=5;\\n                        break;\\n                    }\\n                    stack[++j]=path.charAt(i);\\n                    i++;\\n                }\\n                if(dot<3){\\n                     while(j>=0 && dot>0){\\n                    if(stack[j--]==\\'/\\')dot--;\\n                    }\\n                    if(j==-1) j=0;\\n                }\\n            }\\n            else{\\n                    stack[++j]=path.charAt(i);\\n                    i++;\\n                } \\n        }\\n        if(stack[j]==\\'/\\'&& j>1) j--;\\n\\n        return String.valueOf(stack,0,j+1);\\n  }\\n}\\n```\\n# Approach 3\\nUsing Stack\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N) 12ms \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        int len=path.length();\\n        Stack<Character> stack=new Stack<>();\\n        int i=0;\\n        while(i<len){\\n            if(!stack.isEmpty() && (stack.peek() == \\'/\\' || i==len-1) && path.charAt(i)==\\'/\\') {\\n                i++;\\n                continue;\\n            }\\n            if(path.charAt(i)==\\'.\\' && stack.peek() == \\'/\\' ){\\n                int dot=0;\\n                while(i<len && path.charAt(i)!=\\'/\\'){\\n                    dot++;\\n                    if(path.charAt(i)!=\\'.\\'){\\n                        dot+=5;\\n                        break;\\n                    }\\n                    stack.push(path.charAt(i));\\n                    i++;\\n                }\\n                if(dot<3){\\n                     while(!stack.isEmpty() && dot>0){\\n                    if(stack.pop()==\\'/\\')dot--;\\n                    }\\n                    if(stack.isEmpty()) stack.push(\\'/\\');\\n                }\\n            }\\n            else{\\n                    stack.push(path.charAt(i));\\n                    i++;\\n                } \\n        }\\n         StringBuilder sb=new StringBuilder();\\n         if(stack.peek()==\\'/\\'&& stack.size()>1) stack.pop();\\n        while(!stack.isEmpty()) sb.append(stack.pop());\\n\\n        return sb.reverse().toString();\\n}\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n       Stack<String> stack=new Stack<>();\\n       String []str=path.split(\"/\");\\n       for(String s: str){\\n           //System.out.println(s);\\n           if(s.equals(\".\") || s.equals(\"\"))continue;\\n           else if(s.equals(\"..\")){if(!stack.isEmpty()) stack.pop();}\\n           else stack.push(s);\\n       }\\n       //System.out.println(stack);\\n       Collections.reverse(stack);\\n       StringBuilder sb=new StringBuilder();\\n       while(!stack.isEmpty()){\\n           sb.append(\"/\");\\n           sb.append(stack.pop());\\n       }\\n       if(sb.length()==0) return \"/\";\\n       return sb.toString();\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        int len=path.length();\\n        char []stack=new char[len];\\n        int i=0;\\n\\t\\t    int j=-1;\\n        while(i<len){\\n            if(j>=0 && (stack[j] == \\'/\\' || i==len-1) && path.charAt(i)==\\'/\\') {\\n                i++;\\n                continue;\\n            }\\n            if(path.charAt(i)==\\'.\\' && stack[j] == \\'/\\' ){\\n                int dot=0;\\n                while(i<len && path.charAt(i)!=\\'/\\'){\\n                    dot++;\\n                    if(path.charAt(i)!=\\'.\\'){\\n                        dot+=5;\\n                        break;\\n                    }\\n                    stack[++j]=path.charAt(i);\\n                    i++;\\n                }\\n                if(dot<3){\\n                     while(j>=0 && dot>0){\\n                    if(stack[j--]==\\'/\\')dot--;\\n                    }\\n                    if(j==-1) j=0;\\n                }\\n            }\\n            else{\\n                    stack[++j]=path.charAt(i);\\n                    i++;\\n                } \\n        }\\n        if(stack[j]==\\'/\\'&& j>1) j--;\\n\\n        return String.valueOf(stack,0,j+1);\\n  }\\n}\\n```\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        int len=path.length();\\n        Stack<Character> stack=new Stack<>();\\n        int i=0;\\n        while(i<len){\\n            if(!stack.isEmpty() && (stack.peek() == \\'/\\' || i==len-1) && path.charAt(i)==\\'/\\') {\\n                i++;\\n                continue;\\n            }\\n            if(path.charAt(i)==\\'.\\' && stack.peek() == \\'/\\' ){\\n                int dot=0;\\n                while(i<len && path.charAt(i)!=\\'/\\'){\\n                    dot++;\\n                    if(path.charAt(i)!=\\'.\\'){\\n                        dot+=5;\\n                        break;\\n                    }\\n                    stack.push(path.charAt(i));\\n                    i++;\\n                }\\n                if(dot<3){\\n                     while(!stack.isEmpty() && dot>0){\\n                    if(stack.pop()==\\'/\\')dot--;\\n                    }\\n                    if(stack.isEmpty()) stack.push(\\'/\\');\\n                }\\n            }\\n            else{\\n                    stack.push(path.charAt(i));\\n                    i++;\\n                } \\n        }\\n         StringBuilder sb=new StringBuilder();\\n         if(stack.peek()==\\'/\\'&& stack.size()>1) stack.pop();\\n        while(!stack.isEmpty()) sb.append(stack.pop());\\n\\n        return sb.reverse().toString();\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3408323,
                "title": "java-solution-beginer-level-can-understand-upvote-plz",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nEvery java beginer Can understand this intuition..\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nBeginner Level Approch..\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n\\n    Stack<String>stack = new Stack<>();\\n    String res =\"\";\\nfor(int i=0;i<path.length();i++){\\n    if(path.charAt(i)==\\'/\\'){\\n        continue;\\n    }\\n    String temp =\"\";\\n    while(i<path.length() && path.charAt(i) != \\'/\\'){\\n        temp +=path.charAt(i);\\n        ++i;\\n    }\\n       \\n           if(temp.equals(\".\")){\\n               continue;\\n           }else if(temp.equals(\"..\")){\\n               if(!stack.isEmpty())\\n               stack.pop();\\n           }else{\\n               stack.push(temp);\\n           }\\n\\n         }\\n        \\n         while(!stack.isEmpty()){\\n             res = \"/\"+stack.peek()+res;\\n             stack.pop();\\n         }\\n         if(res.length()==0){\\n             return \"/\";\\n         }\\n    return res;\\n     \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n\\n    Stack<String>stack = new Stack<>();\\n    String res =\"\";\\nfor(int i=0;i<path.length();i++){\\n    if(path.charAt(i)==\\'/\\'){\\n        continue;\\n    }\\n    String temp =\"\";\\n    while(i<path.length() && path.charAt(i) != \\'/\\'){\\n        temp +=path.charAt(i);\\n        ++i;\\n    }\\n       \\n           if(temp.equals(\".\")){\\n               continue;\\n           }else if(temp.equals(\"..\")){\\n               if(!stack.isEmpty())\\n               stack.pop();\\n           }else{\\n               stack.push(temp);\\n           }\\n\\n         }\\n        \\n         while(!stack.isEmpty()){\\n             res = \"/\"+stack.peek()+res;\\n             stack.pop();\\n         }\\n         if(res.length()==0){\\n             return \"/\";\\n         }\\n    return res;\\n     \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3408035,
                "title": "python-elegant-short-stack",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n```\\nclass Solution:\\n\\n    SEP = \\'/\\'\\n    CURRENT_DIR = \\'.\\'\\n    PARENT_DIR = \\'..\\'\\n\\n    def simplifyPath(self, path: str) -> str:\\n        simplified = []\\n\\n        for directory in path.split(self.SEP):\\n            if not directory or directory == self.CURRENT_DIR:\\n                continue\\n\\n            if directory == self.PARENT_DIR:\\n                if simplified:\\n                    simplified.pop()\\n            else:\\n                simplified.append(directory)\\n\\n        return self.SEP + self.SEP.join(simplified)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n\\n    SEP = \\'/\\'\\n    CURRENT_DIR = \\'.\\'\\n    PARENT_DIR = \\'..\\'\\n\\n    def simplifyPath(self, path: str) -> str:\\n        simplified = []\\n\\n        for directory in path.split(self.SEP):\\n            if not directory or directory == self.CURRENT_DIR:\\n                continue\\n\\n            if directory == self.PARENT_DIR:\\n                if simplified:\\n                    simplified.pop()\\n            else:\\n                simplified.append(directory)\\n\\n        return self.SEP + self.SEP.join(simplified)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407966,
                "title": "unlimited-logic-with-stack",
                "content": "\\n\\n# Python Solution With Python\\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack=[]\\n        res=\"\"\\n        for c in path+\\'/\\':\\n            if c==\\'/\\':\\n                if res==\"..\":\\n                    if stack: stack.pop()\\n                elif res!=\"\" and res!=\\'.\\':\\n                    stack.append(res)\\n                res=\"\"\\n            else:\\n                res+=c\\n        return \"/\"+\"/\".join(stack)\\n```\\n# \\'/\\' is added due to the edges of like \"a/b/c/d///././..\"-->this test case has last two string are \"..\" which removes one element from stack then output gives \"a/b/c\" so we can solve that test case by adding \\'/\\' then output is \"a/b/c/d\"\\n\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        stack=[]\\n        res=\"\"\\n        for c in path+\\'/\\':\\n            if c==\\'/\\':\\n                if res==\"..\":\\n                    if stack: stack.pop()\\n                elif res!=\"\" and res!=\\'.\\':\\n                    stack.append(res)\\n                res=\"\"\\n            else:\\n                res+=c\\n        return \"/\"+\"/\".join(stack)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3407042,
                "title": "c-stack",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> st;\\n        string ans=\"\";\\n        for(int i=0;i<path.size();i++){\\n            if(path[i]==\\'/\\'){\\n                continue;\\n            }\\n            string temp;\\n            while(i<path.size() && path[i]!=\\'/\\'){\\n                temp+=path[i];\\n                i++;\\n            }\\n            if(temp==\".\"){\\n                continue;\\n            }else if(temp==\"..\"){\\n                if(!st.empty()){\\n                    st.pop();\\n                }\\n            }else{\\n                st.push(temp);\\n            }\\n        }\\n        while(!st.empty()){\\n            ans=\\'/\\'+st.top()+ans;\\n            st.pop();\\n        }\\n        if(ans.size()==0){\\n            return \"/\";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        stack<string> st;\\n        string ans=\"\";\\n        for(int i=0;i<path.size();i++){\\n            if(path[i]==\\'/\\'){\\n                continue;\\n            }\\n            string temp;\\n            while(i<path.size() && path[i]!=\\'/\\'){\\n                temp+=path[i];\\n                i++;\\n            }\\n            if(temp==\".\"){\\n                continue;\\n            }else if(temp==\"..\"){\\n                if(!st.empty()){\\n                    st.pop();\\n                }\\n            }else{\\n                st.push(temp);\\n            }\\n        }\\n        while(!st.empty()){\\n            ans=\\'/\\'+st.top()+ans;\\n            st.pop();\\n        }\\n        if(ans.size()==0){\\n            return \"/\";\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406981,
                "title": "java-stack",
                "content": "# Intuition\\nBetter use \"split\" to make the logic cleaner. My first trial didn\\'t used \"split\" and turnout my logic was messy.\\n\\n# Approach\\nstack\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n) -> because of stack\\n\\n# Code\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<>();\\n\\n        for (String s : path.split(\"/\")) {\\n            if (s.equals(\"..\") && !stack.isEmpty()) stack.pop();\\n            else if (!(s.equals(\"\") || s.equals(\".\") || s.equals(\"..\"))) stack.add(s);\\n        }\\n\\n        String ans = \"\";\\n        for (String i : stack) {\\n            ans += \"/\" + i;\\n        }\\n        return ans.isEmpty() ? \"/\" : ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<>();\\n\\n        for (String s : path.split(\"/\")) {\\n            if (s.equals(\"..\") && !stack.isEmpty()) stack.pop();\\n            else if (!(s.equals(\"\") || s.equals(\".\") || s.equals(\"..\"))) stack.add(s);\\n        }\\n\\n        String ans = \"\";\\n        for (String i : stack) {\\n            ans += \"/\" + i;\\n        }\\n        return ans.isEmpty() ? \"/\" : ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406944,
                "title": "stack-python-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nstack problem \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nsplit path and iterate through it \\nhanlding 3 cases \\n1- if cur_val is \"..\" and stack is empty of cur_val is \".\" do nothing and contniue \\n2 - if cur_val is \"..\" and stack , pop last ele from stack\\n3 - otherwise , append val to stack\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        \"\"\"\\n        :type path: str\\n        :rtype: str\\n        \"\"\"\\n        stack=[]\\n        path=path.split(\"/\")\\n        path =[p for p in path if p ]\\n        for p in path:\\n            if (len(stack)==0 and p==\"..\") or p ==\".\":\\n                continue \\n            elif p==\"..\" and stack:\\n                stack.pop()\\n            else:\\n                stack.append(p)\\n        return \"/\" + \"/\".join(stack)\\n            \\n            \\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Stack",
                    "Shortest Path"
                ],
                "code": "```\\nclass Solution(object):\\n    def simplifyPath(self, path):\\n        \"\"\"\\n        :type path: str\\n        :rtype: str\\n        \"\"\"\\n        stack=[]\\n        path=path.split(\"/\")\\n        path =[p for p in path if p ]\\n        for p in path:\\n            if (len(stack)==0 and p==\"..\") or p ==\".\":\\n                continue \\n            elif p==\"..\" and stack:\\n                stack.pop()\\n            else:\\n                stack.append(p)\\n        return \"/\" + \"/\".join(stack)\\n            \\n            \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406773,
                "title": "scala-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nobject Solution {\\n    def simplifyPath(path: String): String = \\n        path.split(\"/+\").foldLeft(List[String]())((acc, cur) => cur match {\\n            case \"..\" => scala.util.Try(acc.tail).getOrElse(List[String]())\\n            case \".\" | \"\" => acc\\n            case _ => cur +: acc\\n        }).reverse.mkString(\"/\", \"/\", \"\")\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n    def simplifyPath(path: String): String = \\n        path.split(\"/+\").foldLeft(List[String]())((acc, cur) => cur match {\\n            case \"..\" => scala.util.Try(acc.tail).getOrElse(List[String]())\\n            case \".\" | \"\" => acc\\n            case _ => cur +: acc\\n        }).reverse.mkString(\"/\", \"/\", \"\")\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3406669,
                "title": "daily-leetcoding-challenge-april-day-12",
                "content": "This problem is the Daily LeetCoding Challenge for April, Day 12.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 3181590,
                "title": "71-simplify-path-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Split the input string path into a list of directories using .split(\\'/\\').\\n2. Initialize an empty list stack to store the directories.\\n3. Loop through the list of directories.\\n4. If the directory is an empty string or a single period, skip it.\\n5. If the directory is .., pop the last directory from the stack.\\n6. If the directory is a regular directory name, push it to the stack.\\n7. Join the directories in the stack using /.join and add a leading slash.\\n8. Return the simplified path.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        # split the path into a list of directories\\n        dirs = path.split(\\'/\\')\\n        # initialize a stack to store the directories\\n        stack = []\\n        for dir in dirs:\\n            if dir == \\'\\' or dir == \\'.\\':\\n                continue\\n            elif dir == \\'..\\':\\n                if len(stack) > 0:\\n                    stack.pop()\\n            else:\\n                stack.append(dir)\\n        # join the directories in the stack and add a leading slash\\n        return \\'/\\' + \\'/\\'.join(stack)\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        # split the path into a list of directories\\n        dirs = path.split(\\'/\\')\\n        # initialize a stack to store the directories\\n        stack = []\\n        for dir in dirs:\\n            if dir == \\'\\' or dir == \\'.\\':\\n                continue\\n            elif dir == \\'..\\':\\n                if len(stack) > 0:\\n                    stack.pop()\\n            else:\\n                stack.append(dir)\\n        # join the directories in the stack and add a leading slash\\n        return \\'/\\' + \\'/\\'.join(stack)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3178616,
                "title": "simple-python-solution",
                "content": "# Complexity\\n- Time complexity: Given `n = len(path)` then complexity is `O(n)`\\n\\n- Space complexity: Given `n = len(path)` then complexity is `O(n)`\\n\\n# Code\\n```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        levels, stack = path.split(\"/\"), []\\n\\n        for l in levels:\\n            if len(l)>0 and l != \\'.\\':\\n                if l == \\'..\\' and stack:\\n                    stack.pop()\\n                else if != \\'..\\':\\n                    stack.append(l)\\n        \\n        return \"/\"+\"/\".join(stack)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def simplifyPath(self, path: str) -> str:\\n        levels, stack = path.split(\"/\"), []\\n\\n        for l in levels:\\n            if len(l)>0 and l != \\'.\\':\\n                if l == \\'..\\' and stack:\\n                    stack.pop()\\n                else if != \\'..\\':\\n                    stack.append(l)\\n        \\n        return \"/\"+\"/\".join(stack)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2824793,
                "title": "java-stack-deque",
                "content": "### **Please Upvote** :D\\n##### 1. Using Stack:\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<>();\\n        String[] p = path.split(\"/\");\\n        for (String s : p) {\\n            if (!stack.isEmpty() && s.equals(\"..\")) {\\n                stack.pop();\\n            } else if (!s.equals(\"\") && !s.equals(\".\") && !s.equals(\"..\")) {\\n                stack.push(s);\\n            }\\n        }\\n\\n        if (stack.isEmpty()) {\\n            return \"/\";\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        for (String s : stack) {\\n            sb.append(\\'/\\').append(s);\\n        }\\n        return sb.toString();\\n    }\\n}\\n\\n// TC: O(n), SC: O(n)\\n```\\n##### 2. Using Deque:\\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Deque<String> dq = new LinkedList<>();\\n        String[] p = path.split(\"/\");\\n        for (String s : p) {\\n            if (!dq.isEmpty() && s.equals(\"..\")) {\\n                dq.poll();\\n            } else if (!s.equals(\"\") && !s.equals(\".\") && !s.equals(\"..\")) {\\n                dq.push(s);\\n            }\\n        }\\n\\n        if (dq.isEmpty()) {\\n            return \"/\";\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        while (!dq.isEmpty()) {\\n            sb.append(\\'/\\').append(dq.pollLast());\\n        }\\n\\n        return sb.toString();\\n    }\\n}\\n\\n// TC: O(n), SC: O(n)\\n```",
                "solutionTags": [
                    "Java",
                    "Stack",
                    "Queue"
                ],
                "code": "```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Stack<String> stack = new Stack<>();\\n        String[] p = path.split(\"/\");\\n        for (String s : p) {\\n            if (!stack.isEmpty() && s.equals(\"..\")) {\\n                stack.pop();\\n            } else if (!s.equals(\"\") && !s.equals(\".\") && !s.equals(\"..\")) {\\n                stack.push(s);\\n            }\\n        }\\n\\n        if (stack.isEmpty()) {\\n            return \"/\";\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        for (String s : stack) {\\n            sb.append(\\'/\\').append(s);\\n        }\\n        return sb.toString();\\n    }\\n}\\n\\n// TC: O(n), SC: O(n)\\n```\n```\\nclass Solution {\\n    public String simplifyPath(String path) {\\n        Deque<String> dq = new LinkedList<>();\\n        String[] p = path.split(\"/\");\\n        for (String s : p) {\\n            if (!dq.isEmpty() && s.equals(\"..\")) {\\n                dq.poll();\\n            } else if (!s.equals(\"\") && !s.equals(\".\") && !s.equals(\"..\")) {\\n                dq.push(s);\\n            }\\n        }\\n\\n        if (dq.isEmpty()) {\\n            return \"/\";\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        while (!dq.isEmpty()) {\\n            sb.append(\\'/\\').append(dq.pollLast());\\n        }\\n\\n        return sb.toString();\\n    }\\n}\\n\\n// TC: O(n), SC: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2725073,
                "title": "java-simple-two-approaches",
                "content": "# Two Approaches \\n\\n**1. Using Stack**\\nTC O(N) & SC O(N)\\n\\n```\\nclass Solution{\\n  public String simplifyPath(String path) {\\n       Stack<String> s=new Stack<>();\\n       StringBuilder res=new StringBuilder();\\n       String[] p=path.split(\"/\");\\n       \\n       for(int i=0;i<p.length;i++){\\n         if(!s.isEmpty() && p[i].equals(\"..\")) s.pop();\\n         if(!p[i].equals(\"\") && !p[i].equals(\".\") && !p[i].equals(\"..\")){\\n           s.push(p[i]);\\n         }\\n       }\\n       \\n       if(s.isEmpty()) return \"/\";\\n       while(!s.isEmpty()){\\n         res.insert(0,s.pop()).insert(0,\"/\");\\n       }\\n       return res.toString();\\n    }\\n}\\n```\\n\\n**2. Using Deque**\\nTC O(N) & SC O(N)\\n\\n```\\nclass Solution{\\n  public static String simplifyPath(String path) {\\n      Deque<String> s=new LinkedList<>();\\n       StringBuilder res=new StringBuilder();\\n       String[] p=path.split(\"/\");\\n       \\n       for(int i=0;i<p.length;i++){\\n         if(!s.isEmpty() && p[i].equals(\"..\")) s.poll();\\n         if(!p[i].equals(\"\") && !p[i].equals(\".\") && !p[i].equals(\"..\")){\\n           s.push(p[i]);\\n         }\\n       }\\n       \\n       if(s.isEmpty()) return \"/\";\\n       while(!s.isEmpty()){\\n         res.append(\"/\").append(s.pollLast());  //pollLast will give u the first element from Dq\\n       }\\n       return res.toString();  \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution{\\n  public String simplifyPath(String path) {\\n       Stack<String> s=new Stack<>();\\n       StringBuilder res=new StringBuilder();\\n       String[] p=path.split(\"/\");\\n       \\n       for(int i=0;i<p.length;i++){\\n         if(!s.isEmpty() && p[i].equals(\"..\")) s.pop();\\n         if(!p[i].equals(\"\") && !p[i].equals(\".\") && !p[i].equals(\"..\")){\\n           s.push(p[i]);\\n         }\\n       }\\n       \\n       if(s.isEmpty()) return \"/\";\\n       while(!s.isEmpty()){\\n         res.insert(0,s.pop()).insert(0,\"/\");\\n       }\\n       return res.toString();\\n    }\\n}\\n```\n```\\nclass Solution{\\n  public static String simplifyPath(String path) {\\n      Deque<String> s=new LinkedList<>();\\n       StringBuilder res=new StringBuilder();\\n       String[] p=path.split(\"/\");\\n       \\n       for(int i=0;i<p.length;i++){\\n         if(!s.isEmpty() && p[i].equals(\"..\")) s.poll();\\n         if(!p[i].equals(\"\") && !p[i].equals(\".\") && !p[i].equals(\"..\")){\\n           s.push(p[i]);\\n         }\\n       }\\n       \\n       if(s.isEmpty()) return \"/\";\\n       while(!s.isEmpty()){\\n         res.append(\"/\").append(s.pollLast());  //pollLast will give u the first element from Dq\\n       }\\n       return res.toString();  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2715470,
                "title": "made-it-simple-stacks-sliding-window-based-on-hi-malik-solution-c-version",
                "content": "**The Entire idea is**\\n* We have the path\\n* We can split based on / slashes\\n* /a//b/../c/d/ -> a, b, .. , c, d = > We get the directories\\n* Then we need to do only ONE THING\\n* Put things onto stack. \\n* we need to go back that is POP when we see ..\\n* So at last we have the PATH IN STACK.\\n* When we POP And CONTRUCT THE ANS. We need to do in reverse manner.\\n* PATH = / DIRECTORY + OLD PATH\\n\\nHOW WE SPLIT?\\n* We could have used string stream or any other.\\n* But we did manually with sliding window.\\n* i always points to start of string and j points to the end.\\n* whenever u see \\'/\\' its time to enter the directory. Then move to next non slash place.\\n\\n```\\n//TIME : O(N)\\n//SPACE: O(N)\\n\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string> arr;\\n        int N = path.size();\\n        int i = 1;\\n        int j = 1;\\n        while(j < N){\\n            if(path[j] == \\'/\\'){\\n                arr.push_back(path.substr(i,j-i));\\n                //now point j to a non /\\n                while(path[j]==\\'/\\'){\\n                    j++;\\n                }\\n                i = j;\\n            }\\n            //else its not / \\n            j++;\\n        }\\n        \\n        if(i<N){\\n            //Edge case = when there is no last back slash\\n            arr.push_back(path.substr(i,j-i));\\n        }\\n        \\n        stack<string> stk;\\n        \\n        for(auto s : arr){\\n            if(stk.size()>0 && s==\"..\") stk.pop(); // as we move one step back in directory\\n            else if(s != \"\" && s!= \".\" && s!=\"..\") stk.push(s);\\n        }\\n        \\n        //edge case = when \"\" path is given\\n        if(stk.empty()) return \"/\";\\n        \\n        //PATH FORMATION\\n        string res=\"\";\\n        while(!stk.empty()){\\n           \\n            res = \\'/\\' + stk.top() + res;\\n            stk.pop();\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Stack",
                    "Sliding Window"
                ],
                "code": "```\\n//TIME : O(N)\\n//SPACE: O(N)\\n\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        vector<string> arr;\\n        int N = path.size();\\n        int i = 1;\\n        int j = 1;\\n        while(j < N){\\n            if(path[j] == \\'/\\'){\\n                arr.push_back(path.substr(i,j-i));\\n                //now point j to a non /\\n                while(path[j]==\\'/\\'){\\n                    j++;\\n                }\\n                i = j;\\n            }\\n            //else its not / \\n            j++;\\n        }\\n        \\n        if(i<N){\\n            //Edge case = when there is no last back slash\\n            arr.push_back(path.substr(i,j-i));\\n        }\\n        \\n        stack<string> stk;\\n        \\n        for(auto s : arr){\\n            if(stk.size()>0 && s==\"..\") stk.pop(); // as we move one step back in directory\\n            else if(s != \"\" && s!= \".\" && s!=\"..\") stk.push(s);\\n        }\\n        \\n        //edge case = when \"\" path is given\\n        if(stk.empty()) return \"/\";\\n        \\n        //PATH FORMATION\\n        string res=\"\";\\n        while(!stk.empty()){\\n           \\n            res = \\'/\\' + stk.top() + res;\\n            stk.pop();\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2695541,
                "title": "easy-solution-in-c-two-approaches-using-stack",
                "content": "**Happy LeetCoding\\uD83D\\uDCAF\\nPlease Upvote if u liked my Solution\\uD83D\\uDE42**\\n# Code\\n***1st Approach***\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        int size=path.size(),i=0;\\n        if(size==1)\\n            return path;\\n        stack<char> sta;\\n        while(i<size){\\n            if(sta.size()==0){\\n                sta.push(path[i++]);\\n                continue;\\n            }\\n            if((sta.top()==\\'/\\' && path[i]==\\'/\\')){\\n                i++;\\n                continue;\\n            }\\n            else if((i+1<size && sta.top()==\\'/\\' && path[i]==\\'.\\' && path[i+1]==\\'/\\')||(i+1==size && sta.top()==\\'/\\' && \\n            path[i]==\\'.\\')){\\n                i++;\\n                continue;\\n            }\\n            else if((i+2==size && sta.top()==\\'/\\' && path[i]==\\'.\\' && path[i+1]==\\'.\\')||(i+2<size && sta.top()==\\'/\\' && \\n            path[i]==\\'.\\' && path[i+1]==\\'.\\' && path[i+2]==\\'/\\')){\\n                sta.pop();\\n                while(sta.size()>0 && sta.top()!=\\'/\\')\\n                    sta.pop();\\n                i+=2;\\n            }\\n            else\\n                sta.push(path[i++]);\\n        }\\n        string ans=\"\";\\n        if(sta.size()==0)\\n            return \"/\";\\n        else if(sta.size()>=2 && sta.top()==\\'/\\')\\n            sta.pop();\\n        while(sta.size()){\\n            ans+=sta.top();\\n            sta.pop();\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\\n***2nd Approach(A bit easier)***\\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n       int size=path.size(),i=0;\\n        if(size==1)\\n            return path;\\n        stack<string> sta;\\n        while(i<size){\\n            if(path[i]==\\'/\\'){\\n                i++;\\n                continue;\\n            }\\n            string tmp=\"\";\\n            while(i<size && path[i]!=\\'/\\')\\n                tmp+=path[i++];\\n            if(tmp == \".\" || tmp == \"\")\\n                continue;\\n            else if(tmp == \"..\"){\\n                if(sta.size())\\n                    sta.pop();\\n            }\\n            else\\n                sta.push(tmp);\\n        } \\n        if(sta.size()==0)\\n            return \"/\";\\n        string ans=\"\";\\n        while(sta.size()){\\n            ans=\"/\"+sta.top()+ans;\\n            sta.pop();\\n        }\\n        return ans;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "String",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n        int size=path.size(),i=0;\\n        if(size==1)\\n            return path;\\n        stack<char> sta;\\n        while(i<size){\\n            if(sta.size()==0){\\n                sta.push(path[i++]);\\n                continue;\\n            }\\n            if((sta.top()==\\'/\\' && path[i]==\\'/\\')){\\n                i++;\\n                continue;\\n            }\\n            else if((i+1<size && sta.top()==\\'/\\' && path[i]==\\'.\\' && path[i+1]==\\'/\\')||(i+1==size && sta.top()==\\'/\\' && \\n            path[i]==\\'.\\')){\\n                i++;\\n                continue;\\n            }\\n            else if((i+2==size && sta.top()==\\'/\\' && path[i]==\\'.\\' && path[i+1]==\\'.\\')||(i+2<size && sta.top()==\\'/\\' && \\n            path[i]==\\'.\\' && path[i+1]==\\'.\\' && path[i+2]==\\'/\\')){\\n                sta.pop();\\n                while(sta.size()>0 && sta.top()!=\\'/\\')\\n                    sta.pop();\\n                i+=2;\\n            }\\n            else\\n                sta.push(path[i++]);\\n        }\\n        string ans=\"\";\\n        if(sta.size()==0)\\n            return \"/\";\\n        else if(sta.size()>=2 && sta.top()==\\'/\\')\\n            sta.pop();\\n        while(sta.size()){\\n            ans+=sta.top();\\n            sta.pop();\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    string simplifyPath(string path) {\\n       int size=path.size(),i=0;\\n        if(size==1)\\n            return path;\\n        stack<string> sta;\\n        while(i<size){\\n            if(path[i]==\\'/\\'){\\n                i++;\\n                continue;\\n            }\\n            string tmp=\"\";\\n            while(i<size && path[i]!=\\'/\\')\\n                tmp+=path[i++];\\n            if(tmp == \".\" || tmp == \"\")\\n                continue;\\n            else if(tmp == \"..\"){\\n                if(sta.size())\\n                    sta.pop();\\n            }\\n            else\\n                sta.push(tmp);\\n        } \\n        if(sta.size()==0)\\n            return \"/\";\\n        string ans=\"\";\\n        while(sta.size()){\\n            ans=\"/\"+sta.top()+ans;\\n            sta.pop();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2659732,
                "title": "simple-cpp-solution-using-stringstream",
                "content": "```\\nclass Solution\\n{\\n    public:\\n        string simplifyPath(string path)\\n        {\\n            vector<string> vec;\\n            vector<string> st;\\n\\n            stringstream s(path);\\t//split function using stringstream\\n            string w;\\n            while (getline(s, w, \\'/\\'))\\n                if (w.size() != 0)\\n                    vec.push_back(w);\\n\\n            for (auto i: vec)\\n            {\\n                if (i == \"..\" && st.size() != 0) st.pop_back();\\n                else if (i != \".\" && i != \"..\") st.push_back(i);\\n            }\\n            w = \"\";\\n            if (st.size() == 0)\\n                w.push_back(\\'/\\');\\n            for (auto i: st)\\n            {\\n                w.push_back(\\'/\\');\\n                w += i;\\n            }\\n\\n            return w;\\n        }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution\\n{\\n    public:\\n        string simplifyPath(string path)\\n        {\\n            vector<string> vec;\\n            vector<string> st;\\n\\n            stringstream s(path);\\t//split function using stringstream\\n            string w;\\n            while (getline(s, w, \\'/\\'))\\n                if (w.size() != 0)\\n                    vec.push_back(w);\\n\\n            for (auto i: vec)\\n            {\\n                if (i == \"..\" && st.size() != 0) st.pop_back();\\n                else if (i != \".\" && i != \"..\") st.push_back(i);\\n            }\\n            w = \"\";\\n            if (st.size() == 0)\\n                w.push_back(\\'/\\');\\n            for (auto i: st)\\n            {\\n                w.push_back(\\'/\\');\\n                w += i;\\n            }\\n\\n            return w;\\n        }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1861053,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1565677,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1860833,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1565479,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1861113,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1574273,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1567841,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1572868,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1569365,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1566708,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1861053,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1565677,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1860833,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1565479,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1861113,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1574273,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1567841,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1572868,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1569365,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1566708,
                "content": [
                    {
                        "username": "prakashtarun313",
                        "content": "MORE EXAMPLES THAT YOU CAN UNDERSTAND :\\n\\nCHEAT CODE :\\n\" . \"        ==>   Continue;\\n\" . .  \"     ==>   Remove the before directory;\\n\" // \"      ==> make it into \"/\"\\n\\nExample 1:\\nInput: \"/home/user/Documents/../Pictures\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 2:\\nInput: \"/../home/user/Documents\"\\nOutput: \"/home/user/Documents\"\\n\\nExample 3:\\nInput: \"/home/user/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 4:\\nInput: \"/home/user/./Downloads/../Pictures/././\"\\nOutput: \"/home/user/Pictures\"\\n\\nExample 5:\\nInput: \"/home/user/Documents/../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nExample 6:\\nInput: \"/home/user/Documents/../../../usr/local/bin\"\\nOutput: \"/usr/local/bin\"\\n\\nPLEASE UPVOTE"
                    },
                    {
                        "username": "unofficialmaitry",
                        "content": "You are a leetcode saver"
                    },
                    {
                        "username": "Arun_A",
                        "content": "Thank you :) \\n\\n"
                    },
                    {
                        "username": "anandsyadav257",
                        "content": "Although these should be properly explained in the problem statement itself but they are not. But your examples are very helpful."
                    },
                    {
                        "username": "volkoff5566",
                        "content": "This is very helpful, thank you \\n"
                    },
                    {
                        "username": "connectnitesh8",
                        "content": "\"/a//b////c/d//././/..\" == > /a/b/c "
                    },
                    {
                        "username": "rus_eell",
                        "content": "[@padmavathidevi71625](/padmavathidevi71625) yeah, this should be "
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "Example 5's answer is wrong.\noutput: /home/usr/local/bin\n=>Btw thnx for Amazing Examples :p"
                    },
                    {
                        "username": "padmavathidevi71625",
                        "content": "Example 5:\\nOutput: \"/home/usr/local/bin\""
                    },
                    {
                        "username": "noobie@work",
                        "content": "Simplify the directory path (Unix like)\\nGiven an absolute path for a file (Unix-style), simplify it. Note that absolute path always begin with \\u2018/\\u2019 ( root directory ), a dot in path represent current directory and double dot represents parent directory.\\n\\nExamples:\\n\\n\"/a/./\"   --> means stay at the current directory \\'a\\'\\n\"/a/b/..\" --> means jump to the parent directory\\n              from \\'b\\' to \\'a\\'\\n\"////\"    --> consecutive multiple \\'/\\' are a  valid  \\n              path, they are equivalent to single \"/\".\\n\\nInput : /home/\\nOutput : /home\\n\\nInput : /a/./b/../../c/\\nOutput : /c\\n\\nInput : /a/..\\nOutput : /\\n\\nInput : /a/../\\nOuput : /\\n\\nInput : /../../../../../a\\nOuput : /a\\n\\nInput : /a/./b/./c/./d/\\nOuput : /a/b/c/d\\n\\nInput : /a/../.././../../.\\nOuput : /\\n\\nInput : /a//b//c//////d\\nOuput : /a/b/c/d"
                    },
                    {
                        "username": "SeaShanty",
                        "content": "[@sohamkulkarni](/sohamkulkarni) i think its something like, you go to a, then stay there(/./) go to directory b, then go back one levl(so now u r in a) then again go back one level(u r now at the root dir) and now u go to c...so thefinal directory where u at is c. Let me know if im wrong coz im still a learner"
                    },
                    {
                        "username": "Pega_One",
                        "content": "Thanks all of you."
                    },
                    {
                        "username": "mustafiz7",
                        "content": "[@sohamkulkarni](/sohamkulkarni) \\n/a/./ --> remain in a only (as `.` means stay in current directory)\\n/b/ --> go to b directory\\n/../ --> go to parent of current directory, current directory is b and b parent is a.\\n/../--> current directory is is a, go to parent of a i.e. root ( / ).\\n/c/ --> go to c.\\n\\n==> hence,    /c"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "/a/./b/../../c/ -> how output /c ??\\n"
                    },
                    {
                        "username": "cswartzell",
                        "content": "Thanks. I cant imagine WHY those are valid, or how this is useful, but sure. The description really needed more examples. "
                    },
                    {
                        "username": "PinkGlove",
                        "content": "legend"
                    },
                    {
                        "username": "wangchenmeng09",
                        "content": "I would have liked more examples for this question."
                    },
                    {
                        "username": "user5400vw",
                        "content": "you can experiment with custom testcases  - as long as your input is well-formed you will see the expected output"
                    },
                    {
                        "username": "xuzhenqi1993",
                        "content": "My code failed at the test case \"/abc/...\".\\n\\nThe expected output is \"/abc/...\".\\n\\nBut I think it may be \"/...\".\\n\\nCould anybody who have passed this one tell me why it is \"/abc/...\"?"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "THey have clearly mentioned that \\'...\\' represents a directory."
                    },
                    {
                        "username": "rajatul26",
                        "content": "[@Ritesh_Jha](/Ritesh_Jha) Comment is dated back in 2014. By then most of us might not not have even heard of leetcode. :) "
                    },
                    {
                        "username": "Ritesh_Jha",
                        "content": "it\\'s clearly mentioned in the question that dots more than two can be treated as file/directory name. hence \"/abc/xyz\" and \"/abc/...\"  both gives same output as input."
                    },
                    {
                        "username": "jdkern11",
                        "content": "In the description it states that any time a sequence of periods occurs where the number of periods is greater than 2, that sequence is treated as its own directory."
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "                               APPROACH/PSUEDO CODE\nIf you don't want to see solution then see this approach\n1. Create a Stack of String with following condition.\n2. Iterate the loop till you doesn't reaches the end of string.\n3. If you encounter a \"/\" then ignore it.\n4. Create a temp String & Iterate the while loop till you doesn't find \"/\" and append it to temp.\n5. Now check if temp == \".\" , then ignore it.\n6. If temp == \"..\" then pop the element from the stack if it exists.\n7. If no of the above 2 matches push temp to stack as you find a valid path.\n8. Check out temp string on basis of above conditions till you doesn't find \"/\".\n9. Now add all stack elements to result as res = \"/\" + st.top() + res\n10. If res.size() is 0 then return \"/\" if no directory or file is present.\n     At last return res.\n\n `**See This Testcase for better understanding **`\n\n `input : \"/home/../foo/\"  `\n`output : \"/foo\"` \n\n`input : \"/home/test/../foo/\" `\n `output : \"/home/foo\"`\n\n`input : \"/home/...//foo/\" `\n ` output : \"/home/.../foo\"`\n\nSolution of above approach (Beginner-friendly-code)\nhttps://leetcode.com/problems/simplify-path/solutions/3406777/c-beginner-friendly-explanation-multiple-testcase-using-stack/\n"
                    },
                    {
                        "username": "piyushkr6161",
                        "content": "Thanks everyone if any doubt please comment here"
                    },
                    {
                        "username": "hackerbhai6161",
                        "content": "please give the code "
                    },
                    {
                        "username": "expertsolver241",
                        "content": "Nice explain bhaiya thanks \\n"
                    },
                    {
                        "username": "_cichipi_",
                        "content": "Note : single \".\" is useless , just ignore it \\n\\n/a/./b///c/../../d  think it as : { a , b , c , .. , .. , d} \\nsimplify it to {a , b , .. , d } \\nfurther simplify it to {a,d} \\n\\nconstruct result from it which is :  /a/d"
                    },
                    {
                        "username": "spookie886",
                        "content": "Thank you!!!"
                    },
                    {
                        "username": "ronaldo123",
                        "content": "Input:\\t\"/...\"\\nOutput:\\t\"/\"\\nExpected:\\t\"/...\"\\n\\n\\nThe \"/...\" is a legal path command ?  I test it on my mac, but it returns\\n\\n-bash: cd: /...: No such file or directory"
                    },
                    {
                        "username": "thatonemorekid",
                        "content": "you can actually create a directory with name \\'...\\' and it will be a valid path command"
                    },
                    {
                        "username": "sunnyharne008",
                        "content": "It doesn\\'t matter for solving this problem, as it is mentioned clearly that dots more than two can be treated as a directory/file name.\\n "
                    },
                    {
                        "username": "tonytontian",
                        "content": "https://www.geeksforgeeks.org/simplify-directory-path-unix-like/\\nThis artical provide more examples and better explanation."
                    },
                    {
                        "username": "ajaygonepuri",
                        "content": "Thanks Brother"
                    },
                    {
                        "username": "thorneliu",
                        "content": "My code result in / in this case, but the answer is /...\\n\\nHow could that be?!!!"
                    },
                    {
                        "username": "Umair9912",
                        "content": "[@satyam_rai15](/satyam_rai15) better late than never ? ig.\\n"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "[@gozie11](/gozie11) It\\'s a little too late to reply, isn\\'t it?"
                    },
                    {
                        "username": "gozie11",
                        "content": "It\\'s because the description says that \"...\" counts as a directory name!"
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for March, Day 14.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/simplify-path/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Using Stacks\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    }
                ]
            },
            {
                "id": 1861103,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "Split by \\'/\\'. Use a stack and ignore empty spaces and \\'.\\'; pop on double dot \\'..\\'"
                    },
                    {
                        "username": "JiahuanChen1993",
                        "content": "Hello, I met with this following problem:\\nInput:\"/\"\\nOutput:\"\\\\/\"\\nExpected:\"/\"\\nHow can I fix it? I tried some accepted code and also got errors."
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "in this question there is a testcase in which \\ninput : \"/a//b////c/d//././/..\"\\nexpected output : \"/a/b/c\"\\n\\ni think output is : \"/a/b/c/d\" .\\ndoes somebody explain why isnot this output"
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "i get it coz at the end its .. means its jump d to c thats why"
                    },
                    {
                        "username": "pokaChika",
                        "content": "a double period \\'..\\' refers to the directory up a level, Shouldn\\'t this linebe changed to \\'..\\' refers to going a level down. It makes the problem understanding unnecessarily difficult"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Going up sounds more logical. "
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Really? Is that difficult to understand? \nYour version sounds less correct to me. Going a level down suggests going deeper into the directory tree to me, not backtracking up towrds the root."
                    },
                    {
                        "username": "hosua",
                        "content": "This problem had a lot of annoying edge cases lol"
                    },
                    {
                        "username": "HanBurger",
                        "content": "Isn't \"/..\" represents the parent folder?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "yes, unless you are already at the root dir in which case it does nothing"
                    },
                    {
                        "username": "huangGmail",
                        "content": "shoudn't i outpu \" / \" instead of \"/...\" ?"
                    },
                    {
                        "username": "ayeagle",
                        "content": "Can someone explain how this test case:\\n\\n\"/a//b////c/d//././/..\"\\n\\nevaluates to: \"/a/b/c\"\\n\\nand not \"/a/b/c/d\" ???"
                    },
                    {
                        "username": "rrdlpl",
                        "content": "There is a `..` at the end "
                    },
                    {
                        "username": "tejasX",
                        "content": "Question was rather implementation based instead of Concept."
                    },
                    {
                        "username": "eduard92",
                        "content": "I god damn it solved it on my own, after 3 versions and 25% "
                    }
                ]
            },
            {
                "id": 1567840,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "Split by \\'/\\'. Use a stack and ignore empty spaces and \\'.\\'; pop on double dot \\'..\\'"
                    },
                    {
                        "username": "JiahuanChen1993",
                        "content": "Hello, I met with this following problem:\\nInput:\"/\"\\nOutput:\"\\\\/\"\\nExpected:\"/\"\\nHow can I fix it? I tried some accepted code and also got errors."
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "in this question there is a testcase in which \\ninput : \"/a//b////c/d//././/..\"\\nexpected output : \"/a/b/c\"\\n\\ni think output is : \"/a/b/c/d\" .\\ndoes somebody explain why isnot this output"
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "i get it coz at the end its .. means its jump d to c thats why"
                    },
                    {
                        "username": "pokaChika",
                        "content": "a double period \\'..\\' refers to the directory up a level, Shouldn\\'t this linebe changed to \\'..\\' refers to going a level down. It makes the problem understanding unnecessarily difficult"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Going up sounds more logical. "
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Really? Is that difficult to understand? \nYour version sounds less correct to me. Going a level down suggests going deeper into the directory tree to me, not backtracking up towrds the root."
                    },
                    {
                        "username": "hosua",
                        "content": "This problem had a lot of annoying edge cases lol"
                    },
                    {
                        "username": "HanBurger",
                        "content": "Isn't \"/..\" represents the parent folder?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "yes, unless you are already at the root dir in which case it does nothing"
                    },
                    {
                        "username": "huangGmail",
                        "content": "shoudn't i outpu \" / \" instead of \"/...\" ?"
                    },
                    {
                        "username": "ayeagle",
                        "content": "Can someone explain how this test case:\\n\\n\"/a//b////c/d//././/..\"\\n\\nevaluates to: \"/a/b/c\"\\n\\nand not \"/a/b/c/d\" ???"
                    },
                    {
                        "username": "rrdlpl",
                        "content": "There is a `..` at the end "
                    },
                    {
                        "username": "tejasX",
                        "content": "Question was rather implementation based instead of Concept."
                    },
                    {
                        "username": "eduard92",
                        "content": "I god damn it solved it on my own, after 3 versions and 25% "
                    }
                ]
            },
            {
                "id": 1861108,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "Split by \\'/\\'. Use a stack and ignore empty spaces and \\'.\\'; pop on double dot \\'..\\'"
                    },
                    {
                        "username": "JiahuanChen1993",
                        "content": "Hello, I met with this following problem:\\nInput:\"/\"\\nOutput:\"\\\\/\"\\nExpected:\"/\"\\nHow can I fix it? I tried some accepted code and also got errors."
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "in this question there is a testcase in which \\ninput : \"/a//b////c/d//././/..\"\\nexpected output : \"/a/b/c\"\\n\\ni think output is : \"/a/b/c/d\" .\\ndoes somebody explain why isnot this output"
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "i get it coz at the end its .. means its jump d to c thats why"
                    },
                    {
                        "username": "pokaChika",
                        "content": "a double period \\'..\\' refers to the directory up a level, Shouldn\\'t this linebe changed to \\'..\\' refers to going a level down. It makes the problem understanding unnecessarily difficult"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Going up sounds more logical. "
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Really? Is that difficult to understand? \nYour version sounds less correct to me. Going a level down suggests going deeper into the directory tree to me, not backtracking up towrds the root."
                    },
                    {
                        "username": "hosua",
                        "content": "This problem had a lot of annoying edge cases lol"
                    },
                    {
                        "username": "HanBurger",
                        "content": "Isn't \"/..\" represents the parent folder?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "yes, unless you are already at the root dir in which case it does nothing"
                    },
                    {
                        "username": "huangGmail",
                        "content": "shoudn't i outpu \" / \" instead of \"/...\" ?"
                    },
                    {
                        "username": "ayeagle",
                        "content": "Can someone explain how this test case:\\n\\n\"/a//b////c/d//././/..\"\\n\\nevaluates to: \"/a/b/c\"\\n\\nand not \"/a/b/c/d\" ???"
                    },
                    {
                        "username": "rrdlpl",
                        "content": "There is a `..` at the end "
                    },
                    {
                        "username": "tejasX",
                        "content": "Question was rather implementation based instead of Concept."
                    },
                    {
                        "username": "eduard92",
                        "content": "I god damn it solved it on my own, after 3 versions and 25% "
                    }
                ]
            },
            {
                "id": 1860920,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "Split by \\'/\\'. Use a stack and ignore empty spaces and \\'.\\'; pop on double dot \\'..\\'"
                    },
                    {
                        "username": "JiahuanChen1993",
                        "content": "Hello, I met with this following problem:\\nInput:\"/\"\\nOutput:\"\\\\/\"\\nExpected:\"/\"\\nHow can I fix it? I tried some accepted code and also got errors."
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "in this question there is a testcase in which \\ninput : \"/a//b////c/d//././/..\"\\nexpected output : \"/a/b/c\"\\n\\ni think output is : \"/a/b/c/d\" .\\ndoes somebody explain why isnot this output"
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "i get it coz at the end its .. means its jump d to c thats why"
                    },
                    {
                        "username": "pokaChika",
                        "content": "a double period \\'..\\' refers to the directory up a level, Shouldn\\'t this linebe changed to \\'..\\' refers to going a level down. It makes the problem understanding unnecessarily difficult"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Going up sounds more logical. "
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Really? Is that difficult to understand? \nYour version sounds less correct to me. Going a level down suggests going deeper into the directory tree to me, not backtracking up towrds the root."
                    },
                    {
                        "username": "hosua",
                        "content": "This problem had a lot of annoying edge cases lol"
                    },
                    {
                        "username": "HanBurger",
                        "content": "Isn't \"/..\" represents the parent folder?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "yes, unless you are already at the root dir in which case it does nothing"
                    },
                    {
                        "username": "huangGmail",
                        "content": "shoudn't i outpu \" / \" instead of \"/...\" ?"
                    },
                    {
                        "username": "ayeagle",
                        "content": "Can someone explain how this test case:\\n\\n\"/a//b////c/d//././/..\"\\n\\nevaluates to: \"/a/b/c\"\\n\\nand not \"/a/b/c/d\" ???"
                    },
                    {
                        "username": "rrdlpl",
                        "content": "There is a `..` at the end "
                    },
                    {
                        "username": "tejasX",
                        "content": "Question was rather implementation based instead of Concept."
                    },
                    {
                        "username": "eduard92",
                        "content": "I god damn it solved it on my own, after 3 versions and 25% "
                    }
                ]
            },
            {
                "id": 1860884,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "Split by \\'/\\'. Use a stack and ignore empty spaces and \\'.\\'; pop on double dot \\'..\\'"
                    },
                    {
                        "username": "JiahuanChen1993",
                        "content": "Hello, I met with this following problem:\\nInput:\"/\"\\nOutput:\"\\\\/\"\\nExpected:\"/\"\\nHow can I fix it? I tried some accepted code and also got errors."
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "in this question there is a testcase in which \\ninput : \"/a//b////c/d//././/..\"\\nexpected output : \"/a/b/c\"\\n\\ni think output is : \"/a/b/c/d\" .\\ndoes somebody explain why isnot this output"
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "i get it coz at the end its .. means its jump d to c thats why"
                    },
                    {
                        "username": "pokaChika",
                        "content": "a double period \\'..\\' refers to the directory up a level, Shouldn\\'t this linebe changed to \\'..\\' refers to going a level down. It makes the problem understanding unnecessarily difficult"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Going up sounds more logical. "
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Really? Is that difficult to understand? \nYour version sounds less correct to me. Going a level down suggests going deeper into the directory tree to me, not backtracking up towrds the root."
                    },
                    {
                        "username": "hosua",
                        "content": "This problem had a lot of annoying edge cases lol"
                    },
                    {
                        "username": "HanBurger",
                        "content": "Isn't \"/..\" represents the parent folder?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "yes, unless you are already at the root dir in which case it does nothing"
                    },
                    {
                        "username": "huangGmail",
                        "content": "shoudn't i outpu \" / \" instead of \"/...\" ?"
                    },
                    {
                        "username": "ayeagle",
                        "content": "Can someone explain how this test case:\\n\\n\"/a//b////c/d//././/..\"\\n\\nevaluates to: \"/a/b/c\"\\n\\nand not \"/a/b/c/d\" ???"
                    },
                    {
                        "username": "rrdlpl",
                        "content": "There is a `..` at the end "
                    },
                    {
                        "username": "tejasX",
                        "content": "Question was rather implementation based instead of Concept."
                    },
                    {
                        "username": "eduard92",
                        "content": "I god damn it solved it on my own, after 3 versions and 25% "
                    }
                ]
            },
            {
                "id": 1568892,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "Split by \\'/\\'. Use a stack and ignore empty spaces and \\'.\\'; pop on double dot \\'..\\'"
                    },
                    {
                        "username": "JiahuanChen1993",
                        "content": "Hello, I met with this following problem:\\nInput:\"/\"\\nOutput:\"\\\\/\"\\nExpected:\"/\"\\nHow can I fix it? I tried some accepted code and also got errors."
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "in this question there is a testcase in which \\ninput : \"/a//b////c/d//././/..\"\\nexpected output : \"/a/b/c\"\\n\\ni think output is : \"/a/b/c/d\" .\\ndoes somebody explain why isnot this output"
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "i get it coz at the end its .. means its jump d to c thats why"
                    },
                    {
                        "username": "pokaChika",
                        "content": "a double period \\'..\\' refers to the directory up a level, Shouldn\\'t this linebe changed to \\'..\\' refers to going a level down. It makes the problem understanding unnecessarily difficult"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Going up sounds more logical. "
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Really? Is that difficult to understand? \nYour version sounds less correct to me. Going a level down suggests going deeper into the directory tree to me, not backtracking up towrds the root."
                    },
                    {
                        "username": "hosua",
                        "content": "This problem had a lot of annoying edge cases lol"
                    },
                    {
                        "username": "HanBurger",
                        "content": "Isn't \"/..\" represents the parent folder?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "yes, unless you are already at the root dir in which case it does nothing"
                    },
                    {
                        "username": "huangGmail",
                        "content": "shoudn't i outpu \" / \" instead of \"/...\" ?"
                    },
                    {
                        "username": "ayeagle",
                        "content": "Can someone explain how this test case:\\n\\n\"/a//b////c/d//././/..\"\\n\\nevaluates to: \"/a/b/c\"\\n\\nand not \"/a/b/c/d\" ???"
                    },
                    {
                        "username": "rrdlpl",
                        "content": "There is a `..` at the end "
                    },
                    {
                        "username": "tejasX",
                        "content": "Question was rather implementation based instead of Concept."
                    },
                    {
                        "username": "eduard92",
                        "content": "I god damn it solved it on my own, after 3 versions and 25% "
                    }
                ]
            },
            {
                "id": 1567186,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "Split by \\'/\\'. Use a stack and ignore empty spaces and \\'.\\'; pop on double dot \\'..\\'"
                    },
                    {
                        "username": "JiahuanChen1993",
                        "content": "Hello, I met with this following problem:\\nInput:\"/\"\\nOutput:\"\\\\/\"\\nExpected:\"/\"\\nHow can I fix it? I tried some accepted code and also got errors."
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "in this question there is a testcase in which \\ninput : \"/a//b////c/d//././/..\"\\nexpected output : \"/a/b/c\"\\n\\ni think output is : \"/a/b/c/d\" .\\ndoes somebody explain why isnot this output"
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "i get it coz at the end its .. means its jump d to c thats why"
                    },
                    {
                        "username": "pokaChika",
                        "content": "a double period \\'..\\' refers to the directory up a level, Shouldn\\'t this linebe changed to \\'..\\' refers to going a level down. It makes the problem understanding unnecessarily difficult"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Going up sounds more logical. "
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Really? Is that difficult to understand? \nYour version sounds less correct to me. Going a level down suggests going deeper into the directory tree to me, not backtracking up towrds the root."
                    },
                    {
                        "username": "hosua",
                        "content": "This problem had a lot of annoying edge cases lol"
                    },
                    {
                        "username": "HanBurger",
                        "content": "Isn't \"/..\" represents the parent folder?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "yes, unless you are already at the root dir in which case it does nothing"
                    },
                    {
                        "username": "huangGmail",
                        "content": "shoudn't i outpu \" / \" instead of \"/...\" ?"
                    },
                    {
                        "username": "ayeagle",
                        "content": "Can someone explain how this test case:\\n\\n\"/a//b////c/d//././/..\"\\n\\nevaluates to: \"/a/b/c\"\\n\\nand not \"/a/b/c/d\" ???"
                    },
                    {
                        "username": "rrdlpl",
                        "content": "There is a `..` at the end "
                    },
                    {
                        "username": "tejasX",
                        "content": "Question was rather implementation based instead of Concept."
                    },
                    {
                        "username": "eduard92",
                        "content": "I god damn it solved it on my own, after 3 versions and 25% "
                    }
                ]
            },
            {
                "id": 1993508,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "Split by \\'/\\'. Use a stack and ignore empty spaces and \\'.\\'; pop on double dot \\'..\\'"
                    },
                    {
                        "username": "JiahuanChen1993",
                        "content": "Hello, I met with this following problem:\\nInput:\"/\"\\nOutput:\"\\\\/\"\\nExpected:\"/\"\\nHow can I fix it? I tried some accepted code and also got errors."
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "in this question there is a testcase in which \\ninput : \"/a//b////c/d//././/..\"\\nexpected output : \"/a/b/c\"\\n\\ni think output is : \"/a/b/c/d\" .\\ndoes somebody explain why isnot this output"
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "i get it coz at the end its .. means its jump d to c thats why"
                    },
                    {
                        "username": "pokaChika",
                        "content": "a double period \\'..\\' refers to the directory up a level, Shouldn\\'t this linebe changed to \\'..\\' refers to going a level down. It makes the problem understanding unnecessarily difficult"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Going up sounds more logical. "
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Really? Is that difficult to understand? \nYour version sounds less correct to me. Going a level down suggests going deeper into the directory tree to me, not backtracking up towrds the root."
                    },
                    {
                        "username": "hosua",
                        "content": "This problem had a lot of annoying edge cases lol"
                    },
                    {
                        "username": "HanBurger",
                        "content": "Isn't \"/..\" represents the parent folder?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "yes, unless you are already at the root dir in which case it does nothing"
                    },
                    {
                        "username": "huangGmail",
                        "content": "shoudn't i outpu \" / \" instead of \"/...\" ?"
                    },
                    {
                        "username": "ayeagle",
                        "content": "Can someone explain how this test case:\\n\\n\"/a//b////c/d//././/..\"\\n\\nevaluates to: \"/a/b/c\"\\n\\nand not \"/a/b/c/d\" ???"
                    },
                    {
                        "username": "rrdlpl",
                        "content": "There is a `..` at the end "
                    },
                    {
                        "username": "tejasX",
                        "content": "Question was rather implementation based instead of Concept."
                    },
                    {
                        "username": "eduard92",
                        "content": "I god damn it solved it on my own, after 3 versions and 25% "
                    }
                ]
            },
            {
                "id": 1861426,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "Split by \\'/\\'. Use a stack and ignore empty spaces and \\'.\\'; pop on double dot \\'..\\'"
                    },
                    {
                        "username": "JiahuanChen1993",
                        "content": "Hello, I met with this following problem:\\nInput:\"/\"\\nOutput:\"\\\\/\"\\nExpected:\"/\"\\nHow can I fix it? I tried some accepted code and also got errors."
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "in this question there is a testcase in which \\ninput : \"/a//b////c/d//././/..\"\\nexpected output : \"/a/b/c\"\\n\\ni think output is : \"/a/b/c/d\" .\\ndoes somebody explain why isnot this output"
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "i get it coz at the end its .. means its jump d to c thats why"
                    },
                    {
                        "username": "pokaChika",
                        "content": "a double period \\'..\\' refers to the directory up a level, Shouldn\\'t this linebe changed to \\'..\\' refers to going a level down. It makes the problem understanding unnecessarily difficult"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Going up sounds more logical. "
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Really? Is that difficult to understand? \nYour version sounds less correct to me. Going a level down suggests going deeper into the directory tree to me, not backtracking up towrds the root."
                    },
                    {
                        "username": "hosua",
                        "content": "This problem had a lot of annoying edge cases lol"
                    },
                    {
                        "username": "HanBurger",
                        "content": "Isn't \"/..\" represents the parent folder?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "yes, unless you are already at the root dir in which case it does nothing"
                    },
                    {
                        "username": "huangGmail",
                        "content": "shoudn't i outpu \" / \" instead of \"/...\" ?"
                    },
                    {
                        "username": "ayeagle",
                        "content": "Can someone explain how this test case:\\n\\n\"/a//b////c/d//././/..\"\\n\\nevaluates to: \"/a/b/c\"\\n\\nand not \"/a/b/c/d\" ???"
                    },
                    {
                        "username": "rrdlpl",
                        "content": "There is a `..` at the end "
                    },
                    {
                        "username": "tejasX",
                        "content": "Question was rather implementation based instead of Concept."
                    },
                    {
                        "username": "eduard92",
                        "content": "I god damn it solved it on my own, after 3 versions and 25% "
                    }
                ]
            },
            {
                "id": 1861406,
                "content": [
                    {
                        "username": "rrdlpl",
                        "content": "Split by \\'/\\'. Use a stack and ignore empty spaces and \\'.\\'; pop on double dot \\'..\\'"
                    },
                    {
                        "username": "JiahuanChen1993",
                        "content": "Hello, I met with this following problem:\\nInput:\"/\"\\nOutput:\"\\\\/\"\\nExpected:\"/\"\\nHow can I fix it? I tried some accepted code and also got errors."
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "in this question there is a testcase in which \\ninput : \"/a//b////c/d//././/..\"\\nexpected output : \"/a/b/c\"\\n\\ni think output is : \"/a/b/c/d\" .\\ndoes somebody explain why isnot this output"
                    },
                    {
                        "username": "gouravkadyan555",
                        "content": "i get it coz at the end its .. means its jump d to c thats why"
                    },
                    {
                        "username": "pokaChika",
                        "content": "a double period \\'..\\' refers to the directory up a level, Shouldn\\'t this linebe changed to \\'..\\' refers to going a level down. It makes the problem understanding unnecessarily difficult"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Going up sounds more logical. "
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "Really? Is that difficult to understand? \nYour version sounds less correct to me. Going a level down suggests going deeper into the directory tree to me, not backtracking up towrds the root."
                    },
                    {
                        "username": "hosua",
                        "content": "This problem had a lot of annoying edge cases lol"
                    },
                    {
                        "username": "HanBurger",
                        "content": "Isn't \"/..\" represents the parent folder?"
                    },
                    {
                        "username": "user5400vw",
                        "content": "yes, unless you are already at the root dir in which case it does nothing"
                    },
                    {
                        "username": "huangGmail",
                        "content": "shoudn't i outpu \" / \" instead of \"/...\" ?"
                    },
                    {
                        "username": "ayeagle",
                        "content": "Can someone explain how this test case:\\n\\n\"/a//b////c/d//././/..\"\\n\\nevaluates to: \"/a/b/c\"\\n\\nand not \"/a/b/c/d\" ???"
                    },
                    {
                        "username": "rrdlpl",
                        "content": "There is a `..` at the end "
                    },
                    {
                        "username": "tejasX",
                        "content": "Question was rather implementation based instead of Concept."
                    },
                    {
                        "username": "eduard92",
                        "content": "I god damn it solved it on my own, after 3 versions and 25% "
                    }
                ]
            },
            {
                "id": 1861071,
                "content": [
                    {
                        "username": "user5400vw",
                        "content": "if your PL has built in split method the problem becomes a matter of handling 4 cases.\\nsuprised at the acceptance rate tbh"
                    },
                    {
                        "username": "veeyikpong",
                        "content": "Process the command from end to start\\n\\nYou can either\\nUse\\n1. `split(\"/\")\\' the commands into a list, reverse the list and process the command one by one \\n2. Loop the `path` from end to start, appending the current command text into a temp variable. Whenever we meet a slash (/), process the current command text and clear it.\\n3. Have a `back` variable to keep track of `..` operations. When we meet a normal file path, ignore it if `back > 0`, and minus it.\\n\\nSome important checks are\\n1. When command is `..`, increase `back` by 1\\n2. When command is empty (many consecutive slashes) or \".\", ignore the command\\n3. When command is neither empty, `.` nor `..`, it is a file path. If `back` is 0 , add the command into our result string, else `back--`"
                    },
                    {
                        "username": "taabish_khan22",
                        "content": " \"/a//b////c/d//././/..\"\\nexpected output is \\'/a/b/c\\', why? why not \\'/a/b/c/d\\'?"
                    },
                    {
                        "username": "kylecrowley",
                        "content": "I got caught by this test case as well. `..` (*without* a trailing `/`) is treated the same as `../` (read: go up on level/directory). The \"big picture\" is test cases don\\'t always end in a `/`."
                    },
                    {
                        "username": "rosemelon",
                        "content": "Hi, I just had a simple Unix question about the one period. \\n\\nFrom my understanding at looking at other people\\'s code, we skip the period if we ever see it. \\nIs this because if we have \"/a/b/.\" is equivalent to \"/a/b\"? If so, what does anyone ever use the period for if we don\\'t even include it in our shortest path?"
                    },
                    {
                        "username": "purushattom1999",
                        "content": "Lots of Idiots Test cases is here. Frustrating problem ."
                    },
                    {
                        "username": "fkie4",
                        "content": "this should be categorised as easy"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got it on an interview (c)"
                    },
                    {
                        "username": "i_0x6c1_i",
                        "content": "okay first of all, author of this problem has not given sufficient examples. I am getting issues to fully understand problem."
                    },
                    {
                        "username": "huggie",
                        "content": "If using C, is there a C stack library already included by leetcode? Or do I have to resort to uthash?"
                    },
                    {
                        "username": "kikopy89",
                        "content": "What?\\npath =\\n\"/a/./b/../../c/\"\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\""
                    },
                    {
                        "username": "HappyLoganLi",
                        "content": "rule 3: The path does not end with a trailing \\'/\\'.\\nAnd check the example 2 pls"
                    },
                    {
                        "username": "mahesh105",
                        "content": "if the size of string is 1 then it can,else no"
                    }
                ]
            },
            {
                "id": 1860928,
                "content": [
                    {
                        "username": "user5400vw",
                        "content": "if your PL has built in split method the problem becomes a matter of handling 4 cases.\\nsuprised at the acceptance rate tbh"
                    },
                    {
                        "username": "veeyikpong",
                        "content": "Process the command from end to start\\n\\nYou can either\\nUse\\n1. `split(\"/\")\\' the commands into a list, reverse the list and process the command one by one \\n2. Loop the `path` from end to start, appending the current command text into a temp variable. Whenever we meet a slash (/), process the current command text and clear it.\\n3. Have a `back` variable to keep track of `..` operations. When we meet a normal file path, ignore it if `back > 0`, and minus it.\\n\\nSome important checks are\\n1. When command is `..`, increase `back` by 1\\n2. When command is empty (many consecutive slashes) or \".\", ignore the command\\n3. When command is neither empty, `.` nor `..`, it is a file path. If `back` is 0 , add the command into our result string, else `back--`"
                    },
                    {
                        "username": "taabish_khan22",
                        "content": " \"/a//b////c/d//././/..\"\\nexpected output is \\'/a/b/c\\', why? why not \\'/a/b/c/d\\'?"
                    },
                    {
                        "username": "kylecrowley",
                        "content": "I got caught by this test case as well. `..` (*without* a trailing `/`) is treated the same as `../` (read: go up on level/directory). The \"big picture\" is test cases don\\'t always end in a `/`."
                    },
                    {
                        "username": "rosemelon",
                        "content": "Hi, I just had a simple Unix question about the one period. \\n\\nFrom my understanding at looking at other people\\'s code, we skip the period if we ever see it. \\nIs this because if we have \"/a/b/.\" is equivalent to \"/a/b\"? If so, what does anyone ever use the period for if we don\\'t even include it in our shortest path?"
                    },
                    {
                        "username": "purushattom1999",
                        "content": "Lots of Idiots Test cases is here. Frustrating problem ."
                    },
                    {
                        "username": "fkie4",
                        "content": "this should be categorised as easy"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got it on an interview (c)"
                    },
                    {
                        "username": "i_0x6c1_i",
                        "content": "okay first of all, author of this problem has not given sufficient examples. I am getting issues to fully understand problem."
                    },
                    {
                        "username": "huggie",
                        "content": "If using C, is there a C stack library already included by leetcode? Or do I have to resort to uthash?"
                    },
                    {
                        "username": "kikopy89",
                        "content": "What?\\npath =\\n\"/a/./b/../../c/\"\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\""
                    },
                    {
                        "username": "HappyLoganLi",
                        "content": "rule 3: The path does not end with a trailing \\'/\\'.\\nAnd check the example 2 pls"
                    },
                    {
                        "username": "mahesh105",
                        "content": "if the size of string is 1 then it can,else no"
                    }
                ]
            },
            {
                "id": 1672377,
                "content": [
                    {
                        "username": "user5400vw",
                        "content": "if your PL has built in split method the problem becomes a matter of handling 4 cases.\\nsuprised at the acceptance rate tbh"
                    },
                    {
                        "username": "veeyikpong",
                        "content": "Process the command from end to start\\n\\nYou can either\\nUse\\n1. `split(\"/\")\\' the commands into a list, reverse the list and process the command one by one \\n2. Loop the `path` from end to start, appending the current command text into a temp variable. Whenever we meet a slash (/), process the current command text and clear it.\\n3. Have a `back` variable to keep track of `..` operations. When we meet a normal file path, ignore it if `back > 0`, and minus it.\\n\\nSome important checks are\\n1. When command is `..`, increase `back` by 1\\n2. When command is empty (many consecutive slashes) or \".\", ignore the command\\n3. When command is neither empty, `.` nor `..`, it is a file path. If `back` is 0 , add the command into our result string, else `back--`"
                    },
                    {
                        "username": "taabish_khan22",
                        "content": " \"/a//b////c/d//././/..\"\\nexpected output is \\'/a/b/c\\', why? why not \\'/a/b/c/d\\'?"
                    },
                    {
                        "username": "kylecrowley",
                        "content": "I got caught by this test case as well. `..` (*without* a trailing `/`) is treated the same as `../` (read: go up on level/directory). The \"big picture\" is test cases don\\'t always end in a `/`."
                    },
                    {
                        "username": "rosemelon",
                        "content": "Hi, I just had a simple Unix question about the one period. \\n\\nFrom my understanding at looking at other people\\'s code, we skip the period if we ever see it. \\nIs this because if we have \"/a/b/.\" is equivalent to \"/a/b\"? If so, what does anyone ever use the period for if we don\\'t even include it in our shortest path?"
                    },
                    {
                        "username": "purushattom1999",
                        "content": "Lots of Idiots Test cases is here. Frustrating problem ."
                    },
                    {
                        "username": "fkie4",
                        "content": "this should be categorised as easy"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got it on an interview (c)"
                    },
                    {
                        "username": "i_0x6c1_i",
                        "content": "okay first of all, author of this problem has not given sufficient examples. I am getting issues to fully understand problem."
                    },
                    {
                        "username": "huggie",
                        "content": "If using C, is there a C stack library already included by leetcode? Or do I have to resort to uthash?"
                    },
                    {
                        "username": "kikopy89",
                        "content": "What?\\npath =\\n\"/a/./b/../../c/\"\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\""
                    },
                    {
                        "username": "HappyLoganLi",
                        "content": "rule 3: The path does not end with a trailing \\'/\\'.\\nAnd check the example 2 pls"
                    },
                    {
                        "username": "mahesh105",
                        "content": "if the size of string is 1 then it can,else no"
                    }
                ]
            },
            {
                "id": 1572767,
                "content": [
                    {
                        "username": "user5400vw",
                        "content": "if your PL has built in split method the problem becomes a matter of handling 4 cases.\\nsuprised at the acceptance rate tbh"
                    },
                    {
                        "username": "veeyikpong",
                        "content": "Process the command from end to start\\n\\nYou can either\\nUse\\n1. `split(\"/\")\\' the commands into a list, reverse the list and process the command one by one \\n2. Loop the `path` from end to start, appending the current command text into a temp variable. Whenever we meet a slash (/), process the current command text and clear it.\\n3. Have a `back` variable to keep track of `..` operations. When we meet a normal file path, ignore it if `back > 0`, and minus it.\\n\\nSome important checks are\\n1. When command is `..`, increase `back` by 1\\n2. When command is empty (many consecutive slashes) or \".\", ignore the command\\n3. When command is neither empty, `.` nor `..`, it is a file path. If `back` is 0 , add the command into our result string, else `back--`"
                    },
                    {
                        "username": "taabish_khan22",
                        "content": " \"/a//b////c/d//././/..\"\\nexpected output is \\'/a/b/c\\', why? why not \\'/a/b/c/d\\'?"
                    },
                    {
                        "username": "kylecrowley",
                        "content": "I got caught by this test case as well. `..` (*without* a trailing `/`) is treated the same as `../` (read: go up on level/directory). The \"big picture\" is test cases don\\'t always end in a `/`."
                    },
                    {
                        "username": "rosemelon",
                        "content": "Hi, I just had a simple Unix question about the one period. \\n\\nFrom my understanding at looking at other people\\'s code, we skip the period if we ever see it. \\nIs this because if we have \"/a/b/.\" is equivalent to \"/a/b\"? If so, what does anyone ever use the period for if we don\\'t even include it in our shortest path?"
                    },
                    {
                        "username": "purushattom1999",
                        "content": "Lots of Idiots Test cases is here. Frustrating problem ."
                    },
                    {
                        "username": "fkie4",
                        "content": "this should be categorised as easy"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got it on an interview (c)"
                    },
                    {
                        "username": "i_0x6c1_i",
                        "content": "okay first of all, author of this problem has not given sufficient examples. I am getting issues to fully understand problem."
                    },
                    {
                        "username": "huggie",
                        "content": "If using C, is there a C stack library already included by leetcode? Or do I have to resort to uthash?"
                    },
                    {
                        "username": "kikopy89",
                        "content": "What?\\npath =\\n\"/a/./b/../../c/\"\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\""
                    },
                    {
                        "username": "HappyLoganLi",
                        "content": "rule 3: The path does not end with a trailing \\'/\\'.\\nAnd check the example 2 pls"
                    },
                    {
                        "username": "mahesh105",
                        "content": "if the size of string is 1 then it can,else no"
                    }
                ]
            },
            {
                "id": 2059103,
                "content": [
                    {
                        "username": "user5400vw",
                        "content": "if your PL has built in split method the problem becomes a matter of handling 4 cases.\\nsuprised at the acceptance rate tbh"
                    },
                    {
                        "username": "veeyikpong",
                        "content": "Process the command from end to start\\n\\nYou can either\\nUse\\n1. `split(\"/\")\\' the commands into a list, reverse the list and process the command one by one \\n2. Loop the `path` from end to start, appending the current command text into a temp variable. Whenever we meet a slash (/), process the current command text and clear it.\\n3. Have a `back` variable to keep track of `..` operations. When we meet a normal file path, ignore it if `back > 0`, and minus it.\\n\\nSome important checks are\\n1. When command is `..`, increase `back` by 1\\n2. When command is empty (many consecutive slashes) or \".\", ignore the command\\n3. When command is neither empty, `.` nor `..`, it is a file path. If `back` is 0 , add the command into our result string, else `back--`"
                    },
                    {
                        "username": "taabish_khan22",
                        "content": " \"/a//b////c/d//././/..\"\\nexpected output is \\'/a/b/c\\', why? why not \\'/a/b/c/d\\'?"
                    },
                    {
                        "username": "kylecrowley",
                        "content": "I got caught by this test case as well. `..` (*without* a trailing `/`) is treated the same as `../` (read: go up on level/directory). The \"big picture\" is test cases don\\'t always end in a `/`."
                    },
                    {
                        "username": "rosemelon",
                        "content": "Hi, I just had a simple Unix question about the one period. \\n\\nFrom my understanding at looking at other people\\'s code, we skip the period if we ever see it. \\nIs this because if we have \"/a/b/.\" is equivalent to \"/a/b\"? If so, what does anyone ever use the period for if we don\\'t even include it in our shortest path?"
                    },
                    {
                        "username": "purushattom1999",
                        "content": "Lots of Idiots Test cases is here. Frustrating problem ."
                    },
                    {
                        "username": "fkie4",
                        "content": "this should be categorised as easy"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got it on an interview (c)"
                    },
                    {
                        "username": "i_0x6c1_i",
                        "content": "okay first of all, author of this problem has not given sufficient examples. I am getting issues to fully understand problem."
                    },
                    {
                        "username": "huggie",
                        "content": "If using C, is there a C stack library already included by leetcode? Or do I have to resort to uthash?"
                    },
                    {
                        "username": "kikopy89",
                        "content": "What?\\npath =\\n\"/a/./b/../../c/\"\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\""
                    },
                    {
                        "username": "HappyLoganLi",
                        "content": "rule 3: The path does not end with a trailing \\'/\\'.\\nAnd check the example 2 pls"
                    },
                    {
                        "username": "mahesh105",
                        "content": "if the size of string is 1 then it can,else no"
                    }
                ]
            },
            {
                "id": 2033835,
                "content": [
                    {
                        "username": "user5400vw",
                        "content": "if your PL has built in split method the problem becomes a matter of handling 4 cases.\\nsuprised at the acceptance rate tbh"
                    },
                    {
                        "username": "veeyikpong",
                        "content": "Process the command from end to start\\n\\nYou can either\\nUse\\n1. `split(\"/\")\\' the commands into a list, reverse the list and process the command one by one \\n2. Loop the `path` from end to start, appending the current command text into a temp variable. Whenever we meet a slash (/), process the current command text and clear it.\\n3. Have a `back` variable to keep track of `..` operations. When we meet a normal file path, ignore it if `back > 0`, and minus it.\\n\\nSome important checks are\\n1. When command is `..`, increase `back` by 1\\n2. When command is empty (many consecutive slashes) or \".\", ignore the command\\n3. When command is neither empty, `.` nor `..`, it is a file path. If `back` is 0 , add the command into our result string, else `back--`"
                    },
                    {
                        "username": "taabish_khan22",
                        "content": " \"/a//b////c/d//././/..\"\\nexpected output is \\'/a/b/c\\', why? why not \\'/a/b/c/d\\'?"
                    },
                    {
                        "username": "kylecrowley",
                        "content": "I got caught by this test case as well. `..` (*without* a trailing `/`) is treated the same as `../` (read: go up on level/directory). The \"big picture\" is test cases don\\'t always end in a `/`."
                    },
                    {
                        "username": "rosemelon",
                        "content": "Hi, I just had a simple Unix question about the one period. \\n\\nFrom my understanding at looking at other people\\'s code, we skip the period if we ever see it. \\nIs this because if we have \"/a/b/.\" is equivalent to \"/a/b\"? If so, what does anyone ever use the period for if we don\\'t even include it in our shortest path?"
                    },
                    {
                        "username": "purushattom1999",
                        "content": "Lots of Idiots Test cases is here. Frustrating problem ."
                    },
                    {
                        "username": "fkie4",
                        "content": "this should be categorised as easy"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got it on an interview (c)"
                    },
                    {
                        "username": "i_0x6c1_i",
                        "content": "okay first of all, author of this problem has not given sufficient examples. I am getting issues to fully understand problem."
                    },
                    {
                        "username": "huggie",
                        "content": "If using C, is there a C stack library already included by leetcode? Or do I have to resort to uthash?"
                    },
                    {
                        "username": "kikopy89",
                        "content": "What?\\npath =\\n\"/a/./b/../../c/\"\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\""
                    },
                    {
                        "username": "HappyLoganLi",
                        "content": "rule 3: The path does not end with a trailing \\'/\\'.\\nAnd check the example 2 pls"
                    },
                    {
                        "username": "mahesh105",
                        "content": "if the size of string is 1 then it can,else no"
                    }
                ]
            },
            {
                "id": 2018566,
                "content": [
                    {
                        "username": "user5400vw",
                        "content": "if your PL has built in split method the problem becomes a matter of handling 4 cases.\\nsuprised at the acceptance rate tbh"
                    },
                    {
                        "username": "veeyikpong",
                        "content": "Process the command from end to start\\n\\nYou can either\\nUse\\n1. `split(\"/\")\\' the commands into a list, reverse the list and process the command one by one \\n2. Loop the `path` from end to start, appending the current command text into a temp variable. Whenever we meet a slash (/), process the current command text and clear it.\\n3. Have a `back` variable to keep track of `..` operations. When we meet a normal file path, ignore it if `back > 0`, and minus it.\\n\\nSome important checks are\\n1. When command is `..`, increase `back` by 1\\n2. When command is empty (many consecutive slashes) or \".\", ignore the command\\n3. When command is neither empty, `.` nor `..`, it is a file path. If `back` is 0 , add the command into our result string, else `back--`"
                    },
                    {
                        "username": "taabish_khan22",
                        "content": " \"/a//b////c/d//././/..\"\\nexpected output is \\'/a/b/c\\', why? why not \\'/a/b/c/d\\'?"
                    },
                    {
                        "username": "kylecrowley",
                        "content": "I got caught by this test case as well. `..` (*without* a trailing `/`) is treated the same as `../` (read: go up on level/directory). The \"big picture\" is test cases don\\'t always end in a `/`."
                    },
                    {
                        "username": "rosemelon",
                        "content": "Hi, I just had a simple Unix question about the one period. \\n\\nFrom my understanding at looking at other people\\'s code, we skip the period if we ever see it. \\nIs this because if we have \"/a/b/.\" is equivalent to \"/a/b\"? If so, what does anyone ever use the period for if we don\\'t even include it in our shortest path?"
                    },
                    {
                        "username": "purushattom1999",
                        "content": "Lots of Idiots Test cases is here. Frustrating problem ."
                    },
                    {
                        "username": "fkie4",
                        "content": "this should be categorised as easy"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got it on an interview (c)"
                    },
                    {
                        "username": "i_0x6c1_i",
                        "content": "okay first of all, author of this problem has not given sufficient examples. I am getting issues to fully understand problem."
                    },
                    {
                        "username": "huggie",
                        "content": "If using C, is there a C stack library already included by leetcode? Or do I have to resort to uthash?"
                    },
                    {
                        "username": "kikopy89",
                        "content": "What?\\npath =\\n\"/a/./b/../../c/\"\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\""
                    },
                    {
                        "username": "HappyLoganLi",
                        "content": "rule 3: The path does not end with a trailing \\'/\\'.\\nAnd check the example 2 pls"
                    },
                    {
                        "username": "mahesh105",
                        "content": "if the size of string is 1 then it can,else no"
                    }
                ]
            },
            {
                "id": 2007982,
                "content": [
                    {
                        "username": "user5400vw",
                        "content": "if your PL has built in split method the problem becomes a matter of handling 4 cases.\\nsuprised at the acceptance rate tbh"
                    },
                    {
                        "username": "veeyikpong",
                        "content": "Process the command from end to start\\n\\nYou can either\\nUse\\n1. `split(\"/\")\\' the commands into a list, reverse the list and process the command one by one \\n2. Loop the `path` from end to start, appending the current command text into a temp variable. Whenever we meet a slash (/), process the current command text and clear it.\\n3. Have a `back` variable to keep track of `..` operations. When we meet a normal file path, ignore it if `back > 0`, and minus it.\\n\\nSome important checks are\\n1. When command is `..`, increase `back` by 1\\n2. When command is empty (many consecutive slashes) or \".\", ignore the command\\n3. When command is neither empty, `.` nor `..`, it is a file path. If `back` is 0 , add the command into our result string, else `back--`"
                    },
                    {
                        "username": "taabish_khan22",
                        "content": " \"/a//b////c/d//././/..\"\\nexpected output is \\'/a/b/c\\', why? why not \\'/a/b/c/d\\'?"
                    },
                    {
                        "username": "kylecrowley",
                        "content": "I got caught by this test case as well. `..` (*without* a trailing `/`) is treated the same as `../` (read: go up on level/directory). The \"big picture\" is test cases don\\'t always end in a `/`."
                    },
                    {
                        "username": "rosemelon",
                        "content": "Hi, I just had a simple Unix question about the one period. \\n\\nFrom my understanding at looking at other people\\'s code, we skip the period if we ever see it. \\nIs this because if we have \"/a/b/.\" is equivalent to \"/a/b\"? If so, what does anyone ever use the period for if we don\\'t even include it in our shortest path?"
                    },
                    {
                        "username": "purushattom1999",
                        "content": "Lots of Idiots Test cases is here. Frustrating problem ."
                    },
                    {
                        "username": "fkie4",
                        "content": "this should be categorised as easy"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got it on an interview (c)"
                    },
                    {
                        "username": "i_0x6c1_i",
                        "content": "okay first of all, author of this problem has not given sufficient examples. I am getting issues to fully understand problem."
                    },
                    {
                        "username": "huggie",
                        "content": "If using C, is there a C stack library already included by leetcode? Or do I have to resort to uthash?"
                    },
                    {
                        "username": "kikopy89",
                        "content": "What?\\npath =\\n\"/a/./b/../../c/\"\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\""
                    },
                    {
                        "username": "HappyLoganLi",
                        "content": "rule 3: The path does not end with a trailing \\'/\\'.\\nAnd check the example 2 pls"
                    },
                    {
                        "username": "mahesh105",
                        "content": "if the size of string is 1 then it can,else no"
                    }
                ]
            },
            {
                "id": 2002807,
                "content": [
                    {
                        "username": "user5400vw",
                        "content": "if your PL has built in split method the problem becomes a matter of handling 4 cases.\\nsuprised at the acceptance rate tbh"
                    },
                    {
                        "username": "veeyikpong",
                        "content": "Process the command from end to start\\n\\nYou can either\\nUse\\n1. `split(\"/\")\\' the commands into a list, reverse the list and process the command one by one \\n2. Loop the `path` from end to start, appending the current command text into a temp variable. Whenever we meet a slash (/), process the current command text and clear it.\\n3. Have a `back` variable to keep track of `..` operations. When we meet a normal file path, ignore it if `back > 0`, and minus it.\\n\\nSome important checks are\\n1. When command is `..`, increase `back` by 1\\n2. When command is empty (many consecutive slashes) or \".\", ignore the command\\n3. When command is neither empty, `.` nor `..`, it is a file path. If `back` is 0 , add the command into our result string, else `back--`"
                    },
                    {
                        "username": "taabish_khan22",
                        "content": " \"/a//b////c/d//././/..\"\\nexpected output is \\'/a/b/c\\', why? why not \\'/a/b/c/d\\'?"
                    },
                    {
                        "username": "kylecrowley",
                        "content": "I got caught by this test case as well. `..` (*without* a trailing `/`) is treated the same as `../` (read: go up on level/directory). The \"big picture\" is test cases don\\'t always end in a `/`."
                    },
                    {
                        "username": "rosemelon",
                        "content": "Hi, I just had a simple Unix question about the one period. \\n\\nFrom my understanding at looking at other people\\'s code, we skip the period if we ever see it. \\nIs this because if we have \"/a/b/.\" is equivalent to \"/a/b\"? If so, what does anyone ever use the period for if we don\\'t even include it in our shortest path?"
                    },
                    {
                        "username": "purushattom1999",
                        "content": "Lots of Idiots Test cases is here. Frustrating problem ."
                    },
                    {
                        "username": "fkie4",
                        "content": "this should be categorised as easy"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got it on an interview (c)"
                    },
                    {
                        "username": "i_0x6c1_i",
                        "content": "okay first of all, author of this problem has not given sufficient examples. I am getting issues to fully understand problem."
                    },
                    {
                        "username": "huggie",
                        "content": "If using C, is there a C stack library already included by leetcode? Or do I have to resort to uthash?"
                    },
                    {
                        "username": "kikopy89",
                        "content": "What?\\npath =\\n\"/a/./b/../../c/\"\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\""
                    },
                    {
                        "username": "HappyLoganLi",
                        "content": "rule 3: The path does not end with a trailing \\'/\\'.\\nAnd check the example 2 pls"
                    },
                    {
                        "username": "mahesh105",
                        "content": "if the size of string is 1 then it can,else no"
                    }
                ]
            },
            {
                "id": 1979717,
                "content": [
                    {
                        "username": "user5400vw",
                        "content": "if your PL has built in split method the problem becomes a matter of handling 4 cases.\\nsuprised at the acceptance rate tbh"
                    },
                    {
                        "username": "veeyikpong",
                        "content": "Process the command from end to start\\n\\nYou can either\\nUse\\n1. `split(\"/\")\\' the commands into a list, reverse the list and process the command one by one \\n2. Loop the `path` from end to start, appending the current command text into a temp variable. Whenever we meet a slash (/), process the current command text and clear it.\\n3. Have a `back` variable to keep track of `..` operations. When we meet a normal file path, ignore it if `back > 0`, and minus it.\\n\\nSome important checks are\\n1. When command is `..`, increase `back` by 1\\n2. When command is empty (many consecutive slashes) or \".\", ignore the command\\n3. When command is neither empty, `.` nor `..`, it is a file path. If `back` is 0 , add the command into our result string, else `back--`"
                    },
                    {
                        "username": "taabish_khan22",
                        "content": " \"/a//b////c/d//././/..\"\\nexpected output is \\'/a/b/c\\', why? why not \\'/a/b/c/d\\'?"
                    },
                    {
                        "username": "kylecrowley",
                        "content": "I got caught by this test case as well. `..` (*without* a trailing `/`) is treated the same as `../` (read: go up on level/directory). The \"big picture\" is test cases don\\'t always end in a `/`."
                    },
                    {
                        "username": "rosemelon",
                        "content": "Hi, I just had a simple Unix question about the one period. \\n\\nFrom my understanding at looking at other people\\'s code, we skip the period if we ever see it. \\nIs this because if we have \"/a/b/.\" is equivalent to \"/a/b\"? If so, what does anyone ever use the period for if we don\\'t even include it in our shortest path?"
                    },
                    {
                        "username": "purushattom1999",
                        "content": "Lots of Idiots Test cases is here. Frustrating problem ."
                    },
                    {
                        "username": "fkie4",
                        "content": "this should be categorised as easy"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "They all say that the problem should be easy until they got it on an interview (c)"
                    },
                    {
                        "username": "i_0x6c1_i",
                        "content": "okay first of all, author of this problem has not given sufficient examples. I am getting issues to fully understand problem."
                    },
                    {
                        "username": "huggie",
                        "content": "If using C, is there a C stack library already included by leetcode? Or do I have to resort to uthash?"
                    },
                    {
                        "username": "kikopy89",
                        "content": "What?\\npath =\\n\"/a/./b/../../c/\"\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\""
                    },
                    {
                        "username": "HappyLoganLi",
                        "content": "rule 3: The path does not end with a trailing \\'/\\'.\\nAnd check the example 2 pls"
                    },
                    {
                        "username": "mahesh105",
                        "content": "if the size of string is 1 then it can,else no"
                    }
                ]
            },
            {
                "id": 1912855,
                "content": [
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "this is not a medium problem definitely hard one. "
                    },
                    {
                        "username": "mahesh105",
                        "content": "I cannot agree more"
                    },
                    {
                        "username": "hrishyak17",
                        "content": "Input\\npath =\\n\"/a/./b/../../c/\"\\n\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\"\\n\\ncan someone explain why the output is /c and not /a/b/c"
                    },
                    {
                        "username": "aitachii",
                        "content": "the first \"..\" goes back one directory, so b is popped\ne.g. /a/b/.. == /a\nthe second \"..\" goes back one directory, so a is popped\ne.g. /a/.. == /\n\nc has no \"..\" to its right so it just gets pushed"
                    },
                    {
                        "username": "DavidCastillo",
                        "content": "Ok, guys. It\\'s incredible that many people were claiming that [yesterday\\'s daily challenge](https://leetcode.com/problems/removing-stars-from-a-string/) was easy. Today, it\\'s almost the same, but now we have an acceptance rate of 40.5%. What\\'s happening?\""
                    },
                    {
                        "username": "lakpareek",
                        "content": "what am i doing wrong here? it keeps on returning an empty string as the answer. Please help if you can  :((\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        queue<char> q;\n        for(int i = 0; i<path.size(); i++){\n            if(path[i] == '/' && q.front() == '/'){\n                continue;\n            }\n            else{\n                q.push(path[i]);\n            }\n        }\n        vector<string> col;\n        while(!q.empty()){\n            string n = \"\";\n            if(q.front() != '/'){\n                n.push_back(q.front());\n                q.pop();\n            }\n            else if(q.front() == '/' && !col.empty()){\n                col.push_back(n);\n                n = \"\";\n            }\n            else{\n                q.pop();\n            }\n        }\n        string ans = \"/\";\n        for(int i = 0; i<col.size(); ){\n            if(col[i] == \".\" || col[i] == \"..\"){\n                i+=2;\n            }\n            else{\n                ans += col[i];\n                ans.push_back('/');\n                i++;\n            }\n        }\n        ans.pop_back();\n        return ans;\n    }\n};\n"
                    },
                    {
                        "username": "Vinaygoswami321",
                        "content": "I wrote the worst code of my life and solved this problem any how"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "This took me way longer than it should have. Got stuck multiple times with just a stack approach. I split the string on '/' first that made it slightly easier."
                    },
                    {
                        "username": "why-sid",
                        "content": "Can somebody explainf this question in a simple manner...like how do we tackle the slashes? I understood using the stack but not more than that."
                    },
                    {
                        "username": "why-sid",
                        "content": "[@vickyshankar23](/vickyshankar23) No, I mean I understood the approach and the logic of the question, it is just that I cannot build the exact code for it...needed to see the solution before submitting...like how actually to implement the solution in stack after pushing it, is the problem..you getting it?"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Do you mean multiple slashes? If so, you can just see if the head of the stack is a \"/\", if so just ignore other \"/\". \\nIf this is more generic, I just split the path string on \"/\" before using a stack to build the canonical path. That made it easier."
                    },
                    {
                        "username": "ZeroSkillzzz",
                        "content": "more like a stack series"
                    },
                    {
                        "username": "_drigger",
                        "content": "my code cross 90 lines i don\\'t know what i have written \\uD83E\\uDD28"
                    },
                    {
                        "username": "singhom",
                        "content": "faltu question tha bhai but hogaya"
                    },
                    {
                        "username": "singhom",
                        "content": "go on gfg u will get a better insight about the edge cases"
                    }
                ]
            },
            {
                "id": 1862055,
                "content": [
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "this is not a medium problem definitely hard one. "
                    },
                    {
                        "username": "mahesh105",
                        "content": "I cannot agree more"
                    },
                    {
                        "username": "hrishyak17",
                        "content": "Input\\npath =\\n\"/a/./b/../../c/\"\\n\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\"\\n\\ncan someone explain why the output is /c and not /a/b/c"
                    },
                    {
                        "username": "aitachii",
                        "content": "the first \"..\" goes back one directory, so b is popped\ne.g. /a/b/.. == /a\nthe second \"..\" goes back one directory, so a is popped\ne.g. /a/.. == /\n\nc has no \"..\" to its right so it just gets pushed"
                    },
                    {
                        "username": "DavidCastillo",
                        "content": "Ok, guys. It\\'s incredible that many people were claiming that [yesterday\\'s daily challenge](https://leetcode.com/problems/removing-stars-from-a-string/) was easy. Today, it\\'s almost the same, but now we have an acceptance rate of 40.5%. What\\'s happening?\""
                    },
                    {
                        "username": "lakpareek",
                        "content": "what am i doing wrong here? it keeps on returning an empty string as the answer. Please help if you can  :((\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        queue<char> q;\n        for(int i = 0; i<path.size(); i++){\n            if(path[i] == '/' && q.front() == '/'){\n                continue;\n            }\n            else{\n                q.push(path[i]);\n            }\n        }\n        vector<string> col;\n        while(!q.empty()){\n            string n = \"\";\n            if(q.front() != '/'){\n                n.push_back(q.front());\n                q.pop();\n            }\n            else if(q.front() == '/' && !col.empty()){\n                col.push_back(n);\n                n = \"\";\n            }\n            else{\n                q.pop();\n            }\n        }\n        string ans = \"/\";\n        for(int i = 0; i<col.size(); ){\n            if(col[i] == \".\" || col[i] == \"..\"){\n                i+=2;\n            }\n            else{\n                ans += col[i];\n                ans.push_back('/');\n                i++;\n            }\n        }\n        ans.pop_back();\n        return ans;\n    }\n};\n"
                    },
                    {
                        "username": "Vinaygoswami321",
                        "content": "I wrote the worst code of my life and solved this problem any how"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "This took me way longer than it should have. Got stuck multiple times with just a stack approach. I split the string on '/' first that made it slightly easier."
                    },
                    {
                        "username": "why-sid",
                        "content": "Can somebody explainf this question in a simple manner...like how do we tackle the slashes? I understood using the stack but not more than that."
                    },
                    {
                        "username": "why-sid",
                        "content": "[@vickyshankar23](/vickyshankar23) No, I mean I understood the approach and the logic of the question, it is just that I cannot build the exact code for it...needed to see the solution before submitting...like how actually to implement the solution in stack after pushing it, is the problem..you getting it?"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Do you mean multiple slashes? If so, you can just see if the head of the stack is a \"/\", if so just ignore other \"/\". \\nIf this is more generic, I just split the path string on \"/\" before using a stack to build the canonical path. That made it easier."
                    },
                    {
                        "username": "ZeroSkillzzz",
                        "content": "more like a stack series"
                    },
                    {
                        "username": "_drigger",
                        "content": "my code cross 90 lines i don\\'t know what i have written \\uD83E\\uDD28"
                    },
                    {
                        "username": "singhom",
                        "content": "faltu question tha bhai but hogaya"
                    },
                    {
                        "username": "singhom",
                        "content": "go on gfg u will get a better insight about the edge cases"
                    }
                ]
            },
            {
                "id": 1861803,
                "content": [
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "this is not a medium problem definitely hard one. "
                    },
                    {
                        "username": "mahesh105",
                        "content": "I cannot agree more"
                    },
                    {
                        "username": "hrishyak17",
                        "content": "Input\\npath =\\n\"/a/./b/../../c/\"\\n\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\"\\n\\ncan someone explain why the output is /c and not /a/b/c"
                    },
                    {
                        "username": "aitachii",
                        "content": "the first \"..\" goes back one directory, so b is popped\ne.g. /a/b/.. == /a\nthe second \"..\" goes back one directory, so a is popped\ne.g. /a/.. == /\n\nc has no \"..\" to its right so it just gets pushed"
                    },
                    {
                        "username": "DavidCastillo",
                        "content": "Ok, guys. It\\'s incredible that many people were claiming that [yesterday\\'s daily challenge](https://leetcode.com/problems/removing-stars-from-a-string/) was easy. Today, it\\'s almost the same, but now we have an acceptance rate of 40.5%. What\\'s happening?\""
                    },
                    {
                        "username": "lakpareek",
                        "content": "what am i doing wrong here? it keeps on returning an empty string as the answer. Please help if you can  :((\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        queue<char> q;\n        for(int i = 0; i<path.size(); i++){\n            if(path[i] == '/' && q.front() == '/'){\n                continue;\n            }\n            else{\n                q.push(path[i]);\n            }\n        }\n        vector<string> col;\n        while(!q.empty()){\n            string n = \"\";\n            if(q.front() != '/'){\n                n.push_back(q.front());\n                q.pop();\n            }\n            else if(q.front() == '/' && !col.empty()){\n                col.push_back(n);\n                n = \"\";\n            }\n            else{\n                q.pop();\n            }\n        }\n        string ans = \"/\";\n        for(int i = 0; i<col.size(); ){\n            if(col[i] == \".\" || col[i] == \"..\"){\n                i+=2;\n            }\n            else{\n                ans += col[i];\n                ans.push_back('/');\n                i++;\n            }\n        }\n        ans.pop_back();\n        return ans;\n    }\n};\n"
                    },
                    {
                        "username": "Vinaygoswami321",
                        "content": "I wrote the worst code of my life and solved this problem any how"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "This took me way longer than it should have. Got stuck multiple times with just a stack approach. I split the string on '/' first that made it slightly easier."
                    },
                    {
                        "username": "why-sid",
                        "content": "Can somebody explainf this question in a simple manner...like how do we tackle the slashes? I understood using the stack but not more than that."
                    },
                    {
                        "username": "why-sid",
                        "content": "[@vickyshankar23](/vickyshankar23) No, I mean I understood the approach and the logic of the question, it is just that I cannot build the exact code for it...needed to see the solution before submitting...like how actually to implement the solution in stack after pushing it, is the problem..you getting it?"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Do you mean multiple slashes? If so, you can just see if the head of the stack is a \"/\", if so just ignore other \"/\". \\nIf this is more generic, I just split the path string on \"/\" before using a stack to build the canonical path. That made it easier."
                    },
                    {
                        "username": "ZeroSkillzzz",
                        "content": "more like a stack series"
                    },
                    {
                        "username": "_drigger",
                        "content": "my code cross 90 lines i don\\'t know what i have written \\uD83E\\uDD28"
                    },
                    {
                        "username": "singhom",
                        "content": "faltu question tha bhai but hogaya"
                    },
                    {
                        "username": "singhom",
                        "content": "go on gfg u will get a better insight about the edge cases"
                    }
                ]
            },
            {
                "id": 1861713,
                "content": [
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "this is not a medium problem definitely hard one. "
                    },
                    {
                        "username": "mahesh105",
                        "content": "I cannot agree more"
                    },
                    {
                        "username": "hrishyak17",
                        "content": "Input\\npath =\\n\"/a/./b/../../c/\"\\n\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\"\\n\\ncan someone explain why the output is /c and not /a/b/c"
                    },
                    {
                        "username": "aitachii",
                        "content": "the first \"..\" goes back one directory, so b is popped\ne.g. /a/b/.. == /a\nthe second \"..\" goes back one directory, so a is popped\ne.g. /a/.. == /\n\nc has no \"..\" to its right so it just gets pushed"
                    },
                    {
                        "username": "DavidCastillo",
                        "content": "Ok, guys. It\\'s incredible that many people were claiming that [yesterday\\'s daily challenge](https://leetcode.com/problems/removing-stars-from-a-string/) was easy. Today, it\\'s almost the same, but now we have an acceptance rate of 40.5%. What\\'s happening?\""
                    },
                    {
                        "username": "lakpareek",
                        "content": "what am i doing wrong here? it keeps on returning an empty string as the answer. Please help if you can  :((\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        queue<char> q;\n        for(int i = 0; i<path.size(); i++){\n            if(path[i] == '/' && q.front() == '/'){\n                continue;\n            }\n            else{\n                q.push(path[i]);\n            }\n        }\n        vector<string> col;\n        while(!q.empty()){\n            string n = \"\";\n            if(q.front() != '/'){\n                n.push_back(q.front());\n                q.pop();\n            }\n            else if(q.front() == '/' && !col.empty()){\n                col.push_back(n);\n                n = \"\";\n            }\n            else{\n                q.pop();\n            }\n        }\n        string ans = \"/\";\n        for(int i = 0; i<col.size(); ){\n            if(col[i] == \".\" || col[i] == \"..\"){\n                i+=2;\n            }\n            else{\n                ans += col[i];\n                ans.push_back('/');\n                i++;\n            }\n        }\n        ans.pop_back();\n        return ans;\n    }\n};\n"
                    },
                    {
                        "username": "Vinaygoswami321",
                        "content": "I wrote the worst code of my life and solved this problem any how"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "This took me way longer than it should have. Got stuck multiple times with just a stack approach. I split the string on '/' first that made it slightly easier."
                    },
                    {
                        "username": "why-sid",
                        "content": "Can somebody explainf this question in a simple manner...like how do we tackle the slashes? I understood using the stack but not more than that."
                    },
                    {
                        "username": "why-sid",
                        "content": "[@vickyshankar23](/vickyshankar23) No, I mean I understood the approach and the logic of the question, it is just that I cannot build the exact code for it...needed to see the solution before submitting...like how actually to implement the solution in stack after pushing it, is the problem..you getting it?"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Do you mean multiple slashes? If so, you can just see if the head of the stack is a \"/\", if so just ignore other \"/\". \\nIf this is more generic, I just split the path string on \"/\" before using a stack to build the canonical path. That made it easier."
                    },
                    {
                        "username": "ZeroSkillzzz",
                        "content": "more like a stack series"
                    },
                    {
                        "username": "_drigger",
                        "content": "my code cross 90 lines i don\\'t know what i have written \\uD83E\\uDD28"
                    },
                    {
                        "username": "singhom",
                        "content": "faltu question tha bhai but hogaya"
                    },
                    {
                        "username": "singhom",
                        "content": "go on gfg u will get a better insight about the edge cases"
                    }
                ]
            },
            {
                "id": 1861635,
                "content": [
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "this is not a medium problem definitely hard one. "
                    },
                    {
                        "username": "mahesh105",
                        "content": "I cannot agree more"
                    },
                    {
                        "username": "hrishyak17",
                        "content": "Input\\npath =\\n\"/a/./b/../../c/\"\\n\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\"\\n\\ncan someone explain why the output is /c and not /a/b/c"
                    },
                    {
                        "username": "aitachii",
                        "content": "the first \"..\" goes back one directory, so b is popped\ne.g. /a/b/.. == /a\nthe second \"..\" goes back one directory, so a is popped\ne.g. /a/.. == /\n\nc has no \"..\" to its right so it just gets pushed"
                    },
                    {
                        "username": "DavidCastillo",
                        "content": "Ok, guys. It\\'s incredible that many people were claiming that [yesterday\\'s daily challenge](https://leetcode.com/problems/removing-stars-from-a-string/) was easy. Today, it\\'s almost the same, but now we have an acceptance rate of 40.5%. What\\'s happening?\""
                    },
                    {
                        "username": "lakpareek",
                        "content": "what am i doing wrong here? it keeps on returning an empty string as the answer. Please help if you can  :((\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        queue<char> q;\n        for(int i = 0; i<path.size(); i++){\n            if(path[i] == '/' && q.front() == '/'){\n                continue;\n            }\n            else{\n                q.push(path[i]);\n            }\n        }\n        vector<string> col;\n        while(!q.empty()){\n            string n = \"\";\n            if(q.front() != '/'){\n                n.push_back(q.front());\n                q.pop();\n            }\n            else if(q.front() == '/' && !col.empty()){\n                col.push_back(n);\n                n = \"\";\n            }\n            else{\n                q.pop();\n            }\n        }\n        string ans = \"/\";\n        for(int i = 0; i<col.size(); ){\n            if(col[i] == \".\" || col[i] == \"..\"){\n                i+=2;\n            }\n            else{\n                ans += col[i];\n                ans.push_back('/');\n                i++;\n            }\n        }\n        ans.pop_back();\n        return ans;\n    }\n};\n"
                    },
                    {
                        "username": "Vinaygoswami321",
                        "content": "I wrote the worst code of my life and solved this problem any how"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "This took me way longer than it should have. Got stuck multiple times with just a stack approach. I split the string on '/' first that made it slightly easier."
                    },
                    {
                        "username": "why-sid",
                        "content": "Can somebody explainf this question in a simple manner...like how do we tackle the slashes? I understood using the stack but not more than that."
                    },
                    {
                        "username": "why-sid",
                        "content": "[@vickyshankar23](/vickyshankar23) No, I mean I understood the approach and the logic of the question, it is just that I cannot build the exact code for it...needed to see the solution before submitting...like how actually to implement the solution in stack after pushing it, is the problem..you getting it?"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Do you mean multiple slashes? If so, you can just see if the head of the stack is a \"/\", if so just ignore other \"/\". \\nIf this is more generic, I just split the path string on \"/\" before using a stack to build the canonical path. That made it easier."
                    },
                    {
                        "username": "ZeroSkillzzz",
                        "content": "more like a stack series"
                    },
                    {
                        "username": "_drigger",
                        "content": "my code cross 90 lines i don\\'t know what i have written \\uD83E\\uDD28"
                    },
                    {
                        "username": "singhom",
                        "content": "faltu question tha bhai but hogaya"
                    },
                    {
                        "username": "singhom",
                        "content": "go on gfg u will get a better insight about the edge cases"
                    }
                ]
            },
            {
                "id": 1861630,
                "content": [
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "this is not a medium problem definitely hard one. "
                    },
                    {
                        "username": "mahesh105",
                        "content": "I cannot agree more"
                    },
                    {
                        "username": "hrishyak17",
                        "content": "Input\\npath =\\n\"/a/./b/../../c/\"\\n\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\"\\n\\ncan someone explain why the output is /c and not /a/b/c"
                    },
                    {
                        "username": "aitachii",
                        "content": "the first \"..\" goes back one directory, so b is popped\ne.g. /a/b/.. == /a\nthe second \"..\" goes back one directory, so a is popped\ne.g. /a/.. == /\n\nc has no \"..\" to its right so it just gets pushed"
                    },
                    {
                        "username": "DavidCastillo",
                        "content": "Ok, guys. It\\'s incredible that many people were claiming that [yesterday\\'s daily challenge](https://leetcode.com/problems/removing-stars-from-a-string/) was easy. Today, it\\'s almost the same, but now we have an acceptance rate of 40.5%. What\\'s happening?\""
                    },
                    {
                        "username": "lakpareek",
                        "content": "what am i doing wrong here? it keeps on returning an empty string as the answer. Please help if you can  :((\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        queue<char> q;\n        for(int i = 0; i<path.size(); i++){\n            if(path[i] == '/' && q.front() == '/'){\n                continue;\n            }\n            else{\n                q.push(path[i]);\n            }\n        }\n        vector<string> col;\n        while(!q.empty()){\n            string n = \"\";\n            if(q.front() != '/'){\n                n.push_back(q.front());\n                q.pop();\n            }\n            else if(q.front() == '/' && !col.empty()){\n                col.push_back(n);\n                n = \"\";\n            }\n            else{\n                q.pop();\n            }\n        }\n        string ans = \"/\";\n        for(int i = 0; i<col.size(); ){\n            if(col[i] == \".\" || col[i] == \"..\"){\n                i+=2;\n            }\n            else{\n                ans += col[i];\n                ans.push_back('/');\n                i++;\n            }\n        }\n        ans.pop_back();\n        return ans;\n    }\n};\n"
                    },
                    {
                        "username": "Vinaygoswami321",
                        "content": "I wrote the worst code of my life and solved this problem any how"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "This took me way longer than it should have. Got stuck multiple times with just a stack approach. I split the string on '/' first that made it slightly easier."
                    },
                    {
                        "username": "why-sid",
                        "content": "Can somebody explainf this question in a simple manner...like how do we tackle the slashes? I understood using the stack but not more than that."
                    },
                    {
                        "username": "why-sid",
                        "content": "[@vickyshankar23](/vickyshankar23) No, I mean I understood the approach and the logic of the question, it is just that I cannot build the exact code for it...needed to see the solution before submitting...like how actually to implement the solution in stack after pushing it, is the problem..you getting it?"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Do you mean multiple slashes? If so, you can just see if the head of the stack is a \"/\", if so just ignore other \"/\". \\nIf this is more generic, I just split the path string on \"/\" before using a stack to build the canonical path. That made it easier."
                    },
                    {
                        "username": "ZeroSkillzzz",
                        "content": "more like a stack series"
                    },
                    {
                        "username": "_drigger",
                        "content": "my code cross 90 lines i don\\'t know what i have written \\uD83E\\uDD28"
                    },
                    {
                        "username": "singhom",
                        "content": "faltu question tha bhai but hogaya"
                    },
                    {
                        "username": "singhom",
                        "content": "go on gfg u will get a better insight about the edge cases"
                    }
                ]
            },
            {
                "id": 1861617,
                "content": [
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "this is not a medium problem definitely hard one. "
                    },
                    {
                        "username": "mahesh105",
                        "content": "I cannot agree more"
                    },
                    {
                        "username": "hrishyak17",
                        "content": "Input\\npath =\\n\"/a/./b/../../c/\"\\n\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\"\\n\\ncan someone explain why the output is /c and not /a/b/c"
                    },
                    {
                        "username": "aitachii",
                        "content": "the first \"..\" goes back one directory, so b is popped\ne.g. /a/b/.. == /a\nthe second \"..\" goes back one directory, so a is popped\ne.g. /a/.. == /\n\nc has no \"..\" to its right so it just gets pushed"
                    },
                    {
                        "username": "DavidCastillo",
                        "content": "Ok, guys. It\\'s incredible that many people were claiming that [yesterday\\'s daily challenge](https://leetcode.com/problems/removing-stars-from-a-string/) was easy. Today, it\\'s almost the same, but now we have an acceptance rate of 40.5%. What\\'s happening?\""
                    },
                    {
                        "username": "lakpareek",
                        "content": "what am i doing wrong here? it keeps on returning an empty string as the answer. Please help if you can  :((\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        queue<char> q;\n        for(int i = 0; i<path.size(); i++){\n            if(path[i] == '/' && q.front() == '/'){\n                continue;\n            }\n            else{\n                q.push(path[i]);\n            }\n        }\n        vector<string> col;\n        while(!q.empty()){\n            string n = \"\";\n            if(q.front() != '/'){\n                n.push_back(q.front());\n                q.pop();\n            }\n            else if(q.front() == '/' && !col.empty()){\n                col.push_back(n);\n                n = \"\";\n            }\n            else{\n                q.pop();\n            }\n        }\n        string ans = \"/\";\n        for(int i = 0; i<col.size(); ){\n            if(col[i] == \".\" || col[i] == \"..\"){\n                i+=2;\n            }\n            else{\n                ans += col[i];\n                ans.push_back('/');\n                i++;\n            }\n        }\n        ans.pop_back();\n        return ans;\n    }\n};\n"
                    },
                    {
                        "username": "Vinaygoswami321",
                        "content": "I wrote the worst code of my life and solved this problem any how"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "This took me way longer than it should have. Got stuck multiple times with just a stack approach. I split the string on '/' first that made it slightly easier."
                    },
                    {
                        "username": "why-sid",
                        "content": "Can somebody explainf this question in a simple manner...like how do we tackle the slashes? I understood using the stack but not more than that."
                    },
                    {
                        "username": "why-sid",
                        "content": "[@vickyshankar23](/vickyshankar23) No, I mean I understood the approach and the logic of the question, it is just that I cannot build the exact code for it...needed to see the solution before submitting...like how actually to implement the solution in stack after pushing it, is the problem..you getting it?"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Do you mean multiple slashes? If so, you can just see if the head of the stack is a \"/\", if so just ignore other \"/\". \\nIf this is more generic, I just split the path string on \"/\" before using a stack to build the canonical path. That made it easier."
                    },
                    {
                        "username": "ZeroSkillzzz",
                        "content": "more like a stack series"
                    },
                    {
                        "username": "_drigger",
                        "content": "my code cross 90 lines i don\\'t know what i have written \\uD83E\\uDD28"
                    },
                    {
                        "username": "singhom",
                        "content": "faltu question tha bhai but hogaya"
                    },
                    {
                        "username": "singhom",
                        "content": "go on gfg u will get a better insight about the edge cases"
                    }
                ]
            },
            {
                "id": 1861393,
                "content": [
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "this is not a medium problem definitely hard one. "
                    },
                    {
                        "username": "mahesh105",
                        "content": "I cannot agree more"
                    },
                    {
                        "username": "hrishyak17",
                        "content": "Input\\npath =\\n\"/a/./b/../../c/\"\\n\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\"\\n\\ncan someone explain why the output is /c and not /a/b/c"
                    },
                    {
                        "username": "aitachii",
                        "content": "the first \"..\" goes back one directory, so b is popped\ne.g. /a/b/.. == /a\nthe second \"..\" goes back one directory, so a is popped\ne.g. /a/.. == /\n\nc has no \"..\" to its right so it just gets pushed"
                    },
                    {
                        "username": "DavidCastillo",
                        "content": "Ok, guys. It\\'s incredible that many people were claiming that [yesterday\\'s daily challenge](https://leetcode.com/problems/removing-stars-from-a-string/) was easy. Today, it\\'s almost the same, but now we have an acceptance rate of 40.5%. What\\'s happening?\""
                    },
                    {
                        "username": "lakpareek",
                        "content": "what am i doing wrong here? it keeps on returning an empty string as the answer. Please help if you can  :((\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        queue<char> q;\n        for(int i = 0; i<path.size(); i++){\n            if(path[i] == '/' && q.front() == '/'){\n                continue;\n            }\n            else{\n                q.push(path[i]);\n            }\n        }\n        vector<string> col;\n        while(!q.empty()){\n            string n = \"\";\n            if(q.front() != '/'){\n                n.push_back(q.front());\n                q.pop();\n            }\n            else if(q.front() == '/' && !col.empty()){\n                col.push_back(n);\n                n = \"\";\n            }\n            else{\n                q.pop();\n            }\n        }\n        string ans = \"/\";\n        for(int i = 0; i<col.size(); ){\n            if(col[i] == \".\" || col[i] == \"..\"){\n                i+=2;\n            }\n            else{\n                ans += col[i];\n                ans.push_back('/');\n                i++;\n            }\n        }\n        ans.pop_back();\n        return ans;\n    }\n};\n"
                    },
                    {
                        "username": "Vinaygoswami321",
                        "content": "I wrote the worst code of my life and solved this problem any how"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "This took me way longer than it should have. Got stuck multiple times with just a stack approach. I split the string on '/' first that made it slightly easier."
                    },
                    {
                        "username": "why-sid",
                        "content": "Can somebody explainf this question in a simple manner...like how do we tackle the slashes? I understood using the stack but not more than that."
                    },
                    {
                        "username": "why-sid",
                        "content": "[@vickyshankar23](/vickyshankar23) No, I mean I understood the approach and the logic of the question, it is just that I cannot build the exact code for it...needed to see the solution before submitting...like how actually to implement the solution in stack after pushing it, is the problem..you getting it?"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Do you mean multiple slashes? If so, you can just see if the head of the stack is a \"/\", if so just ignore other \"/\". \\nIf this is more generic, I just split the path string on \"/\" before using a stack to build the canonical path. That made it easier."
                    },
                    {
                        "username": "ZeroSkillzzz",
                        "content": "more like a stack series"
                    },
                    {
                        "username": "_drigger",
                        "content": "my code cross 90 lines i don\\'t know what i have written \\uD83E\\uDD28"
                    },
                    {
                        "username": "singhom",
                        "content": "faltu question tha bhai but hogaya"
                    },
                    {
                        "username": "singhom",
                        "content": "go on gfg u will get a better insight about the edge cases"
                    }
                ]
            },
            {
                "id": 1861359,
                "content": [
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "this is not a medium problem definitely hard one. "
                    },
                    {
                        "username": "mahesh105",
                        "content": "I cannot agree more"
                    },
                    {
                        "username": "hrishyak17",
                        "content": "Input\\npath =\\n\"/a/./b/../../c/\"\\n\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\"\\n\\ncan someone explain why the output is /c and not /a/b/c"
                    },
                    {
                        "username": "aitachii",
                        "content": "the first \"..\" goes back one directory, so b is popped\ne.g. /a/b/.. == /a\nthe second \"..\" goes back one directory, so a is popped\ne.g. /a/.. == /\n\nc has no \"..\" to its right so it just gets pushed"
                    },
                    {
                        "username": "DavidCastillo",
                        "content": "Ok, guys. It\\'s incredible that many people were claiming that [yesterday\\'s daily challenge](https://leetcode.com/problems/removing-stars-from-a-string/) was easy. Today, it\\'s almost the same, but now we have an acceptance rate of 40.5%. What\\'s happening?\""
                    },
                    {
                        "username": "lakpareek",
                        "content": "what am i doing wrong here? it keeps on returning an empty string as the answer. Please help if you can  :((\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        queue<char> q;\n        for(int i = 0; i<path.size(); i++){\n            if(path[i] == '/' && q.front() == '/'){\n                continue;\n            }\n            else{\n                q.push(path[i]);\n            }\n        }\n        vector<string> col;\n        while(!q.empty()){\n            string n = \"\";\n            if(q.front() != '/'){\n                n.push_back(q.front());\n                q.pop();\n            }\n            else if(q.front() == '/' && !col.empty()){\n                col.push_back(n);\n                n = \"\";\n            }\n            else{\n                q.pop();\n            }\n        }\n        string ans = \"/\";\n        for(int i = 0; i<col.size(); ){\n            if(col[i] == \".\" || col[i] == \"..\"){\n                i+=2;\n            }\n            else{\n                ans += col[i];\n                ans.push_back('/');\n                i++;\n            }\n        }\n        ans.pop_back();\n        return ans;\n    }\n};\n"
                    },
                    {
                        "username": "Vinaygoswami321",
                        "content": "I wrote the worst code of my life and solved this problem any how"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "This took me way longer than it should have. Got stuck multiple times with just a stack approach. I split the string on '/' first that made it slightly easier."
                    },
                    {
                        "username": "why-sid",
                        "content": "Can somebody explainf this question in a simple manner...like how do we tackle the slashes? I understood using the stack but not more than that."
                    },
                    {
                        "username": "why-sid",
                        "content": "[@vickyshankar23](/vickyshankar23) No, I mean I understood the approach and the logic of the question, it is just that I cannot build the exact code for it...needed to see the solution before submitting...like how actually to implement the solution in stack after pushing it, is the problem..you getting it?"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Do you mean multiple slashes? If so, you can just see if the head of the stack is a \"/\", if so just ignore other \"/\". \\nIf this is more generic, I just split the path string on \"/\" before using a stack to build the canonical path. That made it easier."
                    },
                    {
                        "username": "ZeroSkillzzz",
                        "content": "more like a stack series"
                    },
                    {
                        "username": "_drigger",
                        "content": "my code cross 90 lines i don\\'t know what i have written \\uD83E\\uDD28"
                    },
                    {
                        "username": "singhom",
                        "content": "faltu question tha bhai but hogaya"
                    },
                    {
                        "username": "singhom",
                        "content": "go on gfg u will get a better insight about the edge cases"
                    }
                ]
            },
            {
                "id": 1861346,
                "content": [
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "this is not a medium problem definitely hard one. "
                    },
                    {
                        "username": "mahesh105",
                        "content": "I cannot agree more"
                    },
                    {
                        "username": "hrishyak17",
                        "content": "Input\\npath =\\n\"/a/./b/../../c/\"\\n\\nOutput\\n\"/a/b/c\"\\nExpected\\n\"/c\"\\n\\ncan someone explain why the output is /c and not /a/b/c"
                    },
                    {
                        "username": "aitachii",
                        "content": "the first \"..\" goes back one directory, so b is popped\ne.g. /a/b/.. == /a\nthe second \"..\" goes back one directory, so a is popped\ne.g. /a/.. == /\n\nc has no \"..\" to its right so it just gets pushed"
                    },
                    {
                        "username": "DavidCastillo",
                        "content": "Ok, guys. It\\'s incredible that many people were claiming that [yesterday\\'s daily challenge](https://leetcode.com/problems/removing-stars-from-a-string/) was easy. Today, it\\'s almost the same, but now we have an acceptance rate of 40.5%. What\\'s happening?\""
                    },
                    {
                        "username": "lakpareek",
                        "content": "what am i doing wrong here? it keeps on returning an empty string as the answer. Please help if you can  :((\nclass Solution {\npublic:\n    string simplifyPath(string path) {\n        queue<char> q;\n        for(int i = 0; i<path.size(); i++){\n            if(path[i] == '/' && q.front() == '/'){\n                continue;\n            }\n            else{\n                q.push(path[i]);\n            }\n        }\n        vector<string> col;\n        while(!q.empty()){\n            string n = \"\";\n            if(q.front() != '/'){\n                n.push_back(q.front());\n                q.pop();\n            }\n            else if(q.front() == '/' && !col.empty()){\n                col.push_back(n);\n                n = \"\";\n            }\n            else{\n                q.pop();\n            }\n        }\n        string ans = \"/\";\n        for(int i = 0; i<col.size(); ){\n            if(col[i] == \".\" || col[i] == \"..\"){\n                i+=2;\n            }\n            else{\n                ans += col[i];\n                ans.push_back('/');\n                i++;\n            }\n        }\n        ans.pop_back();\n        return ans;\n    }\n};\n"
                    },
                    {
                        "username": "Vinaygoswami321",
                        "content": "I wrote the worst code of my life and solved this problem any how"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "This took me way longer than it should have. Got stuck multiple times with just a stack approach. I split the string on '/' first that made it slightly easier."
                    },
                    {
                        "username": "why-sid",
                        "content": "Can somebody explainf this question in a simple manner...like how do we tackle the slashes? I understood using the stack but not more than that."
                    },
                    {
                        "username": "why-sid",
                        "content": "[@vickyshankar23](/vickyshankar23) No, I mean I understood the approach and the logic of the question, it is just that I cannot build the exact code for it...needed to see the solution before submitting...like how actually to implement the solution in stack after pushing it, is the problem..you getting it?"
                    },
                    {
                        "username": "vickyshankar23",
                        "content": "Do you mean multiple slashes? If so, you can just see if the head of the stack is a \"/\", if so just ignore other \"/\". \\nIf this is more generic, I just split the path string on \"/\" before using a stack to build the canonical path. That made it easier."
                    },
                    {
                        "username": "ZeroSkillzzz",
                        "content": "more like a stack series"
                    },
                    {
                        "username": "_drigger",
                        "content": "my code cross 90 lines i don\\'t know what i have written \\uD83E\\uDD28"
                    },
                    {
                        "username": "singhom",
                        "content": "faltu question tha bhai but hogaya"
                    },
                    {
                        "username": "singhom",
                        "content": "go on gfg u will get a better insight about the edge cases"
                    }
                ]
            },
            {
                "id": 1861266,
                "content": [
                    {
                        "username": "aitachii",
                        "content": "If you want a challenge, try doing it in O(1) space."
                    },
                    {
                        "username": "aitachii",
                        "content": "[@charonme](/charonme) Either that or using a string instead of a stack."
                    },
                    {
                        "username": "charonme",
                        "content": "so in-place modification of the input string?"
                    },
                    {
                        "username": "ng812057",
                        "content": "here m not able to solve it in o(n).... and u r talking about o(1)\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "\"/..hidden\"\\nWhy the answer for this test case is \"/..hidden\" instead of \"/hidden\" ?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not able to understand the question .....\\uD83E\\uDD72.\\n"
                    },
                    {
                        "username": "_priyang__",
                        "content": "are these type of questions asked in technical interviews???"
                    },
                    {
                        "username": "sk03167",
                        "content": "I would hope not. Somehow, the code I wrote just luckily happened to pass for edge cases. Otherwise it probably would have taken a couple of failed attempts to solve this one."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "Simple task to practice **Stack** using skills"
                    },
                    {
                        "username": "jahid_shakil",
                        "content": "Try these testcases -\\n```\\n\"/..hidden\"\\n\"/.aa/....hidden\"\\n```"
                    },
                    {
                        "username": "harikrishnacn1999",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "From past 3 days, only the question  from the stack is coming\n\nDon't you found this strange?\n\nWhat's your opinionn"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "Can someone explain me what\"s the deal with \"...\" ?\\n "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The question says that \\'...\\' is treated as a file or directory name"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "***Here is an Approach :-)***\\n\\n- Split the input path string by the appropriate delimiter (e.g., \"/\" for Unix-like systems, \"\\\\\" for Windows) to obtain an array or list of substrings, each representing a component of the file system path.\\n\\n- Create an empty stack or list to store the simplified components of the path.\\n\\n- Iterate over each component s in the array or list of substrings.\\n\\n- For each component s:\\n\\n- If the stack or list is not empty and s is equal to \"..\", then pop the top element (the previous component) from the stack or remove the last element from the list to effectively move up one level in the file system hierarchy.\\n- Otherwise, if s is not equal to \".\" (which represents the current directory), \"..\" (which represents moving up one level in the file system hierarchy), or an empty string (which can occur due to consecutive delimiters in the input path), push s onto the stack or add it to the list to include it as a component of the simplified path.\\n- After iterating over all components of the input path, check if the stack or list is empty. If it is, return the root directory representation (\"/\" for Unix-like systems, \"C:\\\\\" for Windows), as the simplified path.\\n\\n- If the stack or list is not empty, build the simplified path by popping components from the stack or joining elements in the list with the appropriate delimiter. Finally, return the simplified path as a string."
                    }
                ]
            },
            {
                "id": 1861260,
                "content": [
                    {
                        "username": "aitachii",
                        "content": "If you want a challenge, try doing it in O(1) space."
                    },
                    {
                        "username": "aitachii",
                        "content": "[@charonme](/charonme) Either that or using a string instead of a stack."
                    },
                    {
                        "username": "charonme",
                        "content": "so in-place modification of the input string?"
                    },
                    {
                        "username": "ng812057",
                        "content": "here m not able to solve it in o(n).... and u r talking about o(1)\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "\"/..hidden\"\\nWhy the answer for this test case is \"/..hidden\" instead of \"/hidden\" ?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not able to understand the question .....\\uD83E\\uDD72.\\n"
                    },
                    {
                        "username": "_priyang__",
                        "content": "are these type of questions asked in technical interviews???"
                    },
                    {
                        "username": "sk03167",
                        "content": "I would hope not. Somehow, the code I wrote just luckily happened to pass for edge cases. Otherwise it probably would have taken a couple of failed attempts to solve this one."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "Simple task to practice **Stack** using skills"
                    },
                    {
                        "username": "jahid_shakil",
                        "content": "Try these testcases -\\n```\\n\"/..hidden\"\\n\"/.aa/....hidden\"\\n```"
                    },
                    {
                        "username": "harikrishnacn1999",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "From past 3 days, only the question  from the stack is coming\n\nDon't you found this strange?\n\nWhat's your opinionn"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "Can someone explain me what\"s the deal with \"...\" ?\\n "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The question says that \\'...\\' is treated as a file or directory name"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "***Here is an Approach :-)***\\n\\n- Split the input path string by the appropriate delimiter (e.g., \"/\" for Unix-like systems, \"\\\\\" for Windows) to obtain an array or list of substrings, each representing a component of the file system path.\\n\\n- Create an empty stack or list to store the simplified components of the path.\\n\\n- Iterate over each component s in the array or list of substrings.\\n\\n- For each component s:\\n\\n- If the stack or list is not empty and s is equal to \"..\", then pop the top element (the previous component) from the stack or remove the last element from the list to effectively move up one level in the file system hierarchy.\\n- Otherwise, if s is not equal to \".\" (which represents the current directory), \"..\" (which represents moving up one level in the file system hierarchy), or an empty string (which can occur due to consecutive delimiters in the input path), push s onto the stack or add it to the list to include it as a component of the simplified path.\\n- After iterating over all components of the input path, check if the stack or list is empty. If it is, return the root directory representation (\"/\" for Unix-like systems, \"C:\\\\\" for Windows), as the simplified path.\\n\\n- If the stack or list is not empty, build the simplified path by popping components from the stack or joining elements in the list with the appropriate delimiter. Finally, return the simplified path as a string."
                    }
                ]
            },
            {
                "id": 1861184,
                "content": [
                    {
                        "username": "aitachii",
                        "content": "If you want a challenge, try doing it in O(1) space."
                    },
                    {
                        "username": "aitachii",
                        "content": "[@charonme](/charonme) Either that or using a string instead of a stack."
                    },
                    {
                        "username": "charonme",
                        "content": "so in-place modification of the input string?"
                    },
                    {
                        "username": "ng812057",
                        "content": "here m not able to solve it in o(n).... and u r talking about o(1)\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "\"/..hidden\"\\nWhy the answer for this test case is \"/..hidden\" instead of \"/hidden\" ?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not able to understand the question .....\\uD83E\\uDD72.\\n"
                    },
                    {
                        "username": "_priyang__",
                        "content": "are these type of questions asked in technical interviews???"
                    },
                    {
                        "username": "sk03167",
                        "content": "I would hope not. Somehow, the code I wrote just luckily happened to pass for edge cases. Otherwise it probably would have taken a couple of failed attempts to solve this one."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "Simple task to practice **Stack** using skills"
                    },
                    {
                        "username": "jahid_shakil",
                        "content": "Try these testcases -\\n```\\n\"/..hidden\"\\n\"/.aa/....hidden\"\\n```"
                    },
                    {
                        "username": "harikrishnacn1999",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "From past 3 days, only the question  from the stack is coming\n\nDon't you found this strange?\n\nWhat's your opinionn"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "Can someone explain me what\"s the deal with \"...\" ?\\n "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The question says that \\'...\\' is treated as a file or directory name"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "***Here is an Approach :-)***\\n\\n- Split the input path string by the appropriate delimiter (e.g., \"/\" for Unix-like systems, \"\\\\\" for Windows) to obtain an array or list of substrings, each representing a component of the file system path.\\n\\n- Create an empty stack or list to store the simplified components of the path.\\n\\n- Iterate over each component s in the array or list of substrings.\\n\\n- For each component s:\\n\\n- If the stack or list is not empty and s is equal to \"..\", then pop the top element (the previous component) from the stack or remove the last element from the list to effectively move up one level in the file system hierarchy.\\n- Otherwise, if s is not equal to \".\" (which represents the current directory), \"..\" (which represents moving up one level in the file system hierarchy), or an empty string (which can occur due to consecutive delimiters in the input path), push s onto the stack or add it to the list to include it as a component of the simplified path.\\n- After iterating over all components of the input path, check if the stack or list is empty. If it is, return the root directory representation (\"/\" for Unix-like systems, \"C:\\\\\" for Windows), as the simplified path.\\n\\n- If the stack or list is not empty, build the simplified path by popping components from the stack or joining elements in the list with the appropriate delimiter. Finally, return the simplified path as a string."
                    }
                ]
            },
            {
                "id": 1861101,
                "content": [
                    {
                        "username": "aitachii",
                        "content": "If you want a challenge, try doing it in O(1) space."
                    },
                    {
                        "username": "aitachii",
                        "content": "[@charonme](/charonme) Either that or using a string instead of a stack."
                    },
                    {
                        "username": "charonme",
                        "content": "so in-place modification of the input string?"
                    },
                    {
                        "username": "ng812057",
                        "content": "here m not able to solve it in o(n).... and u r talking about o(1)\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "\"/..hidden\"\\nWhy the answer for this test case is \"/..hidden\" instead of \"/hidden\" ?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not able to understand the question .....\\uD83E\\uDD72.\\n"
                    },
                    {
                        "username": "_priyang__",
                        "content": "are these type of questions asked in technical interviews???"
                    },
                    {
                        "username": "sk03167",
                        "content": "I would hope not. Somehow, the code I wrote just luckily happened to pass for edge cases. Otherwise it probably would have taken a couple of failed attempts to solve this one."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "Simple task to practice **Stack** using skills"
                    },
                    {
                        "username": "jahid_shakil",
                        "content": "Try these testcases -\\n```\\n\"/..hidden\"\\n\"/.aa/....hidden\"\\n```"
                    },
                    {
                        "username": "harikrishnacn1999",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "From past 3 days, only the question  from the stack is coming\n\nDon't you found this strange?\n\nWhat's your opinionn"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "Can someone explain me what\"s the deal with \"...\" ?\\n "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The question says that \\'...\\' is treated as a file or directory name"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "***Here is an Approach :-)***\\n\\n- Split the input path string by the appropriate delimiter (e.g., \"/\" for Unix-like systems, \"\\\\\" for Windows) to obtain an array or list of substrings, each representing a component of the file system path.\\n\\n- Create an empty stack or list to store the simplified components of the path.\\n\\n- Iterate over each component s in the array or list of substrings.\\n\\n- For each component s:\\n\\n- If the stack or list is not empty and s is equal to \"..\", then pop the top element (the previous component) from the stack or remove the last element from the list to effectively move up one level in the file system hierarchy.\\n- Otherwise, if s is not equal to \".\" (which represents the current directory), \"..\" (which represents moving up one level in the file system hierarchy), or an empty string (which can occur due to consecutive delimiters in the input path), push s onto the stack or add it to the list to include it as a component of the simplified path.\\n- After iterating over all components of the input path, check if the stack or list is empty. If it is, return the root directory representation (\"/\" for Unix-like systems, \"C:\\\\\" for Windows), as the simplified path.\\n\\n- If the stack or list is not empty, build the simplified path by popping components from the stack or joining elements in the list with the appropriate delimiter. Finally, return the simplified path as a string."
                    }
                ]
            },
            {
                "id": 1861057,
                "content": [
                    {
                        "username": "aitachii",
                        "content": "If you want a challenge, try doing it in O(1) space."
                    },
                    {
                        "username": "aitachii",
                        "content": "[@charonme](/charonme) Either that or using a string instead of a stack."
                    },
                    {
                        "username": "charonme",
                        "content": "so in-place modification of the input string?"
                    },
                    {
                        "username": "ng812057",
                        "content": "here m not able to solve it in o(n).... and u r talking about o(1)\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "\"/..hidden\"\\nWhy the answer for this test case is \"/..hidden\" instead of \"/hidden\" ?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not able to understand the question .....\\uD83E\\uDD72.\\n"
                    },
                    {
                        "username": "_priyang__",
                        "content": "are these type of questions asked in technical interviews???"
                    },
                    {
                        "username": "sk03167",
                        "content": "I would hope not. Somehow, the code I wrote just luckily happened to pass for edge cases. Otherwise it probably would have taken a couple of failed attempts to solve this one."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "Simple task to practice **Stack** using skills"
                    },
                    {
                        "username": "jahid_shakil",
                        "content": "Try these testcases -\\n```\\n\"/..hidden\"\\n\"/.aa/....hidden\"\\n```"
                    },
                    {
                        "username": "harikrishnacn1999",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "From past 3 days, only the question  from the stack is coming\n\nDon't you found this strange?\n\nWhat's your opinionn"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "Can someone explain me what\"s the deal with \"...\" ?\\n "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The question says that \\'...\\' is treated as a file or directory name"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "***Here is an Approach :-)***\\n\\n- Split the input path string by the appropriate delimiter (e.g., \"/\" for Unix-like systems, \"\\\\\" for Windows) to obtain an array or list of substrings, each representing a component of the file system path.\\n\\n- Create an empty stack or list to store the simplified components of the path.\\n\\n- Iterate over each component s in the array or list of substrings.\\n\\n- For each component s:\\n\\n- If the stack or list is not empty and s is equal to \"..\", then pop the top element (the previous component) from the stack or remove the last element from the list to effectively move up one level in the file system hierarchy.\\n- Otherwise, if s is not equal to \".\" (which represents the current directory), \"..\" (which represents moving up one level in the file system hierarchy), or an empty string (which can occur due to consecutive delimiters in the input path), push s onto the stack or add it to the list to include it as a component of the simplified path.\\n- After iterating over all components of the input path, check if the stack or list is empty. If it is, return the root directory representation (\"/\" for Unix-like systems, \"C:\\\\\" for Windows), as the simplified path.\\n\\n- If the stack or list is not empty, build the simplified path by popping components from the stack or joining elements in the list with the appropriate delimiter. Finally, return the simplified path as a string."
                    }
                ]
            },
            {
                "id": 1861048,
                "content": [
                    {
                        "username": "aitachii",
                        "content": "If you want a challenge, try doing it in O(1) space."
                    },
                    {
                        "username": "aitachii",
                        "content": "[@charonme](/charonme) Either that or using a string instead of a stack."
                    },
                    {
                        "username": "charonme",
                        "content": "so in-place modification of the input string?"
                    },
                    {
                        "username": "ng812057",
                        "content": "here m not able to solve it in o(n).... and u r talking about o(1)\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "\"/..hidden\"\\nWhy the answer for this test case is \"/..hidden\" instead of \"/hidden\" ?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not able to understand the question .....\\uD83E\\uDD72.\\n"
                    },
                    {
                        "username": "_priyang__",
                        "content": "are these type of questions asked in technical interviews???"
                    },
                    {
                        "username": "sk03167",
                        "content": "I would hope not. Somehow, the code I wrote just luckily happened to pass for edge cases. Otherwise it probably would have taken a couple of failed attempts to solve this one."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "Simple task to practice **Stack** using skills"
                    },
                    {
                        "username": "jahid_shakil",
                        "content": "Try these testcases -\\n```\\n\"/..hidden\"\\n\"/.aa/....hidden\"\\n```"
                    },
                    {
                        "username": "harikrishnacn1999",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "From past 3 days, only the question  from the stack is coming\n\nDon't you found this strange?\n\nWhat's your opinionn"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "Can someone explain me what\"s the deal with \"...\" ?\\n "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The question says that \\'...\\' is treated as a file or directory name"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "***Here is an Approach :-)***\\n\\n- Split the input path string by the appropriate delimiter (e.g., \"/\" for Unix-like systems, \"\\\\\" for Windows) to obtain an array or list of substrings, each representing a component of the file system path.\\n\\n- Create an empty stack or list to store the simplified components of the path.\\n\\n- Iterate over each component s in the array or list of substrings.\\n\\n- For each component s:\\n\\n- If the stack or list is not empty and s is equal to \"..\", then pop the top element (the previous component) from the stack or remove the last element from the list to effectively move up one level in the file system hierarchy.\\n- Otherwise, if s is not equal to \".\" (which represents the current directory), \"..\" (which represents moving up one level in the file system hierarchy), or an empty string (which can occur due to consecutive delimiters in the input path), push s onto the stack or add it to the list to include it as a component of the simplified path.\\n- After iterating over all components of the input path, check if the stack or list is empty. If it is, return the root directory representation (\"/\" for Unix-like systems, \"C:\\\\\" for Windows), as the simplified path.\\n\\n- If the stack or list is not empty, build the simplified path by popping components from the stack or joining elements in the list with the appropriate delimiter. Finally, return the simplified path as a string."
                    }
                ]
            },
            {
                "id": 1861046,
                "content": [
                    {
                        "username": "aitachii",
                        "content": "If you want a challenge, try doing it in O(1) space."
                    },
                    {
                        "username": "aitachii",
                        "content": "[@charonme](/charonme) Either that or using a string instead of a stack."
                    },
                    {
                        "username": "charonme",
                        "content": "so in-place modification of the input string?"
                    },
                    {
                        "username": "ng812057",
                        "content": "here m not able to solve it in o(n).... and u r talking about o(1)\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "\"/..hidden\"\\nWhy the answer for this test case is \"/..hidden\" instead of \"/hidden\" ?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not able to understand the question .....\\uD83E\\uDD72.\\n"
                    },
                    {
                        "username": "_priyang__",
                        "content": "are these type of questions asked in technical interviews???"
                    },
                    {
                        "username": "sk03167",
                        "content": "I would hope not. Somehow, the code I wrote just luckily happened to pass for edge cases. Otherwise it probably would have taken a couple of failed attempts to solve this one."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "Simple task to practice **Stack** using skills"
                    },
                    {
                        "username": "jahid_shakil",
                        "content": "Try these testcases -\\n```\\n\"/..hidden\"\\n\"/.aa/....hidden\"\\n```"
                    },
                    {
                        "username": "harikrishnacn1999",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "From past 3 days, only the question  from the stack is coming\n\nDon't you found this strange?\n\nWhat's your opinionn"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "Can someone explain me what\"s the deal with \"...\" ?\\n "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The question says that \\'...\\' is treated as a file or directory name"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "***Here is an Approach :-)***\\n\\n- Split the input path string by the appropriate delimiter (e.g., \"/\" for Unix-like systems, \"\\\\\" for Windows) to obtain an array or list of substrings, each representing a component of the file system path.\\n\\n- Create an empty stack or list to store the simplified components of the path.\\n\\n- Iterate over each component s in the array or list of substrings.\\n\\n- For each component s:\\n\\n- If the stack or list is not empty and s is equal to \"..\", then pop the top element (the previous component) from the stack or remove the last element from the list to effectively move up one level in the file system hierarchy.\\n- Otherwise, if s is not equal to \".\" (which represents the current directory), \"..\" (which represents moving up one level in the file system hierarchy), or an empty string (which can occur due to consecutive delimiters in the input path), push s onto the stack or add it to the list to include it as a component of the simplified path.\\n- After iterating over all components of the input path, check if the stack or list is empty. If it is, return the root directory representation (\"/\" for Unix-like systems, \"C:\\\\\" for Windows), as the simplified path.\\n\\n- If the stack or list is not empty, build the simplified path by popping components from the stack or joining elements in the list with the appropriate delimiter. Finally, return the simplified path as a string."
                    }
                ]
            },
            {
                "id": 1861036,
                "content": [
                    {
                        "username": "aitachii",
                        "content": "If you want a challenge, try doing it in O(1) space."
                    },
                    {
                        "username": "aitachii",
                        "content": "[@charonme](/charonme) Either that or using a string instead of a stack."
                    },
                    {
                        "username": "charonme",
                        "content": "so in-place modification of the input string?"
                    },
                    {
                        "username": "ng812057",
                        "content": "here m not able to solve it in o(n).... and u r talking about o(1)\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "\"/..hidden\"\\nWhy the answer for this test case is \"/..hidden\" instead of \"/hidden\" ?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not able to understand the question .....\\uD83E\\uDD72.\\n"
                    },
                    {
                        "username": "_priyang__",
                        "content": "are these type of questions asked in technical interviews???"
                    },
                    {
                        "username": "sk03167",
                        "content": "I would hope not. Somehow, the code I wrote just luckily happened to pass for edge cases. Otherwise it probably would have taken a couple of failed attempts to solve this one."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "Simple task to practice **Stack** using skills"
                    },
                    {
                        "username": "jahid_shakil",
                        "content": "Try these testcases -\\n```\\n\"/..hidden\"\\n\"/.aa/....hidden\"\\n```"
                    },
                    {
                        "username": "harikrishnacn1999",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "From past 3 days, only the question  from the stack is coming\n\nDon't you found this strange?\n\nWhat's your opinionn"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "Can someone explain me what\"s the deal with \"...\" ?\\n "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The question says that \\'...\\' is treated as a file or directory name"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "***Here is an Approach :-)***\\n\\n- Split the input path string by the appropriate delimiter (e.g., \"/\" for Unix-like systems, \"\\\\\" for Windows) to obtain an array or list of substrings, each representing a component of the file system path.\\n\\n- Create an empty stack or list to store the simplified components of the path.\\n\\n- Iterate over each component s in the array or list of substrings.\\n\\n- For each component s:\\n\\n- If the stack or list is not empty and s is equal to \"..\", then pop the top element (the previous component) from the stack or remove the last element from the list to effectively move up one level in the file system hierarchy.\\n- Otherwise, if s is not equal to \".\" (which represents the current directory), \"..\" (which represents moving up one level in the file system hierarchy), or an empty string (which can occur due to consecutive delimiters in the input path), push s onto the stack or add it to the list to include it as a component of the simplified path.\\n- After iterating over all components of the input path, check if the stack or list is empty. If it is, return the root directory representation (\"/\" for Unix-like systems, \"C:\\\\\" for Windows), as the simplified path.\\n\\n- If the stack or list is not empty, build the simplified path by popping components from the stack or joining elements in the list with the appropriate delimiter. Finally, return the simplified path as a string."
                    }
                ]
            },
            {
                "id": 1861035,
                "content": [
                    {
                        "username": "aitachii",
                        "content": "If you want a challenge, try doing it in O(1) space."
                    },
                    {
                        "username": "aitachii",
                        "content": "[@charonme](/charonme) Either that or using a string instead of a stack."
                    },
                    {
                        "username": "charonme",
                        "content": "so in-place modification of the input string?"
                    },
                    {
                        "username": "ng812057",
                        "content": "here m not able to solve it in o(n).... and u r talking about o(1)\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "\"/..hidden\"\\nWhy the answer for this test case is \"/..hidden\" instead of \"/hidden\" ?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not able to understand the question .....\\uD83E\\uDD72.\\n"
                    },
                    {
                        "username": "_priyang__",
                        "content": "are these type of questions asked in technical interviews???"
                    },
                    {
                        "username": "sk03167",
                        "content": "I would hope not. Somehow, the code I wrote just luckily happened to pass for edge cases. Otherwise it probably would have taken a couple of failed attempts to solve this one."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "Simple task to practice **Stack** using skills"
                    },
                    {
                        "username": "jahid_shakil",
                        "content": "Try these testcases -\\n```\\n\"/..hidden\"\\n\"/.aa/....hidden\"\\n```"
                    },
                    {
                        "username": "harikrishnacn1999",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "From past 3 days, only the question  from the stack is coming\n\nDon't you found this strange?\n\nWhat's your opinionn"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "Can someone explain me what\"s the deal with \"...\" ?\\n "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The question says that \\'...\\' is treated as a file or directory name"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "***Here is an Approach :-)***\\n\\n- Split the input path string by the appropriate delimiter (e.g., \"/\" for Unix-like systems, \"\\\\\" for Windows) to obtain an array or list of substrings, each representing a component of the file system path.\\n\\n- Create an empty stack or list to store the simplified components of the path.\\n\\n- Iterate over each component s in the array or list of substrings.\\n\\n- For each component s:\\n\\n- If the stack or list is not empty and s is equal to \"..\", then pop the top element (the previous component) from the stack or remove the last element from the list to effectively move up one level in the file system hierarchy.\\n- Otherwise, if s is not equal to \".\" (which represents the current directory), \"..\" (which represents moving up one level in the file system hierarchy), or an empty string (which can occur due to consecutive delimiters in the input path), push s onto the stack or add it to the list to include it as a component of the simplified path.\\n- After iterating over all components of the input path, check if the stack or list is empty. If it is, return the root directory representation (\"/\" for Unix-like systems, \"C:\\\\\" for Windows), as the simplified path.\\n\\n- If the stack or list is not empty, build the simplified path by popping components from the stack or joining elements in the list with the appropriate delimiter. Finally, return the simplified path as a string."
                    }
                ]
            },
            {
                "id": 1861004,
                "content": [
                    {
                        "username": "aitachii",
                        "content": "If you want a challenge, try doing it in O(1) space."
                    },
                    {
                        "username": "aitachii",
                        "content": "[@charonme](/charonme) Either that or using a string instead of a stack."
                    },
                    {
                        "username": "charonme",
                        "content": "so in-place modification of the input string?"
                    },
                    {
                        "username": "ng812057",
                        "content": "here m not able to solve it in o(n).... and u r talking about o(1)\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "the_coder_8297",
                        "content": "\"/..hidden\"\\nWhy the answer for this test case is \"/..hidden\" instead of \"/hidden\" ?"
                    },
                    {
                        "username": "rajat_171",
                        "content": "I\\'m not able to understand the question .....\\uD83E\\uDD72.\\n"
                    },
                    {
                        "username": "_priyang__",
                        "content": "are these type of questions asked in technical interviews???"
                    },
                    {
                        "username": "sk03167",
                        "content": "I would hope not. Somehow, the code I wrote just luckily happened to pass for edge cases. Otherwise it probably would have taken a couple of failed attempts to solve this one."
                    },
                    {
                        "username": "dmitryartux",
                        "content": "Simple task to practice **Stack** using skills"
                    },
                    {
                        "username": "jahid_shakil",
                        "content": "Try these testcases -\\n```\\n\"/..hidden\"\\n\"/.aa/....hidden\"\\n```"
                    },
                    {
                        "username": "harikrishnacn1999",
                        "content": " `your inline code...your inline code...` `your inline code...your inline code...`"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "From past 3 days, only the question  from the stack is coming\n\nDon't you found this strange?\n\nWhat's your opinionn"
                    },
                    {
                        "username": "sourabh4pvt",
                        "content": "Can someone explain me what\"s the deal with \"...\" ?\\n "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "The question says that \\'...\\' is treated as a file or directory name"
                    },
                    {
                        "username": "cOde_Ranvir25",
                        "content": "***Here is an Approach :-)***\\n\\n- Split the input path string by the appropriate delimiter (e.g., \"/\" for Unix-like systems, \"\\\\\" for Windows) to obtain an array or list of substrings, each representing a component of the file system path.\\n\\n- Create an empty stack or list to store the simplified components of the path.\\n\\n- Iterate over each component s in the array or list of substrings.\\n\\n- For each component s:\\n\\n- If the stack or list is not empty and s is equal to \"..\", then pop the top element (the previous component) from the stack or remove the last element from the list to effectively move up one level in the file system hierarchy.\\n- Otherwise, if s is not equal to \".\" (which represents the current directory), \"..\" (which represents moving up one level in the file system hierarchy), or an empty string (which can occur due to consecutive delimiters in the input path), push s onto the stack or add it to the list to include it as a component of the simplified path.\\n- After iterating over all components of the input path, check if the stack or list is empty. If it is, return the root directory representation (\"/\" for Unix-like systems, \"C:\\\\\" for Windows), as the simplified path.\\n\\n- If the stack or list is not empty, build the simplified path by popping components from the stack or joining elements in the list with the appropriate delimiter. Finally, return the simplified path as a string."
                    }
                ]
            },
            {
                "id": 1860966,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "Make a problem with peculiar scenarios then don't provide enough examples. That's what leetcode does once in a while, even from the times of problem 71 ! We are in the 2000's (both AD & LC) right now and 71 seems near the time Jesus existed.\n"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "sad when the daily problem is one you\\'ve already solved :("
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Until we encounter '/' we keep a string of all chars and then check if it is '.' || '..' , if not then we consider it a name and and the directory name to the Stack."
                    },
                    {
                        "username": "vetor",
                        "content": "When u realize answer mostly lies in splitting of string  \\uD83D\\uDE09 . then easier than yesterdays question"
                    },
                    {
                        "username": "Maverick767",
                        "content": "Looks like it\\'s the week of stacks! "
                    },
                    {
                        "username": "daring-calf",
                        "content": "Kinda same as yesterday\\'s."
                    },
                    {
                        "username": "vetor",
                        "content": "Anyone understood this question property \\uD83E\\uDD72"
                    },
                    {
                        "username": "AMerrill",
                        "content": "I recommend using \"Testcases\" to actually test the possible inputs."
                    },
                    {
                        "username": "AMerrill",
                        "content": "XD When the problem you skipped because you didn\\'t want to deal with it becomes the problem of the day..."
                    },
                    {
                        "username": "meow_power",
                        "content": "why is it taking me so long to think an approach for this problem. I cant even understand the examples:?"
                    },
                    {
                        "username": "MrCelestis",
                        "content": "I have no idea how this happened to be a medium difficulty problem, there are others in this category which are orders of magnitude harder."
                    }
                ]
            },
            {
                "id": 1860952,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "Make a problem with peculiar scenarios then don't provide enough examples. That's what leetcode does once in a while, even from the times of problem 71 ! We are in the 2000's (both AD & LC) right now and 71 seems near the time Jesus existed.\n"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "sad when the daily problem is one you\\'ve already solved :("
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Until we encounter '/' we keep a string of all chars and then check if it is '.' || '..' , if not then we consider it a name and and the directory name to the Stack."
                    },
                    {
                        "username": "vetor",
                        "content": "When u realize answer mostly lies in splitting of string  \\uD83D\\uDE09 . then easier than yesterdays question"
                    },
                    {
                        "username": "Maverick767",
                        "content": "Looks like it\\'s the week of stacks! "
                    },
                    {
                        "username": "daring-calf",
                        "content": "Kinda same as yesterday\\'s."
                    },
                    {
                        "username": "vetor",
                        "content": "Anyone understood this question property \\uD83E\\uDD72"
                    },
                    {
                        "username": "AMerrill",
                        "content": "I recommend using \"Testcases\" to actually test the possible inputs."
                    },
                    {
                        "username": "AMerrill",
                        "content": "XD When the problem you skipped because you didn\\'t want to deal with it becomes the problem of the day..."
                    },
                    {
                        "username": "meow_power",
                        "content": "why is it taking me so long to think an approach for this problem. I cant even understand the examples:?"
                    },
                    {
                        "username": "MrCelestis",
                        "content": "I have no idea how this happened to be a medium difficulty problem, there are others in this category which are orders of magnitude harder."
                    }
                ]
            },
            {
                "id": 1860914,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "Make a problem with peculiar scenarios then don't provide enough examples. That's what leetcode does once in a while, even from the times of problem 71 ! We are in the 2000's (both AD & LC) right now and 71 seems near the time Jesus existed.\n"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "sad when the daily problem is one you\\'ve already solved :("
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Until we encounter '/' we keep a string of all chars and then check if it is '.' || '..' , if not then we consider it a name and and the directory name to the Stack."
                    },
                    {
                        "username": "vetor",
                        "content": "When u realize answer mostly lies in splitting of string  \\uD83D\\uDE09 . then easier than yesterdays question"
                    },
                    {
                        "username": "Maverick767",
                        "content": "Looks like it\\'s the week of stacks! "
                    },
                    {
                        "username": "daring-calf",
                        "content": "Kinda same as yesterday\\'s."
                    },
                    {
                        "username": "vetor",
                        "content": "Anyone understood this question property \\uD83E\\uDD72"
                    },
                    {
                        "username": "AMerrill",
                        "content": "I recommend using \"Testcases\" to actually test the possible inputs."
                    },
                    {
                        "username": "AMerrill",
                        "content": "XD When the problem you skipped because you didn\\'t want to deal with it becomes the problem of the day..."
                    },
                    {
                        "username": "meow_power",
                        "content": "why is it taking me so long to think an approach for this problem. I cant even understand the examples:?"
                    },
                    {
                        "username": "MrCelestis",
                        "content": "I have no idea how this happened to be a medium difficulty problem, there are others in this category which are orders of magnitude harder."
                    }
                ]
            },
            {
                "id": 1860898,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "Make a problem with peculiar scenarios then don't provide enough examples. That's what leetcode does once in a while, even from the times of problem 71 ! We are in the 2000's (both AD & LC) right now and 71 seems near the time Jesus existed.\n"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "sad when the daily problem is one you\\'ve already solved :("
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Until we encounter '/' we keep a string of all chars and then check if it is '.' || '..' , if not then we consider it a name and and the directory name to the Stack."
                    },
                    {
                        "username": "vetor",
                        "content": "When u realize answer mostly lies in splitting of string  \\uD83D\\uDE09 . then easier than yesterdays question"
                    },
                    {
                        "username": "Maverick767",
                        "content": "Looks like it\\'s the week of stacks! "
                    },
                    {
                        "username": "daring-calf",
                        "content": "Kinda same as yesterday\\'s."
                    },
                    {
                        "username": "vetor",
                        "content": "Anyone understood this question property \\uD83E\\uDD72"
                    },
                    {
                        "username": "AMerrill",
                        "content": "I recommend using \"Testcases\" to actually test the possible inputs."
                    },
                    {
                        "username": "AMerrill",
                        "content": "XD When the problem you skipped because you didn\\'t want to deal with it becomes the problem of the day..."
                    },
                    {
                        "username": "meow_power",
                        "content": "why is it taking me so long to think an approach for this problem. I cant even understand the examples:?"
                    },
                    {
                        "username": "MrCelestis",
                        "content": "I have no idea how this happened to be a medium difficulty problem, there are others in this category which are orders of magnitude harder."
                    }
                ]
            },
            {
                "id": 1860878,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "Make a problem with peculiar scenarios then don't provide enough examples. That's what leetcode does once in a while, even from the times of problem 71 ! We are in the 2000's (both AD & LC) right now and 71 seems near the time Jesus existed.\n"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "sad when the daily problem is one you\\'ve already solved :("
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Until we encounter '/' we keep a string of all chars and then check if it is '.' || '..' , if not then we consider it a name and and the directory name to the Stack."
                    },
                    {
                        "username": "vetor",
                        "content": "When u realize answer mostly lies in splitting of string  \\uD83D\\uDE09 . then easier than yesterdays question"
                    },
                    {
                        "username": "Maverick767",
                        "content": "Looks like it\\'s the week of stacks! "
                    },
                    {
                        "username": "daring-calf",
                        "content": "Kinda same as yesterday\\'s."
                    },
                    {
                        "username": "vetor",
                        "content": "Anyone understood this question property \\uD83E\\uDD72"
                    },
                    {
                        "username": "AMerrill",
                        "content": "I recommend using \"Testcases\" to actually test the possible inputs."
                    },
                    {
                        "username": "AMerrill",
                        "content": "XD When the problem you skipped because you didn\\'t want to deal with it becomes the problem of the day..."
                    },
                    {
                        "username": "meow_power",
                        "content": "why is it taking me so long to think an approach for this problem. I cant even understand the examples:?"
                    },
                    {
                        "username": "MrCelestis",
                        "content": "I have no idea how this happened to be a medium difficulty problem, there are others in this category which are orders of magnitude harder."
                    }
                ]
            },
            {
                "id": 1860847,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "Make a problem with peculiar scenarios then don't provide enough examples. That's what leetcode does once in a while, even from the times of problem 71 ! We are in the 2000's (both AD & LC) right now and 71 seems near the time Jesus existed.\n"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "sad when the daily problem is one you\\'ve already solved :("
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Until we encounter '/' we keep a string of all chars and then check if it is '.' || '..' , if not then we consider it a name and and the directory name to the Stack."
                    },
                    {
                        "username": "vetor",
                        "content": "When u realize answer mostly lies in splitting of string  \\uD83D\\uDE09 . then easier than yesterdays question"
                    },
                    {
                        "username": "Maverick767",
                        "content": "Looks like it\\'s the week of stacks! "
                    },
                    {
                        "username": "daring-calf",
                        "content": "Kinda same as yesterday\\'s."
                    },
                    {
                        "username": "vetor",
                        "content": "Anyone understood this question property \\uD83E\\uDD72"
                    },
                    {
                        "username": "AMerrill",
                        "content": "I recommend using \"Testcases\" to actually test the possible inputs."
                    },
                    {
                        "username": "AMerrill",
                        "content": "XD When the problem you skipped because you didn\\'t want to deal with it becomes the problem of the day..."
                    },
                    {
                        "username": "meow_power",
                        "content": "why is it taking me so long to think an approach for this problem. I cant even understand the examples:?"
                    },
                    {
                        "username": "MrCelestis",
                        "content": "I have no idea how this happened to be a medium difficulty problem, there are others in this category which are orders of magnitude harder."
                    }
                ]
            },
            {
                "id": 1860829,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "Make a problem with peculiar scenarios then don't provide enough examples. That's what leetcode does once in a while, even from the times of problem 71 ! We are in the 2000's (both AD & LC) right now and 71 seems near the time Jesus existed.\n"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "sad when the daily problem is one you\\'ve already solved :("
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Until we encounter '/' we keep a string of all chars and then check if it is '.' || '..' , if not then we consider it a name and and the directory name to the Stack."
                    },
                    {
                        "username": "vetor",
                        "content": "When u realize answer mostly lies in splitting of string  \\uD83D\\uDE09 . then easier than yesterdays question"
                    },
                    {
                        "username": "Maverick767",
                        "content": "Looks like it\\'s the week of stacks! "
                    },
                    {
                        "username": "daring-calf",
                        "content": "Kinda same as yesterday\\'s."
                    },
                    {
                        "username": "vetor",
                        "content": "Anyone understood this question property \\uD83E\\uDD72"
                    },
                    {
                        "username": "AMerrill",
                        "content": "I recommend using \"Testcases\" to actually test the possible inputs."
                    },
                    {
                        "username": "AMerrill",
                        "content": "XD When the problem you skipped because you didn\\'t want to deal with it becomes the problem of the day..."
                    },
                    {
                        "username": "meow_power",
                        "content": "why is it taking me so long to think an approach for this problem. I cant even understand the examples:?"
                    },
                    {
                        "username": "MrCelestis",
                        "content": "I have no idea how this happened to be a medium difficulty problem, there are others in this category which are orders of magnitude harder."
                    }
                ]
            },
            {
                "id": 1860810,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "Make a problem with peculiar scenarios then don't provide enough examples. That's what leetcode does once in a while, even from the times of problem 71 ! We are in the 2000's (both AD & LC) right now and 71 seems near the time Jesus existed.\n"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "sad when the daily problem is one you\\'ve already solved :("
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Until we encounter '/' we keep a string of all chars and then check if it is '.' || '..' , if not then we consider it a name and and the directory name to the Stack."
                    },
                    {
                        "username": "vetor",
                        "content": "When u realize answer mostly lies in splitting of string  \\uD83D\\uDE09 . then easier than yesterdays question"
                    },
                    {
                        "username": "Maverick767",
                        "content": "Looks like it\\'s the week of stacks! "
                    },
                    {
                        "username": "daring-calf",
                        "content": "Kinda same as yesterday\\'s."
                    },
                    {
                        "username": "vetor",
                        "content": "Anyone understood this question property \\uD83E\\uDD72"
                    },
                    {
                        "username": "AMerrill",
                        "content": "I recommend using \"Testcases\" to actually test the possible inputs."
                    },
                    {
                        "username": "AMerrill",
                        "content": "XD When the problem you skipped because you didn\\'t want to deal with it becomes the problem of the day..."
                    },
                    {
                        "username": "meow_power",
                        "content": "why is it taking me so long to think an approach for this problem. I cant even understand the examples:?"
                    },
                    {
                        "username": "MrCelestis",
                        "content": "I have no idea how this happened to be a medium difficulty problem, there are others in this category which are orders of magnitude harder."
                    }
                ]
            },
            {
                "id": 1860807,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "Make a problem with peculiar scenarios then don't provide enough examples. That's what leetcode does once in a while, even from the times of problem 71 ! We are in the 2000's (both AD & LC) right now and 71 seems near the time Jesus existed.\n"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "sad when the daily problem is one you\\'ve already solved :("
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Until we encounter '/' we keep a string of all chars and then check if it is '.' || '..' , if not then we consider it a name and and the directory name to the Stack."
                    },
                    {
                        "username": "vetor",
                        "content": "When u realize answer mostly lies in splitting of string  \\uD83D\\uDE09 . then easier than yesterdays question"
                    },
                    {
                        "username": "Maverick767",
                        "content": "Looks like it\\'s the week of stacks! "
                    },
                    {
                        "username": "daring-calf",
                        "content": "Kinda same as yesterday\\'s."
                    },
                    {
                        "username": "vetor",
                        "content": "Anyone understood this question property \\uD83E\\uDD72"
                    },
                    {
                        "username": "AMerrill",
                        "content": "I recommend using \"Testcases\" to actually test the possible inputs."
                    },
                    {
                        "username": "AMerrill",
                        "content": "XD When the problem you skipped because you didn\\'t want to deal with it becomes the problem of the day..."
                    },
                    {
                        "username": "meow_power",
                        "content": "why is it taking me so long to think an approach for this problem. I cant even understand the examples:?"
                    },
                    {
                        "username": "MrCelestis",
                        "content": "I have no idea how this happened to be a medium difficulty problem, there are others in this category which are orders of magnitude harder."
                    }
                ]
            },
            {
                "id": 1817683,
                "content": [
                    {
                        "username": "sarpalmadhav",
                        "content": "Make a problem with peculiar scenarios then don't provide enough examples. That's what leetcode does once in a while, even from the times of problem 71 ! We are in the 2000's (both AD & LC) right now and 71 seems near the time Jesus existed.\n"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "sad when the daily problem is one you\\'ve already solved :("
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Until we encounter '/' we keep a string of all chars and then check if it is '.' || '..' , if not then we consider it a name and and the directory name to the Stack."
                    },
                    {
                        "username": "vetor",
                        "content": "When u realize answer mostly lies in splitting of string  \\uD83D\\uDE09 . then easier than yesterdays question"
                    },
                    {
                        "username": "Maverick767",
                        "content": "Looks like it\\'s the week of stacks! "
                    },
                    {
                        "username": "daring-calf",
                        "content": "Kinda same as yesterday\\'s."
                    },
                    {
                        "username": "vetor",
                        "content": "Anyone understood this question property \\uD83E\\uDD72"
                    },
                    {
                        "username": "AMerrill",
                        "content": "I recommend using \"Testcases\" to actually test the possible inputs."
                    },
                    {
                        "username": "AMerrill",
                        "content": "XD When the problem you skipped because you didn\\'t want to deal with it becomes the problem of the day..."
                    },
                    {
                        "username": "meow_power",
                        "content": "why is it taking me so long to think an approach for this problem. I cant even understand the examples:?"
                    },
                    {
                        "username": "MrCelestis",
                        "content": "I have no idea how this happened to be a medium difficulty problem, there are others in this category which are orders of magnitude harder."
                    }
                ]
            }
        ]
    },
    {
        "title": "Excel Sheet Column Number",
        "question_content": "<p>Given a string <code>columnTitle</code> that represents the column title as appears in an Excel sheet, return <em>its corresponding column number</em>.</p>\n\n<p>For example:</p>\n\n<pre>\nA -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28 \n...\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnTitle = &quot;A&quot;\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnTitle = &quot;AB&quot;\n<strong>Output:</strong> 28\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> columnTitle = &quot;ZY&quot;\n<strong>Output:</strong> 701\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= columnTitle.length &lt;= 7</code></li>\n\t<li><code>columnTitle</code> consists only of uppercase English letters.</li>\n\t<li><code>columnTitle</code> is in the range <code>[&quot;A&quot;, &quot;FXSHRXW&quot;]</code>.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 1790101,
                "title": "c-4-lines-easy-to-understand-0ms-100",
                "content": "# 171. Excel Sheet Column Number\\n**KNOCKCAT**\\n* **Someone is intentionally downvoting answer , if you cannot support please dont spread hate**\\n\\n```\\n1. Easy C++\\n2. Line by Line Explanation with Comments.\\n3. Detailed Explanation \\u2705\\n4. 4 Lines 0ms , 100 % faster.\\n5. Please Upvote if it helps\\u2B06\\uFE0F\\n6. Link to my Github Profile contains a repository of Leetcode with all my Solutions. \\u2B07\\uFE0F\\n\\t// \\uD83D\\uDE09If you Like the repository don\\'t foget to star the repository\\uD83D\\uDE09 \\n```\\n\\n\\n[LeetCode](https://github.com/knockcat/Leetcode)                 **Link to LeetCode Repository**\\n\\nPlease upvote my comment so that i get to win the 2022 giveaway and motivate to make such discussion post.\\n**Happy new Year 2023 to all of you**\\n**keep solving keep improving**\\nLink To comment\\n[Leetcode Give away comment](https://leetcode.com/discuss/general-discussion/2946993/2022-Annual-Badge-and-the-Giveaway/1734919)\\n\\n![image](https://assets.leetcode.com/users/images/8e18cdad-9e69-4a3a-a6a0-86f3e7cc3898_1645490636.3928394.png)\\n\\n\\n* **EXPLANATION**\\n```\\n1. There are 26 letters in our alphabet and we start counting from 1, not zero.\\n   So \\'Z\\' is 26.\\n2. The rest of the combinations start from a base 26\\n\\nAA --> 26*1+ 1 = 27 (A == 1)\\nAB --> 26*1+ 2 = 28 (B == 2)\\nAC -->26*1 + 3 = 29 (C == 3)\\n.....\\n\\nSo we can write like this:\\n\\nresult = 0\\nd = s[i](char) - \\'A\\' + 1 (we used  s[i] -  \\'A\\' to convert the letter to a number like it\\'s going to be C)\\nresult = result* 26 + d\\n\\nIf the given input is only one letter, it will automatically take the value s[i] - \\'A\\' + 1 as the first result is 0.\\n```\\n\\n* **Some More Explanation**\\n\\n```\\n1. For every additional digit of the string, we multiply the value of the digit by 26^n\\n2. here n is the number of digits it is away from the one\\'s place.\\n3. This is similar to how the number 254 could be broken down as this:\\n\\t (2 x 10 x 10) + (5 x 10) + (4).\\n4. The reason we use 26 instead of 10 is because 26 is our base.\\n\\nFor s = \"BCM\" the final solution would be (2 x 26 x 26) + (3 x 26) + (13)\\n\\nWe could do this process iteratively. Start at looking at the first digit \"B\". Add the int equivalent of \"B\" to the running sum and continue. \\nEvery time we look at the following digit multiply our running sum by 26 before adding the next digit to signify we are changing places. Example below:\\n\\n\"B\" = 2\\n\"BC\" = (2)26 + 3\\n\"BCM\" = (2(26) + 3)26 + 13\\n```\\n\\n* **Time Complexity : O(n)**       *one scan of string , n is number of characters in the string* \\n\\n* **CODE WITH EXPLANATION**\\n```\\n\\t\\t\\t\\t\\t\\t\\t// \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int result = 0;\\n        for(char c : columnTitle)\\n        {\\n\\t\\t\\t//d = s[i](char) - \\'A\\' + 1 (we used  s[i] -  \\'A\\' to convert the letter to a number like it\\'s going to be C)\\n\\n            int d = c - \\'A\\' + 1;\\n            result = result * 26 + d;\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n1. Easy C++\\n2. Line by Line Explanation with Comments.\\n3. Detailed Explanation \\u2705\\n4. 4 Lines 0ms , 100 % faster.\\n5. Please Upvote if it helps\\u2B06\\uFE0F\\n6. Link to my Github Profile contains a repository of Leetcode with all my Solutions. \\u2B07\\uFE0F\\n\\t// \\uD83D\\uDE09If you Like the repository don\\'t foget to star the repository\\uD83D\\uDE09 \\n```\n```\\n1. There are 26 letters in our alphabet and we start counting from 1, not zero.\\n   So \\'Z\\' is 26.\\n2. The rest of the combinations start from a base 26\\n\\nAA --> 26*1+ 1 = 27 (A == 1)\\nAB --> 26*1+ 2 = 28 (B == 2)\\nAC -->26*1 + 3 = 29 (C == 3)\\n.....\\n\\nSo we can write like this:\\n\\nresult = 0\\nd = s[i](char) - \\'A\\' + 1 (we used  s[i] -  \\'A\\' to convert the letter to a number like it\\'s going to be C)\\nresult = result* 26 + d\\n\\nIf the given input is only one letter, it will automatically take the value s[i] - \\'A\\' + 1 as the first result is 0.\\n```\n```\\n1. For every additional digit of the string, we multiply the value of the digit by 26^n\\n2. here n is the number of digits it is away from the one\\'s place.\\n3. This is similar to how the number 254 could be broken down as this:\\n\\t (2 x 10 x 10) + (5 x 10) + (4).\\n4. The reason we use 26 instead of 10 is because 26 is our base.\\n\\nFor s = \"BCM\" the final solution would be (2 x 26 x 26) + (3 x 26) + (13)\\n\\nWe could do this process iteratively. Start at looking at the first digit \"B\". Add the int equivalent of \"B\" to the running sum and continue. \\nEvery time we look at the following digit multiply our running sum by 26 before adding the next digit to signify we are changing places. Example below:\\n\\n\"B\" = 2\\n\"BC\" = (2)26 + 3\\n\"BCM\" = (2(26) + 3)26 + 13\\n```\n```\\n\\t\\t\\t\\t\\t\\t\\t// \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09Please upvote if it helps \\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\uD83D\\uDE09\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int result = 0;\\n        for(char c : columnTitle)\\n        {\\n\\t\\t\\t//d = s[i](char) - \\'A\\' + 1 (we used  s[i] -  \\'A\\' to convert the letter to a number like it\\'s going to be C)\\n\\n            int d = c - \\'A\\' + 1;\\n            result = result * 26 + d;\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790567,
                "title": "python3-clean-solution-explained",
                "content": "**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**\\n\\nEssentially, what we asked to do here is to convert a number in the base 26 numeral system to a decimal number. This is a standard algorithm, where we iterate over the digits from right to left and multiply them by the base to the power of the position of the digit. To translate a letter to a number we use the Python method `ord` which returns the Unicode code of the letter. By subtracting the code by 64, we can map letters to the numbers from 1 to 26.\\n\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        ans, pos = 0, 0\\n        for letter in reversed(columnTitle):\\n            digit = ord(letter)-64\\n            ans += digit * 26**pos\\n            pos += 1\\n            \\n        return ans\\n```\\n\\n**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        ans, pos = 0, 0\\n        for letter in reversed(columnTitle):\\n            digit = ord(letter)-64\\n            ans += digit * 26**pos\\n            pos += 1\\n            \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 52154,
                "title": "concise-java-solution-with-explanation",
                "content": "For every additional digit of the string, we multiply the value of the digit by 26^n where n is the number of digits it is away from the one's place. This is similar to how the number 254 could be broken down as this: (2 x 10 x 10) + (5 x 10) + (4). The reason we use 26 instead of 10 is because 26 is our base.\\n\\nFor s = \"BCM\" the final solution would be (2 x 26 x 26) + (3 x 26) + (13)\\n\\nWe could do this process iteratively. Start at looking at the first digit \"B\". Add the int equivalent of \"B\" to the running sum and continue. Every time we look at the following digit multiply our running sum by 26 before adding the next digit to signify we are changing places. Example below:\\n\\n\"B\" = 2\\n\"BC\" = (**2**)26 + 3\\n\"BCM\" = (**2(26) + 3**)26 + 13\\n\\nif you expand this expression you will see it is identical to the example above  :).\\n```\\npublic class Solution {\\n    public int titleToNumber(String s) {\\n        if (s == null) return -1;\\n        int sum = 0;\\n        // for each loop so we don't need to mess with index values.\\n        for (char c : s.toUpperCase().toCharArray()) {\\n            sum *= 26;\\n            sum += c - 'A' + 1;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Solution {\\n    public int titleToNumber(String s) {\\n        if (s == null) return -1;\\n        int sum = 0;\\n        // for each loop so we don't need to mess with index values.\\n        for (char c : s.toUpperCase().toCharArray()) {\\n            sum *= 26;\\n            sum += c - 'A' + 1;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 52107,
                "title": "my-solutions-in-3-languages-does-any-one-have-one-line-solution-in-java-or-c",
                "content": "Java:\\n\\n    int result = 0;\\n    for (int i = 0; i < s.length(); result = result * 26 + (s.charAt(i) - 'A' + 1), i++);\\n    return result;\\n\\n\\nC++:\\n\\n    int result = 0;\\n    for (int i = 0; i < s.size(); result = result * 26 + (s.at(i) - 'A' + 1), i++);\\n    return result;\\n\\n\\nPython:\\n\\n    return reduce(lambda x, y : x * 26 + y, [ord(c) - 64 for c in list(s)])\\n\\nPython version is beautiful because reduce function and list comprehensive.\\n\\nI don't know whether exist similar approach to achieve one line solution in Java or C++.\\nOne possible way is defining another method like this:\\n\\n    public int titleToNumber(int num, String s)\\n\\nto store previous result and make recursive call.\\nBut this add much more lines.",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "Java:\\n\\n    int result = 0;\\n    for (int i = 0; i < s.length(); result = result * 26 + (s.charAt(i) - 'A' + 1), i++);\\n    return result;\\n\\n\\nC++:\\n\\n    int result = 0;\\n    for (int i = 0; i < s.size(); result = result * 26 + (s.at(i) - 'A' + 1), i++);\\n    return result;\\n\\n\\nPython:\\n\\n    return reduce(lambda x, y : x * 26 + y, [ord(c) - 64 for c in list(s)])\\n\\nPython version is beautiful because reduce function and list comprehensive.\\n\\nI don't know whether exist similar approach to achieve one line solution in Java or C++.\\nOne possible way is defining another method like this:\\n\\n    public int titleToNumber(int num, String s)\\n\\nto store previous result and make recursive call.\\nBut this add much more lines.",
                "codeTag": "Unknown"
            },
            {
                "id": 52304,
                "title": "python-concise-solution",
                "content": "\\n    def titleToNumber(self, s):\\n        res = 0\\n        for c in s:\\n            res = res*26 + ord(c)-ord(\\'A\\')+1\\n        return res",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n    def titleToNumber(self, s):\\n        res = 0\\n        for c in s:\\n            res = res*26 + ord(c)-ord(\\'A\\')+1\\n        return res",
                "codeTag": "Python3"
            },
            {
                "id": 818469,
                "title": "python-the-only-explanation-that-is-understandable-and-makes-sense-to-those-who-just-start",
                "content": "**Disclaimer**: I hate when the \"Discussion\" session has tons of posts that contain just a few lines of code with indecipherable variables and an impossible-to-follow logic. For this question, I haven\\'t found a single solution that a novice user can follow and understand.  ```ord()``` is everywhere, etc. \\n\\n**Explanation:**\\nIt\\'s easier to start with a different and, probably, easier problem. How to convert a string of digits to a number. Let\\'s say, you\\'re given \\'67\\' and you want to return 67. Sure you can do \\n``` return int(s)``` \\nbut if you are here for this, you don\\'t want to be here. Let\\'s assume, to make the explanation shorter, you can apply ```int()``` only to single digits but not to the whole number.\\nYou\\'re given \\'67.\\'\\nLet\\'s start reading this line element by element and initialise a variable ```res = 0``` that will contain the final result.\\nWe will put the integer value of the first string\\'s element to ```res```. Now ```res``` contains 6. Are we done with the string? No. Let\\'s read the next character.\\nThe next character is 7. If we just add 7 to ```res```, we will get 13. It\\'s not what we want. We want to take whatever is stored in ```res``` already, multiply it by ten and add seven. This way we will take six, turn it into 60, add 7, and resave into ```res```. Are we done with the line? Yes. Then just return ```res```.\\n\\nHere is the whole thing encoded:\\n```\\ndef str2num(s):\\n    res = 0\\n    for digit in s:\\n        res = res * 10 + int(digit)\\n    return res\\n```\\n\\nBy the way, you can also do it recursively:\\n```\\ndef str2num_recursively(s):\\n    def _helper(s, res):\\n        if not s: return res\\n        return _helper(s[1:], res * 10 + int(s[0]))\\n    return _helper(s, 0)\\n```\\nBut the secret is: **NEVER USE RECURSION UNLESS IT\\'S A DFS PROBLEM**. **In real life**, once you finally get that fat FAANG job, **NEVER USE RECURSION**.\\n\\nLet\\'s get back to 171. The idea here is the same with two differences:\\n1) We will use a dictionary to create a mapping \"character: number.\" \\n2) We will use 26 instead of 10\\n\\n```\\ndef titleToNumber(s):\\n    res = 0\\n    val = [i for i in range(1, 27)]\\n    letters = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\\n    d = dict(zip(letters, val))\\n    for ch in s:\\n        res = res * 26 + d[ch]\\n    return res\\n```\\nAs you can see, res is calculated exactly the same way as in the first portion of code above. We just use 26 instead of 10, and ```d[ch]``` instead of ```int(s[0])```.\\n\\nAnd for those who don\\'t listen to good advices, the recursive implementation:\\n```\\ndef titleToNumber_recur(s):\\n    val = [i for i in range(1, 27)]\\n    letters = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\\n    d = dict(zip(letters, val))\\n    def _helper(s, res, d):\\n        if not s: return res\\n        res = res * 26 + d[s[0]]\\n        return _helper(s[1:], res, d)\\n    return _helper(s, 0, d)\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```ord()```\n``` return int(s)```\n```int()```\n```res = 0```\n```res```\n```res```\n```res```\n```res```\n```res```\n```res```\n```\\ndef str2num(s):\\n    res = 0\\n    for digit in s:\\n        res = res * 10 + int(digit)\\n    return res\\n```\n```\\ndef str2num_recursively(s):\\n    def _helper(s, res):\\n        if not s: return res\\n        return _helper(s[1:], res * 10 + int(s[0]))\\n    return _helper(s, 0)\\n```\n```\\ndef titleToNumber(s):\\n    res = 0\\n    val = [i for i in range(1, 27)]\\n    letters = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\\n    d = dict(zip(letters, val))\\n    for ch in s:\\n        res = res * 26 + d[ch]\\n    return res\\n```\n```d[ch]```\n```int(s[0])```\n```\\ndef titleToNumber_recur(s):\\n    val = [i for i in range(1, 27)]\\n    letters = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\\n    d = dict(zip(letters, val))\\n    def _helper(s, res, d):\\n        if not s: return res\\n        res = res * 26 + d[s[0]]\\n        return _helper(s[1:], res, d)\\n    return _helper(s, 0, d)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 52091,
                "title": "here-is-my-java-solution",
                "content": "Here is my Java solution. Similar to the number to title.\\n\\n    public int titleToNumber(String s) {\\n        int result = 0;\\n        for(int i = 0 ; i < s.length(); i++) {\\n          result = result * 26 + (s.charAt(i) - 'A' + 1);\\n        }\\n        return result;\\n      }",
                "solutionTags": [],
                "code": "Here is my Java solution. Similar to the number to title.\\n\\n    public int titleToNumber(String s) {\\n        int result = 0;\\n        for(int i = 0 ; i < s.length(); i++) {\\n          result = result * 26 + (s.charAt(i) - 'A' + 1);\\n        }\\n        return result;\\n      }",
                "codeTag": "Unknown"
            },
            {
                "id": 52289,
                "title": "explanation-in-python",
                "content": "Observe that this is basically the same thing as converting between base 26 and base 10.\\n\\nStart with this:\\n\\n    def titleToNumber(s):\\n        s = s[::-1]\\n        sum = 0\\n        for exp, char in enumerate(s):\\n            sum += (ord(char) - 65 + 1) * (26 ** exp)\\n        return sum\\n\\nThis reverses the string, starts a sum at 0, creates a list of tuples of the index of each character in the reversed string (which corresponds to the exponent) and character itself. Add them up. We take ord(char) to turn the character to an integer, subtract 65 = ord('A') from it, and add one because we want A to equal 1, not 0.\\n\\nYou can do this in one line:\\n\\n    def titleToNumber(s):\\n        return sum((ord(char) - 64) * (26 ** exp) for exp, char in enumerate(s[::-1]))",
                "solutionTags": [],
                "code": "Observe that this is basically the same thing as converting between base 26 and base 10.\\n\\nStart with this:\\n\\n    def titleToNumber(s):\\n        s = s[::-1]\\n        sum = 0\\n        for exp, char in enumerate(s):\\n            sum += (ord(char) - 65 + 1) * (26 ** exp)\\n        return sum\\n\\nThis reverses the string, starts a sum at 0, creates a list of tuples of the index of each character in the reversed string (which corresponds to the exponent) and character itself. Add them up. We take ord(char) to turn the character to an integer, subtract 65 = ord('A') from it, and add one because we want A to equal 1, not 0.\\n\\nYou can do this in one line:\\n\\n    def titleToNumber(s):\\n        return sum((ord(char) - 64) * (26 ** exp) for exp, char in enumerate(s[::-1]))",
                "codeTag": "Python3"
            },
            {
                "id": 783383,
                "title": "python-oneliner-base-26-numeral-system-explained",
                "content": "Note, that all depends on the place we have some symbol, for example:\\nfor `s = DACB`:\\n1. We have symbol `B` on the last place, with stands for `2`\\n2. We have symbol `C` on the previous place, which stands for `3*26`.\\n3. We have symbol `A` on the previous place, which stands for `1*26*26`.\\n4. Finally, we have symbol `D` on the first place, which stands for `4*26*26*26`.\\n5. What we need to return in this case is `2+3*26+1*26*26+4*26*26*26`.\\n\\nNote, that is it very similar to base `26` numeral system, but not exactly it, here we do not have zeros. All this can be written as oneliner.\\n\\n**Complexity**: Time complexity of this oneliner is `O(n log n)`, where `n` is length of string. We need to iterate over all string and use `26**i`. Time complexity can be easily reduced to `O(n)`. Space complexity is `O(n)`, which also can be reduced to `O(1)`. But in this problem `n` is very small: `n<=7`, so it will not make a lot of difference\\n\\n```\\nclass Solution:\\n    def titleToNumber(self, s):\\n        return sum([(ord(T)-ord(\"A\")+1)*26**i for i,T in enumerate(s[::-1])])\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, s):\\n        return sum([(ord(T)-ord(\"A\")+1)*26**i for i,T in enumerate(s[::-1])])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 52124,
                "title": "my-2ms-java-solution",
                "content": "    public class Solution {\\n        public int titleToNumber(String s) {\\n        \\n            int result  = 0;\\n            for (int i = 0; i < s.length(); i++){\\n                result *= 26;\\n                result += ((s.charAt(i) - 'A') + 1);    \\n            }\\n        \\n            return result;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int titleToNumber(String s) {\\n        \\n            int result  = 0;\\n            for (int i = 0; i < s.length(); i++){\\n                result *= 26;\\n                result += ((s.charAt(i) - 'A') + 1);    \\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1790367,
                "title": "c-detailed-explanation-w-comments-faster-than-100-easy-understanding",
                "content": "***Brief note about Question-***\\n* We have to *return the corresponding column number of a string as it appears in the Excel Sheet.*\\n```\\nLet\\'s take an example not given in question -\\nSuppose our string given to us is s = \"AZ\"\\n\\nSo, the representation of our string should be \\npos of \\'Z\\' in alphabtes is: 26\\npos of \\'A\\' in alphabets is: 1\\n\\nBut, In string \"AZ\", \\n\\'Z\\' is on unit place and it\\'s pos value in alphabets is 26\\nand \\'A\\' is on ten\\'s digit and it\\'s pos value in alphabets is 1\\nso, \\'A\\' should be multiplied with 26.\\nTherefore, Final answer should be-\\n\"AZ\"\\n(1 * (26 ^ 1)) + (26 * (26 ^ 0))\\n(1 * 26) + (26 * 1)\\n(26) + (26)\\n52\\n\\nThe final answer should be 52.\\n```\\n____________\\n***Solution - I (Accepted)-***\\n* Suppose if we have given a binary number and they ask us to convert that binary number into corrospnding decimal number, then how we will proceed.\\n```\\nSay, if they given us a binary number --> 11\\nthen, how we will proceed,\\nWe reach to our answer something like this, \\n(1 * ( 2 ^ 1)) + (1 * ( 2 ^ 0))\\n(2) + (1)\\n3\\n```\\n* We consider it as the same question but only in the form of string.\\n* In binary, only two values are possible so the base is 2.\\n* **In our alphabets, 26 values are possible so the base should be 26.**\\n* If only one character is present, then obviously we know it\\'s position is our answer.\\n______\\n```\\nTime Complexity --> O(n) // as we are using traversing string only once and n is the length of the string. \\nSpace Complexity --> O(1) // as we are not using anything from our side.\\n\\nIt paases [ 1002 / 1002] in built test cases with faster than 100.00% of C++ online submissions\\n```\\n_________\\n![image](https://assets.leetcode.com/users/images/4adb6907-7939-4974-9c28-e31be07a96ac_1645499732.7979946.png)\\n______________________\\n**Code (C++)**\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int n = s.length(); // extracting length of the string\\n        \\n        if(n == 1) // if length is only 1\\n        {\\n            return (s[0] - \\'A\\') + 1; //then return only that position\\n        }\\n        \\n        int increase = 0; // variable used to increase the multiplcation\\n        int ans = 0; // variable used to store answer\\n        \\n        for(int i = n - 1; i >= 0; i--) // start traversing string from back\\n        {\\n            int pos = (s[i] - \\'A\\') + 1; // extracting position\\n            \\n            ans = ans + (pos * pow(26, increase)); // with base 26, do further calculation\\n            increase++; // increase variable\\n        }\\n        \\n        return ans; // finally return the answer\\n    }\\n};\\n```\\n***`If u find this useful , please consider to give a upvote!!`***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nLet\\'s take an example not given in question -\\nSuppose our string given to us is s = \"AZ\"\\n\\nSo, the representation of our string should be \\npos of \\'Z\\' in alphabtes is: 26\\npos of \\'A\\' in alphabets is: 1\\n\\nBut, In string \"AZ\", \\n\\'Z\\' is on unit place and it\\'s pos value in alphabets is 26\\nand \\'A\\' is on ten\\'s digit and it\\'s pos value in alphabets is 1\\nso, \\'A\\' should be multiplied with 26.\\nTherefore, Final answer should be-\\n\"AZ\"\\n(1 * (26 ^ 1)) + (26 * (26 ^ 0))\\n(1 * 26) + (26 * 1)\\n(26) + (26)\\n52\\n\\nThe final answer should be 52.\\n```\n```\\nSay, if they given us a binary number --> 11\\nthen, how we will proceed,\\nWe reach to our answer something like this, \\n(1 * ( 2 ^ 1)) + (1 * ( 2 ^ 0))\\n(2) + (1)\\n3\\n```\n```\\nTime Complexity --> O(n) // as we are using traversing string only once and n is the length of the string. \\nSpace Complexity --> O(1) // as we are not using anything from our side.\\n\\nIt paases [ 1002 / 1002] in built test cases with faster than 100.00% of C++ online submissions\\n```\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int n = s.length(); // extracting length of the string\\n        \\n        if(n == 1) // if length is only 1\\n        {\\n            return (s[0] - \\'A\\') + 1; //then return only that position\\n        }\\n        \\n        int increase = 0; // variable used to increase the multiplcation\\n        int ans = 0; // variable used to store answer\\n        \\n        for(int i = n - 1; i >= 0; i--) // start traversing string from back\\n        {\\n            int pos = (s[i] - \\'A\\') + 1; // extracting position\\n            \\n            ans = ans + (pos * pow(26, increase)); // with base 26, do further calculation\\n            increase++; // increase variable\\n        }\\n        \\n        return ans; // finally return the answer\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790803,
                "title": "python-easy-one-liner-explaination",
                "content": "**How to form a number using a list of digits?**\\n1. We take a variable ```ans``` and initialize it with 0 \\n2. We traverse through the list and update the variable as ```ans = ans * 10 + currDigit ```\\n\\nIn this question we need to do the same but we multiply it with 26 instead of 10\\n```ans = ans * 26 + currDigit```\\n\\n\\nNow we need to think how we will get the ```currDigit``` out of Characters.\\nwe will use ascii value of the characters\\n\\n```ord(i) - ord(\\'A\\') + 1   #ord will return the ascii value of the character```\\n```\\n A = 1         |  ord(\\'A\\') - ord(\\'A\\') + 1  = 1\\n B = 2         |  ord(\\'B\\') - ord(\\'A\\') + 1  = 2\\n C = 3         |  ord(\\'C\\') - ord(\\'A\\') + 1  = 3\\n```\\n\\nLet\\'s code this in a simple way.\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        ans = 0\\n        for i in columnTitle:\\n            ans = ans * 26 + ord(i) - ord(\\'A\\') + 1\\n        return ans\\n```\\n\\nNow If you are in love with python, you might be wondering how we will reduce the line of code to one.\\nSo here is one liner solution.\\n```\\nclass Solution:\\n    def titleToNumber(self, title: str) -> int:\\n        return reduce(lambda x,y: x * 26 + y, map(lambda x: ord(x)-ord(\\'A\\')+1,title))\\n```\\n\\n***If you have any questions or If you have a much shorter code please comment down below***\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```ans```\n```ans = ans * 10 + currDigit ```\n```ans = ans * 26 + currDigit```\n```currDigit```\n```ord(i) - ord(\\'A\\') + 1   #ord will return the ascii value of the character```\n```\\n A = 1         |  ord(\\'A\\') - ord(\\'A\\') + 1  = 1\\n B = 2         |  ord(\\'B\\') - ord(\\'A\\') + 1  = 2\\n C = 3         |  ord(\\'C\\') - ord(\\'A\\') + 1  = 3\\n```\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        ans = 0\\n        for i in columnTitle:\\n            ans = ans * 26 + ord(i) - ord(\\'A\\') + 1\\n        return ans\\n```\n```\\nclass Solution:\\n    def titleToNumber(self, title: str) -> int:\\n        return reduce(lambda x,y: x * 26 + y, map(lambda x: ord(x)-ord(\\'A\\')+1,title))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 52087,
                "title": "one-line-python-code-using-map-reduce",
                "content": "    def titleToNumber(self, s):\\n        return reduce(lambda x,y:x*26+y,map(lambda x:ord(x)-ord('A')+1,s))",
                "solutionTags": [
                    "Python"
                ],
                "code": "    def titleToNumber(self, s):\\n        return reduce(lambda x,y:x*26+y,map(lambda x:ord(x)-ord('A')+1,s))",
                "codeTag": "Python3"
            },
            {
                "id": 52096,
                "title": "intuitive-javascript-solution",
                "content": "```\\nvar titleToNumber = function(s) {\\n    const charCodeBase = 'A'.charCodeAt(0) - 1;\\n    const n = s.length;\\n    let number = 0;\\n\\n    /* \\n     * Think of it as base 26. For example,\\n     * Column number of \"AB\" = 1 * 26^1 + 2 * 26^0 \\n     */\\n    for (let i = 0; i < n; i++)\\n        number += (s.charCodeAt(i) - charCodeBase) * Math.pow(26, n-i-1);\\n    \\n    return number;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar titleToNumber = function(s) {\\n    const charCodeBase = 'A'.charCodeAt(0) - 1;\\n    const n = s.length;\\n    let number = 0;\\n\\n    /* \\n     * Think of it as base 26. For example,\\n     * Column number of \"AB\" = 1 * 26^1 + 2 * 26^0 \\n     */\\n    for (let i = 0; i < n; i++)\\n        number += (s.charCodeAt(i) - charCodeBase) * Math.pow(26, n-i-1);\\n    \\n    return number;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2448737,
                "title": "easy-100-explained-java-c-python-1-line-c-python3",
                "content": "**Problem Statement:**\\nGiven a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\\n**For example:**\\n\\n\\t\\t\\t\\t\\t\\tA -> 1\\n\\t\\t\\t\\t\\t\\tB -> 2\\n\\t\\t\\t\\t\\t\\tC -> 3\\n\\t\\t\\t\\t\\t\\t............\\n\\t\\t\\t\\t\\t\\tZ -> 26\\n\\t\\t\\t\\t\\t\\tAA -> 27\\n\\t\\t\\t\\t\\t\\tAB -> 28 \\n\\t\\t\\t\\t\\t\\t..................\\n\\n    \\n\\n# **Java Solution:**\\nRuntime: 1 ms, faster than 93.25% of Java online submissions for Excel Sheet Column Number.\\nMemory Usage: 42.4 MB, less than 81.68% of Java online submissions for Excel Sheet Column Number.\\n```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        // Initialize the output result...\\n        int output = 0;\\n        // Traverse the whole list through the loop...\\n        for(int i = 0; i < columnTitle.length(); i++){\\n            // Process to get the excel sheet column number...\\n            output = output * 26 + (columnTitle.charAt(i) - \\'A\\' + 1);\\n        }\\n        return output;      // Return the output...\\n    }\\n}\\n```\\n\\n# **C++ Solution:**\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        // Initialize the output result...\\n        int output = 0;\\n        // Traverse the whole list through the loop...\\n        for(auto c: columnTitle) {\\n            // Process to get the excel sheet column number...\\n            output = output * 26 + (c - \\'A\\' + 1);    \\n        }\\n        return output;    // Return the output...  \\n    }\\n};\\n```\\n\\n# **Python Solution:**\\nRuntime: 22 ms, faster than 83.54% of Python online submissions for Excel Sheet Column Number.\\n```\\nclass Solution(object):\\n    def titleToNumber(self, columnTitle):\\n        s = columnTitle[::-1]\\n        return sum([(ord(s[i]) - 64) * (26 ** i) for i in range(len(s))])\\n```\\n            \\n# **C Language:**\\n```\\nint titleToNumber(char * columnTitle){\\n    int output = 0;\\n    for(int i = 0; i < strlen(columnTitle); i++){\\n        output *= 26;\\n        output += (columnTitle[i] - \\'A\\' + 1);\\n    }\\n    return output;\\n}\\n```\\n\\n# **Python3 Solution:**\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        s = columnTitle[::-1]\\n        return sum([(ord(s[i]) - 64) * (26 ** i) for i in range(len(s))])\\n```\\n**I am working hard for you guys...\\nPlease upvote if you found any help with this code...**",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        // Initialize the output result...\\n        int output = 0;\\n        // Traverse the whole list through the loop...\\n        for(int i = 0; i < columnTitle.length(); i++){\\n            // Process to get the excel sheet column number...\\n            output = output * 26 + (columnTitle.charAt(i) - \\'A\\' + 1);\\n        }\\n        return output;      // Return the output...\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        // Initialize the output result...\\n        int output = 0;\\n        // Traverse the whole list through the loop...\\n        for(auto c: columnTitle) {\\n            // Process to get the excel sheet column number...\\n            output = output * 26 + (c - \\'A\\' + 1);    \\n        }\\n        return output;    // Return the output...  \\n    }\\n};\\n```\n```\\nclass Solution(object):\\n    def titleToNumber(self, columnTitle):\\n        s = columnTitle[::-1]\\n        return sum([(ord(s[i]) - 64) * (26 ** i) for i in range(len(s))])\\n```\n```\\nint titleToNumber(char * columnTitle){\\n    int output = 0;\\n    for(int i = 0; i < strlen(columnTitle); i++){\\n        output *= 26;\\n        output += (columnTitle[i] - \\'A\\' + 1);\\n    }\\n    return output;\\n}\\n```\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        s = columnTitle[::-1]\\n        return sum([(ord(s[i]) - 64) * (26 ** i) for i in range(len(s))])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790570,
                "title": "java-solution-one-liner-faster-than-99-69",
                "content": "```\\nclass Solution {\\n    public int titleToNumber(String s) {\\n        return s.length()==0?0:(s.charAt(s.length()-1)-\\'A\\'+1)+26*titleToNumber(s.substring(0, s.length()-1));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String s) {\\n        return s.length()==0?0:(s.charAt(s.length()-1)-\\'A\\'+1)+26*titleToNumber(s.substring(0, s.length()-1));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1327433,
                "title": "python-3-super-easy-to-understand-with-explanation",
                "content": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        \\n        p = 1\\n        summ = 0\\n        for i in columnTitle[::-1] :\\n            summ += p*(ord(i)-64)        # -ord(A)+1\\n            p*= 26\\n        \\n        return summ\\n        \\n```\\n*       \\'\\'\\'\\n\\t\\tA.....to......Z = 26 elements\\n\\t\\tAA.....to......ZZ = 26*26 elements\\n\\t\\tAAA...to.....ZZZ = 26^3 elements\\n\\t\\tso on.....\\n\\t\\t\\n\\t\\ttherefore for eg :  ABCD\\n\\n        ABCD = [(A)*26^3] + [(B)*26^2] + [(C)*26^1] + [(D)] \\n        \\n        where (A) = 1,(B) = 2 ......(AA) = 27....\\n        \\'\\'\\'\\n* eg : **\"ZY\"** --->\\n* --first Y , ord(Y) = 89,-->89-64=25(value of Y in the first 26 elements),therefore its excel sheet value will be = [(26^0)*25] == 25\\n* --second Z, ord(Z) = 90,-->90-64=26(value of Z in the first 26 elements) ,therefore its excel sheet value will be = [(26^1)*26] == 656\\n* taking summ of them gives \"ZY\"\\'s column number i.e, 656 + 25 = 701\\n\\n***please upvote if you like : )***",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        \\n        p = 1\\n        summ = 0\\n        for i in columnTitle[::-1] :\\n            summ += p*(ord(i)-64)        # -ord(A)+1\\n            p*= 26\\n        \\n        return summ\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1327476,
                "title": "solution-swift-excel-sheet-column-number-test-cases",
                "content": "```swift\\nclass Solution {\\n    func titleToNumber(_ columnTitle: String) -> Int {\\n        return columnTitle.unicodeScalars.reduce(0, { $0 * 26 + Int($1.value) - 64})\\n    }\\n}\\n```\\n\\n---\\n\\n<details>\\n<summary>\\n<img src=\"https://git.io/JDblm\" height=\"24\">\\n<b>TEST CASES</b>\\n</summary>\\n\\n<p><pre>\\n<b>Result:</b> Executed 3 tests, with 0 failures (0 unexpected) in 0.006 (0.008) seconds\\n</pre></p>\\n\\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n    \\n    func test0() {\\n        let value = solution.titleToNumber(\"A\")\\n        XCTAssertEqual(value, 1)\\n    }\\n    func test1() {\\n        let value = solution.titleToNumber(\"AB\")\\n        XCTAssertEqual(value, 28)\\n    }\\n    func test2() {\\n        let value = solution.titleToNumber(\"ZY\")\\n        XCTAssertEqual(value, 701)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```\\n</details>",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func titleToNumber(_ columnTitle: String) -> Int {\\n        return columnTitle.unicodeScalars.reduce(0, { $0 * 26 + Int($1.value) - 64})\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\nclass Tests: XCTestCase {\\n    \\n    private let solution = Solution()\\n    \\n    func test0() {\\n        let value = solution.titleToNumber(\"A\")\\n        XCTAssertEqual(value, 1)\\n    }\\n    func test1() {\\n        let value = solution.titleToNumber(\"AB\")\\n        XCTAssertEqual(value, 28)\\n    }\\n    func test2() {\\n        let value = solution.titleToNumber(\"ZY\")\\n        XCTAssertEqual(value, 701)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 52108,
                "title": "a-8ms-c-solution",
                "content": "    class Solution {\\n    public:\\n        int titleToNumber(string s) {\\n            int col = 0;\\n            for(int i = s.length(); i > 0; i--) {\\n                col += (s[i - 1] - 'A' + 1) * pow(26, (s.length() - i));\\n            }\\n            return col;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int titleToNumber(string s) {\\n            int col = 0;\\n            for(int i = s.length(); i > 0; i--) {\\n                col += (s[i - 1] - 'A' + 1) * pow(26, (s.length() - i));\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1791478,
                "title": "easiest-100-faster-c-solution-with-explanation",
                "content": "**Approach :**\\n\\nAs similar as we Convert Hexadecimal to decimal Shown In Image We Have To Multiply Every Charcter Of String With Respective Pow Of 26 And Have To Multiply It With Coresponding Index Of Char From Alphabate...\\n\\n![image](https://assets.leetcode.com/users/images/6b779012-8f58-41ff-9f7f-f5a7be06d1d3_1645529900.3873541.jpeg)\\n\\nIn Above Image We Are Coverting It To Hexadecimal So That We Multiply It With 16 While Here We Are Dealing With Alphabet (Total 26) So We Have To Multiply With 26 And Character\\'s Index From Alphabet.\\n\\nExample :\\nString S = \"XYZ\"\\nX = 24, Y = 25, Z = 26.\\nSo \\nans = X * pow(26,2) + Y * pow(26,1) + Z * pow(26,0) //Here 2,1,0 Of Pow are string size()-index... As Like Hexadecimal\\nans = 16224 + 650 + 26\\nans = 16900\\n\\n```\\n\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n\\t\\tint ans = 0; int y = 1;\\n\\t\\tfor (int i = 0; i < columnTitle.size(); ++i)\\n\\t\\t{\\n\\t\\t\\tans += (columnTitle[i]-\\'A\\'+1) * pow(26,columnTitle.size()-y);\\n\\t\\t\\ty++;\\n\\t\\t}\\n    return ans;\\n    }\\n};\\n\\n```\\n\\n**Don\\'t Forget To Upvote And Ask If Any Query :)**\\n\\n",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n\\t\\tint ans = 0; int y = 1;\\n\\t\\tfor (int i = 0; i < columnTitle.size(); ++i)\\n\\t\\t{\\n\\t\\t\\tans += (columnTitle[i]-\\'A\\'+1) * pow(26,columnTitle.size()-y);\\n\\t\\t\\ty++;\\n\\t\\t}\\n    return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 783498,
                "title": "c-oneliner-recursive-vs-iterative-solutions-explained-100-time-70-space",
                "content": "So, this was a fun one, since the problem was a simple lexicographic one and all we had to think was how to count using `A - Z` instead of `0 - 9`. If you are into that and/or what an extra shot of the same medicine, be sure to check [its sibling](https://leetcode.com/problems/excel-sheet-column-title/) and, if you wish, also [my solution for it too](https://leetcode.com/problems/excel-sheet-column-title/discuss/784392/C%2B%2B-Oneliner-Recursive-Vs.-Iterative-Solutions-Explained-100-Time-~70-Space).\\n\\nTo do so, I found more convenient to start from the leftmost \"digit\" and proceed to the right, storing my result in the `res` variable and, one step at a time, multiplying the previous value of `res` by `26` (that is our base) and adding the value of the current character to it.\\n\\nTo turn a `A - Z` range into a `1 - 26` one, just need to subtract `@`, the first character before `A` in [the standard ASCII implementation](https://en.wikipedia.org/wiki/ASCII#Printable_characters).\\n\\nIn my recursive calls I am then passing:\\n* the base string `s` as a reference;\\n* the aforementioned accumulator `res`;\\n* `pos`, initialised to `0`\\n\\nWhen I reach the point in which `pos == s.size()`, it means I am done parsing the string, so I returrn `res` :)\\n\\nNote that you might as well start from the leftmost \"digit\", but in that case you would have to proceed right multiplying by the matching power of `26`: a needless annoyance, if you ask me.\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int titleToNumber(string &s, long res = 0, int pos = -1) {\\n        return (pos = pos == -1 ? 0 : pos, pos) == s.size() ? res : titleToNumber(s, res * 26 + s[pos] - \\'@\\', pos + 1);\\n    }\\n};\\n```\\n\\nThe iterative approach, with exactly the same logic, might be easier to grasp (and less elegant, at least to my eyes, but I concede that is subjective):\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        long res = 0;\\n        int pos = 0;\\n        while (pos < s.size()) {\\n            res = res * 26 + s[pos] - \\'@\\';\\n            pos++;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int titleToNumber(string &s, long res = 0, int pos = -1) {\\n        return (pos = pos == -1 ? 0 : pos, pos) == s.size() ? res : titleToNumber(s, res * 26 + s[pos] - \\'@\\', pos + 1);\\n    }\\n};\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        long res = 0;\\n        int pos = 0;\\n        while (pos < s.size()) {\\n            res = res * 26 + s[pos] - \\'@\\';\\n            pos++;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 52325,
                "title": "a-4ms-c-solution",
                "content": "    int titleToNumber(char* s) {\\n        int number = 0;\\n        for (int i = 0; s[i] != 0; i++) {\\n            number = number*26 + s[i] - 'A' + 1;\\n        }\\n        return number;\\n    }\\n\\nThe question can be rephrased as \"Convert base 26 to base 10\".",
                "solutionTags": [],
                "code": "    int titleToNumber(char* s) {\\n        int number = 0;\\n        for (int i = 0; s[i] != 0; i++) {\\n            number = number*26 + s[i] - 'A' + 1;\\n        }\\n        return number;\\n    }\\n\\nThe question can be rephrased as \"Convert base 26 to base 10\".",
                "codeTag": "Unknown"
            },
            {
                "id": 52253,
                "title": "2ms-java-solution",
                "content": "    public class Solution {\\n        public int titleToNumber(String s) {\\n            char[] title = s.toCharArray();\\n            int number = 0;\\n            for(char c: title) {\\n                number = number * 26 + (c - 'A' + 1);\\n            }\\n            return number;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int titleToNumber(String s) {\\n            char[] title = s.toCharArray();\\n            int number = 0;\\n            for(char c: title) {\\n                number = number * 26 + (c - 'A' + 1);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1790093,
                "title": "java-3-liner-explained",
                "content": "**Idea:** \\n* The solution is similar to converting a number from base 26 to base 10, except instead of digits we have letters.\\n* Multiply the current index value with 26 (base) and add the char value with A being at 1 (so adjust by adding 1)\\n```\\nExample: columnTitle = AB\\n\\nAB\\n^\\ncolumnNumber = 0, current-char = A\\n\\u21D2 columnNumber = (0 x 26) + A - A + 1 = 1\\n\\nAB\\n ^\\ncolumnNumber = 1, current-char = B\\n\\u21D2 columnNumber = (1 x 26) + B - A + 1 = 26 + 1 + 1 = 28 [Ans]\\n```\\n>**T/S:** O(n)/O(1), where n = size(columnTitle)\\n```\\npublic int titleToNumber(String columnTitle) {\\n\\tvar columnNumber = 0;\\n\\tfor (var i = 0; i < columnTitle.length(); i++)\\n\\t\\tcolumnNumber = columnNumber * 26 + columnTitle.charAt(i) - \\'A\\' + 1;\\n\\treturn columnNumber;\\n}\\n```\\n**A micro-optimized variation**: Using unicode value of A = 65\\n```\\npublic int titleToNumber(String columnTitle) {\\n\\tvar columnNumber = 0;\\n\\tfor (var i = 0; i < columnTitle.length(); i++)\\n\\t\\tcolumnNumber = columnNumber * 26 + columnTitle.charAt(i) - 64;\\n\\treturn columnNumber;\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nExample: columnTitle = AB\\n\\nAB\\n^\\ncolumnNumber = 0, current-char = A\\n\\u21D2 columnNumber = (0 x 26) + A - A + 1 = 1\\n\\nAB\\n ^\\ncolumnNumber = 1, current-char = B\\n\\u21D2 columnNumber = (1 x 26) + B - A + 1 = 26 + 1 + 1 = 28 [Ans]\\n```\n```\\npublic int titleToNumber(String columnTitle) {\\n\\tvar columnNumber = 0;\\n\\tfor (var i = 0; i < columnTitle.length(); i++)\\n\\t\\tcolumnNumber = columnNumber * 26 + columnTitle.charAt(i) - \\'A\\' + 1;\\n\\treturn columnNumber;\\n}\\n```\n```\\npublic int titleToNumber(String columnTitle) {\\n\\tvar columnNumber = 0;\\n\\tfor (var i = 0; i < columnTitle.length(); i++)\\n\\t\\tcolumnNumber = columnNumber * 26 + columnTitle.charAt(i) - 64;\\n\\treturn columnNumber;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 708797,
                "title": "c-0-ms-solution",
                "content": "***Runtime: 0 ms, faster than 100.00% of C++ online submissions for Excel Sheet Column Number.\\nMemory Usage: 5.9 MB, less than 87.22% of C++ online submissions for Excel Sheet Column Number.***\\n\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int result = 0;\\n        for(int i=0;i<s.size();i++){\\n            result = result*26 + (s[i] - \\'A\\' + 1);\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int result = 0;\\n        for(int i=0;i<s.size();i++){\\n            result = result*26 + (s[i] - \\'A\\' + 1);\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 52274,
                "title": "easy-java-solution-3ms",
                "content": "\\n    public static int titleToNumber(String s) {\\n\\t     int number=0;\\n\\t     for(int i=0;i<s.length();i++)\\n\\t     {\\n\\t    \\tnumber=26*number+(s.charAt(i)-'A')+1; \\n\\t     }\\n\\t     return number;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n    public static int titleToNumber(String s) {\\n\\t     int number=0;\\n\\t     for(int i=0;i<s.length();i++)\\n\\t     {\\n\\t    \\tnumber=26*number+(s.charAt(i)-'A')+1; \\n\\t     }\\n\\t     return number;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2548566,
                "title": "java-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int sum = 0;\\n        for(char ch : columnTitle.toCharArray()) {\\n          \\n            int diff = ch - (\\'A\\' - 1);\\n            sum = sum * 26 + diff;\\n        }\\n        return sum;\\n    }\\n}\\n```\\n**Please upvoted me if you like the solution.**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int sum = 0;\\n        for(char ch : columnTitle.toCharArray()) {\\n          \\n            int diff = ch - (\\'A\\' - 1);\\n            sum = sum * 26 + diff;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790347,
                "title": "python-javascript-easy-solution-with-very-clear-explanation",
                "content": "```\\nHello guys \\uD83D\\uDE00 !\\n\\nGiven question:\\nGiven a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.\\n\\nQuestion Explanation:\\nWhat we have to do here \\uD83E\\uDD14 ? don\\'t worry, i will explain you guys \\uD83D\\uDE04 !!\\nwe have return the corresponding column number for given column title.\\n\\n    For example:\\n        columnTitle = \"A\"\\n        A -> 1\\n        \\uD83D\\uDC49 here our corresponding column number for given column title is 1.\\n\\n        columnTitle = \"AB\"\\n           \\uD83D\\uDC49 here we have AB so we have to do means:\\n                A --> 1\\n                B --> 2\\n                .\\n                .\\n                Z --> 26\\n                After this what will come means :\\n                AB --> 1*26 + 2 = 28\\n                AA --> 27\\n\\n                 how it came \\uD83E\\uDD14:\\n                 AA --> 1 * 26 + 1 = 27\\n            same as above:\\n                AB --> 1 * 26 + 2 = 28\\n\\n            Let me give another Example:\\n                columnTitle = \"CD\"\\n                CD-> 3*26 + 4 = 82\\n\\nCode Explanation:\\n1.we have initialized a variable called corresponding_number .\\n2.then we have start looping and get current letter to find corresponding letter value.\\n3.we are going to use one formula.\\ncorresponding_number += current_Letter_value * pow(26, length_of_string - i- 1)\\n    Example: \\n        current_letter = \"DA\"\\n        corresponding_number = 0\\n        \\u2B50 now we going to start looping:\\n                \\u2B50 i=0\\n                \\u2B50 current_letter = \"D\"\\n                \\u2B50 corresponding_letter_value = 4\\n                \\u2B50 length_of_string = 2\\n                corresponding_number += 4 * pow(26, 2 - 0 - 1) ==> 4 * 26^1 =104\\n                \\u2B50 i=1\\n                \\u2B50 current_letter = \"A\"\\n                \\u2B50 corresponding_letter_value = 1\\n                \\u2B50 length_of_string = 2\\n                corresponding_number += 1 * pow(26, 2 - 1 - 1) ==> 1 * 26^0 = 1\\n        now we will return corresponding_number = 104 + 1 = 105\\n\\n    Big O:\\n        Time Complexity:O(n) where n is the length of string\\n        Space Complexity:O(1) constant space\\n```\\n\\n`    I hope you guys understand now lets code it up \\uD83D\\uDE00.\\n`\\n\\n`javascript`\\n\\n```\\nconst titleToNumber = (columnTitle) => {\\n  let corresponding_number = 0;\\n  for (let i = 0; i < columnTitle.length; i++) {\\n    const current_letter = columnTitle[i]; // current Letter\\n    const current_number = current_letter.charCodeAt(0) - 64; // corresponding number \\n    // here we are subtracting 64 because we aer going to get only Capital letter so the charCodeAt() returns the ASCII value of the character.\\n    corresponding_number +=\\n      current_number * Math.pow(26, columnTitle.length - i - 1);\\n  }\\n  return corresponding_number;\\n};\\n```\\n\\n`python`\\n\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n            corresponding_number = 0\\n            for i in range(len(columnTitle)):\\n                current_letter=columnTitle[i]\\n                corresponding_letter_value=ord(current_letter) - ord(\\'A\\') + 1\\n                corresponding_number += (corresponding_letter_value *pow(26,len(columnTitle)-i-1))\\n\\n            return corresponding_number\\n\\n```\\n\\n\\n`UPVOTE if you like \\uD83D\\uDE03 , If you have any question, feel free to ask.`\\n\\n",
                "solutionTags": [
                    "Python",
                    "JavaScript"
                ],
                "code": "```\\nHello guys \\uD83D\\uDE00 !\\n\\nGiven question:\\nGiven a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.\\n\\nQuestion Explanation:\\nWhat we have to do here \\uD83E\\uDD14 ? don\\'t worry, i will explain you guys \\uD83D\\uDE04 !!\\nwe have return the corresponding column number for given column title.\\n\\n    For example:\\n        columnTitle = \"A\"\\n        A -> 1\\n        \\uD83D\\uDC49 here our corresponding column number for given column title is 1.\\n\\n        columnTitle = \"AB\"\\n           \\uD83D\\uDC49 here we have AB so we have to do means:\\n                A --> 1\\n                B --> 2\\n                .\\n                .\\n                Z --> 26\\n                After this what will come means :\\n                AB --> 1*26 + 2 = 28\\n                AA --> 27\\n\\n                 how it came \\uD83E\\uDD14:\\n                 AA --> 1 * 26 + 1 = 27\\n            same as above:\\n                AB --> 1 * 26 + 2 = 28\\n\\n            Let me give another Example:\\n                columnTitle = \"CD\"\\n                CD-> 3*26 + 4 = 82\\n\\nCode Explanation:\\n1.we have initialized a variable called corresponding_number .\\n2.then we have start looping and get current letter to find corresponding letter value.\\n3.we are going to use one formula.\\ncorresponding_number += current_Letter_value * pow(26, length_of_string - i- 1)\\n    Example: \\n        current_letter = \"DA\"\\n        corresponding_number = 0\\n        \\u2B50 now we going to start looping:\\n                \\u2B50 i=0\\n                \\u2B50 current_letter = \"D\"\\n                \\u2B50 corresponding_letter_value = 4\\n                \\u2B50 length_of_string = 2\\n                corresponding_number += 4 * pow(26, 2 - 0 - 1) ==> 4 * 26^1 =104\\n                \\u2B50 i=1\\n                \\u2B50 current_letter = \"A\"\\n                \\u2B50 corresponding_letter_value = 1\\n                \\u2B50 length_of_string = 2\\n                corresponding_number += 1 * pow(26, 2 - 1 - 1) ==> 1 * 26^0 = 1\\n        now we will return corresponding_number = 104 + 1 = 105\\n\\n    Big O:\\n        Time Complexity:O(n) where n is the length of string\\n        Space Complexity:O(1) constant space\\n```\n```\\nconst titleToNumber = (columnTitle) => {\\n  let corresponding_number = 0;\\n  for (let i = 0; i < columnTitle.length; i++) {\\n    const current_letter = columnTitle[i]; // current Letter\\n    const current_number = current_letter.charCodeAt(0) - 64; // corresponding number \\n    // here we are subtracting 64 because we aer going to get only Capital letter so the charCodeAt() returns the ASCII value of the character.\\n    corresponding_number +=\\n      current_number * Math.pow(26, columnTitle.length - i - 1);\\n  }\\n  return corresponding_number;\\n};\\n```\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n            corresponding_number = 0\\n            for i in range(len(columnTitle)):\\n                current_letter=columnTitle[i]\\n                corresponding_letter_value=ord(current_letter) - ord(\\'A\\') + 1\\n                corresponding_number += (corresponding_letter_value *pow(26,len(columnTitle)-i-1))\\n\\n            return corresponding_number\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 783875,
                "title": "c-one-liner",
                "content": "```\\n    public int TitleToNumber(string s) =>\\n        s.Aggregate(0, (seed, c) => seed*26 + (c - \\'A\\' + 1));\\n```",
                "solutionTags": [],
                "code": "```\\n    public int TitleToNumber(string s) =>\\n        s.Aggregate(0, (seed, c) => seed*26 + (c - \\'A\\' + 1));\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 537403,
                "title": "javascript-o-n",
                "content": "```\\nvar titleToNumber = function(s) {\\n    let columnNumber = 0;\\n    for(let i = 0; i < s.length; i++){\\n        // get the last ith character\\n        let char = s[(s.length - 1) - i];\\n        \\n        // subtracting from 64 (not 65, ascii of A) to get the value directly \\n        // instead of ascii index\\n        // ex: A = 1 (65 - 64 = 1)\\n        columnNumber += Math.pow(26, i) * (char.charCodeAt(0) - 64);\\n        \\n    } \\n    return columnNumber;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar titleToNumber = function(s) {\\n    let columnNumber = 0;\\n    for(let i = 0; i < s.length; i++){\\n        // get the last ith character\\n        let char = s[(s.length - 1) - i];\\n        \\n        // subtracting from 64 (not 65, ascii of A) to get the value directly \\n        // instead of ascii index\\n        // ex: A = 1 (65 - 64 = 1)\\n        columnNumber += Math.pow(26, i) * (char.charCodeAt(0) - 64);\\n        \\n    } \\n    return columnNumber;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 52284,
                "title": "my-cpp-solution",
                "content": "    class Solution \\n    {\\n    public:\\n        int titleToNumber(string s) \\n        {\\n            int ret=0;\\n            for(int i=0;i<s.size();i++)\\n            {\\n                ret*=26;\\n                ret+=s[i]-'A'+1;\\n            }\\n            return ret;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution \\n    {\\n    public:\\n        int titleToNumber(string s) \\n        {\\n            int ret=0;\\n            for(int i=0;i<s.size();i++)\\n            {\\n                ret*=26;\\n                ret+=s[i]-'A'+1;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 3946743,
                "title": "2-line-code-well-explained-and-commented-jai-shree-ram",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# **Here\\'s a step-by-step breakdown:**\\n\\n1)Initialize a result variable to 0.\\n2)Iterate through the characters in the column Title from right to left.\\n3)For each character: Convert the character to its corresponding numeric value by subtracting the ASCII value of \\'A\\' and adding 1.\\n4)Multiply the numeric value by the appropriate power of 26 based on its position from the right (similar to how decimal places work: 10^0, 10^1, 10^2, ...).\\n5)Add this product to the result variable.\\n6)Once you\\'ve processed all characters, the result variable will hold the column number.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1)Initialize Result: Start with initializing a variable result to store the final column number. Initialize it to 0.\\n2)Iterate Through Characters: Iterate through the characters of the column Title from right to left. This means you start with the least significant digit and move towards the most significant digit.\\n3)Character to Value Conversion: For each character encountered:\\n\\n4)Convert the character to its corresponding numeric value in the range 1 to 26. You can do this by subtracting the ASCII value of \\'A\\' and adding 1. This means \\'A\\' becomes 1, \\'B\\' becomes 2, and so on.\\n5)Update Result: Multiply the numeric value obtained in step 3 by the appropriate power of 26 based on the position of the character from the right. The rightmost character corresponds to 26^0, the next character to the left corresponds to 26^1, and so on.\\n\\nFor example, the rightmost character contributes its value as is (26^0 = 1), the next character contributes its value multiplied by 26 (26^1), the character after that contributes its value multiplied by 26^2, and so on.\\n6)Accumulate Result: Add the product obtained in step 4 to the result variable.\\n7)Repeat: Repeat steps 3-5 for all characters in the column Title.\\n8)Return Result: Once you\\'ve processed all characters, the result variable will hold the final column number. Return this value as the answer.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int result=0;\\n\\n        for(int i=0;i<columnTitle.size();i++)\\n        {\\n            result*=26;\\n            // columnTitle[i] --> YE CURRENT ELEMENT KA ASCII CODE DEGA\\n            result+=columnTitle[i]-\\'A\\'+1;\\n        }\\n        return result;\\n        \\n    }\\n\\n    // EX--> AB\\n    // RES=26*0,   RES=0\\n    // RES= 0 + (65-65)+1\\n    //   65 IS ASCII CODE OF A \\n    /// SO FINALLY 1 IS STORED IN RESULT\\n\\n    /// NOW INCREMENT I==B \\n\\n    //RES=1*26 RES=52\\n    // RES=26+(66-65)+1\\n    // RES=28   AND THAT IS THE REQUIRED ANSWER\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int result=0;\\n\\n        for(int i=0;i<columnTitle.size();i++)\\n        {\\n            result*=26;\\n            // columnTitle[i] --> YE CURRENT ELEMENT KA ASCII CODE DEGA\\n            result+=columnTitle[i]-\\'A\\'+1;\\n        }\\n        return result;\\n        \\n    }\\n\\n    // EX--> AB\\n    // RES=26*0,   RES=0\\n    // RES= 0 + (65-65)+1\\n    //   65 IS ASCII CODE OF A \\n    /// SO FINALLY 1 IS STORED IN RESULT\\n\\n    /// NOW INCREMENT I==B \\n\\n    //RES=1*26 RES=52\\n    // RES=26+(66-65)+1\\n    // RES=28   AND THAT IS THE REQUIRED ANSWER\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3042234,
                "title": "very-simple-but-smart-javascript-solution",
                "content": "# Intuition\\nWell I quickly realised, that this is a math problem and a simple one. I just took a look at different values and understood how they work and saw the solution right away\\n# Approach\\nVery simple charCode of a upper case character - 64 = their alphabet position and 26 pow position of the character (starting from right) - so length - (i+1) means that the last character will end up being just it\\'s alphabet position (character * 1), the one before is going to be * 26, the one before * 26 * 26 and so on.\\nSimple math solution that works just fine.\\n# Complexity\\n- Time complexity:\\nBeats 97.51%\\n\\n- Space complexity:\\nBeats 72.98%\\n# Code\\n```\\n/**\\n * @param {string} columnTitle\\n * @return {number}\\n */\\nvar titleToNumber = function(columnTitle) {\\n    let result = 0;\\n    let length = columnTitle.length;\\n    for(let i = 0; i < length; i++){\\n        result += (columnTitle.charCodeAt(i) - 64) * Math.pow(26, length - (i + 1));\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} columnTitle\\n * @return {number}\\n */\\nvar titleToNumber = function(columnTitle) {\\n    let result = 0;\\n    let length = columnTitle.length;\\n    for(let i = 0; i < length; i++){\\n        result += (columnTitle.charCodeAt(i) - 64) * Math.pow(26, length - (i + 1));\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1790374,
                "title": "c-solution-with-explanation",
                "content": "> **If you\\u2019re interested in coding you can join my Discord Server, link in the comment section. Also if you find any mistake please let me know. Thank you!\\u2764\\uFE0F**\\n> \\n\\n---\\n\\n## Explanation:\\n\\n### Solution 01\\n\\n- While iterating over the string we\\u2019ll store the present character value in a.\\n- Here ***A to Z*** represents by ***1 to 26.*** No value starts with 0, that\\'s why we\\u2019re adding 1.\\n- Now in ans multiply it with 26 & add a with it.\\n- **Time complexity:** O(n).\\n\\n---\\n\\n## Code:\\n\\n```cpp\\n//Solution 01:\\n**class Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int ans = 0;\\n        \\n        for(auto x:columnTitle){\\n            int a = x-\\'A\\'+1;\\n            ans = ans*26 + a;\\n        }\\n        return ans;\\n    }\\n};**\\n```\\n\\n---\\n\\n> **Please upvote this solution**\\n>",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\n//Solution 01:\\n**class Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int ans = 0;\\n        \\n        for(auto x:columnTitle){\\n            int a = x-\\'A\\'+1;\\n            ans = ans*26 + a;\\n        }\\n        return ans;\\n    }\\n};**\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1616047,
                "title": "python-intuitive-straightforward-beginner-friendly-mathematical-solution-using-dictionary",
                "content": "## Step 1:\\nTo start, when seeing the 26 English alphabets are used to represent numbers, the first intuition is to use a dictionary to pair 1-26 and A-Z, before considering the calculation in detials.\\n* Method 1: \\nUsing zip()\\n```\\nalphabet = \\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\\'\\nnums = range(1,27)\\nalpha_dict = dict(zip(alphabet, nums))\\nprint(alpha_dict)\\n```\\n\\n* Method 2:\\nComprehension\\n```\\nalpha_dict = {alphabet[i]: nums[i] for i in range(len(alphabet))}\\nprint(alpha_dict)\\n```\\n\\n## Step 2:\\nWith this dictionary in mind, write down a few examples, a formula will soon pop up clearly:\\n* AA  ->  26 * 1 + 1  \\n* AB  ->  26 * 1 + 2\\n* ZZ  ->  26 * 26 + 26\\n* ABC  ->  26^2 * 1 + 26 * 2 + 3\\nThat is:\\n* AA  ->  26^1 * A + 26^0 * A  \\n* AB  ->  26^1 * A + 26^0 * B\\n* ZZ  ->  26^1 * Z + 26^0 * Z\\n* ABC  ->  26^2 * A + 26^1 * B + 26^0 * C\\n\\n\\nSo the formula is:\\n\\n26^largest_digit_value * Letter_on_digit  + ... +  26^0 * Letter_on_digit\\n\\n\\n## Translate above intuition into code:\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n\\t\\n\\t\\t# Use dictionary to map alphabets A to Z one-on-one to integer 1 to 26:\\n        alphabet = \\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\\'\\n        nums = range(1,27)\\n        alpha_to_nums = {alphabet[i]: nums[i] for i in range(len(alphabet))}\\n\\t\\t\\n\\t\\t# Express the formula above in a simple for loop, iterating from the last digit:\\n        column_number = 0\\n        for pos, letter in enumerate (reversed(columnTitle)):\\n            column_number +=  26**(pos) * alpha_to_nums[letter] \\n\\t\\t\\t\\n        return column_number\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nalphabet = \\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\\'\\nnums = range(1,27)\\nalpha_dict = dict(zip(alphabet, nums))\\nprint(alpha_dict)\\n```\n```\\nalpha_dict = {alphabet[i]: nums[i] for i in range(len(alphabet))}\\nprint(alpha_dict)\\n```\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n\\t\\n\\t\\t# Use dictionary to map alphabets A to Z one-on-one to integer 1 to 26:\\n        alphabet = \\'ABCDEFGHIJKLMNOPQRSTUVWXYZ\\'\\n        nums = range(1,27)\\n        alpha_to_nums = {alphabet[i]: nums[i] for i in range(len(alphabet))}\\n\\t\\t\\n\\t\\t# Express the formula above in a simple for loop, iterating from the last digit:\\n        column_number = 0\\n        for pos, letter in enumerate (reversed(columnTitle)):\\n            column_number +=  26**(pos) * alpha_to_nums[letter] \\n\\t\\t\\t\\n        return column_number\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1191434,
                "title": "c-100-faster-0ms",
                "content": "\\n    int titleToNumber(string columnTitle) \\n    {\\n        int res = 0;\\n        int n = columnTitle.size();\\n        for(int i = 0; i < n; i++)\\n            res = res * 26 + (columnTitle[i] - \\'A\\' + 1);\\n        \\n        return res;\\n            \\n    }\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "\\n    int titleToNumber(string columnTitle) \\n    {\\n        int res = 0;\\n        int n = columnTitle.size();\\n        for(int i = 0; i < n; i++)\\n            res = res * 26 + (columnTitle[i] - \\'A\\' + 1);\\n        \\n        return res;\\n            \\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 281073,
                "title": "simple-readable-python-code-with-explanations",
                "content": "Here is a simple readable Python code that is faster than 99.6% of submissions.:\\n```\\n        uc = string.ascii_letters[26:]    #upper capital alphabetical letters   \\n        ans = 0\\n        s = s[::-1]     #reverse the input\\n        for i in xrange(len(s)):\\n            index = uc.find(s[i]) + 1      #find the order of each letter.\\n            ans = ans + index * 26 ** i    # calculate the number for each letter, then make the summation.\\n        return ans\\n```\\n\\n**Explanations**\\nThis problem is similar to converting a number string (e.g. \"25\") to integer (e.g. 25), but instead of using 10 as the base, we need to use 26 as the base.\\n\\n**A simple example**\\nConsider AB.\\nWe know that the column number is equal to 28, because the column numbers from A to Z are equal to 1 to 26, respectively. AA column number is 27 and AB column number is 28. \\n- Lets reverse the input: BA, and seperate the characters: B, A.\\n- B is the second character in the alphabet, so the order of B is equal to 2\\n- A is the first character in the alphabet, so the order of A is equal to 1. However, there are 26 columns before that, so the number for this character is: 1 * 26.\\n- Therefore, the column number is equal to 2 + 26 = 28.\\n\\n**Generalization**\\nAssume the input is ACZ. The code reverses the input (ZCA), find the alphabetical order of each character  and find the number for each character by this calculation:\\norder of Z: 26, so: 26 * (26 ** 0) = 26\\norder of C: 3,   so:  3 * (26 ** 1) = 78\\norder of A: 1,   so: 1 * (26 ** 2) = 676\\nThe column number is equal to: 26 + 78 + 676 = 780\\n\\nFinally, the one-line code, though I am not a fan of one-line codes. There is no point in writing a code when it is not readable.\\n```\\n        return sum((string.ascii_letters[26:].find(s[::-1][i]) + 1) * 26 ** i for i in xrange(len(s)))\\n```\\n",
                "solutionTags": [],
                "code": "```\\n        uc = string.ascii_letters[26:]    #upper capital alphabetical letters   \\n        ans = 0\\n        s = s[::-1]     #reverse the input\\n        for i in xrange(len(s)):\\n            index = uc.find(s[i]) + 1      #find the order of each letter.\\n            ans = ans + index * 26 ** i    # calculate the number for each letter, then make the summation.\\n        return ans\\n```\n```\\n        return sum((string.ascii_letters[26:].find(s[::-1][i]) + 1) * 26 ** i for i in xrange(len(s)))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 267019,
                "title": "handling-overflow-in-c-and-c",
                "content": "**Handling overflow in c/cpp**\\nThe question does not speak about overflow or the size of the string input. So it is clear that the answer can fit in int.\\n\\nBut it is possible that overflow could occur in one of the intermediate steps, if you are not careful.\\n\\nThe below code is an example:\\n\\n\\n\\tint toNum(char a) {\\n        return a - \\'A\\' + 1;\\n    }\\n    \\n    int titleToNumber(string s) {\\n        int n = s.size();\\n        int factor = 1, ans = 0;\\n        \\n        for(int i=n-1;i>=0;i--) {\\n            int num = toNum(s[i]);\\n            ans += num * factor;\\n            factor *= 26; // ----- overflow can occur here\\n        }\\n        \\n        return ans;\\n    }\\nYou can observe that factor is multiplied by 26 at the end of the loop, hence it is ahead of the current iteration. The new value of factor that is calculated at an iteration is used only in the next iteration. Which will lead to an unnecessary calculation of factor at the last iteration of the loop. \\n\\nLet us try debugging:\\n\\n\\tfor(int i=n-1;i>=0;i--) {\\n\\t\\tcout<<\"loop begin : i=\"<<i<<\" char:\"<<s[i]<<\" factor:\"<<factor<<\" ans:\"<<ans<<endl;\\n\\t\\tint num = toNum(s[i]);\\n\\t\\tans += num * factor;\\n\\t\\tfactor *= 26;\\n\\t\\tcout<<\"loop end    : i=\"<<i<<\" char:\"<<s[i]<<\" factor:\"<<factor<<\" ans:\"<<ans<<endl;\\n\\t\\tcout<<endl;\\n\\t}\\n\\t\\t\\n\\tOutput:\\n\\t\\n\\tloop begin : i=6 char:M factor:1 ans:0\\n\\tloop end   : i=6 char:M factor:26 ans:13\\n\\n\\tloop begin : i=5 char:X factor:26 ans:13\\n\\tloop end   : i=5 char:X factor:676 ans:637\\n\\n\\tloop begin : i=4 char:S factor:676 ans:637\\n\\tloop end   : i=4 char:S factor:17576 ans:13481\\n\\n\\tloop begin : i=3 char:G factor:17576 ans:13481\\n\\tloop end   : i=3 char:G factor:456976 ans:136513\\n\\n\\tloop begin : i=2 char:D factor:456976 ans:136513\\n\\tloop end   : i=2 char:D factor:11881376 ans:1964417\\n\\n\\tloop begin : i=1 char:F factor:11881376 ans:1964417\\n\\tloop end   : i=1 char:F factor:308915776 ans:73252673\\n\\n\\tloop begin : i=0 char:C factor:308915776 ans:73252673\\n\\t\\n\\truntime error: signed integer overflow: 308915776 * 26 cannot be represented in type \\'int\\' (solution.cpp)\\n\\t\\n\\t\\nThis can be solved by avoiding the factor calculation at the last iteration.\\n\\n```\\nfor(int i=n-1;i>=0;i--) {\\n\\tint num = toNum(s[i]);\\n\\tans += num * factor;\\n\\tif(i!=0)\\n\\tfactor *= 26;\\n}\\n```\\nBut the fix looks hacky.\\nIt is always good to learn and write cleaner code like this:\\n\\n```\\nint toNum(char a) {\\n\\treturn a - \\'A\\' + 1;\\n}\\n\\nint titleToNumber(string s) {\\n\\tint n = s.size();\\n\\tint ans = 0;\\n\\n\\tfor(int i=0;i<n;i++) {\\n\\t\\tans = ans*26 + toNum(s[i]);\\n\\t}\\n\\n\\treturn ans;\\n}\\n```\\nWe do not do any unnecessary calculations in the above solution.",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nfor(int i=n-1;i>=0;i--) {\\n\\tint num = toNum(s[i]);\\n\\tans += num * factor;\\n\\tif(i!=0)\\n\\tfactor *= 26;\\n}\\n```\n```\\nint toNum(char a) {\\n\\treturn a - \\'A\\' + 1;\\n}\\n\\nint titleToNumber(string s) {\\n\\tint n = s.size();\\n\\tint ans = 0;\\n\\n\\tfor(int i=0;i<n;i++) {\\n\\t\\tans = ans*26 + toNum(s[i]);\\n\\t}\\n\\n\\treturn ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 52243,
                "title": "1-line-c-solution-8ms",
                "content": "    int titleToNumber(string s) {\\n        return accumulate(s.begin(), s.end(), 0, [](int num, char ch) { return num * 26 + ch - 'A' + 1; });\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "    int titleToNumber(string s) {\\n        return accumulate(s.begin(), s.end(), 0, [](int num, char ch) { return num * 26 + ch - 'A' + 1; });\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 52244,
                "title": "3-lines-2ms-java-solution",
                "content": "    public class Solution {\\n        public int titleToNumber(String s) {\\n            int answer = 0;\\n            for(char c: s.toCharArray()) answer = answer * 26 + (c - 'A' + 1);\\n            return answer;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public int titleToNumber(String s) {\\n            int answer = 0;\\n            for(char c: s.toCharArray()) answer = answer * 26 + (c - 'A' + 1);\\n            return answer;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 52311,
                "title": "one-line-in-java",
                "content": "    return s.length()==0?0:(s.charAt(s.length()-1)-'A'+1)+26*titleToNumber(s.substring(0, s.length()-1));",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "    return s.length()==0?0:(s.charAt(s.length()-1)-'A'+1)+26*titleToNumber(s.substring(0, s.length()-1));",
                "codeTag": "Unknown"
            },
            {
                "id": 3212781,
                "title": "171-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nWe are given a string columnTitle representing the column title as appears in an Excel sheet. We are supposed to return its corresponding column number.\\n\\nOne way to solve the problem is by traversing the string columnTitle and for each character, we multiply the result so far by 26 and add the value corresponding to the current character.\\n\\nFor example, if columnTitle is \"AB\", then the corresponding column number is 1*26 + 2 = 28. Here, we start with 0, and multiply the result by 26 (which is the number of alphabets), and then add the value of the first character which is 1, which corresponds to the letter \\'A\\'. Then we multiply the result by 26 again, and add the value of the second character which is 2, corresponding to the letter \\'B\\'. This gives us the final result of 28.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        result = 0\\n        for ch in columnTitle:\\n            result = result*26 + ord(ch)-ord(\\'A\\')+1\\n        return result\\n\\n```\\nIn the above code, we first initialize the result variable to 0. We then traverse the string columnTitle character by character. For each character, we multiply the result by 26 and add the value of the current character (after converting it to its corresponding integer value). Finally, we return the result.\\n\\nNote that we subtract ord(\\'A\\')-1 from the integer value of the character ch to get its corresponding value. We add 1 to it to get the actual value of the character (since \\'A\\' corresponds to 1 and not 0).",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        result = 0\\n        for ch in columnTitle:\\n            result = result*26 + ord(ch)-ord(\\'A\\')+1\\n        return result\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 783605,
                "title": "java-4-lines-code",
                "content": "\\t\\tint sum =0;\\n        for(char c: s.toCharArray()){\\n            sum = sum *26 + (c - \\'A\\') +1;\\n        }\\n        return sum;",
                "solutionTags": [],
                "code": "\\t\\tint sum =0;\\n        for(char c: s.toCharArray()){\\n            sum = sum *26 + (c - \\'A\\') +1;\\n        }\\n        return sum;",
                "codeTag": "Unknown"
            },
            {
                "id": 654014,
                "title": "very-simple-5-line-solution",
                "content": "```\\nfunc titleToNumber(s string) int {\\n    col := 0\\n    \\n    for _, char := range s {\\n        col *= 26\\n        col += int(char - \\'A\\') + 1\\n    }\\n    \\n    return col\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc titleToNumber(s string) int {\\n    col := 0\\n    \\n    for _, char := range s {\\n        col *= 26\\n        col += int(char - \\'A\\') + 1\\n    }\\n    \\n    return col\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 52340,
                "title": "share-my-python-solution-use-int-i-base-36-and-simple-java-solution",
                "content": "    class Solution:\\n    # @param s, a string\\n    # @return an integer\\n    def titleToNumber(self, s):\\n        res = 0\\n        for i in s:\\n            res = 26*res + int(i, 36) - 9\\n        return res\\n\\nOne line\\n\\n    class Solution:\\n    # @param s, a string\\n    # @return an integer\\n    def titleToNumber(self, s):\\n        return sum(26**n*(int(i, 36)-9) for n, i in enumerate(s[::-1]))\\n\\nJAVA\\n\\n        public int titleToNumber(String s) {\\n        int res = 0;\\n        for (char c: s.toCharArray())\\n            res = 26*res + c-'A'+1;\\n\\n        return res;\\n        }",
                "solutionTags": [],
                "code": "class Solution:\\n    # @param s, a string\\n    # @return an integer\\n    def titleToNumber(self, s):\\n        res = 0\\n        for i in s:\\n            res = 26*res + int(i, 36) - 9\\n        return res\\n\\nOne line\\n\\n    class Solution:\\n    # @param s, a string\\n    # @return an integer\\n    def titleToNumber(self, s):\\n        return sum(26**n*(int(i, 36)-9) for n, i in enumerate(s[::-1]))\\n\\nJAVA\\n\\n        public int titleToNumber(String s) {\\n        int res = 0;\\n        for (char c: s.toCharArray())\\n            res = 26*res + c-'A'+1;\\n\\n        return res;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 52349,
                "title": "share-my-java-solution",
                "content": "here is my Java solution\\n    \\n     public class Solution {\\n        public int titleToNumber(String s) {\\n            int colNumber = 0;\\n            \\n    \\t\\tfor (int i = 0; i < s.length(); i++) {\\n    \\t\\t\\tcolNumber = colNumber*26 + ((int)s.charAt(i)-64);\\n    \\t    }\\n            \\n            return colNumber;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int titleToNumber(String s) {\\n            int colNumber = 0;\\n            \\n    \\t\\tfor (int i = 0; i < s.length(); i++) {\\n    \\t\\t\\tcolNumber = colNumber*26 + ((int)s.charAt(i)-64);\\n    \\t    }",
                "codeTag": "Java"
            },
            {
                "id": 3412943,
                "title": "easiest-codewalk",
                "content": "EASIEST CODEWALK\\nJUST NEED TO UNDERSTAND THE BASE-GO THROUGH THE DIAGRAM\\n![photo_2023-04-13_19-02-26.jpg](https://assets.leetcode.com/users/images/0e4dde6c-3f20-46da-86bd-6530edf9f047_1681392768.0137668.jpeg)\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int counter=-1, res=0;\\n    for(int i=columnTitle.length()-1; i>=0; i--){\\n        counter++;\\n        res+= (columnTitle.charAt(i)-\\'A\\'+1)*Math.pow(26,counter);\\n    }    \\n    return res;\\n    }\\n}\\n```![471ac8c9-5c1b-4052-a76c-b8019c47bb11_1679937665.6666765.png](https://assets.leetcode.com/users/images/1216c94a-97c8-4e36-88b7-6ad63018435b_1681392780.8354228.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int counter=-1, res=0;\\n    for(int i=columnTitle.length()-1; i>=0; i--){\\n        counter++;\\n        res+= (columnTitle.charAt(i)-\\'A\\'+1)*Math.pow(26,counter);\\n    }    \\n    return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3257405,
                "title": "best-python-solution-beaten-98-codes-in-tc",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI have iterated the given input string from the end and multiplied the index of the character with 26 power of k value , which is intialized to zero.\\nk=indicates the length from the end\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        str=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\\n        k=0\\n        res=0\\n        for i in range(len(columnTitle)-1,-1,-1):\\n            p=str.index(columnTitle[i])\\n            res+=(p+1)*(26**k)\\n            k+=1\\n        return res\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        str=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\\n        k=0\\n        res=0\\n        for i in range(len(columnTitle)-1,-1,-1):\\n            p=str.index(columnTitle[i])\\n            res+=(p+1)*(26**k)\\n            k+=1\\n        return res\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1791811,
                "title": "c-simple-solution-0ms-runtime-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int answer = 0;\\n\\t    int power = 1;\\n\\t    for (int i = columnTitle.length() - 1; i >= 0; i--)\\n\\t    {\\n\\t\\t    answer += ((columnTitle[i] - \\'A\\' + 1) * (power));\\n            if(i!=0) power = power * 26;\\n\\t    }\\n\\t    return answer;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int answer = 0;\\n\\t    int power = 1;\\n\\t    for (int i = columnTitle.length() - 1; i >= 0; i--)\\n\\t    {\\n\\t\\t    answer += ((columnTitle[i] - \\'A\\' + 1) * (power));\\n            if(i!=0) power = power * 26;\\n\\t    }\\n\\t    return answer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790495,
                "title": "python-3-2-different-solutions-and-explanation",
                "content": "\\n# \\uD83C\\uDF1F[Python 3] 2 Different Solutions and Explanation \\uD83D\\uDC95\\n\\n## 1\\uFE0F\\u20E3 Scan From Right to Left Approach:\\n* By observation we can know that when letter from right to left increase, it immediately increase letter * 26. Just like 26 carry system but only represent by alphabet letter.\\n* So we can scan from right to left and each time increase carry, so we will add **(number * (26  carry))**\\n\\n## Complexity Analysis\\n* Time: O(N) : Let N be length of columnTitle\\n* Space: O(1)\\n\\n## Dry Run\\n\\n```\\ncolumnTitle = \"ABZCD\"\\n# From right to left\\nLetter: D COL Num: 4 Times 1 Res = 4\\nLetter: C COL Num: 3 Times 26 Res = 82\\nLetter: Z COL Num: 26 Times 676 Res = 17658\\nLetter: B COL Num: 2 Times 17576 Res = 52810\\nLetter: A COL Num: 1 Times 456976 Res = 509786\\n\\nreturn 509786\\n```\\n\\n## Code\\n```\\n# From Right to Left O(N) | O(1)\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        res, carry = 0, 0\\n        for s in columnTitle[::-1]:\\n            res += (ord(s) - ord(\\'A\\') + 1) * (26 ** carry)\\n            carry += 1\\n        return res\\n```\\n\\n## 2\\uFE0F\\u20E3 Left to Right Approach:\\n* In this approach, we not scan from right. We directly scan from left, and each time res carry in, the whole res times 26.\\n\\n## Dry Run\\n\\n```\\ncolumnTitle = \"ABZCD\"\\n# From Left to Right\\nLetter: A COL Num: 1 Res = 0 * 26 + 1 = 1\\nLetter: B COL Num: 2 Res = 1 * 26 + 2 = 28\\nLetter: Z COL Num: 26 Res = 28 * 26 + 26 = 754\\nLetter: C COL Num: 3 Res = 754 * 26 + 3 = 19607\\nLetter: D COL Num: 4 Res = 19607 * 26 + 4 = 509786\\n```\\n\\n## Complexity Analysis\\n* Time: O(N) : Let N be length of columnTitle\\n* Space: O(1)\\n\\n\\n\\n## Code\\n```\\n# Left to Righ O(N) | O(1)\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        res = 0\\n        for s in columnTitle:\\n            res *= 26\\n            res += ord(s) - ord(\\'A\\') + 1\\n        return res\\n```\\n\\n\\n* See more 2022 Daily Challenge Solution : [GitHub](https://github.com/gcobs0834/2022-Daily-LeetCoding-Challenge-python3-)",
                "solutionTags": [],
                "code": "```\\ncolumnTitle = \"ABZCD\"\\n# From right to left\\nLetter: D COL Num: 4 Times 1 Res = 4\\nLetter: C COL Num: 3 Times 26 Res = 82\\nLetter: Z COL Num: 26 Times 676 Res = 17658\\nLetter: B COL Num: 2 Times 17576 Res = 52810\\nLetter: A COL Num: 1 Times 456976 Res = 509786\\n\\nreturn 509786\\n```\n```\\n# From Right to Left O(N) | O(1)\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        res, carry = 0, 0\\n        for s in columnTitle[::-1]:\\n            res += (ord(s) - ord(\\'A\\') + 1) * (26 ** carry)\\n            carry += 1\\n        return res\\n```\n```\\ncolumnTitle = \"ABZCD\"\\n# From Left to Right\\nLetter: A COL Num: 1 Res = 0 * 26 + 1 = 1\\nLetter: B COL Num: 2 Res = 1 * 26 + 2 = 28\\nLetter: Z COL Num: 26 Res = 28 * 26 + 26 = 754\\nLetter: C COL Num: 3 Res = 754 * 26 + 3 = 19607\\nLetter: D COL Num: 4 Res = 19607 * 26 + 4 = 509786\\n```\n```\\n# Left to Righ O(N) | O(1)\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        res = 0\\n        for s in columnTitle:\\n            res *= 26\\n            res += ord(s) - ord(\\'A\\') + 1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1477401,
                "title": "1ms-java-solution-faster-than-100-with-explanation",
                "content": "\\nThis problem was solved using a simple math equation, where by analysis I found that any letter can be converted to its corresponding column number using this equation: columnNum = letter * 26^j, where j is its position in the column title starting from the right, zero indexed. By summation of all letters in the columnTitle we will get its corresponding column number.\\nExamples:\\n1- Input: columnTitle = \"A\":\\n   Output: A * 26^0 = 1 * 1 = 1\\n   \\n2- Input: columnTitle = \"AB\":\\n   Output: columnNum = (B * 26^0) + (A * 26^1) = 2 + 26 = 28\\n   \\n3- Input: columnTitle = \"ZY\":\\n   Output: columnNum = (Y * 26^0) + (Z * 26^1) = 25 + (26 * 26) = 25 + 676 = 701\\n\\n4- Input: columnTitle = \"FXSHRXW\":\\n   Output: columnNum = (W * 26^0) + (X * 26^1) + (R * 26^2) + (H * 26^3) +\\n   (S * 26^4) + (X * 26^5) + (F * 26^6) = 2147483647\\n   \\nO(N) Time || O(1) Space\\n\\n```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int columnNum = 0;\\n        for (int i = columnTitle.length() - 1, j = 0; i >= 0; i--, j++) {\\n            // 64 is subtracted from the char val to get its value from 1->26\\n            columnNum += (columnTitle.charAt(i) - 64) * Math.pow(26, j);\\n        }\\n        \\n        return columnNum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int columnNum = 0;\\n        for (int i = columnTitle.length() - 1, j = 0; i >= 0; i--, j++) {\\n            // 64 is subtracted from the char val to get its value from 1->26\\n            columnNum += (columnTitle.charAt(i) - 64) * Math.pow(26, j);\\n        }\\n        \\n        return columnNum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 406828,
                "title": "python-one-liner-comprehension-with-explanation",
                "content": "we know the first element is always 1-26, as follows:\\n```\\nA  = 1\\nZ  = 26\\nAA = 27 26*1 + 1\\nAZ = 52 26*1 + 26\\nBA = 53 26*2 + 1\\nBZ = 78 26*2 + 26\\nAAA  = 26*26*1 + 26*1 + 1\\nZAA  = 26*26*26 + 26*1 + 1\\n```\\nWriting these out helped me to see the pattern - do you see it?\\nEssentially, we can. rewrite them as:\\n```\\nAAA  = 26^2*1 + 26^1*1 + 26^0\\nZAA  = 26^2*26 + 26^1*1 + 26^0\\n```\\nSo we simply have to reverse s, and iterate through it since we want the last character to be raised to the power of i where i is ranged 0 to 25. And we can multiply by the mapping of each character using ord(s[i]) - 64, deriving from ASCII values.\\n```\\ndef titleToNumber(self, s: str) -> int:\\n\\treturn sum([26**i*(ord(c)-64) for i,c in enumerate(s[::-1])])\\n```",
                "solutionTags": [],
                "code": "```\\nA  = 1\\nZ  = 26\\nAA = 27 26*1 + 1\\nAZ = 52 26*1 + 26\\nBA = 53 26*2 + 1\\nBZ = 78 26*2 + 26\\nAAA  = 26*26*1 + 26*1 + 1\\nZAA  = 26*26*26 + 26*1 + 1\\n```\n```\\nAAA  = 26^2*1 + 26^1*1 + 26^0\\nZAA  = 26^2*26 + 26^1*1 + 26^0\\n```\n```\\ndef titleToNumber(self, s: str) -> int:\\n\\treturn sum([26**i*(ord(c)-64) for i,c in enumerate(s[::-1])])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 376680,
                "title": "rust-one-line",
                "content": "```\\nimpl Solution {\\n    pub fn title_to_number(s: String) -> i32 {\\n        s.into_bytes().into_iter().fold(0, |acc, ele| acc*26 + (ele - 65 + 1) as i32)\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn title_to_number(s: String) -> i32 {\\n        s.into_bytes().into_iter().fold(0, |acc, ele| acc*26 + (ele - 65 + 1) as i32)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 308476,
                "title": "compact-javascript-solution-60-ms-faster-than-99-34",
                "content": "\\n```\\nvar titleToNumber = function(s) {\\n    let colNum = 0;\\n    for (let i = s.length - 1, powerOf26 = 1; i >= 0; i--, powerOf26 *= 26) {\\n        colNum += powerOf26 * (s.charCodeAt(i) - 64);\\n    }    \\n    return colNum;\\n};\\n```\\nRuntime: 60 ms, faster than 99.34% of JavaScript online submissions for Excel Sheet Column Number.\\nMemory Usage: 35 MB, less than 47.01% of JavaScript online submissions for Excel Sheet Column Number.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar titleToNumber = function(s) {\\n    let colNum = 0;\\n    for (let i = s.length - 1, powerOf26 = 1; i >= 0; i--, powerOf26 *= 26) {\\n        colNum += powerOf26 * (s.charCodeAt(i) - 64);\\n    }    \\n    return colNum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 52121,
                "title": "my-python-solution",
                "content": "\\n        lenS = len(s)\\n        n2 = 0\\n        for i in range(0,lenS):\\n            n1 = ord(s[i])-64\\n            n2 = 26*n2 +n1\\n        return n2",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n        lenS = len(s)\\n        n2 = 0\\n        for i in range(0,lenS):\\n            n1 = ord(s[i])-64\\n            n2 = 26*n2 +n1\\n        return n2",
                "codeTag": "Unknown"
            },
            {
                "id": 52283,
                "title": "4-line-c-solution",
                "content": "\\n    int titleToNumber(string s) {\\n    \\n        int len = s.length(), sum=0;\\n        \\n        for(int i=0;i<len;i++)\\n            sum += (int(s[i]-'A'+1))*pow(26,len-1-i);\\n            \\n        return sum;\\n    }",
                "solutionTags": [
                    "C++"
                ],
                "code": "\\n    int titleToNumber(string s) {\\n    \\n        int len = s.length(), sum=0;\\n        \\n        for(int i=0;i<len;i++)\\n            sum += (int(s[i]-'A'+1))*pow(26,len-1-i);\\n            \\n        return sum;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 52354,
                "title": "sharing-my-simple-java-solution",
                "content": "    public class Solution {\\n        public int titleToNumber(String s) {\\n            int val = 0;\\n            for (int i=0; i<s.length(); i++){\\n                val = val * 26 + 1 + (int) s.charAt(i) - (int) 'A';\\n            }\\n            return val;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public int titleToNumber(String s) {\\n            int val = 0;\\n            for (int i=0; i<s.length(); i++){\\n                val = val * 26 + 1 + (int) s.charAt(i) - (int) 'A';\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 52090,
                "title": "any-fast-python-code",
                "content": "Hi, I come up with a Python code using reduce.\\nIt costs 75ms, but from the distribution detail, I can see someone get even faster Python code.\\nCan anyone share a faster implementation?\\n\\n    class Solution:\\n    # @param s, a string\\n    # @return an integer\\n    def titleToNumber(self, s):\\n        l = list(s)\\n        l.insert(0,0)\\n        return reduce(lambda x,y: 26*x+ord(y)-64, l)",
                "solutionTags": [],
                "code": "Hi, I come up with a Python code using reduce.\\nIt costs 75ms, but from the distribution detail, I can see someone get even faster Python code.\\nCan anyone share a faster implementation?\\n\\n    class Solution:\\n    # @param s, a string\\n    # @return an integer\\n    def titleToNumber(self, s):\\n        l = list(s)\\n        l.insert(0,0)\\n        return reduce(lambda x,y: 26*x+ord(y)-64, l)",
                "codeTag": "Java"
            },
            {
                "id": 3810249,
                "title": "explained-easy-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- Treat it exactly like converting a string to number, but with base 26.\\n\\n1. There are 26 letters in our alphabet and we start counting from 1, not zero.\\n   So \\'Z\\' is 26.\\n2. The rest of the combinations start from a base 26\\n\\n    AA --> 26*1+ 1 = 27 (A == 1)\\n    AB --> 26*1+ 2 = 28 (B == 2)\\n    AC -->26*1 + 3 = 29 (C == 3)\\n    .....\\n\\n3. So we can write like this:\\n\\n    result = 0\\n    d = s\\\\[i](char) - \\'A\\' + 1 (we used  s[i] -  \\'A\\' to convert the letter to a number like it\\'s going to be C)\\n    result = result* 26 + d\\n\\n4. If the given input is only one letter, it will automatically take the value s[i] - \\'A\\' + 1 as the first result is 0.\\n# Complexity\\n- Time complexity: O(n) : to parse the string\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string colTitle) {\\n        // colTitle--;\\n        // // s.charAt(i) - \\'A\\' + 1\\n        // map<char, int> mp;\\n        // for(char ch =\\'A\\';ch <=\\'Z\\'; ch++){\\n        //     mp[ch] = int(ch)+1;\\n        // }\\n        int res=0;\\n        for( char ch: colTitle){\\n            int dig = ch - \\'A\\' + 1;\\n            res = res*26 + dig;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string colTitle) {\\n        // colTitle--;\\n        // // s.charAt(i) - \\'A\\' + 1\\n        // map<char, int> mp;\\n        // for(char ch =\\'A\\';ch <=\\'Z\\'; ch++){\\n        //     mp[ch] = int(ch)+1;\\n        // }\\n        int res=0;\\n        for( char ch: colTitle){\\n            int dig = ch - \\'A\\' + 1;\\n            res = res*26 + dig;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3593861,
                "title": "java-efficient-use-of-time-and-space",
                "content": "# Intuition\\nConvert base 26 to base 10.\\n\\n\\n# Approach\\nsubstract the @ symbol because any letter minus @ equals 1-26.\\n\\n# Code\\n```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int column = 0;\\n        for (int i = columnTitle.length() - 1; i >= 0; i-- ){\\n            column += (columnTitle.charAt(i) - \\'@\\') * Math.pow(26,columnTitle.length() - 1 - i);\\n        }\\n        return column;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int column = 0;\\n        for (int i = columnTitle.length() - 1; i >= 0; i-- ){\\n            column += (columnTitle.charAt(i) - \\'@\\') * Math.pow(26,columnTitle.length() - 1 - i);\\n        }\\n        return column;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3470734,
                "title": "python-smallest-easiest-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution(object):\\n    def titleToNumber(self, columnTitle):\\n        \"\"\"\\n        :type columnTitle: str\\n        :rtype: int\\n        \"\"\"\\n        s = 0\\n        for jj in columnTitle:\\n            s = s * 26 + ord(jj) - ord(\\'A\\') + 1\\n        return s\\n\\'\\'\\'Please Upvote\\'\\'\\'\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def titleToNumber(self, columnTitle):\\n        \"\"\"\\n        :type columnTitle: str\\n        :rtype: int\\n        \"\"\"\\n        s = 0\\n        for jj in columnTitle:\\n            s = s * 26 + ord(jj) - ord(\\'A\\') + 1\\n        return s\\n\\'\\'\\'Please Upvote\\'\\'\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3270116,
                "title": "easy-to-understand-python-solution-runtime-27ms-faster-than-96-of-other-solution",
                "content": "Please Upvote if you like the solution.\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        a = 0\\n        for i in columnTitle:\\n            a = a * 26 + ord(i) - ord(\\'A\\') + 1\\n        return a",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "Please Upvote if you like the solution.\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        a = 0\\n        for i in columnTitle:\\n            a = a * 26 + ord(i) - ord(\\'A\\') + 1\\n        return a",
                "codeTag": "Java"
            },
            {
                "id": 1874524,
                "title": "java-simple-approach-with-explaination",
                "content": "# Please Upvote If i was able to help. It gives me confdence to code and post more! :)\\n<hr>\\n\\n## Approach\\nTo find column number for a particular column title we can think of it like converting from one number system to another number system.\\nLike in decimal number we have characters 0 to 9 to represent any number in decimal. Similarly in column title the characters are from A to Z to represent any number. There are total of 26 symbols for each place, therefore we can think of a number in a system whose base is 26.\\n\\nNow question becomes very simple. Like we convert any binary or hexa-decimal number to its decimal form, we have to convert this title string into a decimal number.\\n\\nFor example, if we want to find the decimal value of string \\u201C1337\\u201D, we can iteratively find the number by traversing the string from left to right as follows:\\n```\\n\\u20181\\u2019 = 1\\n\\u201913\\u2019 = (1 x 10) + 3 = 13\\n\\u2018133\\u2019 = (13 x 10) + 3 = 133\\n\\u20181337\\u2019 = (133 x 10) + 7 = 1337\\n```\\n\\n**Now in this problem as we are dealing with base-26 number system. Based on the same idea, we can just replace 10s with 26s and convert alphabets to numbers.**\\n\\n```\\nFor a title \\u201CLEET\\u201D:\\nL = 12\\nE = (12 x 26) + 5 = 317\\nE = (317 x 26) + 5 = 8247\\nT = (8247 x 26) + 20 = 214442\\n```\\n# Code: \\n```\\nclass Solution {\\n    \\n    public final int countOfAlphabet = 26;          // Tried To showoff the Java features\\n    \\n    public int titleToNumber(String columnTitle) {\\n        \\n         int i=0, n = columnTitle.length(), result=0;\\n        \\n        while ( i<n){\\n            \\n            // Main Formula to remenber \\n            //Tried To map out the formula from this example.\\n//             For a title \\u201CLEET\\u201D:\\n\\n//                     L = 12\\n//                     E = (12 x 26) + 5 = 317\\n//                     E = (317 x 26) + 5 = 8247\\n//                     T = (8247 x 26) + 20 = 214442\\n                        \\n            result = (result * countOfAlphabet) + (columnTitle.charAt(i)-\\'A\\'+1);    \\n            // result is initialized as 0 therefore in the first iteration letter value will be added,\\n            //it will not n=be multipled by the countOfAlphabet\\n            i++;\\n            \\n        }\\n        \\n        return result;\\n    }\\n}\\n```\\n\\n*#Article Refered for Formula Understanding: https://www.tutorialcup.com/leetcode-solutions/excel-sheet-column-number-leetcode-solution.htm*",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\u20181\\u2019 = 1\\n\\u201913\\u2019 = (1 x 10) + 3 = 13\\n\\u2018133\\u2019 = (13 x 10) + 3 = 133\\n\\u20181337\\u2019 = (133 x 10) + 7 = 1337\\n```\n```\\nFor a title \\u201CLEET\\u201D:\\nL = 12\\nE = (12 x 26) + 5 = 317\\nE = (317 x 26) + 5 = 8247\\nT = (8247 x 26) + 20 = 214442\\n```\n```\\nclass Solution {\\n    \\n    public final int countOfAlphabet = 26;          // Tried To showoff the Java features\\n    \\n    public int titleToNumber(String columnTitle) {\\n        \\n         int i=0, n = columnTitle.length(), result=0;\\n        \\n        while ( i<n){\\n            \\n            // Main Formula to remenber \\n            //Tried To map out the formula from this example.\\n//             For a title \\u201CLEET\\u201D:\\n\\n//                     L = 12\\n//                     E = (12 x 26) + 5 = 317\\n//                     E = (317 x 26) + 5 = 8247\\n//                     T = (8247 x 26) + 20 = 214442\\n                        \\n            result = (result * countOfAlphabet) + (columnTitle.charAt(i)-\\'A\\'+1);    \\n            // result is initialized as 0 therefore in the first iteration letter value will be added,\\n            //it will not n=be multipled by the countOfAlphabet\\n            i++;\\n            \\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1792228,
                "title": "solution-using-maps-in-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        map<char,int> satwik;\\n        const int n=columnTitle.size();\\n        for(int i=0;i<26;i++)\\n        {\\n            satwik[65+i]=1+i;\\n        }\\n        int num=0;\\n        \\n        for(int i=0;i<n;i++)\\n        {\\n            num=(num*26)+satwik[columnTitle[i]];\\n        }\\n        return num;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        map<char,int> satwik;\\n        const int n=columnTitle.size();\\n        for(int i=0;i<26;i++)\\n        {\\n            satwik[65+i]=1+i;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1790606,
                "title": "simple-and-short-code-understanding-bases-of-numbers-0ms",
                "content": "```\\n// 0ms solution is in comments \\n// Upvote if helpful | Someone is intentionally downvoting answers\\n```\\n**Intuition:**\\nSuppose you are given a integer string s =\"248\". How will you convert it to integer?\\n```\\nans=0;\\nfor( int i=0; i<s.size();i++)\\n\\tans=ans*10+s[i];\\n```\\n**Why did we multiply 10 here?**\\nBecause our **base is 10** i.e. total different digits that we have are 10{0-9}. \\n\\nSimilar case will be for converting:\\n1.Binary(base-2 {0,1}), \\n2.Hexadecimal(base-16 {0-9+A-F(10-15)}) and \\n3.Octal strings(base-8 {0-7}),etc. to integers, \\nwe just multiply by their respective base in each iteration.\\nEg: \\n1. s=\"101\" in binary to integer=> **1**x2x2 +**0**x2+**1**= 4+0+1=5\\n2. s=\"101\" in octal to integer=> **1**x8x8 +**0**x8 + **1**= 64+0+ 1=65\\n3. s=\"101\" in decimal to integer=>**1**x10x10+ **0**x10 + **1**= 100+0+1= 101\\n\\n**Now what will be the base for alphabetic numbering?**\\nAs you might have guessed 26 {A-Z}. Where {A-Z}=>{1-26}. Our solution is ready.\\n\\n**CODE:**\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) \\n    {\\n        int ans=0;\\n        for(auto&x: columnTitle)\\n            ans=26*ans+(x-\\'A\\'+1);     //base*ans + value of charachter\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n// 0ms solution is in comments \\n// Upvote if helpful | Someone is intentionally downvoting answers\\n```\n```\\nans=0;\\nfor( int i=0; i<s.size();i++)\\n\\tans=ans*10+s[i];\\n```\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) \\n    {\\n        int ans=0;\\n        for(auto&x: columnTitle)\\n            ans=26*ans+(x-\\'A\\'+1);     //base*ans + value of charachter\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790122,
                "title": "c-0-ms-easy-explanation-smallest-code",
                "content": "#### Someone is intentionally downvoting answer , if you cannot support please dont spread hate\\n### CODE EXPLANANTION\\n```\\n1. STORE THE LENGTH IN A VARIABLE \\'L\\'.\\n2. RUN A LOOP TO ACCESS EACH CHARACTER.\\n3. DECLARE A VARIABLE TO STORE VALUE AND INITIALIZE TO \\'0\\' (LIKE \\'RES\\')\\n3. CLCULATE THE VALUE OF THE CHARACTER AND STORE IT IN RES.\\n\\t\\t3.1 MULTIPLYING THE RES WITH \\'26\\'.\\n\\t\\t3.2 VALUE = TO GET INT VALUE OF  CAHRACTER VALUE MINUS IT BY \\'A\\' AND THEN ADD 1. \\n\\t\\t3.3 WE ARE ADDING 1 BECAUSE THE COUNT OF ALPHABET IS STARTING FROM \\'1\\' NOT \\'0\\' AND ENDING TO Z i.e \\'26\\'.\\n4. AFTER COMPLETION  RETURN RES\\n```\\n\\n**QUESTION ??**\\n```\\nWHY I AM MULTIPLING \\'26\\' ? ?\\n->BASICALLY IT\\'S EASY TO GET A SINGLE LETTER INTO ITS NUMBER FORM.\\n->BUT WHERE IF IT IS A COMBINATION THEN ITS GET TRICKY.\\n->WE KNOW Z=\\'26\\'.\\n->IF I HAVE \\'AA\\' IT MEANS THAT AFTER COMPLETING ONE CYCLE A TO Z . I AM GOING TO NEXT. SO IT PUT \\'A\\' TO \\'Z\\' ACCORDINGLY TO NUMBER OF CYCLES IT IS DOING.\\n\\tIF I SAY I GO FROM A TO Z THEN I GO A TO Z AGAIN AND NOW AGAIN I GET TO A. SO THIS TIME IT \\'BA\\' AND ITS VALUE IS 53. \\n->IT BASICALLY INCREASING THE COUNT BY \\'26 AFTER EACH CYCLE.\\n\\nEX.\\nA -------> \\'26\\'\\nAA------>\\'26 + 1\\'\\n.\\n.\\n.\\nBA------>\\'2*26+1=53\\'\\n.\\n.\\n.\\n.\\nBAA------>\\'(2*26+1)26+1\\'   (here already 2 cycles are completed and we are on third cycle).\\n\\nSO WE HAVE TO ITERATIVELY MANAGE IT TO GET PROPER NUMBER OF CYCLES FOR MULTIPLING \\'26\\' AND THEN ADD TO ITS SUBSEQUENT ONE.\\nBASICALLY WHENEVER WE ARE ADDING THE DIGITS BEORE THAT WE HAVE TO MULTIPLY IT BY \\'26\\'\\n```\\n\\n```\\n                                                        //UPVOTE THIS IF YOU LIKE IT\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\nclass Solution {\\npublic:\\n    int titleToNumber(string c) {\\n        int ans = 0;\\n        for(int i = 0; i < c.length(); ++i){\\n            ans*=26;\\n            ans += (c[i] - \\'A\\') + 1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n1. STORE THE LENGTH IN A VARIABLE \\'L\\'.\\n2. RUN A LOOP TO ACCESS EACH CHARACTER.\\n3. DECLARE A VARIABLE TO STORE VALUE AND INITIALIZE TO \\'0\\' (LIKE \\'RES\\')\\n3. CLCULATE THE VALUE OF THE CHARACTER AND STORE IT IN RES.\\n\\t\\t3.1 MULTIPLYING THE RES WITH \\'26\\'.\\n\\t\\t3.2 VALUE = TO GET INT VALUE OF  CAHRACTER VALUE MINUS IT BY \\'A\\' AND THEN ADD 1. \\n\\t\\t3.3 WE ARE ADDING 1 BECAUSE THE COUNT OF ALPHABET IS STARTING FROM \\'1\\' NOT \\'0\\' AND ENDING TO Z i.e \\'26\\'.\\n4. AFTER COMPLETION  RETURN RES\\n```\n```\\nWHY I AM MULTIPLING \\'26\\' ? ?\\n->BASICALLY IT\\'S EASY TO GET A SINGLE LETTER INTO ITS NUMBER FORM.\\n->BUT WHERE IF IT IS A COMBINATION THEN ITS GET TRICKY.\\n->WE KNOW Z=\\'26\\'.\\n->IF I HAVE \\'AA\\' IT MEANS THAT AFTER COMPLETING ONE CYCLE A TO Z . I AM GOING TO NEXT. SO IT PUT \\'A\\' TO \\'Z\\' ACCORDINGLY TO NUMBER OF CYCLES IT IS DOING.\\n\\tIF I SAY I GO FROM A TO Z THEN I GO A TO Z AGAIN AND NOW AGAIN I GET TO A. SO THIS TIME IT \\'BA\\' AND ITS VALUE IS 53. \\n->IT BASICALLY INCREASING THE COUNT BY \\'26 AFTER EACH CYCLE.\\n\\nEX.\\nA -------> \\'26\\'\\nAA------>\\'26 + 1\\'\\n.\\n.\\n.\\nBA------>\\'2*26+1=53\\'\\n.\\n.\\n.\\n.\\nBAA------>\\'(2*26+1)26+1\\'   (here already 2 cycles are completed and we are on third cycle).\\n\\nSO WE HAVE TO ITERATIVELY MANAGE IT TO GET PROPER NUMBER OF CYCLES FOR MULTIPLING \\'26\\' AND THEN ADD TO ITS SUBSEQUENT ONE.\\nBASICALLY WHENEVER WE ARE ADDING THE DIGITS BEORE THAT WE HAVE TO MULTIPLY IT BY \\'26\\'\\n```\n```\\n                                                        //UPVOTE THIS IF YOU LIKE IT\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\nclass Solution {\\npublic:\\n    int titleToNumber(string c) {\\n        int ans = 0;\\n        for(int i = 0; i < c.length(); ++i){\\n            ans*=26;\\n            ans += (c[i] - \\'A\\') + 1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1296706,
                "title": "c-0ms-100-faster",
                "content": "Simple C++ question\\n```\\nint titleToNumber(string columnTitle) {\\n        reverse(columnTitle.begin(),columnTitle.end());\\n        long ans=0,factor=1;\\n        for(int i=0;i<columnTitle.size();i++)\\n        {\\n            ans=ans+factor*(columnTitle[i]-64);\\n            factor*=26;\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint titleToNumber(string columnTitle) {\\n        reverse(columnTitle.begin(),columnTitle.end());\\n        long ans=0,factor=1;\\n        for(int i=0;i<columnTitle.size();i++)\\n        {\\n            ans=ans+factor*(columnTitle[i]-64);\\n            factor*=26;\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 974161,
                "title": "java-faster-than-100-easy-to-understand-just-a-simple-loop",
                "content": "\\tclass Solution {\\n    public int titleToNumber(String s) {\\n        if (s.length() == 0) return 0;\\n        int res = 0;\\n        for (int i = 0; i < s.length(); i++) {           \\n            int n = s.charAt(i)-64;    // ascall table, A-64 = 1       \\n            res+=n*Math.pow(26, s.length()-i-1);\\n        }\\n        return res;\\n    }\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int titleToNumber(String s) {\\n        if (s.length() == 0) return 0;\\n        int res = 0;\\n        for (int i = 0; i < s.length(); i++) {           \\n            int n = s.charAt(i)-64;    // ascall table, A-64 = 1       \\n            res+=n*Math.pow(26, s.length()-i-1);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 783687,
                "title": "c-4-line-simple-solution-0-ms-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int res=0;\\n        int end = s.size()-1;\\n        for (int i=0; i<s.size();i++)\\n            res+=(pow(26, i))*(s[end-i]-\\'A\\'+1);\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int res=0;\\n        int end = s.size()-1;\\n        for (int i=0; i<s.size();i++)\\n            res+=(pow(26, i))*(s[end-i]-\\'A\\'+1);\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 783650,
                "title": "simple-c-solution-o-n-time-o-1-space",
                "content": "This is a simple problem of converting BASE 26 to Decimal.\\nFor example:-  \"ZZA\" --> (26^2)*26 + (26^1)*26 + (26^0)*1 \\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        \\n        int result = 0;\\n        int n = s.length()-1;\\n        int i = n;\\n        while(i>=0)\\n        {\\n            result = result + (pow(26,(n-i))*(s[i]-\\'A\\'+1));\\n            i--;\\n        }\\n        \\n        return result;\\n    }\\n};\\n```\\nHope that helps :)",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        \\n        int result = 0;\\n        int n = s.length()-1;\\n        int i = n;\\n        while(i>=0)\\n        {\\n            result = result + (pow(26,(n-i))*(s[i]-\\'A\\'+1));\\n            i--;\\n        }\\n        \\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 712836,
                "title": "java-100-faster-with-easy-explanation",
                "content": "Concept: If there is ony one character then there will be 26 numbers for column from A-Z.\\n\\nNow if we use two characters for column then there will be also 26 numbers like AA-AZ. And we have to add previous 26 numbers to this to find final column.\\n\\nSo we have to multiply the result every time by 26 upto the length of our string given.\\n\\nEx. Input : ABC\\n\\n\\t   ans = 0;\\n\\t\\n\\t1) i = 0\\n\\t    ans = 0\\n\\t\\tans = 0 + \\'A\\' - \\'A\\' + 1 = 1;\\n\\t\\n\\t2) i = 1\\n  \\t   ans = 1 * 26 = 26\\n\\t   ans = 26 + \\'B\\' - \\'A\\' + 1 = 26 + 1 + 1 = 28.\\n\\t   \\n    3) i = 2\\n       ans = 28 * 26 = 728\\n\\t   ans = 728 + \\'C\\' - \\'A\\' + 1 = 728 + 2 + 1 = 731\\n\\t\\n\\treturn 731\\n\\n<br />\\n\\nSolution:\\n\\n```\\nclass Solution {\\n    public int titleToNumber(String s) {\\n        \\n        int ans = 0;\\n        \\n        for(char c: s.toCharArray()) {\\n            \\n            ans *= 26;\\n            \\n            ans += (c - \\'A\\' + 1);\\n        }\\n        return ans;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String s) {\\n        \\n        int ans = 0;\\n        \\n        for(char c: s.toCharArray()) {\\n            \\n            ans *= 26;\\n            \\n            ans += (c - \\'A\\' + 1);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 160559,
                "title": "swift-solution-16ms-beats-100",
                "content": "```\\nfunc titleToNumber(_ s: String) -> Int {\\n   var columnNumber = 0\\n   let offset = 64   \\n       \\n   for letter in s.utf8 { \\n       columnNumber = columnNumber * 26 + Int(letter) - offset\\n   }   \\n      \\n   return columnNumber\\n} ",
                "solutionTags": [],
                "code": "```\\nfunc titleToNumber(_ s: String) -> Int {\\n   var columnNumber = 0\\n   let offset = 64   \\n       \\n   for letter in s.utf8 { \\n       columnNumber = columnNumber * 26 + Int(letter) - offset\\n   }   \\n      \\n   return columnNumber\\n} ",
                "codeTag": "Unknown"
            },
            {
                "id": 52167,
                "title": "javascript-beat-100-152ms",
                "content": "/**\\n * @param {string} s\\n * @return {number}\\n */\\n\\nvar titleToNumber = function(s) {\\n    \\n        var result = 0;\\n        \\n        var sLength = s.length;\\n        \\n        for (var i = 0; i < sLength; i++)\\n        {\\n             result = result * 26 + (s.charCodeAt(i) - 'A'.charCodeAt(0) + 1);\\n        }\\n        \\n        return result;\\n};",
                "solutionTags": [],
                "code": "/**\\n * @param {string} s\\n * @return {number}\\n */\\n\\nvar titleToNumber = function(s) {\\n    \\n        var result = 0;\\n        \\n        var sLength = s.length;\\n        \\n        for (var i = 0; i < sLength; i++)\\n        {\\n             result = result * 26 + (s.charCodeAt(i) - 'A'.charCodeAt(0) + 1);\\n        }\\n        \\n        return result;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 52236,
                "title": "simple-and-accepted-as-best-in-c",
                "content": "    //AC - 4ms;\\n    int titleToNumber(char* s)\\n    {\\n        int sum = 0;\\n        while(*s) sum = 26*sum+(*(s++)-'A'+1);\\n        return sum;\\n    }",
                "solutionTags": [],
                "code": "    //AC - 4ms;\\n    int titleToNumber(char* s)\\n    {\\n        int sum = 0;\\n        while(*s) sum = 26*sum+(*(s++)-'A'+1);\\n        return sum;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 52242,
                "title": "8-lines-c-solution-in-8ms-with-explanation",
                "content": "The question is:\\n\\n*Given a **column title** as appear in an **Excel sheet**, return its **corresponding column number**.*\\n\\nLet's write some title's for example:\\n\\n**A~Z**\\n\\n - A: **1**\\n - B: **2**\\n - ........\\n - Z: **26**\\n\\n***A~Z* TOTAL**: ***26***\\n\\n----------\\n**AA~ZZ**\\n\\n - AA: 26 + **1**\\n - AB: 26 + **2**\\n - .......\\n - AZ: 26 + **26** = 26 + **26 \\xd7 *1***\\n\\n----------\\n - BA: 26 + 26 + **1**\\n - BB: 26 + 26 + **2**\\n - ........\\n - BZ: 26 + 26 + **26** = 26 + **26 \\xd7 *2***\\n\\n----------\\n - ..............................\\n\\n----------\\n - ZA: 26 + 26 \\xd7 25 + **1**\\n - ZB: 26 + 26 \\xd7 25 + **2**\\n - ........\\n - ZZ: 26 + 26 \\xd7 25 + **26** = 26 + **26 \\xd7 *26***\\n\\n***AA~ZZ* TOTAL**: ***26 \\xd7 26***\\n\\n----------\\nIf we write more, we can find that from ***AA...A*** to ***ZZ...Z* (the SAME length *n*)**, there are ***26^n*** numbers.\\n\\nIn order to get the **corresponding column number** of a normal **column title**,\\n\\nwe can ***DIVIDE*** the problem into ***2 PARTS***:\\n\\n----------\\n***PART 1***: **GET** the length of column title ***s***\\n\\n**Q: Why to get the length of column title s?**\\n\\nA: Suppose ***k* = *s.length()***, If ***k*** equals **1**, return **s[0] - 'A' + 1**.\\n\\nIf not, we need to ***FIRST*** find the biggest ***ZZ...Z*** (the length is ***k - 1***) ***NO MORE THAN s***.\\n\\nAnd get the ***SUM***:\\n\\n**S_1 = 26 + 26^2 + 26^3 +...+ 26^(k - 1)**.\\n\\nThis is the ***TOTAL*** from ***A*** to ***ZZZ...* (the length is *k - 1*)**\\n\\n----------\\n***PART 2***: **GET the rest (from *AA...A* (the length is *k*) to *s*)**\\n\\nWe can **MINUS *s*** with ***AA...A*** (the length is ***k***) ***DIGIT BY DIGIT SEPERATLY***.\\n\\nSuppose ***s* = *Q1Q2...Qk***,\\n\\n**S_2 = (Q1- 'A') \\xd7 26^(k - 1) + (Q2- 'A') \\xd7 26^(k - 2) + ... + (Qk- 'A') \\xd7 1** + ***1***\\n\\n***NOTE***: There is a ***1*** in the end of **S_2**.\\n\\nThe ***RESULT*** will be \\n\\n**S** = **S_1** + **S_2**\\n\\n**= (Q1- 'A' + 1) \\xd7 26^(k - 1) + (Q2- 'A' + 1) \\xd7 26^(k - 2) + ... + (Qk- 'A' + 1) \\xd7 1**\\n\\n----------\\n***My code:***\\n\\n    class Solution {\\n    public:\\n        int titleToNumber(string s) {\\n            int sum = 0;\\n            for(int i = 0; i < s.length(); i++)\\n            {\\n                sum += (s[i] - 'A' + 1)* pow(26, s.length() - 1 - i);\\n            }\\n            return sum;\\n        }\\n    };\\n\\n   ***Time Complexity: O(k), k is the length of s***",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "class Solution {\\n    public:\\n        int titleToNumber(string s) {\\n            int sum = 0;\\n            for(int i = 0; i < s.length(); i++)\\n            {\\n                sum += (s[i] - 'A' + 1)* pow(26, s.length() - 1 - i);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 52279,
                "title": "my-java-solution-4ms-4-lines",
                "content": "public class Solution {\\n\\n    public int titleToNumber(String s) {\\n        int sum = 0;\\n        for(int i = 0; i < s.length(); i++ )\\n            sum = sum + (int)Math.pow(26,s.length() - i - 1) * (s.charAt(i) - 'A' + 1);\\n        return sum;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public int titleToNumber(String s) {\\n        int sum = 0;\\n        for(int i = 0; i < s.length(); i++ )\\n            sum = sum + (int)Math.pow(26,s.length() - i - 1) * (s.charAt(i) - 'A' + 1);\\n        return sum;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3733518,
                "title": "simple-solution-beats-100",
                "content": "\\n# # Please Upvote if feel it easy!\\n# its same as convert the binary to decimal\\n```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int sum=0,p=0; //  p to increse the power\\n        int n = columnTitle.length();\\n        for(int i=n-1;i>=0;i--) {\\n            int temp = columnTitle.charAt(i)-64;\\n            sum=sum+(int)Math.pow(26,p++)*temp;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int sum=0,p=0; //  p to increse the power\\n        int n = columnTitle.length();\\n        for(int i=n-1;i>=0;i--) {\\n            int temp = columnTitle.charAt(i)-64;\\n            sum=sum+(int)Math.pow(26,p++)*temp;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3313961,
                "title": "super-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int sum = 0;\\n        for(char ch : columnTitle.toCharArray()) {\\n            int diff = ch-(\\'A\\' - 1);\\n            sum = sum *26 + diff;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int sum = 0;\\n        for(char ch : columnTitle.toCharArray()) {\\n            int diff = ch-(\\'A\\' - 1);\\n            sum = sum *26 + diff;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3200654,
                "title": "go-0ms-simple-solution",
                "content": "# Intuition\\nIts like calculating decimals at one\\'s, ten\\'s, hundred\\'s places\\nexcept the base is 26 here not 10\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nfunc titleToNumber(columnTitle string) int {\\n    \\n    multiplier := 1\\n    result := 0\\n\\n    for i := len(columnTitle) - 1; i >= 0; i -= 1 {\\n        result += (int(columnTitle[i]) - int(\\'A\\') + 1) * multiplier\\n        multiplier *= 26\\n    }\\n\\n    return result\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc titleToNumber(columnTitle string) int {\\n    \\n    multiplier := 1\\n    result := 0\\n\\n    for i := len(columnTitle) - 1; i >= 0; i -= 1 {\\n        result += (int(columnTitle[i]) - int(\\'A\\') + 1) * multiplier\\n        multiplier *= 26\\n    }\\n\\n    return result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3200119,
                "title": "converting-excel-column-title-to-column-number-using-positional-value-of-letters",
                "content": "# Intuition\\n To convert a column title to a corresponding column number in Excel, we need to understand the positional value of each letter in the title. Each letter in the title represents a value that is a power of 26, where the letter \\'A\\' represents the zeroth power of 26, \\'B\\' represents the first power of 26, and so on. We can start from the rightmost letter of the title and work our way left, accumulating the corresponding values using the formula (value = (letter value) * (26 ^ position)). Once we have computed the values for each letter in the title, we can add them up to get the final column number. \\n\\n# Approach\\nThe approach I used is to iterate through each character in the input string and convert it to its corresponding column value by subtracting the ASCII value of \\'A\\' and adding 1. We use a variable to keep track of the positional value of the letter and calculate the corresponding value using the formula mentioned earlier. Finally, we add up all the values to get the final result.\\n\\n# Complexity\\n- Time complexity:\\n The time complexity of this approach is$$ O(n),$$ where n is the length of the input string. This is because we need to iterate over each character in the string once to compute its corresponding column value. \\n\\n- Space complexity:\\n The space complexity of this approach is $$O(1)$$, as we are only using a constant amount of extra space to store variables such as the result and positional value.\\n\\n# Code\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        result = 0\\n        for i in range(len(columnTitle)):\\n            letter_value = ord(columnTitle[i]) - ord(\\'A\\') + 1\\n            position = len(columnTitle) - i - 1\\n            result += letter_value * (26 ** position)\\n        return result\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Math",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        result = 0\\n        for i in range(len(columnTitle)):\\n            letter_value = ord(columnTitle[i]) - ord(\\'A\\') + 1\\n            position = len(columnTitle) - i - 1\\n            result += letter_value * (26 ** position)\\n        return result\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2857817,
                "title": "c-solution-for-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int TitleToNumber(string columnTitle) {\\n        int output=0;\\n        for (int i=0;i<columnTitle.Length;i++){\\n            int curr=columnTitle[i]-\\'A\\'+1;\\n            output=output*26+curr;\\n        }\\n        return output;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int TitleToNumber(string columnTitle) {\\n        int output=0;\\n        for (int i=0;i<columnTitle.Length;i++){\\n            int curr=columnTitle[i]-\\'A\\'+1;\\n            output=output*26+curr;\\n        }\\n        return output;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2717425,
                "title": "python-3-clean-and-easy-solutoin",
                "content": "T.C: O(N), where N is the length of the string\\nS.C: O(1)\\n````\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        col_no = 0\\n        for c in columnTitle:\\n            col_no = (col_no * 26) + (ord(c) - ord(\\'A\\') + 1)\\n        return col_no",
                "solutionTags": [],
                "code": "T.C: O(N), where N is the length of the string\\nS.C: O(1)\\n````\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        col_no = 0\\n        for c in columnTitle:\\n            col_no = (col_no * 26) + (ord(c) - ord(\\'A\\') + 1)\\n        return col_no",
                "codeTag": "Java"
            },
            {
                "id": 2675758,
                "title": "easy-approach-using-math-pow-function-o-nloglogn",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int res=0;\\n        int add=0;\\n        for(int i=columnTitle.length()-1;i>=0;i--){\\n            add = (pow(26,columnTitle.length()-1-i)*(columnTitle[i]-64));\\n            res+=(add);\\n        }\\n        return res;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int res=0;\\n        int add=0;\\n        for(int i=columnTitle.length()-1;i>=0;i--){\\n            add = (pow(26,columnTitle.length()-1-i)*(columnTitle[i]-64));\\n            res+=(add);\\n        }\\n        return res;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2355756,
                "title": "simplest-java-solution-100-faster-1ms",
                "content": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int ans = 0;\\n        \\n        for (int i = 0; i < columnTitle.length(); i++) {\\n            ans *= 26;\\n            char c = columnTitle.charAt(i);\\n            int n = (int) (c - \\'A\\' + 1);\\n            ans += n;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int ans = 0;\\n        \\n        for (int i = 0; i < columnTitle.length(); i++) {\\n            ans *= 26;\\n            char c = columnTitle.charAt(i);\\n            int n = (int) (c - \\'A\\' + 1);\\n            ans += n;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1792695,
                "title": "simple-recursive-solution",
                "content": "```\\n/**\\n * @param {string} columnTitle\\n * @return {number}\\n */\\nvar titleToNumber = function(columnTitle) {\\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\\n    let value = 0;\\n    \\n    const getNumericValue = (arr) => {\\n        if (arr.length > 1) {\\n            getNumericValue(arr.slice(1));\\n        }\\n        \\n        value += (alphabet.indexOf(arr[0]) + 1) * (Math.pow(26, (arr.length - 1)));\\n    }\\n    \\n    getNumericValue(columnTitle);\\n    \\n    return value;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * @param {string} columnTitle\\n * @return {number}\\n */\\nvar titleToNumber = function(columnTitle) {\\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\\n    let value = 0;\\n    \\n    const getNumericValue = (arr) => {\\n        if (arr.length > 1) {\\n            getNumericValue(arr.slice(1));\\n        }\\n        \\n        value += (alphabet.indexOf(arr[0]) + 1) * (Math.pow(26, (arr.length - 1)));\\n    }\\n    \\n    getNumericValue(columnTitle);\\n    \\n    return value;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1792010,
                "title": "171-excel-sheet-column-number",
                "content": "Approach : \\nJust think about like the binary of base 2 simlarly in alphabet base is 26. So it multiply with string   [n-1-i]\\n\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) \\n    {\\n        int sum=0;\\n        int ch;\\n        int n=columnTitle.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            ch=columnTitle[n-i-1]-\\'A\\';\\n            sum+=(ch+1)*pow(26,i);\\n        }\\n        return sum;\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) \\n    {\\n        int sum=0;\\n        int ch;\\n        int n=columnTitle.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            ch=columnTitle[n-i-1]-\\'A\\';\\n            sum+=(ch+1)*pow(26,i);\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1791420,
                "title": "c-recursive-solution-math-beats-100-of-c-solution",
                "content": "```\\nA - 1   (26 * 0 + 1)             AA - 27   (26 * 1 + 1)\\nB - 2   (26 * 0 + 2)             AB - 28   (26 * 1 + 2)\\nC - 3   (26 * 0 + 3)             AC - 29   (26 * 1 + 3)\\n.                                           .\\n.                                           .\\nZ - 26  (26 * 0 + 26)            AZ - 52   (26 * 1 + 26)\\n```\\n\\nLets now take an example - \\nAAC - value of AAC is 26 * (value of \"AA\") + value of \\'C\\'.\\nWe have seen that value of \"AA\" is 27. Then value of \"AAC\" is 26 * 27 + 3 = 705.\\nHence we get a recursive idea from the above example.\\n\\n```\\nclass Solution {\\nprivate:\\n    long solve(string &s,int index){\\n        if(index == 0) return s[index] - \\'A\\' + 1;\\n        \\n        long rest = solve(s,index - 1);\\n        return 26 * rest + s[index] - \\'A\\' + 1;\\n    }\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int n = columnTitle.size() - 1;\\n        return solve(columnTitle,n);\\n    }\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/b7bc5de5-6078-442b-afa3-761379f0df0a_1645529472.6236694.png)\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nA - 1   (26 * 0 + 1)             AA - 27   (26 * 1 + 1)\\nB - 2   (26 * 0 + 2)             AB - 28   (26 * 1 + 2)\\nC - 3   (26 * 0 + 3)             AC - 29   (26 * 1 + 3)\\n.                                           .\\n.                                           .\\nZ - 26  (26 * 0 + 26)            AZ - 52   (26 * 1 + 26)\\n```\n```\\nclass Solution {\\nprivate:\\n    long solve(string &s,int index){\\n        if(index == 0) return s[index] - \\'A\\' + 1;\\n        \\n        long rest = solve(s,index - 1);\\n        return 26 * rest + s[index] - \\'A\\' + 1;\\n    }\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int n = columnTitle.size() - 1;\\n        return solve(columnTitle,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1791411,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int num=0;\\n        for(int i=0;i<columnTitle.length();i++)\\n        {\\n            int digit=columnTitle[i]-\\'A\\'+1;\\n            num=(26*num)+digit;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int num=0;\\n        for(int i=0;i<columnTitle.length();i++)\\n        {\\n            int digit=columnTitle[i]-\\'A\\'+1;\\n            num=(26*num)+digit;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1791152,
                "title": "javascript-faster-than-94-with-explanation",
                "content": "**Javascript | Faster than 94%**\\nlet string = \\'ZZZ\\'\\n how we\\'ll calculate the output?\\n as we know... \\n A - 1,\\n B - 2 . . . \\n . \\n .\\n Z - 26\\n AA - 27  i.e 26 + 1\\n ZA = 26*26 + 1 = 677\\n so the formula we can make is  n = n + ((Ascii - 64)*(26^l--))\\n \\n\\n```\\nvar titleToNumber = function(columnTitle) {\\n    let l = columnTitle.length-1; \\n    let result = 0;\\n    for(let i = 0;i<columnTitle.length;i++){\\n        result = result + ((columnTitle[i].charCodeAt()-64) * Math.pow(26,l--)); \\n    }\\n    return result;\\n};\\n```\\n\\n**Upvote**",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar titleToNumber = function(columnTitle) {\\n    let l = columnTitle.length-1; \\n    let result = 0;\\n    for(let i = 0;i<columnTitle.length;i++){\\n        result = result + ((columnTitle[i].charCodeAt()-64) * Math.pow(26,l--)); \\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1791008,
                "title": "python-3-50ms-ord-math-solution-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        r=0\\n        for i in columnTitle:\\n            r = r * 26 + ord(i)-64\\n        return r\\n```\\n```\\n```\\n\\n* Example : \"ZY\" -->\\n* First Y , ord(Y) = 89,-->89-64=25(value of Y in the first 26 elements),therefore its excel sheet value will be = [(26^0)*25] == 25\\n* Second Z, ord(Z) = 90,-->90-64=26(value of Z in the first 26 elements) ,therefore its excel sheet value will be = [(26^1)*26] == 656\\n* Taking summ of them gives \"ZY\"\\'s column number i.e, 656 + 25 = 701\\n\\n```\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Iterator"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        r=0\\n        for i in columnTitle:\\n            r = r * 26 + ord(i)-64\\n        return r\\n```\n```\\n```\n```\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790677,
                "title": "c-solution-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string col) {\\n        int s=col.length();\\n        int ans=0,c=0;\\n        for(int i=s-1;i>=0;i--){\\n            ans+=pow(26,c++)*(col[i]-64);\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "class Solution {\\npublic:\\n    int titleToNumber(string col) {\\n        int s=col.length();\\n        int ans=0,c=0;\\n        for(int i=s-1;i>=0;i--){\\n            ans+=pow(26,c++)*(col[i]-64);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1767775,
                "title": "c-o-n-time-o-1-space-100-faster-simple-logic-with-detailed-explanation",
                "content": "If we closely observe, there is a pattern while counting the column number (traverse from right to left of the string).\\n\\nNormally, in decimal digits, the base value is 10, because there are 10 digits, 0 to 9. \\nSo, For Ex :172 can be represented as :  1x100 + 7x10 +2x1 , which is equal to  1x(10^2) + 7x(10^1) + 2x(10^0),\\nwhich is in turn equal to (traversing from right to left) : **[2 x (10^0)] + [7 x (10^1)] + [1 x (10^2)]  = 172**\\n\\nIf we consider the same for letters, the base will be 26, because there are 26 letters, A to Z. So, instead of powers of 10, we will use powers of 26, along with the values of each letter (A = 1, B = 2, C = 3, ..... Y = 25, Z = 26).\\n\\n**Example : \\nConsider input \"ABC\"\\nHere, traversing from right, we get:\\nC : 3 x (26^0) (since C is the rightmost letter, its place value will be 0)\\nB : 2 x (26^1) (incrementing place value by 1)\\nA : 1 x (26^2) (incrementing place value by 1)\\nNow adding all the above, we get \"ABC\" = [3 x (26^0)] + [2 x (26^1)] + [1 x (26^2)] = 731**\\n\\nWhen it comes to applying this concept in code, we can **initialise a variable j=0**, and increment it each time while traversing from right to left of the string, so as to **keep track of the power of 26**, and keep adding to a sum variable.\\n\\n```\\n  \\n       int titleToNumber(string columnTitle) {\\n        \\n\\t\\t// Logic :   \\n\\t\\t// AAAB\\n        // (26^0) *2 + (26^1)*(1) + (26^2)(1) + (26^3) * (1)\\n\\t\\t\\n        int sum = 0;\\n        int j=0;\\n        for(int i=columnTitle.length()-1 ; i>=0 ; i--)\\n        {\\n            // (columnTitle[i]-\\'A\\'+1) : used to estimate the value of the character at the index i. \\n\\t\\t\\t// Ex : \\'A\\' -\\'A\\' +1 = 1\\n\\t\\t\\t// Ex : \\'B\\' -\\'A\\' + 1 = 2 and so on\\n            sum += ((columnTitle[i]-\\'A\\'+1) * pow(26, j));\\n            j++;\\n        }\\n        return sum;\\n    }\\n```\\n\\nThis is my very first time answering a question in LeetCode Discuss. Hope you find it helpful. Please comment below if you have any doubts, and upvote if you liked my approach. Thanks!",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\n  \\n       int titleToNumber(string columnTitle) {\\n        \\n\\t\\t// Logic :   \\n\\t\\t// AAAB\\n        // (26^0) *2 + (26^1)*(1) + (26^2)(1) + (26^3) * (1)\\n\\t\\t\\n        int sum = 0;\\n        int j=0;\\n        for(int i=columnTitle.length()-1 ; i>=0 ; i--)\\n        {\\n            // (columnTitle[i]-\\'A\\'+1) : used to estimate the value of the character at the index i. \\n\\t\\t\\t// Ex : \\'A\\' -\\'A\\' +1 = 1\\n\\t\\t\\t// Ex : \\'B\\' -\\'A\\' + 1 = 2 and so on\\n            sum += ((columnTitle[i]-\\'A\\'+1) * pow(26, j));\\n            j++;\\n        }\\n        return sum;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1525817,
                "title": "c",
                "content": "```\\npublic class Solution {\\n    public int TitleToNumber(string columnTitle) {\\n        if (columnTitle == null || columnTitle == string.Empty)\\n            return 0;\\n        \\n        int res = 0;\\n        \\n        for (int i = columnTitle.Length - 1; i > -1; i--)\\n        {\\n            res += (columnTitle[i] - \\'A\\' + 1) * (int)Math.Pow(26, columnTitle.Length - 1 - i);\\n        }\\n        \\n        return res;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int TitleToNumber(string columnTitle) {\\n        if (columnTitle == null || columnTitle == string.Empty)\\n            return 0;\\n        \\n        int res = 0;\\n        \\n        for (int i = columnTitle.Length - 1; i > -1; i--)\\n        {\\n            res += (columnTitle[i] - \\'A\\' + 1) * (int)Math.Pow(26, columnTitle.Length - 1 - i);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1515237,
                "title": "simple-to-understand-using-basic-loop-with-comments",
                "content": "**Thumbs up if you find this helpful** \\uD83D\\uDC4D\\n\\n```\\npublic class Solution {\\n    public int TitleToNumber(string columnTitle) {\\n        var result = 0;\\n        \\n        foreach (var letter in columnTitle) {            \\n            // Get the alphabet position of the letter\\n            var pos = (letter - \\'A\\') + 1;\\n            \\n            // Calculate the result\\n            result = result * 26 + pos;\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int TitleToNumber(string columnTitle) {\\n        var result = 0;\\n        \\n        foreach (var letter in columnTitle) {            \\n            // Get the alphabet position of the letter\\n            var pos = (letter - \\'A\\') + 1;\\n            \\n            // Calculate the result\\n            result = result * 26 + pos;\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1436715,
                "title": "4-lines-easiest-code-detailed-explanation-of-approach-for-beginners-coders-o-n",
                "content": "In this question you have to given the string as columnTitle. and from it you have to calculate the column number.\\nfor Calculating the column number always traverse the string from end .so first of all reverse the string \\nthen traverse the string from start to end , \\nans+=pow(26,i)*((columnTitle[i] % 65)+1)\\nthen return ans.\\n\\n\\nint titleToNumber(string columnTitle) {\\n        \\n     reverse(columnTitle.begin(),columnTitle.end());\\n      \\n      int ans=0, n=columnTitle.length();\\n      \\n      for(int i=0;i<n;i++)  ans=ans+pow(26,i)*((columnTitle[i]%65)+1);\\n      \\n      return ans;\\n      \\n    }\\n\\t\\n\\t//plz upvote my solution if you really like it. and comment if you have any doubt. keep coding",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "In this question you have to given the string as columnTitle. and from it you have to calculate the column number.\\nfor Calculating the column number always traverse the string from end .so first of all reverse the string \\nthen traverse the string from start to end , \\nans+=pow(26,i)*((columnTitle[i] % 65)+1)\\nthen return ans.\\n\\n\\nint titleToNumber(string columnTitle) {\\n        \\n     reverse(columnTitle.begin(),columnTitle.end());\\n      \\n      int ans=0, n=columnTitle.length();\\n      \\n      for(int i=0;i<n;i++)  ans=ans+pow(26,i)*((columnTitle[i]%65)+1);\\n      \\n      return ans;\\n      \\n    }\\n\\t\\n\\t//plz upvote my solution if you really like it. and comment if you have any doubt. keep coding",
                "codeTag": "Unknown"
            },
            {
                "id": 879606,
                "title": "faster-than-99-17-of-python3",
                "content": "```\\nclass Solution:\\n    def titleToNumber(self, s: str) -> int:\\n        res = 0\\n        for i, c in enumerate(s[::-1]):\\n            res += (ord(c)-64)*(26**(i))\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, s: str) -> int:\\n        res = 0\\n        for i, c in enumerate(s[::-1]):\\n            res += (ord(c)-64)*(26**(i))\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 785177,
                "title": "excel-sheet-colum-number-java-solution-faster-than-100-w-explanation",
                "content": "`String s`  is basically a base 26 number where A = 1 and Z = 26, except there are no letters representing some form of 0. This doesn\\'t end up making a difference though. So, the last char in the string corresponds to some number between 1-26, then the char in front of it is a number between (1-26) * 26, the next (1-26) * 26 * 26, and so forth. You then add all the individual values of each char together.\\nSorry if it\\'s unclear, this is my first time posting.\\n\\n```\\nclass Solution \\n{\\n    public int titleToNumber(String s) \\n    {\\n        int res = 0;\\n        for(int i = s.length() - 1; i >= 0; i--)\\n        {\\n            res += (s.charAt(i) - \\'A\\' + 1) * Math.pow(26, s.length() - i - 1);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\n    public int titleToNumber(String s) \\n    {\\n        int res = 0;\\n        for(int i = s.length() - 1; i >= 0; i--)\\n        {\\n            res += (s.charAt(i) - \\'A\\' + 1) * Math.pow(26, s.length() - i - 1);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 784001,
                "title": "c-python-similar-to-decimal-iteration-and-recursion-1-line",
                "content": "Solution 1: Iteration\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int ans = 0;\\n        for(auto c:s)  ans = ans * 26 + (c-\\'A\\'+1);        \\n        return ans;\\n    }\\n};\\n```\\n\\nSolution 2: Recursion\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        return s.empty() ?0 : titleToNumber(s.substr(0, s.size() - 1)) * 26 + (s.back()-\\'A\\'+1);       \\n    }\\n};\\n```\\n\\nSolution 3: Python\\n```\\nclass Solution:\\n    def titleToNumber(self, s: str) -> int:\\n        return reduce(lambda x, y : x * 26 + y, [ord(c) - ord(\\'A\\') + 1 for c in list(s)])\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int ans = 0;\\n        for(auto c:s)  ans = ans * 26 + (c-\\'A\\'+1);        \\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        return s.empty() ?0 : titleToNumber(s.substr(0, s.size() - 1)) * 26 + (s.back()-\\'A\\'+1);       \\n    }\\n};\\n```\n```\\nclass Solution:\\n    def titleToNumber(self, s: str) -> int:\\n        return reduce(lambda x, y : x * 26 + y, [ord(c) - ord(\\'A\\') + 1 for c in list(s)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 602684,
                "title": "runtime-100-simple-python3",
                "content": "```\\nclass Solution:\\n    def titleToNumber(self, s: str) -> int:\\n        ans = 0\\n        for c in s:\\n            ans = ans * 26 + ord(c) - ord(\\'A\\') + 1\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, s: str) -> int:\\n        ans = 0\\n        for c in s:\\n            ans = ans * 26 + ord(c) - ord(\\'A\\') + 1\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 141519,
                "title": "short-clean-and-easy-to-understand-java-solution-1ms",
                "content": "Integers are base 10 numbers calculated as: \\n`321 = 3 * (10^2) + 2 * (10^1) +  1 * (10^0)`\\n\\nAn excel sheet column number(replace alphabets with corresponding number) is a base 26 number:\\n\\n`CBA = C * (26^2) + B * (26^1) + A * (26^0)`\\n\\nwhere C = 3, B = 2 & A = 1\\n\\n\\n```\\n    public int titleToNumber(String s) {\\n        double sum = 0;\\n        int len = s.length();\\n        for(int i = len - 1;i > -1;i--){\\n            sum += Math.pow(26, len - (i + 1)) * (s.charAt(i) - \\'A\\' + 1) ;\\n        }\\n        return (int)sum;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int titleToNumber(String s) {\\n        double sum = 0;\\n        int len = s.length();\\n        for(int i = len - 1;i > -1;i--){\\n            sum += Math.pow(26, len - (i + 1)) * (s.charAt(i) - \\'A\\' + 1) ;\\n        }\\n        return (int)sum;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 52312,
                "title": "c-4ms-so-easy",
                "content": "class Solution {\\npublic:\\n\\n    int titleToNumber(string s) {\\n        int len=s.size();\\n        int sum=s[0]-64;\\n        for (int i=1;i<len;i++){\\n            sum=sum*26+int(s[i]-64);\\n        }\\n        return sum;\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int titleToNumber(string s) {\\n        int len=s.size();\\n        int sum=s[0]-64;\\n        for (int i=1;i<len;i++){\\n            sum=sum*26+int(s[i]-64);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3867599,
                "title": "simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        number=0\\n        for alpha in columnTitle:\\n            number=number*26 + (ord(alpha)-64)\\n        return number\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        number=0\\n        for alpha in columnTitle:\\n            number=number*26 + (ord(alpha)-64)\\n        return number\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3820095,
                "title": "easy-to-use",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int ans=0;\\n         for(int i=0;i<columnTitle.size();i++){\\n          ans *=26;\\n          ans += columnTitle[i]-\\'A\\'+1;\\n      }\\n      return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int ans=0;\\n         for(int i=0;i<columnTitle.size();i++){\\n          ans *=26;\\n          ans += columnTitle[i]-\\'A\\'+1;\\n      }\\n      return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3672145,
                "title": "easy-solution-in-javascript-wow-you-must-watch-solution",
                "content": "#  IF you like solution, please upvote\\n\\n# Code\\n```\\n/**\\n * @param {string} columnTitle\\n * @return {number}\\n */\\nvar titleToNumber = function(columnTitle) {\\n    let sum = 0;\\n    let index = 1;\\n    for(let i = columnTitle.length - 1; i >= 0; i--) {\\n        sum += index * (columnTitle[i].charCodeAt() - 64)\\n        index*= 26\\n    }\\n    return sum\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} columnTitle\\n * @return {number}\\n */\\nvar titleToNumber = function(columnTitle) {\\n    let sum = 0;\\n    let index = 1;\\n    for(let i = columnTitle.length - 1; i >= 0; i--) {\\n        sum += index * (columnTitle[i].charCodeAt() - 64)\\n        index*= 26\\n    }\\n    return sum\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3436429,
                "title": "python-simple-clean-code",
                "content": "# Code\\n```\\nclass Solution:\\n    def titleToNumber(self, s: str) -> int:\\n        n = len(s)\\n        cnt = [0] * 7\\n        p = 0\\n        for i in range(n -1, -1, -1):\\n            cnt[i] = (ord(s[i]) - ord(\\'A\\') + 1) * 26 ** p\\n            p += 1\\n        return sum(cnt)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, s: str) -> int:\\n        n = len(s)\\n        cnt = [0] * 7\\n        p = 0\\n        for i in range(n -1, -1, -1):\\n            cnt[i] = (ord(s[i]) - ord(\\'A\\') + 1) * 26 ** p\\n            p += 1\\n        return sum(cnt)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3406257,
                "title": "c-solution",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int ans = 0;\\n        for(auto c: columnTitle) {\\n            int x = c - \\'A\\' + 1;\\n            ans = ans * 26 + x;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int ans = 0;\\n        for(auto c: columnTitle) {\\n            int x = c - \\'A\\' + 1;\\n            ans = ans * 26 + x;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3171797,
                "title": "c-4-lines-code-well-explained",
                "content": "First we will find the size of columnTitle string. In this string every character will have different position and this position will decide what value it contributes to the entire sum value.\\nLike in AB. B is at position \\'0\\' means its value will be int p =  (26^0)*2.\\nwhile A is at position \\'1\\' means its value will be int k = (26^1)*1.\\nSo the entire value of AB is  p+k.\\n![image](https://assets.leetcode.com/users/images/f962d7f3-1c46-4edd-a477-8e73de5f6cee_1676117657.332754.png)\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int n = columnTitle.size(); int sum = 0;\\n        for(int i=0; i<n; i++){ char ch = columnTitle[i];   int p =  ch -\\'A\\' + 1; sum = sum + (pow(26,n-i-1)*p); } \\n\\t\\treturn sum;\\n    }\\n};\\n",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int n = columnTitle.size(); int sum = 0;\\n        for(int i=0; i<n; i++){ char ch = columnTitle[i];   int p =  ch -\\'A\\' + 1; sum = sum + (pow(26,n-i-1)*p); }",
                "codeTag": "Java"
            },
            {
                "id": 3167956,
                "title": "accepted-c-solution-easy-to-understand",
                "content": "```\\npublic class Solution {\\n    public int TitleToNumber(string columnTitle) {\\n        int ans=0;\\n        int doubler=0;\\n        for(int i=columnTitle.Length-1;i>-1;i--){\\n            ans+=(columnTitle[i]-\\'A\\' + 1)*(int)Math.Pow(26,doubler);\\n            doubler+=1;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int TitleToNumber(string columnTitle) {\\n        int ans=0;\\n        int doubler=0;\\n        for(int i=columnTitle.Length-1;i>-1;i--){\\n            ans+=(columnTitle[i]-\\'A\\' + 1)*(int)Math.Pow(26,doubler);\\n            doubler+=1;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3159132,
                "title": "simple-1-line-solution-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string c) {\\n        int ans=0;\\n        int j=0;\\n    for(int i=c.size()-1;i>=0;i--)  ans+=(c[i]-\\'A\\'+1)*pow(26,j++);      \\n         return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string c) {\\n        int ans=0;\\n        int j=0;\\n    for(int i=c.size()-1;i>=0;i--)  ans+=(c[i]-\\'A\\'+1)*pow(26,j++);      \\n         return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2918485,
                "title": "c-easy-and-simple-solution",
                "content": "***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***\\n# Complexity\\n- Time complexity:\\nO(N*M) <br>N is the length of string<br> M is the time complexity of power function \\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int power=0;\\n        int ans=0;\\n        for(int i=columnTitle.length()-1;i>=0;i--){\\n            ans+=((columnTitle[i]-\\'A\\'+1)*pow(26,power));\\n            power++;\\n        }\\n        return ans;\\n    }\\n};\\n```\\n***Guy\\'s if you find this solution helpful \\uD83D\\uDE0A, PLEASE do UPVOTE. By doing that it motivate\\'s me to create more better post like this \\u270D\\uFE0F***\\n",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int power=0;\\n        int ans=0;\\n        for(int i=columnTitle.length()-1;i>=0;i--){\\n            ans+=((columnTitle[i]-\\'A\\'+1)*pow(26,power));\\n            power++;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2913704,
                "title": "runtime-342-ms-beats-100-dart",
                "content": "\\n\\n\\nIf you Learned something new please give it upvote;\\notherwise thank you for having a look \\uD83D\\uDE4F\\uD83C\\uDFFB\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n  int titleToNumber(String columnTitle) {\\n      int res =0 ;\\n        for(int i=0; i<columnTitle.length;i++){\\n            int s = columnTitle.codeUnits[i] - 64 ;//64=codeUnits[\\'A\\'] -1\\n            res=res*26+s ;\\n        }\\n        return res ;\\n  }\\n}\\n```\\nPls upvote the solution if you found helpful, it means a lot.\\nAlso comment down your doubts.\\nHappy Coding :)",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int titleToNumber(String columnTitle) {\\n      int res =0 ;\\n        for(int i=0; i<columnTitle.length;i++){\\n            int s = columnTitle.codeUnits[i] - 64 ;//64=codeUnits[\\'A\\'] -1\\n            res=res*26+s ;\\n        }\\n        return res ;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2844270,
                "title": "java-just-in-2ms",
                "content": "# Code\\n```\\nclass Solution {\\n    public int titleToNumber(String s) {\\n        if (s.length() == 1) return s.charAt(0) - \\'A\\' + 1;\\n        int pow = 1, sum = 0;\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            char c = s.charAt(i);\\n            sum += (c - \\'A\\' + 1) * pow;\\n            pow *= 26;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String s) {\\n        if (s.length() == 1) return s.charAt(0) - \\'A\\' + 1;\\n        int pow = 1, sum = 0;\\n        for (int i = s.length() - 1; i >= 0; i--) {\\n            char c = s.charAt(i);\\n            sum += (c - \\'A\\' + 1) * pow;\\n            pow *= 26;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2785780,
                "title": "c-easiest-solution-simple-logic",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int n=columnTitle.size();\\n        map<char,int> m;// for storing characters from A to Z\\n        int i=1;\\n        for(char c=\\'A\\';c<=\\'Z\\';c++)\\n        {\\n            m[c]=i;\\n            i++;\\n        }\\n        if(n==1)\\n        return m[columnTitle[0]];\\n        int x=n-1;\\n        int s=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            int y=x;\\n            int p=1;\\n            while(y--)\\n            {\\n                p*=26;//multiply 26  n-1 times for zeroth place n-2 for 1st n-3 for 2nd place......\\n\\t\\t\\t\\t// where n is the length of string\\n            }\\n            if(p!=1)\\n            s+=p*m[columnTitle[i]];\\n            x--;\\n        }\\n        s+=m[columnTitle[n-1]];\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int n=columnTitle.size();\\n        map<char,int> m;// for storing characters from A to Z\\n        int i=1;\\n        for(char c=\\'A\\';c<=\\'Z\\';c++)\\n        {\\n            m[c]=i;\\n            i++;\\n        }\\n        if(n==1)\\n        return m[columnTitle[0]];\\n        int x=n-1;\\n        int s=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            int y=x;\\n            int p=1;\\n            while(y--)\\n            {\\n                p*=26;//multiply 26  n-1 times for zeroth place n-2 for 1st n-3 for 2nd place......\\n\\t\\t\\t\\t// where n is the length of string\\n            }\\n            if(p!=1)\\n            s+=p*m[columnTitle[i]];\\n            x--;\\n        }\\n        s+=m[columnTitle[n-1]];\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2757432,
                "title": "swift-easy-to-understand-with-single-line-solution",
                "content": "# Easy To Understand:\\n```\\nclass Solution {\\n    func titleToNumber(_ columnTitle: String) -> Int {\\n        var result = 0\\n        \\n        for c in columnTitle.unicodeScalars {\\n            let value = Int(c.value) - 64\\n            result = (result * 26) + value\\n        }\\n        \\n        return result\\n    }\\n}\\n```\\n\\n# Single Line Solution:\\n```\\nclass Solution {\\n    func titleToNumber(_ columnTitle: String) -> Int {\\n        columnTitle.unicodeScalars.reduce(0) { $0 * 26 + Int($1.value) - 64 }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func titleToNumber(_ columnTitle: String) -> Int {\\n        var result = 0\\n        \\n        for c in columnTitle.unicodeScalars {\\n            let value = Int(c.value) - 64\\n            result = (result * 26) + value\\n        }\\n        \\n        return result\\n    }\\n}\\n```\n```\\nclass Solution {\\n    func titleToNumber(_ columnTitle: String) -> Int {\\n        columnTitle.unicodeScalars.reduce(0) { $0 * 26 + Int($1.value) - 64 }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2722848,
                "title": "my-code-in-java",
                "content": "\\'\\'\\'\\npublic int titleToNumber(String ct) {\\n\\n        if(ct.length() == 1) return ct.charAt(0) - \\'A\\' + 1;\\n        \\n        int ans = 0;\\n        \\n        for(int i = ct.length() - 1; i >= 0; i--){\\n            int idx = ct.length() - 1 - i;\\n            int power = (int)Math.pow(26, idx);\\n            char ch = ct.charAt(i);\\n            ans += power * (ch - \\'A\\' + 1);\\n        }\\n        \\n        return ans;\\n    }\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'\\npublic int titleToNumber(String ct) {\\n\\n        if(ct.length() == 1) return ct.charAt(0) - \\'A\\' + 1;\\n        \\n        int ans = 0;\\n        \\n        for(int i = ct.length() - 1; i >= 0; i--){\\n            int idx = ct.length() - 1 - i;\\n            int power = (int)Math.pow(26, idx);\\n            char ch = ct.charAt(i);\\n            ans += power * (ch - \\'A\\' + 1);\\n        }\\n        \\n        return ans;\\n    }\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2658707,
                "title": "java-easy-solution",
                "content": "public int titleToNumber(String columnTitle) {\\n       int ans=0;\\n        int i=0;\\n        int len=columnTitle.length();\\n        while(len>0){\\n            ans+=Math.pow(26,len-1)*(columnTitle.charAt(i)-64);\\n            len--;\\n            i++;\\n        }\\n        return ans;\\n    }",
                "solutionTags": [],
                "code": "public int titleToNumber(String columnTitle) {\\n       int ans=0;\\n        int i=0;\\n        int len=columnTitle.length();\\n        while(len>0){\\n            ans+=Math.pow(26,len-1)*(columnTitle.charAt(i)-64);\\n            len--;\\n            i++;\\n        }\\n        return ans;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2440072,
                "title": "4-line-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        map<char, int> mp; int ans = 0;\\n        mp[\\'A\\'] = 1; mp[\\'B\\'] = 2; mp[\\'C\\'] = 3; mp[\\'D\\'] = 4; mp[\\'E\\'] = 5; mp[\\'F\\'] = 6; mp[\\'G\\'] = 7; mp[\\'H\\'] = 8; mp[\\'I\\'] = 9; mp[\\'J\\'] = 10; mp[\\'K\\'] = 11; mp[\\'L\\'] = 12; mp[\\'M\\'] = 13; mp[\\'N\\'] = 14; mp[\\'O\\'] = 15; mp[\\'P\\'] = 16; mp[\\'Q\\'] = 17; mp[\\'R\\'] = 18; mp[\\'S\\'] = 19; mp[\\'T\\'] = 20; mp[\\'U\\'] = 21; mp[\\'V\\'] = 22; mp[\\'W\\'] = 23; mp[\\'X\\'] = 24; mp[\\'Y\\'] = 25; mp[\\'Z\\'] = 26;\\n        for (int i = s.size() - 1; i >= 0; i--) ans += (mp[s[i]]) * pow(26, (s.size() - i - 1));\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        map<char, int> mp; int ans = 0;\\n        mp[\\'A\\'] = 1; mp[\\'B\\'] = 2; mp[\\'C\\'] = 3; mp[\\'D\\'] = 4; mp[\\'E\\'] = 5; mp[\\'F\\'] = 6; mp[\\'G\\'] = 7; mp[\\'H\\'] = 8; mp[\\'I\\'] = 9; mp[\\'J\\'] = 10; mp[\\'K\\'] = 11; mp[\\'L\\'] = 12; mp[\\'M\\'] = 13; mp[\\'N\\'] = 14; mp[\\'O\\'] = 15; mp[\\'P\\'] = 16; mp[\\'Q\\'] = 17; mp[\\'R\\'] = 18; mp[\\'S\\'] = 19; mp[\\'T\\'] = 20; mp[\\'U\\'] = 21; mp[\\'V\\'] = 22; mp[\\'W\\'] = 23; mp[\\'X\\'] = 24; mp[\\'Y\\'] = 25; mp[\\'Z\\'] = 26;\\n        for (int i = s.size() - 1; i >= 0; i--) ans += (mp[s[i]]) * pow(26, (s.size() - i - 1));\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2327359,
                "title": "c-2-lines",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n\\n        int result = 0;\\n        for(char c : columnTitle)\\n        {\\n            int d = c - \\'A\\' + 1;////d = s[i](char) - \\'A\\' + 1 (we used  s[i] -  \\'A\\' to convert the lette\\n            result = result * 26 + d;\\n        }\\n        return result;\\n        \\n    }\\n};   \\n    \\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n\\n        int result = 0;\\n        for(char c : columnTitle)\\n        {\\n            int d = c - \\'A\\' + 1;////d = s[i](char) - \\'A\\' + 1 (we used  s[i] -  \\'A\\' to convert the lette\\n            result = result * 26 + d;\\n        }\\n        return result;\\n        \\n    }\\n};   \\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2180354,
                "title": "java-easy-to-understand-solution",
                "content": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        \\n        StringBuilder sb = new StringBuilder();\\n        int result = 0;\\n        \\n        if(columnTitle.length() > 1)\\n        {\\n            for(int i =0; i <columnTitle.length(); i++)\\n            {\\n                char c = columnTitle.charAt(i);\\n                result = (result*26) + (int)c - 64;\\n            }\\n        }\\n        else\\n            result = (int)columnTitle.charAt(0) - 64;\\n        \\n        return result;\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        \\n        StringBuilder sb = new StringBuilder();\\n        int result = 0;\\n        \\n        if(columnTitle.length() > 1)\\n        {\\n            for(int i =0; i <columnTitle.length(); i++)\\n            {\\n                char c = columnTitle.charAt(i);\\n                result = (result*26) + (int)c - 64;\\n            }\\n        }\\n        else\\n            result = (int)columnTitle.charAt(0) - 64;\\n        \\n        return result;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1795929,
                "title": "easy-solution",
                "content": "class Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n     int res = 0;\\n    int n = columnTitle.size();\\n    for(int i = 0; i < n; i++)\\n        res = res * 26 + (columnTitle[i] - \\'A\\' + 1);\\n    \\n    return res;   \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n     int res = 0;\\n    int n = columnTitle.size();\\n    for(int i = 0; i < n; i++)\\n        res = res * 26 + (columnTitle[i] - \\'A\\' + 1);\\n    \\n    return res;   \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1793622,
                "title": "python3-fast-solution-using-maths",
                "content": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\\n        result_num = 0\\n        power = 0\\n        A=0\\n        len_alphabet = len(alphabet)\\n        while len(columnTitle) > 0:\\n            position = alphabet.find(columnTitle[-1]) + 1\\n            columnTitle = columnTitle[0: -1]\\n            A= position * len_alphabet ** power\\n            result_num += A\\n            power += 1\\n        return result_num\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n        alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\\n        result_num = 0\\n        power = 0\\n        A=0\\n        len_alphabet = len(alphabet)\\n        while len(columnTitle) > 0:\\n            position = alphabet.find(columnTitle[-1]) + 1\\n            columnTitle = columnTitle[0: -1]\\n            A= position * len_alphabet ** power\\n            result_num += A\\n            power += 1\\n        return result_num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1792253,
                "title": "c-one-line-with-std-accumulate",
                "content": "```cpp\\nint titleToNumber(string s) {\\n\\treturn accumulate(s.begin(), s.end(), 0, [](const int&a, const char&b){return 26 * a + (b - \\'A\\') + 1;});\\n}  \\n```",
                "solutionTags": [],
                "code": "```cpp\\nint titleToNumber(string s) {\\n\\treturn accumulate(s.begin(), s.end(), 0, [](const int&a, const char&b){return 26 * a + (b - \\'A\\') + 1;});\\n}  \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1791601,
                "title": "java-simple-easy-single-traversal-o-n",
                "content": "```\\npublic int titleToNumber(String columnTitle) {\\n        int n = columnTitle.length();\\n        \\n        int columnNumber = 0;\\n        \\n        for(int i = 0;i < n;i++){\\n            int currentColumn = columnTitle.charAt(i) - \\'A\\' + 1;\\n            columnNumber = columnNumber * 26 + currentColumn;\\n        }\\n        return columnNumber;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int titleToNumber(String columnTitle) {\\n        int n = columnTitle.length();\\n        \\n        int columnNumber = 0;\\n        \\n        for(int i = 0;i < n;i++){\\n            int currentColumn = columnTitle.charAt(i) - \\'A\\' + 1;\\n            columnNumber = columnNumber * 26 + currentColumn;\\n        }\\n        return columnNumber;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1791535,
                "title": "c-solution-100-faster-with-explanation",
                "content": "The whole game revolves around the number 26( (26 alphabets) and powers of 26(Depends on the lenth of string).\\nExample:\\n\\nA = 1\\nAA = 26\\\\*1 + 1\\nAAA = 26\\\\*26\\\\*1 + 26\\\\*1 + 1\\n.........\\nOverall ```Formula: 26*(l-1)*x + 26*(l-2)*x + .... + 26*x + x```\\nWhere, L = length of string\\n\\t\\t\\tx = Numerical value of that particular letter(```columnTitle[i]```) of the string. \\n```\\nint titleToNumber(string columnTitle) {\\n       //columnTitle\\n        \\n        int l = columnTitle.length();\\n        \\n        //We\\'ll have to keep a note regarding powers of 26.\\n        int it = l-1;\\n        \\n        //storing result\\n        long long int sum = 0;\\n        \\n        for(int i = 0;i<l;i++)\\n        {\\n            int curr = columnTitle[i]-\\'A\\';\\n            curr+=1; //A=1, not 0\\n            \\n            curr = pow(26,it)*curr;\\n            \\n            sum = sum+curr;\\n            it--;\\n        }\\n        \\n        return sum;\\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```Formula: 26*(l-1)*x + 26*(l-2)*x + .... + 26*x + x```\n```columnTitle[i]```\n```\\nint titleToNumber(string columnTitle) {\\n       //columnTitle\\n        \\n        int l = columnTitle.length();\\n        \\n        //We\\'ll have to keep a note regarding powers of 26.\\n        int it = l-1;\\n        \\n        //storing result\\n        long long int sum = 0;\\n        \\n        for(int i = 0;i<l;i++)\\n        {\\n            int curr = columnTitle[i]-\\'A\\';\\n            curr+=1; //A=1, not 0\\n            \\n            curr = pow(26,it)*curr;\\n            \\n            sum = sum+curr;\\n            it--;\\n        }\\n        \\n        return sum;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1791500,
                "title": "easy-c-solution-please-upvote",
                "content": "class Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int n=s.size();\\n        int k=n;\\n        int ans=0;\\n        for(int i=0;i<k;i++){\\n            int x=s[i]-64;\\n            ans+=(pow(26,n-1))*x;\\n            n--;\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "Math",
                    "String"
                ],
                "code": "class Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int n=s.size();\\n        int k=n;\\n        int ans=0;\\n        for(int i=0;i<k;i++){\\n            int x=s[i]-64;\\n            ans+=(pow(26,n-1))*x;\\n            n--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1791163,
                "title": "simple-java-solution",
                "content": "```class Solution {\\n    public int titleToNumber(String s) {\\n        s=s.toLowerCase();\\n        int p=0;\\n        for(char c:s.toCharArray())\\n        {\\n            p*=26;\\n            p+=(c-\\'a\\')+1;\\n        }\\n        return p;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int titleToNumber(String s) {\\n        s=s.toLowerCase();\\n        int p=0;\\n        for(char c:s.toCharArray())\\n        {\\n            p*=26;\\n            p+=(c-\\'a\\')+1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1791105,
                "title": "python-ascii-with-simple-comments",
                "content": "**Approach 1** \\n\\n```\\nclass Solution:\\n    \\n    def titleToNumber(self, columnTitle: str) -> int:\\n        soln=0\\n        # 1.Reverse the given string using [::-1],  enumerate function will generate value of i=0, i=1 etc for each iteration\\n        for i,char in enumerate(columnTitle[::-1]):\\n        # 2. As per problem statement A-Z is 26 and AA takes 27 which is (26^0)*1 for the 1st A and (26^1)*1 for the second A.Adding it is 27\\n        # 3. Assume BB - (26^0)*2= 1*2 = 2 for the first B and (26^1)*2=52 for the next B. Sum is 54\\n            soln+=pow(26,i)*(ord(char)-64)\\n        return soln\\n```\\n\\n\\n**Approach 2 - One liner**\\n```\\n# Given XYZ as input the answer is Z*(26^0)+Y*(26^1)+X*(26^2)\\n# Ascii of A = 65, however we want to consider A = 1 hence we subtract every ASCII with 64\\n# iterate everycolumn in reverse and increase 26^i in every step\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n            return sum([(ord(columnTitle[-i-1])-64)*(26**i) for i in range(len(columnTitle))])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    \\n    def titleToNumber(self, columnTitle: str) -> int:\\n        soln=0\\n        # 1.Reverse the given string using [::-1],  enumerate function will generate value of i=0, i=1 etc for each iteration\\n        for i,char in enumerate(columnTitle[::-1]):\\n        # 2. As per problem statement A-Z is 26 and AA takes 27 which is (26^0)*1 for the 1st A and (26^1)*1 for the second A.Adding it is 27\\n        # 3. Assume BB - (26^0)*2= 1*2 = 2 for the first B and (26^1)*2=52 for the next B. Sum is 54\\n            soln+=pow(26,i)*(ord(char)-64)\\n        return soln\\n```\n```\\n# Given XYZ as input the answer is Z*(26^0)+Y*(26^1)+X*(26^2)\\n# Ascii of A = 65, however we want to consider A = 1 hence we subtract every ASCII with 64\\n# iterate everycolumn in reverse and increase 26^i in every step\\nclass Solution:\\n    def titleToNumber(self, columnTitle: str) -> int:\\n            return sum([(ord(columnTitle[-i-1])-64)*(26**i) for i in range(len(columnTitle))])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790908,
                "title": "easy-solution-in-python",
                "content": "```\\ndef titleToNumber(self, columnTitle: str) -> int:\\n        givenStr = columnTitle[::-1]\\n        result = 0\\n        for i, c in enumerate(givenStr):\\n            result += (ord(c)%64)*(26**i) \\n            \\n        return result\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef titleToNumber(self, columnTitle: str) -> int:\\n        givenStr = columnTitle[::-1]\\n        result = 0\\n        for i, c in enumerate(givenStr):\\n            result += (ord(c)%64)*(26**i) \\n            \\n        return result\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1790867,
                "title": "easy-intuitive-c",
                "content": "![image](https://assets.leetcode.com/users/images/3baa5c6a-2f08-4b42-b5cd-5cb6cfe3babb_1645511943.7372382.png)\\n\\nHere we are given to encode the column title string into a numeric value\\nA-Z we know mapped as 1-26 which we can get as \\ncolumntitle[i]-\\'A\\'+1 given all uppercase letters\\n\\nNow if we observe carefully\\nif length of this input string is 1 its eazy we can directly say 1-26 whatever it is\\nNow look at this string for example:\\nAAB\\nlets break it into a part and try to visualize it\\n(A ->(  A->  (B)  ))\\n\\nNow B is 2 we know.\\nGoing till Z we will have 26 then again a series starts like AA-AZ which goes from 27-52\\nso now as we move our pointer to the 2nd last character as we are moving right to left\\nwe see what character it is,  for our case its an \\'A\\' but in the 2nd last place so it should start from 26+(whatever we have accumulated after it)\\nif the 2nd last character was a B instead, (after AZ we start with BA-> which is 53 which means 26*(2)+1)\\n\\nand similarly in the 3rd character we have 26 x 26 x (whatever the character is)\\n\\nSo our eg string AAB can be encoded as\\n(26 x 26 x 1) +(26 x 1)+(2)\\n......................................... _______\\n.............................................. B\\n........................___________\\n________________A\\nA\\n------\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string c) {\\n       int ans=0;\\n        int k=0;\\n        for(int i=c.length()-1;i>=0;i--){\\n            int t=c[i]-\\'A\\'+1;\\n            ans=ans+t*pow(26,k);\\n            k++;\\n        }\\n        return ans;\\n    }\\n};\\n\\n```\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string c) {\\n       int ans=0;\\n        int k=0;\\n        for(int i=c.length()-1;i>=0;i--){\\n            int t=c[i]-\\'A\\'+1;\\n            ans=ans+t*pow(26,k);\\n            k++;\\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790704,
                "title": "js-70-faster-using-reduce",
                "content": "```\\nvar titleToNumber = function(columnTitle) {\\n    return columnTitle.split(\"\").reverse().reduce((acum, ch, i) => {\\n        const charValue = ch.charCodeAt(0) - 64;\\n        return acum + (charValue*(26**i));\\n    },0)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar titleToNumber = function(columnTitle) {\\n    return columnTitle.split(\"\").reverse().reduce((acum, ch, i) => {\\n        const charValue = ch.charCodeAt(0) - 64;\\n        return acum + (charValue*(26**i));\\n    },0)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1790682,
                "title": "js-using-reduce-and-math-pow",
                "content": "\\n\\n```\\nconst titleToNumber = s => s.split(\\'\\').reduce((a,e,i)=> a+=Math.pow(26,s.length-i-1)*alphabet[e] , 0)\\n    \\nconst alphabet={\\n        \\'A\\':1,\\n        \\'B\\':2,\\n        \\'C\\':3,\\n        \\'D\\':4,\\n        \\'E\\':5,\\n        \\'F\\':6,\\n        \\'G\\':7,\\n        \\'H\\':8,\\n        \\'I\\':9,\\n        \\'J\\':10,\\n        \\'K\\':11,\\n        \\'L\\':12,\\n        \\'M\\':13,\\n        \\'N\\':14,\\n        \\'O\\':15,\\n        \\'P\\':16,\\n        \\'Q\\':17,\\n        \\'R\\':18,\\n        \\'S\\':19,\\n        \\'T\\':20,\\n        \\'U\\':21,\\n        \\'V\\':22,\\n        \\'W\\':23,\\n        \\'X\\':24,\\n        \\'Y\\':25,\\n        \\'Z\\':26\\n    }\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst titleToNumber = s => s.split(\\'\\').reduce((a,e,i)=> a+=Math.pow(26,s.length-i-1)*alphabet[e] , 0)\\n    \\nconst alphabet={\\n        \\'A\\':1,\\n        \\'B\\':2,\\n        \\'C\\':3,\\n        \\'D\\':4,\\n        \\'E\\':5,\\n        \\'F\\':6,\\n        \\'G\\':7,\\n        \\'H\\':8,\\n        \\'I\\':9,\\n        \\'J\\':10,\\n        \\'K\\':11,\\n        \\'L\\':12,\\n        \\'M\\':13,\\n        \\'N\\':14,\\n        \\'O\\':15,\\n        \\'P\\':16,\\n        \\'Q\\':17,\\n        \\'R\\':18,\\n        \\'S\\':19,\\n        \\'T\\':20,\\n        \\'U\\':21,\\n        \\'V\\':22,\\n        \\'W\\':23,\\n        \\'X\\':24,\\n        \\'Y\\':25,\\n        \\'Z\\':26\\n    }\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1790645,
                "title": "easy-c-sol-faster-than-100-sol-o-n-time",
                "content": "```\\n class Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {  // Time : O(N) :::: Aux_Space: O(1)\\n        \\n        int res = 0;\\n        \\n        for(auto x: columnTitle){\\n            int d = x - \\'A\\' + 1;\\n            res = res*26 + d;\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {  // Time : O(N) :::: Aux_Space: O(1)\\n        \\n        int res = 0;\\n        \\n        for(auto x: columnTitle){\\n            int d = x - \\'A\\' + 1;\\n            res = res*26 + d;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1790643,
                "title": "c-simple-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n         int ans = 0;\\n        for(int i = 0 ; i < columnTitle.length();i++){\\n            ans= ans*26 + (columnTitle[i] - \\'A\\' + 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n         int ans = 0;\\n        for(int i = 0 ; i < columnTitle.length();i++){\\n            ans= ans*26 + (columnTitle[i] - \\'A\\' + 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790494,
                "title": "simple-rust",
                "content": "```\\nimpl Solution {\\n    pub fn title_to_number(column_title: String) -> i32 {\\n        column_title\\n        .chars()\\n        .map(|c| c as i32 - \\'A\\' as i32 + 1)\\n        .fold(0, |prev, next| prev * 26 + next)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn title_to_number(column_title: String) -> i32 {\\n        column_title\\n        .chars()\\n        .map(|c| c as i32 - \\'A\\' as i32 + 1)\\n        .fold(0, |prev, next| prev * 26 + next)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1790438,
                "title": "beginner-friendly-python-soluiton",
                "content": "**Time Complexity : O(n)**\\n```\\nclass Solution(object):\\n    def titleToNumber(self, columnTitle):\\n        position = 0\\n        for c in columnTitle:\\n            position = position*26 + ord(c) - ord(\"A\") + 1\\n        return position\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def titleToNumber(self, columnTitle):\\n        position = 0\\n        for c in columnTitle:\\n            position = position*26 + ord(c) - ord(\"A\") + 1\\n        return position\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790431,
                "title": "beginner-friendly-java-solution",
                "content": "**Approach 1 :**\\nTime Complexity : O(n)\\n```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int position = 0;\\n        for(int i=0; i<columnTitle.length(); i++){\\n            position = position*26;\\n            for(int j=\\'A\\'; j<=\\'Z\\'; j++){\\n                position++;\\n                if(j == columnTitle.charAt(i))   \\n                    break;\\n            }\\n        }\\n        return position;\\n    }\\n}\\n```\\n\\n\\n**Approach 2 :**\\nTime Complexity : O(n)\\n```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int position = 0;\\n        for(char c : columnTitle.toCharArray()){\\n            position = position * 26 + (int) c - (int) \\'A\\' + 1;\\n        }\\n        return position;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int position = 0;\\n        for(int i=0; i<columnTitle.length(); i++){\\n            position = position*26;\\n            for(int j=\\'A\\'; j<=\\'Z\\'; j++){\\n                position++;\\n                if(j == columnTitle.charAt(i))   \\n                    break;\\n            }\\n        }\\n        return position;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int position = 0;\\n        for(char c : columnTitle.toCharArray()){\\n            position = position * 26 + (int) c - (int) \\'A\\' + 1;\\n        }\\n        return position;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1790212,
                "title": "c-0ms-solution-3-lines-of-code",
                "content": "\\n```\\nint titleToNumber(string columnTitle) {\\n    int res=0;\\n    for(auto &c:columnTitle) res=res26+(c-\\'A\\'+1);\\n    return res;\\n}\\n```\\n\\n**Please upvote :)**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint titleToNumber(string columnTitle) {\\n    int res=0;\\n    for(auto &c:columnTitle) res=res26+(c-\\'A\\'+1);\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1762011,
                "title": "java-solution-1ms-runtime",
                "content": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int value = 0;\\n        for (int i = 0; i < columnTitle.length(); i++) {\\n            value += charToValue(columnTitle.charAt(i), columnTitle.length() - i);\\n        }\\n        return value;\\n    }\\n    \\n    public int charToValue(char letter, int place) {\\n        int value = Character.getNumericValue(letter) - 9;\\n        if (place == 1) return value;\\n        value *= Math.pow(26, place - 1);\\n        return value;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n        int value = 0;\\n        for (int i = 0; i < columnTitle.length(); i++) {\\n            value += charToValue(columnTitle.charAt(i), columnTitle.length() - i);\\n        }\\n        return value;\\n    }\\n    \\n    public int charToValue(char letter, int place) {\\n        int value = Character.getNumericValue(letter) - 9;\\n        if (place == 1) return value;\\n        value *= Math.pow(26, place - 1);\\n        return value;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1570582,
                "title": "c-solution-4-ms-5-9-mb",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int ans = 0;\\n        long long int pow = 1; \\n        for (int i = columnTitle.size() - 1; i >= 0; i--) {\\n            ans += (columnTitle[i] - 64) * pow;\\n            pow *= 26;\\n        }\\n      return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int ans = 0;\\n        long long int pow = 1; \\n        for (int i = columnTitle.size() - 1; i >= 0; i--) {\\n            ans += (columnTitle[i] - 64) * pow;\\n            pow *= 26;\\n        }\\n      return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1403465,
                "title": "easy-c-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int ans = 0;\\n        long long pow = 1;\\n        int n = columnTitle.size();\\n        for(int i=n-1; i>=0; i--) {\\n            ans += (columnTitle[i] - 64)*pow;\\n            pow = pow*26;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string columnTitle) {\\n        int ans = 0;\\n        long long pow = 1;\\n        int n = columnTitle.size();\\n        for(int i=n-1; i>=0; i--) {\\n            ans += (columnTitle[i] - 64)*pow;\\n            pow = pow*26;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1371512,
                "title": "c-linq-one-liner",
                "content": "One liner solution in C# using LINQ. Using the `Aggregate` function here (think of reduce in Map and Reduce). \\n\\n```csharp\\npublic int TitleToNumber(string columnTitle) {\\n\\treturn columnTitle.Aggregate(0, (acc, x) => {\\n\\t\\treturn (acc * 26) + x - \\'A\\' + 1;\\n\\t});\\n}\\n```",
                "solutionTags": [],
                "code": "```csharp\\npublic int TitleToNumber(string columnTitle) {\\n\\treturn columnTitle.Aggregate(0, (acc, x) => {\\n\\t\\treturn (acc * 26) + x - \\'A\\' + 1;\\n\\t});\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1309279,
                "title": "my-easy-and-clear-solution-in-java",
                "content": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n       char[] res =  columnTitle.toCharArray();\\n        int sum =0;\\n        for(int i=0; i<res.length; i++){\\n            int temp = res[i];\\n            sum = sum*26 + (temp - 64);\\n        }\\n        return sum;\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int titleToNumber(String columnTitle) {\\n       char[] res =  columnTitle.toCharArray();\\n        int sum =0;\\n        for(int i=0; i<res.length; i++){\\n            int temp = res[i];\\n            sum = sum*26 + (temp - 64);\\n        }\\n        return sum;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1243171,
                "title": "c-iterative-and-recursive-solution",
                "content": "##### 1) Iterative Solution\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint titleToNumber(string columnTitle) {\\n\\t\\t\\tint i = 0;\\n\\t\\t\\tint res = 0;\\n\\t\\t\\twhile(i < columnTitle.size()){\\n\\t\\t\\t\\tres =  res * 26 + (columnTitle[i] - (\\'A\\' - 1));\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\t};\\n##### 2) Recursive Solution\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint titleToNumber(string columnTitle) {\\n\\t\\t\\tint len = columnTitle.size();\\n\\t\\t\\tif(len == 0){\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t\\tif(len == 1){\\n\\t\\t\\t\\treturn columnTitle[0] - (\\'A\\' - 1);\\n\\t\\t\\t}\\n\\t\\t\\tint smallAns = columnTitle[len - 1] - (\\'A\\' - 1);  \\n\\t\\t\\treturn smallAns + 26 * titleToNumber(columnTitle.substr(0, len - 1));        \\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint titleToNumber(string columnTitle) {\\n\\t\\t\\tint i = 0;\\n\\t\\t\\tint res = 0;\\n\\t\\t\\twhile(i < columnTitle.size()){\\n\\t\\t\\t\\tres =  res * 26 + (columnTitle[i] - (\\'A\\' - 1));\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1226737,
                "title": "python3-very-easy-solution-with-counting-in-the-26-number-system",
                "content": "```\\n def titleToNumber(self, columnTitle: str) -> int:\\n        \\n        \"\"\"\\n        instead of using the 10 system for counting\\n        we are using the 26 system\\n        \\n        so ABC would be  1*26^2 + 2*26 + 3.\\n        \\n        \\n        A--> 1, ..., Z--> 26\\n        \\n        So we just just count in a serial way.\\n        \\n        \\n        \"\"\"\\n        \\n        letters = list(string.ascii_lowercase)\\n        \\n        mapping = {i:j for j, i in enumerate(letters, start = 1)}\\n        \\n        count = 0\\n        \\n        for i, st in enumerate(columnTitle.lower()[::-1]):\\n            count += mapping[st]*26**i\\n            \\n        return count\\n```",
                "solutionTags": [],
                "code": "```\\n def titleToNumber(self, columnTitle: str) -> int:\\n        \\n        \"\"\"\\n        instead of using the 10 system for counting\\n        we are using the 26 system\\n        \\n        so ABC would be  1*26^2 + 2*26 + 3.\\n        \\n        \\n        A--> 1, ..., Z--> 26\\n        \\n        So we just just count in a serial way.\\n        \\n        \\n        \"\"\"\\n        \\n        letters = list(string.ascii_lowercase)\\n        \\n        mapping = {i:j for j, i in enumerate(letters, start = 1)}\\n        \\n        count = 0\\n        \\n        for i, st in enumerate(columnTitle.lower()[::-1]):\\n            count += mapping[st]*26**i\\n            \\n        return count\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1217832,
                "title": "1ms-java-solution-beats-100-submission",
                "content": "```\\n  \\tpublic int titleToNumber(String columnTitle) {\\n\\n\\t\\tint n = columnTitle.length();\\n\\n\\t\\tif (n == 1) {\\n\\t\\t\\treturn findCharNumber(columnTitle.charAt(0));\\n\\t\\t}\\n\\t\\tint runningSum = 0;\\n\\n\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\trunningSum = (runningSum * 26) + findCharNumber(columnTitle.charAt(i));\\n\\t\\t}\\n\\n\\t\\treturn runningSum;\\n\\t}\\n\\n\\tprivate int findCharNumber(char ch) {\\n\\t\\treturn ch - \\'A\\' + 1;\\n\\t}\\n```\\t",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n  \\tpublic int titleToNumber(String columnTitle) {\\n\\n\\t\\tint n = columnTitle.length();\\n\\n\\t\\tif (n == 1) {\\n\\t\\t\\treturn findCharNumber(columnTitle.charAt(0));\\n\\t\\t}\\n\\t\\tint runningSum = 0;\\n\\n\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\trunningSum = (runningSum * 26) + findCharNumber(columnTitle.charAt(i));\\n\\t\\t}\\n\\n\\t\\treturn runningSum;\\n\\t}\\n\\n\\tprivate int findCharNumber(char ch) {\\n\\t\\treturn ch - \\'A\\' + 1;\\n\\t}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1118170,
                "title": "fastest-no-array-or-hashmap-0-ms-java-with-comments",
                "content": "```\\n public int titleToNumber(String columnTitle) {\\n        \\n        int sum = 0;\\n        for(int i = columnTitle.length() - 1; i >= 0 ;i--){\\n\\t\\t   //ASCII of A is 65 and of Z is 91 , we will map it to 1-26 by subtracting 64\\n            //Using ASCII  values to map it to 1,2,3 \\n\\t\\t\\t//A = 65-64 = 1\\n\\t\\t\\t//B = 66 - 64 = 2 and so on\\n            sum += Math.pow(26, (columnTitle.length() - i - 1))* (columnTitle.charAt(i) - 64);\\n\\n        }\\n        return sum;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n public int titleToNumber(String columnTitle) {\\n        \\n        int sum = 0;\\n        for(int i = columnTitle.length() - 1; i >= 0 ;i--){\\n\\t\\t   //ASCII of A is 65 and of Z is 91 , we will map it to 1-26 by subtracting 64\\n            //Using ASCII  values to map it to 1,2,3 \\n\\t\\t\\t//A = 65-64 = 1\\n\\t\\t\\t//B = 66 - 64 = 2 and so on\\n            sum += Math.pow(26, (columnTitle.length() - i - 1))* (columnTitle.charAt(i) - 64);\\n\\n        }\\n        return sum;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1112769,
                "title": "java-hashmap",
                "content": "\\n```\\npublic int titleToNumber(String columnTitle) {\\n        String[] arrColumn = columnTitle.split(\"\");\\n        \\n        int order = 1;\\n        HashMap<String, Integer> hashMap = new HashMap();\\n        for(char ch = \\'A\\'; ch<=\\'Z\\'; ch++){\\n            hashMap.put(String.valueOf(ch), order);\\n            order++;\\n        }\\n        \\n        int res = 0;\\n        for(int i=0; i<arrColumn.length; i++){\\n            res += hashMap.get(arrColumn[arrColumn.length-1-i])*Math.pow(26, (i));\\n        }\\n        \\n        return res;\\n        \\n        \\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\npublic int titleToNumber(String columnTitle) {\\n        String[] arrColumn = columnTitle.split(\"\");\\n        \\n        int order = 1;\\n        HashMap<String, Integer> hashMap = new HashMap();\\n        for(char ch = \\'A\\'; ch<=\\'Z\\'; ch++){\\n            hashMap.put(String.valueOf(ch), order);\\n            order++;\\n        }\\n        \\n        int res = 0;\\n        for(int i=0; i<arrColumn.length; i++){\\n            res += hashMap.get(arrColumn[arrColumn.length-1-i])*Math.pow(26, (i));\\n        }\\n        \\n        return res;\\n        \\n        \\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 1067085,
                "title": "5-lines-of-code-with-100-faster-on-online-compiler-any-programming-language",
                "content": "![image](https://assets.leetcode.com/users/images/760498ff-b611-4404-98b5-df8869b16688_1613409259.8730543.png)\\n\\n\\tint ans=0;\\n\\tfor(auto &c:s){\\n\\t\\tans*=26;\\n\\t\\tans+=c-\\'A\\'+1;\\n\\t}\\n\\treturn ans;\\n **Don\\'t Forget to upvote if you like it!**\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/760498ff-b611-4404-98b5-df8869b16688_1613409259.8730543.png)\\n\\n\\tint ans=0;\\n\\tfor(auto &c:s){\\n\\t\\tans*=26;\\n\\t\\tans+=c-\\'A\\'+1;\\n\\t}\\n\\treturn ans;\\n **Don\\'t Forget to upvote if you like it!**\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1006143,
                "title": "easiest-solution-100-faster-0ms-c-cpp",
                "content": "iterate string from last\\nfor get int value of your string use s[i]-64 because A-Z ASCII value start from 65 to 90, \\nfor eg. value of A in ASCII is 65 and in question there A will be 1 so 65-64 = 1 so we can match A\\'s value as per question\\nthen make ans valriable which will store final ans = ans + value of string * it\\'s power ( intially for 1 string power will be 1) \\nthen make power = power * 26 until string length is increasing\\neg. A = 1;\\nAA = 27 so A + A = (1x1 )+ (26x1) = 27\\nAB = 28 so A + B = (2x1) + (26x1) = 28\\nfor AAA\\nA + A + A = (1*1) + (26x1) + (26x26x1)\\n```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int n=s.size();\\n        long long int ans =0;\\n        long long int power =1;\\n        int value;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            value = s[i]-64;\\n            ans += value*power;\\n            power *= 26;\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int n=s.size();\\n        long long int ans =0;\\n        long long int power =1;\\n        int value;\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            value = s[i]-64;\\n            ans += value*power;\\n            power *= 26;\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 994759,
                "title": "easy-clear-solution-0ms-100-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int res=0;\\n        for(char x:s){\\n            res*=26;\\n            res+=x-\\'A\\'+1;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int titleToNumber(string s) {\\n        int res=0;\\n        for(char x:s){\\n            res*=26;\\n            res+=x-\\'A\\'+1;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564639,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1571373,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1731453,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1565813,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1871892,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1568995,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 2024600,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1987915,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1676495,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1571374,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1564639,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1571373,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1731453,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1565813,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1871892,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1568995,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 2024600,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1987915,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1676495,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            },
            {
                "id": 1571374,
                "content": [
                    {
                        "username": "dengruixistudent",
                        "content": "I was asked of this question during an interview with microsoft. The interviewer asked whether I want a coding question or a brain teaser, I asked for the latter and here comes the question. I did not do it very well at that time, though."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "https://leetcode.com/problems/excel-sheet-column-number/solutions/2780198/easy-c-o-n-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "ralph097",
                        "content": "Treat the column value as a base 26 number. Map A to 1, B to 2..., and Z to 26.\\n\\nYZ = 25*(26^1) + 26*(26^0)\\nXYZ = 24*(26^2) + 25*(26^1) + 26*(26^0)\\n\\nTook me waayyyy too much time to figure it out. Probably too long for an interview."
                    },
                    {
                        "username": "pponsarandev",
                        "content": "Same here... to be honest, it being framed within the context of a spreadsheet threw me off a little bit... once you realize it's similar to a base-26 number system, the answer is trivial"
                    },
                    {
                        "username": "salimshamim",
                        "content": "I have often wondered how alphabets are just base 26 numbers, which helped me quickly do this. But it would have been another story if I hadn\\'t thought about it before."
                    },
                    {
                        "username": "brijKhajuria",
                        "content": "Treat it as a problem to convert from one numerical representation to another. For example, Hex to Decimal."
                    },
                    {
                        "username": "LeetCode",
                        "content": "This problem is the Daily LeetCoding Challenge for February, Day 22.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/excel-sheet-column-number/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain these 2 approaches in the official solution</summary>\n\n  \n**Approach 1:** Right to Left\n\n  \n**Approach 2:** Left to Right\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>"
                    },
                    {
                        "username": "_bolorshagai",
                        "content": "I was confusing with a three-letter word, but then I figured out, check this example\\nFor Example\\nABC = \\nA = 26 * 26 * 1; | 676 \\nB = 26 * 2;         | 52\\nC = 3;                 | 3\\n676 + 52 + 3 = 731\\n"
                    },
                    {
                        "username": "Override",
                        "content": "    public int TitleToNumber(string s) { return s.Aggregate(0, (n, c) => n * 26 + c - 0x40); }"
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "i dont use Exel how does it work?)"
                    },
                    {
                        "username": "matt_lv",
                        "content": "Easy Question \\uD83E\\uDD21"
                    },
                    {
                        "username": "iCantC",
                        "content": "currentCharacter - \\'A\\' + 1 is \\u2764\\uFE0F"
                    },
                    {
                        "username": "naresh_saini",
                        "content": "yes it is also use in trie data structure\\n"
                    },
                    {
                        "username": "Bruce_Ken",
                        "content": "Generally speaking, C/C++ is faster than Java, but in this problem, I see the Solution of Java is faster than \\nC/C++ in average, I don`t know why,  can anyone explain it ?Thanks!"
                    }
                ]
            }
        ]
    },
    {
        "title": "Encode and Decode Strings",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1565839,
                "content": [
                    {
                        "username": "omg_zozobra",
                        "content": "Is anyone else getting this error? I get it for any input that doesn't have syntax errors, even if I just try to compile the blank problem skeleton."
                    },
                    {
                        "username": "shinne",
                        "content": "Would be helpful to tell me what they mean by encoding. I had to go google it up."
                    },
                    {
                        "username": "dnox",
                        "content": "Wow, that must have been so challenging. What were they thinking?! Sorry you had to do your own research"
                    },
                    {
                        "username": "jqma",
                        "content": "rawr"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a utf-8 character as a delimiter in the simple case for this problem.\\nI used snowman \\u2603\\u2603"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "```\\nsentinal = chr(65000)\\n```\\nyou can join and split using this sentinal"
                    },
                    {
                        "username": "VadimGarkusha",
                        "content": "Funny thing but using a Hashmap is an accepted solution :)"
                    },
                    {
                        "username": "daBozz",
                        "content": "Base64 does the trick: \n> Base64 only contains A–Z , a–z , 0–9 , + , / and =\n\nYou can base64-encode every str in the list, and join it together with any separator that is not A–Z , a–z , 0–9 , + , / and = (I've used commas). "
                    },
                    {
                        "username": "pedro",
                        "content": "It does work, but is somewhat wasteful in terms of encoded size. Base64 (as the name implies) has 64 characters, so it encodes 6 bits per character. The input strings are ASCII bytes, so 8 bits per character. That means you need 8/6 = 33% more characters to encode each string (ignoring base64 padding). So, if you are very lucky with base64 padding you are using 1.33 * total_strings_length + num_strings bytes.\\n\\nSince you\\'re told you have no more than 200 strings and each one is up to 200 characters in length, it takes only one byte (one ascii character) to encode the number of strings at the beginning, and one byte before each string to encode its length. No need for special encodings or separators. This takes total_strings_length + num_strings + 1 bytes."
                    },
                    {
                        "username": "MC_Jin",
                        "content": "A public member storing original data is accepted. The test method should be changed, at least using two Codec instances, one for encoding another for decoding."
                    }
                ]
            },
            {
                "id": 1740328,
                "content": [
                    {
                        "username": "omg_zozobra",
                        "content": "Is anyone else getting this error? I get it for any input that doesn't have syntax errors, even if I just try to compile the blank problem skeleton."
                    },
                    {
                        "username": "shinne",
                        "content": "Would be helpful to tell me what they mean by encoding. I had to go google it up."
                    },
                    {
                        "username": "dnox",
                        "content": "Wow, that must have been so challenging. What were they thinking?! Sorry you had to do your own research"
                    },
                    {
                        "username": "jqma",
                        "content": "rawr"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a utf-8 character as a delimiter in the simple case for this problem.\\nI used snowman \\u2603\\u2603"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "```\\nsentinal = chr(65000)\\n```\\nyou can join and split using this sentinal"
                    },
                    {
                        "username": "VadimGarkusha",
                        "content": "Funny thing but using a Hashmap is an accepted solution :)"
                    },
                    {
                        "username": "daBozz",
                        "content": "Base64 does the trick: \n> Base64 only contains A–Z , a–z , 0–9 , + , / and =\n\nYou can base64-encode every str in the list, and join it together with any separator that is not A–Z , a–z , 0–9 , + , / and = (I've used commas). "
                    },
                    {
                        "username": "pedro",
                        "content": "It does work, but is somewhat wasteful in terms of encoded size. Base64 (as the name implies) has 64 characters, so it encodes 6 bits per character. The input strings are ASCII bytes, so 8 bits per character. That means you need 8/6 = 33% more characters to encode each string (ignoring base64 padding). So, if you are very lucky with base64 padding you are using 1.33 * total_strings_length + num_strings bytes.\\n\\nSince you\\'re told you have no more than 200 strings and each one is up to 200 characters in length, it takes only one byte (one ascii character) to encode the number of strings at the beginning, and one byte before each string to encode its length. No need for special encodings or separators. This takes total_strings_length + num_strings + 1 bytes."
                    },
                    {
                        "username": "MC_Jin",
                        "content": "A public member storing original data is accepted. The test method should be changed, at least using two Codec instances, one for encoding another for decoding."
                    }
                ]
            },
            {
                "id": 1727634,
                "content": [
                    {
                        "username": "omg_zozobra",
                        "content": "Is anyone else getting this error? I get it for any input that doesn't have syntax errors, even if I just try to compile the blank problem skeleton."
                    },
                    {
                        "username": "shinne",
                        "content": "Would be helpful to tell me what they mean by encoding. I had to go google it up."
                    },
                    {
                        "username": "dnox",
                        "content": "Wow, that must have been so challenging. What were they thinking?! Sorry you had to do your own research"
                    },
                    {
                        "username": "jqma",
                        "content": "rawr"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a utf-8 character as a delimiter in the simple case for this problem.\\nI used snowman \\u2603\\u2603"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "```\\nsentinal = chr(65000)\\n```\\nyou can join and split using this sentinal"
                    },
                    {
                        "username": "VadimGarkusha",
                        "content": "Funny thing but using a Hashmap is an accepted solution :)"
                    },
                    {
                        "username": "daBozz",
                        "content": "Base64 does the trick: \n> Base64 only contains A–Z , a–z , 0–9 , + , / and =\n\nYou can base64-encode every str in the list, and join it together with any separator that is not A–Z , a–z , 0–9 , + , / and = (I've used commas). "
                    },
                    {
                        "username": "pedro",
                        "content": "It does work, but is somewhat wasteful in terms of encoded size. Base64 (as the name implies) has 64 characters, so it encodes 6 bits per character. The input strings are ASCII bytes, so 8 bits per character. That means you need 8/6 = 33% more characters to encode each string (ignoring base64 padding). So, if you are very lucky with base64 padding you are using 1.33 * total_strings_length + num_strings bytes.\\n\\nSince you\\'re told you have no more than 200 strings and each one is up to 200 characters in length, it takes only one byte (one ascii character) to encode the number of strings at the beginning, and one byte before each string to encode its length. No need for special encodings or separators. This takes total_strings_length + num_strings + 1 bytes."
                    },
                    {
                        "username": "MC_Jin",
                        "content": "A public member storing original data is accepted. The test method should be changed, at least using two Codec instances, one for encoding another for decoding."
                    }
                ]
            },
            {
                "id": 1948451,
                "content": [
                    {
                        "username": "omg_zozobra",
                        "content": "Is anyone else getting this error? I get it for any input that doesn't have syntax errors, even if I just try to compile the blank problem skeleton."
                    },
                    {
                        "username": "shinne",
                        "content": "Would be helpful to tell me what they mean by encoding. I had to go google it up."
                    },
                    {
                        "username": "dnox",
                        "content": "Wow, that must have been so challenging. What were they thinking?! Sorry you had to do your own research"
                    },
                    {
                        "username": "jqma",
                        "content": "rawr"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a utf-8 character as a delimiter in the simple case for this problem.\\nI used snowman \\u2603\\u2603"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "```\\nsentinal = chr(65000)\\n```\\nyou can join and split using this sentinal"
                    },
                    {
                        "username": "VadimGarkusha",
                        "content": "Funny thing but using a Hashmap is an accepted solution :)"
                    },
                    {
                        "username": "daBozz",
                        "content": "Base64 does the trick: \n> Base64 only contains A–Z , a–z , 0–9 , + , / and =\n\nYou can base64-encode every str in the list, and join it together with any separator that is not A–Z , a–z , 0–9 , + , / and = (I've used commas). "
                    },
                    {
                        "username": "pedro",
                        "content": "It does work, but is somewhat wasteful in terms of encoded size. Base64 (as the name implies) has 64 characters, so it encodes 6 bits per character. The input strings are ASCII bytes, so 8 bits per character. That means you need 8/6 = 33% more characters to encode each string (ignoring base64 padding). So, if you are very lucky with base64 padding you are using 1.33 * total_strings_length + num_strings bytes.\\n\\nSince you\\'re told you have no more than 200 strings and each one is up to 200 characters in length, it takes only one byte (one ascii character) to encode the number of strings at the beginning, and one byte before each string to encode its length. No need for special encodings or separators. This takes total_strings_length + num_strings + 1 bytes."
                    },
                    {
                        "username": "MC_Jin",
                        "content": "A public member storing original data is accepted. The test method should be changed, at least using two Codec instances, one for encoding another for decoding."
                    }
                ]
            },
            {
                "id": 1825676,
                "content": [
                    {
                        "username": "omg_zozobra",
                        "content": "Is anyone else getting this error? I get it for any input that doesn't have syntax errors, even if I just try to compile the blank problem skeleton."
                    },
                    {
                        "username": "shinne",
                        "content": "Would be helpful to tell me what they mean by encoding. I had to go google it up."
                    },
                    {
                        "username": "dnox",
                        "content": "Wow, that must have been so challenging. What were they thinking?! Sorry you had to do your own research"
                    },
                    {
                        "username": "jqma",
                        "content": "rawr"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a utf-8 character as a delimiter in the simple case for this problem.\\nI used snowman \\u2603\\u2603"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "```\\nsentinal = chr(65000)\\n```\\nyou can join and split using this sentinal"
                    },
                    {
                        "username": "VadimGarkusha",
                        "content": "Funny thing but using a Hashmap is an accepted solution :)"
                    },
                    {
                        "username": "daBozz",
                        "content": "Base64 does the trick: \n> Base64 only contains A–Z , a–z , 0–9 , + , / and =\n\nYou can base64-encode every str in the list, and join it together with any separator that is not A–Z , a–z , 0–9 , + , / and = (I've used commas). "
                    },
                    {
                        "username": "pedro",
                        "content": "It does work, but is somewhat wasteful in terms of encoded size. Base64 (as the name implies) has 64 characters, so it encodes 6 bits per character. The input strings are ASCII bytes, so 8 bits per character. That means you need 8/6 = 33% more characters to encode each string (ignoring base64 padding). So, if you are very lucky with base64 padding you are using 1.33 * total_strings_length + num_strings bytes.\\n\\nSince you\\'re told you have no more than 200 strings and each one is up to 200 characters in length, it takes only one byte (one ascii character) to encode the number of strings at the beginning, and one byte before each string to encode its length. No need for special encodings or separators. This takes total_strings_length + num_strings + 1 bytes."
                    },
                    {
                        "username": "MC_Jin",
                        "content": "A public member storing original data is accepted. The test method should be changed, at least using two Codec instances, one for encoding another for decoding."
                    }
                ]
            },
            {
                "id": 1759063,
                "content": [
                    {
                        "username": "omg_zozobra",
                        "content": "Is anyone else getting this error? I get it for any input that doesn't have syntax errors, even if I just try to compile the blank problem skeleton."
                    },
                    {
                        "username": "shinne",
                        "content": "Would be helpful to tell me what they mean by encoding. I had to go google it up."
                    },
                    {
                        "username": "dnox",
                        "content": "Wow, that must have been so challenging. What were they thinking?! Sorry you had to do your own research"
                    },
                    {
                        "username": "jqma",
                        "content": "rawr"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a utf-8 character as a delimiter in the simple case for this problem.\\nI used snowman \\u2603\\u2603"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "```\\nsentinal = chr(65000)\\n```\\nyou can join and split using this sentinal"
                    },
                    {
                        "username": "VadimGarkusha",
                        "content": "Funny thing but using a Hashmap is an accepted solution :)"
                    },
                    {
                        "username": "daBozz",
                        "content": "Base64 does the trick: \n> Base64 only contains A–Z , a–z , 0–9 , + , / and =\n\nYou can base64-encode every str in the list, and join it together with any separator that is not A–Z , a–z , 0–9 , + , / and = (I've used commas). "
                    },
                    {
                        "username": "pedro",
                        "content": "It does work, but is somewhat wasteful in terms of encoded size. Base64 (as the name implies) has 64 characters, so it encodes 6 bits per character. The input strings are ASCII bytes, so 8 bits per character. That means you need 8/6 = 33% more characters to encode each string (ignoring base64 padding). So, if you are very lucky with base64 padding you are using 1.33 * total_strings_length + num_strings bytes.\\n\\nSince you\\'re told you have no more than 200 strings and each one is up to 200 characters in length, it takes only one byte (one ascii character) to encode the number of strings at the beginning, and one byte before each string to encode its length. No need for special encodings or separators. This takes total_strings_length + num_strings + 1 bytes."
                    },
                    {
                        "username": "MC_Jin",
                        "content": "A public member storing original data is accepted. The test method should be changed, at least using two Codec instances, one for encoding another for decoding."
                    }
                ]
            },
            {
                "id": 2006583,
                "content": [
                    {
                        "username": "omg_zozobra",
                        "content": "Is anyone else getting this error? I get it for any input that doesn't have syntax errors, even if I just try to compile the blank problem skeleton."
                    },
                    {
                        "username": "shinne",
                        "content": "Would be helpful to tell me what they mean by encoding. I had to go google it up."
                    },
                    {
                        "username": "dnox",
                        "content": "Wow, that must have been so challenging. What were they thinking?! Sorry you had to do your own research"
                    },
                    {
                        "username": "jqma",
                        "content": "rawr"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "You can use a utf-8 character as a delimiter in the simple case for this problem.\\nI used snowman \\u2603\\u2603"
                    },
                    {
                        "username": "TGBBSZWHWDLANZP",
                        "content": "```\\nsentinal = chr(65000)\\n```\\nyou can join and split using this sentinal"
                    },
                    {
                        "username": "VadimGarkusha",
                        "content": "Funny thing but using a Hashmap is an accepted solution :)"
                    },
                    {
                        "username": "daBozz",
                        "content": "Base64 does the trick: \n> Base64 only contains A–Z , a–z , 0–9 , + , / and =\n\nYou can base64-encode every str in the list, and join it together with any separator that is not A–Z , a–z , 0–9 , + , / and = (I've used commas). "
                    },
                    {
                        "username": "pedro",
                        "content": "It does work, but is somewhat wasteful in terms of encoded size. Base64 (as the name implies) has 64 characters, so it encodes 6 bits per character. The input strings are ASCII bytes, so 8 bits per character. That means you need 8/6 = 33% more characters to encode each string (ignoring base64 padding). So, if you are very lucky with base64 padding you are using 1.33 * total_strings_length + num_strings bytes.\\n\\nSince you\\'re told you have no more than 200 strings and each one is up to 200 characters in length, it takes only one byte (one ascii character) to encode the number of strings at the beginning, and one byte before each string to encode its length. No need for special encodings or separators. This takes total_strings_length + num_strings + 1 bytes."
                    },
                    {
                        "username": "MC_Jin",
                        "content": "A public member storing original data is accepted. The test method should be changed, at least using two Codec instances, one for encoding another for decoding."
                    }
                ]
            }
        ]
    },
    {
        "title": "Sum of Two Integers",
        "question_content": "<p>Given two integers <code>a</code> and <code>b</code>, return <em>the sum of the two integers without using the operators</em> <code>+</code> <em>and</em> <code>-</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> a = 1, b = 2\n<strong>Output:</strong> 3\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> a = 2, b = 3\n<strong>Output:</strong> 5\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-1000 &lt;= a, b &lt;= 1000</code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 84278,
                "title": "a-summary-how-to-use-bit-manipulation-to-solve-problems-easily-and-efficiently",
                "content": "### Wiki\\nBit manipulation is the act of algorithmically manipulating bits or other pieces of data shorter than a word. Computer programming tasks that require bit manipulation include low-level device control, error detection and correction algorithms, data compression, encryption algorithms, and optimization. For most other tasks, modern programming languages allow the programmer to work directly with abstractions instead of bits that represent those abstractions. Source code that does bit manipulation makes use of the bitwise operations: AND, OR, XOR, NOT, and bit shifts.\\n\\nBit manipulation, in some cases, can obviate or reduce the need to loop over a data structure and can give many-fold speed ups, as bit manipulations are processed in parallel, but the code can become more difficult to write and maintain. \\n\\n### Details\\n\\n#### Basics\\nAt the heart of bit manipulation are the bit-wise operators & (and), | (or), ~ (not) and ^ (exclusive-or, xor) and shift operators a << b and a >> b. \\n\\n> There is no boolean operator counterpart to bitwise exclusive-or, but there is a simple explanation. The exclusive-or operation takes two inputs and returns a 1 if either one or the other of the inputs is a 1, but not if both are. That is, if both inputs are 1 or both inputs are 0, it returns 0. Bitwise exclusive-or, with the operator of a caret, ^, performs the exclusive-or operation on each pair of bits. Exclusive-or is commonly abbreviated XOR. \\n\\n- Set union A | B\\n- Set intersection A & B\\n- Set subtraction A & ~B\\n- Set negation ALL_BITS ^ A or ~A\\n- Set bit A |= 1 << bit\\n- Clear bit A &= ~(1 << bit)\\n- Test bit (A & 1 << bit) != 0\\n- Extract last bit A&-A or A&~(A-1) or x^(x&(x-1)) \\n- Remove last bit A&(A-1)\\n- Get all 1-bits ~0\\n\\n#### Examples\\nCount the number of ones in the binary representation of the given number\\n```\\nint count_one(int n) {\\n    while(n) {\\n        n = n&(n-1);\\n        count++;\\n    }\\n    return count;\\n}\\n```\\n\\nIs power of four (actually map-checking, iterative and recursive methods can do the same)\\n```\\nbool isPowerOfFour(int n) {\\n    return !(n&(n-1)) && (n&0x55555555);\\n    //check the 1-bit location;\\n}\\n```\\n\\n#### `^` tricks\\nUse `^` to remove even exactly same numbers and save the odd, or save the distinct bits and remove the same.\\n##### Sum of Two Integers\\nUse `^` and `&` to add two integers\\n```\\nint getSum(int a, int b) {\\n    return b==0? a:getSum(a^b, (a&b)<<1); //be careful about the terminating condition;\\n}\\n```\\n##### Missing Number\\nGiven an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.  For example, Given nums = [0, 1, 3] return 2. (Of course, you can do this by math.)\\n```\\nint missingNumber(vector<int>& nums) {\\n    int ret = 0;\\n    for(int i = 0; i < nums.size(); ++i) {\\n        ret ^= i;\\n        ret ^= nums[i];\\n    }\\n    return ret^=nums.size();\\n}\\n```\\n\\n#### `|` tricks\\nKeep as many 1-bits as possible \\n\\nFind the largest power of 2 (most significant bit in binary form), which is less than or equal to the given number N.\\n```\\nlong largest_power(long N) {\\n    //changing all right side bits to 1.\\n    N = N | (N>>1);\\n    N = N | (N>>2);\\n    N = N | (N>>4);\\n    N = N | (N>>8);\\n    N = N | (N>>16);\\n    return (N+1)>>1;\\n}\\n```\\n\\n##### Reverse Bits\\nReverse bits of a given 32 bits unsigned integer.\\n###### Solution\\n```\\nuint32_t reverseBits(uint32_t n) {\\n    unsigned int mask = 1<<31, res = 0;\\n    for(int i = 0; i < 32; ++i) {\\n        if(n & 1) res |= mask;\\n        mask >>= 1;\\n        n >>= 1;\\n    }\\n    return res;\\n}\\n```\\n```\\nuint32_t reverseBits(uint32_t n) {\\n\\tuint32_t mask = 1, ret = 0;\\n\\tfor(int i = 0; i < 32; ++i){\\n\\t\\tret <<= 1;\\n\\t\\tif(mask & n) ret |= 1;\\n\\t\\tmask <<= 1;\\n\\t}\\n\\treturn ret;\\n}\\n```\\n#### `&` tricks\\nJust selecting certain bits\\n\\nReversing the bits in integer\\n```\\nx = ((x & 0xaaaaaaaa) >> 1) | ((x & 0x55555555) << 1);\\nx = ((x & 0xcccccccc) >> 2) | ((x & 0x33333333) << 2);\\nx = ((x & 0xf0f0f0f0) >> 4) | ((x & 0x0f0f0f0f) << 4);\\nx = ((x & 0xff00ff00) >> 8) | ((x & 0x00ff00ff) << 8);\\nx = ((x & 0xffff0000) >> 16) | ((x & 0x0000ffff) << 16);\\n```\\n##### Bitwise AND of Numbers Range\\nGiven a range [m, n] where 0 <= m <= n <= 2147483647, return the bitwise AND of all numbers in this range, inclusive.  For example, given the range [5, 7], you should return 4.\\n###### Solution\\n```\\nint rangeBitwiseAnd(int m, int n) {\\n    int a = 0;\\n    while(m != n) {\\n        m >>= 1;\\n        n >>= 1;\\n        a++;\\n    }\\n    return m<<a; \\n}\\n```\\n##### Number of 1 Bits\\nWrite a function that takes an unsigned integer and returns the number of \\u20191' bits it has (also known as the Hamming weight).\\n###### Solution\\n```\\nint hammingWeight(uint32_t n) {\\n\\tint count = 0;\\n\\twhile(n) {\\n\\t\\tn = n&(n-1);\\n\\t\\tcount++;\\n\\t}\\n\\treturn count;\\n}\\n```\\n\\n```\\nint hammingWeight(uint32_t n) {\\n    ulong mask = 1;\\n    int count = 0;\\n    for(int i = 0; i < 32; ++i){ //31 will not do, delicate;\\n        if(mask & n) count++;\\n        mask <<= 1;\\n    }\\n    return count;\\n}\\n```\\n\\n#### Application\\n##### Repeated DNA Sequences\\nAll DNA is composed of a series of nucleotides abbreviated as A, C, G, and T, for example: \"ACGAATTCCG\". When studying DNA, it is sometimes useful to identify repeated sequences within the DNA.  Write a function to find all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.  \\nFor example, \\nGiven s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\", \\nReturn: [\"AAAAACCCCC\", \"CCCCCAAAAA\"].\\n###### Solution\\n```\\nclass Solution {\\npublic:\\n    vector<string> findRepeatedDnaSequences(string s) {\\n        int sLen = s.length();\\n        vector<string> v;\\n        if(sLen < 11) return v;\\n        char keyMap[1<<21]{0};\\n        int hashKey = 0;\\n        for(int i = 0; i < 9; ++i) hashKey = (hashKey<<2) | (s[i]-'A'+1)%5;\\n        for(int i = 9; i < sLen; ++i) {\\n            if(keyMap[hashKey = ((hashKey<<2)|(s[i]-'A'+1)%5)&0xfffff]++ == 1)\\n                v.push_back(s.substr(i-9, 10));\\n        }\\n        return v;\\n    }\\n};\\n```\\n> But the above solution can be invalid when repeated sequence appears too many times, in which case we should use `unordered_map<int, int> keyMap` to replace `char keyMap[1<<21]{0}`here.\\n##### Majority Element\\nGiven an array of size n, find the majority element. The majority element is the element that appears more than \\u230a n/2 \\u230b times. (bit-counting as a usual way, but here we actually also can adopt sorting and Moore Voting Algorithm)\\n###### Solution\\n```\\nint majorityElement(vector<int>& nums) {\\n    int len = sizeof(int)*8, size = nums.size();\\n    int count = 0, mask = 1, ret = 0;\\n    for(int i = 0; i < len; ++i) {\\n        count = 0;\\n        for(int j = 0; j < size; ++j)\\n            if(mask & nums[j]) count++;\\n        if(count > size/2) ret |= mask;\\n        mask <<= 1;\\n    }\\n    return ret;\\n}\\n```\\n##### Single Number III\\nGiven an array of integers, every element appears three times except for one. Find that single one. (Still this type can be solved by bit-counting easily.) But we are going to solve it by `digital logic design`\\n###### Solution\\n```\\n//inspired by logical circuit design and boolean algebra;\\n//counter - unit of 3;\\n//current   incoming  next\\n//a b            c    a b\\n//0 0            0    0 0\\n//0 1            0    0 1\\n//1 0            0    1 0\\n//0 0            1    0 1\\n//0 1            1    1 0\\n//1 0            1    0 0\\n//a = a&~b&~c + ~a&b&c;\\n//b = ~a&b&~c + ~a&~b&c;\\n//return a|b since the single number can appear once or twice;\\nint singleNumber(vector<int>& nums) {\\n    int t = 0, a = 0, b = 0;\\n    for(int i = 0; i < nums.size(); ++i) {\\n        t = (a&~b&~nums[i]) | (~a&b&nums[i]);\\n        b = (~a&b&~nums[i]) | (~a&~b&nums[i]);\\n        a = t;\\n    }\\n    return a | b;\\n}\\n;\\n```\\n##### Maximum Product of Word Lengths\\nGiven a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.\\n\\n> Example 1:\\nGiven [\"abcw\", \"baz\", \"foo\", \"bar\", \"xtfn\", \"abcdef\"]\\nReturn 16\\nThe two words can be \"abcw\", \"xtfn\".\\n\\n> Example 2:\\nGiven [\"a\", \"ab\", \"abc\", \"d\", \"cd\", \"bcd\", \"abcd\"]\\nReturn 4\\nThe two words can be \"ab\", \"cd\".\\n\\n> Example 3:\\nGiven [\"a\", \"aa\", \"aaa\", \"aaaa\"]\\nReturn 0\\nNo such pair of words.\\n\\n###### Solution\\nSince we are going to use the length of the word very frequently and we are to compare the letters of two words checking whether they have some letters in common:\\n- using an array of int to pre-store the length of each word reducing the frequently *measuring* process; \\n- since int has 4 bytes, a 32-bit type, and there are only 26 different letters, so we can just use one bit to indicate the existence of the letter in a word.\\n```\\nint maxProduct(vector<string>& words) {\\n    vector<int> mask(words.size());\\n    vector<int> lens(words.size());\\n    for(int i = 0; i < words.size(); ++i) lens[i] = words[i].length();\\n    int result = 0;\\n    for (int i=0; i<words.size(); ++i) {\\n        for (char c : words[i])\\n            mask[i] |= 1 << (c - 'a');\\n        for (int j=0; j<i; ++j)\\n            if (!(mask[i] & mask[j]))\\n                result = max(result, lens[i]*lens[j]);\\n    }\\n    return result;\\n}\\n```\\n\\n#### Attention\\n\\n- result after shifting left(or right) too much is undefined\\n- right shifting operations on negative values are undefined\\n- right operand in shifting should be non-negative, otherwise the result is undefined\\n- The & and | operators have lower precedence than comparison operators\\n\\n### Sets\\nAll the subsets\\nA big advantage of bit manipulation is that it is trivial to iterate over all the subsets of an N-element set: every N-bit value represents some subset. Even better, `if A is a subset of B then the number representing A is less than that representing B`, which is convenient for some dynamic programming solutions.\\n\\nIt is also possible to iterate over all the subsets of a particular subset (represented by a bit pattern), provided that you don\\u2019t mind visiting them in reverse order (if this is problematic, put them in a list as they\\u2019re generated, then walk the list backwards). The trick is similar to that for finding the lowest bit in a number. If we subtract 1 from a subset, then the lowest set element is cleared, and every lower element is set. However, we only want to set those lower elements that are in the superset. So the iteration step is just `i = (i - 1) & superset`.\\n\\n```\\nvector<vector<int>> subsets(vector<int>& nums) {\\n    vector<vector<int>> vv;\\n    int size = nums.size(); \\n    if(size == 0) return vv;\\n    int num = 1 << size;\\n    vv.resize(num);\\n    for(int i = 0; i < num; ++i) {\\n        for(int j = 0; j < size; ++j)\\n            if((1<<j) & i) vv[i].push_back(nums[j]);   \\n    }\\n    return vv;\\n}\\n```\\nActually there are two more methods to handle this using `recursion` and `iteration` respectively.\\n\\n### Bitset\\nA [bitset](http://www.cplusplus.com/reference/bitset/bitset/?kw=bitset) stores bits (elements with only two possible values: 0 or 1, true or false, ...).\\nThe class emulates an array of bool elements, but optimized for space allocation: generally, each element occupies only one bit (which, on most systems, is eight times less than the smallest elemental type: char).\\n```\\n// bitset::count\\n#include <iostream>       // std::cout\\n#include <string>         // std::string\\n#include <bitset>         // std::bitset\\n\\nint main () {\\n  std::bitset<8> foo (std::string(\"10110011\"));\\n  std::cout << foo << \" has \";\\n  std::cout << foo.count() << \" ones and \";\\n  std::cout << (foo.size()-foo.count()) << \" zeros.\\\\n\";\\n  return 0;\\n}\\n```\\n\\nAlways welcom new ideas and `practical` tricks, just leave them in the comments!",
                "solutionTags": [],
                "code": "```\\nint count_one(int n) {\\n    while(n) {\\n        n = n&(n-1);\\n        count++;\\n    }\\n    return count;\\n}\\n```\n```\\nbool isPowerOfFour(int n) {\\n    return !(n&(n-1)) && (n&0x55555555);\\n    //check the 1-bit location;\\n}\\n```\n```\\nint getSum(int a, int b) {\\n    return b==0? a:getSum(a^b, (a&b)<<1); //be careful about the terminating condition;\\n}\\n```\n```\\nint missingNumber(vector<int>& nums) {\\n    int ret = 0;\\n    for(int i = 0; i < nums.size(); ++i) {\\n        ret ^= i;\\n        ret ^= nums[i];\\n    }\\n    return ret^=nums.size();\\n}\\n```\n```\\nlong largest_power(long N) {\\n    //changing all right side bits to 1.\\n    N = N | (N>>1);\\n    N = N | (N>>2);\\n    N = N | (N>>4);\\n    N = N | (N>>8);\\n    N = N | (N>>16);\\n    return (N+1)>>1;\\n}\\n```\n```\\nuint32_t reverseBits(uint32_t n) {\\n    unsigned int mask = 1<<31, res = 0;\\n    for(int i = 0; i < 32; ++i) {\\n        if(n & 1) res |= mask;\\n        mask >>= 1;\\n        n >>= 1;\\n    }\\n    return res;\\n}\\n```\n```\\nuint32_t reverseBits(uint32_t n) {\\n\\tuint32_t mask = 1, ret = 0;\\n\\tfor(int i = 0; i < 32; ++i){\\n\\t\\tret <<= 1;\\n\\t\\tif(mask & n) ret |= 1;\\n\\t\\tmask <<= 1;\\n\\t}\\n\\treturn ret;\\n}\\n```\n```\\nx = ((x & 0xaaaaaaaa) >> 1) | ((x & 0x55555555) << 1);\\nx = ((x & 0xcccccccc) >> 2) | ((x & 0x33333333) << 2);\\nx = ((x & 0xf0f0f0f0) >> 4) | ((x & 0x0f0f0f0f) << 4);\\nx = ((x & 0xff00ff00) >> 8) | ((x & 0x00ff00ff) << 8);\\nx = ((x & 0xffff0000) >> 16) | ((x & 0x0000ffff) << 16);\\n```\n```\\nint rangeBitwiseAnd(int m, int n) {\\n    int a = 0;\\n    while(m != n) {\\n        m >>= 1;\\n        n >>= 1;\\n        a++;\\n    }\\n    return m<<a; \\n}\\n```\n```\\nint hammingWeight(uint32_t n) {\\n\\tint count = 0;\\n\\twhile(n) {\\n\\t\\tn = n&(n-1);\\n\\t\\tcount++;\\n\\t}\\n\\treturn count;\\n}\\n```\n```\\nint hammingWeight(uint32_t n) {\\n    ulong mask = 1;\\n    int count = 0;\\n    for(int i = 0; i < 32; ++i){ //31 will not do, delicate;\\n        if(mask & n) count++;\\n        mask <<= 1;\\n    }\\n    return count;\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    vector<string> findRepeatedDnaSequences(string s) {\\n        int sLen = s.length();\\n        vector<string> v;\\n        if(sLen < 11) return v;\\n        char keyMap[1<<21]{0};\\n        int hashKey = 0;\\n        for(int i = 0; i < 9; ++i) hashKey = (hashKey<<2) | (s[i]-'A'+1)%5;\\n        for(int i = 9; i < sLen; ++i) {\\n            if(keyMap[hashKey = ((hashKey<<2)|(s[i]-'A'+1)%5)&0xfffff]++ == 1)\\n                v.push_back(s.substr(i-9, 10));\\n        }\\n        return v;\\n    }\\n};\\n```\n```\\nint majorityElement(vector<int>& nums) {\\n    int len = sizeof(int)*8, size = nums.size();\\n    int count = 0, mask = 1, ret = 0;\\n    for(int i = 0; i < len; ++i) {\\n        count = 0;\\n        for(int j = 0; j < size; ++j)\\n            if(mask & nums[j]) count++;\\n        if(count > size/2) ret |= mask;\\n        mask <<= 1;\\n    }\\n    return ret;\\n}\\n```\n```\\n//inspired by logical circuit design and boolean algebra;\\n//counter - unit of 3;\\n//current   incoming  next\\n//a b            c    a b\\n//0 0            0    0 0\\n//0 1            0    0 1\\n//1 0            0    1 0\\n//0 0            1    0 1\\n//0 1            1    1 0\\n//1 0            1    0 0\\n//a = a&~b&~c + ~a&b&c;\\n//b = ~a&b&~c + ~a&~b&c;\\n//return a|b since the single number can appear once or twice;\\nint singleNumber(vector<int>& nums) {\\n    int t = 0, a = 0, b = 0;\\n    for(int i = 0; i < nums.size(); ++i) {\\n        t = (a&~b&~nums[i]) | (~a&b&nums[i]);\\n        b = (~a&b&~nums[i]) | (~a&~b&nums[i]);\\n        a = t;\\n    }\\n    return a | b;\\n}\\n;\\n```\n```\\nint maxProduct(vector<string>& words) {\\n    vector<int> mask(words.size());\\n    vector<int> lens(words.size());\\n    for(int i = 0; i < words.size(); ++i) lens[i] = words[i].length();\\n    int result = 0;\\n    for (int i=0; i<words.size(); ++i) {\\n        for (char c : words[i])\\n            mask[i] |= 1 << (c - 'a');\\n        for (int j=0; j<i; ++j)\\n            if (!(mask[i] & mask[j]))\\n                result = max(result, lens[i]*lens[j]);\\n    }\\n    return result;\\n}\\n```\n```\\nvector<vector<int>> subsets(vector<int>& nums) {\\n    vector<vector<int>> vv;\\n    int size = nums.size(); \\n    if(size == 0) return vv;\\n    int num = 1 << size;\\n    vv.resize(num);\\n    for(int i = 0; i < num; ++i) {\\n        for(int j = 0; j < size; ++j)\\n            if((1<<j) & i) vv[i].push_back(nums[j]);   \\n    }\\n    return vv;\\n}\\n```\n```\\n// bitset::count\\n#include <iostream>       // std::cout\\n#include <string>         // std::string\\n#include <bitset>         // std::bitset\\n\\nint main () {\\n  std::bitset<8> foo (std::string(\"10110011\"));\\n  std::cout << foo << \" has \";\\n  std::cout << foo.count() << \" ones and \";\\n  std::cout << (foo.size()-foo.count()) << \" zeros.\\\\n\";\\n  return 0;\\n}\\n```",
                "codeTag": "C++"
            },
            {
                "id": 132479,
                "title": "simple-explanation-on-how-to-arrive-at-the-solution",
                "content": "There\\'s lot of answers here, but none of them shows how they arrived at the answer, here\\'s my simple try to explain. \\n\\nEg: Let\\'s try this with our hand  3 + 2 = 5 , the carry will be with in the brackets i.e \"()\" \\n```\\n3 => 011 \\n2=>  010\\n     ____\\n     1(1)01\\n```\\n\\nHere we will forward the carry  at the second bit to get the result.\\nSo which bitwise operator can do this ? A simple observation says that XOR can do that,but it just falls short in dealing with the carry properly, but correctly adds when there is no need to deal with carry.\\nFor Eg: \\n```\\n1   =>  001 \\n2   =>  010 \\n1^2 =>  011 (2+1 = 3) \\n```\\n\\nSo now when we have carry, to deal with, we can see the result as : \\n```\\n3  => 011 \\n2  => 010 \\n3^2=> 001  \\n```\\nHere we can see  XOR just fell  short with the carry  generated at the second bit. \\nSo how can we find the carry ? The carry is generated when both the bits are set, i.e (1,1) will generate carry but (0,1 or 1,0 or 0,0) won\\'t generate a carry, so which bitwise operator can do that ?  AND gate ofcourse. \\n\\nTo find the carry we can do \\n```\\n3    =>  011 \\n2    =>  010 \\n3&2  =>  010\\n```\\nnow we need to add it to the previous value we generated i.e ( 3 ^ 2), but the carry should be added to the left bit of the one which genereated it. \\nso we left shift it by one so that it gets added at the right spot. \\n\\nHence  (3&2)<<1  => 100 \\nso we can now do \\n```\\n3 ^2        =>  001 \\n(3&2)<<1    =>  100 \\n\\nNow xor them, which will give 101(5) , we can continue this until the carry becomes zero.\\n\\n```\\nA Java program which implements the above logic :\\n\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n      int c; \\n      while(b !=0 ) {\\n        c = (a&b);\\n        a = a ^ b;\\n        b = (c)<<1;\\n      }\\n      return a;\\n        \\n    }\\n}\\n```\\nHope I made some sense, If not I am really sorry for wasting your time.",
                "solutionTags": [],
                "code": "```\\n3 => 011 \\n2=>  010\\n     ____\\n     1(1)01\\n```\n```\\n1   =>  001 \\n2   =>  010 \\n1^2 =>  011 (2+1 = 3) \\n```\n```\\n3  => 011 \\n2  => 010 \\n3^2=> 001  \\n```\n```\\n3    =>  011 \\n2    =>  010 \\n3&2  =>  010\\n```\n```\\n3 ^2        =>  001 \\n(3&2)<<1    =>  100 \\n\\nNow xor them, which will give 101(5) , we can continue this until the carry becomes zero.\\n\\n```\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n      int c; \\n      while(b !=0 ) {\\n        c = (a&b);\\n        a = a ^ b;\\n        b = (c)<<1;\\n      }\\n      return a;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84290,
                "title": "java-simple-easy-understand-solution-with-explanation",
                "content": "I have been confused about bit manipulation for a very long time. So I decide to do a summary about it here.\\n\\n\"&\" AND operation, for example, 2 (0010) & 7 (0111) => 2 (0010)\\n\\n\"^\" XOR operation, for example, 2 (0010) ^ 7 (0111) => 5 (0101)\\n\\n\"~\" NOT operation, for example, ~2(0010) => -3 (1101) what??? Don't get frustrated here. It's called two's complement.\\n\\n1111 is -1, in two's complement\\n\\n1110 is -2, which is ~2 + 1, ~0010 => 1101, 1101 + 1 = 1110 => 2 \\n\\n1101 is -3, which is ~3 + 1\\n\\nso if you want to get a negative number, you can simply do ~x + 1\\n\\nReference:\\n\\n[https://en.wikipedia.org/wiki/Two%27s_complement][1]\\n\\n[https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html][2]\\n\\nFor this, problem, for example, we have a = 1, b = 3,\\n\\nIn bit representation, a = 0001, b = 0011,\\n\\nFirst, we can use \"and\"(\"&\") operation between a and b to find a carry.\\n\\ncarry = a & b, then carry = 0001\\n\\nSecond, we can use \"xor\" (\"^\") operation between a and b to find the different bit, and assign it to a, \\n\\nThen, we shift carry one position left and assign it to b, b = 0010.\\n\\nIterate until there is no carry (or b == 0)\\n\\n    // Iterative\\n    public int getSum(int a, int b) {\\n\\t\\tif (a == 0) return b;\\n\\t\\tif (b == 0) return a;\\n\\n\\t\\twhile (b != 0) {\\n\\t\\t\\tint carry = a & b;\\n\\t\\t\\ta = a ^ b;\\n\\t\\t\\tb = carry << 1;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn a;\\n    }\\n\\n    // Iterative\\n    public int getSubtract(int a, int b) {\\n\\t\\twhile (b != 0) {\\n\\t\\t\\tint borrow = (~a) & b;\\n\\t\\t\\ta = a ^ b;\\n\\t\\t\\tb = borrow << 1;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn a;\\n\\t}\\n\\n    // Recursive\\n\\tpublic int getSum(int a, int b) {\\n\\t\\treturn (b == 0) ? a : getSum(a ^ b, (a & b) << 1);\\n\\t}\\n\\n\\t// Recursive\\n\\tpublic int getSubtract(int a, int b) {\\n\\t\\treturn (b == 0) ? a : getSubtract(a ^ b, (~a & b) << 1);\\n\\t}\\n\\t\\n\\t// Get negative number\\n\\tpublic int negate(int x) {\\n\\t\\treturn ~x + 1;\\n\\t}\\n\\n\\n  [1]: https://en.wikipedia.org/wiki/Two%27s_complement\\n  [2]: https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html",
                "solutionTags": [
                    "Java"
                ],
                "code": "I have been confused about bit manipulation for a very long time. So I decide to do a summary about it here.\\n\\n\"&\" AND operation, for example, 2 (0010) & 7 (0111) => 2 (0010)\\n\\n\"^\" XOR operation, for example, 2 (0010) ^ 7 (0111) => 5 (0101)\\n\\n\"~\" NOT operation, for example, ~2(0010) => -3 (1101) what??? Don't get frustrated here. It's called two's complement.\\n\\n1111 is -1, in two's complement\\n\\n1110 is -2, which is ~2 + 1, ~0010 => 1101, 1101 + 1 = 1110 => 2 \\n\\n1101 is -3, which is ~3 + 1\\n\\nso if you want to get a negative number, you can simply do ~x + 1\\n\\nReference:\\n\\n[https://en.wikipedia.org/wiki/Two%27s_complement][1]\\n\\n[https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html][2]\\n\\nFor this, problem, for example, we have a = 1, b = 3,\\n\\nIn bit representation, a = 0001, b = 0011,\\n\\nFirst, we can use \"and\"(\"&\") operation between a and b to find a carry.\\n\\ncarry = a & b, then carry = 0001\\n\\nSecond, we can use \"xor\" (\"^\") operation between a and b to find the different bit, and assign it to a, \\n\\nThen, we shift carry one position left and assign it to b, b = 0010.\\n\\nIterate until there is no carry (or b == 0)\\n\\n    // Iterative\\n    public int getSum(int a, int b) {\\n\\t\\tif (a == 0) return b;\\n\\t\\tif (b == 0) return a;\\n\\n\\t\\twhile (b != 0) {\\n\\t\\t\\tint carry = a & b;\\n\\t\\t\\ta = a ^ b;\\n\\t\\t\\tb = carry << 1;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn a;\\n    }\\n\\n    // Iterative\\n    public int getSubtract(int a, int b) {\\n\\t\\twhile (b != 0) {\\n\\t\\t\\tint borrow = (~a) & b;\\n\\t\\t\\ta = a ^ b;\\n\\t\\t\\tb = borrow << 1;\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn a;\\n\\t}\\n\\n    // Recursive\\n\\tpublic int getSum(int a, int b) {\\n\\t\\treturn (b == 0) ? a : getSum(a ^ b, (a & b) << 1);\\n\\t}\\n\\n\\t// Recursive\\n\\tpublic int getSubtract(int a, int b) {\\n\\t\\treturn (b == 0) ? a : getSubtract(a ^ b, (~a & b) << 1);\\n\\t}\\n\\t\\n\\t// Get negative number\\n\\tpublic int negate(int x) {\\n\\t\\treturn ~x + 1;\\n\\t}\\n\\n\\n  [1]: https://en.wikipedia.org/wiki/Two%27s_complement\\n  [2]: https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html",
                "codeTag": "Unknown"
            },
            {
                "id": 84279,
                "title": "python-solution",
                "content": "    class Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        list=[a,b]\\n        return sum(list)",
                "solutionTags": [],
                "code": "    class Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        list=[a,b]\\n        return sum(list)",
                "codeTag": "Java"
            },
            {
                "id": 84282,
                "title": "python-solution-with-no-completely-bit-manipulation-guaranteed",
                "content": "```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        # 32 bits integer max\\n        MAX = 0x7FFFFFFF\\n        # 32 bits interger min\\n        MIN = 0x80000000\\n        # mask to get last 32 bits\\n        mask = 0xFFFFFFFF\\n        while b != 0:\\n            # ^ get different bits and & gets double 1s, << moves carry\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\\n        # if a is negative, get a's 32 bits complement positive first\\n        # then get 32-bit positive's Python complement negative\\n        return a if a <= MAX else ~(a ^ mask)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        # 32 bits integer max\\n        MAX = 0x7FFFFFFF\\n        # 32 bits interger min\\n        MIN = 0x80000000\\n        # mask to get last 32 bits\\n        mask = 0xFFFFFFFF\\n        while b != 0:\\n            # ^ get different bits and & gets double 1s, << moves carry\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\\n        # if a is negative, get a's 32 bits complement positive first\\n        # then get 32-bit positive's Python complement negative\\n        return a if a <= MAX else ~(a ^ mask)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 489210,
                "title": "read-this-if-you-want-to-learn-about-masks",
                "content": "In Python unlike other languages the range of bits for representing a value is not 32, its much much larger than that. This is great when dealing with non negative integers, however this becomes a big issue when dealing with negative numbers ( two\\'s compliment) \\n\\nWhy ?\\n\\nLets have a look, say we are adding -2 and 3, which = 1\\n\\nIn Python this would be ( showing only 3 bits for clarity ) \\n\\n1  1 0 +\\n0  1 1 \\n\\nUsing binary addition you would get\\n\\n0 0 1 \\n\\nThat seems fine but what happended to the extra carry bit ? ( 1 0 0 0 ), if you were doing this by hand you would simply ignore it, but Python does not, instead it continues \\'adding\\' that bit and continuing the sum. \\n\\n1 1 1 1 1 1 0 +\\n0 0 0 0 0 1 1 \\n0 0 0 1 0 0 0 + ( carry bit ) \\n\\nso this actually continues on forever unless ... \\n\\nMask ! \\n\\nThe logic behind a mask is really simple, you should know that x & 1 = x right, so using that simple principle,\\n\\nif we create a series of 4 1\\'s and & them to any larger size series, we will get just that part of the series we want, so \\n\\n1 1 1 1 1 0 0 1\\n0 0 0 0 1 1 1 1 &\\n\\n0 0 0 0 1 0 0 1 ( Important to note that using a mask removes the two\\'s compliment) \\n\\nFor this question leetcode uses 32 bits, so you just need to create a 32 bit mask of 1\\'s , the quickest way is to use hexadecimal and 0xffffffff, you can write the binary form if you prefer it will work the same. \\n\\nHere is my code ,\\n\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        \\n        # 32 bit mask in hexadecimal\\n        mask = 0xffffffff\\n        \\n        # works both as while loop and single value check \\n        while (b & mask) > 0:\\n            \\n            carry = ( a & b ) << 1\\n            a = (a ^ b) \\n            b = carry\\n        \\n        # handles overflow\\n        return (a & mask) if b > 0 else a\\n```\\nNote the final check, if b = 0 that means the carry bit \\'finished\\', but when there is a negative number ( like -1), the carry bit will continue until it exceeds our 32 bit mask ( to end while loop ) it wont be 0 so in that case we use the mask. \\n\\nHope that helps, let me know if you have any further questions in comments.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        \\n        # 32 bit mask in hexadecimal\\n        mask = 0xffffffff\\n        \\n        # works both as while loop and single value check \\n        while (b & mask) > 0:\\n            \\n            carry = ( a & b ) << 1\\n            a = (a ^ b) \\n            b = carry\\n        \\n        # handles overflow\\n        return (a & mask) if b > 0 else a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 776952,
                "title": "python-best-leetcode-371-explanation-for-python",
                "content": "First, this problem is not intended to be so difficult, but a weird feature of Python makes it unnecessarily troublesome. I\\'ll assume you have learned the basic ideas for adding integers using bit operations. Namely, take the \\'uncarried\\' sum `a^b` and add to it the carry  `(a&b)<<1`. If you have questions about this, I suggest this video https://www.youtube.com/watch?v=qq64FrA2UXQ&t=848s\\n\\nThis post, however, will focus on why this simple idea cannot be implemented smoothly using Python.\\n\\nLet\\'s see a java version of the solution:\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while (b != 0) {\\n            int sum = a ^ b;\\n            int carry = (a & b) << 1;\\n            a = sum;\\n            b = carry;\\n        }\\n        return a;\\n    }\\n}\\n```\\n\\nThe correctness of this version relies on the fact that integers have **fixed** length (32 bits) in java. So `carry` (or `b`) will eventually be moved out of boundary and go to 0, and you can get out of the while loop. This is NOT the case for the Python! Python allows unlimited length of integers. If you try to mimic the code above, you will get to infinite loop!\\n\\n(*It is not very important but there is still a maximum integer in Python, although you can leftshift a bit infinitely many times*).\\n\\nSo what do we do? The first step is to manually bound the length of `sum` and `carry` by setting up a mask `0xFFFFFFFF`. `&` this mask with an (very long) integer will only keep the last 32 bits. Then, at each step of the loop, we `&` `sum` and `carry` with this mask, and eventually `carry` will be wiped out once it goes beyond 32 bits.\\n\\nThe Python code so far is\\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        mask = 0xffffffff\\n        while b:\\n\\t\\t    sum = (a^b) & mask\\n\\t\\t\\tcarry = ((a&b)<<1) & mask\\n            a = sum\\n\\t\\t\\tb = carry\\n        \\n        # Warning: this return statement is not correct yet!!!\\n\\t    return a\\n```\\n\\nBUT this is not the whole story. Although we successfully get out of the while loop, sadly a consequence is that the value of `a` also has only 32 bits. If it is a non-negative value then we are fine, but we will **lose information** if it is negative in the normal sense! \\n\\nFor example, for the testcase `a = -12, b=-8`. We know the finally answer is `-20`, and the current code will produce 32 bits `0xFFFFFFEC` which looks like `-20` in our usual sense. Well, Python doesn\\'t think so! Python believes this is a large positive integer `4294967276`, because all the bits to the far left are 0.\\n\\nSo what is the true representation of `-20 ` is in Python? I don\\'t know the exact answer but logically since integers have \"infinite\" length, it can be thought of as `0x...FFFFFFFFFFFFFFEC` where there are infinitely many `F`.\\n\\nAt this moment, what we want to do it to convert the 32 bits sense `0xFFFFFFEC` to the infinite bits sense `0x...FFFFFFFFFFFFFFEC`. We can achieve this by using **two\\'s complements**. First, we take the two\\'s complement of `-20` in the 32 bits sense. This gives us a nice, positive `20` which is valid no matter how many bits we are using. Then, we take the two\\'s complement of `20` is the infinite bits sense. This will produce a `-20` that Python can interpret.\\n\\nLet\\'s recall the rule for taking two\\'s complements: **Flip all the bits, then plus one**.\\n\\nSo, to take the two\\'s complement of `-20` in the 32 bits sense. We flip all the 32 bits of `0xFFFFFFEC` and add 1 to it. Note that here we cannot use the bit operation `~` because it will flip infinite many bits, not only the last 32. Instead, we ` xor` it with the mask `0xFFFFFFFF`. Recall that `xor` with 1 has the same effect as flipping. This only flips the last 32 bits, all the 0\\'s to the far left remains intact. Then we add 1 to it to finish the two\\'s complement and produce a valid `20`\\n```\\n(0xFFFFFFEC^mask)+1 == 0x14 == 20\\n```\\n\\nNext, we take the two\\'s complement of `20` in the Python fashion. Now we can direcly use the default bit operation\\n```\\n~20+1 == -20\\n```\\n\\nWrite these two steps in one line\\n```\\n~((0xFFFFFFEC^mask)+1)+1 == -20 == 0x...FFFFFFFFFFFFFFEC\\n```\\n\\nWait a minute, do you spot anything weird? We are not supposed to use `+` in the first place, right? Why are there two `+1`\\'s? Does it mean this method won\\'t work? Hold up and let me give the **final magic** of today:\\n\\nfor any number `x`, we have\\n```\\n~(x+1)+1 = ~x\\n```\\n\\n(*Here the whole* `(0xFFFFFFEC^mask)` *is considered as* `x`).\\n\\nIn other words, the two `+1`\\'s miracly cancel each other! so we can simly write\\n```\\n~(0xFFFFFFEC^mask) == -20\\n```\\n\\nTo sum up, since Python allows arbitary length for integers, we first use a mask `0xFFFFFFFF` to restrict the lengths. But then we lose information for negative numbers, so we use the magical formula `~(a^mask)` to convert the result to Python-interpretable form.\\n\\nHere is the complete code\\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        mask = 0xffffffff\\n        while b:\\n\\t\\t    sum = (a^b) & mask\\n\\t\\t\\tcarry = ((a&b)<<1) & mask\\n            a = sum\\n\\t\\t\\tb = carry\\n\\n\\t\\tif (a>>31) & 1: # If a is negative in 32 bits sense\\n\\t\\t\\treturn ~(a^mask)\\n\\t\\treturn a\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while (b != 0) {\\n            int sum = a ^ b;\\n            int carry = (a & b) << 1;\\n            a = sum;\\n            b = carry;\\n        }\\n        return a;\\n    }\\n}\\n```\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        mask = 0xffffffff\\n        while b:\\n\\t\\t    sum = (a^b) & mask\\n\\t\\t\\tcarry = ((a&b)<<1) & mask\\n            a = sum\\n\\t\\t\\tb = carry\\n        \\n        # Warning: this return statement is not correct yet!!!\\n\\t    return a\\n```\n```\\n(0xFFFFFFEC^mask)+1 == 0x14 == 20\\n```\n```\\n~20+1 == -20\\n```\n```\\n~((0xFFFFFFEC^mask)+1)+1 == -20 == 0x...FFFFFFFFFFFFFFEC\\n```\n```\\n~(x+1)+1 = ~x\\n```\n```\\n~(0xFFFFFFEC^mask) == -20\\n```\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        mask = 0xffffffff\\n        while b:\\n\\t\\t    sum = (a^b) & mask\\n\\t\\t\\tcarry = ((a&b)<<1) & mask\\n            a = sum\\n\\t\\t\\tb = carry\\n\\n\\t\\tif (a>>31) & 1: # If a is negative in 32 bits sense\\n\\t\\t\\treturn ~(a^mask)\\n\\t\\treturn a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84305,
                "title": "share-my-c-solutions-easy-to-understand",
                "content": "    class Solution {\\n    public:\\n        int getSum(int a, int b) {\\n            int sum = a;\\n            \\n            while (b != 0)\\n            {\\n                sum = a ^ b;//calculate sum of a and b without thinking the carry \\n                b = (a & b) << 1;//calculate the carry\\n                a = sum;//add sum(without carry) and carry\\n            }\\n            \\n            return sum;\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int getSum(int a, int b) {\\n            int sum = a;\\n            \\n            while (b != 0)\\n            {\\n                sum = a ^ b;//calculate sum of a and b without thinking the carry \\n                b = (a & b) << 1;//calculate the carry\\n                a = sum;//add sum(without carry) and carry\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 302977,
                "title": "c-the-evil-runtime-error-left-shift-of-negative-value-reason-and-how-to-solve",
                "content": "Someone may encounter an error:   left shift of negative value, when you (me too!) wrote the code as follows:\\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        int trigger = a & b;\\n        int ret = a ^ b;\\n        while(trigger)\\n        {\\n            int temp = trigger<<1; //problem!\\n            trigger = temp & ret;\\n            ret ^= temp;\\n        }\\n        return ret;\\n    }\\n};\\n```\\nIt happens when your input a (or b) is a negative number, and you may saw some solutions like:\\n\\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        int trigger = a & b;\\n        int ret = a ^ b;\\n        while(trigger)\\n        {\\n            int temp = (trigger & 0xffffffff)<<1; //not a problem anymore!\\n            trigger = temp & ret;\\n            ret ^= temp;\\n        }\\n        return ret;\\n    }\\n};\\n```\\nI was confused at fist. I searched some materials and looked others\\' comments, and summarize the reason here (hope it can help someone like me):\\nwhen a is a **signed int** and **negative**, it seems that\\n```\\na << 1\\n```\\nis not well defined in C++ standard, even you may pass your code in Visual Studio or some other IDE. I think this is why the first version does not work in LeetCode.\\n\\nHowever, the second version works because \\'**0xffffffff**\\' (8 fs) is an **unsigned int**. Note that **0x0fffffff** (7 fs) is an **int**.  When we have \\n```\\ntrigger & 0xfffffff\\n```\\nwe get an **unsigned int**, and the left bit shift of the **unsigned int** is defined by filling zeros at the tail. In the end, we convert this **unsigned int** to **int**, by **int temp =**. In this way, the error is avoided.\\n\\nAn better alternative is to replace **int temp = (trigger & 0xffffffff)<<1;** with\\n```\\nint temp = (unsigned int)trigger << 1;\\n```\\nif you do not like to implicitly assume that the size of int is four bytes (another evil fact that the size of int is not fixed in C++).",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        int trigger = a & b;\\n        int ret = a ^ b;\\n        while(trigger)\\n        {\\n            int temp = trigger<<1; //problem!\\n            trigger = temp & ret;\\n            ret ^= temp;\\n        }\\n        return ret;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        int trigger = a & b;\\n        int ret = a ^ b;\\n        while(trigger)\\n        {\\n            int temp = (trigger & 0xffffffff)<<1; //not a problem anymore!\\n            trigger = temp & ret;\\n            ret ^= temp;\\n        }\\n        return ret;\\n    }\\n};\\n```\n```\\na << 1\\n```\n```\\ntrigger & 0xfffffff\\n```\n```\\nint temp = (unsigned int)trigger << 1;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 606544,
                "title": "javascript-very-detailed-explanation-with-two-code-versions-enjoy",
                "content": "Easier to understand version.  See below for explanation\\n```\\nvar getSum = function(a, b) {\\n      let carry;\\n      while((a & b) !== 0){\\n          carry = (a & b) << 1;\\n          a = a ^ b;\\n          b = carry;\\n      }\\n      return a ^ b;\\n};\\n```\\n\\nOk, so we all know that numbers represented on computers are groups of 1\\'s and 0\\'s (binary, two states).  Like in decimal, what we are all familar with (base 10), when we add numbers and they exceed the base (10), we add to the next column left.  \\n\\nFor example adding 5+6 (both numbers using \"units\" place), and get 1 (tens place) and 1 (units place).  The point is, that adding numbers will fill the \"units\" bucket, and overflow to the next one as needed.  So, what\\'s important?  Add the numbers to the \"units\" bucket, and keep track of the overflow.\\n\\nin binary, xor or ^ will add digits (but doesn\\'t care about overflow). XOR/exclusive or, works like or, but if both are positive, it switches to negative, \\n\\nso 4+3\\n100\\n011\\n\\n111 (because 1 or 0 is 1 in xor) \\nthis makes sense because in binary, 3+4 also equals 7\\n\\nwhat about 5+1?\\n101\\n001\\n\\n100, that\\'s 4, but 5+1 = 6, not four.  That\\'s because we have a carry.  The rightmost 1\\'s should carry to the next place, so that\\'s where the next part of the process comes, the &. The AND will only return 1 when both are 1 so, so 001+001 = 001, and we shift it left with << 1, so it becomes 010 or 2, so it\\'s 4(100)+2(010) which equals 6 (110)\\n\\nSo, for this to work we need to add the numbers with xOR ^, and also add the carry that comes from AND &.\\n\\nWhen we do that, it\\'s possible that again, we have a carry, so we would need to repeat.  think about  binary of 3+7.\\n011 (3)\\n111 (7)\\nXOR\\n100 (4)\\n\\nAND \\n011 (3)   since it is the carry, we shift <<1, so it becomes 110 or 6.  now we add using ^, but that gets us\\n\\n100\\n110\\nXOR\\n010 or 2, but we also still have a new carry which is 100 & 110 or 100 and shifted <<1 is 1000.  add that to the 010 and we have 1010 or 10.  \\n\\nSo the point of the second example is that you keep having to run the operation whenever there is a carry.  In my first example I did it with the loop, below with recursion.\\n\\nRecursive with syntactic sugar \\n```\\nvar getSum = function(a, b) {\\n    return b ? getSum(a ^ b, (a & b) << 1) : a;\\n};\\n```\\n\\nI hope this example helped to understand how the binary operations actually happen, if it helped you, maybe you could upvote it so others might notice it.\\n\\nBtw, it\\'s called a half adder and is physically used in building physical memory/computer systems.  I learned in at UMD, College Park in CS311 computer architecture a long time ago, happy to see that it was useful :-)\\n\\nIf this post helped, please upvote it so others can notice and read it.  thanks!",
                "solutionTags": [
                    "JavaScript",
                    "Bit Manipulation",
                    "Recursion"
                ],
                "code": "```\\nvar getSum = function(a, b) {\\n      let carry;\\n      while((a & b) !== 0){\\n          carry = (a & b) << 1;\\n          a = a ^ b;\\n          b = carry;\\n      }\\n      return a ^ b;\\n};\\n```\n```\\nvar getSum = function(a, b) {\\n    return b ? getSum(a ^ b, (a & b) << 1) : a;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 167931,
                "title": "solution-with-actual-explanation-how-you-would-work-this-out",
                "content": "Since a lot of people say they don\\'t get how the solution is derived, here\\'s an explanation.\\n\\nWhen faced with a \"perform arithmetic operation without using the operator\" question, the chances are you will have to use bit manipulation.\\n\\nThe key insight is to realize that basic mathematical rules still work when using binary. So to solve these questions you should:\\n\\n1. Work out how the basic mathematical operation works step-by-step\\n2. Replicate these operations using the basic bitwise operators <<, >>, &, ^, |\\n\\nIn this case, we have addition. How does addition work normally (base 10/decimal)?\\n1. If the two digits of the number add up to less than 10, you add that digit to your sum, with no carry\\n2. If the two digits of the number add up to 10 or more, you add the least significant digit and carry the 1 to the next position.\\n\\nNow in binary, our least significant digit is always 0, so this actually makes things simpler a bit.\\n\\nLet\\'s look at an example of adding 2 + 3:\\n\\n0 0 1 0 (2)\\n0 0 1 1 (3)\\n\\nFirst, let\\'s look at the rightmost bits. 0 + 1 = 1 \"one\" and 1 \"zero\", so we have 1. This gives us:\\n\\n0 0 1 0 (2)\\n0 0 1 1 (3)\\n\\nNow let\\'s look at the next digit (2nd from the right. 1 + 1. Here we have to carry since we have two \"ones\", and the maximum we can have in binary is 1, just as the maximum we can have in base 10 is 10. So just like in regular decimal addition, we set our bit here to 0 and carry the 1 to the left. This gives us our final answer:\\n\\n0 1 0 1 (5)\\n\\nNow when we look at the final solution, all we are doing is repeating these steps over and over again until we have nothing left to carry.\\n\\nHow do we check if only one bit is 1? Use ^.\\nHow do we check if both bits are 1? Use &.\\n\\nThen the final step is to work out when to terminate your addition. I would argue this is actually quite tricky and pushes the question above easy. But if you wouldn\\'t work it out you could actually just use a loop through all of the bits.\\n\\n```\\npublic int getSum(int a, int b) {\\n        if(a == 0) {\\n            return b;\\n        }\\n        \\n        if(b == 0) {\\n            return a;\\n        }\\n        \\n        int carry = 0;\\n        \\n        while(b != 0) {\\n            \\n            // If both bits are 1, we set the bit to the left (<<1) to 1 -- this is the carry step\\n            carry = (a & b) << 1;\\n            \\n            // If both bits are 1, this will give us 0 (we will have a carry from the step above)\\n            // If only 1 bit is 1, this will give us 1 (there is nothing to carry)\\n            a = a ^ b;\\n            \\n            b = carry;\\n        }\\n        \\n        return a;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int getSum(int a, int b) {\\n        if(a == 0) {\\n            return b;\\n        }\\n        \\n        if(b == 0) {\\n            return a;\\n        }\\n        \\n        int carry = 0;\\n        \\n        while(b != 0) {\\n            \\n            // If both bits are 1, we set the bit to the left (<<1) to 1 -- this is the carry step\\n            carry = (a & b) << 1;\\n            \\n            // If both bits are 1, this will give us 0 (we will have a carry from the step above)\\n            // If only 1 bit is 1, this will give us 1 (there is nothing to carry)\\n            a = a ^ b;\\n            \\n            b = carry;\\n        }\\n        \\n        return a;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 84277,
                "title": "one-liner-with-detailed-explanation",
                "content": "The chosen answer from this post: [adding-two-numbers-without-operator-clarification][1] helps me understand how it works, and recursion proves to be more intuitive to me than iterative.\\nBasically, with key points:\\n\\n1. exclusive or (***^***) handles these cases: 1+0 and 0+1 \\n2. AND (***&***) handles this case: 1+1, where ***carry*** occurs, in this case, we'll have to shift carry to the left, why? Think about this example: 001 + 101 = 110 (binary format), the least significant digits of the two operands are both '1', thus trigger a carry = 1, with this carry, their least significant digits: 1+1 = 0, thus we need to shift the carry to the left by 1 bit in order to get their correct sum: 2\\n\\nMy initial submission with inspiration from that post:\\n\\n    public int getSum(int a, int b) {\\n        if(b == 0) return a;\\n        int carry = (a & b) << 1;\\n        int sum = a ^ b;\\n        return getSum(sum, carry);\\n    }\\n\\nThen I found the above solution could be shortened to one-liner:\\n\\n    public int getSum(int a, int b) {\\n        return b == 0 ? a : getSum(a^b, (a&b)<<1);\\n    }\\n\\n\\n  [1]: http://stackoverflow.com/questions/9070937/adding-two-numbers-without-operator-clarification",
                "solutionTags": [
                    "Java"
                ],
                "code": "The chosen answer from this post: [adding-two-numbers-without-operator-clarification][1] helps me understand how it works, and recursion proves to be more intuitive to me than iterative.\\nBasically, with key points:\\n\\n1. exclusive or (***^***) handles these cases: 1+0 and 0+1 \\n2. AND (***&***) handles this case: 1+1, where ***carry*** occurs, in this case, we'll have to shift carry to the left, why? Think about this example: 001 + 101 = 110 (binary format), the least significant digits of the two operands are both '1', thus trigger a carry = 1, with this carry, their least significant digits: 1+1 = 0, thus we need to shift the carry to the left by 1 bit in order to get their correct sum: 2\\n\\nMy initial submission with inspiration from that post:\\n\\n    public int getSum(int a, int b) {\\n        if(b == 0) return a;\\n        int carry = (a & b) << 1;\\n        int sum = a ^ b;\\n        return getSum(sum, carry);\\n    }\\n\\nThen I found the above solution could be shortened to one-liner:\\n\\n    public int getSum(int a, int b) {\\n        return b == 0 ? a : getSum(a^b, (a&b)<<1);\\n    }\\n\\n\\n  [1]: http://stackoverflow.com/questions/9070937/adding-two-numbers-without-operator-clarification",
                "codeTag": "Unknown"
            },
            {
                "id": 1394031,
                "title": "c-100-faster-with-explanation",
                "content": "If you ever confront these type of problems, then bitwise manipulation will always be the key to it.\\n\\nSo, the solution is relatively simple, we loop until the second integer \\'b\\' (vice versa) gets to 0.\\nWe use c variable (for carry condition) to get the common bits between a and b (using & operator). \\nCommon bit( 0,0 and 1,1) will have carry 0 and 1 respectively. It is set to unsigned as we have negative number cases as well.\\n\\nUsing XOR operator, we will be doing our main operation. ^ this breaks down decimal into binary and checks if we have different values. If 0 and 1, 1 and 0 then it simply adds it to 1 . If 0 0 it does nothing. If 1 1, it produces a carry for the next bit and makes current bit sum as 0. I would recommend reading about XOR and & operators before advancing to this problem.\\n\\nIf we have carry condition and we need to create new bit we add 1 to sum. (Eg. 100 and 111 would be 011, so we need to add 1 at front to get our desired answer).\\n\\nTo take care about termination of the loop we will pass our carry into left shift operator and store that value into b. To put it simply, b becomes zero when carry becomes zero.![image](https://assets.leetcode.com/users/images/1ac04624-3829-4631-93e6-508ed47e4c9e_1628830332.97185.jpeg)\\nHere\\'s an example with a=2, b=3 where sum is 5.\\n\\nI hope you understood the solution, if you liked it please do upvote the post :)\\n\\n```\\nint getSum(int a, int b) {\\n        while(b) {\\n            unsigned c = a&b;\\n            a ^= b;\\n            b = c << 1;\\n        }\\n        return a;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nint getSum(int a, int b) {\\n        while(b) {\\n            unsigned c = a&b;\\n            a ^= b;\\n            b = c << 1;\\n        }\\n        return a;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 84350,
                "title": "most-straightforward-python-solution",
                "content": "My code\\n\\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        if a == 0:\\n            return b\\n        elif b == 0:\\n            return a\\n        \\n        mask = 0xffffffff\\n\\n        # in Python, every integer is associated with its two's complement and its sign.\\n        # However, doing bit operation \"& mask\" loses the track of sign. \\n        # Therefore, after the while loop, a is the two's complement of the final result as a 32-bit unsigned integer. \\n        while b != 0:\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\\n\\n        # a is negative if the first bit is 1\\n        if (a >> 31) & 1:\\n            return ~(a ^ mask)\\n        else:\\n            return a\\n            \\n```\\n\\nIdea:\\nAdding two integers `a` and `b` (no matter positive or negative) can always be boiled down into 3 steps:\\n1. convert `a` and `b` into two's complements. \\n2. add both two's complements. The result is a new two's complement\\n3. convert the result back to integer\\n\\nTwo things to note:\\n1.  In Python, every integer is associated with its two's complement and its sign. However, doing bit operation \"& mask\" loses the track of sign. For example, `-1 & 0xffffffff` becomes a huge positive number 4294967295. Therefore, after the while loop, a is the two's complement of the final result as a **32-bit unsigned integer**.  \\n2. The magic is that if there is a negative integer `n`, and its unsigned 32-bit two's complement is `m`, then `m = ~(n ^ 0xffffffff)` and `n = ~(m ^ 0xffffffff)`. So using this magic, you can do the conversion in step 3.",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        if a == 0:\\n            return b\\n        elif b == 0:\\n            return a\\n        \\n        mask = 0xffffffff\\n\\n        # in Python, every integer is associated with its two's complement and its sign.\\n        # However, doing bit operation \"& mask\" loses the track of sign. \\n        # Therefore, after the while loop, a is the two's complement of the final result as a 32-bit unsigned integer. \\n        while b != 0:\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\\n\\n        # a is negative if the first bit is 1\\n        if (a >> 31) & 1:\\n            return ~(a ^ mask)\\n        else:\\n            return a\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 377906,
                "title": "easy-peasy-python-comments-works-for-negative-solution-using-bit",
                "content": "\\t#         1.Why carry is a&b:\\n\\t#         If a and b are both 1 at the same digit, it creates one carry.\\n\\t#         Because you can only use 0 and 1 in binary, if you add 1+1 together, it will roll that over to the next digit, and the value will be 0 at this digit.\\n\\t#         if they are both 0 or only one is 1, it doesn\\'t need to carry.\\n\\n\\t#         Use ^ operation between a and b to find the different bit\\n\\t#         In my understanding, using ^ operator is kind of adding a and b together (a+b) but ignore the digit that a and b are both 1,\\n\\t#         because we already took care of this in step1.\\t\\n\\t\\n\\t\\n\\tdef getSum(self, a: int, b: int) -> int:\\n\\t\\tcarry = 0\\n        mask = 0xffffffff\\n        while b & mask != 0:\\n            carry = (a & b) << 1\\n            a = a ^ b\\n            b = carry\\n        \\n        # for overflow condition like\\n        # -1\\n        #  1\\n        return a&mask if b > mask else a\\n\\t\\t\\n\\t\\t\\n\\t#more explanation\\n\\thttps://leetcode.com/problems/sum-of-two-integers/discuss/167931/Solution-with-ACTUAL-explanation-(how-you-would-work-this-out)",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Bit Manipulation"
                ],
                "code": "\\t#         1.Why carry is a&b:\\n\\t#         If a and b are both 1 at the same digit, it creates one carry.\\n\\t#         Because you can only use 0 and 1 in binary, if you add 1+1 together, it will roll that over to the next digit, and the value will be 0 at this digit.\\n\\t#         if they are both 0 or only one is 1, it doesn\\'t need to carry.\\n\\n\\t#         Use ^ operation between a and b to find the different bit\\n\\t#         In my understanding, using ^ operator is kind of adding a and b together (a+b) but ignore the digit that a and b are both 1,\\n\\t#         because we already took care of this in step1.\\t\\n\\t\\n\\t\\n\\tdef getSum(self, a: int, b: int) -> int:\\n\\t\\tcarry = 0\\n        mask = 0xffffffff\\n        while b & mask != 0:\\n            carry = (a & b) << 1\\n            a = a ^ b\\n            b = carry\\n        \\n        # for overflow condition like\\n        # -1\\n        #  1\\n        return a&mask if b > mask else a\\n\\t\\t\\n\\t\\t\\n\\t#more explanation\\n\\thttps://leetcode.com/problems/sum-of-two-integers/discuss/167931/Solution-with-ACTUAL-explanation-(how-you-would-work-this-out)",
                "codeTag": "Python3"
            },
            {
                "id": 84287,
                "title": "my-c-code-with-proof",
                "content": "I saw a lot of the solution just give code, while no proof is given or even discussed. So I tried to give my informal math proof of my algorithm (see proof below code) in order to show why this algorithm is correct:\\n>     int getSum(int a, int b) {\\n>         int ans = a ^ b;\\n>         int c = a & b;\\n>         while(c != 0) {\\n>             c <<= 1;\\n>             int ans_prim = ans ^ c;\\n>             c = ans & c;\\n>             ans = ans_prim;\\n>         }\\n>         return ans;\\n>      }\\n\\nHere, variable **c** is carry, and **ans** is return value. Denote ^ is xor operation.\\n\\n***Proof**: the loop invariant of the while loop above code is: if there is no carry in any ith bit of **a** + **b** exists, **a** ^ **b** must equal to **a** + **b**: let's consider a example: 2 in 2 base is 10, and 1 in 2 base is 01, there is no carry in any bit of (2 + 1), that's the time (2+1) = (2^1) exists. **Otherwise,** if we know **a** ^ **b** and carry for each bit of **a** + **b**, let's say **c**, then (**a** ^ **b**) + (**c**<<1) must equal to **a** + **b**; Here is an example: 3 in 2 base is 11, while 1 in 2 base is 01, obviously, carry is 01 corresponding to each bit, therefore, 3+1 = 3^1+(1<<1) holds (3^1 = 2, 1<<1 = 2).* \\n\\n*in the beginning,  \"c = a & b\" and \"c != 0\" used to check if there is any carry for **a** + **b** exists: **if not**, then we got result directly (case 2 + 1), **if there is any carry bit** (case 3+1), then \"c <<= 1\" used to shift and \"ans ^ c\" used to calculate new \"bit adding result\", after new adding result is calculate, we have two situation: if the result is final result, then new carry must be zero, otherwise not (according to loop invariant); so carry is updated for each bit \"c = ans & c\". After above step, the ans keeps the xor result of ans and carry **c**, carry **c** holds the result of new carry for each bit of (previous ans + previous c<<1), till carry is gone, then ans holds final result.*",
                "solutionTags": [],
                "code": "I saw a lot of the solution just give code, while no proof is given or even discussed. So I tried to give my informal math proof of my algorithm (see proof below code) in order to show why this algorithm is correct:\\n>     int getSum(int a, int b) {\\n>         int ans = a ^ b;\\n>         int c = a & b;\\n>         while(c != 0) {\\n>             c <<= 1;\\n>             int ans_prim = ans ^ c;\\n>             c = ans & c;\\n>             ans = ans_prim;\\n>         }\\n>         return ans;\\n>      }\\n\\nHere, variable **c** is carry, and **ans** is return value. Denote ^ is xor operation.\\n\\n***Proof**: the loop invariant of the while loop above code is: if there is no carry in any ith bit of **a** + **b** exists, **a** ^ **b** must equal to **a** + **b**: let's consider a example: 2 in 2 base is 10, and 1 in 2 base is 01, there is no carry in any bit of (2 + 1), that's the time (2+1) = (2^1) exists. **Otherwise,** if we know **a** ^ **b** and carry for each bit of **a** + **b**, let's say **c**, then (**a** ^ **b**) + (**c**<<1) must equal to **a** + **b**; Here is an example: 3 in 2 base is 11, while 1 in 2 base is 01, obviously, carry is 01 corresponding to each bit, therefore, 3+1 = 3^1+(1<<1) holds (3^1 = 2, 1<<1 = 2).* \\n\\n*in the beginning,  \"c = a & b\" and \"c != 0\" used to check if there is any carry for **a** + **b** exists: **if not**, then we got result directly (case 2 + 1), **if there is any carry bit** (case 3+1), then \"c <<= 1\" used to shift and \"ans ^ c\" used to calculate new \"bit adding result\", after new adding result is calculate, we have two situation: if the result is final result, then new carry must be zero, otherwise not (according to loop invariant); so carry is updated for each bit \"c = ans & c\". After above step, the ans keeps the xor result of ans and carry **c**, carry **c** holds the result of new carry for each bit of (previous ans + previous c<<1), till carry is gone, then ans holds final result.*",
                "codeTag": "Unknown"
            },
            {
                "id": 84456,
                "title": "one-line-java-code",
                "content": "a^b is the sum of a and b bitwise without carrier, (a&b)<<1 is the carrier computation bitwise, when the carrier is equal to 0, the recursion terminate, the code is much like Euclidean gcd:\\n\\n    public int getSum(int a, int b) {\\n        return b == 0 ? a : getSum(a ^ b, (a & b) << 1);\\n    }",
                "solutionTags": [],
                "code": "a^b is the sum of a and b bitwise without carrier, (a&b)<<1 is the carrier computation bitwise, when the carrier is equal to 0, the recursion terminate, the code is much like Euclidean gcd:\\n\\n    public int getSum(int a, int b) {\\n        return b == 0 ? a : getSum(a ^ b, (a & b) << 1);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1234907,
                "title": "easiest-c-soln-basic-maths-one-liner-100-fastest",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        return log(exp(a)*exp(b));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        return log(exp(a)*exp(b));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 699379,
                "title": "python-simple-bit-operations-solution-with-detailed-explanation",
                "content": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        ## RC ##\\n        ## APPROACH : BITWISE OPERATIONS ##\\n        ## LOGIC ##\\n        #   1. For any two numbers, if their binary representations are completely opposite, then XOR operation will directly produce sum of numbers ( in this case carry is 0 )\\n        #   2. what if the numbers binary representation is not completely opposite, XOR will only have part of the sum and remaining will be carry, which can be produced by and operation followed by left shift operation.\\n        #   3. For Example 18, 13 => 10010, 01101 => XOR => 11101 => 31 (ans found), and operation => carry => 0\\n        #   4. For Example 7, 5\\n        #   1 1 1                   1 1 1\\n        #   1 0 1                   1 0 1\\n        #   -----                   -----\\n        #   0 1 0   => XOR => 2     1 0 1  => carry => after left shift => 1 0 1 0\\n        #   2                                                              10\\n        # now we have to find sum of 2, 10 i.e a is replace with XOR result and b is replaced wth carry result\\n        # similarly repeating this process till carry is 0\\n        #   steps will be 7|5 => 2|10 => 8|4  => 12|0\\n        \\n\\t\\t## TIME COMPLEXITY : O(1) ##\\n\\t\\t## SPACE COMPLEXITY : O(1) ##\\n        \\n        # 32 bit mask in hexadecimal\\n        mask = 0xffffffff # (python default int size is not 32bit, it is very large number, so to prevent overflow and stop running into infinite loop, we use 32bit mask to limit int size to 32bit )\\n        while(b & mask > 0):\\n            carry = (a & b) << 1\\n            a = a ^ b\\n            b = carry\\n        return (a & mask) if b > 0 else a\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        ## RC ##\\n        ## APPROACH : BITWISE OPERATIONS ##\\n        ## LOGIC ##\\n        #   1. For any two numbers, if their binary representations are completely opposite, then XOR operation will directly produce sum of numbers ( in this case carry is 0 )\\n        #   2. what if the numbers binary representation is not completely opposite, XOR will only have part of the sum and remaining will be carry, which can be produced by and operation followed by left shift operation.\\n        #   3. For Example 18, 13 => 10010, 01101 => XOR => 11101 => 31 (ans found), and operation => carry => 0\\n        #   4. For Example 7, 5\\n        #   1 1 1                   1 1 1\\n        #   1 0 1                   1 0 1\\n        #   -----                   -----\\n        #   0 1 0   => XOR => 2     1 0 1  => carry => after left shift => 1 0 1 0\\n        #   2                                                              10\\n        # now we have to find sum of 2, 10 i.e a is replace with XOR result and b is replaced wth carry result\\n        # similarly repeating this process till carry is 0\\n        #   steps will be 7|5 => 2|10 => 8|4  => 12|0\\n        \\n\\t\\t## TIME COMPLEXITY : O(1) ##\\n\\t\\t## SPACE COMPLEXITY : O(1) ##\\n        \\n        # 32 bit mask in hexadecimal\\n        mask = 0xffffffff # (python default int size is not 32bit, it is very large number, so to prevent overflow and stop running into infinite loop, we use 32bit mask to limit int size to 32bit )\\n        while(b & mask > 0):\\n            carry = (a & b) << 1\\n            a = a ^ b\\n            b = carry\\n        return (a & mask) if b > 0 else a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 963706,
                "title": "python-recursive-solution-thought-process",
                "content": "**Prior Knowledge**\\n\\nYou guys should check out the top posts to understand the general solution of:\\n\\n```\\ndef getSum(a, b):\\n\\tif b == 0: return a\\n\\treturn getSum(a ^ b, (a & b) << 1)\\n```\\n\\nBut here\\'s a quick summary:\\n- Essentially, `a ^ b` add\\'s binary numbers that do not require us to \"carry\" a \"bit\".\\n- The (a & b) finds which bits need to be carried, and we simply bit shift to the left so the carried bit is in the right position. \\n- By recursively calling `getSum` again, we will add the previous `a^b` result with the \"carry\" that needs to be accounted for to complete the add.\\n\\n**Python solution explanation**\\n\\nHowever,  in python, integers can exceed 32 bits. This causes a problem for us! So to mitigate this, we have to:\\n1. Make sure our integers are strictly 32 bits\\n2. Juggle between 32 bit, two\\'s complements.\\n\\nFirst, lets talk about the `mask` variable. Notice that it is equal to `0b11111111111111111111111111111111`. This is simply 32 bits of one\\'s. This means any time the integer overflows to more than 32 bits, we do a `& mask` to set any bit greater than 32 to zero. This satifies our constraint #1 of making sure our intergers are strictly 32 bits.\\n\\nSecond, let\\'s deal with the `MAX` variable. To understand the `MAX` variable, you must understand what is [two\\'s complement](https://stackoverflow.com/questions/1049722/what-is-2s-complement).  Ultimately, `MAX = 0b01111111111111111111111111111111` is the largest 32 bit integer that is \"positve\" under the \"two\\'s compelment\" scheme. Thus, when we do `if a <= MAX` we are checking if `a` is positive. If `a` is greater than `MAX`, we have a \"negative\" number. *However, since python can deal with integers greater than 32 bits, python assumes this negative integer is positive*. Thus, `~(a ^ mask)` allows us to juggle from the positive number to the negative complement, ensuring we return the correct answer.\\n\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n\\n        mask = 0b11111111111111111111111111111111       \\n        MAX =  0b01111111111111111111111111111111\\n        \\n        if b == 0:\\n            return a if a <= MAX else ~(a ^ mask)\\n        \\n        return self.getSum(\\n            (a ^ b) & mask,\\n            ((a & b) << 1) & mask\\n        )\\n```\\n\\nI hope this post has helped explain the python solution a tiny bit better!\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef getSum(a, b):\\n\\tif b == 0: return a\\n\\treturn getSum(a ^ b, (a & b) << 1)\\n```\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n\\n        mask = 0b11111111111111111111111111111111       \\n        MAX =  0b01111111111111111111111111111111\\n        \\n        if b == 0:\\n            return a if a <= MAX else ~(a ^ mask)\\n        \\n        return self.getSum(\\n            (a ^ b) & mask,\\n            ((a & b) << 1) & mask\\n        )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 500457,
                "title": "detailed-explanation-bit-manipulation-and-binary-arithmetic-java-code",
                "content": "# Bitwise Operators:\\n* XOR: ^\\n* And: &\\n* Left Shift: << n  (Shifts a binary value n digits to the left by adding zeros at the end.\\n\\nConceptual: We first need to come up with a variable called carry. Carry will record the component of the addition that needs to be shifted. Here is an example\\n\\n**First, let\\'s look at what happens when we add binary digits that are identical to one another:**\\n* adding 111 + 111 will result in 1110 // 7 + 7 = 14\\n* adding 1100 + 1100 = 11000  //12 + 12 = 24\\n* adding 101 + 101 = 1010 //5 + 5 = 10\\nWe can logically reduce adding identical binary digits using the left shift operator. This means that for any identical binary digits a, and b the sum will always be a << 1 which is the same as b << 1\\n\\n**Let\\'s Look at adding Binary Digits that are opposites of each other**\\n* 101 + 010 = 111 //\\n* 1001 + 0110 = 1111 // \\nWe can see that adding binary digits that are the opposites of each other are as simpl as taking\\na XOR b which gives us the answer.\\n\\nSo the task of this question is to simply separate the identical components of the two digits with the complementary components. Shift the identical component to the left by one. Then add it to the separate component.\\n\\nThis is accomplished with the following code\\n\\n```\\npublic sum(int a, int b) {\\n\\twhile (b != 0) {\\n\\t//filter out identical component\\n\\tint carry = a & b;\\n\\t//filter out complementary component\\n\\ta = a ^ b;\\n\\t\\n\\t//shift b to the left the common components. and assign it to b\\n\\t//on the next iteration there will be fewer and fewer common components\\n\\t//and gradually b will converge to 0 conce we have shifted the integer left \\n\\t//the appropriate amount of times. \\n\\tb = carry << 1;\\n\\t}\\n\\treturn a;\\n}\\n```\\n\\n\\n\\n\\n",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\npublic sum(int a, int b) {\\n\\twhile (b != 0) {\\n\\t//filter out identical component\\n\\tint carry = a & b;\\n\\t//filter out complementary component\\n\\ta = a ^ b;\\n\\t\\n\\t//shift b to the left the common components. and assign it to b\\n\\t//on the next iteration there will be fewer and fewer common components\\n\\t//and gradually b will converge to 0 conce we have shifted the integer left \\n\\t//the appropriate amount of times. \\n\\tb = carry << 1;\\n\\t}\\n\\treturn a;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3332531,
                "title": "two-approaches-math-and-bit-manipulation-detailed-explanation",
                "content": "# Math Approach\\nWe will use the formula for the logarithm of the product of two numbers, so we can get our plus.\\n$$ln(a * b) = ln(a) + ln(b)$$\\n\\nNow we have to get the numbers a and b.\\nWe can get these numbers from the formula, where instead of n we can substitute a or b.\\n$$ln(exp^n) = n*ln(exp) = n$$\\n\\nAs a result we get the formula\\n$$ln(exp^a * exp^b) = ln(exp^a) + ln(exp^b) = a(ln(exp)) + b(ln(exp)) = a + b$$\\n\\n- Note: any other basis can be used instead of the natural algorithm\\n\\n# The complexity of both approaches\\n- Time: $$O(1)$$\\n- Space: $$O(1)$$\\n\\n# Math code\\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        return log2(std::pow(2, a) * std::pow(2, b));\\n    }\\n};\\n```\\n# Bit manipulation approach\\nLet\\'s look at an example:\\n14 - 0 1110\\n03 - 0 0011\\n17 - 1 0001\\n\\nBits 0 0, 1 0, 0 1 we can add freely, but there is a problem. For example 1 1 because we need to move the bit to the next digit.\\n\\nFirst we can trace all such bits with bitwise AND, if we end up with 0 we can use bitwise XOR to add 2 our numbers and return the answer.\\n\\n1. In our case, we will get 10 (in binary) and write it to the buffer.\\n2. We add our 2 numbers 1110 ^ 0011 = 1101\\n3. Assign the number b to a buff shift of 1, since we will later sum the buff with our number a. We need this shift in order to add ones to the next most significant digits.\\n4. Repeat until there are no more bits to be shifted, i.e. our buffer will contain only zeros.\\n\\n```\\nIteration 1:\\nbuff = 1110 & 11 = 10\\na = 1110 ^ 0011 = 1101\\nb = 100\\n\\nIteration 2:\\nbuff = 1101 & 100 = 100\\na = 1101 ^ 100 = 1001\\nb = 1000\\n\\nIteration 3:\\nbuff = 1001 & 1000 = 1000\\na = 1001 ^ 1000 = 1\\nb = 1 0000\\n\\nIteration 4:\\nbuff = 1 & 1 0000 = 0\\na = 1 ^ 1 0000 = 1 0001\\nb = 0\\n\\nend: answer 17\\n```\\n##### Explanation of unsigned int data type\\n\\nSince the last bit of int is used to determine the sign, the << operation shifts it, which causes undefined compiler behavior.\\nSo LeetCode gives an error. unsigned int solves this problem\\n\\n\\n# Bit manipulation code\\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        unsigned int buff;\\n        do {\\n            buff = a & b;\\n            a ^= b;\\n            b = buff << 1;\\n        } while(buff);\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        return log2(std::pow(2, a) * std::pow(2, b));\\n    }\\n};\\n```\n```\\nIteration 1:\\nbuff = 1110 & 11 = 10\\na = 1110 ^ 0011 = 1101\\nb = 100\\n\\nIteration 2:\\nbuff = 1101 & 100 = 100\\na = 1101 ^ 100 = 1001\\nb = 1000\\n\\nIteration 3:\\nbuff = 1001 & 1000 = 1000\\na = 1001 ^ 1000 = 1\\nb = 1 0000\\n\\nIteration 4:\\nbuff = 1 & 1 0000 = 0\\na = 1 ^ 1 0000 = 1 0001\\nb = 0\\n\\nend: answer 17\\n```\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        unsigned int buff;\\n        do {\\n            buff = a & b;\\n            a ^= b;\\n            b = buff << 1;\\n        } while(buff);\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2562077,
                "title": "beginner-level-explanation-with-code",
                "content": "Now we can not use the `+` operator, which means it is obvious that we have to use some sort of **bit manupulation**. But the real question is **how?** \\nThe ans lies within the procedure of the addition, which I am going to show you below.\\n\\nfrom binary level, how do we exactly add two numbers, let us see -->\\n\\n```\\n         _\\na = 2 = 010\\nb = 3 = 011\\n------------\\nc = 5 = 101\\n```\\n\\nIn the position, where we have a dash above, there we are generating a carry, which will be carried over to the next bit, and added to that next bit. So, the addition pattern goes like - \\n\\n```\\n  0         0         1         1\\n+ 0        +1       + 0       + 1\\n----      ----      ----      ----\\n  0         1         1         0 (with a carry 1)\\n```\\n\\nIs this pattern similar to you? Have you seen this in the XOR table? Let\\'s see the XOR table quickly - \\n\\n```\\na b | XOR\\n- - | - -\\n0 0 | 0\\n0 1 | 1\\n1 0 | 1\\n1 1 | 0\\n```\\n\\nThese are the exact same, hence for addition, we need to use the XOR operator. But what to do with the carry? Hey, **we need to add that carry to the next bit**, right? That is what we have seen in the implementation of the addition as well. We will do that only, but we can NOT use addition anyway.\\nBut, before that, let\\'s do the **XOR** for `2` and `3` example.\\n\\n```\\n-- Doing only XOR --\\na = 2 = 010\\nb = 3 = 011\\n------------\\nc = 1 = 001\\n```\\n\\n`1` is NOT our answer, and in this procedure, we have left the carry out, which is `100`. Now what\\'s the pattern for finding the carry? It is after we AND the two numbers, we will LEFT-SHIFT the result by 1. Didn\\'t get it?\\n\\n```\\n-- Doing only AND --\\na = 2 = 010\\nb = 3 = 011\\n------------\\nc = 2 = 010\\n-----------\\nDoing Left-Shift by 1 (<<1)\\n-----------\\nc = 4 = 100\\n```\\n\\nSo, we found out the carry as well, and believe me or not, but it is the entire Algorithm. You have to repeat the steps of **1. XOR** and **2. AND with Left-Shift**, until the step no 2. becomes 0, and you will have your answer.\\n\\nExample - \\n\\n```\\na = 2 = 010\\nb = 3 = 011\\n-----------\\nx = 1 = 001 = a\\nc = 4 = 100 = b\\n-----------\\nx = 5 = 101\\nc = 0 = 000\\n\\nx = XOR & c = AND with Left-Shift\\n```\\n\\nSince carry becomes 0, hence our answer is the XOR result = 5.\\n\\nBelow is the working code for the same, and you can run this code to find the desired answer.\\n\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b != 0){\\n            int temp = (a&b)<<1;\\n            a = a ^ b;\\n            b = temp;\\n        }\\n        return a;\\n    }\\n}\\n```\\n\\n**Time Complexity: O(1)**\\n**Space Complexity: O(1)**\\n\\nTime is O(1), because the max and min bounds are 1000 and -1000 respectively, which means the input will NOT be arbitrarily large, and it will be in the limits, hence the time will be constant.\\n\\nThe code for `c` and `c++` will be very similar, and `python` will be a little different. If you like this approach, then please give me a thumbs up.\\n\\n# GitHub\\nYou can find the code and the entire explanation [here](https://github.com/ShuvamChatterjee28/Algorithms/tree/main/Sum%20of%20Two%20Integers).\\nIf you want see the other problem and their algorithms, then go [here](https://github.com/ShuvamChatterjee28/Algorithms).\\n\\nThanks & Happy Coding :)",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n         _\\na = 2 = 010\\nb = 3 = 011\\n------------\\nc = 5 = 101\\n```\n```\\n  0         0         1         1\\n+ 0        +1       + 0       + 1\\n----      ----      ----      ----\\n  0         1         1         0 (with a carry 1)\\n```\n```\\na b | XOR\\n- - | - -\\n0 0 | 0\\n0 1 | 1\\n1 0 | 1\\n1 1 | 0\\n```\n```\\n-- Doing only XOR --\\na = 2 = 010\\nb = 3 = 011\\n------------\\nc = 1 = 001\\n```\n```\\n-- Doing only AND --\\na = 2 = 010\\nb = 3 = 011\\n------------\\nc = 2 = 010\\n-----------\\nDoing Left-Shift by 1 (<<1)\\n-----------\\nc = 4 = 100\\n```\n```\\na = 2 = 010\\nb = 3 = 011\\n-----------\\nx = 1 = 001 = a\\nc = 4 = 100 = b\\n-----------\\nx = 5 = 101\\nc = 0 = 000\\n\\nx = XOR & c = AND with Left-Shift\\n```\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b != 0){\\n            int temp = (a&b)<<1;\\n            a = a ^ b;\\n            b = temp;\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1512422,
                "title": "simple-solution-using-exponents-and-log-faster-then-92",
                "content": "# Exponent and Log Solution\\n\\nI wanted to submit a different solution compared to all the other bit manipulation ones. (which I do suggest you check out )\\n\\n**Step 1:**\\nThe logic is simple first we use the **Exponent Rule of Multiplication** which states:\\n\\n&nbsp;&nbsp;&nbsp;&nbsp; ![image](https://assets.leetcode.com/users/images/66d4ebde-04eb-4da0-b007-48fcc64a6768_1633787067.6651442.png)\\n \\n Lets call the two numbers we need to add *num1* and *num2*.\\n Therefore as long as we use the same base, we can raise that common base to *num1* and *num2* and multiply them.\\n In this code I have chosen the common base of 2 but you can choose any number.\\n \\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**2<sup> *num1*</sup> x 2<sup> *num2*</sup> = 2<sup> *num1 + num2* </sup>**\\n\\nLets call this result *product*.\\n\\n**Step 2:**\\nNext we use the **Log of Exponent Rule** (Logarithm of a Base to a Power Rule), which states\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**log<sub>a</sub>(a<sup>*n*</sup> ) = n**\\n  \\n  In our case we take log base 2 of *product* which gives us the sum of  *num1* and *num2* .\\n\\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**log<sub>2</sub>(2<sup> *(num1 + num2)* </sup> ) = *num1 + num2***\\n  \\n  And that is the final answer.\\n  \\n  \\n  \\n\\n\\n\\n```\\nimport math\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        #raises 2 to the power a\\n        fact1=math.pow(2,a)\\n        #raises 2 to the power b\\n        fact2=math.pow(2,b)\\n        #by multiplying the 2 factors, the powers gets added\\n        #ie, 2^(a+b)\\n        prod=fact1*fact2\\n        \"\"\"\\n         here we use the Log of Exponent Rule \\n            -> log2(2^(a+b)) = a+b\\n         \"\"\"\\n        ans=math.log2(prod)\\n        return int(ans)                                      \\n```\\n\\nLet me know if there is any way to make this more efficent.",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nimport math\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        #raises 2 to the power a\\n        fact1=math.pow(2,a)\\n        #raises 2 to the power b\\n        fact2=math.pow(2,b)\\n        #by multiplying the 2 factors, the powers gets added\\n        #ie, 2^(a+b)\\n        prod=fact1*fact2\\n        \"\"\"\\n         here we use the Log of Exponent Rule \\n            -> log2(2^(a+b)) = a+b\\n         \"\"\"\\n        ans=math.log2(prod)\\n        return int(ans)                                      \\n```",
                "codeTag": "Java"
            },
            {
                "id": 339735,
                "title": "c-100-faster-solution-with-0ms-runtime",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\nif (b==0) return a;\\n\\tint sum = a^b; // finding the sum\\n\\tint carry = (unsigned int)(a & b)<<1; // finding the carry\\n\\treturn getSum(sum, carry);\\n}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\nif (b==0) return a;\\n\\tint sum = a^b; // finding the sum\\n\\tint carry = (unsigned int)(a & b)<<1; // finding the carry\\n\\treturn getSum(sum, carry);\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2754531,
                "title": "c-easiest-100-fastest",
                "content": "```\\nint getSum(int a, int b) {\\n        return a+b;\\n    }\\n```\\n\\n![image](https://assets.leetcode.com/users/images/c9c59ac5-38da-47b3-bc6b-1869b6fe17d8_1667021050.8605294.png)\\n\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint getSum(int a, int b) {\\n        return a+b;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 84410,
                "title": "python-solution",
                "content": "Python code as follows:\\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        MAX_INT = 0x7FFFFFFF\\n        MIN_INT = 0x80000000\\n        MASK = 0x100000000\\n        while b:\\n            a, b = (a ^ b) % MASK, ((a & b) << 1) % MASK\\n        return a if a <= MAX_INT else ~((a % MIN_INT) ^ MAX_INT)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        MAX_INT = 0x7FFFFFFF\\n        MIN_INT = 0x80000000\\n        MASK = 0x100000000\\n        while b:\\n            a, b = (a ^ b) % MASK, ((a & b) << 1) % MASK\\n        return a if a <= MAX_INT else ~((a % MIN_INT) ^ MAX_INT)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1406404,
                "title": "best-python-solution-with-easy-explanation-bit-manipulation",
                "content": "1. Assuming you understood the bit manipulation method in other languages.\\n2. The solution in Python is different than other languages because in Python it considers the unlimited length of integers whereas in other languages integers has fixed length of 32-bit. \\n3. If we perform the normal bit manipulation solution in python then the loop runs for infinite times as integers are not fixed to 32-bit. To avoid this in python we use a MASK 0xffffffff to keep the integer in 32-bits.\\n4. At last we have conditions to return the value because especially for negative integers we have to first calculate the two\\'s complement of the returning number. But only ~a will flip infinite bits of a and hence we have  limit it in 32-bit using MASK. Thus we xor a with mask and finally return ~(a^MASK).\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        MASK = 0xffffffff\\n        while b:\\n            carry = a&b\\n            a = (a ^ b) & MASK\\n            b = (carry << 1) & MASK\\n            \\n        if (a>>31) & 1:\\n            return ~(a^MASK)\\n        return a\\n```",
                "solutionTags": [
                    "Python",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        MASK = 0xffffffff\\n        while b:\\n            carry = a&b\\n            a = (a ^ b) & MASK\\n            b = (carry << 1) & MASK\\n            \\n        if (a>>31) & 1:\\n            return ~(a^MASK)\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1564265,
                "title": "java-1-liner-0-ms-explained",
                "content": "**Idea:** [Half Adder](https://en.wikipedia.org/wiki/Adder_(electronics)#Half_adder)\\n* Using HA logic, add a and b bitwise\\n* sum(a, b) = a `XOR` b and carry generated = a `AND` b\\n* Add this sum to the carry to get the total sum.\\n* Do this recursively till carry reduces to 0\\n> **T/S:** O(1)/O(1)\\n\\n**Variation 1:** Recursive\\n```\\npublic int getSum(int a, int b) {\\n\\treturn (b == 0) ? a : getSum(a ^ b, (a & b) << 1);\\n}\\n```\\n\\n**Variation 2:** Iterative\\n```\\npublic int getSum(int a, int b) {\\n\\twhile (b != 0) {\\n\\t\\tvar carry = a & b;\\n\\t\\ta ^= b;\\n\\t\\tb = carry << 1;\\n\\t}\\n\\treturn a;\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```\\npublic int getSum(int a, int b) {\\n\\treturn (b == 0) ? a : getSum(a ^ b, (a & b) << 1);\\n}\\n```\n```\\npublic int getSum(int a, int b) {\\n\\twhile (b != 0) {\\n\\t\\tvar carry = a & b;\\n\\t\\ta ^= b;\\n\\t\\tb = carry << 1;\\n\\t}\\n\\treturn a;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 427063,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {number} a\\n * @param {number} b\\n * @return {number}\\n */\\nvar getSum = function(a, b) {\\n    let carry;\\n    \\n    while(b) {\\n        carry = a & b;\\n        a ^= b;\\n        b = carry << 1;\\n    }\\n    \\n    return a;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} a\\n * @param {number} b\\n * @return {number}\\n */\\nvar getSum = function(a, b) {\\n    let carry;\\n    \\n    while(b) {\\n        carry = a & b;\\n        a ^= b;\\n        b = carry << 1;\\n    }\\n    \\n    return a;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 325575,
                "title": "c-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        while (b != 0)  \\n        {  \\n\\n            int carry =  a & b;  //All 1s in carry will represent positions \\n                                 //where addition will result in to carry\\n\\n            a = a ^ b;  //sum of a and b without considering carry\\n\\n            b = (unsigned int)carry << 1;  //typecasting to handle negative number \\n                                           //<< 1will shift the carry bits to       \\n                                           //the position where these bits are to be added.\\n        }  \\n        return a;  \\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        while (b != 0)  \\n        {  \\n\\n            int carry =  a & b;  //All 1s in carry will represent positions \\n                                 //where addition will result in to carry\\n\\n            a = a ^ b;  //sum of a and b without considering carry\\n\\n            b = (unsigned int)carry << 1;  //typecasting to handle negative number \\n                                           //<< 1will shift the carry bits to       \\n                                           //the position where these bits are to be added.\\n        }  \\n        return a;  \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 651500,
                "title": "java-solution-beats-100-using-bit-manipulation-and-xor-left-shift-with-helpful-video",
                "content": "Runtime: 0 ms, faster than 100.00% of Java online submissions for Sum of Two Integers.\\nMemory Usage: 36.2 MB, less than 6.67% of Java online submissions for Sum of Two Integers.\\n\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b != 0){\\n            int carry = a & b;\\n            a = a ^ b;\\n            b = carry << 1;\\n        }\\n        return a;\\n    }\\n}\\n```\\n\\nFor explaination video, you can refer : \\n1. https://www.youtube.com/watch?v=qq64FrA2UXQ&list=PLPH4qLekBfwk7TiRjOfg2DhRL3vqMTwFZ&index=6&t=0s\\n2. https://www.***.org/add-two-numbers-without-using-arithmetic-operators/\\n\\nHope you find this useful :)",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b != 0){\\n            int carry = a & b;\\n            a = a ^ b;\\n            b = carry << 1;\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 316237,
                "title": "python3-solution",
                "content": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        \\n        mask = 0xffffffff\\n        \\n        while b & mask:\\n            carry = a & b\\n            a = a ^ b\\n            b = carry << 1\\n        \\n        # for overflow condition like\\n        # -1\\n        #  1\\n        return (a & mask) if b > mask else a\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        \\n        mask = 0xffffffff\\n        \\n        while b & mask:\\n            carry = a & b\\n            a = a ^ b\\n            b = carry << 1\\n        \\n        # for overflow condition like\\n        # -1\\n        #  1\\n        return (a & mask) if b > mask else a\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84293,
                "title": "a-simple-3-line-solution-with-bit-manipulation-and-recursion",
                "content": "# Explanation\\n\\nImagine we are doing addition in binary. We can break it into 3 parts:\\n\\n* calculate every bit correspondingly and find what remains\\n* if it exceeds, bring it to next bit as a carry\\n* add remain and carry, which we can do recursively\\n\\nFor example,\\n\\n7 + 5 =\\n\\n0 0 1 1 1\\n0 0 1 0 1\\n__----------__\\n0 0 0 1 0    -----> remain = a xor b\\n0 1 0 1 0    -----> carry = (a and b) << 1\\n__----------__   -----> another addition\\n0 1 0 0 0\\n0 0 1 0 0\\n__----------__\\n0 1 1 0 0\\n\\nSo answer is pretty trivial, we do first 2 steps and invoke the method again using the results of previous steps as arguments.\\n\\n# Solution\\n\\nHere is the code\\n```\\npublic static int getSum(int a, int b) {\\n  if (a == 0) return b;\\n  if (b == 0) return a;\\n  return getSum(a ^ b, (a & b) << 1);\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation",
                    "Recursion"
                ],
                "code": "```\\npublic static int getSum(int a, int b) {\\n  if (a == 0) return b;\\n  if (b == 0) return a;\\n  return getSum(a ^ b, (a & b) << 1);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1713798,
                "title": "sum-of-two-integers-in-c-easiest-approach-interview-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        while(b!=0){\\n            unsigned carry=a&b;\\n            a=a^b;\\n            b=carry<<1;\\n        }\\n        return a;\\n    }\\n    \\n};\\n```\\n\\n*If you like the code, do give an upvote!*",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        while(b!=0){\\n            unsigned carry=a&b;\\n            a=a^b;\\n            b=carry<<1;\\n        }\\n        return a;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3297819,
                "title": "python3-math-solution-with-explanation",
                "content": "The main idea is the school formulas for the logarithm: \\n1) ![image](https://assets.leetcode.com/users/images/c54c9f7a-a9e9-4b8d-86f7-f863da69bb4c_1678824195.7158313.png)\\n2) ![image](https://assets.leetcode.com/users/images/4b423b87-c359-4f0b-9924-4088850a054a_1678824253.0071406.png)\\n\\n\\nThe first gives us the opportunity to get the sum of the logarithms of numbers, and the second to get the numbers themselves directly.\\nmath.log(x) method returns the natural logarithm of a number, or the logarithm of number to base math.log(x, base).\\nOnce there were about 15 testcases for this task and there were no problems with zeros. So now I had to add a couple of conditions for such cases.\\n\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        if a == 0 and b != 0:\\n            return b\\n        elif b == 0 and a != 0:\\n            return a\\n        \\n        return int(log(exp(a) * exp(b)))\\n```\\n\\nor even shorter:\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(log(exp(a) * exp(b))) if a != 0 and b != 0 else a or b\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        if a == 0 and b != 0:\\n            return b\\n        elif b == 0 and a != 0:\\n            return a\\n        \\n        return int(log(exp(a) * exp(b)))\\n```\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(log(exp(a) * exp(b))) if a != 0 and b != 0 else a or b\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2511049,
                "title": "c-explanation-keeping-it-simple-0ms-faster-than-100",
                "content": "> #### Problem \\n> Given two integers a and b, return the sum of the two integers without using the operators + and -.\\n\\nCan\\'t use `+` or `-`, fine! We will go old school. \\nMachines have everything binary, they don\\'t have leverage of using these operators. So how they do it? ..... By **Bit Manipulation**\\nMachines operate on every bit of both integers and calculate their bit by bit result. So let\\'s see how they actually \"add\" two bits:\\n![image](https://assets.leetcode.com/users/images/68ba4a03-5a55-4273-9f2d-b781bb52b672_1661977803.5768507.png)\\n\\n\\nA good observation will reveal that sum here is nothing but bitwise **XOR** and carry is bitwise **AND**.\\nThis is good. We have calculated our first result bit. Now for next bit we need to add bits from **a**, **b** & **carry** (carry of our previous addition). How would we add three bits now? \\nLet\\'s observe again how machines do it.\\n![image](https://assets.leetcode.com/users/images/778220f3-6cd1-4aae-bb80-adb439c84b00_1661978389.1628165.png)\\n\\nHere sum is **XOR** of the three operands, but the carry bit in result is little twisted. It is `=1` only when operands have 2 or more set bits. Which can be formulated as `result carry bit = x\\u22C5y + y\\u22C5c + c\\u22C5x`, where x and y are respective bits of integers `a` and `b`, and c is prev carry bit, our third operand.\\n\\nNow, we have our formulas in place let\\'s jot them down in code.\\n<iframe src=\"https://leetcode.com/playground/L9vwLRTw/shared\" frameBorder=\"0\" width=\"600\" height=\"300\"></iframe>\\n\\n**Notes:**\\n1. Right shifting integers `a`  and `b` because we have to access integer bit-by-bit.\\n2. The `carry` variable in my code is reused as `prev carry bit` in next operation.\\n3. The loop runs 32 times, because given integer limit works with 32 bit sized integers. You can change it accordingly.  \\n\\nThanks!",
                "solutionTags": [
                    "C++",
                    "C",
                    "Bit Manipulation"
                ],
                "code": "> #### Problem \\n> Given two integers a and b, return the sum of the two integers without using the operators + and -.\\n\\nCan\\'t use `+` or `-`, fine! We will go old school. \\nMachines have everything binary, they don\\'t have leverage of using these operators. So how they do it? ..... By **Bit Manipulation**\\nMachines operate on every bit of both integers and calculate their bit by bit result. So let\\'s see how they actually \"add\" two bits:\\n![image](https://assets.leetcode.com/users/images/68ba4a03-5a55-4273-9f2d-b781bb52b672_1661977803.5768507.png)\\n\\n\\nA good observation will reveal that sum here is nothing but bitwise **XOR** and carry is bitwise **AND**.\\nThis is good. We have calculated our first result bit. Now for next bit we need to add bits from **a**, **b** & **carry** (carry of our previous addition). How would we add three bits now? \\nLet\\'s observe again how machines do it.\\n![image](https://assets.leetcode.com/users/images/778220f3-6cd1-4aae-bb80-adb439c84b00_1661978389.1628165.png)\\n\\nHere sum is **XOR** of the three operands, but the carry bit in result is little twisted. It is `=1` only when operands have 2 or more set bits. Which can be formulated as `result carry bit = x\\u22C5y + y\\u22C5c + c\\u22C5x`, where x and y are respective bits of integers `a` and `b`, and c is prev carry bit, our third operand.\\n\\nNow, we have our formulas in place let\\'s jot them down in code.\\n<iframe src=\"https://leetcode.com/playground/L9vwLRTw/shared\" frameBorder=\"0\" width=\"600\" height=\"300\"></iframe>\\n\\n**Notes:**\\n1. Right shifting integers `a`  and `b` because we have to access integer bit-by-bit.\\n2. The `carry` variable in my code is reused as `prev carry bit` in next operation.\\n3. The loop runs 32 times, because given integer limit works with 32 bit sized integers. You can change it accordingly.  \\n\\nThanks!",
                "codeTag": "Unknown"
            },
            {
                "id": 1083170,
                "title": "java-100-faster-5-line-easy-solution-with-clear-explanation",
                "content": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        \\n        //Iterate till there is no carry OR till the value of \\'b\\' is 0.\\n        //Example SUM: 1 + 2\\n        while( b != 0){\\n            \\n            //Carry is calculated by Bitwise AND (&) Operation.\\n            /* Binary Value of 1 -> 0001\\n               Binary Value of 2 -> 0010\\n      Bitwise (&) operator gives -> 0000  -> which is a Binary Equivalent of 0.\\n      For an (&) Operator, if both the bits are 1 it gives 1 or else 0. So evidently the result is 0000.\\n            */\\n            int carry = a & b;\\n            \\n            //Now calculate the sum of the 2 numbers where Bitwise X0R (^) indicates (+) addition.\\n             a ^= b; // -> equivalent to   a=a+b, a=a^b, \\n            \\n            //so, now sum would be 3, which is the value of a.\\n\\t\\t\\t\\n\\t\\t\\t\\n            /*Shift carry by 1 if it is not 0, so adding to \\'a\\' gives the required sum.\\n\\t\\t    To be more precise (<<) left shift operator shifts the bits of the number to left\\n\\t\\t\\tYou can image this effect as of multiplying the number(carry) with power of 2^1.\\t\\n\\t\\t    Consider this equation to be an equivalent of b = carry * 2^1 = 0.  [FOR THE EXAMPLE SUM 1+2]\\n\\t\\t\\tAs, carry is 0 so, b would also become 0, we end the loop and return \"a\" where we have the \"sum\"\\n\\t\\t\\t*/\\n            b = carry << 1;  // This line of code can also be written as  b = carry  * (int)Math.pow(2,1); WORKS.\\n        }\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        \\n        //Iterate till there is no carry OR till the value of \\'b\\' is 0.\\n        //Example SUM: 1 + 2\\n        while( b != 0){\\n            \\n            //Carry is calculated by Bitwise AND (&) Operation.\\n            /* Binary Value of 1 -> 0001\\n               Binary Value of 2 -> 0010\\n      Bitwise (&) operator gives -> 0000  -> which is a Binary Equivalent of 0.\\n      For an (&) Operator, if both the bits are 1 it gives 1 or else 0. So evidently the result is 0000.\\n            */\\n            int carry = a & b;\\n            \\n            //Now calculate the sum of the 2 numbers where Bitwise X0R (^) indicates (+) addition.\\n             a ^= b; // -> equivalent to   a=a+b, a=a^b, \\n            \\n            //so, now sum would be 3, which is the value of a.\\n\\t\\t\\t\\n\\t\\t\\t\\n            /*Shift carry by 1 if it is not 0, so adding to \\'a\\' gives the required sum.\\n\\t\\t    To be more precise (<<) left shift operator shifts the bits of the number to left\\n\\t\\t\\tYou can image this effect as of multiplying the number(carry) with power of 2^1.\\t\\n\\t\\t    Consider this equation to be an equivalent of b = carry * 2^1 = 0.  [FOR THE EXAMPLE SUM 1+2]\\n\\t\\t\\tAs, carry is 0 so, b would also become 0, we end the loop and return \"a\" where we have the \"sum\"\\n\\t\\t\\t*/\\n            b = carry << 1;  // This line of code can also be written as  b = carry  * (int)Math.pow(2,1); WORKS.\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 505996,
                "title": "just-use-stl",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        vector<int> v{a,b};\\n        return accumulate(begin(v),end(v),0);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        vector<int> v{a,b};\\n        return accumulate(begin(v),end(v),0);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2857980,
                "title": "python-95-20-faster-bit-manipulation-o-1-solution",
                "content": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        f=0\\n        if a<0 and b<0:\\n            f=1\\n        mask=0xffffffff\\n        add=a^b\\n        carry=(a&b)<<1\\n        while carry!=0:\\n            add,carry=(add^carry)&mask,((add&carry)<<1)&mask\\n        if f:\\n            return ~(add^mask)\\n        return add       \\n```\\n\\n**An upvote will be encouraging**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        f=0\\n        if a<0 and b<0:\\n            f=1\\n        mask=0xffffffff\\n        add=a^b\\n        carry=(a&b)<<1\\n        while carry!=0:\\n            add,carry=(add^carry)&mask,((add&carry)<<1)&mask\\n        if f:\\n            return ~(add^mask)\\n        return add       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2225341,
                "title": "5-interesting-solutions-python",
                "content": "```\\n#-------------------------------------------------------\\n# Range Limiting Method --> Accepted Solution.\\n#-------------------------------------------------------\\nclass Solution(object):\\n    def getSum(self, a: int, b: int) -> int:\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        # 32 bits integer max\\n        MAX = 0x7FFFFFFF\\n        # 32 bits interger min\\n        MIN = 0x80000000\\n        # mask to get last 32 bits\\n        mask = 0xFFFFFFFF\\n        while b != 0:\\n            # ^ get different bits and & gets double 1s, << moves carry\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\\n        # if a is negative, get a\\'s 32 bits complement positive first\\n        # then get 32-bit positive\\'s Python complement negative\\n        return a if a <= MAX else ~(a ^ mask)\\n\\n\\n\\n#-------------------------------------------------------\\n#       Memory Limit Exceeded Solution.\\n#-------------------------------------------------------\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        if b == 0:\\n            return a\\n        else:\\n            return self.getSum(a ^ b, (a & b) << 1)\\n\\t\\t\\t\\n\\n#-------------------------------------------------------\\n#       Time Limit Exceeded Solution.\\n#-------------------------------------------------------\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        carry = 0\\n        while b != 0:\\n            carry = a & b\\n            a = a ^ b\\n            b = carry << 1\\n        return a\\n\\n\\n#-------------------------------------------------------\\n#       Joke LoopHole Solution.\\n#-------------------------------------------------------\\nclass Solution(object):\\n\\tdef getSum(self, a: int, b: int) -> int:\\n\\t\\t\"\"\"\\n\\t\\t:type a: int\\n\\t\\t:type b: int\\n\\t\\t:rtype: int\\n\\t\\t\"\"\"\\n\\t\\tlist=[a,b]\\n\\t\\treturn sum(list)\\n```\\n\\n**Most Time Efficient Solution**\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        \\'\\'\\'\\n            Problem: We want to add 2 numbers without using the + or -\\n                     operators.\\n            \\n            Solution: We can use bit-wise manipulation but\\n                     we need to write down all the possible cases:\\n                        a: +  b: +  \\n                        a: -  b: -\\n                        a: +  b: - \\n                        b: -  b: +\\n                    \\n                    For all problems:\\n                        1. We automatically do all our calculations with abs(a) and abs(b)\\n                            a, b = abs(a), abs(b)\\n                        2. We always ensure that abs(a) < abs(b), otherwise we switch a/b\\n                        \\n                    SubProblem - 1: a + b\\n                        We can use the algorithm in I, where we contiously update sumNoCarry and carry\\n                        until carry = 0.\\n                        \\n                         while carry = 0      \\n                            sumNoCarry = a & b            =   a + b (w/o carry)\\n                            carry = (a ^ b) << 1          =   carry       \\n                            a, b = sumNoCarry, carry      =   a + b + carry\\n                \\n                            \\n                    SubProblem-2: -a + (-b)\\n                        We can use the algorithm in I, where we contiously update sumNoCarry and carry\\n                        until carry = 0. Because python keeps track of negative indices\\n                    \\n                    SubProblem-3 & SubProblem-4: a - b  OR  b - a\\n                        If we have subtraction, we use borrow instead, where we use NOT to invert the given number\\n                        while borrow = 0\\n                            sumNoBorrow = a & b         = a - b (w/o carry)\\n                            borrow = (~a * b) << 1      = borrow\\n                            a, b, = sumNoBorrow, borrow = a - b + borrow\\n            \\n            Time: O(1) because each integer contains 32 bits.\\n            Space: O(1) because we don\\'t use any additional data structures.\\n                        \\n            WhiteBoard:\\n                I: a * b > 0    [+a,+b] OR [-a, -b]\\n                \\n                    --- iteration 1 ---\\n                    a = 15          01111 \\n                    b = 2           00010   \\n                    a + b = 17      10001       [SOLUTION]\\n                    a ^ b           01101        = sum w/o carry (a)\\n                    a & b           00010        \\n                    (a&b) << 1      00100        = carry (b)\\n\\n\\n                    Solution = (a^b) + ((a&b) << 1) = (01101 + 00100) = 10101\\n                        The sub-problem is the same as the problem, so we can use a loop\\n                        The base-case would be when our carry = 0\\n\\n                    --- iteration 2 ---\\n                    a =  x & y           01101   = 13   \\n                    b = (x&y) << 1       00100   = 4\\n\\n                    x = 13      01101\\n                    y = 4       00100\\n                    x^y         01001       = sum w/o carry(a)\\n                    x&y         00100\\n                    (x^y)<<1    01000       = carry (b)\\n                \\n                    \\n                    --- iteration 3 ---\\n                    a =  x & y           01001   = 9  \\n                    b = (x&y) << 1       01000   = 8\\n\\n                    x = 9       01001\\n                    y = 8       01000\\n                    x^y         00001       = sum w/o carry(a)\\n                    x&y         01000\\n                    (x^y)<<1    10000       = carry (b)\\n                    \\n                      --- iteration 3 ---\\n                    a =  x & y           00001   = 1\\n                    b = (x&y) << 1       10000   = 16\\n                    \\n                    x = 16      00001\\n                    y = 4       10000\\n                    x^y         10001       = sum w/o carry(a)\\n                    (x^y)<<1    00000       = carry (b)\\n                    \\n                    carry = 0, so we return 10001 = 10101 = 17\\n                 \\n                II: a * b < 0    [-a,+b] OR [a, -b]\\n                    --- iteration 1 ---\\n                    a = -16      1..10000   MSB = flag for +/-\\n                    b = 15          01111 \\n                    a + b = 13   1..00001       [SOLUTION]\\n                    a = abs(a)      10000\\n                    a ^ b           11111   =  31 <-------------- SUM W/O CARRY ---\\n                    ~a =         1..10001   = -17\\n                       =         0..01110     <-- 1. Flipped\\n                       =         0..01111     <-- 2. Add 1\\n                    (~a&b)       0..01111   =  15  \\n                    (~a&b)<<1       11110   = 15 * 2^2 = 30   <---- CARRY ----\\n                    \\n                     --- iteration 2 ---\\n                    a =  a ^ b           011111   = 31 \\n                    b = (~a&b) << 1      011110   = 30\\n                    a ^ b                000001   = 1\\n                    ~a                0..100000   = -32\\n                                      1..011111   <-- Flip\\n                                      1..100000   <-- Add 1\\n                    (~a & b)                0\\n                    \\n                        return -1\\n                    \\n                                    \\n                0b10001\\n                0b01111\\n                  1111\\n\\n                    Solution = (a^b) + ((a&b) << 1) = (01101 + 00100) = 10101\\n                        The sub-problem is the same as the problem, so we can use a loop\\n                        The base-case would be when our carry = 0\\n\\n\\n                \\n            \\n        \\'\\'\\'\\n        # 0. Get the absolutes values of both numbers\\n        absA, absB = abs(a), abs(b)\\n        \\n        # 1. Ensure that abs(a) >= abs(b)\\n        if absA < absB:\\n            return self.getSum(b, a)\\n        \\n        # 2. Store the sign - it will negative if the greater number if negative (a will always be greater)\\n        sign = -1 if a < 0 else 1\\n                \\n        # 3. Perform bit-wise operations to compute the sum\\n        # 3a. If both a & b have the same sign [+a, +b] OR [-a, -b]\\n        if a * b >= 0:\\n            # Continue looping until the amount to carry (b) is 0\\n            while absB:\\n                # Calculate the sum without carry using XOR\\n                sumWithoutCarry = absA ^ absB\\n                # Calculate the amount to carry using AND and a left-wise shift\\n                carry = (absA & absB) << 1\\n                # We are now left with a sub-problem where sum = sumWithoutCarry + carry\\n                absA, absB = sumWithoutCarry, carry\\n        \\n        # 3b. a & b have different signs [-a, +b] OR [+a, -b]\\n        else:\\n            # Continue looping until the amount to borrow (b) is 0\\n            while absB:\\n                # Calculate the sum w/o borrow using XOR\\n                sumWithoutBorrow = absA ^ absB\\n                # Calculate the amount to borrow using NOT, AND and a left-wise shift\\n                borrow = (~absA & absB) << 1\\n                # We are now left with a sub-problem where sum = sumWithoutBorrow + borrow\\n                absA, absB = sumWithoutBorrow, borrow\\n        \\n        # 4. Return the solution\\n        return sign * absA\\n```\\n\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n#-------------------------------------------------------\\n# Range Limiting Method --> Accepted Solution.\\n#-------------------------------------------------------\\nclass Solution(object):\\n    def getSum(self, a: int, b: int) -> int:\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        # 32 bits integer max\\n        MAX = 0x7FFFFFFF\\n        # 32 bits interger min\\n        MIN = 0x80000000\\n        # mask to get last 32 bits\\n        mask = 0xFFFFFFFF\\n        while b != 0:\\n            # ^ get different bits and & gets double 1s, << moves carry\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\\n        # if a is negative, get a\\'s 32 bits complement positive first\\n        # then get 32-bit positive\\'s Python complement negative\\n        return a if a <= MAX else ~(a ^ mask)\\n\\n\\n\\n#-------------------------------------------------------\\n#       Memory Limit Exceeded Solution.\\n#-------------------------------------------------------\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        if b == 0:\\n            return a\\n        else:\\n            return self.getSum(a ^ b, (a & b) << 1)\\n\\t\\t\\t\\n\\n#-------------------------------------------------------\\n#       Time Limit Exceeded Solution.\\n#-------------------------------------------------------\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        carry = 0\\n        while b != 0:\\n            carry = a & b\\n            a = a ^ b\\n            b = carry << 1\\n        return a\\n\\n\\n#-------------------------------------------------------\\n#       Joke LoopHole Solution.\\n#-------------------------------------------------------\\nclass Solution(object):\\n\\tdef getSum(self, a: int, b: int) -> int:\\n\\t\\t\"\"\"\\n\\t\\t:type a: int\\n\\t\\t:type b: int\\n\\t\\t:rtype: int\\n\\t\\t\"\"\"\\n\\t\\tlist=[a,b]\\n\\t\\treturn sum(list)\\n```\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        \\'\\'\\'\\n            Problem: We want to add 2 numbers without using the + or -\\n                     operators.\\n            \\n            Solution: We can use bit-wise manipulation but\\n                     we need to write down all the possible cases:\\n                        a: +  b: +  \\n                        a: -  b: -\\n                        a: +  b: - \\n                        b: -  b: +\\n                    \\n                    For all problems:\\n                        1. We automatically do all our calculations with abs(a) and abs(b)\\n                            a, b = abs(a), abs(b)\\n                        2. We always ensure that abs(a) < abs(b), otherwise we switch a/b\\n                        \\n                    SubProblem - 1: a + b\\n                        We can use the algorithm in I, where we contiously update sumNoCarry and carry\\n                        until carry = 0.\\n                        \\n                         while carry = 0      \\n                            sumNoCarry = a & b            =   a + b (w/o carry)\\n                            carry = (a ^ b) << 1          =   carry       \\n                            a, b = sumNoCarry, carry      =   a + b + carry\\n                \\n                            \\n                    SubProblem-2: -a + (-b)\\n                        We can use the algorithm in I, where we contiously update sumNoCarry and carry\\n                        until carry = 0. Because python keeps track of negative indices\\n                    \\n                    SubProblem-3 & SubProblem-4: a - b  OR  b - a\\n                        If we have subtraction, we use borrow instead, where we use NOT to invert the given number\\n                        while borrow = 0\\n                            sumNoBorrow = a & b         = a - b (w/o carry)\\n                            borrow = (~a * b) << 1      = borrow\\n                            a, b, = sumNoBorrow, borrow = a - b + borrow\\n            \\n            Time: O(1) because each integer contains 32 bits.\\n            Space: O(1) because we don\\'t use any additional data structures.\\n                        \\n            WhiteBoard:\\n                I: a * b > 0    [+a,+b] OR [-a, -b]\\n                \\n                    --- iteration 1 ---\\n                    a = 15          01111 \\n                    b = 2           00010   \\n                    a + b = 17      10001       [SOLUTION]\\n                    a ^ b           01101        = sum w/o carry (a)\\n                    a & b           00010        \\n                    (a&b) << 1      00100        = carry (b)\\n\\n\\n                    Solution = (a^b) + ((a&b) << 1) = (01101 + 00100) = 10101\\n                        The sub-problem is the same as the problem, so we can use a loop\\n                        The base-case would be when our carry = 0\\n\\n                    --- iteration 2 ---\\n                    a =  x & y           01101   = 13   \\n                    b = (x&y) << 1       00100   = 4\\n\\n                    x = 13      01101\\n                    y = 4       00100\\n                    x^y         01001       = sum w/o carry(a)\\n                    x&y         00100\\n                    (x^y)<<1    01000       = carry (b)\\n                \\n                    \\n                    --- iteration 3 ---\\n                    a =  x & y           01001   = 9  \\n                    b = (x&y) << 1       01000   = 8\\n\\n                    x = 9       01001\\n                    y = 8       01000\\n                    x^y         00001       = sum w/o carry(a)\\n                    x&y         01000\\n                    (x^y)<<1    10000       = carry (b)\\n                    \\n                      --- iteration 3 ---\\n                    a =  x & y           00001   = 1\\n                    b = (x&y) << 1       10000   = 16\\n                    \\n                    x = 16      00001\\n                    y = 4       10000\\n                    x^y         10001       = sum w/o carry(a)\\n                    (x^y)<<1    00000       = carry (b)\\n                    \\n                    carry = 0, so we return 10001 = 10101 = 17\\n                 \\n                II: a * b < 0    [-a,+b] OR [a, -b]\\n                    --- iteration 1 ---\\n                    a = -16      1..10000   MSB = flag for +/-\\n                    b = 15          01111 \\n                    a + b = 13   1..00001       [SOLUTION]\\n                    a = abs(a)      10000\\n                    a ^ b           11111   =  31 <-------------- SUM W/O CARRY ---\\n                    ~a =         1..10001   = -17\\n                       =         0..01110     <-- 1. Flipped\\n                       =         0..01111     <-- 2. Add 1\\n                    (~a&b)       0..01111   =  15  \\n                    (~a&b)<<1       11110   = 15 * 2^2 = 30   <---- CARRY ----\\n                    \\n                     --- iteration 2 ---\\n                    a =  a ^ b           011111   = 31 \\n                    b = (~a&b) << 1      011110   = 30\\n                    a ^ b                000001   = 1\\n                    ~a                0..100000   = -32\\n                                      1..011111   <-- Flip\\n                                      1..100000   <-- Add 1\\n                    (~a & b)                0\\n                    \\n                        return -1\\n                    \\n                                    \\n                0b10001\\n                0b01111\\n                  1111\\n\\n                    Solution = (a^b) + ((a&b) << 1) = (01101 + 00100) = 10101\\n                        The sub-problem is the same as the problem, so we can use a loop\\n                        The base-case would be when our carry = 0\\n\\n\\n                \\n            \\n        \\'\\'\\'\\n        # 0. Get the absolutes values of both numbers\\n        absA, absB = abs(a), abs(b)\\n        \\n        # 1. Ensure that abs(a) >= abs(b)\\n        if absA < absB:\\n            return self.getSum(b, a)\\n        \\n        # 2. Store the sign - it will negative if the greater number if negative (a will always be greater)\\n        sign = -1 if a < 0 else 1\\n                \\n        # 3. Perform bit-wise operations to compute the sum\\n        # 3a. If both a & b have the same sign [+a, +b] OR [-a, -b]\\n        if a * b >= 0:\\n            # Continue looping until the amount to carry (b) is 0\\n            while absB:\\n                # Calculate the sum without carry using XOR\\n                sumWithoutCarry = absA ^ absB\\n                # Calculate the amount to carry using AND and a left-wise shift\\n                carry = (absA & absB) << 1\\n                # We are now left with a sub-problem where sum = sumWithoutCarry + carry\\n                absA, absB = sumWithoutCarry, carry\\n        \\n        # 3b. a & b have different signs [-a, +b] OR [+a, -b]\\n        else:\\n            # Continue looping until the amount to borrow (b) is 0\\n            while absB:\\n                # Calculate the sum w/o borrow using XOR\\n                sumWithoutBorrow = absA ^ absB\\n                # Calculate the amount to borrow using NOT, AND and a left-wise shift\\n                borrow = (~absA & absB) << 1\\n                # We are now left with a sub-problem where sum = sumWithoutBorrow + borrow\\n                absA, absB = sumWithoutBorrow, borrow\\n        \\n        # 4. Return the solution\\n        return sign * absA\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2026666,
                "title": "java-python-3-iterative-and-recursive-codes",
                "content": "Let us start with two `1-bit` binary numbers `b1` and `b2`, and we want to compute their sum by bit manipualtions, without using `+` or `-`:\\n\\n1. `b1 ^ b2`: sum without carry over.\\n2. `b1 & b2`: carry over bit. Hence we need to shift it to the left for `1` bit to put it on the right position. e.g., `b1 = 1, b2 = 1` then `b1 & b2 = 1` and left shift `1` bit to get the corrent result: `10`. Therefore, `(b1 & b2) << 1` is the carry over.\\n\\nNow we obtain two new numbers: `b1\\' = b1 ^ b2, b2\\' = (b1 & b2) << 1`. \\n\\n**If we repeat the above procedure, the carry over `b2\\'` will be `0` after shifting left for enough times (at most `31` times, in fact much less than that). When the carry over becomes `0`, we NO longer need to add it to `b1\\'`, which is the solution already!**\\n\\n**The above conclusion is also correct for any two integers, not just two `1-bit` binary numbers.** Based on the conclusion, we can implement the following codes:\\n\\n----\\n\\n**Iterative versions:**\\n\\n```java\\n    public int sum(int a, int b) {\\n        while (b != 0) {\\n            int carryOver = (a & b) << 1;\\n            a ^= b; // Now a is the sum without carry over.\\n            b = carryOver; // b is the carry over now.\\n        }\\n        return a;\\n    }\\n```\\n\\n----\\n\\n\\n**Note**: Python 3 uses different binary representation from Java or C++, so we need a `mask = 0XFFFFFFFF` to make sure that both the sum and carry over parts are with proper signs. If the result is over the upper bound `0X7FFFFFFF = 2147483647` (so should be less than `0X80000000 = 2147483648`), it is actually a negative number.\\n\\n```python\\n    def sum(self, a: int, b: int) -> int:\\n        mask = 0xFFFFFFFF\\n        while b != 0:\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask # sum w/o carry over .vs. carry over.\\n        return a if a < 0x80000000 else ~(a ^ mask)\\n```\\n\\n----\\n\\n**Recursive version**:\\n\\n```java\\n    public int sum(int a, int b) {\\n        return b == 0 ? a : sum(a ^ b, (a & b) << 1);\\n    }\\n```\\n\\n```python\\n    def getSum(self, a: int, b: int) -> int:\\n        mask = 0XFFFFFFFF\\n        if b == 0:\\n            return a if a < 0X80000000 else ~(a ^ mask)        \\n        return self.getSum((a ^ b) & mask, ((a & b) << 1) & mask)\\n```\\n\\n\\n----\\n\\nFeel free to ask if you have any questions about the post, and please **upvote** if it is helpful.",
                "solutionTags": [],
                "code": "```java\\n    public int sum(int a, int b) {\\n        while (b != 0) {\\n            int carryOver = (a & b) << 1;\\n            a ^= b; // Now a is the sum without carry over.\\n            b = carryOver; // b is the carry over now.\\n        }\\n        return a;\\n    }\\n```\n```python\\n    def sum(self, a: int, b: int) -> int:\\n        mask = 0xFFFFFFFF\\n        while b != 0:\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask # sum w/o carry over .vs. carry over.\\n        return a if a < 0x80000000 else ~(a ^ mask)\\n```\n```java\\n    public int sum(int a, int b) {\\n        return b == 0 ? a : sum(a ^ b, (a & b) << 1);\\n    }\\n```\n```python\\n    def getSum(self, a: int, b: int) -> int:\\n        mask = 0XFFFFFFFF\\n        if b == 0:\\n            return a if a < 0X80000000 else ~(a ^ mask)        \\n        return self.getSum((a ^ b) & mask, ((a & b) << 1) & mask)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1082894,
                "title": "c-0ms-easy-working-solution-3-lines-faster-than-100",
                "content": "```\\nint getSum(int a, int b) {\\n        \\n        unsigned int carry=0;\\n        while(b != 0){\\n            carry = a & b;\\n            a = a ^ b;\\n            b = carry << 1;\\n        }\\n        \\n        return a;\\n    }\\n\\t",
                "solutionTags": [
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nint getSum(int a, int b) {\\n        \\n        unsigned int carry=0;\\n        while(b != 0){\\n            carry = a & b;\\n            a = a ^ b;\\n            b = carry << 1;\\n        }\\n        \\n        return a;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 937959,
                "title": "java-0ms-100-online-submission-simple-understanding",
                "content": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        \\n        /*\\n        xor (^) produces the sum result without condidering carry bit\\n        eg    2+3 = 5 (actual addition will be 0101)\\n\\t\\t\\n\\t\\tAnswer = Sum intermediate (part A) + carry ans (part B)\\n        \\n        0010\\n        0011 (^ xor-ing)\\n        ----\\n        0001  part A - sum ans \\n        ----\\n        \\n        and (&) produces the carry inducing bit positions\\n\\n        0010\\n        0011 (& and-ing)\\n        ----\\n        0010  - carry intermediate\\n        ----\\n        \\n        - left shifting to actual pos -> 0100 - part B - carry actual\\n        \\n        iterate again - with part A & part B until part B is 0 (means no carry value)\\n        \\n        A - sum value\\n        B - carry value\\n        \\n        */\\n        \\n        \\n        // stores intermediate sum\\n        int xorSum = 0;\\n        \\n        // repeat until carry becomes 0\\n        while(b!=0){\\n            \\n            // find sum temp result wihout carry || \\n            xorSum = a ^ b;\\n            \\n            // find carry creating bit additions\\n            b = a & b;\\n            \\n            // left shift to carry\\'s actual place\\n            b = b << 1;\\n            \\n            // reassign to a\\n            a = xorSum;\\n        }\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        \\n        /*\\n        xor (^) produces the sum result without condidering carry bit\\n        eg    2+3 = 5 (actual addition will be 0101)\\n\\t\\t\\n\\t\\tAnswer = Sum intermediate (part A) + carry ans (part B)\\n        \\n        0010\\n        0011 (^ xor-ing)\\n        ----\\n        0001  part A - sum ans \\n        ----\\n        \\n        and (&) produces the carry inducing bit positions\\n\\n        0010\\n        0011 (& and-ing)\\n        ----\\n        0010  - carry intermediate\\n        ----\\n        \\n        - left shifting to actual pos -> 0100 - part B - carry actual\\n        \\n        iterate again - with part A & part B until part B is 0 (means no carry value)\\n        \\n        A - sum value\\n        B - carry value\\n        \\n        */\\n        \\n        \\n        // stores intermediate sum\\n        int xorSum = 0;\\n        \\n        // repeat until carry becomes 0\\n        while(b!=0){\\n            \\n            // find sum temp result wihout carry || \\n            xorSum = a ^ b;\\n            \\n            // find carry creating bit additions\\n            b = a & b;\\n            \\n            // left shift to carry\\'s actual place\\n            b = b << 1;\\n            \\n            // reassign to a\\n            a = xorSum;\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84369,
                "title": "1-line-0-ms-java",
                "content": "The code is as follows.\\n```\\npublic class Solution {\\n    public int getSum(int a, int b) {\\n        return b == 0 ? a : getSum(a ^ b, (a & b) << 1);\\n    }\\n}\\n```\\nThe above code may be rewritten to make it more readable.\\n```\\npublic class Solution {\\n    public int getSum(int a, int b) {\\n        while (b != 0) {\\n            int c = ((a & b) << 1);\\n            a ^= b;\\n            b = c;\\n        }\\n        return a;\\n    }\\n}\\n```\\n`c` stands for the carry bit of adding two integers. The sum of two integers can be decomposed into a summation bit (`a & b`) and a carry bit (`a ^ b`). The `<< 1` is to set the carry bit to the correct bit. The above process is repeated until no carry (`c`, stored in `b`, becomes 0). Then the sum is stored in `a`.",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int getSum(int a, int b) {\\n        return b == 0 ? a : getSum(a ^ b, (a & b) << 1);\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int getSum(int a, int b) {\\n        while (b != 0) {\\n            int c = ((a & b) << 1);\\n            a ^= b;\\n            b = c;\\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3518362,
                "title": "two-lines-of-code-and-two-approaches-intuition-explained",
                "content": "# Approach-1 using power And log\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBy the exponent product rule in mathematics,\\n\\n x^(a+b) = x^a * x^b.\\n\\n Here we can get the sum of a and b without using + operator. \\n\\na+b = logx(x^(a+b)) = logx(x^a * x^b)\\n\\nHere we can use any number for x and I\\'ve used 2 for keeping it small. \\n\\nfinal line - a+b = log2(2^(a+b)) = log2(2^a * 2^b)\\n\\n(in Java to take log base 2, i think there\\'s no straight way to do it so we take log of a number then divide it by log of 2 . It\\'s one of the log property in mathematics)\\n\\n# Code\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        if(b==0 || a==0) return a | b;\\n        return (int)(Math.log(Math.pow(2,a)*Math.pow(2,b))/Math.log(2));\\n    }\\n}\\n```\\n\\n\\n``\\n# Approach-2 using bitwise XOR and AND\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe first approach won\\'t be good for big numbers.\\nIn this approach we take\\n XOR to take the dissimilar bits or the sum without carry and \\nAND to take the similar bits or the sum with carry and we left shift it by one to make the carry bits go to their places. \\nWe do this recursively until we get either one of the operations as zero.\\nLet\\'s take an example to illustrate this approach for adding two binary numbers. Suppose we want to add the binary numbers 1101 and 1011.\\n\\nFirst, we perform the XOR operation between the two numbers:\\n\\n  1101\\n  1011 ^\\n  ----\\n  0110\\n\\nThe result of the XOR operation is 0110, which represents the sum of the two binary numbers without the carry.\\n\\nNext, we perform the AND operation between the two numbers:\\n\\n  1101\\n  1011 &\\n  ----\\n  1001\\n\\nThe result of the AND operation is 1001, which represents the positions where there is a carry.\\n\\nWe left shift the carry by one to make the carry bits go to their places:\\n\\n   1001\\n   1    <<\\n  ----\\n  10010\\n\\nThe result of the left shift is 10010, which represents the carry bits in their proper place.\\n\\nNow, we can repeat the same process using the sum without carry and the carry bits. We add the sum without carry and the carry bits:\\n\\n   0110\\n+ 10010\\n  ------\\n  10100\\n\\nThe result of this addition is 10100, which represents the final sum of the two binary numbers.\\n\\nWe can continue this process recursively until either the XOR or the AND operation becomes zero. This approach works well for small binary numbers, but for big binary numbers, the number of recursive calls required can be very large, which makes this approach inefficient.\\n\\n# Code\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        if(b==0 || a==0) return a | b;\\n        return getSum(a^b, (a&b)<<1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        if(b==0 || a==0) return a | b;\\n        return (int)(Math.log(Math.pow(2,a)*Math.pow(2,b))/Math.log(2));\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        if(b==0 || a==0) return a | b;\\n        return getSum(a^b, (a&b)<<1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3382730,
                "title": "99-beats-full-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis function takes two integer arguments a and b, and returns their sum using bitwise operations. Here\\'s how it works:\\n\\nThe function enters a while loop that runs as long as b is not equal to zero. This loop performs the addition of a and b bit by bit, by calculating the sum of each pair of corresponding bits, along with any carry from the previous pair.\\n\\nInside the loop, the function first calculates the carry by performing a bitwise AND operation between a and b, and storing the result in the variable carry. This operation sets each bit in carry that has a corresponding 1 bit in both a and b, which represents the carry generated from adding the previous bit pairs.\\n\\nThe function then calculates the sum by performing a bitwise XOR operation between a and b, and storing the result in a. This operation sets each bit in a that has a corresponding 1 bit in either a or b, but not in both, which represents the sum of the current bit pairs.\\n\\nThe function updates b by shifting the carry left by one position and storing the result in b. This operation prepares the carry for the next iteration of the loop, by shifting it one position to the left to match the position of the next bit pair.\\n\\nFinally, the function checks if both b and carry are equal to zero, and if so, it breaks out of the loop. This is an optimization that allows the function to exit early if no more carry bits are left to be added, which can improve performance for some input values.\\n\\nThe function returns the final value of a, which represents the sum of the input integers a and b.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(log n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\n/**\\n * @param {number} a\\n * @param {number} b\\n * @return {number}\\n */\\nvar getSum = function(a, b) {\\n    while (b !== 0) {\\n        const carry = a & b;\\n        a ^= b;\\n        b = carry << 1;\\n        if (b === 0 && carry === 0) break;\\n    }\\n    return a;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} a\\n * @param {number} b\\n * @return {number}\\n */\\nvar getSum = function(a, b) {\\n    while (b !== 0) {\\n        const carry = a & b;\\n        a ^= b;\\n        b = carry << 1;\\n        if (b === 0 && carry === 0) break;\\n    }\\n    return a;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1382118,
                "title": "bitwise-solution-explained",
                "content": "The explanation is taken from cracking the coding interview, which anudeepb28 commented on someone else\\'s solution.\\n\\nOur first Instinct in problems like these should be that we\\'re going to have to work with bits. Why, Because when you take the + sign, what other choice do we have? Plus, that\\'s how computers do it!\\nOur next thought should be to deeply understand how addition works. We can walk through an addition problem to see if we can understand something new\\u2014some pattern\\u2014and then see if we can replicate that with code. So let, do just that\\u2014let, walk through an addition problem. We\\'ll work in base 10 so that it, easier to see.\\nTo add 759 + 674, would usually add digit [0] from each number, carry the one, add digit [1] from each number, carry the one, and so on. You could take the same approach in binary: add each digit, and carry the one as necessary.\\nCan we make this a little easier? Yes! Imagine I decided to split apart the \"addition\" and \"carry\" steps. That is, I do the following:\\n\\nAdd 759 + 674, but \"forget\" to carry. I then get 323.\\nAdd 759 + 674 but only do the carrying, rather than the addition of each digit. I then get 1110.\\nAdd the result of the first two operations (recursively, using the same process described in step 1 and 2): 1110 + 323 = 1433.\\nNow, how would we do this in binary?\\n\\nIf I add two binary numbers together, but forget to carry, the ith bit in the sum will be 0 only if a and b have the same ith bit (both 0 or both 1).This is essentially an XOR.\\nIf I add two numbers together but only carry, I will have a 1 in the ith bit of the sum only if bits i - 1 of a and b are both 1s. This is an AND, shifted.\\nNow, recurse until there\\'s nothing to carry.\\n\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        if (b == 0) return a;\\n\\t\\t// a ^ b: sum without carry\\n\\t\\t// (a & b) << 1: carry without sum\\n\\t\\t// stop when carry becomes zero, meaning we have nothing more to add\\n        return getSum(a ^ b, (a & b) << 1);\\n    }\\n\\n  \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        if (b == 0) return a;\\n\\t\\t// a ^ b: sum without carry\\n\\t\\t// (a & b) << 1: carry without sum\\n\\t\\t// stop when carry becomes zero, meaning we have nothing more to add\\n        return getSum(a ^ b, (a & b) << 1);\\n    }\\n\\n  \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1136689,
                "title": "0-ms-c-soultion-using-log-and-pow",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        \\n        double val = (pow(2,a)*pow(2,b));\\n        \\n        \\n        \\n        return log(val)/log(2);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        \\n        double val = (pow(2,a)*pow(2,b));\\n        \\n        \\n        \\n        return log(val)/log(2);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 701159,
                "title": "python-solution-special-treatment-on-negative-numbers-no-mask",
                "content": "`myadd` function must work when `a`, `b` are both positive or both negative or one of them is zero. When one of `a`, `b` is positve and the other is neg, whether `myadd` function works depends on the sum of `a`, `b`. If the sum is neg, `myadd` works fine, otherwise it leads to *TLE* (resulted from how Python store negtive integers).\\n\\nTherefore, we need special treatment in case of pos+neg=nonneg, namely two cases:\\n1) a<0 and a+b>=0; \\n2) b<0 and a+b>=0. \\n\\nIn Case 1, thanks to ~x = -x - 1, `a + b >= 0` can be written as `~a + 1 <= b`  (Of course we have to use `myadd` instead `+` in the code.)  Be careful here `myadd(~a,1)<=b`  cannot be replaced by `myadd(~b,1)<=a` because if ~b=-1`myadd(~b,1)` will lead to *TLE*. Likewise for Case 2.\\n\\nMoreover, we can take advantage of ~(~a+~b+1) = -((-a-1)+ (-b-1) +1)-1 = a + b and write `~myadd(myadd(~a, ~b), 1)`. As a+b>=0, ~a+~b<=-2, `myadd(~a, ~b)` works as well as `myadd(myadd(~a, ~b), 1)`.\\n\\nHere\\'s the code:\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        def myadd(c, d):\\n            while d != 0:\\n                c, d = c^d, (c&d)<<1\\n            return c\\n        if a < 0 and myadd(~a, 1) <= b or b < 0 and myadd(~b, 1) <= a:\\n            return ~myadd(myadd(~a, ~b), 1)\\n        return myadd(a, b)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        def myadd(c, d):\\n            while d != 0:\\n                c, d = c^d, (c&d)<<1\\n            return c\\n        if a < 0 and myadd(~a, 1) <= b or b < 0 and myadd(~b, 1) <= a:\\n            return ~myadd(myadd(~a, ~b), 1)\\n        return myadd(a, b)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2305517,
                "title": "simple-python-solution-without-using-bit-manipulation",
                "content": "```\\nreturn sum([a,b])\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nreturn sum([a,b])\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1876632,
                "title": "python-one-line-solution-using-the-logic-of-logs-and-powers",
                "content": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(math.log2(2**a * 2**b))",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(math.log2(2**a * 2**b))",
                "codeTag": "Java"
            },
            {
                "id": 1303185,
                "title": "1-line-c-solution",
                "content": "class Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        return log2(pow(2,a)*pow(2,b));\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        return log2(pow(2,a)*pow(2,b));\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1281145,
                "title": "simple-bit-wise-approach-java-similar-to-half-adder-faster-than-100",
                "content": "The approach is some what similar to the one used in Half-Adder Circuits. We know that sum of two binary numbers is given by ```a ^ b``` and the carry is given by ```a & b```. So if we want to get the actual sum after adding the two numbers, it would be ```sum + carry << 1```.\\n\\n> **Why?** Let\\'s take one case (this is for example, you may verify with more cases) of Half-Adder where ```a = 1``` and ```b = 1```, both in binary. So there sum and carry would be :\\n> ```sum = a ^ b = 1 ^ 1 = 0```\\n> ```carry = a & b = 1 & 1 = 1```\\n> But the actual sum of ```1 + 1 = 10 (2, in decimal)```, which would be ```sum + (carry << 1)    =    0 + (1 << 1)    =    0 + 10    =    10```\\n> Also **Why Left-Shift the carry before adding?** Because that\\'s what we would do if we would be adding by traditional method, if we add the bit\\'s at any given position, we put the carry to the next left position, so the Left Shifiting sures that the carry of the current bit is added to the next left bit.\\n> \\nBut wait, we can\\'t use ```+```, so how  would we do ```sum + carry << 1``` ? \\n\\nThe answer is, here we can se our good old recursion coming into play. Won\\'t the question be same if ```sum``` would be our new ```a``` and ```carry << 1``` would be our new ```b``` ? Yes, that\\'s it. Then what would be the base case? The base case would be when our ```carry == 0```, because then what our ```sum``` contains would be our actual sum.\\n\\nBelow is the Java Code for the above algorithm \\uD83D\\uDC47\\n\\n```java\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int sum = a ^ b, carry = a & b;\\n        while(carry != 0) {\\n            a = sum;\\n            b = carry << 1;\\n            sum = a ^ b;\\n            carry = a & b;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```a ^ b```\n```a & b```\n```sum + carry << 1```\n```a = 1```\n```b = 1```\n```sum = a ^ b = 1 ^ 1 = 0```\n```carry = a & b = 1 & 1 = 1```\n```1 + 1 = 10 (2, in decimal)```\n```sum + (carry << 1)    =    0 + (1 << 1)    =    0 + 10    =    10```\n```+```\n```sum + carry << 1```\n```sum```\n```a```\n```carry << 1```\n```b```\n```carry == 0```\n```sum```\n```java\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int sum = a ^ b, carry = a & b;\\n        while(carry != 0) {\\n            a = sum;\\n            b = carry << 1;\\n            sum = a ^ b;\\n            carry = a & b;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 815666,
                "title": "c-c-solution-100-faster",
                "content": "## Fast and Simple Solution in C/C++\\n---\\n```c\\nint getSum(int a, int b){\\n    int sum;\\n    \\n    while (b) // while carry over value is not 0\\n    {\\n        sum = a ^ b; // Get sum without think about carry over\\n        b = (unsigned)(a&b)<<1; // Compute new carry over value to be sum in next loop\\n        a = sum; // Update sum to \\'a\\' for next addition \\n    }\\n    return a;\\n}\\n```\\nBrief idea is about `(((a^b) ^ C1) ^ C2) ^ C3, ...., Cn` which `Cn == 0`. \\n`C1, C2, C3, ... Cn` are carry over values calculated from `AccumulatedSumFromXOR & PreviousCarryOverVal << 1`.\\n\\n---\\n",
                "solutionTags": [],
                "code": "```c\\nint getSum(int a, int b){\\n    int sum;\\n    \\n    while (b) // while carry over value is not 0\\n    {\\n        sum = a ^ b; // Get sum without think about carry over\\n        b = (unsigned)(a&b)<<1; // Compute new carry over value to be sum in next loop\\n        a = sum; // Update sum to \\'a\\' for next addition \\n    }\\n    return a;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 390353,
                "title": "easy-c-solution-0ms-beats-100",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Sum of Two Integers.\\nMemory Usage: 8.2 MB, less than 91.67% of C++ online submissions for Sum of Two Integers.\\n\\n```\\nint getSum(int a, int b) {\\n        \\n        while(b != 0)\\n        {\\n            unsigned int carry = a&b;\\n            a = a^b;\\n            b = carry<<1;\\n        }\\n        \\n        return a;\\n    }",
                "solutionTags": [],
                "code": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Sum of Two Integers.\\nMemory Usage: 8.2 MB, less than 91.67% of C++ online submissions for Sum of Two Integers.\\n\\n```\\nint getSum(int a, int b) {\\n        \\n        while(b != 0)\\n        {\\n            unsigned int carry = a&b;\\n            a = a^b;\\n            b = carry<<1;\\n        }\\n        \\n        return a;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 167728,
                "title": "detail-explanation-and-code",
                "content": "\\u601D\\u8DEF\\uFF1A\\n1\\u3001\\u628A\\u8FD0\\u7B97\\u5206\\u4E3A\\u4E24\\u90E8\\u5206\\uFF0C\\u7B2C\\u4E00\\u90E8\\u5206\\u53EA\\u8BA1\\u7B97\\u90A3\\u4E9B\\u5BF9\\u5E94\\u4F4D\\u76F8\\u52A0\\uFF0C\\u80FD\\u591F\\u4EA7\\u751F\\u8FDB\\u4F4D\\u7684\\u4F4D\\u6240\\u4EA7\\u751F\\u7684\\u8FDB\\u4F4D(\\u867D\\u7136\\u8BF4\\u662F\\u76F8\\u52A0\\uFF0C\\u4F46\\u662F\\u8FD9\\u90E8\\u5206\\u53EA\\u5173\\u6CE8\\u53EF\\u4EE5\\u4EA7\\u751F\\u8FDB\\u4F4D\\u7684\\u60C5\\u51B5\\uFF0C\\u5373\\u5BF9\\u5E94\\u4F4D\\u90FD\\u662F1\\uFF0C\\u6240\\u4EE5\\u91C7\\u7528\\u5F02\\u6216\\u8FD0\\u7B97\\u53EF\\u4EE5\\u53EA\\u5904\\u7406\\u8FD9\\u79CD\\u60C5\\u51B5)\\uFF0C\\u7B2C\\u4E8C\\u90E8\\u5206\\u53EA\\u8BA1\\u7B97\\u90A3\\u4E9B\\u5BF9\\u5E94\\u4F4D\\u76F8\\u52A0\\uFF0C\\u4E0D\\u53EF\\u4EE5\\u4EA7\\u751F\\u8FDB\\u4F4D\\u7684\\u4F4D\\u7684\\u8FD0\\u7B97\\u7ED3\\u679C((1,0),(0,1)(0,0)\\u662F\\u8981\\u5904\\u7406\\u7684\\u60C5\\u51B5\\uFF0C\\u6240\\u4EE5\\u91C7\\u7528\\u4E0E\\u8FD0\\u7B97(\\u56E0\\u4E3A\\u4E0E\\u8FD0\\u7B97\\u4E0D\\u8FDB\\u4F4D\\uFF0C\\u4E5F\\u5C31\\u662F\\u6392\\u9664\\u6389\\u4E86\\u5BF9\\u5E94\\u4F4D\\u90FD\\u662F1\\u7684\\u60C5\\u51B5))\\u3002\\u7136\\u540E\\u5224\\u65AD\\u4E00\\u4E0B\\u7B2C\\u4E00\\u90E8\\u5206(\\u5373\\u662F\\u5426\\u6709\\u5BF9\\u5E94\\u4F4D\\u53EF\\u4EE5\\u4EA7\\u751F\\u8FDB\\u4F4D)\\u7684\\u503C\\u662F\\u5426\\u4E3A0\\uFF0C\\u5982\\u679C\\u662F0\\uFF0C\\u90A3\\u4E48\\u76F4\\u63A5\\u8FD4\\u56DE\\u7B2C\\u4E8C\\u90E8\\u5206\\u7684\\u503C(\\u5F02\\u6216\\u7684\\u7ED3\\u679C\\u6B63\\u597D\\u662F\\u9002\\u5408\\u65E0\\u8FDB\\u4F4D\\u60C5\\u51B5\\u7684)\\uFF0C\\u5982\\u679C\\u4E0D\\u662F0(\\u9700\\u8981\\u628A\\u8FDB\\u4F4D\\u52A0\\u4E0A)\\uFF0C\\u7136\\u540E\\u628A\\u7B2C\\u4E00\\u90E8\\u5206\\u5DE6\\u79FB\\u4E00\\u4F4D(\\u56E0\\u4E3A\\u4ED6\\u4EEC\\u662F\\u8FDB\\u4F4D\\uFF0C\\u6B64\\u524D\\u5E76\\u672A\\u5DE6\\u79FB)\\u4E0E\\u7B2C\\u4E8C\\u90E8\\u5206\\u76F8\\u52A0\\u5C31\\u5F97\\u5230\\u4E86\\u603B\\u7684\\u7ED3\\u679C\\uFF0C\\u56E0\\u4E3A\\u53C8\\u662F\\u52A0\\u6CD5\\uFF0C\\u7136\\u540E\\u5C31\\u53EF\\u4EE5\\u518D\\u6B21\\u8C03\\u7528\\u8FD9\\u4E2A\\u51FD\\u6570\\u8BA1\\u7B97\\uFF0C\\u76F4\\u81F3\\u8FDB\\u4F4D\\u662F0\\u3002\\u6211\\u60F3\\u7684\\u662F\\u8FD0\\u7B97\\u4E0D\\u4F1A\\u6EA2\\u51FA\\uFF0C\\u563F\\u563F\\n2\\u3001\\u5F02\\u6216\\u8FD0\\u7B97\\u548C\\u4E0E\\u8FD0\\u7B97\\u7684\\u4F5C\\u7528\\n    (1)\\u4E0E\\u8FD0\\u7B97 \\u53EA\\u5173\\u6CE8\\u4E8E\\u5BF9\\u5E94\\u4F4D\\u76F8\\u52A0\\u65F6\\u53EF\\u4EE5\\u4EA7\\u751F\\u8FDB\\u4F4D\\u7684\\u60C5\\u51B5\\uFF0C\\u5373(\\u90FD\\u662F1)\\n\\t\\t(2)\\u5F02\\u6216\\u8FD0\\u7B97 \\u53EA\\u5173\\u6CE8\\u4E8E\\u5BF9\\u5E94\\u4F4D\\u76F8\\u52A0\\u65F6\\u4E0D\\u4F1A\\u4EA7\\u751F\\u8FDB\\u4F4D\\u7684\\u60C5\\u51B5\\uFF0C\\u800C\\u4E14\\u4E0E\\u8FD0\\u7B97\\u662F\\u6CA1\\u6709\\u8FDB\\u4F4D\\u7684\\uFF0C\\u6240\\u4EE5\\u6392\\u9664\\u4E86\\u5F02\\u6216\\u8FD0\\u7B97\\u8D1F\\u8D23\\u7684\\u60C5\\u51B5\\uFF0C(1,0),(0,1)\\u3002\\nThoughts:\\nThis question can be divided into two parts. The task of first part is to compute the carry of the corresponding bits which can create a carry(the oppositing bits are 1), ignoring other situations(the method and& can just compute the (1,1) situation and ignore others). The task of second part is to compute the sum of the corresponding bits which are (0,1),(1,0) or (0,0)[the method nor ^ can make sense and ignore the (1,1) situation]. And then if the result of first part is 0, just return the result of second part. Otherwise shift one bit of the first result to left(just also regard it as first result) and recall the getSum() and  args  are first result and second result.\\n\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int bitdontcreatecarry = a^b;\\n        int bitcreatedcarry = a&b;\\n        if(bitcreatedcarry == 0)\\n        {\\n            return bitdontcreatecarry;\\n        }\\n        else\\n        {\\n            return getSum(bitcreatedcarry<<1,bitdontcreatecarry);\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int bitdontcreatecarry = a^b;\\n        int bitcreatedcarry = a&b;\\n        if(bitcreatedcarry == 0)\\n        {\\n            return bitdontcreatecarry;\\n        }\\n        else\\n        {\\n            return getSum(bitcreatedcarry<<1,bitdontcreatecarry);\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3250331,
                "title": "371-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThis solution implements the bitwise operation approach to add two integers without using the + or - operators.\\n\\nThe algorithm starts by initializing a mask variable to 0xFFFFFFFF which is used to ensure that the result stays within the range of 32-bit integers.\\n\\nThen, using a while loop, the algorithm applies two bitwise operations on a and b until b becomes 0:\\n\\n1. (a ^ b) & mask: This operation performs the bitwise exclusive OR (^) operation on a and b and then bitwise ANDs (&) the result with the mask variable to ensure that the result stays within the range of 32-bit integers. The result is then stored in a.\\n\\n2. ((a & b) << 1) & mask: This operation performs the bitwise AND (&) operation on a and b, then left shifts the result by 1 bit (<< 1), and finally bitwise ANDs (&) the result with the mask variable to ensure that the result stays within the range of 32-bit integers. The result is then stored in b.\\n\\nThe above two operations are repeated until b becomes 0, at which point the value of a is returned as the sum of the original a and b values.\\n\\nFinally, the result is checked to ensure that it is within the range of 32-bit signed integers (0x7FFFFFFF or 2147483647 in decimal), and if it is greater than the maximum value, it is inverted and subtracted from the mask variable to get the correct negative value.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        mask = 0xFFFFFFFF\\n        \\n        while b:\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\\n        \\n        return a if a <= 0x7FFFFFFF else ~(a ^ mask)\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        mask = 0xFFFFFFFF\\n        \\n        while b:\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\\n        \\n        return a if a <= 0x7FFFFFFF else ~(a ^ mask)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3235471,
                "title": "marvelous-logic-python3-java-golang-one-line",
                "content": "\\n\\n# One Line of Code Python3\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n       return sum([a,b])\\n```\\n# 2. Python3---->Bit Manipulation\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        while b!=0:\\n            temp=(a&b)<<1\\n            a=a^b\\n            b=temp\\n        return a\\n```\\n# 3.Java Solution->Bit Manipulation\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n      int temp; \\n      while(b !=0 ) {\\n        temp = (a&b)<<1;\\n        a = a ^ b;\\n        b = temp;\\n      }\\n      return a;\\n        \\n    }\\n}\\n```\\n# Golang Solution->Bit Manipulation\\n```\\nfunc getSum(a int, b int) int {\\n    for b!=0{\\n        temp:=a&b<<1\\n        a=a^b\\n        b=temp\\n    }\\n    return a\\n}\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "Go"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n       return sum([a,b])\\n```\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        while b!=0:\\n            temp=(a&b)<<1\\n            a=a^b\\n            b=temp\\n        return a\\n```\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n      int temp; \\n      while(b !=0 ) {\\n        temp = (a&b)<<1;\\n        a = a ^ b;\\n        b = temp;\\n      }\\n      return a;\\n        \\n    }\\n}\\n```\n```\\nfunc getSum(a int, b int) int {\\n    for b!=0{\\n        temp:=a&b<<1\\n        a=a^b\\n        b=temp\\n    }\\n    return a\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2950992,
                "title": "easy-short-2-approach-bit-manipulation-recursion-bitwise-add",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code: Bitwise Add using Recursion \\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        if(b==0) return a;\\n        else{\\n            return getSum(a^b, (unsigned int)(a&b)<<1);\\n        }\\n    }\\n};\\n```\\n\\n# Code: Bitwise Add\\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        int carry;\\n        while (b!=0){\\n            carry = a&b;\\n            a = a^b;\\n            b = (unsigned int)carry<<1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Bit Manipulation",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        if(b==0) return a;\\n        else{\\n            return getSum(a^b, (unsigned int)(a&b)<<1);\\n        }\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        int carry;\\n        while (b!=0){\\n            carry = a&b;\\n            a = a^b;\\n            b = (unsigned int)carry<<1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1403574,
                "title": "js-recursive-and-iterative-solutions",
                "content": "**Approach:**\\nXOR - for adding, but need to deal with carry\\n8 = 1000, 9 = 1001\\n8 ^ 9 = 0001 \\n\\nFor carry at the 4th bit, we can use AND\\n8 & 9 = 1000 (this shows bit positions from where carry needs to be forwarded to the next bit addition)\\n\\nsince carry is forwarded to the next bit addition, shift the carry to the left\\n=> 8 & 9 << 1 => 10000\\n\\nthen we add:\\n10000 ^ 0001 = 10001 (17)\\n\\nWill have to keep on doing this until carry is 0.\\n\\n**Solution 1: Recursive**\\n```\\nvar getSum = function(a, b) {\\n    if(b === 0) {\\n        return a;\\n    }\\n    return getSum(a ^ b, (a & b) << 1);\\n};\\n```\\n\\n**Solution 2: Iterative**\\n```\\nvar getSum = function(a, b) {\\n    while(b) {\\n        const carry = a & b;\\n        a = a ^ b;\\n        b = carry << 1;\\n    }\\n    return a;\\n}\\n```\\n**Example:**\\n```\\n/*\\na = 8 = 1000\\nb = 9 = 1001\\n\\n8 ^ 9 = 0001 = 1\\n8 & 9 = 1000 = 8\\n1000 << 1 = 10000 = 16\\n\\na = 00001\\nb = 10000\\n\\n1 ^ 16 = 10001 = 17\\n1 & 16 = 00000 = 0\\n*/\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Bit Manipulation"
                ],
                "code": "```\\nvar getSum = function(a, b) {\\n    if(b === 0) {\\n        return a;\\n    }\\n    return getSum(a ^ b, (a & b) << 1);\\n};\\n```\n```\\nvar getSum = function(a, b) {\\n    while(b) {\\n        const carry = a & b;\\n        a = a ^ b;\\n        b = carry << 1;\\n    }\\n    return a;\\n}\\n```\n```\\n/*\\na = 8 = 1000\\nb = 9 = 1001\\n\\n8 ^ 9 = 0001 = 1\\n8 & 9 = 1000 = 8\\n1000 << 1 = 10000 = 16\\n\\na = 00001\\nb = 10000\\n\\n1 ^ 16 = 10001 = 17\\n1 & 16 = 00000 = 0\\n*/\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 744683,
                "title": "c-bit-manipulation-solution",
                "content": "\\n\\nThe idea of the alogirthm is to convert (a + b) to (n + 0) where n = a + b. For example: (3 + 5) -> (8 + 0)\\n* (a ^ b): Sum up two number without considering carry\\n* (a & b) << 1: Calculate the carry\\n\\n![image](https://assets.leetcode.com/users/images/2ddf55c4-2c20-4908-b391-59e1c1120005_1595193148.7257466.png)\\n\\n\\n\\n**Implementation**\\n```\\npublic class Solution {\\n    public int GetSum(int a, int b) {\\n                \\n        while(b != 0)\\n        {\\n            int carry  = (a & b) << 1;\\n            a = a ^ b;\\n            b = carry;\\n        }\\n        \\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int GetSum(int a, int b) {\\n                \\n        while(b != 0)\\n        {\\n            int carry  = (a & b) << 1;\\n            a = a ^ b;\\n            b = carry;\\n        }\\n        \\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 293945,
                "title": "one-python-solution-with-bit-manipulation",
                "content": "```\\ndef getSum(self, a, b):\\n\\twhile b:\\n\\t\\ttmp = a ^ b\\n\\t\\tb = (a & b) << 1\\n\\t\\ta = tmp & 0xffffffff\\n\\treturn a if a >> 31 == 0 else ~(a ^ 0xffffffff)\\n```",
                "solutionTags": [
                    "Python",
                    "Bit Manipulation"
                ],
                "code": "```\\ndef getSum(self, a, b):\\n\\twhile b:\\n\\t\\ttmp = a ^ b\\n\\t\\tb = (a & b) << 1\\n\\t\\ta = tmp & 0xffffffff\\n\\treturn a if a >> 31 == 0 else ~(a ^ 0xffffffff)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 84323,
                "title": "golang-concise-solution-with-an-explanation",
                "content": "After understanding that `a ^ b` stands for the sum of each digit (ignoring carry over) and `a & b` stands for whether carry over occurs on each digit, you will easily see that you need to add carry over `(a & b) << 1` repeatedly until no carry over occurred. (Because first carry over may produce another carry over, we should do this until no more carry over occurs)\\n\\n```\\nfunc getSum(a int, b int) int {\\n\\tsum, co := a^b, a&b\\n\\tfor co != 0 {\\n\\t\\tco = co << 1\\n\\t\\tsum, co = sum^co, sum&co\\n\\t}\\n\\treturn sum\\n}\\n\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc getSum(a int, b int) int {\\n\\tsum, co := a^b, a&b\\n\\tfor co != 0 {\\n\\t\\tco = co << 1\\n\\t\\tsum, co = sum^co, sum&co\\n\\t}\\n\\treturn sum\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 84459,
                "title": "6-line-java-solution",
                "content": "    public int getSum(int a, int b) {\\n        while (b != 0) {\\n            int c = a & b;\\n            a = a ^ b;\\n            b = c << 1;\\n        }\\n        return a;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public int getSum(int a, int b) {\\n        while (b != 0) {\\n            int c = a & b;\\n            a = a ^ b;\\n            b = c << 1;\\n        }\\n        return a;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3181537,
                "title": "python-one-line",
                "content": "Simply $$a + b = \\\\log_x(x^a * x^b)$$\\n\\n# Code\\n```\\nimport math\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(math.log(2 ** a * 2 ** b, 2))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport math\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(math.log(2 ** a * 2 ** b, 2))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1567156,
                "title": "python-code-using-mask",
                "content": "```\\ndef getSum(self, a: int, b: int) -> int:\\n        if a==0:\\n            return b\\n        if b==0:\\n            return a\\n        mask = 0xffffffff\\n        while b!=0:\\n            x,y=a,b\\n            a=(a^b)&mask\\n            b=((x&y)<<1)&mask\\n        if (a >> 31) & 1:\\n            return ~(a ^ mask)\\n        else:\\n            return a\\n```\\nIf there is a negative integer n, and its unsigned 32-bit two\\'s complement is m, then m = ~(n ^ 0xffffffff) and n = ~(m ^ 0xffffffff)",
                "solutionTags": [],
                "code": "```\\ndef getSum(self, a: int, b: int) -> int:\\n        if a==0:\\n            return b\\n        if b==0:\\n            return a\\n        mask = 0xffffffff\\n        while b!=0:\\n            x,y=a,b\\n            a=(a^b)&mask\\n            b=((x&y)<<1)&mask\\n        if (a >> 31) & 1:\\n            return ~(a ^ mask)\\n        else:\\n            return a\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1545257,
                "title": "python-one-line-solution-using-exponent-rules",
                "content": "```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        return int(log(2 ** a * 2 ** b)/log(2))\\n```\\n\\nMy solution takes advantage of the exponent rule that a ^ x * a ^ y = a ^ (x + y). Thus, to compute (x + y) we can first compute a ^ x * a ^ y, (in my code, I let a = 2). After doing that, we can take the log base 2 of the result in order to compute x + y. In order to do log base 2 given log base 10, we have to use the change of base formula, which is log (N)/log(2), where N is the number that you want to find the log base 2 of.",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        return int(log(2 ** a * 2 ** b)/log(2))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1413403,
                "title": "not-weeb-does-python",
                "content": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(log2(2**a * 2**b))\\n```\\nDisplay complexity. This is why I can\\'t get promoted.\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(log2(2**a * 2**b))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 689566,
                "title": "standard-java-solution",
                "content": "### Theory\\nWe take the `+` and `-` operation for granted when it comes to simple integer math. To fully understand this solution, you must understand the `XOR`, and `<<` , and `&` operators for bit manipulation. \\n\\nLets first consider an example:\\na = 2, b = 3\\naBinary = 10 and bBinary = 11\\n\\n011 (b)\\n010 (a) +\\n__\\n001 <- This line is a ^ b (XOR)\\n100 <- this line is the shifted version of the carry by 1 place left (a & b) << 1\\n__\\n101 <-- Our answer\\n\\nSo we can conclude that the sum `c` given two integers `a` and `b` will be `a ^ b` until our carry is zero. If the carry is not zero, we reassign it to integer `b`. Negatives don\\'t need a special case, thats the beauty of this solution. If it took you a while to get this solution, don\\'t worry, but once you understand it, its makes so much sense.\\n\\n### Solution Recursion\\n```\\n    public int getSum(int a, int b) {\\n        if (a == 0) return b;\\n        if (b == 0) return a;\\n        return getSum(a ^ b, (a & b) << 1);\\n    }\\n```\\n\\n### Solution Iterative\\n```\\n    public int getSum(int a, int b) {\\n        if (a == 0) return b;\\n        if (b == 0) return a;\\n        \\n        while (b != 0)  {\\n            int carry = (a & b) << 1;\\n            a = a ^ b;\\n            b = carry; // reassign the carry into b\\n        }\\n        return a;\\n    }\\n```\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public int getSum(int a, int b) {\\n        if (a == 0) return b;\\n        if (b == 0) return a;\\n        return getSum(a ^ b, (a & b) << 1);\\n    }\\n```\n```\\n    public int getSum(int a, int b) {\\n        if (a == 0) return b;\\n        if (b == 0) return a;\\n        \\n        while (b != 0)  {\\n            int carry = (a & b) << 1;\\n            a = a ^ b;\\n            b = carry; // reassign the carry into b\\n        }\\n        return a;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 552829,
                "title": "python3-96-faster",
                "content": "\\ncombine into a single list and then use the sum function to add the two. Follows the rules and tests knowledge of python built in functions. \\n\\n\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\t\\t\\n```\\nEdit: 1 year later this has become my most popular leetcode answer, I understand I\\'m circumnavigating the intended rules, I just am not a rebuild the wheel kinda guy. I was given a task with rules, and I completed this task within the rules.\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\t\\t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 542161,
                "title": "java-bit-operation",
                "content": "```\\n    public int getSum(int a, int b) {\\n        while (b != 0) {\\n            int c = (a & b);\\n            a  = a ^ b;\\n            b = (c << 1);\\n        }\\n        return a;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int getSum(int a, int b) {\\n        while (b != 0) {\\n            int c = (a & b);\\n            a  = a ^ b;\\n            b = (c << 1);\\n        }\\n        return a;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 479870,
                "title": "100-100-python-bit-manipulation",
                "content": "```Python\\nclass Solution:\\n    def adder(self,x,y):\\n        carry = 0\\n        while y:\\n            carry = x & y\\n            x ^= y\\n            y = carry << 1\\n        return x\\n    def subtractor(self,x,y):\\n        borrow = 0\\n        while y:\\n            borrow = (~x) & y\\n            x ^= y\\n            y = borrow << 1\\n        return x\\n    \\n    def getSum(self, a: int, b: int) -> int:\\n        # Case - 1: Both a and b are positive\\n        if a >= 0 and b >= 0:\\n            return self.adder(a,b)\\n        # Case - 2: Both a and b are negetive\\n        if a < 0 and b < 0:\\n            return -self.adder(-a,-b)\\n        # Case - 3: a is positive and b is negetive\\n        if a >= 0 and b < 0:\\n            if -b > a:\\n                return -self.subtractor(-a,b)\\n            elif -b < a:\\n                return self.subtractor(a,-b)\\n            else:\\n                return 0\\n        # Case - 4: a is negetive and b is positive\\n        if b >= 0 and a < 0:\\n            if -a > b:\\n                return -self.subtractor(-a,b)\\n            elif -a < b:\\n                return self.subtractor(b,-a)\\n            else:\\n                return 0\\n            \\n```",
                "solutionTags": [],
                "code": "```Python\\nclass Solution:\\n    def adder(self,x,y):\\n        carry = 0\\n        while y:\\n            carry = x & y\\n            x ^= y\\n            y = carry << 1\\n        return x\\n    def subtractor(self,x,y):\\n        borrow = 0\\n        while y:\\n            borrow = (~x) & y\\n            x ^= y\\n            y = borrow << 1\\n        return x\\n    \\n    def getSum(self, a: int, b: int) -> int:\\n        # Case - 1: Both a and b are positive\\n        if a >= 0 and b >= 0:\\n            return self.adder(a,b)\\n        # Case - 2: Both a and b are negetive\\n        if a < 0 and b < 0:\\n            return -self.adder(-a,-b)\\n        # Case - 3: a is positive and b is negetive\\n        if a >= 0 and b < 0:\\n            if -b > a:\\n                return -self.subtractor(-a,b)\\n            elif -b < a:\\n                return self.subtractor(a,-b)\\n            else:\\n                return 0\\n        # Case - 4: a is negetive and b is positive\\n        if b >= 0 and a < 0:\\n            if -a > b:\\n                return -self.subtractor(-a,b)\\n            elif -a < b:\\n                return self.subtractor(b,-a)\\n            else:\\n                return 0\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 445608,
                "title": "how-to-handle-negative-numbers",
                "content": "Tried the following code which works fine for positive integers.\\nGetting an error \\'Line 9: Char 23: runtime error: left shift of negative value -2147483648 (solution.cpp)\\' for a testcase - [-1, 1]\\n\\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b)\\n    {\\n        while(b!=0)\\n        {\\n            int carry = a&b;\\n            a = a^b;\\n            b = (carry << 1);                \\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b)\\n    {\\n        while(b!=0)\\n        {\\n            int carry = a&b;\\n            a = a^b;\\n            b = (carry << 1);                \\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 407771,
                "title": "java-recursive-with-explanation",
                "content": "code: \\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int carry = (a&b)<<1;\\n        int sum = a^b;\\n        if(carry == 0)\\n            return sum;\\n        return getSum(carry,sum);\\n    }\\n}\\n```\\n\\nexplanation: \\nfor every addition, you have to add the sum and the carry. \\n\\ndecimal ex. \\n2+5 = 7\\n\\t    = 0(carry)  + 7(sum) \\n3+9 = 12\\n        = 10 (carry) + 2 (sum (which is 12mod10) )  \\n\\t\\t\\nbinary ex. \\n10 + 01 = 11\\n              = 00(carry) + 11(sum) \\n\\t\\t\\t  \\n1010 + 1010 = 10100\\n                     = 10100(carry) + 0000(sum) \\n\\nin binary: \\nxor operator will give us the sum; (a^b)\\nand operator followed by left shift of 1 bit will give us the carry; (a&b)<<1\\n\\nwe just need to find the sum and carry of the addition and add them recursively, until the carry is 0 (stop case for recursion). This is guaranteed to happen because of the left shift (it creates 0s on the right, preventing future carrys to occur on the right while continually moving to the left, therefore eventually the carrys run out).  \\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int carry = (a&b)<<1;\\n        int sum = a^b;\\n        if(carry == 0)\\n            return sum;\\n        return getSum(carry,sum);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84310,
                "title": "c-solution",
                "content": "```\\npublic class Solution \\n{\\n    public int GetSum(int a, int b) \\n\\t{\\n\\t    if (b == 0) return a;\\n\\t    \\n        var noCarry = a ^ b;\\n\\t\\tvar carry = a & b;\\n\\n\\t\\treturn GetSum(noCarry, carry << 1);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution \\n{\\n    public int GetSum(int a, int b) \\n\\t{\\n\\t    if (b == 0) return a;\\n\\t    \\n        var noCarry = a ^ b;\\n\\t\\tvar carry = a & b;\\n\\n\\t\\treturn GetSum(noCarry, carry << 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84462,
                "title": "c-0ms-2-lines-recursive-solution",
                "content": "    class Solution {\\n    public:\\n        int getSum(int a, int b) {\\n            if (b == 0) return a;\\n            return getSum(a ^ b, (a & b) << 1);\\n        }\\n    };\\n\\nXOR operation is the same as bit addition without considering the carry.\\n(a & b) << 1 is the carry, only a and b are both 1 will result in a carry of 1.",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n        int getSum(int a, int b) {\\n            if (b == 0) return a;\\n            return getSum(a ^ b, (a & b) << 1);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3240587,
                "title": "best-easiest-1-lines-of-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        return a+b;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        return a+b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2119356,
                "title": "c-very-easy-to-understand-sum-of-two-interger",
                "content": "\\'\\'\\'class Solution {\\npublic:\\n    int getSum(int a, int b) {\\n    while(b>0)\\n    {\\n        a++;\\n        b--;\\n    }\\n      while(b<0)\\n      {\\n            a--;\\n            b++;\\n        }\\n        return a;\\'\\'\\'\\n    }\\n};\\'\\'\\'",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int getSum(int a, int b) {\\n    while(b>0)\\n    {\\n        a++;\\n        b--;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2008073,
                "title": "python-1-liner-using-log-function-62-77-solution",
                "content": "```python\\nimport math\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        # math property: x^(a+b) = (x^a)*(x^b) --> a+b = log_x {(x^a)*(x^b)}\\n\\t\\t# Here x is set to be 2\\n        return round(math.log2(pow(2,a)*pow(2,b)))\\n```\\n\\nPlease commnet below if you have any further questions and UPVOTE if you like it!\\nAll the solutions that I\\'ve been through is archived here: https://github.com/hyeseonko/LeetCode",
                "solutionTags": [
                    "Python",
                    "Math"
                ],
                "code": "```python\\nimport math\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        # math property: x^(a+b) = (x^a)*(x^b) --> a+b = log_x {(x^a)*(x^b)}\\n\\t\\t# Here x is set to be 2\\n        return round(math.log2(pow(2,a)*pow(2,b)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1964273,
                "title": "python-everything-explained-in-one-place-and-made-simple-language-independant",
                "content": "\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        MASK = 0xFFF\\n        INT_MAX = 0x7FF\\n        # using this we clip off the bits that goes beyond limit\\n        # each F = 4 bits, hence FFF = 12 bits since our input limit\\n        # is {-1000, 1000} and our output limit can be {-2000, 2000}\\n        # 12 bits as in 2056,1024,512,256,128,64,32,16,8,4,2,1\\n        \\n        while b != 0:\\n            # In basic add operation, \\n            # like bits always equate to 0, i.e. 1 + 1 = 0,  0 + 0 = 0\\n            # unlike bits always equate to 1, i.e. 1 + 0 = 1, 0 + 1 = 1\\n            # This is exactly the same way XOR works, so we use XOR gate \\n            sum_val = (a ^ b) & MASK\\n            \\n            # In basic add operate, we get carry only when both the operands are 1\\n            # i.e. 1 + 1 = 0 (carry = 1)\\n            # This is exactly the same way AND works, so we use AND Gate to extract carry\\n            # if carry is present and shift to left by 1, cause we usually add carry to left digit\\n            carry = ((a & b) << 1) & MASK\\n\\t\\t\\t\\n\\t\\t\\t# we applied mask to both operations to take care about boundary\\n            # which needs for both positive and negative\\n        \\n            a = sum_val\\n            b = carry\\n        \\n        if a > INT_MAX:\\n            a = ~ (a ^ MASK)\\n            # (a ^ mask) XOR masking clips off the bits outside the range & \\n            # inverts the current bits in range (side effect)\\n            # ~(a ^ mask) fixed that previous side effect by again inverting bits using NOT\\n        return a\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        MASK = 0xFFF\\n        INT_MAX = 0x7FF\\n        # using this we clip off the bits that goes beyond limit\\n        # each F = 4 bits, hence FFF = 12 bits since our input limit\\n        # is {-1000, 1000} and our output limit can be {-2000, 2000}\\n        # 12 bits as in 2056,1024,512,256,128,64,32,16,8,4,2,1\\n        \\n        while b != 0:\\n            # In basic add operation, \\n            # like bits always equate to 0, i.e. 1 + 1 = 0,  0 + 0 = 0\\n            # unlike bits always equate to 1, i.e. 1 + 0 = 1, 0 + 1 = 1\\n            # This is exactly the same way XOR works, so we use XOR gate \\n            sum_val = (a ^ b) & MASK\\n            \\n            # In basic add operate, we get carry only when both the operands are 1\\n            # i.e. 1 + 1 = 0 (carry = 1)\\n            # This is exactly the same way AND works, so we use AND Gate to extract carry\\n            # if carry is present and shift to left by 1, cause we usually add carry to left digit\\n            carry = ((a & b) << 1) & MASK\\n\\t\\t\\t\\n\\t\\t\\t# we applied mask to both operations to take care about boundary\\n            # which needs for both positive and negative\\n        \\n            a = sum_val\\n            b = carry\\n        \\n        if a > INT_MAX:\\n            a = ~ (a ^ MASK)\\n            # (a ^ mask) XOR masking clips off the bits outside the range & \\n            # inverts the current bits in range (side effect)\\n            # ~(a ^ mask) fixed that previous side effect by again inverting bits using NOT\\n        return a\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1489108,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(log((2**a)*(2**b), 2))\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(log((2**a)*(2**b), 2))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1442367,
                "title": "concise-c",
                "content": "```\\n/*\\nWe will use \\'xor\\' because \\n1) 0^0 = 0\\n2) 1^1 = 1 (need to do something for the carry)\\n3) 1^0 or 0^1 = 1\\n\\nFor carry, we can use \\'and\\' as 1 & 1 = 1, use left shift to use carry at the right position.\\n\\n& 0xffffffff is to prevent error: left shift of negative value\\n*/\\n\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        \\n\\n        int carry;\\n        while(b) {\\n            carry = a&b;\\n            a = a^b;\\n            b = (carry & 0xffffffff) << 1;\\n        }\\n        \\n        return a;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        \\n\\n        int carry;\\n        while(b) {\\n            carry = a&b;\\n            a = a^b;\\n            b = (carry & 0xffffffff) << 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1337922,
                "title": "simple-c-solution-beats-100-in-time",
                "content": "```\\n int getSum(int a, int b) \\n    {\\n        return log(exp(a)*exp(b));\\n    }",
                "solutionTags": [],
                "code": "```\\n int getSum(int a, int b) \\n    {\\n        return log(exp(a)*exp(b));\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1302704,
                "title": "java-easy-solution-o-n-beats-100-0ms-memory-less-than-61",
                "content": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        \\n        int carry = 0;\\n        while(b != 0)\\n        {   \\n           carry = a & b;\\n           a = a ^ b;\\n           b = carry <<1; \\n        }\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        \\n        int carry = 0;\\n        while(b != 0)\\n        {   \\n           carry = a & b;\\n           a = a ^ b;\\n           b = carry <<1; \\n        }\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1254670,
                "title": "0ms-with-one-line-code-100-solution",
                "content": "```\\nreturn log(exp(a) * exp(b));\\n```\\nsimple Calculus concept :\\nexp(a)*exp(b)=exp(a+b)\\nlog(exp(a+b))=a+b",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nreturn log(exp(a) * exp(b));\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1035589,
                "title": "100-faster-c",
                "content": "class Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        unsigned int carry=(a&b);\\n        int sum=a^b;\\n        if(carry==0)\\n            return sum;\\n        carry<<=1;\\n        return getSum(carry,sum);\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        unsigned int carry=(a&b);\\n        int sum=a^b;\\n        if(carry==0)\\n            return sum;\\n        carry<<=1;\\n        return getSum(carry,sum);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1004304,
                "title": "java-0ms-using-array-stream",
                "content": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n            int[] arr = new int[2];\\n            arr[0] = a;\\n             arr[1] = b;\\n            return Arrays.stream(arr).sum();\\n    }\\n}\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int getSum(int a, int b) {\\n            int[] arr = new int[2];\\n            arr[0] = a;\\n             arr[1] = b;\\n            return Arrays.stream(arr).sum();\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 666745,
                "title": "python-solution-easy",
                "content": "```def getSum(self, a: int, b: int) -> int:\\n        return sum([a,b])",
                "solutionTags": [],
                "code": "```def getSum(self, a: int, b: int) -> int:\\n        return sum([a,b])",
                "codeTag": "Python3"
            },
            {
                "id": 486597,
                "title": "python-ok-i-know-this-is-cheap-but-lmaoo",
                "content": "```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        arr = []\\n        arr.append(a)\\n        arr.append(b)\\n        return sum(arr)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        arr = []\\n        arr.append(a)\\n        arr.append(b)\\n        return sum(arr)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 462916,
                "title": "python3-solution-using-bitwise-and-and-xor-operators",
                "content": "```\\n# https://leetcode.com/problems/sum-of-two-integers/\\n\\n# 92% faster, 100% less memory solution\\n\\nclass Solution:\\n    def addition(self, a: int, b: int) -> int:\\n        # https://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n        # https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder\\n        while (b != 0):\\n            carry = a & b\\n            a = a ^ b\\n            b = carry << 1\\n        return a\\n\\n    def subtraction(self, a: int, b: int) -> int:\\n        # https://www.geeksforgeeks.org/subtract-two-numbers-without-using-arithmetic-operators/\\n        # https://en.wikipedia.org/wiki/Subtractor\\n        while (b != 0):\\n            borrow = (~a) & b\\n            a = a ^ b\\n            b = borrow << 1\\n        return a\\n\\n    def getSum(self, a: int, b: int) -> int:\\n        ret = 0\\n        if a >= 0 and b >= 0:\\n            # case: a = 1, b = 2\\n            ret = self.addition(a,b)\\n        elif a < 0 and b < 0:\\n            # case: a = -1 , b = -2\\n            ret = -self.addition(-a,-b)\\n        elif a >= 0: # b < 0\\n            # case: a = 3, b = -1\\n            # case: a = 2, b = -3\\n            b = -b\\n            if a > b:\\n                # case: a = 3, b = -1\\n                ret = self.subtraction(a,b)\\n            else:\\n                # case: a = 2, b = -3\\n                ret = -self.subtraction(b,a)\\n        else: # b >= 0 and a < 0\\n            # case: a = -3, b = 1\\n            # case: a = -2, b = 3\\n            a = -a\\n            if a > b:\\n                # case: a = -3, b = 1\\n                ret = -self.subtraction(a,b)\\n            else:\\n                # case: a = -2, b = 3\\n                ret = self.subtraction(b,a)\\n\\n        return ret\\n\\nsol = Solution()\\nassert(sol.getSum(0,2) == 2)\\nassert(sol.getSum(-2,2) == 0)\\nassert(sol.getSum(0,0) == 0)\\nassert(sol.getSum(2,0) == 2)\\nassert(sol.getSum(1,2) == 3)\\nassert(sol.getSum(3,2) == 5)\\nassert(sol.getSum(4,4) == 8)\\nassert(sol.getSum(-1,-2) == -3)\\nassert(sol.getSum(-1,2) == 1)\\nassert(sol.getSum(-2,1) == -1)\\nassert(sol.getSum(1,-2) == -1)\\nassert(sol.getSum(2,-1) == 1)\\n\\n```",
                "solutionTags": [],
                "code": "```\\n# https://leetcode.com/problems/sum-of-two-integers/\\n\\n# 92% faster, 100% less memory solution\\n\\nclass Solution:\\n    def addition(self, a: int, b: int) -> int:\\n        # https://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n        # https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder\\n        while (b != 0):\\n            carry = a & b\\n            a = a ^ b\\n            b = carry << 1\\n        return a\\n\\n    def subtraction(self, a: int, b: int) -> int:\\n        # https://www.geeksforgeeks.org/subtract-two-numbers-without-using-arithmetic-operators/\\n        # https://en.wikipedia.org/wiki/Subtractor\\n        while (b != 0):\\n            borrow = (~a) & b\\n            a = a ^ b\\n            b = borrow << 1\\n        return a\\n\\n    def getSum(self, a: int, b: int) -> int:\\n        ret = 0\\n        if a >= 0 and b >= 0:\\n            # case: a = 1, b = 2\\n            ret = self.addition(a,b)\\n        elif a < 0 and b < 0:\\n            # case: a = -1 , b = -2\\n            ret = -self.addition(-a,-b)\\n        elif a >= 0: # b < 0\\n            # case: a = 3, b = -1\\n            # case: a = 2, b = -3\\n            b = -b\\n            if a > b:\\n                # case: a = 3, b = -1\\n                ret = self.subtraction(a,b)\\n            else:\\n                # case: a = 2, b = -3\\n                ret = -self.subtraction(b,a)\\n        else: # b >= 0 and a < 0\\n            # case: a = -3, b = 1\\n            # case: a = -2, b = 3\\n            a = -a\\n            if a > b:\\n                # case: a = -3, b = 1\\n                ret = -self.subtraction(a,b)\\n            else:\\n                # case: a = -2, b = 3\\n                ret = self.subtraction(b,a)\\n\\n        return ret\\n\\nsol = Solution()\\nassert(sol.getSum(0,2) == 2)\\nassert(sol.getSum(-2,2) == 0)\\nassert(sol.getSum(0,0) == 0)\\nassert(sol.getSum(2,0) == 2)\\nassert(sol.getSum(1,2) == 3)\\nassert(sol.getSum(3,2) == 5)\\nassert(sol.getSum(4,4) == 8)\\nassert(sol.getSum(-1,-2) == -3)\\nassert(sol.getSum(-1,2) == 1)\\nassert(sol.getSum(-2,1) == -1)\\nassert(sol.getSum(1,-2) == -1)\\nassert(sol.getSum(2,-1) == 1)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 450829,
                "title": "java-easy-to-understand-and-explain-in-interview-code",
                "content": "Since the numbers are integer we just need to check 32 bits. We will one by one get the bits starting from the rightmost bit and check if we need to set that bit or not and then calculate the carry.\\n\\ne.g. \\n0 0 1 1\\n0 0 0 1\\n\\ni = 0,  a1 = 1, b1 = 1 and carry = 0 initially\\nSince both a1 and b1 are 1 we will get 0 bit in that position as (1 + 1) will give 0 with carry 1.\\nWe will add this bit to the sum along with previous carry.\\nSo, the following operation will help us to check that if the resulting bit will be 0 or 1. We just need to remember the basic bit operations :\\n            \\n0 + 0 = 0\\n0 + 1 = 1\\n1 + 1 = 0  and carry 1\\n1 + 1 + 1(carry) = 1(bit will again set to 1) and carry = 1\\n\\n`sum |= a1 ^ b1 ^ carry`\\n\\nThen we will calculate the carry for next position bits by checking if any of the two (a1, b1, carry) is 1 making the carry as 1 else 0. \\n\\nfor i = 0, \\nsum = 0 0 0 0\\ncarry = 1\\n\\nWe will repeat these steps for every bit position.\\n\\nFor i = 1, a1 = 1, b1 = 0, carry = 1\\nSo, we will get a 0 again for this bit position as a1 and carry are 1\\n\\nSo, for i = 1\\nsum = 0 0 0 0\\ncarry = 1\\n\\nFor i = 2, a1 and b1 will be 0 as no set bits left and carry = 1 from previous bit operation\\nsum = 0 1 0 0\\ncarry = 0\\n\\nThe remaining iterations will not do anything as all the bits and carry are now 0.\\n\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int sum = 0, carry = 0;\\n        \\n        for (int i = 0; i < 32; i++) {\\n            int a1 = a & (1 << i);\\n            int b1 = b & (1 << i);\\n            sum |= a1 ^ b1 ^ carry;\\n            carry = ((a1 & b1) | (b1 & carry) | (a1 & carry)) << 1;\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int sum = 0, carry = 0;\\n        \\n        for (int i = 0; i < 32; i++) {\\n            int a1 = a & (1 << i);\\n            int b1 = b & (1 << i);\\n            sum |= a1 ^ b1 ^ carry;\\n            carry = ((a1 & b1) | (b1 & carry) | (a1 & carry)) << 1;\\n        }\\n        \\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 429694,
                "title": "c-0-ms-faster-than-100-00",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        int carry = 0;\\n        while(b) {\\n            carry = a & b;\\n            a ^= b;\\n            b = (unsigned int)carry << 1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        int carry = 0;\\n        while(b) {\\n            carry = a & b;\\n            a ^= b;\\n            b = (unsigned int)carry << 1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 275551,
                "title": "c-c-solution",
                "content": "avoid  oom\\n```\\nint getSum(int a, int b) {\\n    int c = 0;\\n    while(b != 0){\\n        c = (((a & b) & 0xffffffff)<<1) ;\\n        a ^= b;\\n        b = c;\\n    }\\n    return a;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint getSum(int a, int b) {\\n    int c = 0;\\n    while(b != 0){\\n        c = (((a & b) & 0xffffffff)<<1) ;\\n        a ^= b;\\n        b = c;\\n    }\\n    return a;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 262335,
                "title": "c-overflow",
                "content": "\\u5C06\\u6700\\u9AD8\\u4F4D\\u7B26\\u53F7\\u7F6E0\\uFF0C\\u907F\\u514D\\u5DE6\\u79FB\\u6EA2\\u51FA\\n\\n```\\nint getSum(int a, int b) {\\n\\treturn b ? getSum(a ^ b, ((a & b) & 0x7FFFFFFF) << 1) : a;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint getSum(int a, int b) {\\n\\treturn b ? getSum(a ^ b, ((a & b) & 0x7FFFFFFF) << 1) : a;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 213379,
                "title": "c-solution-with-bit-manipulation-beats-100",
                "content": "As with any addition operation(decimal and binary), we have the current sum and the carry. In binary addition, the carry occurs in the case, where both the bits are 1, so we use the \"&\" operator to find the carry bit. We use the \"<<\" operator to left-shift the carry, since it is involved in the next-bit calculation(moving to the next left one). The \"^\" is simply for the bit cases where there is only one 1. We continue until there is no more carry bit, i.e. b becomes zero and then a is simply the answer.\\n\\n\\n\\tint getSum(int a, int b) {\\n\\t\\t\\t\\t int carry =0;\\n\\t\\t\\t\\t while(b != 0)\\n\\t\\t\\t\\t {\\n\\t\\t\\t\\t\\t carry = (a & b) << 1; // carry is for the next bit calculation\\n\\t\\t\\t\\t\\t a = a ^ b;            //simple bit case for 0+1 or 1+0\\n\\t\\t\\t\\t\\t b = carry;            // for 1+1 bit case\\n\\t\\t\\t\\t }\\n\\t\\t\\t\\t return a;   \\n\\t\\t\\t}",
                "solutionTags": [],
                "code": "As with any addition operation(decimal and binary), we have the current sum and the carry. In binary addition, the carry occurs in the case, where both the bits are 1, so we use the \"&\" operator to find the carry bit. We use the \"<<\" operator to left-shift the carry, since it is involved in the next-bit calculation(moving to the next left one). The \"^\" is simply for the bit cases where there is only one 1. We continue until there is no more carry bit, i.e. b becomes zero and then a is simply the answer.\\n\\n\\n\\tint getSum(int a, int b) {\\n\\t\\t\\t\\t int carry =0;\\n\\t\\t\\t\\t while(b != 0)\\n\\t\\t\\t\\t {\\n\\t\\t\\t\\t\\t carry = (a & b) << 1; // carry is for the next bit calculation\\n\\t\\t\\t\\t\\t a = a ^ b;            //simple bit case for 0+1 or 1+0\\n\\t\\t\\t\\t\\t b = carry;            // for 1+1 bit case\\n\\t\\t\\t\\t }\\n\\t\\t\\t\\t return a;   \\n\\t\\t\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 208316,
                "title": "simple-solution-beats-100",
                "content": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int sum = a ^ b;\\n        int carry = a & b;\\n        \\n        if(carry == 0) return sum;\\n        return getSum(sum, carry << 1);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int sum = a ^ b;\\n        int carry = a & b;\\n        \\n        if(carry == 0) return sum;\\n        return getSum(sum, carry << 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84343,
                "title": "step-by-step-explain-in-case-for-there-is-anyone-like-me-don-t-familiar-with-bitwise",
                "content": "I spent a lot of time figuring out how this bitwise method works. And that's the steps and reasons why we can do that. In case there are some people don't understand the principles at first like me.\\nIf there is any mistake, please let me know.\\n\\n\\n**1. Two's Complement Numbers (preamble)**\\nI use Python, so first I learned how bitwise operators work in Python.\\nPython uses two's complement integers, that is, of an N-bit number, system can represent every integer in the range from \\u2212(2**(N\\u2212\\u20091)) to +(2\\u2009**(N\\u2212\\u20091) \\u2212 1).\\n\\nFor example of 3-bit number.\\n**Bit\\uff0c             Unsigned Value\\uff0c    Two's Complement Value**\\n011  \\uff0c                     3   \\uff0c\\u2003\\t                                3\\u2003\\n010  \\uff0c\\t                 2   \\uff0c                         \\u2003         2\\u2003\\n001\\t\\uff0c                     1\\u2003\\uff0c\\t                              1\\u2003\\n000 \\t\\uff0c                     0\\u2003\\uff0c    \\t                              0\\u2003\\n111\\t\\uff0c                     7\\u2003\\uff0c\\t                              -1\\u2003\\n110\\t\\uff0c                     6\\u2003\\uff0c                                     -2\\u2003\\n101\\t\\uff0c                     5\\u2003\\uff0c\\t                              -3\\u2003\\n100\\t\\uff0c                     4\\u2003\\uff0c       \\t                      -4\\u2003\\n\\nWe can find that positive numbers start with 0, negative numbers start with 1. By the way,  a negative number, -x, is written using the bit pattern for (x-1) with all of the bits complemented (switched from 1 to 0 or 0 to 1). So -1 is complement(1 - 1) = complement(0) = \"11111111\", and -10 is complement(10 - 1) = complement(9) = complement(\"00001001\") = \"11110110\".\\n\\n\\n**2.The Operator <<**\\nx << y  returns x with the bits shifted to the left by y places (and new bits on the right-hand-side are zeros). **This is the same as multiplying x by 2**y.** \\nWe can think it by this way, if a number in binary is 2**a+2**b+2**c, which a, b, c are locations of number 1, (e.g. 1001 => 2**3+2**0 = 9 ), when we shift all bits to the left by 3 place, the binary now is 2**(a+3)+2**(b+3)+2**(c+3) = (2**3) * (2**a+2**b+2**c), that is original number times 2**3.\\n\\n\\n**3. Half Adder**\\nThe half adder adds two single binary digits A and B. It has two outputs, sum (S) and carry (C). The carry signal represents an overflow into the next digit of a multi-digit addition. **The value of the sum is 2C + S**. The simplest half-adder design, pictured on the right, incorporates an **XOR gate for S** and an **AND gate for C**.\\n\\n\\n**4. Back to the Problem**\\nWe need to add two binary numbers a and b, according to half adder, we need to calculate C and S, for C is a&b, S is a^b. So a + b equals binary version 2C + S = (a&b) >> 1 + a^b, then there are still two numbers need to be added, that is (a&b) >> 1 and a^b, so we continue do the binary add function, until there is one numbers left, which means there is no overflow into the next digit of the addition, and that is when a&b is 0. At that time, we get the answer.\\n\\n\\n\\n**5. Realization in Python**\\nBut remember, there is some problem about number represent in Python, Python has more than 32 bits for integers (as far as I know, Python use 64 bits to store integer), so we need & to get the last 32 bits number when we use bitwise operators. And 0xFFFFFFFF is a Hexadecimal number for all 1 in 32bits use base2, so we can use a & 0xFFFFFFFF to obtain that last 32 bits. \\nFor the result, if the result is a negative number, after bitwise operations, we should return the integer back to the form consists with Python, that is, in base64, to show the correct answer. \\nFor example, if we get -2 after the loop, a would be 0x00000000FFFFFFFE, but in Python, -2 should be 0xFFFFFFFFFFFFFFFE. So we need to use a^mask to deal with it. What a^mask does here is get a's 32-bit complement, so a^mask = 0x0000000000000001. And ~ in Python would convert 0x0000000000000001 to 0xFFFFFFFFFFFFFFFE, which is -2 in Python. \\nIn sum, we can consider a^mask gets a's 32-bit positive complement with more 32-bit 0's on left, and ~ gets the common Python complement. (Content above almost copy from @pushazhiniao, link given as following.)\\n\\n\\nThat's my Python solution, thanks for many posts in leetcode, my solution learned from everyone.\\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n\\n        max_int = 0x7FFFFFFF\\n        mask = 0xFFFFFFFF\\n        # do the loop until there is no overflow in addition\\n        while b != 0:\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\\n        # when a > max_int, that means a is an\\n        if a <= max_int:\\n            return a\\n        else:\\n            return ~(a ^ mask)\\n```\\n\\n\\n\\nReferences:\\nTwo's Complement Numbers : [link text](https://wiki.python.org/moin/BitwiseOperators)\\nHalf Adder : [link text](https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder)\\nPython parts : [link text](https://discuss.leetcode.com/topic/51999/python-solution-with-no-completely-bit-manipulation-guaranteed/7)",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n\\n        max_int = 0x7FFFFFFF\\n        mask = 0xFFFFFFFF\\n        # do the loop until there is no overflow in addition\\n        while b != 0:\\n            a, b = (a ^ b) & mask, ((a & b) << 1) & mask\\n        # when a > max_int, that means a is an\\n        if a <= max_int:\\n            return a\\n        else:\\n            return ~(a ^ mask)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84371,
                "title": "a-3-lines-python-solution",
                "content": "\\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        for _ in xrange(32):\\n            a, b = a^b, (a&b)<<1\\n        return a if a & 0x80000000 else a & 0xffffffff",
                "solutionTags": [],
                "code": "\\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        for _ in xrange(32):\\n            a, b = a^b, (a&b)<<1\\n        return a if a & 0x80000000 else a & 0xffffffff",
                "codeTag": "Java"
            },
            {
                "id": 84403,
                "title": "a-python-solution",
                "content": "For python the `add` function only works when \\n* a*b>=0 , or\\n*  a < 0 and abs(a) > b > 0 (the negative number has a larger absolute value)\\n*  b < 0 and abs(b) > a > 0\\n\\nModify it accordingly (use `add(~n, 1)` to turn `n` into `-n`):  \\n\\n    def getSum(self, a, b):\\n        def add(a, b): \\n            if not a or not b:\\n                return a or b\\n            return add(a^b, (a&b) << 1)\\n\\n        if a*b < 0: # assume a < 0, b > 0\\n            if a > 0:\\n                return self.getSum(b, a)\\n            if add(~a, 1) == b: # -a == b\\n                return 0\\n            if add(~a, 1) < b: # -a < b\\n                return add(~add(add(~a, 1), add(~b, 1)),1) # -add(-a, -b)\\n\\n        return add(a, b) # a*b >= 0 or (-a) > b > 0 \\n<br>\\n\\nIf we are allowed to use `-n`:\\n<br>\\n\\n    def getSum(self, a, b):\\n        def add(a, b): \\n            if not a or not b:\\n                return a or b\\n            return add(a^b, (a&b) << 1)\\n            \\n        if a*b < 0: # assume a < 0, b > 0\\n            if a > 0:\\n                return self.getSum(b, a)\\n            if -a == b:\\n                return 0\\n            if -a < b:\\n                return -add(-a, -b)\\n\\n        return add(a, b)",
                "solutionTags": [
                    "Python"
                ],
                "code": "For python the `add` function only works when \\n* a*b>=0 , or\\n*  a < 0 and abs(a) > b > 0 (the negative number has a larger absolute value)\\n*  b < 0 and abs(b) > a > 0\\n\\nModify it accordingly (use `add(~n, 1)` to turn `n` into `-n`):  \\n\\n    def getSum(self, a, b):\\n        def add(a, b): \\n            if not a or not b:\\n                return a or b\\n            return add(a^b, (a&b) << 1)\\n\\n        if a*b < 0: # assume a < 0, b > 0\\n            if a > 0:\\n                return self.getSum(b, a)\\n            if add(~a, 1) == b: # -a == b\\n                return 0\\n            if add(~a, 1) < b: # -a < b\\n                return add(~add(add(~a, 1), add(~b, 1)),1) # -add(-a, -b)\\n\\n        return add(a, b) # a*b >= 0 or (-a) > b > 0 \\n<br>\\n\\nIf we are allowed to use `-n`:\\n<br>\\n\\n    def getSum(self, a, b):\\n        def add(a, b): \\n            if not a or not b:\\n                return a or b\\n            return add(a^b, (a&b) << 1)\\n            \\n        if a*b < 0: # assume a < 0, b > 0\\n            if a > 0:\\n                return self.getSum(b, a)\\n            if -a == b:\\n                return 0\\n            if -a < b:\\n                return -add(-a, -b)\\n\\n        return add(a, b)",
                "codeTag": "Python3"
            },
            {
                "id": 84436,
                "title": "4-lines-concise-c-solution",
                "content": "Could be a 2-liners solution but I think 4 lines are much clear.\\n\\nThe idea is that always assume *b* as the carry bits.\\n\\n    int getSum(int a, int b) {\\n    \\tif (b)\\n    \\t    return getSum(a ^ b, (a & b) << 1);\\n    \\telse\\n    \\t    return a;\\n    }",
                "solutionTags": [],
                "code": "Could be a 2-liners solution but I think 4 lines are much clear.\\n\\nThe idea is that always assume *b* as the carry bits.\\n\\n    int getSum(int a, int b) {\\n    \\tif (b)\\n    \\t    return getSum(a ^ b, (a & b) << 1);\\n    \\telse\\n    \\t    return a;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3506429,
                "title": "c-pure-bitwise-computation-100-time-0ms-93-space-5-9mb",
                "content": "To solve this problem, we will have to consider how a computer normally sums numbers, both positive and negative ones.\\n\\nThe positives are normally represented like a series of `0`s and `1`s matching increasing (from right to left) powers of `2`. For example `11001` equals (reading from left) $$1 * 2^4 + 1 * 2^3 + 0 * 2^2 + 0 * 2^1 + 1 * 2^0$$. This is would be `16 + 8 + 0 + 0 + 1 == 25`\\n\\nNegative numbers work in a similar way, but with all the bits flipped, plus `1`.\\n\\nSo, for example `25` in binary with the usual `32` bits representation is:\\n\\n```cpp\\n00000000000000000000000000011001\\n```\\n\\nFlipping all the bites we get:\\n\\n```cpp\\n11111111111111111111111111100110\\n```\\n\\nAnd adding `1` to that we get:\\n\\n```cpp\\n11111111111111111111111111100111\\n```\\n\\nWhich is actually the accurate representation of `-25` in binary; this process is called [two\\'s complement](https://en.wikipedia.org/wiki/Two%27s_complement) and has the important property of allowing us to sum all the integer numbers in range, bit by bit (and ignoring possible overflows), getting a valid one.\\n\\nIt easy for example to see that summing the binary representation of `25` and `-25` above would give us a list of `32` `0`s (again, ignoring overflow).\\n\\nNow, to enact this, we will proceed to check the two provided numbers `a` and `b` bit by bit, starting from the right most up to the end, then we will proceed with the simplest logic of summation, together with an extra variable to keep track of the remainder from previous steps.\\n\\nFor example, with `a == 10` (`1010` in binary) and `b == 27` (`11011` in binary) we would have initially (simplifying the logic with `8` bits):\\n\\n```cpp\\n00001010 // a\\n00011011 // b\\n\\n00000000 // res\\n       0 // rem\\n```\\n\\nAfter summing the rightmost digits (`0` for `a` and `1` for `b`), we would have:\\n\\n```cpp\\n00001010 // a\\n00011011 // b\\n       | // digit considered\\n00000001 // res\\n       0 // rem\\n```\\n\\nNext step and we have `1` for `a` and `1` for `b`, which makes `2` (`10` in binary), so we write `0` in `res` and store the extra digits in `rem`:\\n\\n```cpp\\n00001010 // a\\n00011011 // b\\n      |  // digit considered\\n00000001 // res\\n       1 // rem\\n```\\n\\nNext step and we have `0` for `a` and `0` for `b`, plus we need to add `1` from `rem`, so the total is `1` and we reset `rem` to `0`:\\n\\n```cpp\\n00001010 // a\\n00011011 // b\\n     |   // digit considered\\n00000101 // res\\n       0 // rem\\n```\\n\\nNext step, again we have `1` for `a` and `1` for `b`, which makes `2` (`10` in binary), so we write `0` in `res` and store the extra digit in `rem`:\\n\\n```cpp\\n00001010 // a\\n00011011 // b\\n    |    // digit considered\\n00000101 // res\\n       1 // rem\\n```\\n\\nNext step, again we have `0` for `a` and `1` for `b`, plus `1` from `rem` for a grand total of `2` (`10` in binary), so we write `0` in `res` and store the extra digit in `rem`:\\n\\n```cpp\\n00001010 // a\\n00011011 // b\\n   |     // digit considered\\n00000101 // res\\n       1 // rem\\n```\\n\\nFinal step we will execute (the logic would keep summing, but we have just `0`s after this point), we have `0` for `a` and `0` for `b`, plus `1` from `rem` for a grand total of `1`, so we write `1` in `res` and store `0` in `rem`:\\n\\n```cpp\\n00001010 // a\\n00011011 // b\\n  |      // digit considered\\n00100101 // res\\n       1 // rem\\n```\\n\\nAnd finally we get `00100101`, which is `32 + 4 + 1 == 37`, the result we were looking for - again, the same logic would work just fine also for negative numbers :)\\n\\nSo, starting with the support variables, we will have:\\n* `res`, as our usual result variable, initially set to `0`;\\n* `rem` to keep track of the remainder from previous steps, set to `0` too;\\n* `tot` to store the total sum for each bit we will parse;\\n* `ba` and `bb` to store the value of the currently parsed bit in `a` and `b`, respectively;\\n* `bit`, initially set to `1`, to keep track of what bit we are parsing.\\n\\nWe will keep looping `while` we don\\'t encounter an exit condition and:\\n* store `1` in `ba` if we have a bit matching the current one in `a` now (ie: `a & bit`), `0` otherwise;\\n* store `1` in `bb` if we have a bit matching the current one in `b` now (ie: `b & bit`), `0` otherwise;\\n* now, the part I enjoyed the most of this problem was computing `tot` in a smart way and, of course, without using basic operators:\\n    * if all three factors `a`, `b` and `rem` are `1` (ie: `ba & bb & rem`), then we know the sum is `3`;\\n    * if their XOR product is `1`, we know their sum has to be `1` too (we might get the same value if all of them were `1`, but we jsut ruled out that chance before);\\n    * if any of them is `1` (ie: `ba | bb | rem`), then we know that at least `2` of them are `1` (since we ruled out the case of odd `1`s with the XOR before), so would assign `2`;\\n    * in all the other cases, it has to be `0`;\\n* now we can assign to `rem` the value of dividing `tot` by `2`, truncating it with a right shift by `1` position (ie: `>> 1`);\\n* if `tot` was odd (ie: `tot & 1`), which means its least significant digit was `1`, we will write it in `res` in position `bit` (ie: `res |= bit`);\\n* if we reach the point in which we have `bit == INT_MIN`, which means `1` followed by `31` `0`s), we will just `return` `res`;\\n* otherwise, we will increase `bit`, shifting it left by `1` position (ie: `<< 1`).3\\n\\nAt the end of the loop, we will just put a placeholder `return` statement to placate the ire of the compiler, but it won\\'t ever be reached.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$ (always `32` steps; I guess I might optimise a bit when both numbers are `> 0`, but not sure it is worth it)\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```cpp\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        // support variables\\n        int res = 0, rem = 0, tot, ba, bb, bit = 1;\\n        // parsing a and b bit by bit\\n        while (true) {\\n            // extracting the current bit from a and b\\n            ba = bool(a & bit), bb = bool(b & bit);\\n            // computing curr by \"summing\" ba, bb and prev with bitwise\\n            tot = (ba & bb & rem) ? 3 : (ba ^ bb ^ rem) ? 1 : (ba | bb | rem) ? 2 : 0;\\n            // storing rem for the next loop\\n            rem = tot >> 1;\\n            // updating res\\n            if (tot & 1) res |= bit;\\n            // exit case: done parsing\\n            if (bit == INT_MIN) return res;\\n            bit <<= 1;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Bit Manipulation"
                ],
                "code": "```cpp\\n00000000000000000000000000011001\\n```\n```cpp\\n11111111111111111111111111100110\\n```\n```cpp\\n11111111111111111111111111100111\\n```\n```cpp\\n00001010 // a\\n00011011 // b\\n\\n00000000 // res\\n       0 // rem\\n```\n```cpp\\n00001010 // a\\n00011011 // b\\n       | // digit considered\\n00000001 // res\\n       0 // rem\\n```\n```cpp\\n00001010 // a\\n00011011 // b\\n      |  // digit considered\\n00000001 // res\\n       1 // rem\\n```\n```cpp\\n00001010 // a\\n00011011 // b\\n     |   // digit considered\\n00000101 // res\\n       0 // rem\\n```\n```cpp\\n00001010 // a\\n00011011 // b\\n    |    // digit considered\\n00000101 // res\\n       1 // rem\\n```\n```cpp\\n00001010 // a\\n00011011 // b\\n   |     // digit considered\\n00000101 // res\\n       1 // rem\\n```\n```cpp\\n00001010 // a\\n00011011 // b\\n  |      // digit considered\\n00100101 // res\\n       1 // rem\\n```\n```cpp\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        // support variables\\n        int res = 0, rem = 0, tot, ba, bb, bit = 1;\\n        // parsing a and b bit by bit\\n        while (true) {\\n            // extracting the current bit from a and b\\n            ba = bool(a & bit), bb = bool(b & bit);\\n            // computing curr by \"summing\" ba, bb and prev with bitwise\\n            tot = (ba & bb & rem) ? 3 : (ba ^ bb ^ rem) ? 1 : (ba | bb | rem) ? 2 : 0;\\n            // storing rem for the next loop\\n            rem = tot >> 1;\\n            // updating res\\n            if (tot & 1) res |= bit;\\n            // exit case: done parsing\\n            if (bit == INT_MIN) return res;\\n            bit <<= 1;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3461749,
                "title": "all-approaches-cleared",
                "content": "# Intuition\\nMainly, There are different ways to add two integers without using the \\'+\\' sign.\\n\\n1. Using the bitwise XOR operator (^):\\nThe bitwise XOR operator returns a 1 in each bit position where the corresponding bits of its two operands are different. To add two integers without using the \\'+\\' sign, we can perform the following steps:\\n\\nCompute the bitwise XOR of the two integers, which gives a number where each bit position represents the sum without carrying.\\nCompute the bitwise AND of the two integers, which gives a number where each bit position represents the carry.\\nShift the carry one position to the left (i.e., multiply it by 2).\\nAdd the result of step 1 and the result of step 3 (recursively, if necessary).\\nHere\\'s an example:\\n\\na = 12   # binary: 1100\\nb = 7    # binary: 0111\\n\\nwhile (b != 0){\\n    carry = (a & b) << 1;\\n    a = a ^ b;\\n    b = carry;\\n}\\nreturn a;\\n    \\noutput: 19\\nExplanation:\\n\\nThe bitwise XOR of 12 and 7 is 15 (binary: 1111).\\nThe bitwise AND of 12 and 7 is 4 (binary: 0100), which represents the carry.\\nThe carry is shifted one position to the left, which gives 8 (binary: 1000).\\nThe result of step 1 and the result of step 3 are added, which gives 23 (binary: 10111).\\nSince the result has more than 4 bits, we repeat the process with 23 and 0 (the new carry), which gives 19 (binary: 10011), which is the final result.\\n\\n\\n2.Using the bitwise complement (~) and the bitwise AND operator (&):\\nThe bitwise complement operator returns the complement of a number, which means that it flips all the bits. To add two integers without using the \\'+\\' sign, we can perform the following steps:\\n\\nCompute the bitwise complement of one of the integers.\\nCompute the bitwise AND of the complement and the other integer.\\nCompute the bitwise complement of the result of step 2.\\nAdd the original complement and the result of step 3.\\nHere\\'s an example:\\n\\n\\na = 12   # binary: 1100\\nb = 7    # binary: 0111\\n\\nresult = ~((~a) & b) + ~(~b & a)\\n\\noutput: 19\\n\\nExplanation:\\n\\nThe bitwise complement of 12 is -13 (binary: 11110011).\\nThe bitwise AND of -13 and 7 is 3 (binary: 0011).\\nThe bitwise complement of 3 is -4 (binary: 11111100).\\nThe bitwise complement of 7 is -8 (binary: 11111001).\\nThe sum of -13 and -4 is -17 (binary: 11101111).\\nThe bitwise complement of -17 is 19 (binary: 00010011), which is the final result.\\n\\n3.Using the arithmetic shift operator (>>) and the bitwise XOR operator (^):\\nThe arithmetic shift operator shifts the bits of a number to the right (if the number is positive) or to the left (if the number is negative). To add two integers without using the \\'+\\' sign, we can perform the following steps:\\n\\nCompute the bitwise XOR of the two integers, which gives a number where each bit position represents the sum without carrying.\\nCompute the bitwise AND of the two integers, which gives a number where each bit position represents the carry.\\nShift the carry one position\\n\\n# Code\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n    //    int ans = Integer.sum(a,b);\\n    //    return ans;\\n    int carry=0;\\n    while (b != 0){\\n    carry = (a & b) << 1;\\n    a = a ^ b;\\n    b = carry;\\n    }\\n    return a;\\n    }\\n}\\nPLEASE DO UPVOTE GUYS\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n    //    int ans = Integer.sum(a,b);\\n    //    return ans;\\n    int carry=0;\\n    while (b != 0){\\n    carry = (a & b) << 1;\\n    a = a ^ b;\\n    b = carry;\\n    }\\n    return a;\\n    }\\n}\\nPLEASE DO UPVOTE GUYS\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3284526,
                "title": "most-simple-6-lines-of-code-in-java",
                "content": "# Intuition\\nThe simplest way without using + or - operator is to use built - in function\\n\\n# Approach\\nAs the Question is not to use any operator but not yet said should not use any inbuilt functions:\\n\\nSo the code just uses the inbuilt function Integer.sum() to add two numbers without using any operators.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n       int ans = Integer.sum(a,b);\\n       return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n       int ans = Integer.sum(a,b);\\n       return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3127068,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n       int c=a+b;\\n        return c;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n       int c=a+b;\\n        return c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2754604,
                "title": "easy-c-solution-bit-manipulation",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        while(b!=0){\\n            unsigned carry=a&b;\\n            a=a^b;\\n            b=carry<<1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        while(b!=0){\\n            unsigned carry=a&b;\\n            a=a^b;\\n            b=carry<<1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2471052,
                "title": "sum-of-two-integers-beats-100-in-c-using-carry-technique",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        while(b!=0){\\n            int carry=a&b;\\n            a=a^b;\\n            b=(unsigned)carry<<1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        while(b!=0){\\n            int carry=a&b;\\n            a=a^b;\\n            b=(unsigned)carry<<1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2446794,
                "title": "python-solution-using-log-space-2-a-2-b-2-a-b",
                "content": "```\\nimport math\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        n = (2**a) * (2**b)\\n        return int(math.log(n,2))",
                "solutionTags": [],
                "code": "```\\nimport math\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        n = (2**a) * (2**b)\\n        return int(math.log(n,2))",
                "codeTag": "Java"
            },
            {
                "id": 2196736,
                "title": "javascript-simple-math-bit-manipulation",
                "content": "**Math Operation**\\n```\\nvar getSum = function(a, b) {\\n    if(a<0 && b==0)\\n      return a;\\n    if(b<0 && a==0)\\n        return b;\\n  return Math.log(Math.exp(a) * Math.exp(b))  \\n};\\n```\\n\\n\\n\\n**Bit Manipulation**\\n```\\nvar getSum = function(a, b) {\\n    while (b !== 0) {\\n        let temp = a;\\n        a = a ^ b;\\n        b = (temp & b) << 1;\\n    }\\n    return a; \\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\nvar getSum = function(a, b) {\\n    if(a<0 && b==0)\\n      return a;\\n    if(b<0 && a==0)\\n        return b;\\n  return Math.log(Math.exp(a) * Math.exp(b))  \\n};\\n```\n```\\nvar getSum = function(a, b) {\\n    while (b !== 0) {\\n        let temp = a;\\n        a = a ^ b;\\n        b = (temp & b) << 1;\\n    }\\n    return a; \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2101889,
                "title": "no-xor-one-line-0ms",
                "content": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        return (int)(Math.log(Math.pow(2, b) * Math.pow(2, a)) / Math.log(2));\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        return (int)(Math.log(Math.pow(2, b) * Math.pow(2, a)) / Math.log(2));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2087255,
                "title": "sum-of-two-integers-java-solution-using-bit-manipulation-100-faster-o-1-time-o-1-space",
                "content": "**Example 1:**\\nInput: a = 5, b = 9\\nOutput: 14\\n\\nStep1) Calculate only sum using ^ without considering carry. \\n\\t\\t\\t\\t5 :         0 1 0 1\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  ^\\t\\n\\t\\t\\t\\t9 :          1 0 0 1\\n\\t\\t***sum :         1 1 0 0***\\n\\t\\t\\nStep2) Calculate the carry using &, left shift it by 1 bit.\\n\\t\\t\\t\\t 5 :          0 1 0 1\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t  &\\n\\t\\t\\t\\t 9 :          1 0 0 1\\n\\t\\t\\t\\tCarry :\\t0 0 0 1 << 1\\n\\t\\t\\t\\t ***Carry :\\t0 0 1 0***\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n\\t\\t \\nStep3) Add the carry to the sum and Repeat this process until the carry becomes 0.\\n            Sum : 1 1 0 0\\n\\t\\t\\t               ^\\n\\t\\t   Carry : 0 0 1 0\\n\\t\\t   ***NewSum : 1 1 1 0***\\n\\t\\t   \\nStep4) Calculate the new carry and left shift it by 1.\\n\\t\\t\\tSum : 1 1 0 0\\n\\t\\t\\t               &\\n\\t       Carry : 0 0 1 0\\n\\t\\t   NewCarry : 0 0 0 0 << 1\\n\\t\\t   ***NewCarry : 0 0 0 0***\\n\\t\\t   \\nStep5) Repeat step 3 & 4 untill the carry becomes zero.\\n\\t\\tFor above example carry becomes 0 .\\n\\t\\t***So the answer is NewSum : 1 1 1 0 whose decimal equivalent is 14.***\\n\\t\\t   \\n\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int sum = a ^ b;  // here we first calculating the sum using xor(^), without considering the carry\\n        int carry = (a & b) << 1; // Now we calculate the carry using and(&), we are shifting the carry to the left by 1 because carry is always apply to the next digit.\\n        \\n        while (carry != 0) {  // this loop will continue till  the carry becomes zero.\\n            int previousSum = sum;\\n            sum = previousSum ^ carry;  // here we are adding carry to the sum.\\n            carry = (carry & previousSum) << 1;  // again calculating the carry which occured during addition of previousSum and carry\\n        }\\n        return sum;\\n    }\\n}\\n```\\n\\n\\n![image](https://assets.leetcode.com/users/images/a9fe6826-7773-4155-a37a-92e9cae911b7_1653820356.9070966.png)\\n",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        int sum = a ^ b;  // here we first calculating the sum using xor(^), without considering the carry\\n        int carry = (a & b) << 1; // Now we calculate the carry using and(&), we are shifting the carry to the left by 1 because carry is always apply to the next digit.\\n        \\n        while (carry != 0) {  // this loop will continue till  the carry becomes zero.\\n            int previousSum = sum;\\n            sum = previousSum ^ carry;  // here we are adding carry to the sum.\\n            carry = (carry & previousSum) << 1;  // again calculating the carry which occured during addition of previousSum and carry\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2033977,
                "title": "c-simple-bit-manipulation-solution-0-ms",
                "content": "Adding without carrying is akin to that of the XOR (^) operation. So this is half the story.\\nThen, we need to somehow incorporate the carrying. If we consider the binary representation of the two numbers, then we know we only carry if and only if the two bits in a given position are both 1s. This is equivalent to the logical AND (&) operator. \\n\\nThus, we apply these two in succession until we no longer need to carry. \\n\\n```\\nint getSum(int a, int b){\\n    unsigned int d = (unsigned int)(b); // define an unsigned version of b for shifting purposes (since we\\'re bit manipulating, the signs don\\'t matter)\\n\\tint c = 0; // c will store the previous sum value\\n    while (d != 0) { // while we no longer have to carry, iterate\\n\\t\\tc = a; // store the previous sum value in c\\n        a = a ^ d; // perform the addition without carry\\n        d = c & d; // determine places that resulted in carry out\\n        d = d << 1; // turn carry out into carry in with 1 left shift\\n    }\\n    return a; // a stores our sum, return it\\n}\\n```",
                "solutionTags": [
                    "Bit Manipulation"
                ],
                "code": "```\\nint getSum(int a, int b){\\n    unsigned int d = (unsigned int)(b); // define an unsigned version of b for shifting purposes (since we\\'re bit manipulating, the signs don\\'t matter)\\n\\tint c = 0; // c will store the previous sum value\\n    while (d != 0) { // while we no longer have to carry, iterate\\n\\t\\tc = a; // store the previous sum value in c\\n        a = a ^ d; // perform the addition without carry\\n        d = c & d; // determine places that resulted in carry out\\n        d = d << 1; // turn carry out into carry in with 1 left shift\\n    }\\n    return a; // a stores our sum, return it\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1974821,
                "title": "java-1line-beats-100-00-memory-speed-0ms-april-2022",
                "content": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n\\treturn (b == 0) ? a : getSum(a ^ b, (a & b) << 1);\\n}\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n\\treturn (b == 0) ? a : getSum(a ^ b, (a & b) << 1);\\n}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1880773,
                "title": "javascript-easy-solution-with-verbose-explanation-94-faster-tc",
                "content": "**Sum of Two Integers**\\nAdd two numbers without using addition or subtraction operators.\\n\\nSolution: Use bitwise manipulation. XOR (^) will add numbers, but will not account for binary numbers that should be carried (e.g. 1000 (ADD) 1000 != 10000). To solve this we make a carry variable - we find the number(s) to be carried with the AND (&) operator and use the Left Shift property (<<) to increment the number to it\\u2019s proper placement (e.g. 10000).\\nWe set XOR to param a, and the carry to param B and loop until param B equals zero. This allows us to account for all potential carries in the parameters.\\n```\\n/*\\n * @lc app=leetcode id=371 lang=javascript\\n *\\n * [371] Sum of Two Integers\\n */\\n\\n// @lc code=start\\n/**\\n * @param {number} a\\n * @param {number} b\\n * @return {number}\\n */\\nvar getSum = function(a, b) {\\n    while (b != 0){\\n        /**\\n         * To solve this problem, we use bitwise operations\\n         * and break the problem into two parts.\\n         * \\n         * Binary operators used:\\n         * & (AND) - produces a digit of 1 if both numbers have a digit of 1\\n         * ^ (XOR) - produces a digit of 1 only if one number (not both) have a digit of one\\n         * << (Left Shift) - adds one binary zero onto the number; increments operand.\\n         * \\n         * Carry - this is the binary number that is \\'carried\\' to the new number. For example: adding 1000 + 1000 would produce 10000 after the bit manipualtion is done\\n         * Addition - this is the actual addition done with the XOR operator. If one 1 exists, the digit is kept. We add this to the carry.\\n         * \\n         * This function is looped to add the carry onto the number with XOR addition - as we can\\'t do it easily otherwise - and accounts for edge cases.\\n         * \\n         * \\n         */\\n        let carry = a & b;\\n        //a = addition function\\n        a = a ^ b;\\n        //incrementing the carry - 1000 in binary becomes 10000\\n        b = carry << 1;\\n    }\\n    return a;\\n    \\n    \\n    \\n};\\n// @lc code=end\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\n/*\\n * @lc app=leetcode id=371 lang=javascript\\n *\\n * [371] Sum of Two Integers\\n */\\n\\n// @lc code=start\\n/**\\n * @param {number} a\\n * @param {number} b\\n * @return {number}\\n */\\nvar getSum = function(a, b) {\\n    while (b != 0){\\n        /**\\n         * To solve this problem, we use bitwise operations\\n         * and break the problem into two parts.\\n         * \\n         * Binary operators used:\\n         * & (AND) - produces a digit of 1 if both numbers have a digit of 1\\n         * ^ (XOR) - produces a digit of 1 only if one number (not both) have a digit of one\\n         * << (Left Shift) - adds one binary zero onto the number; increments operand.\\n         * \\n         * Carry - this is the binary number that is \\'carried\\' to the new number. For example: adding 1000 + 1000 would produce 10000 after the bit manipualtion is done\\n         * Addition - this is the actual addition done with the XOR operator. If one 1 exists, the digit is kept. We add this to the carry.\\n         * \\n         * This function is looped to add the carry onto the number with XOR addition - as we can\\'t do it easily otherwise - and accounts for edge cases.\\n         * \\n         * \\n         */\\n        let carry = a & b;\\n        //a = addition function\\n        a = a ^ b;\\n        //incrementing the carry - 1000 in binary becomes 10000\\n        b = carry << 1;\\n    }\\n    return a;\\n    \\n    \\n    \\n};\\n// @lc code=end\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1638686,
                "title": "c-fast-ripple-carry-adder-using-bit-manipulation",
                "content": "```\\nint getSum(int a, int b){\\n    int ans = 0;\\n    unsigned char abit, bbit, i, carry;\\n    long sum;\\n    \\n    for (i = 0, carry = 0; i < 32; i++) {\\n        abit = a & 1;\\n        bbit = b & 1;\\n        sum = carry ^ abit ^ bbit;\\n        \\n        ans |= (sum << i);\\n        carry = abit & bbit | (carry & (abit ^ bbit));\\n        \\n        a >>= 1;\\n        b >>= 1;\\n    }\\n    \\n    return ans;\\n}",
                "solutionTags": [
                    "C++",
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nint getSum(int a, int b){\\n    int ans = 0;\\n    unsigned char abit, bbit, i, carry;\\n    long sum;\\n    \\n    for (i = 0, carry = 0; i < 32; i++) {\\n        abit = a & 1;\\n        bbit = b & 1;\\n        sum = carry ^ abit ^ bbit;\\n        \\n        ans |= (sum << i);\\n        carry = abit & bbit | (carry & (abit ^ bbit));\\n        \\n        a >>= 1;\\n        b >>= 1;\\n    }\\n    \\n    return ans;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 1561732,
                "title": "two-s-complement-solution-very-detailed-explanation",
                "content": "## Introduction\\nThis is an article for people who already know about \"Two\\'s complement Java solution\", but cannot understand why or how this works for negative numbers.\\nI simply want to debug the code with you step-by-step, for both simple and complicated cases (negative numbers), so by the end of the topic we can actually see how the magical code works.\\nI will not explain how to arrive to the \"Two\\'s component\" solution in here, for this you can read a great [article](https://leetcode.com/problems/sum-of-two-integers/discuss/132479/Simple-explanation-on-how-to-arrive-at-the-solution) by @kishnivas10.\\n\\n## Starting point\\nI will try to do this explanation not Java-specific, but still I will start with Java, and only then will tell how this relates to other languages. Our starting point will be following Two\\'s complement Java solution:\\n\\n**Java:**\\n```\\npublic int getSum(int a, int b) {\\n\\twhile (b != 0) {\\n\\t\\tint ans = a ^ b;\\n\\t\\tint carry = (a & b) << 1;\\n\\t\\ta = ans;\\n\\t\\tb = carry;\\n\\t}\\n\\treturn a;\\n}\\n```\\nThere\\'s also a detail about how Java handles integer overflow, but we will come to it later, no need to worry about it right now.\\n## Positive numbers: a = 47 b = 53\\n1. Answer is a xor operation between a and b, which is basically a sum without carry part.\\n```\\na     =                           101111\\nb     =                           110101\\nans   =                            11010\\ncarry =                          1001010\\n```\\n2. Then, we replace b with carry part, a with answer and do the same operation again\\n```\\na     =                            11010\\nb     =                          1001010\\nans   =                          1010000\\ncarry =                            10100\\n```\\n3. And again\\n```\\na     =                          1010000\\nb     =                            10100\\nans   =                          1000100\\ncarry =                           100000\\n```\\n4. Do it one more time\\n```\\na     =                          1000100\\nb     =                           100000\\nans   =                          1100100\\ncarry =                                0\\n```\\n5. So, we arrived at the point where b = 0, and we can stop algorithm, let\\'s verify the result\\n47 (101111) + 53 (110101) = 100 (1100100)\\nWe are good here, algorithm works as it should, by binary operations logic, let\\'s go to the next example.\\n## One negative number: a = -47 b = 53\\nHere\\'s the fun part starts, let\\'s take a look at binary representation of our values.\\n```\\na     = 11111111111111111111111111010001\\nb     =                           110101\\n```\\n### Why -47 is 11111111111111111111111111010001?\\nIt\\'s simply [Two\\'s component representation](https://en.wikipedia.org/wiki/Signed_number_representations#Two.27s_complement).\\nTo represent -x, we revert all bits of x and add 1 to it.\\nSo, to represent -47, we revert all bits of 47 and add 1 to it, let\\'s do it.\\n``` \\n1.  47     = 0000000000000000000000000101111\\n2. ~47     = 1111111111111111111111111010000\\n3. ~47 + 1 = 1111111111111111111111111010001\\n```\\nAnd as you can see, this is exactly what we have, now we understand how do we get this binary reperesentation, let\\'s see how the sum will work.\\n### Debugging\\nLet\\'s figure out what happens during addition. I will put output of all the changes down below, but feel free to just scroll it down to it\\'s analysis.\\n```\\na     = 11111111111111111111111111010001\\nb     =                           110101 // empty spaces are zeroes\\nans   = 11111111111111111111111111100100\\ncarry =                           100010 // empty spaces are zeroes\\n\\na     = 11111111111111111111111111100100\\nb     =                           100010\\nans   = 11111111111111111111111111000110\\ncarry =                          1000000\\n\\na     = 11111111111111111111111111000110\\nb     =                          1000000\\nans   = 11111111111111111111111110000110\\ncarry =                         10000000\\n\\na     = 11111111111111111111111110000110\\nb     =                         10000000\\nans   = 11111111111111111111111100000110\\ncarry =                        100000000\\n\\na     = 11111111111111111111111100000110\\nb     =                        100000000\\nans   = 11111111111111111111111000000110\\ncarry =                       1000000000\\n\\na     = 11111111111111111111111000000110\\nb     =                       1000000000\\nans   = 11111111111111111111110000000110\\ncarry =                      10000000000\\n\\na     = 11111111111111111111110000000110\\nb     =                      10000000000\\nans   = 11111111111111111111100000000110\\ncarry =                     100000000000\\n\\na     = 11111111111111111111100000000110\\nb     =                     100000000000\\nans   = 11111111111111111111000000000110\\ncarry =                    1000000000000\\n\\na     = 11111111111111111111000000000110\\nb     =                    1000000000000\\nans   = 11111111111111111110000000000110\\ncarry =                   10000000000000\\n\\na     = 11111111111111111110000000000110\\nb     =                   10000000000000\\nans   = 11111111111111111100000000000110\\ncarry =                  100000000000000\\n\\na     = 11111111111111111100000000000110\\nb     =                  100000000000000\\nans   = 11111111111111111000000000000110\\ncarry =                 1000000000000000\\n\\na     = 11111111111111111000000000000110\\nb     =                 1000000000000000\\nans   = 11111111111111110000000000000110\\ncarry =                10000000000000000\\n\\na     = 11111111111111110000000000000110\\nb     =                10000000000000000\\nans   = 11111111111111100000000000000110\\ncarry =               100000000000000000\\n\\na     = 11111111111111100000000000000110\\nb     =               100000000000000000\\nans   = 11111111111111000000000000000110\\ncarry =              1000000000000000000\\n\\na     = 11111111111111000000000000000110\\nb     =              1000000000000000000\\nans   = 11111111111110000000000000000110\\ncarry =             10000000000000000000\\n\\na     = 11111111111110000000000000000110\\nb     =             10000000000000000000\\nans   = 11111111111100000000000000000110\\ncarry =            100000000000000000000\\n\\na     = 11111111111100000000000000000110\\nb     =            100000000000000000000\\nans   = 11111111111000000000000000000110\\ncarry =           1000000000000000000000\\n\\na     = 11111111111000000000000000000110\\nb     =           1000000000000000000000\\nans   = 11111111110000000000000000000110\\ncarry =          10000000000000000000000\\n\\na     = 11111111110000000000000000000110\\nb     =          10000000000000000000000\\nans   = 11111111100000000000000000000110\\ncarry =         100000000000000000000000\\n\\na     = 11111111100000000000000000000110\\nb     =         100000000000000000000000\\nans   = 11111111000000000000000000000110\\ncarry =        1000000000000000000000000\\n\\na     = 11111111000000000000000000000110\\nb     =        1000000000000000000000000\\nans   = 11111110000000000000000000000110\\ncarry =       10000000000000000000000000\\n\\na     = 11111110000000000000000000000110\\nb     =       10000000000000000000000000\\nans   = 11111100000000000000000000000110\\ncarry =      100000000000000000000000000\\n\\na     = 11111100000000000000000000000110\\nb     =      100000000000000000000000000\\nans   = 11111000000000000000000000000110\\ncarry =     1000000000000000000000000000\\n\\na     = 11111000000000000000000000000110\\nb     =     1000000000000000000000000000\\nans   = 11110000000000000000000000000110\\ncarry =    10000000000000000000000000000\\n\\na     = 11110000000000000000000000000110\\nb     =    10000000000000000000000000000\\nans   = 11100000000000000000000000000110\\ncarry =   100000000000000000000000000000\\n\\na     = 11100000000000000000000000000110\\nb     =   100000000000000000000000000000\\nans   = 11000000000000000000000000000110\\ncarry =  1000000000000000000000000000000\\n\\na     = 11000000000000000000000000000110\\nb     =  1000000000000000000000000000000\\nans   = 10000000000000000000000000000110\\ncarry = 10000000000000000000000000000000\\n\\na     = 10000000000000000000000000000110\\nb     = 10000000000000000000000000000000\\nans   =                              110\\ncarry =                                0\\n```\\nResult is fine, its 6, let\\'s see how do we get it.\\nAs we can see, every time we sum a and b, carry becomes bigger and bigger, because a is almost full of **1** values, it will happen until overflow at last operation happens.\\n\\nHow does **Java** compute \"two\\'s complement\"?\\nAfter each operation we have an invisible & mask = 0xFFFFFFFF (bitmask of 32 1-bits)\\n```\\na     = 10000000000000000000000000000110\\nb     = 10000000000000000000000000000000\\n// As you know, ans computed as a ^ b\\na ^ b = 00000000000000000000000000000110 // It\\'s fine, no overflows\\n// As you know, carry computed as (a & b) << 1\\ncarry = 100000000000000000000000000000000 // OVERFLOW, let\\'s see if mask will help\\ncarry = 100000000000000000000000000000000 & \\n        001111111111111111111111111111111\\ncarry = 000000000000000000000000000000000\\n```\\nSo, in this case, every iteration number is increasing until we hit an overflow and receive our results.\\nProof that this cyclic magic works can be found here: https://en.wikipedia.org/wiki/Two%27s_complement \"Why it works\" part.\\n## One negative number, short example: a = -47 b = 2\\n```\\na     = 11111111111111111111111111010001\\nb     =                               10\\nans   = 11111111111111111111111111010011\\ncarry =                                0\\n```\\nans is just -45, no comments :)\\n## Two negative numbers: a = -47 b = -53\\n```\\na     = 11111111111111111111111111010001\\nb     = 11111111111111111111111111001011\\nans   =                            11010\\ncarry = 11111111111111111111111110000010\\n\\na     =                            11010\\nb     = 11111111111111111111111110000010\\nans   = 11111111111111111111111110011000\\ncarry =                              100\\n\\na     = 11111111111111111111111110011000\\nb     =                              100\\nans   = 11111111111111111111111110011100\\ncarry =                                0\\n```\\nAgain, as you can see overflow magic does its work and provides us a relevant answer.\\nProof that this cyclic magic works can be found here: https://en.wikipedia.org/wiki/Two%27s_complement \"Why it works\" part.\\n\\nHope this soultion makes more sence to you right now. For me this negative case was a tricky part, so I decided to debug it with you and see what happens there under the hood, so I won\\'t be just copy and pasting algorithm.",
                "solutionTags": [],
                "code": "```\\npublic int getSum(int a, int b) {\\n\\twhile (b != 0) {\\n\\t\\tint ans = a ^ b;\\n\\t\\tint carry = (a & b) << 1;\\n\\t\\ta = ans;\\n\\t\\tb = carry;\\n\\t}\\n\\treturn a;\\n}\\n```\n```\\na     =                           101111\\nb     =                           110101\\nans   =                            11010\\ncarry =                          1001010\\n```\n```\\na     =                            11010\\nb     =                          1001010\\nans   =                          1010000\\ncarry =                            10100\\n```\n```\\na     =                          1010000\\nb     =                            10100\\nans   =                          1000100\\ncarry =                           100000\\n```\n```\\na     =                          1000100\\nb     =                           100000\\nans   =                          1100100\\ncarry =                                0\\n```\n```\\na     = 11111111111111111111111111010001\\nb     =                           110101\\n```\n``` \\n1.  47     = 0000000000000000000000000101111\\n2. ~47     = 1111111111111111111111111010000\\n3. ~47 + 1 = 1111111111111111111111111010001\\n```\n```\\na     = 11111111111111111111111111010001\\nb     =                           110101 // empty spaces are zeroes\\nans   = 11111111111111111111111111100100\\ncarry =                           100010 // empty spaces are zeroes\\n\\na     = 11111111111111111111111111100100\\nb     =                           100010\\nans   = 11111111111111111111111111000110\\ncarry =                          1000000\\n\\na     = 11111111111111111111111111000110\\nb     =                          1000000\\nans   = 11111111111111111111111110000110\\ncarry =                         10000000\\n\\na     = 11111111111111111111111110000110\\nb     =                         10000000\\nans   = 11111111111111111111111100000110\\ncarry =                        100000000\\n\\na     = 11111111111111111111111100000110\\nb     =                        100000000\\nans   = 11111111111111111111111000000110\\ncarry =                       1000000000\\n\\na     = 11111111111111111111111000000110\\nb     =                       1000000000\\nans   = 11111111111111111111110000000110\\ncarry =                      10000000000\\n\\na     = 11111111111111111111110000000110\\nb     =                      10000000000\\nans   = 11111111111111111111100000000110\\ncarry =                     100000000000\\n\\na     = 11111111111111111111100000000110\\nb     =                     100000000000\\nans   = 11111111111111111111000000000110\\ncarry =                    1000000000000\\n\\na     = 11111111111111111111000000000110\\nb     =                    1000000000000\\nans   = 11111111111111111110000000000110\\ncarry =                   10000000000000\\n\\na     = 11111111111111111110000000000110\\nb     =                   10000000000000\\nans   = 11111111111111111100000000000110\\ncarry =                  100000000000000\\n\\na     = 11111111111111111100000000000110\\nb     =                  100000000000000\\nans   = 11111111111111111000000000000110\\ncarry =                 1000000000000000\\n\\na     = 11111111111111111000000000000110\\nb     =                 1000000000000000\\nans   = 11111111111111110000000000000110\\ncarry =                10000000000000000\\n\\na     = 11111111111111110000000000000110\\nb     =                10000000000000000\\nans   = 11111111111111100000000000000110\\ncarry =               100000000000000000\\n\\na     = 11111111111111100000000000000110\\nb     =               100000000000000000\\nans   = 11111111111111000000000000000110\\ncarry =              1000000000000000000\\n\\na     = 11111111111111000000000000000110\\nb     =              1000000000000000000\\nans   = 11111111111110000000000000000110\\ncarry =             10000000000000000000\\n\\na     = 11111111111110000000000000000110\\nb     =             10000000000000000000\\nans   = 11111111111100000000000000000110\\ncarry =            100000000000000000000\\n\\na     = 11111111111100000000000000000110\\nb     =            100000000000000000000\\nans   = 11111111111000000000000000000110\\ncarry =           1000000000000000000000\\n\\na     = 11111111111000000000000000000110\\nb     =           1000000000000000000000\\nans   = 11111111110000000000000000000110\\ncarry =          10000000000000000000000\\n\\na     = 11111111110000000000000000000110\\nb     =          10000000000000000000000\\nans   = 11111111100000000000000000000110\\ncarry =         100000000000000000000000\\n\\na     = 11111111100000000000000000000110\\nb     =         100000000000000000000000\\nans   = 11111111000000000000000000000110\\ncarry =        1000000000000000000000000\\n\\na     = 11111111000000000000000000000110\\nb     =        1000000000000000000000000\\nans   = 11111110000000000000000000000110\\ncarry =       10000000000000000000000000\\n\\na     = 11111110000000000000000000000110\\nb     =       10000000000000000000000000\\nans   = 11111100000000000000000000000110\\ncarry =      100000000000000000000000000\\n\\na     = 11111100000000000000000000000110\\nb     =      100000000000000000000000000\\nans   = 11111000000000000000000000000110\\ncarry =     1000000000000000000000000000\\n\\na     = 11111000000000000000000000000110\\nb     =     1000000000000000000000000000\\nans   = 11110000000000000000000000000110\\ncarry =    10000000000000000000000000000\\n\\na     = 11110000000000000000000000000110\\nb     =    10000000000000000000000000000\\nans   = 11100000000000000000000000000110\\ncarry =   100000000000000000000000000000\\n\\na     = 11100000000000000000000000000110\\nb     =   100000000000000000000000000000\\nans   = 11000000000000000000000000000110\\ncarry =  1000000000000000000000000000000\\n\\na     = 11000000000000000000000000000110\\nb     =  1000000000000000000000000000000\\nans   = 10000000000000000000000000000110\\ncarry = 10000000000000000000000000000000\\n\\na     = 10000000000000000000000000000110\\nb     = 10000000000000000000000000000000\\nans   =                              110\\ncarry =                                0\\n```\n```\\na     = 10000000000000000000000000000110\\nb     = 10000000000000000000000000000000\\n// As you know, ans computed as a ^ b\\na ^ b = 00000000000000000000000000000110 // It\\'s fine, no overflows\\n// As you know, carry computed as (a & b) << 1\\ncarry = 100000000000000000000000000000000 // OVERFLOW, let\\'s see if mask will help\\ncarry = 100000000000000000000000000000000 & \\n        001111111111111111111111111111111\\ncarry = 000000000000000000000000000000000\\n```\n```\\na     = 11111111111111111111111111010001\\nb     =                               10\\nans   = 11111111111111111111111111010011\\ncarry =                                0\\n```\n```\\na     = 11111111111111111111111111010001\\nb     = 11111111111111111111111111001011\\nans   =                            11010\\ncarry = 11111111111111111111111110000010\\n\\na     =                            11010\\nb     = 11111111111111111111111110000010\\nans   = 11111111111111111111111110011000\\ncarry =                              100\\n\\na     = 11111111111111111111111110011000\\nb     =                              100\\nans   = 11111111111111111111111110011100\\ncarry =                                0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1442707,
                "title": "c-solution",
                "content": "C++ Program \\n\\nint getSum(int a, int b) {\\n        while (b!= 0)\\n    {\\n        unsigned carry = a & b;\\n        a = a ^ b;   \\n        b = carry << 1; //shifting carry by one so that adding it to x gives the sum required\\n    }    \\n    return a;\\n    }",
                "solutionTags": [],
                "code": "C++ Program \\n\\nint getSum(int a, int b) {\\n        while (b!= 0)\\n    {\\n        unsigned carry = a & b;\\n        a = a ^ b;   \\n        b = carry << 1; //shifting carry by one so that adding it to x gives the sum required\\n    }    \\n    return a;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1440775,
                "title": "python-solution-with-comments-works-with-negative-arguments",
                "content": "```\\n    def getSum(self, a: int, b: int) -> int:\\n\\n        # Move a and b into the range [0, 4000]\\n        # by taking them mod 4001\\n        # This provides enough precission,\\n        # given that -1000 <= a,b <= 1000\\n        # we have -2000 <= a + b <= 2000.\\n        UPPER_BOUND = 4001\\n        a = a % UPPER_BOUND\\n        b = b % UPPER_BOUND\\n\\n        # Do addition with carry for positive numbers\\n        # Store the result in a\\n        while b:\\n            a, b = a ^ b, (a & b) << 1\\n\\n        # Move a into the range [0, 4000]\\n        # by taking a mod 4001\\n        a = a % UPPER_BOUND\\n\\n        # If a > 2000, then the answer must be negative,\\n        # since a, b <= 1000. Therefore move a into the range\\n        # [-4000, 0] by taking mod -4001. Since we cannot\\n        # use the - operator, we use ~0, which equals -1.\\n        if a > 2000:\\n            a = a % ((~0) * UPPER_BOUND)\\n\\n        return a\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def getSum(self, a: int, b: int) -> int:\\n\\n        # Move a and b into the range [0, 4000]\\n        # by taking them mod 4001\\n        # This provides enough precission,\\n        # given that -1000 <= a,b <= 1000\\n        # we have -2000 <= a + b <= 2000.\\n        UPPER_BOUND = 4001\\n        a = a % UPPER_BOUND\\n        b = b % UPPER_BOUND\\n\\n        # Do addition with carry for positive numbers\\n        # Store the result in a\\n        while b:\\n            a, b = a ^ b, (a & b) << 1\\n\\n        # Move a into the range [0, 4000]\\n        # by taking a mod 4001\\n        a = a % UPPER_BOUND\\n\\n        # If a > 2000, then the answer must be negative,\\n        # since a, b <= 1000. Therefore move a into the range\\n        # [-4000, 0] by taking mod -4001. Since we cannot\\n        # use the - operator, we use ~0, which equals -1.\\n        if a > 2000:\\n            a = a % ((~0) * UPPER_BOUND)\\n\\n        return a\\n        \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1421812,
                "title": "python-solution-using-exponent-property",
                "content": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        \\n        prod = 10**a * 10**b\\n        \\n        return int(math.log10(prod))\\n```\\n\\n1. Use a and b as power to 10 and find the product of it. This is done because of the exponent property: So, 10^a * 10 ^ b = 10^(a+b)\\n2. Next step is to find Log base 10 for the above product. This will give the power value to which 10 has to be raised to get the \\'prod\\' value. In this case, that would be **a+b**\\n3. Since log values are by default in float, we return the answer by converting it to int",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        \\n        prod = 10**a * 10**b\\n        \\n        return int(math.log10(prod))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1362020,
                "title": "kotlin-purely-bit-manipulation-using-full-adders",
                "content": "This solution is based on how an actual computer processor does addition using Full Adders in an Arithmetic Logic Unit (ALU).\\nAs such, it purely uses bit manipulation.\\nThe loop repeats 32 times, for each bit from an integer (32 bits) and a mask is calculated by doing shift left of 1 *i* times.\\nEach time, it calculates the count using the **exclusive-or (xor)** operation, which is the logic operation that makes it possible for two bits to be added (disregarding carry).\\nIt \"adds\": \\n* the *current count*;\\n* the current bit from **a** obtained using previously calculated *mask*;\\n* the current bit from **b** (just like **a**, obtained using mask).\\n* previous *carry*.\\n\\nThe carry is calculated by doing the **and** operation on different pairs of values and doing the **or** operation between them:\\n* bit from a and bit from b;\\n* previous carry and bit from a;\\n* previous carry and bit from b.\\n\\nLastly, carry has to shift left once in order to act like a carry for the next operation.\\n\\n***For more information on how this works, search for processor\\'s ALU, logic gates and everything that comes linked to those, like how a processor works in its entirety (which will then lead you to learn Assembly and more). It\\'s very useful information if you want to take programming seriously.***\\n\\n```\\nclass Solution {\\n    fun getSum(a: Int, b: Int): Int {\\n        var count = 0\\n        var carry = 0\\n        \\n        for(i in 0..31){\\n            val mask = 1 shl i\\n            val bitA = (a and mask)\\n            val bitB = (b and mask)\\n            \\n            count = count xor bitA xor bitB xor carry\\n            \\n            carry = (bitA and bitB) or (carry and bitA) or (carry and bitB)\\n            carry = carry shl 1\\n        }\\n        \\n        return count\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin",
                    "Bit Manipulation",
                    "Bitmask"
                ],
                "code": "```\\nclass Solution {\\n    fun getSum(a: Int, b: Int): Int {\\n        var count = 0\\n        var carry = 0\\n        \\n        for(i in 0..31){\\n            val mask = 1 shl i\\n            val bitA = (a and mask)\\n            val bitB = (b and mask)\\n            \\n            count = count xor bitA xor bitB xor carry\\n            \\n            carry = (bitA and bitB) or (carry and bitA) or (carry and bitB)\\n            carry = carry shl 1\\n        }\\n        \\n        return count\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1274905,
                "title": "python-1-line",
                "content": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(math.log10((10**a) *(10**b)))",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return int(math.log10((10**a) *(10**b)))",
                "codeTag": "Java"
            },
            {
                "id": 1013013,
                "title": "100-faster-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        unsigned int carry=(a&b);\\n        int sum=a^b;\\n        if(carry==0)\\n            return sum;\\n        carry<<=1;\\n        return getSum(carry,sum);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        unsigned int carry=(a&b);\\n        int sum=a^b;\\n        if(carry==0)\\n            return sum;\\n        carry<<=1;\\n        return getSum(carry,sum);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 909225,
                "title": "beats-100-in-space-and-time-c",
                "content": "```\\nint getSum(int a, int b) {\\n\\tint ans = 0, carry = 0;\\n\\tunsigned newA = a;\\n\\tunsigned newB = b;\\n\\twhile(newB){\\n\\t\\tans = newA^newB;\\n\\t\\tcarry = (newA&newB)<<1;\\n\\t\\tnewA = ans;\\n\\t\\tnewB = carry;\\n\\t}\\n\\n\\treturn newA;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint getSum(int a, int b) {\\n\\tint ans = 0, carry = 0;\\n\\tunsigned newA = a;\\n\\tunsigned newB = b;\\n\\twhile(newB){\\n\\t\\tans = newA^newB;\\n\\t\\tcarry = (newA&newB)<<1;\\n\\t\\tnewA = ans;\\n\\t\\tnewB = carry;\\n\\t}\\n\\n\\treturn newA;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 863563,
                "title": "java-solution",
                "content": "\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        \\n         while (b != 0)  \\n        {  \\n            int carry = a & b;  \\n            a = a ^ b; \\n            b = carry << 1; \\n        } \\n        return a; \\n        \\n    }\\n}\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int getSum(int a, int b) {\\n        \\n         while (b != 0)  \\n        {  \\n            int carry = a & b;  \\n            a = a ^ b; \\n            b = carry << 1; \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 760930,
                "title": "c-iterative-bit-manipulation-literally-no-and",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        while (b) {\\n            int c = (a & b & 0x7fffffff) << 1;\\n\\t\\t\\t/**\\n\\t\\t\\t1. Use bitwise AND operation to calculate the current carry.\\n\\t\\t\\t2. Perform a single left shift on the carry.\\n\\t\\t\\t3. \"& 0x7fffffff\" Just because the compiler in Leetcode does not allow left shift when the first bit is 1.\\n\\t\\t\\t**/\\n            a = a ^ b;\\n\\t\\t\\t/**\\n\\t\\t\\tPerform addition by using XOR.\\n\\t\\t\\tNote that the carry is not considered here.\\n\\t\\t\\t**/\\n            b = c;\\n\\t\\t\\t/**\\n\\t\\t\\tIf carry is not zero, we have to add carry to the current result in next turn.\\n\\t\\t\\tOtherwise, we already have the result.\\n\\t\\t\\t**/\\n        }\\n\\t\\t/**\\n\\t\\tWhen the carry is zero, we get the result in a.\\n\\t\\t**/\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        while (b) {\\n            int c = (a & b & 0x7fffffff) << 1;\\n\\t\\t\\t/**\\n\\t\\t\\t1. Use bitwise AND operation to calculate the current carry.\\n\\t\\t\\t2. Perform a single left shift on the carry.\\n\\t\\t\\t3. \"& 0x7fffffff\" Just because the compiler in Leetcode does not allow left shift when the first bit is 1.\\n\\t\\t\\t**/\\n            a = a ^ b;\\n\\t\\t\\t/**\\n\\t\\t\\tPerform addition by using XOR.\\n\\t\\t\\tNote that the carry is not considered here.\\n\\t\\t\\t**/\\n            b = c;\\n\\t\\t\\t/**\\n\\t\\t\\tIf carry is not zero, we have to add carry to the current result in next turn.\\n\\t\\t\\tOtherwise, we already have the result.\\n\\t\\t\\t**/\\n        }\\n\\t\\t/**\\n\\t\\tWhen the carry is zero, we get the result in a.\\n\\t\\t**/\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 737552,
                "title": "add-two-numbers-without",
                "content": "0 ms and 100%.\\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        if(b==0) return a;\\n        else\\n            return getSum(a^b, unsigned(a&b)<<1);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        if(b==0) return a;\\n        else\\n            return getSum(a^b, unsigned(a&b)<<1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 660740,
                "title": "c-intuitive-solution-faster-than-100-memory-usage-lower-than-100",
                "content": "```\\n#include <bitset>\\n\\nusing std::bitset;\\n\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n\\n        auto aBitset = bitset<sizeof(a) * 8>(a);\\n        auto bBitset = bitset<sizeof(b) * 8>(b);\\n        assert(aBitset.size() == bBitset.size());\\n        \\n        bool carry = false;\\n        for (int i = 0; i < aBitset.size(); ++ i) {\\n            bool axb = aBitset[i] ^ bBitset[i];\\n            bool sum = axb ^ carry;\\n            carry = (aBitset[i] && bBitset[i]) || (axb && carry);\\n            aBitset[i] = sum;\\n        }\\n        \\n        return (int) aBitset.to_ulong();\\n    }\\n};\\n```\\n\\nThe idea behind this one is that the code emulates exactly what a full adder is doing. I used this video to learn, and basically just copied the architecture (at the timestamp) of the logic gates into code: https://youtu.be/wvJc9CZcvBc?t=408",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n#include <bitset>\\n\\nusing std::bitset;\\n\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n\\n        auto aBitset = bitset<sizeof(a) * 8>(a);\\n        auto bBitset = bitset<sizeof(b) * 8>(b);\\n        assert(aBitset.size() == bBitset.size());\\n        \\n        bool carry = false;\\n        for (int i = 0; i < aBitset.size(); ++ i) {\\n            bool axb = aBitset[i] ^ bBitset[i];\\n            bool sum = axb ^ carry;\\n            carry = (aBitset[i] && bBitset[i]) || (axb && carry);\\n            aBitset[i] = sum;\\n        }\\n        \\n        return (int) aBitset.to_ulong();\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 622792,
                "title": "c-bitwise",
                "content": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        unsigned int carry = 1;\\n        while (carry) {\\n            carry = a & b;\\n            a = a ^ b;\\n            b = carry << 1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n        unsigned int carry = 1;\\n        while (carry) {\\n            carry = a & b;\\n            a = a ^ b;\\n            b = carry << 1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 555217,
                "title": "c-0ms-iterative-recursive-solution-beats-100-time-and-space",
                "content": "Iterative Solution\\n```\\nint getSum(int a, int b) {\\n        while(b){\\n            int carry = (unsigned int)(a & b) << 1;  // unsigned int to handle negitive numbers\\n            a ^= b;\\n            b = carry;\\n        }\\n        return a;\\n    }\\n```\\nRecursive Solution\\n```\\nint getSum(int a, int b) {\\n        return b? getSum(a^b, (unsigned int)(a&b)<<1):a;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nint getSum(int a, int b) {\\n        while(b){\\n            int carry = (unsigned int)(a & b) << 1;  // unsigned int to handle negitive numbers\\n            a ^= b;\\n            b = carry;\\n        }\\n        return a;\\n    }\\n```\n```\\nint getSum(int a, int b) {\\n        return b? getSum(a^b, (unsigned int)(a&b)<<1):a;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 400375,
                "title": "python-methods-easy-to-understand",
                "content": "1. sum function in list (not recommend)\\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \\n        # sum function\\n        return sum([a,b]) \\n```\\n\\n2. Bitwise AND and XOR for addition (while loop)\\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n\\t\\n        # Prevent negative number\\n        while b & 0xffffffff: # b & 0xffffffff will remain the same as b\\n            c = a & b\\n            a = a ^ b\\n            b = c << 1\\n        \\n        return a & 0xffffffff if b > 0xffffffff else a\\n```\\n\\n3. Bitwise AND and XOR for addition (recursive)\\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        # Bitwise recursive\\n        if b & 0xffffffff != 0:\\n            return self.getSum(a ^ b, (a & b) << 1) \\n        else:\\n            return (a & 0xffffffff) if b > 0xffffffff else a\\n```",
                "solutionTags": [
                    "Python3",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        \\n        # sum function\\n        return sum([a,b]) \\n```\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n\\t\\n        # Prevent negative number\\n        while b & 0xffffffff: # b & 0xffffffff will remain the same as b\\n            c = a & b\\n            a = a ^ b\\n            b = c << 1\\n        \\n        return a & 0xffffffff if b > 0xffffffff else a\\n```\n```\\nclass Solution(object):\\n    def getSum(self, a, b):\\n        # Bitwise recursive\\n        if b & 0xffffffff != 0:\\n            return self.getSum(a ^ b, (a & b) << 1) \\n        else:\\n            return (a & 0xffffffff) if b > 0xffffffff else a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 358212,
                "title": "java-100-solution-with-chinese-explanation",
                "content": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        // \\u8F49\\u63DB\\u6210\\u6C92\\u9032\\u4F4D\\u7684\\u90E8\\u5206+\\u9032\\u4F4D\\u7684\\u90E8\\u5206\\n        if(b==0){\\n            // \\u5982\\u679C\\u6C92\\u9032\\u4F4D\\u4E86\\u5C31\\u76F4\\u63A5\\u56DE\\u50B3\\u6C92\\u9032\\u4F4D\\u7684\\u90E8\\u5206\\n            return a;\\n        }\\n        // a^b \\u7528XOR\\u53D6\\u5F97\\u6C92\\u9032\\u4F4D\\u7684\\u503C\\n        // a&b \\u7528AND\\u53D6\\u5F97carry\\u7684\\u503C, \\u56E0\\u70BA\\u662F\\u9032\\u4F4D\\u5FC5\\u9808\\u5DE6\\u79FB\\u4E00\\u4F4D\\n        return getSum(a^b,(a&b)<<1);\\n        // \\u4EE5\\u5341\\u9032\\u5236\\u7684\\u6982\\u5FF5\\u4F86\\u770B\\n        // 39+75 \\n        // => 04(\\u6C92\\u9032\\u4F4D\\u7684\\u90E8\\u5206) + 110(\\u500B\\u4F4D\\u6578\\u5341\\u4F4D\\u6578\\u90FD\\u6709\\u9032\\u4F4D\\u6240\\u4EE5carry\\u90FD\\u662F1, \\u6700\\u5F8C\\u56E0\\u70BA\\u9032\\u4F4D\\u5DE6\\u79FB\\u4E00\\u500B)\\n        // answer = 114\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        // \\u8F49\\u63DB\\u6210\\u6C92\\u9032\\u4F4D\\u7684\\u90E8\\u5206+\\u9032\\u4F4D\\u7684\\u90E8\\u5206\\n        if(b==0){\\n            // \\u5982\\u679C\\u6C92\\u9032\\u4F4D\\u4E86\\u5C31\\u76F4\\u63A5\\u56DE\\u50B3\\u6C92\\u9032\\u4F4D\\u7684\\u90E8\\u5206\\n            return a;\\n        }\\n        // a^b \\u7528XOR\\u53D6\\u5F97\\u6C92\\u9032\\u4F4D\\u7684\\u503C\\n        // a&b \\u7528AND\\u53D6\\u5F97carry\\u7684\\u503C, \\u56E0\\u70BA\\u662F\\u9032\\u4F4D\\u5FC5\\u9808\\u5DE6\\u79FB\\u4E00\\u4F4D\\n        return getSum(a^b,(a&b)<<1);\\n        // \\u4EE5\\u5341\\u9032\\u5236\\u7684\\u6982\\u5FF5\\u4F86\\u770B\\n        // 39+75 \\n        // => 04(\\u6C92\\u9032\\u4F4D\\u7684\\u90E8\\u5206) + 110(\\u500B\\u4F4D\\u6578\\u5341\\u4F4D\\u6578\\u90FD\\u6709\\u9032\\u4F4D\\u6240\\u4EE5carry\\u90FD\\u662F1, \\u6700\\u5F8C\\u56E0\\u70BA\\u9032\\u4F4D\\u5DE6\\u79FB\\u4E00\\u500B)\\n        // answer = 114\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 201089,
                "title": "javascript-o-sizeof-number-time-o-1-space-recursive-bit-manipulation",
                "content": "```javascript\\n/**\\n * Time: O(sizeof(number))\\n * Space: O(1)\\n */\\n\\n/**\\n * @param {number} a\\n * @param {number} b\\n * @return {number}\\n */\\nfunction getSum(a, b) {\\n  const sum = a ^ b; // XOR derives the sum bits, without carry\\n  const carry = (a & b) << 1; // AND derives the carry bits\\n\\n  if (!carry) {\\n    return sum;\\n  }\\n\\n  return getSum(sum, carry);\\n};\\n```",
                "solutionTags": [],
                "code": "```javascript\\n/**\\n * Time: O(sizeof(number))\\n * Space: O(1)\\n */\\n\\n/**\\n * @param {number} a\\n * @param {number} b\\n * @return {number}\\n */\\nfunction getSum(a, b) {\\n  const sum = a ^ b; // XOR derives the sum bits, without carry\\n  const carry = (a & b) << 1; // AND derives the carry bits\\n\\n  if (!carry) {\\n    return sum;\\n  }\\n\\n  return getSum(sum, carry);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 149933,
                "title": "python-solution-with-complete-explanation-100-32-ms",
                "content": "I\\'m not sure what LeetCode was thinking on this one.  This was not easy.  It might have been easier in C, where integers have specific sizes but I thought this was a challange; I needed to create function to print negative bits as they are stored and had to work around edge cases caused by Python\\'s infinite integer.\\n\\nHere is my development code with comments that explain it all; the code has a debug mode so you can see how the bits of the updating sum aligns with the bits of the carry.  \\n\\nThis is not the code I submitted obviously; I ripped out all the debugs and other unneeded code.  For this post, I thought it would be more useful to someone who was having trouble to be able to see the data as it is transforming, so I pasted my entire development copy.  Just run it on your Linux VM as is.\\n\\n```\\n#!/usr/bin/env python3\\ndef tobin(in_int, width=8):\\n    \"\"\"\\n    :type i: int\\n    :type width: int\\n\\n    Prints positive and negative integers as bits\\n    \"\"\"\\n    return \\'\\'.join(\\n            [ str((in_int>>y)&1) for y in range(width-1, -1, -1)]\\n            )\\n\\nclass Solution:\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        if DEBUG:\\n            print(\"enter getSum: a, b:\", a, b)\\n\\n        # Return if a and b would add to zero; no point in processing\\n        if a == -b:\\n            return 0\\n\\n        # This algorithm only works fine when both \\'a\\' and \\'b\\' are postive.\\n        # However, when one is a negative, then \\'a\\' must have a smaller abs\\n        # value and be forced to be positive, otherwise, a carry bit will\\n        # always be generated due to the leading 1\\'s of a negative number\\n        # always aligning causing an infinite loop.  Examples follow:\\n        #\\n        # ---------------------------------------------------------------------\\n        # ex. 1, \\'a\\' has larger abs value\\n        # ---------------------------------------------------------------------\\n        # getSum: a, b: 3 -1\\n        # processing...\\n        # a:           00000011\\n        # b:           11111111\\n        # c=(a&b)<<1:  00000110\\n        # a=a^b:       11111(1)00\\n        # b=c:         00000(1)10\\n        # ------------------------\\n        # a:           11111100\\n        # b:           00000110\\n        # c=(a&b)<<1:  00001000\\n        # a=a^b:       1111(1)010\\n        # b=c:         0000(1)000\\n        # ------------------------\\n        # a:           11111010\\n        # b:           00001000\\n        # c=(a&b)<<1:  00010000\\n        # a=a^b:       111(1)0010\\n        # b=c:         000(1)0000\\n        # ------------------------\\n        # ...\\n        #\\n        #\\n        # ---------------------------------------------------------------------\\n        # ex. 2, \\'a\\' has smaller abs value but is negative\\n        # ---------------------------------------------------------------------\\n        # getSum: a, b: 3 -1\\n        # abs(a) was greater than abs(b)\\n        # swapped a<->b so \\'a\\' would have a smaller abs value: a, b: -1 3\\n        # processing...\\n        # a:           11111111\\n        # b:           00000011\\n        # c=(a&b)<<1:  00000110\\n        # a=a^b:       11111(1)00\\n        # b=c:         00000(1)10\\n        # ------------------------\\n        # a:           11111100\\n        # b:           00000110\\n        # c=(a&b)<<1:  00001000\\n        # a=a^b:       1111(1)010\\n        # b=c:         0000(1)000\\n        # ------------------------\\n        # a:           11111010\\n        # b:           00001000\\n        # c=(a&b)<<1:  00010000\\n        # a=a^b:       111(1)0010\\n        # b=c:         000(1)0000\\n        # ------------------------\\n        # ...\\n        #\\n        #\\n        # ---------------------------------------------------------------------\\n        # ex. 3, success after sorting and sign tweaks\\n        # ---------------------------------------------------------------------\\n        # enter getSum: a, b: 3 -1\\n        # abs(a) was greater than abs(b)\\n        # swapped a/b so a would have a smaller abs value: a, b: -1 3\\n        # toggle signs so \\'a\\' is positive: a, b: -1 3\\n        # enter getSum: a, b: 1 -3\\n        # swapped a/b so a would have a smaller abs value: a, b: 1 -3\\n        # processing...\\n        # a:           00000001\\n        # b:           11111101\\n        # c=(a&b)<<1:  00000010\\n        # a=a^b:       11111100\\n        # b=c:         00000010\\n        # ------------------------\\n        # a:           11111100\\n        # b:           00000010\\n        # c=(a&b)<<1:  00000000\\n        # a=a^b:       11111110\\n        # b=c:         00000000\\n        # ------------------------\\n        # 3 + -1 = 2\\n        #\\n        # First, sort so \\'a\\' has the lesser abs value than \\'b\\'.\\n        # Second, if \\'a\\' is negatire, toggle the signs of both;\\n        # toggle the result in this case.\\n\\n        if abs(a) > abs(b):\\n            a, b = b, a\\n            if DEBUG:\\n                print(\"abs(a) was greater than abs(b)\")\\n                print(\"swapped a/b so a would have a smaller abs value: a, b:\", a, b)\\n\\n        # \\'a\\' must be positive.  if it is not toggel both signs, then toggle the sign of the result.\\n        if a < 0:\\n            if DEBUG:\\n                print(\"toggle signs so \\'a\\' is positive: a, b:\", a, b)\\n            return -self.getSum(-a, -b)\\n\\n        if DEBUG:\\n            print(\"processing...\")\\n\\n        # The goal of this loop is to:\\n        # 1. get all carry bits per pass.\\n        # 2. sum a and b (a ^ b), without regards to carry\\n        # 3. sum carry with a until there are no more carry bits.  Each pass can generate new carry bits.\\n\\n        idx = 0\\n        while b:\\n            if DEBUG:\\n                print(\"a:          \", tobin(a))\\n                print(\"b:          \", tobin(b))\\n\\n            # break on infinite loop\\n            if idx > 8:\\n                break\\n\\n            # assign all carry bits for this pass\\n            c = (a & b) << 1\\n            if DEBUG:\\n                print(\"c=(a&b)<<1: \", tobin(c))\\n\\n            # sum a with b, w/o regards to carry bits this pass\\n            a = a ^ b\\n            if DEBUG:\\n                print(\"a=a^b:      \", tobin(a))\\n\\n            # assign carry to b; repeat until carry == 0\\n            b = c\\n            if DEBUG:\\n                print(\"b=c:        \", tobin(b))\\n                print(\"------------------------\")\\n            idx += 1\\n        return a\\n\\n\\n# test data\\ncases = [\\n        [[0,0], 0],\\n        [[0,1], 1],\\n        [[1,0], 1],\\n        [[1,1], 2],\\n        [[2,0], 2],\\n        [[2,1], 3],\\n        [[2,2], 4],\\n        [[0,2], 2],\\n        [[1,2], 3],\\n        [[2,2], 4],\\n        [[3,0], 3],\\n        [[3,1], 4],\\n        [[3,2], 5],\\n        [[3,3], 6],\\n        [[0,4], 4],\\n        [[1,4], 5],\\n        [[2,4], 6],\\n        [[3,4], 7],\\n        [[4,4], 8],\\n        [[5,0], 5],\\n        [[5,1], 6],\\n        [[5,2], 7],\\n        [[5,3], 8],\\n        [[5,4], 9],\\n        [[5,5], 10],\\n        [[0,-1], -1],\\n        [[-1,0], -1],\\n        [[-1,-1], -2],\\n        [[-2,-1], -3],\\n        [[-1,-2], -3],\\n        [[-1,-3], -4],\\n        [[-1,-4], -5],\\n        [[-2,-4], -6],\\n        [[-3,-4], -7],\\n        [[-4,-4], -8],\\n        [[-1,1], 0],\\n        [[-2,1], -1],\\n        [[-3,1], -2],\\n        [[1,-1], 0],\\n        [[2,-1], 1],\\n        [[3,-1], 2],\\n        [[4,-1], 3],\\n        [[4,-2], 2],\\n        [[4,-3], 1],\\n        [[4,-4], 0],\\n        [[1,-3], -2],\\n        ]\\n\\n\\n# test runner\\nexit_status = 0\\nDEBUG = True\\n\\nsol = Solution()\\n\\nfor case in cases:\\n    if DEBUG:\\n        print(\"------------------------\")\\n    ret = sol.getSum(*case[0])\\n    if ret != case[1]:\\n        print(\\'[ERROR  ] %s + %s != %s\\' % (case[0][0], case[0][1], ret))\\n        exit_status = 1\\n    else:\\n        print(\\'[     ok] %s + %s = %s\\' % (case[0][0], case[0][1], case[1]))\\n\\nif exit_status != 0:\\n    print(\\'ERROR(s) were detected\\')\\n\\nexit(exit_status)\\n```",
                "solutionTags": [],
                "code": "```\\n#!/usr/bin/env python3\\ndef tobin(in_int, width=8):\\n    \"\"\"\\n    :type i: int\\n    :type width: int\\n\\n    Prints positive and negative integers as bits\\n    \"\"\"\\n    return \\'\\'.join(\\n            [ str((in_int>>y)&1) for y in range(width-1, -1, -1)]\\n            )\\n\\nclass Solution:\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n        if DEBUG:\\n            print(\"enter getSum: a, b:\", a, b)\\n\\n        # Return if a and b would add to zero; no point in processing\\n        if a == -b:\\n            return 0\\n\\n        # This algorithm only works fine when both \\'a\\' and \\'b\\' are postive.\\n        # However, when one is a negative, then \\'a\\' must have a smaller abs\\n        # value and be forced to be positive, otherwise, a carry bit will\\n        # always be generated due to the leading 1\\'s of a negative number\\n        # always aligning causing an infinite loop.  Examples follow:\\n        #\\n        # ---------------------------------------------------------------------\\n        # ex. 1, \\'a\\' has larger abs value\\n        # ---------------------------------------------------------------------\\n        # getSum: a, b: 3 -1\\n        # processing...\\n        # a:           00000011\\n        # b:           11111111\\n        # c=(a&b)<<1:  00000110\\n        # a=a^b:       11111(1)00\\n        # b=c:         00000(1)10\\n        # ------------------------\\n        # a:           11111100\\n        # b:           00000110\\n        # c=(a&b)<<1:  00001000\\n        # a=a^b:       1111(1)010\\n        # b=c:         0000(1)000\\n        # ------------------------\\n        # a:           11111010\\n        # b:           00001000\\n        # c=(a&b)<<1:  00010000\\n        # a=a^b:       111(1)0010\\n        # b=c:         000(1)0000\\n        # ------------------------\\n        # ...\\n        #\\n        #\\n        # ---------------------------------------------------------------------\\n        # ex. 2, \\'a\\' has smaller abs value but is negative\\n        # ---------------------------------------------------------------------\\n        # getSum: a, b: 3 -1\\n        # abs(a) was greater than abs(b)\\n        # swapped a<->b so \\'a\\' would have a smaller abs value: a, b: -1 3\\n        # processing...\\n        # a:           11111111\\n        # b:           00000011\\n        # c=(a&b)<<1:  00000110\\n        # a=a^b:       11111(1)00\\n        # b=c:         00000(1)10\\n        # ------------------------\\n        # a:           11111100\\n        # b:           00000110\\n        # c=(a&b)<<1:  00001000\\n        # a=a^b:       1111(1)010\\n        # b=c:         0000(1)000\\n        # ------------------------\\n        # a:           11111010\\n        # b:           00001000\\n        # c=(a&b)<<1:  00010000\\n        # a=a^b:       111(1)0010\\n        # b=c:         000(1)0000\\n        # ------------------------\\n        # ...\\n        #\\n        #\\n        # ---------------------------------------------------------------------\\n        # ex. 3, success after sorting and sign tweaks\\n        # ---------------------------------------------------------------------\\n        # enter getSum: a, b: 3 -1\\n        # abs(a) was greater than abs(b)\\n        # swapped a/b so a would have a smaller abs value: a, b: -1 3\\n        # toggle signs so \\'a\\' is positive: a, b: -1 3\\n        # enter getSum: a, b: 1 -3\\n        # swapped a/b so a would have a smaller abs value: a, b: 1 -3\\n        # processing...\\n        # a:           00000001\\n        # b:           11111101\\n        # c=(a&b)<<1:  00000010\\n        # a=a^b:       11111100\\n        # b=c:         00000010\\n        # ------------------------\\n        # a:           11111100\\n        # b:           00000010\\n        # c=(a&b)<<1:  00000000\\n        # a=a^b:       11111110\\n        # b=c:         00000000\\n        # ------------------------\\n        # 3 + -1 = 2\\n        #\\n        # First, sort so \\'a\\' has the lesser abs value than \\'b\\'.\\n        # Second, if \\'a\\' is negatire, toggle the signs of both;\\n        # toggle the result in this case.\\n\\n        if abs(a) > abs(b):\\n            a, b = b, a\\n            if DEBUG:\\n                print(\"abs(a) was greater than abs(b)\")\\n                print(\"swapped a/b so a would have a smaller abs value: a, b:\", a, b)\\n\\n        # \\'a\\' must be positive.  if it is not toggel both signs, then toggle the sign of the result.\\n        if a < 0:\\n            if DEBUG:\\n                print(\"toggle signs so \\'a\\' is positive: a, b:\", a, b)\\n            return -self.getSum(-a, -b)\\n\\n        if DEBUG:\\n            print(\"processing...\")\\n\\n        # The goal of this loop is to:\\n        # 1. get all carry bits per pass.\\n        # 2. sum a and b (a ^ b), without regards to carry\\n        # 3. sum carry with a until there are no more carry bits.  Each pass can generate new carry bits.\\n\\n        idx = 0\\n        while b:\\n            if DEBUG:\\n                print(\"a:          \", tobin(a))\\n                print(\"b:          \", tobin(b))\\n\\n            # break on infinite loop\\n            if idx > 8:\\n                break\\n\\n            # assign all carry bits for this pass\\n            c = (a & b) << 1\\n            if DEBUG:\\n                print(\"c=(a&b)<<1: \", tobin(c))\\n\\n            # sum a with b, w/o regards to carry bits this pass\\n            a = a ^ b\\n            if DEBUG:\\n                print(\"a=a^b:      \", tobin(a))\\n\\n            # assign carry to b; repeat until carry == 0\\n            b = c\\n            if DEBUG:\\n                print(\"b=c:        \", tobin(b))\\n                print(\"------------------------\")\\n            idx += 1\\n        return a\\n\\n\\n# test data\\ncases = [\\n        [[0,0], 0],\\n        [[0,1], 1],\\n        [[1,0], 1],\\n        [[1,1], 2],\\n        [[2,0], 2],\\n        [[2,1], 3],\\n        [[2,2], 4],\\n        [[0,2], 2],\\n        [[1,2], 3],\\n        [[2,2], 4],\\n        [[3,0], 3],\\n        [[3,1], 4],\\n        [[3,2], 5],\\n        [[3,3], 6],\\n        [[0,4], 4],\\n        [[1,4], 5],\\n        [[2,4], 6],\\n        [[3,4], 7],\\n        [[4,4], 8],\\n        [[5,0], 5],\\n        [[5,1], 6],\\n        [[5,2], 7],\\n        [[5,3], 8],\\n        [[5,4], 9],\\n        [[5,5], 10],\\n        [[0,-1], -1],\\n        [[-1,0], -1],\\n        [[-1,-1], -2],\\n        [[-2,-1], -3],\\n        [[-1,-2], -3],\\n        [[-1,-3], -4],\\n        [[-1,-4], -5],\\n        [[-2,-4], -6],\\n        [[-3,-4], -7],\\n        [[-4,-4], -8],\\n        [[-1,1], 0],\\n        [[-2,1], -1],\\n        [[-3,1], -2],\\n        [[1,-1], 0],\\n        [[2,-1], 1],\\n        [[3,-1], 2],\\n        [[4,-1], 3],\\n        [[4,-2], 2],\\n        [[4,-3], 1],\\n        [[4,-4], 0],\\n        [[1,-3], -2],\\n        ]\\n\\n\\n# test runner\\nexit_status = 0\\nDEBUG = True\\n\\nsol = Solution()\\n\\nfor case in cases:\\n    if DEBUG:\\n        print(\"------------------------\")\\n    ret = sol.getSum(*case[0])\\n    if ret != case[1]:\\n        print(\\'[ERROR  ] %s + %s != %s\\' % (case[0][0], case[0][1], ret))\\n        exit_status = 1\\n    else:\\n        print(\\'[     ok] %s + %s = %s\\' % (case[0][0], case[0][1], case[1]))\\n\\nif exit_status != 0:\\n    print(\\'ERROR(s) were detected\\')\\n\\nexit(exit_status)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 140525,
                "title": "python-3",
                "content": "```\\nclass Solution:\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n\\n        if a == -b:\\n            return 0\\n        if abs(a) > abs(b):\\n            a, b = b, a\\n        if a < 0:\\n            return -self.getSum(-a, -b)\\n        while b:\\n            c = a & b\\n            a ^= b\\n            b = c << 1\\n        return a\\n\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def getSum(self, a, b):\\n        \"\"\"\\n        :type a: int\\n        :type b: int\\n        :rtype: int\\n        \"\"\"\\n\\n        if a == -b:\\n            return 0\\n        if abs(a) > abs(b):\\n            a, b = b, a\\n        if a < 0:\\n            return -self.getSum(-a, -b)\\n        while b:\\n            c = a & b\\n            a ^= b\\n            b = c << 1\\n        return a\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84370,
                "title": "clean-python-code",
                "content": "```\\nclass Solution(object):\\n    def add(self, a, b):\\n        for _ in xrange(32):\\n            a, b = a ^ b, (a & b) << 1\\n        return a\\n\\n    def getSum(self, a, b):\\n        s = self.add(a, b) & 0xFFFFFFFF\\n\\n        # if sum is negative, we should translate two's complement to\\n        # the true form\\n        if s & 0x80000000:\\n            return -self.add(~(s & 0x7FFFFFFF) & 0x7FFFFFFF, 1)\\n\\n        return s\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def add(self, a, b):\\n        for _ in xrange(32):\\n            a, b = a ^ b, (a & b) << 1\\n        return a\\n\\n    def getSum(self, a, b):\\n        s = self.add(a, b) & 0xFFFFFFFF\\n\\n        # if sum is negative, we should translate two's complement to\\n        # the true form\\n        if s & 0x80000000:\\n            return -self.add(~(s & 0x7FFFFFFF) & 0x7FFFFFFF, 1)\\n\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84384,
                "title": "c-solution",
                "content": "```\\nint getSum(int a, int b) {\\n    while (a & b) {\\n        a = a ^ b;\\n        b = ((a ^ b) & b) << 1;\\n    }\\n    return a ^ b;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint getSum(int a, int b) {\\n    while (a & b) {\\n        a = a ^ b;\\n        b = ((a ^ b) & b) << 1;\\n    }\\n    return a ^ b;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 84390,
                "title": "my-java-solution",
                "content": "    public int getSum(int a, int b) {\\n        while ((a & b) != 0x00) {//check carry bit\\n            final int x = (a & b) << 1;//same bit has carry\\n            final int y = (a ^ b);     //different bit\\n            a = x;\\n            b = y;\\n        }\\n        return a | b;\\n    }",
                "solutionTags": [],
                "code": "    public int getSum(int a, int b) {\\n        while ((a & b) != 0x00) {//check carry bit\\n            final int x = (a & b) << 1;//same bit has carry\\n            final int y = (a ^ b);     //different bit\\n            a = x;\\n            b = y;\\n        }\\n        return a | b;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 84418,
                "title": "ruby-solution",
                "content": "```\\n# @param {Integer} a\\n# @param {Integer} b\\n# @return {Integer}\\ndef get_sum(a, b)\\n    # http://stackoverflow.com/questions/8698959/how-to-force-ruby-to-store-a-small-number-as-32-bit-integer\\n    a = Array(a).pack('l').unpack('l').first\\n    b = Array(b).pack('l').unpack('l').first\\n    \\n    # https://discuss.leetcode.com/topic/50178/golang-0ms-with-explantation\\n    #   A\\tB\\tC\\tS\\n    #   0\\t0\\t0\\t0\\n    #   1\\t0\\t0\\t1\\n    #   0\\t1\\t0\\t1\\n    #   1\\t1\\t1\\t0\\n    \\n    return a if b.zero?\\n    return b if a.zero?\\n    \\n    sum   = a ^ b\\n    carry = (a & b) << 1\\n    \\n    get_sum(sum, carry)\\nend\\n```",
                "solutionTags": [],
                "code": "```\\n# @param {Integer} a\\n# @param {Integer} b\\n# @return {Integer}\\ndef get_sum(a, b)\\n    # http://stackoverflow.com/questions/8698959/how-to-force-ruby-to-store-a-small-number-as-32-bit-integer\\n    a = Array(a).pack('l').unpack('l').first\\n    b = Array(b).pack('l').unpack('l').first\\n    \\n    # https://discuss.leetcode.com/topic/50178/golang-0ms-with-explantation\\n    #   A\\tB\\tC\\tS\\n    #   0\\t0\\t0\\t0\\n    #   1\\t0\\t0\\t1\\n    #   0\\t1\\t0\\t1\\n    #   1\\t1\\t1\\t0\\n    \\n    return a if b.zero?\\n    return b if a.zero?\\n    \\n    sum   = a ^ b\\n    carry = (a & b) << 1\\n    \\n    get_sum(sum, carry)\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 84432,
                "title": "a-simple-of-java-solution-with-0ms-add-a-example-of-picture",
                "content": "public int getSum(int a, int b) {\\n\\n            int sum=a^b;\\n\\t        int carry=a&b;\\n\\t        int tmp=0;\\t        \\n\\t        while(carry!=0){\\n\\t            carry=carry<<1;\\n\\t            tmp=sum;\\n\\t            sum=carry^sum;\\n\\t            carry=carry&tmp;\\n\\t        }\\t       \\n\\t        return sum;\\n    }",
                "solutionTags": [],
                "code": "public int getSum(int a, int b) {\\n\\n            int sum=a^b;\\n\\t        int carry=a&b;\\n\\t        int tmp=0;\\t        \\n\\t        while(carry!=0){\\n\\t            carry=carry<<1;\\n\\t            tmp=sum;\\n\\t            sum=carry^sum;\\n\\t            carry=carry&tmp;\\n\\t        }\\t       \\n\\t        return sum;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 84441,
                "title": "1-line-bit-manipulation-and-3-line-math-solutions-0ms-in-c-well-explained",
                "content": "Brief explanation here:\\n\\n- using bit manipulation to split the `a+b` process\\n- 100 + 011 = 111 using `^` can help us to add `different` bits    \\n- 100 + 100 = (100 & 100) << 1 = 1000 using `&` can help us handle the `same` bits\\n\\nthen we're done here `getSum(a, b) -> getSum(a^b, (a&b)<<1)`\\n\\n    class Solution {\\n    public:\\n        int getSum(int a, int b) \\n        {\\n            return b? getSum(a^b, (a&b)<<1):a;\\n        }\\n    };\\n\\n\\n\\n\\n----------\\n\\nAn intuitive math solution is also enclosed here.\\n\\n\\n    class Solution {\\n    public:\\n        int getSum(int a, int b) \\n        {\\n            if(a < b) swap(a, b);\\n            if(a==INT_MAX && b==INT_MIN) return -1;\\n            return (log(pow(1.1, b)*pow(1.1,a))/log(1.1));\\n        }\\n    };",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Bit Manipulation"
                ],
                "code": "class Solution {\\n    public:\\n        int getSum(int a, int b) \\n        {\\n            return b? getSum(a^b, (a&b)<<1):a;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 84450,
                "title": "c-using-xor-with-explaination",
                "content": "Sum of two bits can be obtained by performing XOR (^) of the two bits. Carry bit can be obtained by performing AND (&) of two bits.\\nIt is simple  logic that can be used to add 2 single bits. We can extend this logic for integers. If x and y don\\u2019t have set bits at same position(s), then bitwise XOR (^) of x and y gives the sum of x and y. To incorporate common set bits also, bitwise AND (&) is used. Bitwise AND of x and y gives all carry bits. We calculate (x & y) << 1 and add it to x ^ y to get the required result.\\n\\n    int getSum(int a, int b) {\\n                while(b != 0){\\n                    int carry = a & b;\\n                    a = a ^ b;\\n                    b = carry << 1;\\n                }\\n                return a;\\n            }",
                "solutionTags": [
                    "C++"
                ],
                "code": "Sum of two bits can be obtained by performing XOR (^) of the two bits. Carry bit can be obtained by performing AND (&) of two bits.\\nIt is simple  logic that can be used to add 2 single bits. We can extend this logic for integers. If x and y don\\u2019t have set bits at same position(s), then bitwise XOR (^) of x and y gives the sum of x and y. To incorporate common set bits also, bitwise AND (&) is used. Bitwise AND of x and y gives all carry bits. We calculate (x & y) << 1 and add it to x ^ y to get the required result.\\n\\n    int getSum(int a, int b) {\\n                while(b != 0){\\n                    int carry = a & b;\\n                    a = a ^ b;\\n                    b = carry << 1;\\n                }\\n                return a;\\n            }",
                "codeTag": "Unknown"
            },
            {
                "id": 84288,
                "title": "share-my-solution-using-xor-and-and",
                "content": "The Problem is a simple carry-adder question in digital circuit;\\n```\\n    class Solution {\\n    public:\\n        int getSum(int a, int b) {\\n    \\t\\tint carry=a&b;\\n    \\t\\tint result=a^b;\\n    \\t\\twhile(carry!=0){\\n               \\t\\tint carry_t=carry<<1;\\n\\t\\t\\tcarry=carry_t&result;\\n    \\t\\t\\tresult=result^carry_t;\\n    \\t\\t}\\n    \\t\\treturn result;\\n        }\\n    };\\n```\\nHowever, I wonder is there anybody write it in carry-lookahead adder...",
                "solutionTags": [],
                "code": "```\\n    class Solution {\\n    public:\\n        int getSum(int a, int b) {\\n    \\t\\tint carry=a&b;\\n    \\t\\tint result=a^b;\\n    \\t\\twhile(carry!=0){\\n               \\t\\tint carry_t=carry<<1;\\n\\t\\t\\tcarry=carry_t&result;\\n    \\t\\t\\tresult=result^carry_t;\\n    \\t\\t}\\n    \\t\\treturn result;\\n        }\\n    };\\n```",
                "codeTag": "Java"
            },
            {
                "id": 84461,
                "title": "solution-simulating-digital-logic-design",
                "content": "Addition at hardware level is implemented using AND/ OR/ XOR gates on each digit.\\nSo we can implement exact same idea.\\n\\n 1. for the last digit d1, d2 & c, d1^d2^c is the digit after sum.\\n 2. carry is the \"majority selector\"; meaning among 3 digits, if 2 or 3 digit is 1, its value is 1; if 2 or 3 digits is 0, it is 0. this is (d1&d2) | (d1&c) | (d2&c).\\n\\n        public int getSum(int a, int b) {\\n        int sum = 0, c = 0;\\n        for (int i = 0; i < 32; i++) {\\n            int d1 = a & 1, d2 = b & 1; // last digit of a & b\\n            sum |= ((d1^d2^c) << i); // update sum digit\\n            c = (d1&d2) | (d1&c) | (d2&c); // update carrier\\n            a >>>= 1;\\n            b >>>= 1;\\n        }\\n        return sum;\\n    }",
                "solutionTags": [],
                "code": "Addition at hardware level is implemented using AND/ OR/ XOR gates on each digit.\\nSo we can implement exact same idea.\\n\\n 1. for the last digit d1, d2 & c, d1^d2^c is the digit after sum.\\n 2. carry is the \"majority selector\"; meaning among 3 digits, if 2 or 3 digit is 1, its value is 1; if 2 or 3 digits is 0, it is 0. this is (d1&d2) | (d1&c) | (d2&c).\\n\\n        public int getSum(int a, int b) {\\n        int sum = 0, c = 0;\\n        for (int i = 0; i < 32; i++) {\\n            int d1 = a & 1, d2 = b & 1; // last digit of a & b\\n            sum |= ((d1^d2^c) << i); // update sum digit\\n            c = (d1&d2) | (d1&c) | (d2&c); // update carrier\\n            a >>>= 1;\\n            b >>>= 1;\\n        }\\n        return sum;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 84463,
                "title": "0-ms-one-line-java-solution",
                "content": "    public class Solution {\\n           public int getSum(int a, int b) {\\n                 return (b == 0)? a : getSum(a ^ b, (a & b) << 1);\\n         }}",
                "solutionTags": [],
                "code": "class Solution {\\n           public int getSum(int a, int b) {\\n                 return (b == 0)? a : getSum(a ^ b, (a & b) << 1);\\n         }",
                "codeTag": "Java"
            },
            {
                "id": 3758649,
                "title": "by-python-using-and-xor-logic-also-using-mask-to-tackle-negative-number-testcases",
                "content": "We will do AND of A and B to get carry ,also XOR of A and B to get sum \\n\\nDo carry<<1 to shift the carry where it is to be added in sum ,then\\nstore XOR of a and b again in \\'a\\' and carry again in \\'b\\' and repeat the process until carry is 0 !\\n\\nNow since Python cant handle negative numbers we must return the ans by converting it in a way that Python understands. \\n\\nTo explain, the hexadecimal number 0xffffffff is the same as the \\nbinary number 0b1111111111111111111111111111111, containing 32 1\\'s. (It\\'s just easier to type lol.)\\n\\nIn order to make the code work like Java, we want to treat our numbers like they only have 32 bits. ANDing a number with the mask 0xffffffff, or 32 1\\'s, basically turns all of a number\\'s bits into 0\\'s except for the rightmost 32. As a result, the number can be represented as if it only has 32 bits.\\n\\nUsing XOR for the sum and AND for the carry. We AND with the mask each time we set a and b in order to keep our numbers within 32 bits.\\n\\nAfter we exit the while loop, we have our answer a. If a is positive, then we can return it directly. However, in Python, negative numbers are represented in binary as having an unlimited number of leading 1\\'s. The current answer would only have values in the rightmost 32 bits. Therefore, if the answer is negative, we need to convert it into Python\\'s representation of negative numbers. \\n\\nFirst, we need to check if the answer is negative. We cannot just check to see if the answer is less than zero because our representation of the answer is not the same as Python\\'s (since Python\\'s have unlimited leading 1\\'s). We are still treating our answer as if it only fits into 32 bits. \\n\\nA 32-bit signed integer is positive if the 32nd bit is a 0 and is negative if the 32nd bit is a 1. If we divide our mask (0xffffffff) by 2, we will get the binary number 0b0111111111111111111111111111111, which has 31 1\\'s. This number is the greatest value we can have before the 32nd bit becomes a 1. Therefore, if our answer a > mask // 2, it is negative. Otherwise, it is positive and we can just return a itself.\\n\\nIf the number is negative, we then need to convert it into Python\\'s representation of negative numbers. To do so, we can XOR with the mask of 32 1\\'s in order to flip the rightmost 32 bits, since XORing a bit with 1 flips the bit. We can then NOT the number in order to turn all of the leading 0\\'s into 1\\'s. For example, say that the answer is -3, and (....0000000) or (....1111111) denote leading 0\\'s or 1\\'s until the 32nd bit:\\n\\nOur representation of -3 in 32 bits: (...0000000)11111111111111111111111111111101\\nXOR with mask, aka flip rightmost 32 bits: (...0000000)00000000000000000000000000000010\\nNOT, aka flipping all bits: (...1111111)1111111111111111111111111111101\\nThe result is Python\\'s representation of -3, including an unlimited number of leading 1\\'s.\\n\\n# Code\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        mask = 0xffffffff\\n        while b!=0:\\n            temp = (a&b)<<1\\n            a =(a^b) & mask \\n            b = temp & mask \\n\\n        if a > mask//2:\\n            #Negative number\\n            return ~(a^mask)\\n        else : \\n            return a\\n```\\nThis is not my logic ! Credits to sysy2152 in youtube comments for explaining this !\\nRefer to - https://www.youtube.com/watch?v=gVUrDV4tZfY&t=3s for explanation \\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        mask = 0xffffffff\\n        while b!=0:\\n            temp = (a&b)<<1\\n            a =(a^b) & mask \\n            b = temp & mask \\n\\n        if a > mask//2:\\n            #Negative number\\n            return ~(a^mask)\\n        else : \\n            return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3739760,
                "title": "add-two-integer-without-using-and-operator-c-java-100-working",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe purpose of calculating this bitwise AND is to identify the positions where both a and b have 1\\'s.\\nThe XOR operation helps in setting the sum bits where either a or b or both have 1\\'s. \\nleft-shift\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n    \\n        while(b !=0){\\n      unsigned  int tmp = (a & b);\\n        a = a ^ b;\\n        b = tmp << 1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int getSum(int a, int b) {\\n    \\n        while(b !=0){\\n      unsigned  int tmp = (a & b);\\n        a = a ^ b;\\n        b = tmp << 1;\\n        }\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3385084,
                "title": "one-liner-python-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a,b])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a,b])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3285034,
                "title": "python-elegant-short-cheating-1-line",
                "content": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return eval(f\\'{a}{chr(43)}{b}\\')\\n\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return eval(f\\'{a}{chr(43)}{b}\\')\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3045527,
                "title": "java-one-liner",
                "content": "Below are all the ways to solve the problem\\n\\n# Code\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        return a==0 ? a^b : getSum((a&b)<<1,a^b);\\n    }\\n}\\n// Using log function\\n\\n// a + b = log(e^(a+b)) = log(e^a * e^b)\\n// if(a == 0 && b != 0)return b;\\n// if(b == 0 && a != 0)return a;\\n// return (int)Math.log(Math.exp(a) * Math.exp(b));\\n\\n// Using half adder\\n\\n// int carry = (a&b) << 1;\\n// int res = a^b;\\n// if(carry == 0)return res;\\n// return getSum(carry,res);\\n\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Math",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        return a==0 ? a^b : getSum((a&b)<<1,a^b);\\n    }\\n}\\n// Using log function\\n\\n// a + b = log(e^(a+b)) = log(e^a * e^b)\\n// if(a == 0 && b != 0)return b;\\n// if(b == 0 && a != 0)return a;\\n// return (int)Math.log(Math.exp(a) * Math.exp(b));\\n\\n// Using half adder\\n\\n// int carry = (a&b) << 1;\\n// int res = a^b;\\n// if(carry == 0)return res;\\n// return getSum(carry,res);\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3010115,
                "title": "java-easy-one-liner-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        return b == 0 ? a : getSum(a ^ b, (a & b) << 1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        return b == 0 ? a : getSum(a ^ b, (a & b) << 1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1572403,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1569099,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1564814,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1575244,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1570422,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1566503,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1570026,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1566502,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1568368,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1567256,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1572403,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1569099,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1564814,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1575244,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1570422,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1566503,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1570026,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1566502,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1568368,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1567256,
                "content": [
                    {
                        "username": "CanOrhan",
                        "content": "I used the += operator."
                    },
                    {
                        "username": "ProgrammingOutlaw",
                        "content": "I used inline assembly\nt. CompE masterrace"
                    },
                    {
                        "username": "maesop",
                        "content": "chad behaviour"
                    },
                    {
                        "username": "kartikey_wariyal",
                        "content": "lol\\n"
                    },
                    {
                        "username": "sohamkulkarni",
                        "content": "\\uD83D\\uDE36\\u200D\\uD83C\\uDF2B\\uFE0F\\uD83D\\uDE02\\uD83D\\uDE02"
                    },
                    {
                        "username": "chinmay6",
                        "content": "(a + b) = log(e^a * e^b)"
                    },
                    {
                        "username": "JayasinghePasan",
                        "content": "[@siddharthapaudel](/siddharthapaudel)   check this -> https://leetcode.com/problems/sum-of-two-integers/solutions/4017325/logarithm-workaround-for-ones-who-hate-bit-manipulation-8577-in-runtime/"
                    },
                    {
                        "username": "rohit_neemwal",
                        "content": "lol .... integer overflow"
                    },
                    {
                        "username": "siddharthapaudel",
                        "content": "it\\'s amazing!! how did you thought of this?? i want to know your thought process!!"
                    },
                    {
                        "username": "kainster",
                        "content": "If anyone asks me this question in an interview, I won't be willing to work with him/her."
                    },
                    {
                        "username": "BOVAGE",
                        "content": "\\uD83D\\uDE01\\uD83D\\uDE01"
                    },
                    {
                        "username": "pa-one55",
                        "content": "kitna package mila vro ??"
                    },
                    {
                        "username": "skshackster",
                        "content": "badhiya bhai\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": "\\uD83E\\uDD23\\uD83E\\uDD23"
                    },
                    {
                        "username": "zeeshank03",
                        "content": "![image](https://assets.leetcode.com/users/images/c2e91add-95d5-44ef-8dc1-85d0e25219ad_1620502855.803335.png)\\n"
                    },
                    {
                        "username": "nguoi_em_xom_dao",
                        "content": "return log10(pow(10,a)*pow(10,b));"
                    },
                    {
                        "username": "rohit-ryuk",
                        "content": "How to handle negative numbers?"
                    },
                    {
                        "username": "godshiva",
                        "content": "haha!!! that\\'s great!"
                    },
                    {
                        "username": "myfavcat",
                        "content": "[Add two numbers without using arithmetic operators][1]\\n\\n[Half adder] [2]\\n\\n[1]: http://www.geeksforgeeks.org/add-two-numbers-without-using-arithmetic-operators/\\n[2]: https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "lcgtfo",
                        "content": "1) System Design :- Design like camelcamelcamel.com service\\n2) Technical round :-  a) Anagram  b) Verify Alian Dictionary\\n3) Technical round  :- a) https://leetcode.com/problems/minimum-window-substring/\\n                                     b)https://leetcode.com/problems/island-perimeter/\\n4)Technical Round   a) Complete Binary Tree\\n\\t\\t\\t\\t\\t\\t\\t\\t  b) https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/\\n5) Behavioral questions"
                    },
                    {
                        "username": "grean_peas2020",
                        "content": "Are you ok?"
                    },
                    {
                        "username": "frankliuao",
                        "content": "Still couldn't understand how (a ^ b) & mask works. Why neither C++ nor Java needs this?"
                    },
                    {
                        "username": "1704013_ashik",
                        "content": "Half Adder logic is prominent for such problems. U may have a look here https://en.wikipedia.org/wiki/Adder_%28electronics%29#Half_adder"
                    },
                    {
                        "username": "user3753C",
                        "content": "A very detailed article with example codes fpr those who are new to bit manipulation\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/\\n\\nWorking on bytes, or data types comprising of bytes like ints, floats, doubles or even data structures which stores large amount of bytes is normal for a programmer. In some cases, a programmer needs to go beyond this - that is to say that in a deeper level where the importance of bits is realized.\\n\\nOperations with bits are used in Data compression (data is compressed by converting it from one representation to another, to reduce the space) ,Exclusive-Or Encryption (an algorithm to encrypt the data for safety issues). In order to encode, decode or compress files we have to extract the data at bit level. Bitwise Operations are faster and closer to the system and sometimes optimize the program to a good level.\\n\\nWe all know that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers, which we call its binary form(contains only 1 or 0) or in its base 2 form.\\nExample:\\n1) 14 = {1110 }2\\n= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20\\n= 14.\\n\\n2) 20 = {10100 }2\\n= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20\\n= 20.\\n\\nFor characters, we use ASCII representation, which are in the form of integers which again can be represented using bits as explained above.\\n\\nBitwise Operators:\\n\\nThere are different bitwise operations used in the bit manipulation. These bit operations operate on the individual bits of the bit patterns. Bit operations are fast and can be used in optimizing time complexity. Some common bit operators are:\\n\\nNOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the ith bit is 0, it will change it to 1 and vice versa. Bitwise NOT is nothing but simply the one\\u2019s complement of a number. Lets take an example.\\nN = 5 = (101)2\\n~N = ~5 = ~(101)2 = (010)2 = 2\\n\\nAND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the compared position of the bit patterns are 1, the bit in the resulting bit pattern is 1, otherwise 0.\\nA = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1\\n\\nOR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise AND. If both bits in the compared position of the bit patterns are 0, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA | B = (101)2 | (011)2 = (111)2 = 7\\n\\nXOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit patterns are 0 or 1, the bit in the resulting bit pattern is 0, otherwise 1.\\nA = 5 = (101)2 , B = 3 = (011)2\\nA ^ B = (101)2 ^ (011)2 = (110)2 = 6\\n\\nLeft Shift ( << ): Left shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the left and append 0 at the end. Left shift is equivalent to multiplying the bit pattern with  ( if we are shifting k bits ).\\n1 << 1 = 2 = 21\\n1 << 2 = 4 = 22 1 << 3 = 8 = 23\\n1 << 4 = 16 = 24\\n\\u2026\\n1 << n = 2n\\n\\nRight Shift ( >> ): Right shift operator is a binary operator which shift the some number of bits, in the given bit pattern, to the right and append 1 at the end. Right shift is equivalent to dividing the bit pattern with 2k ( if we are shifting k bits ).\\n4 >> 1 = 2\\n6 >> 1 = 3\\n5 >> 1 = 2\\n16 >> 4 = 1\\n\\nBitwise operators are good for saving space and sometimes to cleverly remove dependencies.\\n\\nFor more details check this:\\nhttps://www.hackerearth.com/practice/basic-programming/bit-manipulation/basics-of-bit-manipulation/tutorial/"
                    },
                    {
                        "username": "fentoyal",
                        "content": "    int getSum(int a, int b) {while (b=(~(a^=b)&b)<<1); return a;}"
                    },
                    {
                        "username": "Sahil_Lohan",
                        "content": "don\\'t post solution here\\n"
                    }
                ]
            },
            {
                "id": 1572364,
                "content": [
                    {
                        "username": "iamvucms",
                        "content": "return sum([a,b])"
                    },
                    {
                        "username": "Amal_Dubey",
                        "content": "wow...I want to know your thought process\\n"
                    },
                    {
                        "username": "jjp8",
                        "content": "Python ints are weird. You have to mask them to get the two\\'s compliment. Read this for a great, detailed explaination:\\n\\nhttps://stackoverflow.com/questions/46993519/python-representation-of-negative-integers"
                    },
                    {
                        "username": "wizard7",
                        "content": "`return sum([a, b])`"
                    },
                    {
                        "username": "hwang1607",
                        "content": "would this be accepted in an interview???"
                    },
                    {
                        "username": "linuscodes56",
                        "content": "bro it only work in python\\n\\uD83D\\uDE1E"
                    },
                    {
                        "username": "hkyiitd",
                        "content": "return (a^b) + 2(a&b);"
                    },
                    {
                        "username": "psionl0",
                        "content": "You used a +"
                    },
                    {
                        "username": "jahir_raihan",
                        "content": "\\'\\'\\'\\nreturn sum([a,b])\\n\\'\\'\\'"
                    },
                    {
                        "username": "pegasus16",
                        "content": "weak test cases"
                    },
                    {
                        "username": "kabali",
                        "content": "/* carry is not a signed integer */\\nreturn b==0 ? a : getSum(a^b,((unsigned int)(a&b))<<1);"
                    },
                    {
                        "username": "dhruv2180",
                        "content": "when integers are negative the same logic fails for python and gives time limit exceeded , does any one know why ? My guess is that the while loop that checks carry!=0 is not terminating is because the signed bit is always set."
                    },
                    {
                        "username": "ffskyfan",
                        "content": "In chapter 12 of this book,you will find a solution that to build a adder use Logic Gates.\\nthis book is highly recommended"
                    },
                    {
                        "username": "ccdd4ever",
                        "content": "<pre>//we can calculate like adder or summer in digit circut\\n// A\\tB\\tC\\tS\\n// 0\\t0\\t0\\t0\\n// 1\\t0\\t0\\t1\\n// 0\\t1\\t0\\t1\\n// 1\\t1\\t1\\t0\\n//c means carry,we can get c using \"&\"(and) operator;s means sum,we can get s using \"^\"(xor)\\n//our final result could be calculate by 2*carry+s,and we can use recursion to replace the \"+\" operator\\n\\n\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc add(a int32, b int32) int32 {\\n\\tif a == 0 {\\n\\t\\treturn b\\n\\t}\\n\\tif b == 0 {\\n\\t\\treturn a\\n\\t}\\n\\treturn add(2*(a&b), a^b)\\n}\\n\\nfunc main() {\\n\\tfmt.Println(add(-20, 3))\\n}\\n\\n<code>"
                    }
                ]
            },
            {
                "id": 1569758,
                "content": [
                    {
                        "username": "iamvucms",
                        "content": "return sum([a,b])"
                    },
                    {
                        "username": "Amal_Dubey",
                        "content": "wow...I want to know your thought process\\n"
                    },
                    {
                        "username": "jjp8",
                        "content": "Python ints are weird. You have to mask them to get the two\\'s compliment. Read this for a great, detailed explaination:\\n\\nhttps://stackoverflow.com/questions/46993519/python-representation-of-negative-integers"
                    },
                    {
                        "username": "wizard7",
                        "content": "`return sum([a, b])`"
                    },
                    {
                        "username": "hwang1607",
                        "content": "would this be accepted in an interview???"
                    },
                    {
                        "username": "linuscodes56",
                        "content": "bro it only work in python\\n\\uD83D\\uDE1E"
                    },
                    {
                        "username": "hkyiitd",
                        "content": "return (a^b) + 2(a&b);"
                    },
                    {
                        "username": "psionl0",
                        "content": "You used a +"
                    },
                    {
                        "username": "jahir_raihan",
                        "content": "\\'\\'\\'\\nreturn sum([a,b])\\n\\'\\'\\'"
                    },
                    {
                        "username": "pegasus16",
                        "content": "weak test cases"
                    },
                    {
                        "username": "kabali",
                        "content": "/* carry is not a signed integer */\\nreturn b==0 ? a : getSum(a^b,((unsigned int)(a&b))<<1);"
                    },
                    {
                        "username": "dhruv2180",
                        "content": "when integers are negative the same logic fails for python and gives time limit exceeded , does any one know why ? My guess is that the while loop that checks carry!=0 is not terminating is because the signed bit is always set."
                    },
                    {
                        "username": "ffskyfan",
                        "content": "In chapter 12 of this book,you will find a solution that to build a adder use Logic Gates.\\nthis book is highly recommended"
                    },
                    {
                        "username": "ccdd4ever",
                        "content": "<pre>//we can calculate like adder or summer in digit circut\\n// A\\tB\\tC\\tS\\n// 0\\t0\\t0\\t0\\n// 1\\t0\\t0\\t1\\n// 0\\t1\\t0\\t1\\n// 1\\t1\\t1\\t0\\n//c means carry,we can get c using \"&\"(and) operator;s means sum,we can get s using \"^\"(xor)\\n//our final result could be calculate by 2*carry+s,and we can use recursion to replace the \"+\" operator\\n\\n\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc add(a int32, b int32) int32 {\\n\\tif a == 0 {\\n\\t\\treturn b\\n\\t}\\n\\tif b == 0 {\\n\\t\\treturn a\\n\\t}\\n\\treturn add(2*(a&b), a^b)\\n}\\n\\nfunc main() {\\n\\tfmt.Println(add(-20, 3))\\n}\\n\\n<code>"
                    }
                ]
            },
            {
                "id": 1570761,
                "content": [
                    {
                        "username": "iamvucms",
                        "content": "return sum([a,b])"
                    },
                    {
                        "username": "Amal_Dubey",
                        "content": "wow...I want to know your thought process\\n"
                    },
                    {
                        "username": "jjp8",
                        "content": "Python ints are weird. You have to mask them to get the two\\'s compliment. Read this for a great, detailed explaination:\\n\\nhttps://stackoverflow.com/questions/46993519/python-representation-of-negative-integers"
                    },
                    {
                        "username": "wizard7",
                        "content": "`return sum([a, b])`"
                    },
                    {
                        "username": "hwang1607",
                        "content": "would this be accepted in an interview???"
                    },
                    {
                        "username": "linuscodes56",
                        "content": "bro it only work in python\\n\\uD83D\\uDE1E"
                    },
                    {
                        "username": "hkyiitd",
                        "content": "return (a^b) + 2(a&b);"
                    },
                    {
                        "username": "psionl0",
                        "content": "You used a +"
                    },
                    {
                        "username": "jahir_raihan",
                        "content": "\\'\\'\\'\\nreturn sum([a,b])\\n\\'\\'\\'"
                    },
                    {
                        "username": "pegasus16",
                        "content": "weak test cases"
                    },
                    {
                        "username": "kabali",
                        "content": "/* carry is not a signed integer */\\nreturn b==0 ? a : getSum(a^b,((unsigned int)(a&b))<<1);"
                    },
                    {
                        "username": "dhruv2180",
                        "content": "when integers are negative the same logic fails for python and gives time limit exceeded , does any one know why ? My guess is that the while loop that checks carry!=0 is not terminating is because the signed bit is always set."
                    },
                    {
                        "username": "ffskyfan",
                        "content": "In chapter 12 of this book,you will find a solution that to build a adder use Logic Gates.\\nthis book is highly recommended"
                    },
                    {
                        "username": "ccdd4ever",
                        "content": "<pre>//we can calculate like adder or summer in digit circut\\n// A\\tB\\tC\\tS\\n// 0\\t0\\t0\\t0\\n// 1\\t0\\t0\\t1\\n// 0\\t1\\t0\\t1\\n// 1\\t1\\t1\\t0\\n//c means carry,we can get c using \"&\"(and) operator;s means sum,we can get s using \"^\"(xor)\\n//our final result could be calculate by 2*carry+s,and we can use recursion to replace the \"+\" operator\\n\\n\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc add(a int32, b int32) int32 {\\n\\tif a == 0 {\\n\\t\\treturn b\\n\\t}\\n\\tif b == 0 {\\n\\t\\treturn a\\n\\t}\\n\\treturn add(2*(a&b), a^b)\\n}\\n\\nfunc main() {\\n\\tfmt.Println(add(-20, 3))\\n}\\n\\n<code>"
                    }
                ]
            },
            {
                "id": 1570103,
                "content": [
                    {
                        "username": "iamvucms",
                        "content": "return sum([a,b])"
                    },
                    {
                        "username": "Amal_Dubey",
                        "content": "wow...I want to know your thought process\\n"
                    },
                    {
                        "username": "jjp8",
                        "content": "Python ints are weird. You have to mask them to get the two\\'s compliment. Read this for a great, detailed explaination:\\n\\nhttps://stackoverflow.com/questions/46993519/python-representation-of-negative-integers"
                    },
                    {
                        "username": "wizard7",
                        "content": "`return sum([a, b])`"
                    },
                    {
                        "username": "hwang1607",
                        "content": "would this be accepted in an interview???"
                    },
                    {
                        "username": "linuscodes56",
                        "content": "bro it only work in python\\n\\uD83D\\uDE1E"
                    },
                    {
                        "username": "hkyiitd",
                        "content": "return (a^b) + 2(a&b);"
                    },
                    {
                        "username": "psionl0",
                        "content": "You used a +"
                    },
                    {
                        "username": "jahir_raihan",
                        "content": "\\'\\'\\'\\nreturn sum([a,b])\\n\\'\\'\\'"
                    },
                    {
                        "username": "pegasus16",
                        "content": "weak test cases"
                    },
                    {
                        "username": "kabali",
                        "content": "/* carry is not a signed integer */\\nreturn b==0 ? a : getSum(a^b,((unsigned int)(a&b))<<1);"
                    },
                    {
                        "username": "dhruv2180",
                        "content": "when integers are negative the same logic fails for python and gives time limit exceeded , does any one know why ? My guess is that the while loop that checks carry!=0 is not terminating is because the signed bit is always set."
                    },
                    {
                        "username": "ffskyfan",
                        "content": "In chapter 12 of this book,you will find a solution that to build a adder use Logic Gates.\\nthis book is highly recommended"
                    },
                    {
                        "username": "ccdd4ever",
                        "content": "<pre>//we can calculate like adder or summer in digit circut\\n// A\\tB\\tC\\tS\\n// 0\\t0\\t0\\t0\\n// 1\\t0\\t0\\t1\\n// 0\\t1\\t0\\t1\\n// 1\\t1\\t1\\t0\\n//c means carry,we can get c using \"&\"(and) operator;s means sum,we can get s using \"^\"(xor)\\n//our final result could be calculate by 2*carry+s,and we can use recursion to replace the \"+\" operator\\n\\n\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc add(a int32, b int32) int32 {\\n\\tif a == 0 {\\n\\t\\treturn b\\n\\t}\\n\\tif b == 0 {\\n\\t\\treturn a\\n\\t}\\n\\treturn add(2*(a&b), a^b)\\n}\\n\\nfunc main() {\\n\\tfmt.Println(add(-20, 3))\\n}\\n\\n<code>"
                    }
                ]
            },
            {
                "id": 1567605,
                "content": [
                    {
                        "username": "iamvucms",
                        "content": "return sum([a,b])"
                    },
                    {
                        "username": "Amal_Dubey",
                        "content": "wow...I want to know your thought process\\n"
                    },
                    {
                        "username": "jjp8",
                        "content": "Python ints are weird. You have to mask them to get the two\\'s compliment. Read this for a great, detailed explaination:\\n\\nhttps://stackoverflow.com/questions/46993519/python-representation-of-negative-integers"
                    },
                    {
                        "username": "wizard7",
                        "content": "`return sum([a, b])`"
                    },
                    {
                        "username": "hwang1607",
                        "content": "would this be accepted in an interview???"
                    },
                    {
                        "username": "linuscodes56",
                        "content": "bro it only work in python\\n\\uD83D\\uDE1E"
                    },
                    {
                        "username": "hkyiitd",
                        "content": "return (a^b) + 2(a&b);"
                    },
                    {
                        "username": "psionl0",
                        "content": "You used a +"
                    },
                    {
                        "username": "jahir_raihan",
                        "content": "\\'\\'\\'\\nreturn sum([a,b])\\n\\'\\'\\'"
                    },
                    {
                        "username": "pegasus16",
                        "content": "weak test cases"
                    },
                    {
                        "username": "kabali",
                        "content": "/* carry is not a signed integer */\\nreturn b==0 ? a : getSum(a^b,((unsigned int)(a&b))<<1);"
                    },
                    {
                        "username": "dhruv2180",
                        "content": "when integers are negative the same logic fails for python and gives time limit exceeded , does any one know why ? My guess is that the while loop that checks carry!=0 is not terminating is because the signed bit is always set."
                    },
                    {
                        "username": "ffskyfan",
                        "content": "In chapter 12 of this book,you will find a solution that to build a adder use Logic Gates.\\nthis book is highly recommended"
                    },
                    {
                        "username": "ccdd4ever",
                        "content": "<pre>//we can calculate like adder or summer in digit circut\\n// A\\tB\\tC\\tS\\n// 0\\t0\\t0\\t0\\n// 1\\t0\\t0\\t1\\n// 0\\t1\\t0\\t1\\n// 1\\t1\\t1\\t0\\n//c means carry,we can get c using \"&\"(and) operator;s means sum,we can get s using \"^\"(xor)\\n//our final result could be calculate by 2*carry+s,and we can use recursion to replace the \"+\" operator\\n\\n\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc add(a int32, b int32) int32 {\\n\\tif a == 0 {\\n\\t\\treturn b\\n\\t}\\n\\tif b == 0 {\\n\\t\\treturn a\\n\\t}\\n\\treturn add(2*(a&b), a^b)\\n}\\n\\nfunc main() {\\n\\tfmt.Println(add(-20, 3))\\n}\\n\\n<code>"
                    }
                ]
            },
            {
                "id": 1933015,
                "content": [
                    {
                        "username": "iamvucms",
                        "content": "return sum([a,b])"
                    },
                    {
                        "username": "Amal_Dubey",
                        "content": "wow...I want to know your thought process\\n"
                    },
                    {
                        "username": "jjp8",
                        "content": "Python ints are weird. You have to mask them to get the two\\'s compliment. Read this for a great, detailed explaination:\\n\\nhttps://stackoverflow.com/questions/46993519/python-representation-of-negative-integers"
                    },
                    {
                        "username": "wizard7",
                        "content": "`return sum([a, b])`"
                    },
                    {
                        "username": "hwang1607",
                        "content": "would this be accepted in an interview???"
                    },
                    {
                        "username": "linuscodes56",
                        "content": "bro it only work in python\\n\\uD83D\\uDE1E"
                    },
                    {
                        "username": "hkyiitd",
                        "content": "return (a^b) + 2(a&b);"
                    },
                    {
                        "username": "psionl0",
                        "content": "You used a +"
                    },
                    {
                        "username": "jahir_raihan",
                        "content": "\\'\\'\\'\\nreturn sum([a,b])\\n\\'\\'\\'"
                    },
                    {
                        "username": "pegasus16",
                        "content": "weak test cases"
                    },
                    {
                        "username": "kabali",
                        "content": "/* carry is not a signed integer */\\nreturn b==0 ? a : getSum(a^b,((unsigned int)(a&b))<<1);"
                    },
                    {
                        "username": "dhruv2180",
                        "content": "when integers are negative the same logic fails for python and gives time limit exceeded , does any one know why ? My guess is that the while loop that checks carry!=0 is not terminating is because the signed bit is always set."
                    },
                    {
                        "username": "ffskyfan",
                        "content": "In chapter 12 of this book,you will find a solution that to build a adder use Logic Gates.\\nthis book is highly recommended"
                    },
                    {
                        "username": "ccdd4ever",
                        "content": "<pre>//we can calculate like adder or summer in digit circut\\n// A\\tB\\tC\\tS\\n// 0\\t0\\t0\\t0\\n// 1\\t0\\t0\\t1\\n// 0\\t1\\t0\\t1\\n// 1\\t1\\t1\\t0\\n//c means carry,we can get c using \"&\"(and) operator;s means sum,we can get s using \"^\"(xor)\\n//our final result could be calculate by 2*carry+s,and we can use recursion to replace the \"+\" operator\\n\\n\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc add(a int32, b int32) int32 {\\n\\tif a == 0 {\\n\\t\\treturn b\\n\\t}\\n\\tif b == 0 {\\n\\t\\treturn a\\n\\t}\\n\\treturn add(2*(a&b), a^b)\\n}\\n\\nfunc main() {\\n\\tfmt.Println(add(-20, 3))\\n}\\n\\n<code>"
                    }
                ]
            },
            {
                "id": 1573802,
                "content": [
                    {
                        "username": "iamvucms",
                        "content": "return sum([a,b])"
                    },
                    {
                        "username": "Amal_Dubey",
                        "content": "wow...I want to know your thought process\\n"
                    },
                    {
                        "username": "jjp8",
                        "content": "Python ints are weird. You have to mask them to get the two\\'s compliment. Read this for a great, detailed explaination:\\n\\nhttps://stackoverflow.com/questions/46993519/python-representation-of-negative-integers"
                    },
                    {
                        "username": "wizard7",
                        "content": "`return sum([a, b])`"
                    },
                    {
                        "username": "hwang1607",
                        "content": "would this be accepted in an interview???"
                    },
                    {
                        "username": "linuscodes56",
                        "content": "bro it only work in python\\n\\uD83D\\uDE1E"
                    },
                    {
                        "username": "hkyiitd",
                        "content": "return (a^b) + 2(a&b);"
                    },
                    {
                        "username": "psionl0",
                        "content": "You used a +"
                    },
                    {
                        "username": "jahir_raihan",
                        "content": "\\'\\'\\'\\nreturn sum([a,b])\\n\\'\\'\\'"
                    },
                    {
                        "username": "pegasus16",
                        "content": "weak test cases"
                    },
                    {
                        "username": "kabali",
                        "content": "/* carry is not a signed integer */\\nreturn b==0 ? a : getSum(a^b,((unsigned int)(a&b))<<1);"
                    },
                    {
                        "username": "dhruv2180",
                        "content": "when integers are negative the same logic fails for python and gives time limit exceeded , does any one know why ? My guess is that the while loop that checks carry!=0 is not terminating is because the signed bit is always set."
                    },
                    {
                        "username": "ffskyfan",
                        "content": "In chapter 12 of this book,you will find a solution that to build a adder use Logic Gates.\\nthis book is highly recommended"
                    },
                    {
                        "username": "ccdd4ever",
                        "content": "<pre>//we can calculate like adder or summer in digit circut\\n// A\\tB\\tC\\tS\\n// 0\\t0\\t0\\t0\\n// 1\\t0\\t0\\t1\\n// 0\\t1\\t0\\t1\\n// 1\\t1\\t1\\t0\\n//c means carry,we can get c using \"&\"(and) operator;s means sum,we can get s using \"^\"(xor)\\n//our final result could be calculate by 2*carry+s,and we can use recursion to replace the \"+\" operator\\n\\n\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc add(a int32, b int32) int32 {\\n\\tif a == 0 {\\n\\t\\treturn b\\n\\t}\\n\\tif b == 0 {\\n\\t\\treturn a\\n\\t}\\n\\treturn add(2*(a&b), a^b)\\n}\\n\\nfunc main() {\\n\\tfmt.Println(add(-20, 3))\\n}\\n\\n<code>"
                    }
                ]
            },
            {
                "id": 1572290,
                "content": [
                    {
                        "username": "iamvucms",
                        "content": "return sum([a,b])"
                    },
                    {
                        "username": "Amal_Dubey",
                        "content": "wow...I want to know your thought process\\n"
                    },
                    {
                        "username": "jjp8",
                        "content": "Python ints are weird. You have to mask them to get the two\\'s compliment. Read this for a great, detailed explaination:\\n\\nhttps://stackoverflow.com/questions/46993519/python-representation-of-negative-integers"
                    },
                    {
                        "username": "wizard7",
                        "content": "`return sum([a, b])`"
                    },
                    {
                        "username": "hwang1607",
                        "content": "would this be accepted in an interview???"
                    },
                    {
                        "username": "linuscodes56",
                        "content": "bro it only work in python\\n\\uD83D\\uDE1E"
                    },
                    {
                        "username": "hkyiitd",
                        "content": "return (a^b) + 2(a&b);"
                    },
                    {
                        "username": "psionl0",
                        "content": "You used a +"
                    },
                    {
                        "username": "jahir_raihan",
                        "content": "\\'\\'\\'\\nreturn sum([a,b])\\n\\'\\'\\'"
                    },
                    {
                        "username": "pegasus16",
                        "content": "weak test cases"
                    },
                    {
                        "username": "kabali",
                        "content": "/* carry is not a signed integer */\\nreturn b==0 ? a : getSum(a^b,((unsigned int)(a&b))<<1);"
                    },
                    {
                        "username": "dhruv2180",
                        "content": "when integers are negative the same logic fails for python and gives time limit exceeded , does any one know why ? My guess is that the while loop that checks carry!=0 is not terminating is because the signed bit is always set."
                    },
                    {
                        "username": "ffskyfan",
                        "content": "In chapter 12 of this book,you will find a solution that to build a adder use Logic Gates.\\nthis book is highly recommended"
                    },
                    {
                        "username": "ccdd4ever",
                        "content": "<pre>//we can calculate like adder or summer in digit circut\\n// A\\tB\\tC\\tS\\n// 0\\t0\\t0\\t0\\n// 1\\t0\\t0\\t1\\n// 0\\t1\\t0\\t1\\n// 1\\t1\\t1\\t0\\n//c means carry,we can get c using \"&\"(and) operator;s means sum,we can get s using \"^\"(xor)\\n//our final result could be calculate by 2*carry+s,and we can use recursion to replace the \"+\" operator\\n\\n\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc add(a int32, b int32) int32 {\\n\\tif a == 0 {\\n\\t\\treturn b\\n\\t}\\n\\tif b == 0 {\\n\\t\\treturn a\\n\\t}\\n\\treturn add(2*(a&b), a^b)\\n}\\n\\nfunc main() {\\n\\tfmt.Println(add(-20, 3))\\n}\\n\\n<code>"
                    }
                ]
            },
            {
                "id": 1571641,
                "content": [
                    {
                        "username": "iamvucms",
                        "content": "return sum([a,b])"
                    },
                    {
                        "username": "Amal_Dubey",
                        "content": "wow...I want to know your thought process\\n"
                    },
                    {
                        "username": "jjp8",
                        "content": "Python ints are weird. You have to mask them to get the two\\'s compliment. Read this for a great, detailed explaination:\\n\\nhttps://stackoverflow.com/questions/46993519/python-representation-of-negative-integers"
                    },
                    {
                        "username": "wizard7",
                        "content": "`return sum([a, b])`"
                    },
                    {
                        "username": "hwang1607",
                        "content": "would this be accepted in an interview???"
                    },
                    {
                        "username": "linuscodes56",
                        "content": "bro it only work in python\\n\\uD83D\\uDE1E"
                    },
                    {
                        "username": "hkyiitd",
                        "content": "return (a^b) + 2(a&b);"
                    },
                    {
                        "username": "psionl0",
                        "content": "You used a +"
                    },
                    {
                        "username": "jahir_raihan",
                        "content": "\\'\\'\\'\\nreturn sum([a,b])\\n\\'\\'\\'"
                    },
                    {
                        "username": "pegasus16",
                        "content": "weak test cases"
                    },
                    {
                        "username": "kabali",
                        "content": "/* carry is not a signed integer */\\nreturn b==0 ? a : getSum(a^b,((unsigned int)(a&b))<<1);"
                    },
                    {
                        "username": "dhruv2180",
                        "content": "when integers are negative the same logic fails for python and gives time limit exceeded , does any one know why ? My guess is that the while loop that checks carry!=0 is not terminating is because the signed bit is always set."
                    },
                    {
                        "username": "ffskyfan",
                        "content": "In chapter 12 of this book,you will find a solution that to build a adder use Logic Gates.\\nthis book is highly recommended"
                    },
                    {
                        "username": "ccdd4ever",
                        "content": "<pre>//we can calculate like adder or summer in digit circut\\n// A\\tB\\tC\\tS\\n// 0\\t0\\t0\\t0\\n// 1\\t0\\t0\\t1\\n// 0\\t1\\t0\\t1\\n// 1\\t1\\t1\\t0\\n//c means carry,we can get c using \"&\"(and) operator;s means sum,we can get s using \"^\"(xor)\\n//our final result could be calculate by 2*carry+s,and we can use recursion to replace the \"+\" operator\\n\\n\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc add(a int32, b int32) int32 {\\n\\tif a == 0 {\\n\\t\\treturn b\\n\\t}\\n\\tif b == 0 {\\n\\t\\treturn a\\n\\t}\\n\\treturn add(2*(a&b), a^b)\\n}\\n\\nfunc main() {\\n\\tfmt.Println(add(-20, 3))\\n}\\n\\n<code>"
                    }
                ]
            },
            {
                "id": 1571642,
                "content": [
                    {
                        "username": "iamvucms",
                        "content": "return sum([a,b])"
                    },
                    {
                        "username": "Amal_Dubey",
                        "content": "wow...I want to know your thought process\\n"
                    },
                    {
                        "username": "jjp8",
                        "content": "Python ints are weird. You have to mask them to get the two\\'s compliment. Read this for a great, detailed explaination:\\n\\nhttps://stackoverflow.com/questions/46993519/python-representation-of-negative-integers"
                    },
                    {
                        "username": "wizard7",
                        "content": "`return sum([a, b])`"
                    },
                    {
                        "username": "hwang1607",
                        "content": "would this be accepted in an interview???"
                    },
                    {
                        "username": "linuscodes56",
                        "content": "bro it only work in python\\n\\uD83D\\uDE1E"
                    },
                    {
                        "username": "hkyiitd",
                        "content": "return (a^b) + 2(a&b);"
                    },
                    {
                        "username": "psionl0",
                        "content": "You used a +"
                    },
                    {
                        "username": "jahir_raihan",
                        "content": "\\'\\'\\'\\nreturn sum([a,b])\\n\\'\\'\\'"
                    },
                    {
                        "username": "pegasus16",
                        "content": "weak test cases"
                    },
                    {
                        "username": "kabali",
                        "content": "/* carry is not a signed integer */\\nreturn b==0 ? a : getSum(a^b,((unsigned int)(a&b))<<1);"
                    },
                    {
                        "username": "dhruv2180",
                        "content": "when integers are negative the same logic fails for python and gives time limit exceeded , does any one know why ? My guess is that the while loop that checks carry!=0 is not terminating is because the signed bit is always set."
                    },
                    {
                        "username": "ffskyfan",
                        "content": "In chapter 12 of this book,you will find a solution that to build a adder use Logic Gates.\\nthis book is highly recommended"
                    },
                    {
                        "username": "ccdd4ever",
                        "content": "<pre>//we can calculate like adder or summer in digit circut\\n// A\\tB\\tC\\tS\\n// 0\\t0\\t0\\t0\\n// 1\\t0\\t0\\t1\\n// 0\\t1\\t0\\t1\\n// 1\\t1\\t1\\t0\\n//c means carry,we can get c using \"&\"(and) operator;s means sum,we can get s using \"^\"(xor)\\n//our final result could be calculate by 2*carry+s,and we can use recursion to replace the \"+\" operator\\n\\n\\npackage main\\n\\nimport \"fmt\"\\n\\nfunc add(a int32, b int32) int32 {\\n\\tif a == 0 {\\n\\t\\treturn b\\n\\t}\\n\\tif b == 0 {\\n\\t\\treturn a\\n\\t}\\n\\treturn add(2*(a&b), a^b)\\n}\\n\\nfunc main() {\\n\\tfmt.Println(add(-20, 3))\\n}\\n\\n<code>"
                    }
                ]
            },
            {
                "id": 1573844,
                "content": [
                    {
                        "username": "bipinsingh061",
                        "content": "return a+b ;\\n// it works"
                    },
                    {
                        "username": "heapdump",
                        "content": "More dislikes on this problem than likes"
                    },
                    {
                        "username": "Everynameistaken",
                        "content": "While the idea is probably bit manipulation, it does seem to get fooled by += or (if using C/C++) inline assembly."
                    },
                    {
                        "username": "code__HARD",
                        "content": "These two are standard equation to be remembered while solving bitwise problems.\\n1.(a+b) = (a|b) + (a&b) \\n2.(a+b) = (a^b) + (2*(a&b))\\nIn first relation +(a&b) as  OR considers only one set bit even if both numbers have set at bit at that possition.\\nIn second relation +2*(a&b) as XOR  neglects if both bits are set one at that position."
                    },
                    {
                        "username": "sergei99",
                        "content": "This should be an Easy task, certainly not Medium."
                    },
                    {
                        "username": "metisko35",
                        "content": "Guys you can use + operator and it accepts"
                    },
                    {
                        "username": "manavkhandurie",
                        "content": "Am i supposed to not use + operator in its entirety or just in case of adding these numbers? \\nLike if i add 2 strings/chars using + is that valid ??\\n"
                    },
                    {
                        "username": "yuangaonyc",
                        "content": "No matter how many times I\\'ve looked at the solution, I have to relearn this problem every time I see it. "
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Another Easiest problem \\n`return sum([a,b])`"
                    },
                    {
                        "username": "startupveteran",
                        "content": "The fact that this question only has a 51% acceptance rate suggests the prompt is more complicated than I\\'m giving it credit for. What\\'s stopping me from leveraging arrays/lists in the real interview?\\n\\nfor example:\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\nWhat am I missing here?"
                    }
                ]
            },
            {
                "id": 1576310,
                "content": [
                    {
                        "username": "bipinsingh061",
                        "content": "return a+b ;\\n// it works"
                    },
                    {
                        "username": "heapdump",
                        "content": "More dislikes on this problem than likes"
                    },
                    {
                        "username": "Everynameistaken",
                        "content": "While the idea is probably bit manipulation, it does seem to get fooled by += or (if using C/C++) inline assembly."
                    },
                    {
                        "username": "code__HARD",
                        "content": "These two are standard equation to be remembered while solving bitwise problems.\\n1.(a+b) = (a|b) + (a&b) \\n2.(a+b) = (a^b) + (2*(a&b))\\nIn first relation +(a&b) as  OR considers only one set bit even if both numbers have set at bit at that possition.\\nIn second relation +2*(a&b) as XOR  neglects if both bits are set one at that position."
                    },
                    {
                        "username": "sergei99",
                        "content": "This should be an Easy task, certainly not Medium."
                    },
                    {
                        "username": "metisko35",
                        "content": "Guys you can use + operator and it accepts"
                    },
                    {
                        "username": "manavkhandurie",
                        "content": "Am i supposed to not use + operator in its entirety or just in case of adding these numbers? \\nLike if i add 2 strings/chars using + is that valid ??\\n"
                    },
                    {
                        "username": "yuangaonyc",
                        "content": "No matter how many times I\\'ve looked at the solution, I have to relearn this problem every time I see it. "
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Another Easiest problem \\n`return sum([a,b])`"
                    },
                    {
                        "username": "startupveteran",
                        "content": "The fact that this question only has a 51% acceptance rate suggests the prompt is more complicated than I\\'m giving it credit for. What\\'s stopping me from leveraging arrays/lists in the real interview?\\n\\nfor example:\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\nWhat am I missing here?"
                    }
                ]
            },
            {
                "id": 2075167,
                "content": [
                    {
                        "username": "bipinsingh061",
                        "content": "return a+b ;\\n// it works"
                    },
                    {
                        "username": "heapdump",
                        "content": "More dislikes on this problem than likes"
                    },
                    {
                        "username": "Everynameistaken",
                        "content": "While the idea is probably bit manipulation, it does seem to get fooled by += or (if using C/C++) inline assembly."
                    },
                    {
                        "username": "code__HARD",
                        "content": "These two are standard equation to be remembered while solving bitwise problems.\\n1.(a+b) = (a|b) + (a&b) \\n2.(a+b) = (a^b) + (2*(a&b))\\nIn first relation +(a&b) as  OR considers only one set bit even if both numbers have set at bit at that possition.\\nIn second relation +2*(a&b) as XOR  neglects if both bits are set one at that position."
                    },
                    {
                        "username": "sergei99",
                        "content": "This should be an Easy task, certainly not Medium."
                    },
                    {
                        "username": "metisko35",
                        "content": "Guys you can use + operator and it accepts"
                    },
                    {
                        "username": "manavkhandurie",
                        "content": "Am i supposed to not use + operator in its entirety or just in case of adding these numbers? \\nLike if i add 2 strings/chars using + is that valid ??\\n"
                    },
                    {
                        "username": "yuangaonyc",
                        "content": "No matter how many times I\\'ve looked at the solution, I have to relearn this problem every time I see it. "
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Another Easiest problem \\n`return sum([a,b])`"
                    },
                    {
                        "username": "startupveteran",
                        "content": "The fact that this question only has a 51% acceptance rate suggests the prompt is more complicated than I\\'m giving it credit for. What\\'s stopping me from leveraging arrays/lists in the real interview?\\n\\nfor example:\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\nWhat am I missing here?"
                    }
                ]
            },
            {
                "id": 2051944,
                "content": [
                    {
                        "username": "bipinsingh061",
                        "content": "return a+b ;\\n// it works"
                    },
                    {
                        "username": "heapdump",
                        "content": "More dislikes on this problem than likes"
                    },
                    {
                        "username": "Everynameistaken",
                        "content": "While the idea is probably bit manipulation, it does seem to get fooled by += or (if using C/C++) inline assembly."
                    },
                    {
                        "username": "code__HARD",
                        "content": "These two are standard equation to be remembered while solving bitwise problems.\\n1.(a+b) = (a|b) + (a&b) \\n2.(a+b) = (a^b) + (2*(a&b))\\nIn first relation +(a&b) as  OR considers only one set bit even if both numbers have set at bit at that possition.\\nIn second relation +2*(a&b) as XOR  neglects if both bits are set one at that position."
                    },
                    {
                        "username": "sergei99",
                        "content": "This should be an Easy task, certainly not Medium."
                    },
                    {
                        "username": "metisko35",
                        "content": "Guys you can use + operator and it accepts"
                    },
                    {
                        "username": "manavkhandurie",
                        "content": "Am i supposed to not use + operator in its entirety or just in case of adding these numbers? \\nLike if i add 2 strings/chars using + is that valid ??\\n"
                    },
                    {
                        "username": "yuangaonyc",
                        "content": "No matter how many times I\\'ve looked at the solution, I have to relearn this problem every time I see it. "
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Another Easiest problem \\n`return sum([a,b])`"
                    },
                    {
                        "username": "startupveteran",
                        "content": "The fact that this question only has a 51% acceptance rate suggests the prompt is more complicated than I\\'m giving it credit for. What\\'s stopping me from leveraging arrays/lists in the real interview?\\n\\nfor example:\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\nWhat am I missing here?"
                    }
                ]
            },
            {
                "id": 2046433,
                "content": [
                    {
                        "username": "bipinsingh061",
                        "content": "return a+b ;\\n// it works"
                    },
                    {
                        "username": "heapdump",
                        "content": "More dislikes on this problem than likes"
                    },
                    {
                        "username": "Everynameistaken",
                        "content": "While the idea is probably bit manipulation, it does seem to get fooled by += or (if using C/C++) inline assembly."
                    },
                    {
                        "username": "code__HARD",
                        "content": "These two are standard equation to be remembered while solving bitwise problems.\\n1.(a+b) = (a|b) + (a&b) \\n2.(a+b) = (a^b) + (2*(a&b))\\nIn first relation +(a&b) as  OR considers only one set bit even if both numbers have set at bit at that possition.\\nIn second relation +2*(a&b) as XOR  neglects if both bits are set one at that position."
                    },
                    {
                        "username": "sergei99",
                        "content": "This should be an Easy task, certainly not Medium."
                    },
                    {
                        "username": "metisko35",
                        "content": "Guys you can use + operator and it accepts"
                    },
                    {
                        "username": "manavkhandurie",
                        "content": "Am i supposed to not use + operator in its entirety or just in case of adding these numbers? \\nLike if i add 2 strings/chars using + is that valid ??\\n"
                    },
                    {
                        "username": "yuangaonyc",
                        "content": "No matter how many times I\\'ve looked at the solution, I have to relearn this problem every time I see it. "
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Another Easiest problem \\n`return sum([a,b])`"
                    },
                    {
                        "username": "startupveteran",
                        "content": "The fact that this question only has a 51% acceptance rate suggests the prompt is more complicated than I\\'m giving it credit for. What\\'s stopping me from leveraging arrays/lists in the real interview?\\n\\nfor example:\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\nWhat am I missing here?"
                    }
                ]
            },
            {
                "id": 2027332,
                "content": [
                    {
                        "username": "bipinsingh061",
                        "content": "return a+b ;\\n// it works"
                    },
                    {
                        "username": "heapdump",
                        "content": "More dislikes on this problem than likes"
                    },
                    {
                        "username": "Everynameistaken",
                        "content": "While the idea is probably bit manipulation, it does seem to get fooled by += or (if using C/C++) inline assembly."
                    },
                    {
                        "username": "code__HARD",
                        "content": "These two are standard equation to be remembered while solving bitwise problems.\\n1.(a+b) = (a|b) + (a&b) \\n2.(a+b) = (a^b) + (2*(a&b))\\nIn first relation +(a&b) as  OR considers only one set bit even if both numbers have set at bit at that possition.\\nIn second relation +2*(a&b) as XOR  neglects if both bits are set one at that position."
                    },
                    {
                        "username": "sergei99",
                        "content": "This should be an Easy task, certainly not Medium."
                    },
                    {
                        "username": "metisko35",
                        "content": "Guys you can use + operator and it accepts"
                    },
                    {
                        "username": "manavkhandurie",
                        "content": "Am i supposed to not use + operator in its entirety or just in case of adding these numbers? \\nLike if i add 2 strings/chars using + is that valid ??\\n"
                    },
                    {
                        "username": "yuangaonyc",
                        "content": "No matter how many times I\\'ve looked at the solution, I have to relearn this problem every time I see it. "
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Another Easiest problem \\n`return sum([a,b])`"
                    },
                    {
                        "username": "startupveteran",
                        "content": "The fact that this question only has a 51% acceptance rate suggests the prompt is more complicated than I\\'m giving it credit for. What\\'s stopping me from leveraging arrays/lists in the real interview?\\n\\nfor example:\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\nWhat am I missing here?"
                    }
                ]
            },
            {
                "id": 2016303,
                "content": [
                    {
                        "username": "bipinsingh061",
                        "content": "return a+b ;\\n// it works"
                    },
                    {
                        "username": "heapdump",
                        "content": "More dislikes on this problem than likes"
                    },
                    {
                        "username": "Everynameistaken",
                        "content": "While the idea is probably bit manipulation, it does seem to get fooled by += or (if using C/C++) inline assembly."
                    },
                    {
                        "username": "code__HARD",
                        "content": "These two are standard equation to be remembered while solving bitwise problems.\\n1.(a+b) = (a|b) + (a&b) \\n2.(a+b) = (a^b) + (2*(a&b))\\nIn first relation +(a&b) as  OR considers only one set bit even if both numbers have set at bit at that possition.\\nIn second relation +2*(a&b) as XOR  neglects if both bits are set one at that position."
                    },
                    {
                        "username": "sergei99",
                        "content": "This should be an Easy task, certainly not Medium."
                    },
                    {
                        "username": "metisko35",
                        "content": "Guys you can use + operator and it accepts"
                    },
                    {
                        "username": "manavkhandurie",
                        "content": "Am i supposed to not use + operator in its entirety or just in case of adding these numbers? \\nLike if i add 2 strings/chars using + is that valid ??\\n"
                    },
                    {
                        "username": "yuangaonyc",
                        "content": "No matter how many times I\\'ve looked at the solution, I have to relearn this problem every time I see it. "
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Another Easiest problem \\n`return sum([a,b])`"
                    },
                    {
                        "username": "startupveteran",
                        "content": "The fact that this question only has a 51% acceptance rate suggests the prompt is more complicated than I\\'m giving it credit for. What\\'s stopping me from leveraging arrays/lists in the real interview?\\n\\nfor example:\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\nWhat am I missing here?"
                    }
                ]
            },
            {
                "id": 2010276,
                "content": [
                    {
                        "username": "bipinsingh061",
                        "content": "return a+b ;\\n// it works"
                    },
                    {
                        "username": "heapdump",
                        "content": "More dislikes on this problem than likes"
                    },
                    {
                        "username": "Everynameistaken",
                        "content": "While the idea is probably bit manipulation, it does seem to get fooled by += or (if using C/C++) inline assembly."
                    },
                    {
                        "username": "code__HARD",
                        "content": "These two are standard equation to be remembered while solving bitwise problems.\\n1.(a+b) = (a|b) + (a&b) \\n2.(a+b) = (a^b) + (2*(a&b))\\nIn first relation +(a&b) as  OR considers only one set bit even if both numbers have set at bit at that possition.\\nIn second relation +2*(a&b) as XOR  neglects if both bits are set one at that position."
                    },
                    {
                        "username": "sergei99",
                        "content": "This should be an Easy task, certainly not Medium."
                    },
                    {
                        "username": "metisko35",
                        "content": "Guys you can use + operator and it accepts"
                    },
                    {
                        "username": "manavkhandurie",
                        "content": "Am i supposed to not use + operator in its entirety or just in case of adding these numbers? \\nLike if i add 2 strings/chars using + is that valid ??\\n"
                    },
                    {
                        "username": "yuangaonyc",
                        "content": "No matter how many times I\\'ve looked at the solution, I have to relearn this problem every time I see it. "
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Another Easiest problem \\n`return sum([a,b])`"
                    },
                    {
                        "username": "startupveteran",
                        "content": "The fact that this question only has a 51% acceptance rate suggests the prompt is more complicated than I\\'m giving it credit for. What\\'s stopping me from leveraging arrays/lists in the real interview?\\n\\nfor example:\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\nWhat am I missing here?"
                    }
                ]
            },
            {
                "id": 1967726,
                "content": [
                    {
                        "username": "bipinsingh061",
                        "content": "return a+b ;\\n// it works"
                    },
                    {
                        "username": "heapdump",
                        "content": "More dislikes on this problem than likes"
                    },
                    {
                        "username": "Everynameistaken",
                        "content": "While the idea is probably bit manipulation, it does seem to get fooled by += or (if using C/C++) inline assembly."
                    },
                    {
                        "username": "code__HARD",
                        "content": "These two are standard equation to be remembered while solving bitwise problems.\\n1.(a+b) = (a|b) + (a&b) \\n2.(a+b) = (a^b) + (2*(a&b))\\nIn first relation +(a&b) as  OR considers only one set bit even if both numbers have set at bit at that possition.\\nIn second relation +2*(a&b) as XOR  neglects if both bits are set one at that position."
                    },
                    {
                        "username": "sergei99",
                        "content": "This should be an Easy task, certainly not Medium."
                    },
                    {
                        "username": "metisko35",
                        "content": "Guys you can use + operator and it accepts"
                    },
                    {
                        "username": "manavkhandurie",
                        "content": "Am i supposed to not use + operator in its entirety or just in case of adding these numbers? \\nLike if i add 2 strings/chars using + is that valid ??\\n"
                    },
                    {
                        "username": "yuangaonyc",
                        "content": "No matter how many times I\\'ve looked at the solution, I have to relearn this problem every time I see it. "
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Another Easiest problem \\n`return sum([a,b])`"
                    },
                    {
                        "username": "startupveteran",
                        "content": "The fact that this question only has a 51% acceptance rate suggests the prompt is more complicated than I\\'m giving it credit for. What\\'s stopping me from leveraging arrays/lists in the real interview?\\n\\nfor example:\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\nWhat am I missing here?"
                    }
                ]
            },
            {
                "id": 1936360,
                "content": [
                    {
                        "username": "bipinsingh061",
                        "content": "return a+b ;\\n// it works"
                    },
                    {
                        "username": "heapdump",
                        "content": "More dislikes on this problem than likes"
                    },
                    {
                        "username": "Everynameistaken",
                        "content": "While the idea is probably bit manipulation, it does seem to get fooled by += or (if using C/C++) inline assembly."
                    },
                    {
                        "username": "code__HARD",
                        "content": "These two are standard equation to be remembered while solving bitwise problems.\\n1.(a+b) = (a|b) + (a&b) \\n2.(a+b) = (a^b) + (2*(a&b))\\nIn first relation +(a&b) as  OR considers only one set bit even if both numbers have set at bit at that possition.\\nIn second relation +2*(a&b) as XOR  neglects if both bits are set one at that position."
                    },
                    {
                        "username": "sergei99",
                        "content": "This should be an Easy task, certainly not Medium."
                    },
                    {
                        "username": "metisko35",
                        "content": "Guys you can use + operator and it accepts"
                    },
                    {
                        "username": "manavkhandurie",
                        "content": "Am i supposed to not use + operator in its entirety or just in case of adding these numbers? \\nLike if i add 2 strings/chars using + is that valid ??\\n"
                    },
                    {
                        "username": "yuangaonyc",
                        "content": "No matter how many times I\\'ve looked at the solution, I have to relearn this problem every time I see it. "
                    },
                    {
                        "username": "a_andreasian",
                        "content": "Another Easiest problem \\n`return sum([a,b])`"
                    },
                    {
                        "username": "startupveteran",
                        "content": "The fact that this question only has a 51% acceptance rate suggests the prompt is more complicated than I\\'m giving it credit for. What\\'s stopping me from leveraging arrays/lists in the real interview?\\n\\nfor example:\\n\\n\\nclass Solution:\\n    def getSum(self, a: int, b: int) -> int:\\n        return sum([a, b])\\n\\nWhat am I missing here?"
                    }
                ]
            },
            {
                "id": 1925589,
                "content": [
                    {
                        "username": "likekrishnendu",
                        "content": "Used += \\uD83D\\uDE36  : $a+=b$"
                    },
                    {
                        "username": "a_shish07",
                        "content": "I simply tried to sum two number by using + operator...and guess what !! IT WORKED . LOL"
                    },
                    {
                        "username": "sciguy09",
                        "content": "I tried running this:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b:\n            withoutcarry = (a ^ b)\n            b = (a & b) << 1\n            a = withoutcarry\n        return a\n```\n\nIt is running correctly for the following test cases and in total 8 out of 26 of LeetCode's testcases:\n\n> a, b = 1, 2\n>\n> a, b = 2, 3\n\nAnd a few others but not for this one:\n\n> a, b = -1, 1\n\nIt exceeds the time limit.\n\nI tried running the following code with a `mask` variable:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n        while b:\n            sum_ = (a ^ b) & mask\n            carry = ((a & b) << 1) & mask\n            a = sum_\n            b = carry\n        if (a >> 31) & 1:\n            return ~(a ^ mask)\n        return a\n```\n\nAnd it was able to pass all 3 testcases I listed earlier and in total 20 out of 26 of LeetCode's testcases but failed on:\n\n> a, b = -1, 0\n>\n> Its output for that was:\n>\n> 4294967295\n\nThen I tried the following code:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n\n        while b != 0:\n            tmp = (a & b) << 1\n            a = (a ^ b) & mask\n            b = tmp & mask\n\n        if a > mask // 2:\n            return ~(a ^ mask)\n        else:\n            return a\n```\n\nThis time it worked and passed all testcases but I don't know why it works."
                    },
                    {
                        "username": "harshitha____9",
                        "content": "i feel this approch is good but isn\\'t giving crct  ans can you find out mistake in code?\\n int getSum(int a, int b) {\\n        bool c=false;\\n        int ans;\\n        for(int i=31;i>=0;i--)\\n        {\\n            bool x=a^(1<<i);\\n            bool y=b^(1<<i);\\n            if(a && b)\\n            {\\n               c=true;\\n            }\\n            else if(!a && !b && c)\\n            {\\n                ans|=1<<i;\\n                c=!c;\\n            }\\n            else if(a || b)\\n            {\\n                ans|=1<<i;\\n            }\\n            \\n\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "atul1503",
                        "content": " `class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b!=0:\n            c=(a&b)\n            a=(a^b)\n            b=(c)<<1\n        return a\n`\n\nSomeone check this code in python. It has the correct logic but time exceeds but works in all other langs."
                    },
                    {
                        "username": "machase04",
                        "content": "Times when Java is elite:\\nreturn Integer.sum(a, b);"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can I do like this\\nreturn sum([a,b])"
                    },
                    {
                        "username": "cenjian",
                        "content": "In python, just return sum([a,b])"
                    },
                    {
                        "username": "user2017ra",
                        "content": "for(int i = 1; i <= b; i++){\\n            a++;\\n        }\\n        return a;\\n\\nwhy above code is not working ?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "Because b can be a negative number. In that case, the loop will not start."
                    },
                    {
                        "username": "Venkatakrishnan_Ramesh",
                        "content": "Using xor and & operators we can execute the solution easily\\n\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b!=0){\\n            int temp = (a&b) <<1;\\n            a=a^b;\\n            b=temp;\\n        }\\n        return a;\\n        \\n    }\\n    \\n}"
                    }
                ]
            },
            {
                "id": 1883865,
                "content": [
                    {
                        "username": "likekrishnendu",
                        "content": "Used += \\uD83D\\uDE36  : $a+=b$"
                    },
                    {
                        "username": "a_shish07",
                        "content": "I simply tried to sum two number by using + operator...and guess what !! IT WORKED . LOL"
                    },
                    {
                        "username": "sciguy09",
                        "content": "I tried running this:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b:\n            withoutcarry = (a ^ b)\n            b = (a & b) << 1\n            a = withoutcarry\n        return a\n```\n\nIt is running correctly for the following test cases and in total 8 out of 26 of LeetCode's testcases:\n\n> a, b = 1, 2\n>\n> a, b = 2, 3\n\nAnd a few others but not for this one:\n\n> a, b = -1, 1\n\nIt exceeds the time limit.\n\nI tried running the following code with a `mask` variable:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n        while b:\n            sum_ = (a ^ b) & mask\n            carry = ((a & b) << 1) & mask\n            a = sum_\n            b = carry\n        if (a >> 31) & 1:\n            return ~(a ^ mask)\n        return a\n```\n\nAnd it was able to pass all 3 testcases I listed earlier and in total 20 out of 26 of LeetCode's testcases but failed on:\n\n> a, b = -1, 0\n>\n> Its output for that was:\n>\n> 4294967295\n\nThen I tried the following code:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n\n        while b != 0:\n            tmp = (a & b) << 1\n            a = (a ^ b) & mask\n            b = tmp & mask\n\n        if a > mask // 2:\n            return ~(a ^ mask)\n        else:\n            return a\n```\n\nThis time it worked and passed all testcases but I don't know why it works."
                    },
                    {
                        "username": "harshitha____9",
                        "content": "i feel this approch is good but isn\\'t giving crct  ans can you find out mistake in code?\\n int getSum(int a, int b) {\\n        bool c=false;\\n        int ans;\\n        for(int i=31;i>=0;i--)\\n        {\\n            bool x=a^(1<<i);\\n            bool y=b^(1<<i);\\n            if(a && b)\\n            {\\n               c=true;\\n            }\\n            else if(!a && !b && c)\\n            {\\n                ans|=1<<i;\\n                c=!c;\\n            }\\n            else if(a || b)\\n            {\\n                ans|=1<<i;\\n            }\\n            \\n\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "atul1503",
                        "content": " `class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b!=0:\n            c=(a&b)\n            a=(a^b)\n            b=(c)<<1\n        return a\n`\n\nSomeone check this code in python. It has the correct logic but time exceeds but works in all other langs."
                    },
                    {
                        "username": "machase04",
                        "content": "Times when Java is elite:\\nreturn Integer.sum(a, b);"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can I do like this\\nreturn sum([a,b])"
                    },
                    {
                        "username": "cenjian",
                        "content": "In python, just return sum([a,b])"
                    },
                    {
                        "username": "user2017ra",
                        "content": "for(int i = 1; i <= b; i++){\\n            a++;\\n        }\\n        return a;\\n\\nwhy above code is not working ?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "Because b can be a negative number. In that case, the loop will not start."
                    },
                    {
                        "username": "Venkatakrishnan_Ramesh",
                        "content": "Using xor and & operators we can execute the solution easily\\n\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b!=0){\\n            int temp = (a&b) <<1;\\n            a=a^b;\\n            b=temp;\\n        }\\n        return a;\\n        \\n    }\\n    \\n}"
                    }
                ]
            },
            {
                "id": 1871151,
                "content": [
                    {
                        "username": "likekrishnendu",
                        "content": "Used += \\uD83D\\uDE36  : $a+=b$"
                    },
                    {
                        "username": "a_shish07",
                        "content": "I simply tried to sum two number by using + operator...and guess what !! IT WORKED . LOL"
                    },
                    {
                        "username": "sciguy09",
                        "content": "I tried running this:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b:\n            withoutcarry = (a ^ b)\n            b = (a & b) << 1\n            a = withoutcarry\n        return a\n```\n\nIt is running correctly for the following test cases and in total 8 out of 26 of LeetCode's testcases:\n\n> a, b = 1, 2\n>\n> a, b = 2, 3\n\nAnd a few others but not for this one:\n\n> a, b = -1, 1\n\nIt exceeds the time limit.\n\nI tried running the following code with a `mask` variable:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n        while b:\n            sum_ = (a ^ b) & mask\n            carry = ((a & b) << 1) & mask\n            a = sum_\n            b = carry\n        if (a >> 31) & 1:\n            return ~(a ^ mask)\n        return a\n```\n\nAnd it was able to pass all 3 testcases I listed earlier and in total 20 out of 26 of LeetCode's testcases but failed on:\n\n> a, b = -1, 0\n>\n> Its output for that was:\n>\n> 4294967295\n\nThen I tried the following code:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n\n        while b != 0:\n            tmp = (a & b) << 1\n            a = (a ^ b) & mask\n            b = tmp & mask\n\n        if a > mask // 2:\n            return ~(a ^ mask)\n        else:\n            return a\n```\n\nThis time it worked and passed all testcases but I don't know why it works."
                    },
                    {
                        "username": "harshitha____9",
                        "content": "i feel this approch is good but isn\\'t giving crct  ans can you find out mistake in code?\\n int getSum(int a, int b) {\\n        bool c=false;\\n        int ans;\\n        for(int i=31;i>=0;i--)\\n        {\\n            bool x=a^(1<<i);\\n            bool y=b^(1<<i);\\n            if(a && b)\\n            {\\n               c=true;\\n            }\\n            else if(!a && !b && c)\\n            {\\n                ans|=1<<i;\\n                c=!c;\\n            }\\n            else if(a || b)\\n            {\\n                ans|=1<<i;\\n            }\\n            \\n\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "atul1503",
                        "content": " `class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b!=0:\n            c=(a&b)\n            a=(a^b)\n            b=(c)<<1\n        return a\n`\n\nSomeone check this code in python. It has the correct logic but time exceeds but works in all other langs."
                    },
                    {
                        "username": "machase04",
                        "content": "Times when Java is elite:\\nreturn Integer.sum(a, b);"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can I do like this\\nreturn sum([a,b])"
                    },
                    {
                        "username": "cenjian",
                        "content": "In python, just return sum([a,b])"
                    },
                    {
                        "username": "user2017ra",
                        "content": "for(int i = 1; i <= b; i++){\\n            a++;\\n        }\\n        return a;\\n\\nwhy above code is not working ?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "Because b can be a negative number. In that case, the loop will not start."
                    },
                    {
                        "username": "Venkatakrishnan_Ramesh",
                        "content": "Using xor and & operators we can execute the solution easily\\n\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b!=0){\\n            int temp = (a&b) <<1;\\n            a=a^b;\\n            b=temp;\\n        }\\n        return a;\\n        \\n    }\\n    \\n}"
                    }
                ]
            },
            {
                "id": 1870982,
                "content": [
                    {
                        "username": "likekrishnendu",
                        "content": "Used += \\uD83D\\uDE36  : $a+=b$"
                    },
                    {
                        "username": "a_shish07",
                        "content": "I simply tried to sum two number by using + operator...and guess what !! IT WORKED . LOL"
                    },
                    {
                        "username": "sciguy09",
                        "content": "I tried running this:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b:\n            withoutcarry = (a ^ b)\n            b = (a & b) << 1\n            a = withoutcarry\n        return a\n```\n\nIt is running correctly for the following test cases and in total 8 out of 26 of LeetCode's testcases:\n\n> a, b = 1, 2\n>\n> a, b = 2, 3\n\nAnd a few others but not for this one:\n\n> a, b = -1, 1\n\nIt exceeds the time limit.\n\nI tried running the following code with a `mask` variable:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n        while b:\n            sum_ = (a ^ b) & mask\n            carry = ((a & b) << 1) & mask\n            a = sum_\n            b = carry\n        if (a >> 31) & 1:\n            return ~(a ^ mask)\n        return a\n```\n\nAnd it was able to pass all 3 testcases I listed earlier and in total 20 out of 26 of LeetCode's testcases but failed on:\n\n> a, b = -1, 0\n>\n> Its output for that was:\n>\n> 4294967295\n\nThen I tried the following code:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n\n        while b != 0:\n            tmp = (a & b) << 1\n            a = (a ^ b) & mask\n            b = tmp & mask\n\n        if a > mask // 2:\n            return ~(a ^ mask)\n        else:\n            return a\n```\n\nThis time it worked and passed all testcases but I don't know why it works."
                    },
                    {
                        "username": "harshitha____9",
                        "content": "i feel this approch is good but isn\\'t giving crct  ans can you find out mistake in code?\\n int getSum(int a, int b) {\\n        bool c=false;\\n        int ans;\\n        for(int i=31;i>=0;i--)\\n        {\\n            bool x=a^(1<<i);\\n            bool y=b^(1<<i);\\n            if(a && b)\\n            {\\n               c=true;\\n            }\\n            else if(!a && !b && c)\\n            {\\n                ans|=1<<i;\\n                c=!c;\\n            }\\n            else if(a || b)\\n            {\\n                ans|=1<<i;\\n            }\\n            \\n\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "atul1503",
                        "content": " `class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b!=0:\n            c=(a&b)\n            a=(a^b)\n            b=(c)<<1\n        return a\n`\n\nSomeone check this code in python. It has the correct logic but time exceeds but works in all other langs."
                    },
                    {
                        "username": "machase04",
                        "content": "Times when Java is elite:\\nreturn Integer.sum(a, b);"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can I do like this\\nreturn sum([a,b])"
                    },
                    {
                        "username": "cenjian",
                        "content": "In python, just return sum([a,b])"
                    },
                    {
                        "username": "user2017ra",
                        "content": "for(int i = 1; i <= b; i++){\\n            a++;\\n        }\\n        return a;\\n\\nwhy above code is not working ?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "Because b can be a negative number. In that case, the loop will not start."
                    },
                    {
                        "username": "Venkatakrishnan_Ramesh",
                        "content": "Using xor and & operators we can execute the solution easily\\n\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b!=0){\\n            int temp = (a&b) <<1;\\n            a=a^b;\\n            b=temp;\\n        }\\n        return a;\\n        \\n    }\\n    \\n}"
                    }
                ]
            },
            {
                "id": 1867891,
                "content": [
                    {
                        "username": "likekrishnendu",
                        "content": "Used += \\uD83D\\uDE36  : $a+=b$"
                    },
                    {
                        "username": "a_shish07",
                        "content": "I simply tried to sum two number by using + operator...and guess what !! IT WORKED . LOL"
                    },
                    {
                        "username": "sciguy09",
                        "content": "I tried running this:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b:\n            withoutcarry = (a ^ b)\n            b = (a & b) << 1\n            a = withoutcarry\n        return a\n```\n\nIt is running correctly for the following test cases and in total 8 out of 26 of LeetCode's testcases:\n\n> a, b = 1, 2\n>\n> a, b = 2, 3\n\nAnd a few others but not for this one:\n\n> a, b = -1, 1\n\nIt exceeds the time limit.\n\nI tried running the following code with a `mask` variable:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n        while b:\n            sum_ = (a ^ b) & mask\n            carry = ((a & b) << 1) & mask\n            a = sum_\n            b = carry\n        if (a >> 31) & 1:\n            return ~(a ^ mask)\n        return a\n```\n\nAnd it was able to pass all 3 testcases I listed earlier and in total 20 out of 26 of LeetCode's testcases but failed on:\n\n> a, b = -1, 0\n>\n> Its output for that was:\n>\n> 4294967295\n\nThen I tried the following code:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n\n        while b != 0:\n            tmp = (a & b) << 1\n            a = (a ^ b) & mask\n            b = tmp & mask\n\n        if a > mask // 2:\n            return ~(a ^ mask)\n        else:\n            return a\n```\n\nThis time it worked and passed all testcases but I don't know why it works."
                    },
                    {
                        "username": "harshitha____9",
                        "content": "i feel this approch is good but isn\\'t giving crct  ans can you find out mistake in code?\\n int getSum(int a, int b) {\\n        bool c=false;\\n        int ans;\\n        for(int i=31;i>=0;i--)\\n        {\\n            bool x=a^(1<<i);\\n            bool y=b^(1<<i);\\n            if(a && b)\\n            {\\n               c=true;\\n            }\\n            else if(!a && !b && c)\\n            {\\n                ans|=1<<i;\\n                c=!c;\\n            }\\n            else if(a || b)\\n            {\\n                ans|=1<<i;\\n            }\\n            \\n\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "atul1503",
                        "content": " `class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b!=0:\n            c=(a&b)\n            a=(a^b)\n            b=(c)<<1\n        return a\n`\n\nSomeone check this code in python. It has the correct logic but time exceeds but works in all other langs."
                    },
                    {
                        "username": "machase04",
                        "content": "Times when Java is elite:\\nreturn Integer.sum(a, b);"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can I do like this\\nreturn sum([a,b])"
                    },
                    {
                        "username": "cenjian",
                        "content": "In python, just return sum([a,b])"
                    },
                    {
                        "username": "user2017ra",
                        "content": "for(int i = 1; i <= b; i++){\\n            a++;\\n        }\\n        return a;\\n\\nwhy above code is not working ?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "Because b can be a negative number. In that case, the loop will not start."
                    },
                    {
                        "username": "Venkatakrishnan_Ramesh",
                        "content": "Using xor and & operators we can execute the solution easily\\n\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b!=0){\\n            int temp = (a&b) <<1;\\n            a=a^b;\\n            b=temp;\\n        }\\n        return a;\\n        \\n    }\\n    \\n}"
                    }
                ]
            },
            {
                "id": 1863048,
                "content": [
                    {
                        "username": "likekrishnendu",
                        "content": "Used += \\uD83D\\uDE36  : $a+=b$"
                    },
                    {
                        "username": "a_shish07",
                        "content": "I simply tried to sum two number by using + operator...and guess what !! IT WORKED . LOL"
                    },
                    {
                        "username": "sciguy09",
                        "content": "I tried running this:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b:\n            withoutcarry = (a ^ b)\n            b = (a & b) << 1\n            a = withoutcarry\n        return a\n```\n\nIt is running correctly for the following test cases and in total 8 out of 26 of LeetCode's testcases:\n\n> a, b = 1, 2\n>\n> a, b = 2, 3\n\nAnd a few others but not for this one:\n\n> a, b = -1, 1\n\nIt exceeds the time limit.\n\nI tried running the following code with a `mask` variable:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n        while b:\n            sum_ = (a ^ b) & mask\n            carry = ((a & b) << 1) & mask\n            a = sum_\n            b = carry\n        if (a >> 31) & 1:\n            return ~(a ^ mask)\n        return a\n```\n\nAnd it was able to pass all 3 testcases I listed earlier and in total 20 out of 26 of LeetCode's testcases but failed on:\n\n> a, b = -1, 0\n>\n> Its output for that was:\n>\n> 4294967295\n\nThen I tried the following code:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n\n        while b != 0:\n            tmp = (a & b) << 1\n            a = (a ^ b) & mask\n            b = tmp & mask\n\n        if a > mask // 2:\n            return ~(a ^ mask)\n        else:\n            return a\n```\n\nThis time it worked and passed all testcases but I don't know why it works."
                    },
                    {
                        "username": "harshitha____9",
                        "content": "i feel this approch is good but isn\\'t giving crct  ans can you find out mistake in code?\\n int getSum(int a, int b) {\\n        bool c=false;\\n        int ans;\\n        for(int i=31;i>=0;i--)\\n        {\\n            bool x=a^(1<<i);\\n            bool y=b^(1<<i);\\n            if(a && b)\\n            {\\n               c=true;\\n            }\\n            else if(!a && !b && c)\\n            {\\n                ans|=1<<i;\\n                c=!c;\\n            }\\n            else if(a || b)\\n            {\\n                ans|=1<<i;\\n            }\\n            \\n\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "atul1503",
                        "content": " `class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b!=0:\n            c=(a&b)\n            a=(a^b)\n            b=(c)<<1\n        return a\n`\n\nSomeone check this code in python. It has the correct logic but time exceeds but works in all other langs."
                    },
                    {
                        "username": "machase04",
                        "content": "Times when Java is elite:\\nreturn Integer.sum(a, b);"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can I do like this\\nreturn sum([a,b])"
                    },
                    {
                        "username": "cenjian",
                        "content": "In python, just return sum([a,b])"
                    },
                    {
                        "username": "user2017ra",
                        "content": "for(int i = 1; i <= b; i++){\\n            a++;\\n        }\\n        return a;\\n\\nwhy above code is not working ?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "Because b can be a negative number. In that case, the loop will not start."
                    },
                    {
                        "username": "Venkatakrishnan_Ramesh",
                        "content": "Using xor and & operators we can execute the solution easily\\n\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b!=0){\\n            int temp = (a&b) <<1;\\n            a=a^b;\\n            b=temp;\\n        }\\n        return a;\\n        \\n    }\\n    \\n}"
                    }
                ]
            },
            {
                "id": 1855728,
                "content": [
                    {
                        "username": "likekrishnendu",
                        "content": "Used += \\uD83D\\uDE36  : $a+=b$"
                    },
                    {
                        "username": "a_shish07",
                        "content": "I simply tried to sum two number by using + operator...and guess what !! IT WORKED . LOL"
                    },
                    {
                        "username": "sciguy09",
                        "content": "I tried running this:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b:\n            withoutcarry = (a ^ b)\n            b = (a & b) << 1\n            a = withoutcarry\n        return a\n```\n\nIt is running correctly for the following test cases and in total 8 out of 26 of LeetCode's testcases:\n\n> a, b = 1, 2\n>\n> a, b = 2, 3\n\nAnd a few others but not for this one:\n\n> a, b = -1, 1\n\nIt exceeds the time limit.\n\nI tried running the following code with a `mask` variable:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n        while b:\n            sum_ = (a ^ b) & mask\n            carry = ((a & b) << 1) & mask\n            a = sum_\n            b = carry\n        if (a >> 31) & 1:\n            return ~(a ^ mask)\n        return a\n```\n\nAnd it was able to pass all 3 testcases I listed earlier and in total 20 out of 26 of LeetCode's testcases but failed on:\n\n> a, b = -1, 0\n>\n> Its output for that was:\n>\n> 4294967295\n\nThen I tried the following code:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n\n        while b != 0:\n            tmp = (a & b) << 1\n            a = (a ^ b) & mask\n            b = tmp & mask\n\n        if a > mask // 2:\n            return ~(a ^ mask)\n        else:\n            return a\n```\n\nThis time it worked and passed all testcases but I don't know why it works."
                    },
                    {
                        "username": "harshitha____9",
                        "content": "i feel this approch is good but isn\\'t giving crct  ans can you find out mistake in code?\\n int getSum(int a, int b) {\\n        bool c=false;\\n        int ans;\\n        for(int i=31;i>=0;i--)\\n        {\\n            bool x=a^(1<<i);\\n            bool y=b^(1<<i);\\n            if(a && b)\\n            {\\n               c=true;\\n            }\\n            else if(!a && !b && c)\\n            {\\n                ans|=1<<i;\\n                c=!c;\\n            }\\n            else if(a || b)\\n            {\\n                ans|=1<<i;\\n            }\\n            \\n\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "atul1503",
                        "content": " `class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b!=0:\n            c=(a&b)\n            a=(a^b)\n            b=(c)<<1\n        return a\n`\n\nSomeone check this code in python. It has the correct logic but time exceeds but works in all other langs."
                    },
                    {
                        "username": "machase04",
                        "content": "Times when Java is elite:\\nreturn Integer.sum(a, b);"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can I do like this\\nreturn sum([a,b])"
                    },
                    {
                        "username": "cenjian",
                        "content": "In python, just return sum([a,b])"
                    },
                    {
                        "username": "user2017ra",
                        "content": "for(int i = 1; i <= b; i++){\\n            a++;\\n        }\\n        return a;\\n\\nwhy above code is not working ?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "Because b can be a negative number. In that case, the loop will not start."
                    },
                    {
                        "username": "Venkatakrishnan_Ramesh",
                        "content": "Using xor and & operators we can execute the solution easily\\n\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b!=0){\\n            int temp = (a&b) <<1;\\n            a=a^b;\\n            b=temp;\\n        }\\n        return a;\\n        \\n    }\\n    \\n}"
                    }
                ]
            },
            {
                "id": 1841405,
                "content": [
                    {
                        "username": "likekrishnendu",
                        "content": "Used += \\uD83D\\uDE36  : $a+=b$"
                    },
                    {
                        "username": "a_shish07",
                        "content": "I simply tried to sum two number by using + operator...and guess what !! IT WORKED . LOL"
                    },
                    {
                        "username": "sciguy09",
                        "content": "I tried running this:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b:\n            withoutcarry = (a ^ b)\n            b = (a & b) << 1\n            a = withoutcarry\n        return a\n```\n\nIt is running correctly for the following test cases and in total 8 out of 26 of LeetCode's testcases:\n\n> a, b = 1, 2\n>\n> a, b = 2, 3\n\nAnd a few others but not for this one:\n\n> a, b = -1, 1\n\nIt exceeds the time limit.\n\nI tried running the following code with a `mask` variable:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n        while b:\n            sum_ = (a ^ b) & mask\n            carry = ((a & b) << 1) & mask\n            a = sum_\n            b = carry\n        if (a >> 31) & 1:\n            return ~(a ^ mask)\n        return a\n```\n\nAnd it was able to pass all 3 testcases I listed earlier and in total 20 out of 26 of LeetCode's testcases but failed on:\n\n> a, b = -1, 0\n>\n> Its output for that was:\n>\n> 4294967295\n\nThen I tried the following code:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n\n        while b != 0:\n            tmp = (a & b) << 1\n            a = (a ^ b) & mask\n            b = tmp & mask\n\n        if a > mask // 2:\n            return ~(a ^ mask)\n        else:\n            return a\n```\n\nThis time it worked and passed all testcases but I don't know why it works."
                    },
                    {
                        "username": "harshitha____9",
                        "content": "i feel this approch is good but isn\\'t giving crct  ans can you find out mistake in code?\\n int getSum(int a, int b) {\\n        bool c=false;\\n        int ans;\\n        for(int i=31;i>=0;i--)\\n        {\\n            bool x=a^(1<<i);\\n            bool y=b^(1<<i);\\n            if(a && b)\\n            {\\n               c=true;\\n            }\\n            else if(!a && !b && c)\\n            {\\n                ans|=1<<i;\\n                c=!c;\\n            }\\n            else if(a || b)\\n            {\\n                ans|=1<<i;\\n            }\\n            \\n\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "atul1503",
                        "content": " `class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b!=0:\n            c=(a&b)\n            a=(a^b)\n            b=(c)<<1\n        return a\n`\n\nSomeone check this code in python. It has the correct logic but time exceeds but works in all other langs."
                    },
                    {
                        "username": "machase04",
                        "content": "Times when Java is elite:\\nreturn Integer.sum(a, b);"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can I do like this\\nreturn sum([a,b])"
                    },
                    {
                        "username": "cenjian",
                        "content": "In python, just return sum([a,b])"
                    },
                    {
                        "username": "user2017ra",
                        "content": "for(int i = 1; i <= b; i++){\\n            a++;\\n        }\\n        return a;\\n\\nwhy above code is not working ?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "Because b can be a negative number. In that case, the loop will not start."
                    },
                    {
                        "username": "Venkatakrishnan_Ramesh",
                        "content": "Using xor and & operators we can execute the solution easily\\n\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b!=0){\\n            int temp = (a&b) <<1;\\n            a=a^b;\\n            b=temp;\\n        }\\n        return a;\\n        \\n    }\\n    \\n}"
                    }
                ]
            },
            {
                "id": 1813394,
                "content": [
                    {
                        "username": "likekrishnendu",
                        "content": "Used += \\uD83D\\uDE36  : $a+=b$"
                    },
                    {
                        "username": "a_shish07",
                        "content": "I simply tried to sum two number by using + operator...and guess what !! IT WORKED . LOL"
                    },
                    {
                        "username": "sciguy09",
                        "content": "I tried running this:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b:\n            withoutcarry = (a ^ b)\n            b = (a & b) << 1\n            a = withoutcarry\n        return a\n```\n\nIt is running correctly for the following test cases and in total 8 out of 26 of LeetCode's testcases:\n\n> a, b = 1, 2\n>\n> a, b = 2, 3\n\nAnd a few others but not for this one:\n\n> a, b = -1, 1\n\nIt exceeds the time limit.\n\nI tried running the following code with a `mask` variable:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n        while b:\n            sum_ = (a ^ b) & mask\n            carry = ((a & b) << 1) & mask\n            a = sum_\n            b = carry\n        if (a >> 31) & 1:\n            return ~(a ^ mask)\n        return a\n```\n\nAnd it was able to pass all 3 testcases I listed earlier and in total 20 out of 26 of LeetCode's testcases but failed on:\n\n> a, b = -1, 0\n>\n> Its output for that was:\n>\n> 4294967295\n\nThen I tried the following code:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n\n        while b != 0:\n            tmp = (a & b) << 1\n            a = (a ^ b) & mask\n            b = tmp & mask\n\n        if a > mask // 2:\n            return ~(a ^ mask)\n        else:\n            return a\n```\n\nThis time it worked and passed all testcases but I don't know why it works."
                    },
                    {
                        "username": "harshitha____9",
                        "content": "i feel this approch is good but isn\\'t giving crct  ans can you find out mistake in code?\\n int getSum(int a, int b) {\\n        bool c=false;\\n        int ans;\\n        for(int i=31;i>=0;i--)\\n        {\\n            bool x=a^(1<<i);\\n            bool y=b^(1<<i);\\n            if(a && b)\\n            {\\n               c=true;\\n            }\\n            else if(!a && !b && c)\\n            {\\n                ans|=1<<i;\\n                c=!c;\\n            }\\n            else if(a || b)\\n            {\\n                ans|=1<<i;\\n            }\\n            \\n\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "atul1503",
                        "content": " `class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b!=0:\n            c=(a&b)\n            a=(a^b)\n            b=(c)<<1\n        return a\n`\n\nSomeone check this code in python. It has the correct logic but time exceeds but works in all other langs."
                    },
                    {
                        "username": "machase04",
                        "content": "Times when Java is elite:\\nreturn Integer.sum(a, b);"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can I do like this\\nreturn sum([a,b])"
                    },
                    {
                        "username": "cenjian",
                        "content": "In python, just return sum([a,b])"
                    },
                    {
                        "username": "user2017ra",
                        "content": "for(int i = 1; i <= b; i++){\\n            a++;\\n        }\\n        return a;\\n\\nwhy above code is not working ?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "Because b can be a negative number. In that case, the loop will not start."
                    },
                    {
                        "username": "Venkatakrishnan_Ramesh",
                        "content": "Using xor and & operators we can execute the solution easily\\n\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b!=0){\\n            int temp = (a&b) <<1;\\n            a=a^b;\\n            b=temp;\\n        }\\n        return a;\\n        \\n    }\\n    \\n}"
                    }
                ]
            },
            {
                "id": 1811416,
                "content": [
                    {
                        "username": "likekrishnendu",
                        "content": "Used += \\uD83D\\uDE36  : $a+=b$"
                    },
                    {
                        "username": "a_shish07",
                        "content": "I simply tried to sum two number by using + operator...and guess what !! IT WORKED . LOL"
                    },
                    {
                        "username": "sciguy09",
                        "content": "I tried running this:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b:\n            withoutcarry = (a ^ b)\n            b = (a & b) << 1\n            a = withoutcarry\n        return a\n```\n\nIt is running correctly for the following test cases and in total 8 out of 26 of LeetCode's testcases:\n\n> a, b = 1, 2\n>\n> a, b = 2, 3\n\nAnd a few others but not for this one:\n\n> a, b = -1, 1\n\nIt exceeds the time limit.\n\nI tried running the following code with a `mask` variable:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n        while b:\n            sum_ = (a ^ b) & mask\n            carry = ((a & b) << 1) & mask\n            a = sum_\n            b = carry\n        if (a >> 31) & 1:\n            return ~(a ^ mask)\n        return a\n```\n\nAnd it was able to pass all 3 testcases I listed earlier and in total 20 out of 26 of LeetCode's testcases but failed on:\n\n> a, b = -1, 0\n>\n> Its output for that was:\n>\n> 4294967295\n\nThen I tried the following code:\n\n```\nclass Solution:\n    def getSum(self, a: int, b: int) -> int:\n        mask = 0xffffffff\n\n        while b != 0:\n            tmp = (a & b) << 1\n            a = (a ^ b) & mask\n            b = tmp & mask\n\n        if a > mask // 2:\n            return ~(a ^ mask)\n        else:\n            return a\n```\n\nThis time it worked and passed all testcases but I don't know why it works."
                    },
                    {
                        "username": "harshitha____9",
                        "content": "i feel this approch is good but isn\\'t giving crct  ans can you find out mistake in code?\\n int getSum(int a, int b) {\\n        bool c=false;\\n        int ans;\\n        for(int i=31;i>=0;i--)\\n        {\\n            bool x=a^(1<<i);\\n            bool y=b^(1<<i);\\n            if(a && b)\\n            {\\n               c=true;\\n            }\\n            else if(!a && !b && c)\\n            {\\n                ans|=1<<i;\\n                c=!c;\\n            }\\n            else if(a || b)\\n            {\\n                ans|=1<<i;\\n            }\\n            \\n\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "atul1503",
                        "content": " `class Solution:\n    def getSum(self, a: int, b: int) -> int:\n        while b!=0:\n            c=(a&b)\n            a=(a^b)\n            b=(c)<<1\n        return a\n`\n\nSomeone check this code in python. It has the correct logic but time exceeds but works in all other langs."
                    },
                    {
                        "username": "machase04",
                        "content": "Times when Java is elite:\\nreturn Integer.sum(a, b);"
                    },
                    {
                        "username": "Geeks-Vegeta",
                        "content": "Can I do like this\\nreturn sum([a,b])"
                    },
                    {
                        "username": "cenjian",
                        "content": "In python, just return sum([a,b])"
                    },
                    {
                        "username": "user2017ra",
                        "content": "for(int i = 1; i <= b; i++){\\n            a++;\\n        }\\n        return a;\\n\\nwhy above code is not working ?"
                    },
                    {
                        "username": "manifold1985",
                        "content": "Because b can be a negative number. In that case, the loop will not start."
                    },
                    {
                        "username": "Venkatakrishnan_Ramesh",
                        "content": "Using xor and & operators we can execute the solution easily\\n\\nclass Solution {\\n    public int getSum(int a, int b) {\\n        while(b!=0){\\n            int temp = (a&b) <<1;\\n            a=a^b;\\n            b=temp;\\n        }\\n        return a;\\n        \\n    }\\n    \\n}"
                    }
                ]
            }
        ]
    },
    {
        "title": "Encode String with Shortest Length",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1564981,
                "content": [
                    {
                        "username": "swap23",
                        "content": "I will fail if I get this question during an interview"
                    },
                    {
                        "username": "wangfeng1027",
                        "content": "The note #3 said \"If an encoding process does not make the string shorter, then do not encode it.\" So why encode \"abcabc\" to be \"2[abc]\"??"
                    },
                    {
                        "username": "zzg_zzm",
                        "content": "Even though many of us use the following smart condition in code to check for substring repetition, I didn't see a rigorous proof. So here is one.\\n\\n**Why condition `(s+s).find(s,1) < s.size()` is equivalent to substring repetition?**\\n\\n**Proof:** Let `N = s.size()` and `L := (s+s).find(s,1)`, actually we can prove that **the following 2 statements are equivalent:**\\n1. `0 < L < N`;\\n2. `N%L == 0` and `s[i] == s[i%L]` is true for any `i` in `[0, N)`. (which means `s.substr(0,L)` is the repetitive substring)\\n\\nConsider function `char f(int i) { return s[i%N]; }`, obviously it has a period `N`.\\n\\n**\"1 => 2\"**: From condition 1, we have for any `i` in `[0,N)`\\n* `s[i] == (s+s)[i+L] == s[(i+L)%N]`, \\nwhich means `L` is also a positive period of function `f`. Note that `N == L*(N/L)+N%L`, so we have\\n* `f(i) == f(i+N) == f(i+L*(N/L)+N%L) == f(i+N%L)`,\\nwhich means `N%L` is also a period of `f`. Note that `N%L < L` but `L := (s+s).find(s,1)` is the minimum positive period of function `f`, so we must have `N%L == 0`. Note that `i == L*(i/L)+i%L`, so we have\\n* `s[i] == f(i) == f(L*(i/L)+i%L) == f(i%L) == s[i%L]`,\\nso condition 2 is obtained.\\n\\n**\"2=>1\"**: If condition 2 holds, for any `i` in `[0,N)`, note that `N%L == 0`, we have\\n* `(s+s)[i+L] == s[(i+L)%N] == s[((i+L)%N)%L] == s[(i+L)%L] == s[i]`,\\nwhich means `(s+s).substr(L,N) == s`, so condition 1 is obtained."
                    },
                    {
                        "username": "jernigan",
                        "content": "Seems like all the solutions here are really n^4. The only possible way I can see an n^3 solution is if you preprocess the original string to find all equal sub strings via hashing.\\n\\nThere's O(n^2) sub problems for each substring.\\n\\nWhen you want to see if a string can be broken up into 'k' parts, you need to potentially try breaking the string up into 1, 2, 3... k parts. This is an O(n) loop. (Actually, perhaps this is really a sqrt(n) loop since you only have to try divisors up to the sqrt(n).. so perhaps we can get O(n^3*sqrt(n))\\n\\nTo check if all 'k' parts are equal takes O(n) time. So in total, it would take O(n^4)... am I missing something?"
                    }
                ]
            },
            {
                "id": 1565685,
                "content": [
                    {
                        "username": "swap23",
                        "content": "I will fail if I get this question during an interview"
                    },
                    {
                        "username": "wangfeng1027",
                        "content": "The note #3 said \"If an encoding process does not make the string shorter, then do not encode it.\" So why encode \"abcabc\" to be \"2[abc]\"??"
                    },
                    {
                        "username": "zzg_zzm",
                        "content": "Even though many of us use the following smart condition in code to check for substring repetition, I didn't see a rigorous proof. So here is one.\\n\\n**Why condition `(s+s).find(s,1) < s.size()` is equivalent to substring repetition?**\\n\\n**Proof:** Let `N = s.size()` and `L := (s+s).find(s,1)`, actually we can prove that **the following 2 statements are equivalent:**\\n1. `0 < L < N`;\\n2. `N%L == 0` and `s[i] == s[i%L]` is true for any `i` in `[0, N)`. (which means `s.substr(0,L)` is the repetitive substring)\\n\\nConsider function `char f(int i) { return s[i%N]; }`, obviously it has a period `N`.\\n\\n**\"1 => 2\"**: From condition 1, we have for any `i` in `[0,N)`\\n* `s[i] == (s+s)[i+L] == s[(i+L)%N]`, \\nwhich means `L` is also a positive period of function `f`. Note that `N == L*(N/L)+N%L`, so we have\\n* `f(i) == f(i+N) == f(i+L*(N/L)+N%L) == f(i+N%L)`,\\nwhich means `N%L` is also a period of `f`. Note that `N%L < L` but `L := (s+s).find(s,1)` is the minimum positive period of function `f`, so we must have `N%L == 0`. Note that `i == L*(i/L)+i%L`, so we have\\n* `s[i] == f(i) == f(L*(i/L)+i%L) == f(i%L) == s[i%L]`,\\nso condition 2 is obtained.\\n\\n**\"2=>1\"**: If condition 2 holds, for any `i` in `[0,N)`, note that `N%L == 0`, we have\\n* `(s+s)[i+L] == s[(i+L)%N] == s[((i+L)%N)%L] == s[(i+L)%L] == s[i]`,\\nwhich means `(s+s).substr(L,N) == s`, so condition 1 is obtained."
                    },
                    {
                        "username": "jernigan",
                        "content": "Seems like all the solutions here are really n^4. The only possible way I can see an n^3 solution is if you preprocess the original string to find all equal sub strings via hashing.\\n\\nThere's O(n^2) sub problems for each substring.\\n\\nWhen you want to see if a string can be broken up into 'k' parts, you need to potentially try breaking the string up into 1, 2, 3... k parts. This is an O(n) loop. (Actually, perhaps this is really a sqrt(n) loop since you only have to try divisors up to the sqrt(n).. so perhaps we can get O(n^3*sqrt(n))\\n\\nTo check if all 'k' parts are equal takes O(n) time. So in total, it would take O(n^4)... am I missing something?"
                    }
                ]
            },
            {
                "id": 1565283,
                "content": [
                    {
                        "username": "swap23",
                        "content": "I will fail if I get this question during an interview"
                    },
                    {
                        "username": "wangfeng1027",
                        "content": "The note #3 said \"If an encoding process does not make the string shorter, then do not encode it.\" So why encode \"abcabc\" to be \"2[abc]\"??"
                    },
                    {
                        "username": "zzg_zzm",
                        "content": "Even though many of us use the following smart condition in code to check for substring repetition, I didn't see a rigorous proof. So here is one.\\n\\n**Why condition `(s+s).find(s,1) < s.size()` is equivalent to substring repetition?**\\n\\n**Proof:** Let `N = s.size()` and `L := (s+s).find(s,1)`, actually we can prove that **the following 2 statements are equivalent:**\\n1. `0 < L < N`;\\n2. `N%L == 0` and `s[i] == s[i%L]` is true for any `i` in `[0, N)`. (which means `s.substr(0,L)` is the repetitive substring)\\n\\nConsider function `char f(int i) { return s[i%N]; }`, obviously it has a period `N`.\\n\\n**\"1 => 2\"**: From condition 1, we have for any `i` in `[0,N)`\\n* `s[i] == (s+s)[i+L] == s[(i+L)%N]`, \\nwhich means `L` is also a positive period of function `f`. Note that `N == L*(N/L)+N%L`, so we have\\n* `f(i) == f(i+N) == f(i+L*(N/L)+N%L) == f(i+N%L)`,\\nwhich means `N%L` is also a period of `f`. Note that `N%L < L` but `L := (s+s).find(s,1)` is the minimum positive period of function `f`, so we must have `N%L == 0`. Note that `i == L*(i/L)+i%L`, so we have\\n* `s[i] == f(i) == f(L*(i/L)+i%L) == f(i%L) == s[i%L]`,\\nso condition 2 is obtained.\\n\\n**\"2=>1\"**: If condition 2 holds, for any `i` in `[0,N)`, note that `N%L == 0`, we have\\n* `(s+s)[i+L] == s[(i+L)%N] == s[((i+L)%N)%L] == s[(i+L)%L] == s[i]`,\\nwhich means `(s+s).substr(L,N) == s`, so condition 1 is obtained."
                    },
                    {
                        "username": "jernigan",
                        "content": "Seems like all the solutions here are really n^4. The only possible way I can see an n^3 solution is if you preprocess the original string to find all equal sub strings via hashing.\\n\\nThere's O(n^2) sub problems for each substring.\\n\\nWhen you want to see if a string can be broken up into 'k' parts, you need to potentially try breaking the string up into 1, 2, 3... k parts. This is an O(n) loop. (Actually, perhaps this is really a sqrt(n) loop since you only have to try divisors up to the sqrt(n).. so perhaps we can get O(n^3*sqrt(n))\\n\\nTo check if all 'k' parts are equal takes O(n) time. So in total, it would take O(n^4)... am I missing something?"
                    }
                ]
            },
            {
                "id": 1571742,
                "content": [
                    {
                        "username": "swap23",
                        "content": "I will fail if I get this question during an interview"
                    },
                    {
                        "username": "wangfeng1027",
                        "content": "The note #3 said \"If an encoding process does not make the string shorter, then do not encode it.\" So why encode \"abcabc\" to be \"2[abc]\"??"
                    },
                    {
                        "username": "zzg_zzm",
                        "content": "Even though many of us use the following smart condition in code to check for substring repetition, I didn't see a rigorous proof. So here is one.\\n\\n**Why condition `(s+s).find(s,1) < s.size()` is equivalent to substring repetition?**\\n\\n**Proof:** Let `N = s.size()` and `L := (s+s).find(s,1)`, actually we can prove that **the following 2 statements are equivalent:**\\n1. `0 < L < N`;\\n2. `N%L == 0` and `s[i] == s[i%L]` is true for any `i` in `[0, N)`. (which means `s.substr(0,L)` is the repetitive substring)\\n\\nConsider function `char f(int i) { return s[i%N]; }`, obviously it has a period `N`.\\n\\n**\"1 => 2\"**: From condition 1, we have for any `i` in `[0,N)`\\n* `s[i] == (s+s)[i+L] == s[(i+L)%N]`, \\nwhich means `L` is also a positive period of function `f`. Note that `N == L*(N/L)+N%L`, so we have\\n* `f(i) == f(i+N) == f(i+L*(N/L)+N%L) == f(i+N%L)`,\\nwhich means `N%L` is also a period of `f`. Note that `N%L < L` but `L := (s+s).find(s,1)` is the minimum positive period of function `f`, so we must have `N%L == 0`. Note that `i == L*(i/L)+i%L`, so we have\\n* `s[i] == f(i) == f(L*(i/L)+i%L) == f(i%L) == s[i%L]`,\\nso condition 2 is obtained.\\n\\n**\"2=>1\"**: If condition 2 holds, for any `i` in `[0,N)`, note that `N%L == 0`, we have\\n* `(s+s)[i+L] == s[(i+L)%N] == s[((i+L)%N)%L] == s[(i+L)%L] == s[i]`,\\nwhich means `(s+s).substr(L,N) == s`, so condition 1 is obtained."
                    },
                    {
                        "username": "jernigan",
                        "content": "Seems like all the solutions here are really n^4. The only possible way I can see an n^3 solution is if you preprocess the original string to find all equal sub strings via hashing.\\n\\nThere's O(n^2) sub problems for each substring.\\n\\nWhen you want to see if a string can be broken up into 'k' parts, you need to potentially try breaking the string up into 1, 2, 3... k parts. This is an O(n) loop. (Actually, perhaps this is really a sqrt(n) loop since you only have to try divisors up to the sqrt(n).. so perhaps we can get O(n^3*sqrt(n))\\n\\nTo check if all 'k' parts are equal takes O(n) time. So in total, it would take O(n^4)... am I missing something?"
                    }
                ]
            }
        ]
    },
    {
        "title": "Find Median Given Frequency of Numbers",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1566340,
                "content": [
                    {
                        "username": "vanagarw",
                        "content": "Is oracle working? I just did select * from numbers and i get an invalid identifier error"
                    },
                    {
                        "username": "anjupanju",
                        "content": "\\nWITH RECURSIVE CTE AS \\n(\\nSELECT Number, Frequency FROM Numbers \\nUNION ALL\\nSELECT Number, Frequency-1 FROM CTE WHERE Frequency-1>0\\n),\\nCTE2 AS \\n(\\nSELECT Number \\n, ROW_NUMBER() OVER (ORDER BY Number) AS NUM_RANK\\nFROM CTE\\n),\\nCTE3 AS \\n(\\nSELECT COUNT(*) AS ROW_CNT FROM CTE2\\n)\\nSELECT AVG(Number) AS median FROM CTE2\\nWHERE \\nCASE \\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 0 THEN NUM_RANK BETWEEN (SELECT ROW_CNT/2 FROM CTE3) AND (SELECT (ROW_CNT/2)+1 FROM CTE3)\\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 1 THEN NUM_RANK = (SELECT CEILING(ROW_CNT/2) FROM CTE3)\\nEND"
                    },
                    {
                        "username": "TarunGrover6995",
                        "content": "WITH cte2 AS\\n(SELECT num, sum(frequency) OVER (ORDER BY num) sum_ FROM Numbers)\\n\\nSELECT AVG(num) median FROM Numbers NATURAL JOIN cte2 WHERE sum_ - frequency <= \\n(SELECT MAX(sum_) FROM cte2)/2 AND sum_>= (SELECT MAX(sum_) FROM cte2)/2"
                    },
                    {
                        "username": "Shivii",
                        "content": "with recursive cte as\\n(Select number,max(frequency) as C from Numbers group by number\\n        union all \\nSelect  number,C-1 as C from cte where C>1),\\ndte as \\n(select row_number() over (order by number) as Rnk,number,(Select sum(frequency) from Numbers) as Total from cte)\\nSelect avg(number) as Median from dte where Rnk in (Total/2,((total/2)+0.5),((total/2)+1));"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "# Write your MySQL query statement below\\nwith recursive a as(\\nselect *\\nfrom Numbers\\nunion all\\nselect Number, Frequency - 1\\nfrom a\\nwhere Frequency >= 2),\\n\\nc as(\\nselect Number, row_number() over(order by Number asc) as r\\nfrom a),\\n\\nd as(\\nselect \\n    case when mod(max(r), 2) !=0 then (max(r) + 1) / 2 else 0 end as median\\nfrom c)\\n\\nselect\\n    case when median = 0 then (select avg(Number) from c where r = (select max(r) from c) / 2 or r = (select max(r) from c)/2 + 1) else (select Number from c where r = median) end as median\\nfrom d"
                    },
                    {
                        "username": "uttara223",
                        "content": "Idea is to calculate the cumulative frequency and return the number whose cumulative frequency is just above (top 1) half the frequency.\\n\\nSELECT  number\\nFROM\\n\\t(SELECT number, SUM(frequency) OVER (ORDER BY NUMBER ASC) AS cum_freq\\n\\t FROM numbers\\n\\t) AS t\\n\\nWHERE cum_freq > (SELECT SUM(frequency)/2 FROM numbers)\\n\\nLIMIT 1;"
                    }
                ]
            },
            {
                "id": 1568521,
                "content": [
                    {
                        "username": "vanagarw",
                        "content": "Is oracle working? I just did select * from numbers and i get an invalid identifier error"
                    },
                    {
                        "username": "anjupanju",
                        "content": "\\nWITH RECURSIVE CTE AS \\n(\\nSELECT Number, Frequency FROM Numbers \\nUNION ALL\\nSELECT Number, Frequency-1 FROM CTE WHERE Frequency-1>0\\n),\\nCTE2 AS \\n(\\nSELECT Number \\n, ROW_NUMBER() OVER (ORDER BY Number) AS NUM_RANK\\nFROM CTE\\n),\\nCTE3 AS \\n(\\nSELECT COUNT(*) AS ROW_CNT FROM CTE2\\n)\\nSELECT AVG(Number) AS median FROM CTE2\\nWHERE \\nCASE \\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 0 THEN NUM_RANK BETWEEN (SELECT ROW_CNT/2 FROM CTE3) AND (SELECT (ROW_CNT/2)+1 FROM CTE3)\\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 1 THEN NUM_RANK = (SELECT CEILING(ROW_CNT/2) FROM CTE3)\\nEND"
                    },
                    {
                        "username": "TarunGrover6995",
                        "content": "WITH cte2 AS\\n(SELECT num, sum(frequency) OVER (ORDER BY num) sum_ FROM Numbers)\\n\\nSELECT AVG(num) median FROM Numbers NATURAL JOIN cte2 WHERE sum_ - frequency <= \\n(SELECT MAX(sum_) FROM cte2)/2 AND sum_>= (SELECT MAX(sum_) FROM cte2)/2"
                    },
                    {
                        "username": "Shivii",
                        "content": "with recursive cte as\\n(Select number,max(frequency) as C from Numbers group by number\\n        union all \\nSelect  number,C-1 as C from cte where C>1),\\ndte as \\n(select row_number() over (order by number) as Rnk,number,(Select sum(frequency) from Numbers) as Total from cte)\\nSelect avg(number) as Median from dte where Rnk in (Total/2,((total/2)+0.5),((total/2)+1));"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "# Write your MySQL query statement below\\nwith recursive a as(\\nselect *\\nfrom Numbers\\nunion all\\nselect Number, Frequency - 1\\nfrom a\\nwhere Frequency >= 2),\\n\\nc as(\\nselect Number, row_number() over(order by Number asc) as r\\nfrom a),\\n\\nd as(\\nselect \\n    case when mod(max(r), 2) !=0 then (max(r) + 1) / 2 else 0 end as median\\nfrom c)\\n\\nselect\\n    case when median = 0 then (select avg(Number) from c where r = (select max(r) from c) / 2 or r = (select max(r) from c)/2 + 1) else (select Number from c where r = median) end as median\\nfrom d"
                    },
                    {
                        "username": "uttara223",
                        "content": "Idea is to calculate the cumulative frequency and return the number whose cumulative frequency is just above (top 1) half the frequency.\\n\\nSELECT  number\\nFROM\\n\\t(SELECT number, SUM(frequency) OVER (ORDER BY NUMBER ASC) AS cum_freq\\n\\t FROM numbers\\n\\t) AS t\\n\\nWHERE cum_freq > (SELECT SUM(frequency)/2 FROM numbers)\\n\\nLIMIT 1;"
                    }
                ]
            },
            {
                "id": 1570812,
                "content": [
                    {
                        "username": "vanagarw",
                        "content": "Is oracle working? I just did select * from numbers and i get an invalid identifier error"
                    },
                    {
                        "username": "anjupanju",
                        "content": "\\nWITH RECURSIVE CTE AS \\n(\\nSELECT Number, Frequency FROM Numbers \\nUNION ALL\\nSELECT Number, Frequency-1 FROM CTE WHERE Frequency-1>0\\n),\\nCTE2 AS \\n(\\nSELECT Number \\n, ROW_NUMBER() OVER (ORDER BY Number) AS NUM_RANK\\nFROM CTE\\n),\\nCTE3 AS \\n(\\nSELECT COUNT(*) AS ROW_CNT FROM CTE2\\n)\\nSELECT AVG(Number) AS median FROM CTE2\\nWHERE \\nCASE \\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 0 THEN NUM_RANK BETWEEN (SELECT ROW_CNT/2 FROM CTE3) AND (SELECT (ROW_CNT/2)+1 FROM CTE3)\\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 1 THEN NUM_RANK = (SELECT CEILING(ROW_CNT/2) FROM CTE3)\\nEND"
                    },
                    {
                        "username": "TarunGrover6995",
                        "content": "WITH cte2 AS\\n(SELECT num, sum(frequency) OVER (ORDER BY num) sum_ FROM Numbers)\\n\\nSELECT AVG(num) median FROM Numbers NATURAL JOIN cte2 WHERE sum_ - frequency <= \\n(SELECT MAX(sum_) FROM cte2)/2 AND sum_>= (SELECT MAX(sum_) FROM cte2)/2"
                    },
                    {
                        "username": "Shivii",
                        "content": "with recursive cte as\\n(Select number,max(frequency) as C from Numbers group by number\\n        union all \\nSelect  number,C-1 as C from cte where C>1),\\ndte as \\n(select row_number() over (order by number) as Rnk,number,(Select sum(frequency) from Numbers) as Total from cte)\\nSelect avg(number) as Median from dte where Rnk in (Total/2,((total/2)+0.5),((total/2)+1));"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "# Write your MySQL query statement below\\nwith recursive a as(\\nselect *\\nfrom Numbers\\nunion all\\nselect Number, Frequency - 1\\nfrom a\\nwhere Frequency >= 2),\\n\\nc as(\\nselect Number, row_number() over(order by Number asc) as r\\nfrom a),\\n\\nd as(\\nselect \\n    case when mod(max(r), 2) !=0 then (max(r) + 1) / 2 else 0 end as median\\nfrom c)\\n\\nselect\\n    case when median = 0 then (select avg(Number) from c where r = (select max(r) from c) / 2 or r = (select max(r) from c)/2 + 1) else (select Number from c where r = median) end as median\\nfrom d"
                    },
                    {
                        "username": "uttara223",
                        "content": "Idea is to calculate the cumulative frequency and return the number whose cumulative frequency is just above (top 1) half the frequency.\\n\\nSELECT  number\\nFROM\\n\\t(SELECT number, SUM(frequency) OVER (ORDER BY NUMBER ASC) AS cum_freq\\n\\t FROM numbers\\n\\t) AS t\\n\\nWHERE cum_freq > (SELECT SUM(frequency)/2 FROM numbers)\\n\\nLIMIT 1;"
                    }
                ]
            },
            {
                "id": 1570394,
                "content": [
                    {
                        "username": "vanagarw",
                        "content": "Is oracle working? I just did select * from numbers and i get an invalid identifier error"
                    },
                    {
                        "username": "anjupanju",
                        "content": "\\nWITH RECURSIVE CTE AS \\n(\\nSELECT Number, Frequency FROM Numbers \\nUNION ALL\\nSELECT Number, Frequency-1 FROM CTE WHERE Frequency-1>0\\n),\\nCTE2 AS \\n(\\nSELECT Number \\n, ROW_NUMBER() OVER (ORDER BY Number) AS NUM_RANK\\nFROM CTE\\n),\\nCTE3 AS \\n(\\nSELECT COUNT(*) AS ROW_CNT FROM CTE2\\n)\\nSELECT AVG(Number) AS median FROM CTE2\\nWHERE \\nCASE \\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 0 THEN NUM_RANK BETWEEN (SELECT ROW_CNT/2 FROM CTE3) AND (SELECT (ROW_CNT/2)+1 FROM CTE3)\\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 1 THEN NUM_RANK = (SELECT CEILING(ROW_CNT/2) FROM CTE3)\\nEND"
                    },
                    {
                        "username": "TarunGrover6995",
                        "content": "WITH cte2 AS\\n(SELECT num, sum(frequency) OVER (ORDER BY num) sum_ FROM Numbers)\\n\\nSELECT AVG(num) median FROM Numbers NATURAL JOIN cte2 WHERE sum_ - frequency <= \\n(SELECT MAX(sum_) FROM cte2)/2 AND sum_>= (SELECT MAX(sum_) FROM cte2)/2"
                    },
                    {
                        "username": "Shivii",
                        "content": "with recursive cte as\\n(Select number,max(frequency) as C from Numbers group by number\\n        union all \\nSelect  number,C-1 as C from cte where C>1),\\ndte as \\n(select row_number() over (order by number) as Rnk,number,(Select sum(frequency) from Numbers) as Total from cte)\\nSelect avg(number) as Median from dte where Rnk in (Total/2,((total/2)+0.5),((total/2)+1));"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "# Write your MySQL query statement below\\nwith recursive a as(\\nselect *\\nfrom Numbers\\nunion all\\nselect Number, Frequency - 1\\nfrom a\\nwhere Frequency >= 2),\\n\\nc as(\\nselect Number, row_number() over(order by Number asc) as r\\nfrom a),\\n\\nd as(\\nselect \\n    case when mod(max(r), 2) !=0 then (max(r) + 1) / 2 else 0 end as median\\nfrom c)\\n\\nselect\\n    case when median = 0 then (select avg(Number) from c where r = (select max(r) from c) / 2 or r = (select max(r) from c)/2 + 1) else (select Number from c where r = median) end as median\\nfrom d"
                    },
                    {
                        "username": "uttara223",
                        "content": "Idea is to calculate the cumulative frequency and return the number whose cumulative frequency is just above (top 1) half the frequency.\\n\\nSELECT  number\\nFROM\\n\\t(SELECT number, SUM(frequency) OVER (ORDER BY NUMBER ASC) AS cum_freq\\n\\t FROM numbers\\n\\t) AS t\\n\\nWHERE cum_freq > (SELECT SUM(frequency)/2 FROM numbers)\\n\\nLIMIT 1;"
                    }
                ]
            },
            {
                "id": 1575618,
                "content": [
                    {
                        "username": "vanagarw",
                        "content": "Is oracle working? I just did select * from numbers and i get an invalid identifier error"
                    },
                    {
                        "username": "anjupanju",
                        "content": "\\nWITH RECURSIVE CTE AS \\n(\\nSELECT Number, Frequency FROM Numbers \\nUNION ALL\\nSELECT Number, Frequency-1 FROM CTE WHERE Frequency-1>0\\n),\\nCTE2 AS \\n(\\nSELECT Number \\n, ROW_NUMBER() OVER (ORDER BY Number) AS NUM_RANK\\nFROM CTE\\n),\\nCTE3 AS \\n(\\nSELECT COUNT(*) AS ROW_CNT FROM CTE2\\n)\\nSELECT AVG(Number) AS median FROM CTE2\\nWHERE \\nCASE \\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 0 THEN NUM_RANK BETWEEN (SELECT ROW_CNT/2 FROM CTE3) AND (SELECT (ROW_CNT/2)+1 FROM CTE3)\\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 1 THEN NUM_RANK = (SELECT CEILING(ROW_CNT/2) FROM CTE3)\\nEND"
                    },
                    {
                        "username": "TarunGrover6995",
                        "content": "WITH cte2 AS\\n(SELECT num, sum(frequency) OVER (ORDER BY num) sum_ FROM Numbers)\\n\\nSELECT AVG(num) median FROM Numbers NATURAL JOIN cte2 WHERE sum_ - frequency <= \\n(SELECT MAX(sum_) FROM cte2)/2 AND sum_>= (SELECT MAX(sum_) FROM cte2)/2"
                    },
                    {
                        "username": "Shivii",
                        "content": "with recursive cte as\\n(Select number,max(frequency) as C from Numbers group by number\\n        union all \\nSelect  number,C-1 as C from cte where C>1),\\ndte as \\n(select row_number() over (order by number) as Rnk,number,(Select sum(frequency) from Numbers) as Total from cte)\\nSelect avg(number) as Median from dte where Rnk in (Total/2,((total/2)+0.5),((total/2)+1));"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "# Write your MySQL query statement below\\nwith recursive a as(\\nselect *\\nfrom Numbers\\nunion all\\nselect Number, Frequency - 1\\nfrom a\\nwhere Frequency >= 2),\\n\\nc as(\\nselect Number, row_number() over(order by Number asc) as r\\nfrom a),\\n\\nd as(\\nselect \\n    case when mod(max(r), 2) !=0 then (max(r) + 1) / 2 else 0 end as median\\nfrom c)\\n\\nselect\\n    case when median = 0 then (select avg(Number) from c where r = (select max(r) from c) / 2 or r = (select max(r) from c)/2 + 1) else (select Number from c where r = median) end as median\\nfrom d"
                    },
                    {
                        "username": "uttara223",
                        "content": "Idea is to calculate the cumulative frequency and return the number whose cumulative frequency is just above (top 1) half the frequency.\\n\\nSELECT  number\\nFROM\\n\\t(SELECT number, SUM(frequency) OVER (ORDER BY NUMBER ASC) AS cum_freq\\n\\t FROM numbers\\n\\t) AS t\\n\\nWHERE cum_freq > (SELECT SUM(frequency)/2 FROM numbers)\\n\\nLIMIT 1;"
                    }
                ]
            },
            {
                "id": 1572453,
                "content": [
                    {
                        "username": "vanagarw",
                        "content": "Is oracle working? I just did select * from numbers and i get an invalid identifier error"
                    },
                    {
                        "username": "anjupanju",
                        "content": "\\nWITH RECURSIVE CTE AS \\n(\\nSELECT Number, Frequency FROM Numbers \\nUNION ALL\\nSELECT Number, Frequency-1 FROM CTE WHERE Frequency-1>0\\n),\\nCTE2 AS \\n(\\nSELECT Number \\n, ROW_NUMBER() OVER (ORDER BY Number) AS NUM_RANK\\nFROM CTE\\n),\\nCTE3 AS \\n(\\nSELECT COUNT(*) AS ROW_CNT FROM CTE2\\n)\\nSELECT AVG(Number) AS median FROM CTE2\\nWHERE \\nCASE \\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 0 THEN NUM_RANK BETWEEN (SELECT ROW_CNT/2 FROM CTE3) AND (SELECT (ROW_CNT/2)+1 FROM CTE3)\\n    WHEN (SELECT ROW_CNT % 2 FROM CTE3) = 1 THEN NUM_RANK = (SELECT CEILING(ROW_CNT/2) FROM CTE3)\\nEND"
                    },
                    {
                        "username": "TarunGrover6995",
                        "content": "WITH cte2 AS\\n(SELECT num, sum(frequency) OVER (ORDER BY num) sum_ FROM Numbers)\\n\\nSELECT AVG(num) median FROM Numbers NATURAL JOIN cte2 WHERE sum_ - frequency <= \\n(SELECT MAX(sum_) FROM cte2)/2 AND sum_>= (SELECT MAX(sum_) FROM cte2)/2"
                    },
                    {
                        "username": "Shivii",
                        "content": "with recursive cte as\\n(Select number,max(frequency) as C from Numbers group by number\\n        union all \\nSelect  number,C-1 as C from cte where C>1),\\ndte as \\n(select row_number() over (order by number) as Rnk,number,(Select sum(frequency) from Numbers) as Total from cte)\\nSelect avg(number) as Median from dte where Rnk in (Total/2,((total/2)+0.5),((total/2)+1));"
                    },
                    {
                        "username": "RogerMeng",
                        "content": "# Write your MySQL query statement below\\nwith recursive a as(\\nselect *\\nfrom Numbers\\nunion all\\nselect Number, Frequency - 1\\nfrom a\\nwhere Frequency >= 2),\\n\\nc as(\\nselect Number, row_number() over(order by Number asc) as r\\nfrom a),\\n\\nd as(\\nselect \\n    case when mod(max(r), 2) !=0 then (max(r) + 1) / 2 else 0 end as median\\nfrom c)\\n\\nselect\\n    case when median = 0 then (select avg(Number) from c where r = (select max(r) from c) / 2 or r = (select max(r) from c)/2 + 1) else (select Number from c where r = median) end as median\\nfrom d"
                    },
                    {
                        "username": "uttara223",
                        "content": "Idea is to calculate the cumulative frequency and return the number whose cumulative frequency is just above (top 1) half the frequency.\\n\\nSELECT  number\\nFROM\\n\\t(SELECT number, SUM(frequency) OVER (ORDER BY NUMBER ASC) AS cum_freq\\n\\t FROM numbers\\n\\t) AS t\\n\\nWHERE cum_freq > (SELECT SUM(frequency)/2 FROM numbers)\\n\\nLIMIT 1;"
                    }
                ]
            }
        ]
    },
    {
        "title": "Bulb Switcher II",
        "question_content": "<p>There is a room with <code>n</code> bulbs labeled from <code>1</code> to <code>n</code> that all are turned on initially, and <strong>four buttons</strong> on the wall. Each of the four buttons has a different functionality where:</p>\n\n<ul>\n\t<li><strong>Button 1:</strong> Flips the status of all the bulbs.</li>\n\t<li><strong>Button 2:</strong> Flips the status of all the bulbs with even labels (i.e., <code>2, 4, ...</code>).</li>\n\t<li><strong>Button 3:</strong> Flips the status of all the bulbs with odd labels (i.e., <code>1, 3, ...</code>).</li>\n\t<li><strong>Button 4:</strong> Flips the status of all the bulbs with a label <code>j = 3k + 1</code> where <code>k = 0, 1, 2, ...</code> (i.e., <code>1, 4, 7, 10, ...</code>).</li>\n</ul>\n\n<p>You must make <strong>exactly</strong> <code>presses</code> button presses in total. For each press, you may pick <strong>any</strong> of the four buttons to press.</p>\n\n<p>Given the two integers <code>n</code> and <code>presses</code>, return <em>the number of <strong>different possible statuses</strong> after performing all </em><code>presses</code><em> button presses</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 1, presses = 1\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Status can be:\n- [off] by pressing button 1\n- [on] by pressing button 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 2, presses = 1\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Status can be:\n- [off, off] by pressing button 1\n- [on, off] by pressing button 2\n- [off, on] by pressing button 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> n = 3, presses = 1\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Status can be:\n- [off, off, off] by pressing button 1\n- [off, on, off] by pressing button 2\n- [on, off, on] by pressing button 3\n- [off, on, on] by pressing button 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= presses &lt;= 1000</code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 107269,
                "title": "java-o-1",
                "content": "We only need to consider special cases which n<=2 and m < 3. When n >2 and m >=3, the result is 8. \\nThe four buttons:\\n\\n1. Flip all the lights.\\n2. Flip lights with even numbers.\\n3. Flip lights with odd numbers.\\n4. Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...\\n\\n\\nIf we use button 1 and 2, it equals to use button 3.\\nSimilarly...\\n\\n`1 + 2 --> 3,    1 + 3 --> 2,      2 + 3 --> 1`\\nSo, there are only 8 cases. \\n\\n`All_on`, `1`, `2`, `3`, `4`, `1+4`, `2+4`, `3+4`\\n\\nAnd we can get all the cases, when n>2 and m>=3.\\n```java\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if(m==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2&&m==1) return 3;\\n        if(n==2) return 4;\\n        if(m==1) return 4;\\n        if(m==2) return 7;\\n        if(m>=3) return 8;\\n        return 8;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if(m==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2&&m==1) return 3;\\n        if(n==2) return 4;\\n        if(m==1) return 4;\\n        if(m==2) return 7;\\n        if(m>=3) return 8;\\n        return 8;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107267,
                "title": "python-straightforward-with-explanation",
                "content": "Suppose we did `f[0]` of the first operation, `f[1]` of the second, `f[2]` of the third, and `f[3]` of the fourth, where `sum(f) == m`.\\n\\nFirst, all these operations commute: doing operation A followed by operation B yields the same result as doing operation B followed by operation A.  Also, doing operation A followed by operation A again is the same as doing nothing.  So really, we only needed to know the residues `cand[i] = f[i] % 2`.  There are only 16 different possibilities for the residues in total, so we can try them all.\\n\\nWe'll loop `cand` through all 16 possibilities `(0, 0, 0, 0), (0, 0, 0, 1), ..., (1, 1, 1, 1)`.  A necessary and sufficient condition for `cand` to be valid is that `sum(cand) % 2 == m % 2 and sum(cand) <= m`, as only when these conditions are satisfied can we find some `f` with `sum(f) == m` and `cand[i] = f[i] % 2`.\\n\\nAlso, as the sequence of lights definitely repeats every 6 lights, we could replace `n` with `min(n, 6)`. Actually, we could replace it with `min(n, 3)`, as those lights are representative: that is, knowing the first 3 lights is enough to reconstruct what the next 3 lights will be.  If the first 3 lights are X, Y, Z, then with a little effort we can prove the next 3 lights will be (X^Y^Z), Z, Y.\\n\\n```python\\ndef flipLights(self, n, m):\\n    seen = set()\\n    for cand in itertools.product((0, 1), repeat = 4):\\n        if sum(cand) % 2 == m % 2 and sum(cand) <= m:\\n            A = []\\n            for i in xrange(min(n, 3)):\\n                light = 1\\n                light ^= cand[0]\\n                light ^= cand[1] and i % 2\\n                light ^= cand[2] and i % 2 == 0\\n                light ^= cand[3] and i % 3 == 0\\n                A.append(light)\\n            seen.add(tuple(A))\\n\\n    return len(seen)\\n```",
                "solutionTags": [],
                "code": "```python\\ndef flipLights(self, n, m):\\n    seen = set()\\n    for cand in itertools.product((0, 1), repeat = 4):\\n        if sum(cand) % 2 == m % 2 and sum(cand) <= m:\\n            A = []\\n            for i in xrange(min(n, 3)):\\n                light = 1\\n                light ^= cand[0]\\n                light ^= cand[1] and i % 2\\n                light ^= cand[2] and i % 2 == 0\\n                light ^= cand[3] and i % 3 == 0\\n                A.append(light)\\n            seen.add(tuple(A))\\n\\n    return len(seen)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 107271,
                "title": "c-concise-code-o-1",
                "content": "When n <= 1, the solution is trial.\\n\\nFrom the 4 types of operations, \\n``` \\n1. Flip all the lights.\\n2. Flip lights with even numbers.\\n3. Flip lights with odd numbers.\\n4. Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...\\n```\\nThere are three important observations:\\n1) For any operation, only odd or even matters, i.e. 0 or 1. Two same operations equal no operation.\\n2) The first 3 operations can be reduced to 1 or 0 operation. For example, flip all + flip even = flip odd. So the result of the first 3 operations is the same as either 1 operation or original.   \\n3) The solution for n > 3 is the same as n = 3. \\nFor example, 1 0 0 ....., I use 0 and 1 to represent off and on.\\nThe state of 2nd digit indicates even flip; The state of 3rd digit indicates odd flip; And the state difference of 1st and 3rd digits indicates 3k+1 flip.\\n\\nIn summary, the question can be simplified as m <= 3, n <= 3. I am sure you can figure out the rest easily. \\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if (m == 0 || n == 0) return 1;\\n        if (n == 1) return 2;\\n        if (n == 2) return m == 1? 3:4;\\n        if (m == 1) return 4;\\n        return m == 2? 7:8;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "``` \\n1. Flip all the lights.\\n2. Flip lights with even numbers.\\n3. Flip lights with odd numbers.\\n4. Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...\\n```\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if (m == 0 || n == 0) return 1;\\n        if (n == 1) return 2;\\n        if (n == 2) return m == 1? 3:4;\\n        if (m == 1) return 4;\\n        return m == 2? 7:8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107272,
                "title": "short-and-clean-java-o-1-solution",
                "content": "> `1`: light is on\\n> `0`: light is off\\n\\n**n == 1**\\n\\nOnly **2** possibilities: `1` and `0`.\\n\\n**n == 2**\\n\\nAfter one operation, it has only **3** possibilities: `00`, `10` and `01`.\\nAfter two and more operations, it has only **4** possibilities: `11`, `10`, `01` and `00`.\\n\\n**n == 3**\\n\\nAfter one operation, it has only **4** possibilities: `000`, `101`, `010` and `011`.\\nAfter two operations, it has **7** possibilities: `111`,`101`,`010`,`100`,`000`,`001` and `110`.\\nAfter three and more operations, it has **8** possibilities, plus `011` on above case.\\n\\n**n >= 4**\\n\\nAfter one operation, it has only **4** possibilities: `0000`, `1010`, `0101` and `0110`.\\nAfter two or more operations: it has **8** possibilities, `1111`,`1010`,`0101`,`0111`,`0000`,`0011`, `1100` and `1001`.\\n\\n```java\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if (m == 0) return 1;\\n        if (n <= 0 || m < 0) return 0;\\n        \\n        if (n == 1) return 2;\\n        else if (n == 2) return (m == 1) ? 3 : 4;\\n        else return (m == 1) ? 4 : ((m == 2) ? 7 : 8);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if (m == 0) return 1;\\n        if (n <= 0 || m < 0) return 0;\\n        \\n        if (n == 1) return 2;\\n        else if (n == 2) return (m == 1) ? 3 : 4;\\n        else return (m == 1) ? 4 : ((m == 2) ? 7 : 8);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107270,
                "title": "easy-to-understand-java-bfs-solution-o-m",
                "content": "I see all are math based solutions and it is O(1). \\nHere is my BFS solution to count all potential status for n bulb after m operations.\\n\\n```\\npublic int flipLights(int n, int m) {\\n        n = n <= 6? n: (n % 6 + 6);\\n        \\n        Set<Integer> visited = new HashSet<>();\\n        Queue<Integer> queue = new LinkedList<>();\\n        int init = (1 << n) - 1;\\n        queue.offer(init);\\n        for (int i=0; i<m; i++) {\\n            int size = queue.size();\\n            visited.clear();\\n            for (int k=0; k<size; k++) {\\n                int s = queue.poll();\\n                int[] next = new int[] {flipAll(s, n), \\n                     flipEven(s, n), flipOdd(s, n), flip3k1(s, n)};\\n                for (int s1: next) {\\n                    if (!visited.contains(s1)) {\\n                        queue.offer(s1);\\n                        visited.add(s1);\\n                    }\\n                }\\n            }\\n        }\\n        return queue.size();\\n    }\\n    \\n    private int flipAll(int s, int n) {\\n        int x = (1 << n) - 1;\\n        return s ^ x;\\n    }\\n\\n    private int flipEven(int s, int n) {\\n        for (int i=0; i<n; i+=2) {\\n            s ^= 1 << i;\\n        }\\n        return s;\\n    }\\n\\n    private int flipOdd(int s, int n) {\\n        for (int i=1; i<n; i+=2) {\\n            s ^= 1 << i;\\n        }\\n        return s;\\n    }\\n\\n    private int flip3k1(int s, int n) {\\n        for (int i=0; i<n; i+=3) {\\n            s ^= 1 << i;\\n        }\\n        return s;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int flipLights(int n, int m) {\\n        n = n <= 6? n: (n % 6 + 6);\\n        \\n        Set<Integer> visited = new HashSet<>();\\n        Queue<Integer> queue = new LinkedList<>();\\n        int init = (1 << n) - 1;\\n        queue.offer(init);\\n        for (int i=0; i<m; i++) {\\n            int size = queue.size();\\n            visited.clear();\\n            for (int k=0; k<size; k++) {\\n                int s = queue.poll();\\n                int[] next = new int[] {flipAll(s, n), \\n                     flipEven(s, n), flipOdd(s, n), flip3k1(s, n)};\\n                for (int s1: next) {\\n                    if (!visited.contains(s1)) {\\n                        queue.offer(s1);\\n                        visited.add(s1);\\n                    }\\n                }\\n            }\\n        }\\n        return queue.size();\\n    }\\n    \\n    private int flipAll(int s, int n) {\\n        int x = (1 << n) - 1;\\n        return s ^ x;\\n    }\\n\\n    private int flipEven(int s, int n) {\\n        for (int i=0; i<n; i+=2) {\\n            s ^= 1 << i;\\n        }\\n        return s;\\n    }\\n\\n    private int flipOdd(int s, int n) {\\n        for (int i=1; i<n; i+=2) {\\n            s ^= 1 << i;\\n        }\\n        return s;\\n    }\\n\\n    private int flip3k1(int s, int n) {\\n        for (int i=0; i<n; i+=3) {\\n            s ^= 1 << i;\\n        }\\n        return s;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 107278,
                "title": "very-easy-to-understand-c-with-detailed-explanation",
                "content": "At first this problem appears very intimidating.  However, after walking through actual values, it is very simple.  Below is my solution, and a step-by-step analysis for each part of code.  Please feel free to provide comments to add/edit this post in order to provide better understanding for everyone.  Thanks!\\n\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        \\n        if (m==0) return 1;\\n        \\n        if (n==1)\\n            if (m>=1) return 2;\\n\\n        if (n==2){\\n            if (m==1) return 3;\\n            if (m>=2) return 4;\\n        }\\n        if (n>=3){\\n            if (m==1) return 4;\\n            if (m==2) return 7;\\n            if (m>=3) return 8;\\n        }\\n        \\n        return 0; // invalid value for n or m\\n    }\\n};\\n```\\n**STEP-BY-STEP ANALYSIS:**\\n\\n**Part 1: Description**\\nThe first value to consider is m=0 operations.  Regardless how many n lightbulbs there are with initial state ON, with 0 operations, all n lightbulbs will remain ON.  Therefore, there is only one state ( all n lightbulbs ON ).\\n\\n**Part 1: Code**\\n```\\nif (m==0) return 1;\\n\\n```\\n\\n**Part 2: Description**\\nNow consider one lightbulb (n=1).  If we perform m=1 operation on that 1 lightbulb, then that 1 operation can be (flip all, flip odd, flip even, or flip 3k+1 [k=0, 3k+1=1]).  The lightbulb\\'s end state after 1 operation from [ flip all, flip odd, or flip 3k+1 ] is OFF.  The end state after 1 operation from [ flip even ] is ON (since there are no even lightbulbs to flip, this single odd lightbulb remains ON).  Therefore, there are 2 states for this 1 lightbulb after 1 operation.  Below is a table summary of this lightbulb and its potential states.  ON=1 and OFF=0.\\n\\n```\\nn=1\\nlightbulb ID       1\\n\\nINIT_STATE:\\n(initially ON)     1\\n\\nm=1\\nOPERATIONS:\\n                   0 ( after 1 operation: flip all, odd, or 3k+1 )\\n                   1 ( after 1 operation: flip even )\\nSTATE_COUNT:\\n                   2 ( 0 or 1 )\\n```\\n\\nNow consider if there are any additional unique states which can be created with this one lightbulb with more than one operation.  There are none.  Either this one lightbulb is ON or OFF after m=1 operations.  Any additional operations revert the lightbulb to a previous state, so there are no additional unique states created by any m>=1 operations.\\n\\n**Part 2: Code**\\n```\\n        if (n==1){\\n            if (m>=1) return 2;\\n        }\\n```\\n\\n**Part 3: Description**\\nNext consider n=2 lightbulbs.  The logic here is again the same as above, so I will skip the complete description and instead directly create an abridged table summary:\\n\\n```\\nn=2\\nlightbulb ID       1 2\\n\\nINIT_STATE:\\n(initially ON)     1 1\\n\\nm=1\\nOPERATIONS:\\n                   0 0 ( after 1 operation: flip all )\\n                   0 1 ( after 1 operation: flip odd or 3k+1 )\\n                   1 0 ( after 1 operation: flip even )\\nm=1\\nSTATE_COUNT:\\n                   3 ( 00 or 01 or 10 )\\n\\nm=2\\nOPERATIONS:\\n                   0 0 ( after 2 operations: flip odd, flip even )\\n                   0 1 ( after 2 operations: flip all, flip even )\\n                   1 0 ( after 2 operations: flip all, flip odd )\\n                   1 1 ( after 2 operations: flip all, flip all )\\n\\nm=2\\nSTATE_COUNT:\\n                   4 ( 00 or 01 or 10 or 11 )\\n```\\n\\nThere are multiple ways to arrive at the same lightbulb state with m=2 operations, but I did NOT list them all.  This brevity is on purpose in order to help keep my verbose post as short and concise as possible.  There is no need to list them all anyways because we are only interested in the amount of unique states in the end, NOT all the different ways which we arrived at those states.\\n\\nNow consider if there are any additional unique states which can be created with these two lightbulbs with more than two operations.  There are none.  Any additional operation m>=2 reverts these 2 lightbulbs to a previous state.\\n\\n**Part 3: Code**\\n```\\n        if (n==2){\\n            if (m==1) return 3;\\n            if (m>=2) return 4;\\n        }\\n```\\n\\n**Part 4: Description**\\nNext consider n=3 lightbulbs. The logic here is again the same as above, so I will skip the complete description and instead directly create another abridged table summary:\\n\\n```\\nn=2\\nlightbulb ID       1 2 3\\n\\nINIT_STATE:\\n(initially ON)     1 1 1\\n\\nm=1\\nOPERATIONS:\\n                   0 0 0 ( after 1 operation: flip all )\\n                   0 1 0 ( after 1 operation: flip odd )\\n                   0 1 1 ( after 1 operation: flip 3k+1 ) \\n                   1 0 1 ( after 1 operation: flip even )\\nm=1\\nSTATE_COUNT:\\n                   4 ( 000 or 010 or 011 or 101 )\\n\\nm=2\\nOPERATIONS:\\n                   0 0 0 ( after 2 operations: flip odd, flip even )\\n                   0 0 1 ( after 2 operations: flip 3k+1, flip even )\\n                   0 1 0 ( after 2 operations: flip even, flip all )\\n                   1 0 0 ( after 2 operations: flip all, flip 3k+1 )\\n                   1 0 1 ( after 2 operations: flip odd, flip all )\\n                   1 1 0 ( after 2 operations: flip odd, flip 3k+1 )\\n                   1 1 1 ( after 2 operations: flip all, flip all )\\n\\nm=2\\nSTATE_COUNT:\\n                   7 ( 000 or 001 or 010 or 100 or 101 or 110 or 111 )\\n\\nm=3\\nOPERATIONS:\\n                   ect...\\n                   ect...\\n                   ect...\\nm=3\\nSTATE_COUNT:\\n                   8 ( 000 or 001 or 010 or 011 or 100 or 101 or 110 or 111 )\\n```\\nAgain, there are multiple ways to arrive at the same lightbulb state with m=2 and m=3 operations, but I did NOT list them all. This brevity is on purpose.  Also, I did NOT explicitly write out all the different permutations for m=3, since they are all redundant states except for 011 which can be created with 3 operations [ flip 3k+1, flip odd, flip odd ].\\n\\nAgain, consider if there are any additional unique states which can be created with these three lightbulbs with more than three operations. There are none. Any additional operation m>=3 reverts these 3 lightbulbs to a previous state.  Also consider if there are more unique states which can be created with more than n=3 lightbulbs.  There are none.  Any additional amount of lightbulbs n>=3 does NOT create a new unique state.  Instead repeated patterns are observed for lightbulbs that are even 2,4,6,etc (i.e. lightbulbs at positions 2(k+1), k=0,1,2... ), lightbulbs that are odd 1,3,5,etc (i.e. lightbulbs at positions 2k+1, k=0,1,2...), and lightbulbs at every 3rd position 1,4,7,10,etc ( i.e. lightbulbs at positions 3k+1, k=0,1,2...).\\n\\n**Part 4: Code**\\n```\\n        if (n>=3){\\n            if (m==1) return 4;\\n            if (m==2) return 7;\\n            if (m>=3) return 8;\\n        }\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        \\n        if (m==0) return 1;\\n        \\n        if (n==1)\\n            if (m>=1) return 2;\\n\\n        if (n==2){\\n            if (m==1) return 3;\\n            if (m>=2) return 4;\\n        }\\n        if (n>=3){\\n            if (m==1) return 4;\\n            if (m==2) return 7;\\n            if (m>=3) return 8;\\n        }\\n        \\n        return 0; // invalid value for n or m\\n    }\\n};\\n```\n```\\nif (m==0) return 1;\\n\\n```\n```\\nn=1\\nlightbulb ID       1\\n\\nINIT_STATE:\\n(initially ON)     1\\n\\nm=1\\nOPERATIONS:\\n                   0 ( after 1 operation: flip all, odd, or 3k+1 )\\n                   1 ( after 1 operation: flip even )\\nSTATE_COUNT:\\n                   2 ( 0 or 1 )\\n```\n```\\n        if (n==1){\\n            if (m>=1) return 2;\\n        }\\n```\n```\\nn=2\\nlightbulb ID       1 2\\n\\nINIT_STATE:\\n(initially ON)     1 1\\n\\nm=1\\nOPERATIONS:\\n                   0 0 ( after 1 operation: flip all )\\n                   0 1 ( after 1 operation: flip odd or 3k+1 )\\n                   1 0 ( after 1 operation: flip even )\\nm=1\\nSTATE_COUNT:\\n                   3 ( 00 or 01 or 10 )\\n\\nm=2\\nOPERATIONS:\\n                   0 0 ( after 2 operations: flip odd, flip even )\\n                   0 1 ( after 2 operations: flip all, flip even )\\n                   1 0 ( after 2 operations: flip all, flip odd )\\n                   1 1 ( after 2 operations: flip all, flip all )\\n\\nm=2\\nSTATE_COUNT:\\n                   4 ( 00 or 01 or 10 or 11 )\\n```\n```\\n        if (n==2){\\n            if (m==1) return 3;\\n            if (m>=2) return 4;\\n        }\\n```\n```\\nn=2\\nlightbulb ID       1 2 3\\n\\nINIT_STATE:\\n(initially ON)     1 1 1\\n\\nm=1\\nOPERATIONS:\\n                   0 0 0 ( after 1 operation: flip all )\\n                   0 1 0 ( after 1 operation: flip odd )\\n                   0 1 1 ( after 1 operation: flip 3k+1 ) \\n                   1 0 1 ( after 1 operation: flip even )\\nm=1\\nSTATE_COUNT:\\n                   4 ( 000 or 010 or 011 or 101 )\\n\\nm=2\\nOPERATIONS:\\n                   0 0 0 ( after 2 operations: flip odd, flip even )\\n                   0 0 1 ( after 2 operations: flip 3k+1, flip even )\\n                   0 1 0 ( after 2 operations: flip even, flip all )\\n                   1 0 0 ( after 2 operations: flip all, flip 3k+1 )\\n                   1 0 1 ( after 2 operations: flip odd, flip all )\\n                   1 1 0 ( after 2 operations: flip odd, flip 3k+1 )\\n                   1 1 1 ( after 2 operations: flip all, flip all )\\n\\nm=2\\nSTATE_COUNT:\\n                   7 ( 000 or 001 or 010 or 100 or 101 or 110 or 111 )\\n\\nm=3\\nOPERATIONS:\\n                   ect...\\n                   ect...\\n                   ect...\\nm=3\\nSTATE_COUNT:\\n                   8 ( 000 or 001 or 010 or 011 or 100 or 101 or 110 or 111 )\\n```\n```\\n        if (n>=3){\\n            if (m==1) return 4;\\n            if (m==2) return 7;\\n            if (m>=3) return 8;\\n        }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107273,
                "title": "2-short-lines-simple-formula",
                "content": "    int flipLights(int n, int m) {\\n        n = min(n, 3);\\n        return min(1<<n, 1+m*n);\\n    }\\n\\nI can't (yet?) explain the `1+m*n` part, though. Really I just wrote a brute force solution, looked at the results for all cases where n, m &le; 10 and found a formula for the pattern I saw :-)",
                "solutionTags": [],
                "code": "    int flipLights(int n, int m) {\\n        n = min(n, 3);\\n        return min(1<<n, 1+m*n);\\n    }\\n\\nI can't (yet?) explain the `1+m*n` part, though. Really I just wrote a brute force solution, looked at the results for all cases where n, m &le; 10 and found a formula for the pattern I saw :-)",
                "codeTag": "Unknown"
            },
            {
                "id": 107277,
                "title": "share-my-o-1-c-solution-with-thinking-process-and-explanation",
                "content": "---\\n## 1. Problem\\n\\n---\\nThere is a room with n lights which are turned on initially and 4 buttons on the wall. After performing exactly m unknown operations towards buttons, you need to return how many different kinds of status of the n lights could be.\\n\\nSuppose n lights are labeled as number [1, 2, 3, ..., n], function of these 4 buttons are given below:\\n\\n    1. Flip all the lights.\\n    2. Flip lights with even numbers.\\n    3. Flip lights with odd numbers.\\n    4. Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...\\n\\n**Example 1:**\\n\\n    Input: n = 1, m = 1.\\n    Output: 2\\n    Explanation: Status can be: [on], [off]\\n\\n**Example 2:**\\n\\n    Input: n = 2, m = 1.\\n    Output: 3\\n    Explanation: Status can be: [on, off], [off, on], [off, off]\\n\\n**Example 3:**\\n\\n    Input: n = 3, m = 1.\\n    Output: 4\\n    Explanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].\\n\\n**Note:** n and m both fit in range [0, 1000]. \\n\\n---\\n## 2. Thinking process\\n\\n---\\n#### 2.1 Predefinition\\n\\n---\\n\\nIn order to make the explanation much clearer, **the state of the lights** is defined by an **n-digit binary number K**.\\n\\nSince n lights are labeled as number [1, 2, 3, ..., n], the **p-th (1 \\u2264 p \\u2264 n) digit of K** represents **the state of light p**, which means\\n\\n- When the digit is 1, light p is on.\\n\\n- When the digit is 0, light p is off.\\n\\nSince all lights are turned on initially, **the initial K is 111....1 (with n 1's)**.\\n\\nHere, the operations of the 4 buttons from 1 to 4 are also named to \\n\\n>#### **OP1, OP2, OP3, OP4**\\n\\nThe whole problem now becomes\\n\\n>#### **By doing m operations in {OP1, OP2, OP3, OP4}, how many different K's can we get?**\\n\\n---\\nIn the following explanation, the **4 different operations** will be marked by **4 different colors**:\\n\\n![0_1504591374428_color.png](https://discuss.leetcode.com/assets/uploads/files/1504591306285-color.png) \\n\\n---\\nHere, we also need to introduce [2 definitions in mathematics](https://en.wikipedia.org/wiki/Closure_(mathematics)).\\n\\n**Closure:**\\n\\n> #### **A set has closure under an operation if performance of that operation on members of the set always produces a member of the same set; in this case we also say that the set is closed under the operation.**\\n\\n**Closed under a collection of operations:**\\n\\n>#### **A set is said to be **closed under a collection of operations** if it is closed under each of the operations individually.**\\n\\n---\\n#### 2.2 Bi-directional proof\\n\\n---\\nIf the state of all the lights are represented by a binary number K,\\n\\n- If we do **a single operation** (OP1, OP2, OP3 or OP4) **even times**, the **specified lights** (all in OP1, even in OP2, odd in OP3, 3k+1 in OP4) will be **toggled even times**.\\n\\n- **The specified lights' status won't change, which means K won't change**.\\n\\n---\\nIt can be inferred that\\n\\n>#### **The transition between different K's are always bi-directional.**\\n\\n---\\n#### 2.3 Special case\\n\\n---\\nIf **m = 0, we do nothing, the result is only the initial K**, which means\\n\\n> #### **The answer is 1.**\\n\\n---\\n\\n#### 2.4 When n = 1\\n\\n---\\n\\nThe state diagram will be\\n\\n![0_1504591559446_diagram_1.png](http://discuss.leetcode.com/assets/uploads/files/1504591491378-diagram_1.png) \\n\\n---\\n**Initially, K = 1.**\\n\\n- After OP1, light 1 is off, K = 0.\\n- After OP2, since 1 is odd, light 1 is still on, K = 1.\\n- After OP3, since 1 is odd, light 1 is off, K = 0.\\n- After OP4, since 1 mod 3 = 1, light 1 is off, K = 0.\\n\\nSince the 4 transitions in the diagram are all bi-directional, the maximum number of probable K's is 2 (1 and 0).\\n\\n---\\nThen, do the **mathematical Induction**\\n\\n- When **m = 1**, the result can be 1(do OP2 once) and 0(do OP1, OP3 or OP4 once).\\n- Suppose after the q-th transition, **m = q (q \\u2265 1)**, we are probably at 0, 1.(**2 probable statuses**)\\n   - If the **result is 1**, in the next transition **(m = q + 1), K can be 1 or 0**.\\n   - If the **result is 0**, in the next transition **(m = q + 1), K can only be 1**.\\n   - **Still 2 probable statuses.**\\n- When **m = q + 1**, the **probable result STILL** can be **0 or 1**.\\n- **When n = 1, for all m, K can only be 0 or 1, and the answer is 2**\\n\\n---\\nIt's clear that\\n\\n> #### **The set {0,1} is a closure, and it is closed under the operation set {OP1, OP2, OP3, OP4}.**\\n\\nwhich means\\n\\n>#### **When n = 1, the answer is always 2.**\\n\\n---\\n#### 2.5 When n = 2\\n\\n---\\nThe state diagram will be\\n\\n![0_1504666814740_diagram_2.png](/assets/uploads/files/1504666748347-diagram_2.png) \\n\\n---\\n**Here, since all transitions are bi-directional, all two-way arrows are omitted.**\\n\\n**The maximum number of probable different K's is 4 (11, 00, 10, 01).**\\n\\n**The 4 statuses of K are marked as A0, A1, A2 and A3.**\\n\\n---\\n\\nFrom the diagram, we can see\\n\\n**Initially, K = A0 = 11.** Then, do the **mathematical Induction**\\n\\n- When **m = 1**, go from A0 to A1, A2 or A3. There are 3 different K's. **The answer is 3.**\\n- **We are now at A1, A2 or A3 after first transition.** \\n- When **m = 2**\\n    - Since A1, A2, A3 forms a **triangle loop**, they can **transit to each other**, which means A1, A2, A3 are all possible answer for K. \\n    - Since A1, A2, A3 can transit to A0, A0 is also a possible answer for K.\\n    - **The answer is 3 + 1 = 4.**\\n\\n- Suppose after the q-th transition, **m = q (q \\u2265 2)**, we are probably at A0, A1, A2, A3. (**4 probable statuses**)\\n- When **m = q + 1**\\n   - If we are at A0, next status will probably be A1, A2, A3.\\n   - If we are at A1, A2 or A3, next status will probably be A0, A1, A2, A3.\\n   - We are still probably at A0, A1, A2, A3.\\n   - **Still 4 probable statuses in all.**\\n\\n---\\nIt's clear that\\n\\n>#### **The set {A0, A1, A2, A3} is a closure, and it is closed under operation set {OP1, OP2, OP3, OP4}.**\\n\\nThe conclusion is\\n\\n> #### **When n = 2, If m = 1, the answer is 3. If m \\u2265 2, the answer is 4.**\\n\\n---\\n#### 2.6 When n = 3\\n\\n---\\nThe state diagram will be\\n\\n![0_1504666826464_diagram_3.png](/assets/uploads/files/1504666758850-diagram_3.png) \\n\\n---\\n**Here, since all transitions are bi-directional, all two-way arrows are omitted.**\\n\\n**The maximum number of probable different K's is 8 (111, 000, 101, 010, 011, 100, 001, 110).**\\n\\n**The 8 statuses of K are marked as A0, A1, A2, A3 (vertices in the outer pyramid) and B0, B1, B2, B3 (vertices in the inner pyramid).**\\n\\n---\\n\\nFrom the diagram, we can see\\n\\n**Initially, K = A0 = 111**. Then, do the **mathematical Induction**\\n\\n- When **m = 1**, go from A0 to B0, A1, A2 or A3. There are 4 different K's. **The answer is 4.**\\n- **We are now at B0, A1, A2 or A3 after first transition.** \\n- When **m = 2**\\n  - Since **A1, A2, A3 forms a triangle loop**, they can **transit to each other**, which means **A1, A2, A3 are possible answer for K**. \\n  - Since **A1 can transit to B1, A2 can transit to B2, A3 can transit to B3**, **B1, B2, B3 are possible answer for K**. \\n  - Since **B0, A1, A2 or A3 can transit to A0**, **A0 is a possible answer for K**.\\n  - Since **B0 can transit to B1, B2, B3**,  **B1, B2, B3 are possible answer for K**.\\n  - **All possible K's are A0, A1, A2, A3, B1, B2, B3 after second transition**.\\n  - **The answer is 7.**\\n- **We are now at A0, A1, A2, A3, B1, B2, B3 after second transition.**\\n- When **m = 3**\\n  - **A0 can transit to B0.**\\n  - **A1 can transit to B1.**\\n  - **A2 can transit to B2.**\\n  - **A3 can transit to B3.**\\n  - **A1, A2, A3 can transit to A0.**\\n  - **B1 can transit to A1.**\\n  - **B2 can transit to A2.**\\n  - **B3 can transit to A3.**\\n  - **All possible K's are A0, A1, A2, A3, B0, B1, B2, B3 after third transition**.\\n  - **The answer is 8.**\\n- Suppose after the q-th transition, **m = q (q \\u2265 3)**, we are probably at A0, A1, A2, A3, B0, B1, B2, B3. (**8 probable statuses**)\\n- When **m = q + 1**\\n  - **A0 can transit to B0.**\\n  - **A1 can transit to B1.**\\n  - **A2 can transit to B2.**\\n  - **A3 can transit to B3.**\\n  - **B0 can transit to A0.**\\n  - **B1 can transit to A1.**\\n  - **B2 can transit to A2.**\\n  - **B3 can transit to A3.**\\n  - **All possible K's are STILL A0, A1, A2, A3, B0, B1, B2, B3**.\\n  - **Still, the answer is 8.**\\n\\n---\\nIt's clear that\\n\\n> #### **The set {A0, A1, A2, A3, B0, B1, B2, B3} is a closure, and it is closed under operation set {OP1, OP2, OP3, OP4}.**\\n\\nThe conclusion is\\n\\n> #### **When n = 3, If m = 1, the answer is 4. If m = 2, the answer is 7. If m \\u2265 3, the answer is 8.**\\n\\n---\\n\\n#### 2.7 When n > 3\\n\\n---\\nSuppose **K = A0 has n digits, and its p-th digit is A0(p), 1 \\u2264 p \\u2264 n.**\\n\\n- **Initially, A0 = 111...1 (n 1's)**, which means\\n  - **A0(p) = 1, p mod 6 = 1.**\\n  - **A0(p) = 1, p mod 6 = 2.**\\n  - **A0(p) = 1, p mod 6 = 3.**\\n  - **A0(p) = 1, p mod 6 = 4.**\\n  - **A0(p) = 1, p mod 6 = 5.** \\n  - **A0(p) = 1, p mod 6 = 0.**\\n\\n---\\n- **By doing OP1 on A0 , we get A1,** and\\n  - **A1(p) = 0, p mod 6 = 1.**\\n  - **A1(p) = 0, p mod 6 = 2.**\\n  - **A1(p) = 0, p mod 6 = 3.**\\n  - **A1(p) = 0, p mod 6 = 4.**\\n  - **A1(p) = 0, p mod 6 = 5.**\\n  - **A1(p) = 0, p mod 6 = 0.**\\n- **By doing OP2 on A0 , we get A2,** and\\n  - **A2(p) = 1, p mod 6 = 1.**\\n  - **A2(p) = 0, p mod 6 = 2.**\\n  - **A2(p) = 1, p mod 6 = 3.**\\n  - **A2(p) = 0, p mod 6 = 4.**\\n  - **A2(p) = 1, p mod 6 = 5.**\\n  - **A2(p) = 0, p mod 6 = 0.**\\n- **By doing OP3 on A0 , we get A3,** and\\n  - **A3(p) = 0, p mod 6 = 1.**\\n  - **A3(p) = 1, p mod 6 = 2.**\\n  - **A3(p) = 0, p mod 6 = 3.**\\n  - **A3(p) = 1, p mod 6 = 4.**\\n  - **A3(p) = 0, p mod 6 = 5.**\\n  - **A3(p) = 1, p mod 6 = 0.**\\n\\n---\\n- **By doing OP4 on A0 , we get B0,** and\\n  - **B0(p) = 0, p mod 6 = 1.**\\n  - **B0(p) = 1, p mod 6 = 2.**\\n  - **B0(p) = 1, p mod 6 = 3.**\\n  - **B0(p) = 0, p mod 6 = 4.**\\n  - **B0(p) = 1, p mod 6 = 5.**\\n  - **B0(p) = 1, p mod 6 = 0.**\\n\\n---\\n- **By doing OP1 on B0 , we get B1,** and\\n  - **B1(p) = 1, p mod 6 = 1.**\\n  - **B1(p) = 0, p mod 6 = 2.**\\n  - **B1(p) = 0, p mod 6 = 3.**\\n  - **B1(p) = 1, p mod 6 = 4.**\\n  - **B1(p) = 0, p mod 6 = 5.**\\n  - **B1(p) = 0, p mod 6 = 0.**\\n- **By doing OP2 on B0 , we get B2,** and\\n  - **B2(p) = 0, p mod 6 = 1.**\\n  - **B2(p) = 0, p mod 6 = 2.**\\n  - **B2(p) = 1, p mod 6 = 3.**\\n  - **B2(p) = 1, p mod 6 = 4.**\\n  - **B2(p) = 1, p mod 6 = 5.**\\n  - **B2(p) = 0, p mod 6 = 0.**\\n- **By doing OP3 on B0 , we get B3,** and\\n  - **B3(p) = 1, p mod 6 = 1.**\\n  - **B3(p) = 1, p mod 6 = 2.**\\n  - **B3(p) = 0, p mod 6 = 3.**\\n  - **B3(p) = 0, p mod 6 = 4.**\\n  - **B3(p) = 0, p mod 6 = 5.**\\n  - **B3(p) = 1, p mod 6 = 0.**\\n\\n---\\nSince it has already been proved in 2.2 that\\n\\n> #### **The transition between different K's are always bi-directional.**\\n\\nSince we only need to calculate on a single direction, we can get\\n\\n- **By doing OP4 on B1 , we get A1.**\\n- **By doing OP4 on B2 , we get A2.**\\n- **By doing OP4 on B3 , we get A3.**\\n\\n---\\n- **By doing OP3 on A1 , we get A2.**\\n- **By doing OP1 on A2 , we get A3.**\\n- **By doing OP2 on A3 , we get A1.**\\n\\nSimilarly,\\n- **By doing OP3 on B1 , we get B2.**\\n- **By doing OP1 on B2 , we get B3.**\\n- **By doing OP2 on B3 , we get B1.**\\n\\n---\\nSince **the first 3 digits of A0, A1, A2, A3, B0, B1, B2, B3 are different**, we can inferred that\\n\\n>#### **A0, A1, A2, A3, B0, B1, B2, B3 are all different binary numbers.**\\n\\nwhich means\\n\\n>#### **A0, A1, A2, A3, B0, B1, B2, B3 represents 8 different statuses.**\\n\\nSince the result of doing {OP1, OP2, OP3, OP4} on the set {A0, A1, A2, A3, B0, B1, B2, B3} is still in the set  {A0, A1, A2, A3, B0, B1, B2, B3}, it can be inferred that when n > 3\\n\\n> #### **The set {A0, A1, A2, A3, B0, B1, B2, B3} is STILL a closure, and it is STILL closed under operation set {OP1, OP2, OP3, OP4}.**\\n\\n---\\nIf we draw the state diagram\\n\\n![0_1504666840971_diagram_m.png](/assets/uploads/files/1504666773118-diagram_m.png) \\n\\nwe can find **this diagram is as same as those in 2.6 when n = 3**.\\n\\n---\\nSince we have already discussed on the diagram in 2.6, here we come to the conclusion\\n\\n> #### **When n > 3, If m = 1, the answer is 4. If m = 2, the answer is 7. If m \\u2265 3, the answer is 8.**\\n\\n---\\n## 3. Conclusion\\n\\n---\\nAfter the discussion, we can infer that **the final answer is**\\n\\n- **When m = 0, the answer is 1.**\\n\\n\\n- **When n = 1, the answer is 2.**\\n- **When n = 2**\\n   - **If m = 1, the answer is 3.**\\n   - **If m \\u2265 2, the answer is 4.**\\n- **When n \\u2265 3**\\n   - **If m = 1, the answer is 4.**\\n   - **If m = 2, the answer is 7.**\\n   - **If m \\u2265 3, the answer is 8.**\\n\\n---\\n## 4. Complexity analysis\\n\\n---\\n> #### **Both the time and space complexity are O(1).**\\n\\n---\\n## 5. Code\\n\\n---\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m == 0)\\n        {\\n            return 1;\\n        }else{\\n            switch(n)\\n            {\\n                case 1: return 2;break;\\n                case 2: return (m == 1) ? 3 : 4;break;\\n                default:\\n                switch(m)\\n                {\\n                    case 1: return 4;break;\\n                    case 2: return 7;break;\\n                    default: return 8;break;\\n                }\\n                break;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m == 0)\\n        {\\n            return 1;\\n        }else{\\n            switch(n)\\n            {\\n                case 1: return 2;break;\\n                case 2: return (m == 1) ? 3 : 4;break;\\n                default:\\n                switch(m)\\n                {\\n                    case 1: return 4;break;\\n                    case 2: return 7;break;\\n                    default: return 8;break;\\n                }\\n                break;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107274,
                "title": "2-line-python-recursive-with-explanation",
                "content": "Inspired by: [this post](https://discuss.leetcode.com/topic/102395/2-short-lines-simple-formula/2)\\n```\\nclass Solution(object):\\n    def flipLights(self, n, m):\\n        m, n = min(3, m), min(3, n)\\n        return 1 if n == 0 or m == 0 else self.flipLights(n - 1,  m) + self.flipLights( n - 1, m - 1)      \\n```\\n\\nOperations: O(flip odds), E(flip evens), A(flip all), T(flip 3k + 1), N(flip nothing)\\nRelations:\\nO + O = N, E + E = N, A + A = N, T + T = N\\nO + E = A, O + A = E, E + A = O\\nExclusive statuses :\\nn > 2:\\n\\u2460 N\\n\\u2461 O\\n\\u2462 E\\n\\u2463 A\\n\\u2464 T\\n\\u2465 O + T\\n\\u2466 E + T\\n\\u2467 A + T\\n\\nn = 2 (remove all T related statuses):\\n\\u2460 N\\n\\u2461 O\\n\\u2462 E\\n\\u2463 A\\n\\nn = 1(remove all T, E, A related statuses):\\n\\u2460 N\\n\\u2461 O\\n\\nSteps needed to all status( always can plus 2 * k)\\n\\u2460 can only be achieved by 0, 2 steps\\n\\u2461\\uff0c\\u2462\\uff0c\\u2463 can be achieved by either 1 or 2 steps\\n\\u2464 can only be achieved by 1 steps\\n\\u2465\\uff0c\\u2466\\uff0c\\u2467 can only be achieved by 2 steps,\\n\\nThus:\\n0 steps -> \\u2460\\n1 steps -> \\u2461\\uff0c\\u2462\\uff0c\\u2463\\uff0c\\u2464\\n2 steps -> \\u2460\\uff0c\\u2461\\uff0c\\u2462\\uff0c\\u2463\\uff0c\\u2465\\uff0c\\u2466\\uff0c\\u2467\\nmore than 2 steps -> \\u2460, \\u2461, \\u2462, \\u2463, \\u2464, \\u2465, \\u2466, \\u2467\\n\\n![0_1504741152259_Screen Shot 2017-09-06 at 4.23.25 PM.png](/assets/uploads/files/1504741152817-screen-shot-2017-09-06-at-4.23.25-pm.png)",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def flipLights(self, n, m):\\n        m, n = min(3, m), min(3, n)\\n        return 1 if n == 0 or m == 0 else self.flipLights(n - 1,  m) + self.flipLights( n - 1, m - 1)      \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1674197,
                "title": "c-5-lines-code-with-line-by-line-explanations-and-observations",
                "content": "I must admit I can\\'t solve it after staring at it for hours (Partly because I believe there must be a way to solve it without enumerating all cases...). So I read many posts and tried to write my code according to those posts, below is the AC code\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int flipLights(int n, int p) {\\n        if (p == 0) return 1; // no presses, original state\\n        if (n == 1) return 2; // constraint: (p > 0) : one light, binary states.\\n        if (p == 1) return n > 2 ? 4 : 3; // constraint: (p > 0 && n > 1) : one press, if (1) two lights -> all 2^2 but original state = 3 states (2) more than two lights -> 011, 010, 101, 000 = 4 states\\n        if (n == 2) return 4; // constraint: (p > 1 && n > 1) : two lights, multiple press, 4 states.\\n        return p == 2 ? 7 : 8; // constraint: (p > 1 && n > 2) : if only two presses, can\\'t be in 4(011) state -> 8-1 = 7\\n    }\\n};\\n\\n/**\\n\\nObservations:\\n1) only the first 3 lights matter, since we can only switch (1) even (2) odd (3) (x = 1 MOD 3) lights\\n2) all ops are commutative.\\n3) there is only 8 states possible for all situations: All-on(111), 1(000), 2(010), 3(101), 4(011), 41(100), 42(110), 43(001)\\n*/\\n```\\nIf it is helpful, maybe a upvote?",
                "solutionTags": [],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int flipLights(int n, int p) {\\n        if (p == 0) return 1; // no presses, original state\\n        if (n == 1) return 2; // constraint: (p > 0) : one light, binary states.\\n        if (p == 1) return n > 2 ? 4 : 3; // constraint: (p > 0 && n > 1) : one press, if (1) two lights -> all 2^2 but original state = 3 states (2) more than two lights -> 011, 010, 101, 000 = 4 states\\n        if (n == 2) return 4; // constraint: (p > 1 && n > 1) : two lights, multiple press, 4 states.\\n        return p == 2 ? 7 : 8; // constraint: (p > 1 && n > 2) : if only two presses, can\\'t be in 4(011) state -> 8-1 = 7\\n    }\\n};\\n\\n/**\\n\\nObservations:\\n1) only the first 3 lights matter, since we can only switch (1) even (2) odd (3) (x = 1 MOD 3) lights\\n2) all ops are commutative.\\n3) there is only 8 states possible for all situations: All-on(111), 1(000), 2(010), 3(101), 4(011), 41(100), 42(110), 43(001)\\n*/\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107282,
                "title": "java-o-1-solution",
                "content": "There's a total only `six` possible answers:\\n`1, 2, 3, 4, 7 and 8`\\n```\\npublic int flipLights(int n, int m) {\\n            if (n == 1 && m > 0) {\\n                return 2;\\n            } else if (n == 2 && m == 1) {\\n                return 3;\\n            } else if ((n > 2 && m == 1) || (n == 2 && m > 1)) {\\n                return 4;\\n            } else if (n > 2 && m == 2) {\\n                return 7;\\n            } else if (n > 2 && m > 2) {\\n                return 8;\\n            } else {\\n                return 1;\\n            }\\n        }\\n```\\n\\nOne can imagine there's a 2d array `dp` with `m` rows and `n` columns, suppose m == 5 and n == 7, this `dp` matrix will be like the following:\\n\\n```\\n2, 3, 4, 4, 4, 4, 4, \\n2, 4, 7, 7, 7, 7, 7, \\n2, 4, 8, 8, 8, 8, 8, \\n2, 4, 8, 8, 8, 8, 8, \\n2, 4, 8, 8, 8, 8, 8,\\n```\\n\\nAs `m` and `n` extend, the result will be fixed, so a total only 6 possible answers, we could basically \"hardcode\" them as the above.\\n\\nAlso viewable [here](https://github.com/fishercoder1534/Leetcode/blob/master/src/main/java/com/fishercoder/solutions/_672.java) on Github.",
                "solutionTags": [],
                "code": "```\\npublic int flipLights(int n, int m) {\\n            if (n == 1 && m > 0) {\\n                return 2;\\n            } else if (n == 2 && m == 1) {\\n                return 3;\\n            } else if ((n > 2 && m == 1) || (n == 2 && m > 1)) {\\n                return 4;\\n            } else if (n > 2 && m == 2) {\\n                return 7;\\n            } else if (n > 2 && m > 2) {\\n                return 8;\\n            } else {\\n                return 1;\\n            }\\n        }\\n```\n```\\n2, 3, 4, 4, 4, 4, 4, \\n2, 4, 7, 7, 7, 7, 7, \\n2, 4, 8, 8, 8, 8, 8, \\n2, 4, 8, 8, 8, 8, 8, \\n2, 4, 8, 8, 8, 8, 8,\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 107290,
                "title": "python-solution-this-is-not-a-programming-questions-imo",
                "content": "```\\nclass Solution:\\n    def flipLights(self, n, m):\\n        \"\"\"\\n        :type n: int\\n        :type m: int\\n        :rtype: int\\n        \"\"\"\\n        if m == 0:\\n            return 1\\n        if n >= 3:\\n            return 4 if m == 1 else 7 if m == 2 else 8\\n        if n == 2:\\n            return 3 if m == 1 else 4\\n        if n == 1:\\n            return 2\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n, m):\\n        \"\"\"\\n        :type n: int\\n        :type m: int\\n        :rtype: int\\n        \"\"\"\\n        if m == 0:\\n            return 1\\n        if n >= 3:\\n            return 4 if m == 1 else 7 if m == 2 else 8\\n        if n == 2:\\n            return 3 if m == 1 else 4\\n        if n == 1:\\n            return 2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 897976,
                "title": "python3-o-1",
                "content": "Key insight: \\nIt is not difficult to find out that there are not a lot of states since \\n1) operations are reversible;\\n2) operations can be reproduced by other operations. \\n\\nTo get a more concrete understanding, let\\'s list the outcomes of given `m` and `n` up to 5. From the table, it is obvious that \\n1) beyond 3, `n` and `m` become irrelevant because there are at most 8 states all of which become achievable when `m` and `n` are large enough; \\n2) below 3, `fn(n, m) = fn(n-1, m-1) + fn(n-1, m)`. \\n\\n```\\nn/m 0 1 2 3 4 5\\t\\t\\n0   1 1 1 1 1 1\\t \\n1   1 2 2 2 2 2\\n2   1 3 4 4 4 4\\n3   1 4 7 8 8 8\\n4   1 4 7 8 8 8\\n5   1 4 7 8 8 8\\n```\\n\\n```\\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        \\n        def fn(n, m): \\n            \"\"\"Return number of different status.\"\"\"\\n            if m * n == 0: return 1\\n            return fn(n-1, m-1) + fn(n-1, m)\\n        \\n        return fn(min(n, 3), min(m, 3))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nn/m 0 1 2 3 4 5\\t\\t\\n0   1 1 1 1 1 1\\t \\n1   1 2 2 2 2 2\\n2   1 3 4 4 4 4\\n3   1 4 7 8 8 8\\n4   1 4 7 8 8 8\\n5   1 4 7 8 8 8\\n```\n```\\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        \\n        def fn(n, m): \\n            \"\"\"Return number of different status.\"\"\"\\n            if m * n == 0: return 1\\n            return fn(n-1, m-1) + fn(n-1, m)\\n        \\n        return fn(min(n, 3), min(m, 3))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 175165,
                "title": "conventional-c-bfs-solution-with-very-clear-explanation",
                "content": "At first glance of this question, we can easily come up with a dfs or bfs idea. But considering the time complexity (n,m<=1000), it appears a traditional search-based method will generate TLE. But if we carefully look at the state-transfer function, we can see that, the first three will just generate 3 different status (`00000....`,`11111....`,`01010101......`,`10101010....`) . So we may assume that the final status after m operations should not be too large, though we still didn\\'t take the 4th operations into account. Let\\'s think about our bfs solution in this way: after k steps,we expanded all elements that should be visited in the next level, let\\'s call them `status_set`. Here we use set because we don\\'t want to have duplicates of these status; We also memoraize the size of `status_set` (`prev_size`) generate by previous level. Once we found `status_set.size()==prev_size`, we know that there is no need to search deeper because no more elements will be added to the set. So now we can just return the `prev_size`, which is actually only 8. Below is my code:\\n```\\nclass Solution {\\npublic:\\n    string op(int type,string& s){\\n        if(type==0){\\n            for(int i = 0;i<s.length();i++){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else if(type==1){\\n            for(int i = 1;i<s.length();i+=2){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else if(type==2){\\n            for(int i = 0;i<s.length();i+=2){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else{\\n            for(int k = 0;3*k+1<=s.length();k++){\\n                int i = 3*k;\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        return s;\\n    }\\n    int flipLights(int n, int m) {\\n        string root(n,\\'1\\');\\n        unordered_set<string> mset;\\n        queue<string> q;\\n        q.push(root);\\n        mset.insert(root);\\n        int cur_size = mset.size();\\n        int level = 0;\\n        while(!q.empty() && level<m){\\n            int size = q.size();\\n            mset.clear();\\n            for(int i = 0;i<size;i++){\\n                string front = q.front();\\n                q.pop();\\n                for(int k = 0;k<4;k++){\\n                    string s = op(k,front);\\n                    mset.insert(s);   \\n                    q.push(s);\\n                }\\n            }\\n            level++;\\n            if(mset.size()==cur_size) break;\\n            cur_size = mset.size();\\n        }\\n        return cur_size;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string op(int type,string& s){\\n        if(type==0){\\n            for(int i = 0;i<s.length();i++){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else if(type==1){\\n            for(int i = 1;i<s.length();i+=2){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else if(type==2){\\n            for(int i = 0;i<s.length();i+=2){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else{\\n            for(int k = 0;3*k+1<=s.length();k++){\\n                int i = 3*k;\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        return s;\\n    }\\n    int flipLights(int n, int m) {\\n        string root(n,\\'1\\');\\n        unordered_set<string> mset;\\n        queue<string> q;\\n        q.push(root);\\n        mset.insert(root);\\n        int cur_size = mset.size();\\n        int level = 0;\\n        while(!q.empty() && level<m){\\n            int size = q.size();\\n            mset.clear();\\n            for(int i = 0;i<size;i++){\\n                string front = q.front();\\n                q.pop();\\n                for(int k = 0;k<4;k++){\\n                    string s = op(k,front);\\n                    mset.insert(s);   \\n                    q.push(s);\\n                }\\n            }\\n            level++;\\n            if(mset.size()==cur_size) break;\\n            cur_size = mset.size();\\n        }\\n        return cur_size;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3497288,
                "title": "easy-o-1-solution",
                "content": "\\n# Complexity\\n- Time complexity: **O(1)**\\n\\n- Space complexity: **O(1)**\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int k) {\\n        if(k == 0) return 1;\\n        if(n == 1) return 2;\\n        if(n == 2 && k == 1) return 3;\\n        if(n == 2 || k == 1) return 4;\\n        if(k == 2) return 7;\\n        return 8;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int k) {\\n        if(k == 0) return 1;\\n        if(n == 1) return 2;\\n        if(n == 2 && k == 1) return 3;\\n        if(n == 2 || k == 1) return 4;\\n        if(k == 2) return 7;\\n        return 8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3317125,
                "title": "672-time-96-77-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Reduce n to at most 3, since any action performed more than 3 times will result in a pattern that has already been counted.\\n2. If m is 0, return 1 as there is only one possible outcome (all lights off).\\n3. If m is 1, return the number of possible outcomes for the given value of n and m.\\n4. If m is 2, return the number of possible outcomes for the given value of n and m.\\n5. If m is greater than or equal to 3, return the number of possible outcomes for the given value of n and m.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        # Reduce n to at most 3, since any action performed more than 3 times\\n        # will result in a pattern that has already been counted\\n        n = min(n, 3)\\n        if m == 0:\\n            return 1\\n        elif m == 1:\\n            # For m=1, there are only 2 outcomes for n=1, 3 outcomes for n=2, and 4 outcomes for n=3\\n            return [2, 3, 4][n - 1]\\n        elif m == 2:\\n            # For m=2, there are only 2 outcomes for n=1, 4 outcomes for n=2, and 7 outcomes for n=3\\n            return [2, 4, 7][n - 1]\\n        else:\\n            # For m>=3, there are only 2 outcomes for n=1, 4 outcomes for n=2, and 8 outcomes for n=3\\n            return [2, 4, 8][n - 1]\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math",
                    "Bit Manipulation",
                    "Depth-First Search"
                ],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        # Reduce n to at most 3, since any action performed more than 3 times\\n        # will result in a pattern that has already been counted\\n        n = min(n, 3)\\n        if m == 0:\\n            return 1\\n        elif m == 1:\\n            # For m=1, there are only 2 outcomes for n=1, 3 outcomes for n=2, and 4 outcomes for n=3\\n            return [2, 3, 4][n - 1]\\n        elif m == 2:\\n            # For m=2, there are only 2 outcomes for n=1, 4 outcomes for n=2, and 7 outcomes for n=3\\n            return [2, 4, 7][n - 1]\\n        else:\\n            # For m>=3, there are only 2 outcomes for n=1, 4 outcomes for n=2, and 8 outcomes for n=3\\n            return [2, 4, 8][n - 1]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1723656,
                "title": "4-liner-c-solution-o-1-tc",
                "content": "Here is my solution.\\n\\nThere are only 8 states possible and which can be convered in the following cases.\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int p) {\\n        if(n == 0) return 1;\\n        if(n == 1) return vector<int>{1,2}[min(p,1)];\\n        if(n == 2) return vector<int>{1,3,4}[min(p,2)];\\n        return vector<int>{1,4,7,8}[min(p,3)];\\n    }\\n};\\n```\\n\\nTC : O(1)\\nSC : O(1)\\n\\nThank you :>",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int p) {\\n        if(n == 0) return 1;\\n        if(n == 1) return vector<int>{1,2}[min(p,1)];\\n        if(n == 2) return vector<int>{1,3,4}[min(p,2)];\\n        return vector<int>{1,4,7,8}[min(p,3)];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2926323,
                "title": "python-bfs",
                "content": "# Intuition\\nWe need to traverse the states graph for exactly ``presses`` levels and get the total number of states discovered on the last level.\\n\\n# Approach\\nWe can do either BFS or DFS. We also need an efficient way to represent a state and to calculate next states. \\nWe can represent states as binary numbers where ith bit is set to ``1`` if the ith bulb is switched on and ``0`` otherwise. \\nThen, for the state transitions, we have: \\n1. Toggle all bulbs - perform an bitwise XOR on the state with all bits set to 1\\n2. Toggle even bulbs - perform an bitwise XOR on the state with all even bits set to 1 \\n3. Toggle odd bulbs - perform an bitwise XOR on the state with all odd bits set to 1 \\n4. Toggle ``3*k+1`` bulbs - perform an bitwise XOR on the state with all ith bits set to 1, where ``i % 3 == 1``\\n\\nSince ``n <= 1000`` we would need big numbers to represent those states. Luckily Python has an out of the box support for big numbers.\\n\\n\\n# Complexity\\n- Time complexity: $$O(presses)$$\\nWe need to perform ``presses`` steps traversing the states graph, each step has $$O(1)$$ operations.\\n\\n- Space complexity:\\nSpace complexity is trickier here. On each step we discover 4 states from each state, however there are a lot of duplicated states. It can be proven that because of the operations that we have we wouldn\\'t get more than ``8`` different states on each level. \\n\\nIntuition:\\nWe can divide the whole state in groups of 3 digits and only have following operations:\\n1. Switch all 3 bits\\n2. Switch odd bits\\n3. Switch even bits\\n4. Switch only last bit\\n\\nRest bits will be changed in the same way. The only problem is that we would change odd and even groups of 3 differently for odd and even bits toggles.\\n\\nI don\\'t have a better explanation yet, but my guess is that only ``8`` different states are possible at most.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n\\n        all_ones, evens, odds, three = 0, 0, 0, 0\\n        for i in range(n):\\n            all_ones = (all_ones << 1) + 1\\n            evens = (evens << 1) + (1 if (i+1) % 2 == 0 else 0)\\n            odds = (odds << 1) + (1 if (i+1) % 2 == 1 else 0)\\n            three = (three << 1) + (1 if (i+1) % 3 == 1 else 0)\\n\\n        state = all_ones\\n\\n        level = {state}\\n        for i in range(presses):\\n            next_level = set()\\n            for state in level:\\n                states = [state ^ all_ones,\\n                          state ^ evens,\\n                          state ^ odds,\\n                          state ^ three]\\n                for next_state in states:\\n                    next_level.add(next_state)\\n            level = next_level\\n\\n        return len(level)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n\\n        all_ones, evens, odds, three = 0, 0, 0, 0\\n        for i in range(n):\\n            all_ones = (all_ones << 1) + 1\\n            evens = (evens << 1) + (1 if (i+1) % 2 == 0 else 0)\\n            odds = (odds << 1) + (1 if (i+1) % 2 == 1 else 0)\\n            three = (three << 1) + (1 if (i+1) % 3 == 1 else 0)\\n\\n        state = all_ones\\n\\n        level = {state}\\n        for i in range(presses):\\n            next_level = set()\\n            for state in level:\\n                states = [state ^ all_ones,\\n                          state ^ evens,\\n                          state ^ odds,\\n                          state ^ three]\\n                for next_state in states:\\n                    next_level.add(next_state)\\n            level = next_level\\n\\n        return len(level)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2623308,
                "title": "java-c-python-all-constant-time-o-1-explained",
                "content": "**UPVOTE PLEASE**\\n```\\nWe only need to consider special cases which n<=2 and m < 3. When n >2 and m >=3, the result is 8.\\nThe four buttons:\\n\\nFlip all the lights.\\nFlip lights with even numbers.\\nFlip lights with odd numbers.\\nFlip lights with (3k + 1) numbers, k = 0, 1, 2, ...\\nIf we use button 1 and 2, it equals to use button 3.\\nSimilarly...\\n\\n1 + 2 --> 3, 1 + 3 --> 2, 2 + 3 --> 1\\nSo, there are only 8 cases.\\n\\nAll_on, 1, 2, 3, 4, 1+4, 2+4, 3+4\\n\\nAnd we can get all the cases, when n>2 and m>=3.\\n\\nC++:\\n\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2&&m==1) return 3;\\n        if(n==2) return 4;\\n        if(m==1) return 4;\\n        if(m==2) return 7;\\n        if(m>=3) return 8;\\n        return 8;\\n    }\\n};\\n\\n\\nPY:\\n\\ndef flipLights(self, n, m):\\n        \"\"\"\\n        :type n: int\\n        :type presses: int\\n        :rtype: int\\n        \"\"\"\\n        if(m==0): return 1;\\n        if(n==1): return 2;\\n        if(n==2 and m==1): return 3;\\n        if(n==2): return 4;\\n        if(m==1): return 4;\\n        if(m==2): return 7;\\n        if(m>=3): return 8;\\n        return 8;\\n\\nJAVA:\\n\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if(m==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2&&m==1) return 3;\\n        if(n==2) return 4;\\n        if(m==1) return 4;\\n        if(m==2) return 7;\\n        if(m>=3) return 8;\\n        return 8;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nWe only need to consider special cases which n<=2 and m < 3. When n >2 and m >=3, the result is 8.\\nThe four buttons:\\n\\nFlip all the lights.\\nFlip lights with even numbers.\\nFlip lights with odd numbers.\\nFlip lights with (3k + 1) numbers, k = 0, 1, 2, ...\\nIf we use button 1 and 2, it equals to use button 3.\\nSimilarly...\\n\\n1 + 2 --> 3, 1 + 3 --> 2, 2 + 3 --> 1\\nSo, there are only 8 cases.\\n\\nAll_on, 1, 2, 3, 4, 1+4, 2+4, 3+4\\n\\nAnd we can get all the cases, when n>2 and m>=3.\\n\\nC++:\\n\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2&&m==1) return 3;\\n        if(n==2) return 4;\\n        if(m==1) return 4;\\n        if(m==2) return 7;\\n        if(m>=3) return 8;\\n        return 8;\\n    }\\n};\\n\\n\\nPY:\\n\\ndef flipLights(self, n, m):\\n        \"\"\"\\n        :type n: int\\n        :type presses: int\\n        :rtype: int\\n        \"\"\"\\n        if(m==0): return 1;\\n        if(n==1): return 2;\\n        if(n==2 and m==1): return 3;\\n        if(n==2): return 4;\\n        if(m==1): return 4;\\n        if(m==2): return 7;\\n        if(m>=3): return 8;\\n        return 8;\\n\\nJAVA:\\n\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if(m==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2&&m==1) return 3;\\n        if(n==2) return 4;\\n        if(m==1) return 4;\\n        if(m==2) return 7;\\n        if(m>=3) return 8;\\n        return 8;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1633645,
                "title": "java-o-1-observation",
                "content": "Some press combination result in other press combination, for example, \\n1 & 2 == 3\\n1 & 3 == 2\\n2 & 3 == 1\\nThe only thing that\\'s interesting is press 4, but it can only stack with 2 or 3 to result in a new pattern `(4, 4 + 2, 4 + 3, 4 + 2 + 3)`, so there will only ever be at most 8 patterns in total.\\n\\n```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n        //1, 2 -> 3\\n        //1, 3 -> 2\\n        //2, 3 -> 1\\n        //all on, all off, even on, odd on, 3k+1 on, 3k+0+2 on, 3k+1 w/ 2, 3k+1 w/ 3\\n        if (n == 2 && presses == 1) return 3;\\n        if (presses == 1) return Math.min(1 << Math.min(4, n), 4); //i chose 4 arbitarily, just has to be big enough to cover small number and less than 31\\n        if (presses == 2) return Math.min(1 << Math.min(4, n), 7);\\n        if (presses >= 3) return Math.min(1 << Math.min(4, n), 8);\\n        return 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n        //1, 2 -> 3\\n        //1, 3 -> 2\\n        //2, 3 -> 1\\n        //all on, all off, even on, odd on, 3k+1 on, 3k+0+2 on, 3k+1 w/ 2, 3k+1 w/ 3\\n        if (n == 2 && presses == 1) return 3;\\n        if (presses == 1) return Math.min(1 << Math.min(4, n), 4); //i chose 4 arbitarily, just has to be big enough to cover small number and less than 31\\n        if (presses == 2) return Math.min(1 << Math.min(4, n), 7);\\n        if (presses >= 3) return Math.min(1 << Math.min(4, n), 8);\\n        return 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1598457,
                "title": "recursion",
                "content": "<br>\\n\\n![image](https://assets.leetcode.com/users/images/bb37b438-213f-4324-bc41-c8152a7764ba_1638030052.542557.png)\\n\\n<br>\\n<br>\\n\\n```\\nint flipLights(int n, int p)\\n{   \\n\\treturn !p or !n ? 1\\n                    : n>3 ? flipLights(3, p)\\n\\t\\t\\t\\t          : flipLights(n-1, p-1) + flipLights(n-1, p);\\n}\\n```\\n||\\n```\\nint flipLights(int n, int p)\\n{\\n\\treturn n*p ? n>3 ? flipLights(3, p)\\n\\t\\t\\t\\t     : flipLights(n-1, p-1) + flipLights(n-1, p)\\n               : 1;\\n}\\n```\\nI like this solution as it clearly has Fibonacci/Binomial_coeffs vibes.\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint flipLights(int n, int p)\\n{   \\n\\treturn !p or !n ? 1\\n                    : n>3 ? flipLights(3, p)\\n\\t\\t\\t\\t          : flipLights(n-1, p-1) + flipLights(n-1, p);\\n}\\n```\n```\\nint flipLights(int n, int p)\\n{\\n\\treturn n*p ? n>3 ? flipLights(3, p)\\n\\t\\t\\t\\t     : flipLights(n-1, p-1) + flipLights(n-1, p)\\n               : 1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1580973,
                "title": "java-math-o-1-faster-than100-brief-explanation-by-formulas",
                "content": "We can get these formulas easily:\\n* \\tB1B2 = B3\\n* \\tB2B3 = B1\\n* \\tB3B1 = B2\\n* \\tBiBi = 0 (initial status)\\n* \\tBiBj = BjBi (commutative law)\\n\\nSo, for number of bulbs no less than 3, there are at most 8 statuses:\\n* 0(initial status)\\n* B1\\n* B2\\n* B3\\n* B1B4\\n* B2B4\\n* B3B4\\n* B4\\n\\nWe can easily enumrate all final statuses given the number of times we press buttons using the formulas above.\\n\\nNote that for number of bulbs less than 3:\\n1. B4 = B3\\n2. The final statuses will be less than 2^n.\\n\\n```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n        int[] mapForLessThan3 = new int[]{1,3,4};\\n        int[] mapForMoreThan2 = new int[]{1,4,7,8};\\n        \\n        if(n<3)\\n            return Math.min(1<<n,mapForLessThan3[Math.min(presses,2)]);            \\n        return mapForMoreThan2[Math.min(presses,3)];\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n        int[] mapForLessThan3 = new int[]{1,3,4};\\n        int[] mapForMoreThan2 = new int[]{1,4,7,8};\\n        \\n        if(n<3)\\n            return Math.min(1<<n,mapForLessThan3[Math.min(presses,2)]);            \\n        return mapForMoreThan2[Math.min(presses,3)];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1337871,
                "title": "faster-than-100-00-of-c-online-submissions",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        if ((presses == 0) || (n == 0)) {\\n            return 1;\\n        }\\n        if (n == 1) {\\n            return 2; // even => noop\\n        }\\n        if (presses == 1) {\\n            // n = 2\\n            // |-> 01, 10, 11\\n            // n > 2\\n            // |-> 101, 010, 111, 100\\n            return 3 + (n >= 3);\\n        }\\n        if (n == 2) {\\n            // 10  odd or 3k+1\\n            // 01  even\\n            // 11  full or (even + odd)\\n            // 00  two identical ops\\n            return 3 + (presses >= 2);\\n        }\\n        // n >= 3, presses >= 2\\n        // |-> 010, 101, 111 \\n        // |-> 000 (two identical ops)\\n        // |-> 110, 011 (combined with 3k+1)\\n        // 100 cannot be done with 2 ops\\n        return 7 + (presses >= 3);\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Bit Manipulation",
                    "Bitmask"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        if ((presses == 0) || (n == 0)) {\\n            return 1;\\n        }\\n        if (n == 1) {\\n            return 2; // even => noop\\n        }\\n        if (presses == 1) {\\n            // n = 2\\n            // |-> 01, 10, 11\\n            // n > 2\\n            // |-> 101, 010, 111, 100\\n            return 3 + (n >= 3);\\n        }\\n        if (n == 2) {\\n            // 10  odd or 3k+1\\n            // 01  even\\n            // 11  full or (even + odd)\\n            // 00  two identical ops\\n            return 3 + (presses >= 2);\\n        }\\n        // n >= 3, presses >= 2\\n        // |-> 010, 101, 111 \\n        // |-> 000 (two identical ops)\\n        // |-> 110, 011 (combined with 3k+1)\\n        // 100 cannot be done with 2 ops\\n        return 7 + (presses >= 3);\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1042202,
                "title": "o-1-detailed-explanation",
                "content": "```\\nfunction flipLights(n: number, m: number): number {\\n\\n    // Some observations:\\n    // Combination of 1 - 4 operations\\n    \\n    // Flip all and Flip even numbers = Flip odd numbers\\n    // Flip all and Flip odd numbers = Flip even numbers\\n    // Flip odd ande even numbers = Flip all\\n    // if n < 3, Flip 3k + 1 numbers = Flip odd numbers\\n    \\n    // => 1 + 2 = 3\\n    // => 1 + 3 = 2\\n    // => 2 + 3 = 1\\n    // => n < 3, 4 = 2\\n    \\n    // n = 0 or m = 0, only 1 state (initial state)\\n    if (n == 0 || m == 0) return 1;\\n    \\n    // n = 1, only 2 state\\n    if (n == 1) return 2;\\n    \\n    // n = 2, m = 1\\n    // we cound have 4 operations:\\n    // flip all => 00\\n    // flip odd => 01\\n    // flip even => 10\\n    // flip 3k + 1 => 01\\n    // 2 and 4 are the same, so we have 3 states\\n    if (n == 2 && m == 1) return 3\\n    \\n    // n = 2, m = 2\\n    // possible operations:\\n    // 1 + 1 => nothing change,     11 -> 00 -> 11\\n    // 1 + 2 => 3, flip odd,        11 -> 00 -> 01\\n    // 1 + 3 => 2, flip even,       11 -> 00 -> 10\\n    // 1 + 4 => 2, flip even,       11 -> 00 -> 10\\n    // 2 + 3 => 1, flip all,        11 -> 10 -> 00\\n    // 2 + 4 => 1, flip all,        11 -> 10 -> 00\\n    // 3 + 4 => nothing change,     11 -> 01 -> 11\\n    // added one more state on top of m = 1, so m = 2, 4 states\\n\\n    // based on the above, we can conclude that:\\n    // 1 + 2 = 3\\n    // 1 + 3 = 2\\n    // 2 + 3 = 1\\n    \\n    // n = 2, m > 2\\n    // 1 + 2 + 1 = 3 + 1, flip odd\\n    // 1 + 3 + 1 = 2 + 1, flip even\\n    // not gonna list all of them, but you got the idea:\\n    \\n    // for m >= 2, the possible states are 4\\n    if (n == 2 && m >= 2) return 4;\\n    \\n    // Say, n = 3, m = 1\\n    // flip all     =>      111 -> 000\\n    // flip odd     =>      111 -> 010\\n    // flip even    =>      111 -> 101\\n    // flip 3k + 1  =>      111 -> 011\\n    // could have 4 states, this is a general rule for all n > 2\\n    if (n > 2 && m == 1) return 4;\\n    \\n    // Say, n = 3, m = 2\\n    // 1 + 1                        111 -> 000 -> 111\\n    // 1 + 2 = 3, flip odd,         111 -> 000 -> 010\\n    // 1 + 3 = 2, flip even,        111 -> 000 -> 101\\n    // 1 + 4,                       111 -> 000 -> 100\\n    // 2 + 3 = 1, flip all,         111 -> 101 -> 000\\n    // 2 + 4                        111 -> 101 -> 001\\n    // 3 + 4                        111 -> 010 -> 110\\n    // could have 7 states, this is a general rule for all n > 2 and m = 2\\n    if (n > 2 && m == 2) return 7;\\n    \\n    // n = 3, m > 2\\n    // 1 + 2 + 4 = 3 + 4            111 -> 000 -> 010 -> 110\\n    // 1 + 3 + 4 = 2 + 4            111 -> 000 -> 101 -> 001\\n    // 1 + 4 + 1 = 4                111 -> 000 -> 100 -> 011\\n    // 2 + 4 + 1 = 3 + 4            111 -> 101 -> 001 -> 110\\n    // 3 + 4 + 1 = 2 + 4            111 -> 010 -> 110 -> 001\\n    // added one new possible state on top of m = 1, we got 8 states here\\n    // not gonna list all, but you got the idea:\\n    // for m > 2, we could simpify it to the base case m = 2\\n    // e.g. 1 + 4 + 2 + 3 \\n    //      => simpify 2 + 3 to 1           => 1 + 1 + 4\\n    //      => 1 + 1 is doing nothing       => 4\\n    if (n == 3 && m > 2) return 8;\\n    \\n    // for n > 3, m > 2 it is same as n = 3\\n    if (n > 3 && m > 2) return 8;\\n    \\n    // we can simplify the above findings to the follows but I would keep it to teach the future me\\n    if (n == 0 || m == 0) return 1;\\n    else if (n == 1) return 2;\\n    else if (n == 2 && m == 1) return 3;\\n    else if (m == 1) return 4;\\n    else if (m == 2) return 7;\\n    else return 8;\\n    \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nfunction flipLights(n: number, m: number): number {\\n\\n    // Some observations:\\n    // Combination of 1 - 4 operations\\n    \\n    // Flip all and Flip even numbers = Flip odd numbers\\n    // Flip all and Flip odd numbers = Flip even numbers\\n    // Flip odd ande even numbers = Flip all\\n    // if n < 3, Flip 3k + 1 numbers = Flip odd numbers\\n    \\n    // => 1 + 2 = 3\\n    // => 1 + 3 = 2\\n    // => 2 + 3 = 1\\n    // => n < 3, 4 = 2\\n    \\n    // n = 0 or m = 0, only 1 state (initial state)\\n    if (n == 0 || m == 0) return 1;\\n    \\n    // n = 1, only 2 state\\n    if (n == 1) return 2;\\n    \\n    // n = 2, m = 1\\n    // we cound have 4 operations:\\n    // flip all => 00\\n    // flip odd => 01\\n    // flip even => 10\\n    // flip 3k + 1 => 01\\n    // 2 and 4 are the same, so we have 3 states\\n    if (n == 2 && m == 1) return 3\\n    \\n    // n = 2, m = 2\\n    // possible operations:\\n    // 1 + 1 => nothing change,     11 -> 00 -> 11\\n    // 1 + 2 => 3, flip odd,        11 -> 00 -> 01\\n    // 1 + 3 => 2, flip even,       11 -> 00 -> 10\\n    // 1 + 4 => 2, flip even,       11 -> 00 -> 10\\n    // 2 + 3 => 1, flip all,        11 -> 10 -> 00\\n    // 2 + 4 => 1, flip all,        11 -> 10 -> 00\\n    // 3 + 4 => nothing change,     11 -> 01 -> 11\\n    // added one more state on top of m = 1, so m = 2, 4 states\\n\\n    // based on the above, we can conclude that:\\n    // 1 + 2 = 3\\n    // 1 + 3 = 2\\n    // 2 + 3 = 1\\n    \\n    // n = 2, m > 2\\n    // 1 + 2 + 1 = 3 + 1, flip odd\\n    // 1 + 3 + 1 = 2 + 1, flip even\\n    // not gonna list all of them, but you got the idea:\\n    \\n    // for m >= 2, the possible states are 4\\n    if (n == 2 && m >= 2) return 4;\\n    \\n    // Say, n = 3, m = 1\\n    // flip all     =>      111 -> 000\\n    // flip odd     =>      111 -> 010\\n    // flip even    =>      111 -> 101\\n    // flip 3k + 1  =>      111 -> 011\\n    // could have 4 states, this is a general rule for all n > 2\\n    if (n > 2 && m == 1) return 4;\\n    \\n    // Say, n = 3, m = 2\\n    // 1 + 1                        111 -> 000 -> 111\\n    // 1 + 2 = 3, flip odd,         111 -> 000 -> 010\\n    // 1 + 3 = 2, flip even,        111 -> 000 -> 101\\n    // 1 + 4,                       111 -> 000 -> 100\\n    // 2 + 3 = 1, flip all,         111 -> 101 -> 000\\n    // 2 + 4                        111 -> 101 -> 001\\n    // 3 + 4                        111 -> 010 -> 110\\n    // could have 7 states, this is a general rule for all n > 2 and m = 2\\n    if (n > 2 && m == 2) return 7;\\n    \\n    // n = 3, m > 2\\n    // 1 + 2 + 4 = 3 + 4            111 -> 000 -> 010 -> 110\\n    // 1 + 3 + 4 = 2 + 4            111 -> 000 -> 101 -> 001\\n    // 1 + 4 + 1 = 4                111 -> 000 -> 100 -> 011\\n    // 2 + 4 + 1 = 3 + 4            111 -> 101 -> 001 -> 110\\n    // 3 + 4 + 1 = 2 + 4            111 -> 010 -> 110 -> 001\\n    // added one new possible state on top of m = 1, we got 8 states here\\n    // not gonna list all, but you got the idea:\\n    // for m > 2, we could simpify it to the base case m = 2\\n    // e.g. 1 + 4 + 2 + 3 \\n    //      => simpify 2 + 3 to 1           => 1 + 1 + 4\\n    //      => 1 + 1 is doing nothing       => 4\\n    if (n == 3 && m > 2) return 8;\\n    \\n    // for n > 3, m > 2 it is same as n = 3\\n    if (n > 3 && m > 2) return 8;\\n    \\n    // we can simplify the above findings to the follows but I would keep it to teach the future me\\n    if (n == 0 || m == 0) return 1;\\n    else if (n == 1) return 2;\\n    else if (n == 2 && m == 1) return 3;\\n    else if (m == 1) return 4;\\n    else if (m == 2) return 7;\\n    else return 8;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 699368,
                "title": "python3-bit-manipulate-first-3-bits-bulb-switcher-ii",
                "content": "I am too lazy to calculate the result manually and I don\\'t want to copy others answer. So I let computer do it for me.\\nInspired by https://leetcode.com/problems/bulb-switcher-ii/discuss/107274/2-Line-Python-Recursive-With-Explanation\\n```\\nclass Solution:\\n    # Operations: O(flip odds), E(flip evens), A(flip all), T(flip 3k + 1), N(flip nothing)\\n    states = {\\n        \\'N\\': 0b000,\\n        \\'A\\': 0b111,\\n        \\'O\\': 0b101,\\n        \\'E\\': 0b010,\\n        \\'T\\': 0b001,\\n        \\'AT\\': 0b111 ^ 0b001,\\n        \\'OT\\': 0b101 ^ 0b001,\\n        \\'ET\\': 0b010 ^ 0b001,\\n    }\\n    steps = {\\n        0: [\\'N\\'],\\n        1: [\\'A\\', \\'O\\', \\'E\\', \\'T\\'],\\n        2: [\\'N\\', \\'A\\', \\'O\\', \\'E\\', \\'AT\\', \\'OT\\', \\'ET\\'],\\n        3: states.keys(),\\n    }\\n    def flipLights(self, n: int, m: int) -> int:\\n        n, m = min(n, 3), min(m, 3)\\n        mask = (1 << n) - 1\\n        ans = set()\\n        for s in self.steps[m]:\\n            ans.add((0b111 ^ self.states[s]) & mask)\\n        return len(ans) \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    # Operations: O(flip odds), E(flip evens), A(flip all), T(flip 3k + 1), N(flip nothing)\\n    states = {\\n        \\'N\\': 0b000,\\n        \\'A\\': 0b111,\\n        \\'O\\': 0b101,\\n        \\'E\\': 0b010,\\n        \\'T\\': 0b001,\\n        \\'AT\\': 0b111 ^ 0b001,\\n        \\'OT\\': 0b101 ^ 0b001,\\n        \\'ET\\': 0b010 ^ 0b001,\\n    }\\n    steps = {\\n        0: [\\'N\\'],\\n        1: [\\'A\\', \\'O\\', \\'E\\', \\'T\\'],\\n        2: [\\'N\\', \\'A\\', \\'O\\', \\'E\\', \\'AT\\', \\'OT\\', \\'ET\\'],\\n        3: states.keys(),\\n    }\\n    def flipLights(self, n: int, m: int) -> int:\\n        n, m = min(n, 3), min(m, 3)\\n        mask = (1 << n) - 1\\n        ans = set()\\n        for s in self.steps[m]:\\n            ans.add((0b111 ^ self.states[s]) & mask)\\n        return len(ans) \\n```",
                "codeTag": "Java"
            },
            {
                "id": 663670,
                "title": "java-sol",
                "content": "Idea: only look at the first 3 balls, once we know the state of the first 3, we can know the rest\\n```\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if(m==0)return 1;\\n        if(m==1){\\n            if(n==1)return 2;\\n            if(n==2)return 3;\\n            return 4;\\n        }\\n        if(m==2){\\n            if(n==1)return 2;\\n            if(n==2)return 4;\\n            return 7;\\n        }\\n        if(m>=3){\\n            if(n==1)return 2;\\n            if(n==2)return 4;\\n            return 8;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if(m==0)return 1;\\n        if(m==1){\\n            if(n==1)return 2;\\n            if(n==2)return 3;\\n            return 4;\\n        }\\n        if(m==2){\\n            if(n==1)return 2;\\n            if(n==2)return 4;\\n            return 7;\\n        }\\n        if(m>=3){\\n            if(n==1)return 2;\\n            if(n==2)return 4;\\n            return 8;\\n        }\\n        return 0;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3774929,
                "title": "dfs-memoization-bit-manipulation-java",
                "content": "# Code\\n```\\nclass Solution {\\n    private final Map<List<Integer>, Set<Integer>> memo = new HashMap<>();\\n    public int flipLights(int n, int presses) {\\n        int initialState = ((int) Math.pow(2, n)) - 1;\\n        List<Function<Integer, Integer>> buttons = initOperations(n);\\n        Set<Integer> states = new HashSet<>();\\n        dfs(initialState, presses, buttons, states);\\n        return states.size();\\n    }\\n\\n    private Set<Integer> dfs(int state, int presses, List<Function<Integer, Integer>> buttons, Set<Integer> states) {\\n        List<Integer> key = List.of(state, presses);\\n        if(memo.containsKey(key)) return memo.get(key);\\n        if(presses == 0) {\\n            states.add(state);\\n            memo.put(key, states);\\n            return states;\\n        }\\n        Set<Integer> uniqueStates = new HashSet<>();\\n        Set<Integer> newStates = new HashSet<>(states);\\n        for (Function<Integer, Integer> button: buttons) uniqueStates.add(button.apply(state));\\n        for(Integer newState: uniqueStates) newStates.addAll(dfs(newState, presses - 1, buttons, states));\\n        memo.put(key, newStates);\\n        return newStates;\\n    }\\n\\n    private List<Function<Integer, Integer>> initOperations(int n) {\\n        List<Function<Integer, Integer>> buttons = new ArrayList<>();\\n        int mask = (1 << n) - 1;\\n        buttons.add(i-> flipBits(i, mask));\\n        buttons.add(i-> flipOddBits(i, mask));\\n        buttons.add(i-> flipEvenBits(i, mask));\\n        buttons.add(i-> flipLabeledBits(i, mask));\\n        return buttons;\\n    }\\n\\n    private int flipBits(int state, int mask) { return (~state) & mask; }\\n\\n    private int flipOddBits(int state, int mask) { return (state ^ 0x55555555) & mask; }\\n\\n    private int flipEvenBits(int state, int mask) { return (state ^ 0xAAAAAAA) & mask; }\\n\\n    private int flipLabeledBits(int state, int mask) { return (state ^ 0x1249249) & mask; }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n    private final Map<List<Integer>, Set<Integer>> memo = new HashMap<>();\\n    public int flipLights(int n, int presses) {\\n        int initialState = ((int) Math.pow(2, n)) - 1;\\n        List<Function<Integer, Integer>> buttons = initOperations(n);\\n        Set<Integer> states = new HashSet<>();\\n        dfs(initialState, presses, buttons, states);\\n        return states.size();\\n    }\\n\\n    private Set<Integer> dfs(int state, int presses, List<Function<Integer, Integer>> buttons, Set<Integer> states) {\\n        List<Integer> key = List.of(state, presses);\\n        if(memo.containsKey(key)) return memo.get(key);\\n        if(presses == 0) {\\n            states.add(state);\\n            memo.put(key, states);\\n            return states;\\n        }\\n        Set<Integer> uniqueStates = new HashSet<>();\\n        Set<Integer> newStates = new HashSet<>(states);\\n        for (Function<Integer, Integer> button: buttons) uniqueStates.add(button.apply(state));\\n        for(Integer newState: uniqueStates) newStates.addAll(dfs(newState, presses - 1, buttons, states));\\n        memo.put(key, newStates);\\n        return newStates;\\n    }\\n\\n    private List<Function<Integer, Integer>> initOperations(int n) {\\n        List<Function<Integer, Integer>> buttons = new ArrayList<>();\\n        int mask = (1 << n) - 1;\\n        buttons.add(i-> flipBits(i, mask));\\n        buttons.add(i-> flipOddBits(i, mask));\\n        buttons.add(i-> flipEvenBits(i, mask));\\n        buttons.add(i-> flipLabeledBits(i, mask));\\n        return buttons;\\n    }\\n\\n    private int flipBits(int state, int mask) { return (~state) & mask; }\\n\\n    private int flipOddBits(int state, int mask) { return (state ^ 0x55555555) & mask; }\\n\\n    private int flipEvenBits(int state, int mask) { return (state ^ 0xAAAAAAA) & mask; }\\n\\n    private int flipLabeledBits(int state, int mask) { return (state ^ 0x1249249) & mask; }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3426981,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\n public:\\n  int flipLights(int n, int m) {\\n    n = min(n, 3);\\n    if (m == 0)\\n      return 1;\\n    if (m == 1)\\n      return vector{2, 3, 4}[n - 1];\\n    if (m == 2)\\n      return vector{2, 4, 7}[n - 1];\\n    return pow(2, n);\\n  }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n  def flipLights(self, n: int, m: int) -> int:\\n    n = min(n, 3)\\n\\n    if m == 0:\\n      return 1\\n    if m == 1:\\n      return [2, 3, 4][n - 1]\\n    if m == 2:\\n      return [2, 4, 7][n - 1]\\n\\n    return [2, 4, 8][n - 1]\\n```\\n\\n```Java []\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n        int[] mapForLessThan3 = new int[]{1,3,4};\\n        int[] mapForMoreThan2 = new int[]{1,4,7,8};\\n        if(n<3)\\n            return Math.min(1<<n,mapForLessThan3[Math.min(presses,2)]);            \\n        return mapForMoreThan2[Math.min(presses,3)];\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\n public:\\n  int flipLights(int n, int m) {\\n    n = min(n, 3);\\n    if (m == 0)\\n      return 1;\\n    if (m == 1)\\n      return vector{2, 3, 4}[n - 1];\\n    if (m == 2)\\n      return vector{2, 4, 7}[n - 1];\\n    return pow(2, n);\\n  }\\n};\\n```\n```Python3 []\\nclass Solution:\\n  def flipLights(self, n: int, m: int) -> int:\\n    n = min(n, 3)\\n\\n    if m == 0:\\n      return 1\\n    if m == 1:\\n      return [2, 3, 4][n - 1]\\n    if m == 2:\\n      return [2, 4, 7][n - 1]\\n\\n    return [2, 4, 8][n - 1]\\n```\n```Java []\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n        int[] mapForLessThan3 = new int[]{1,3,4};\\n        int[] mapForMoreThan2 = new int[]{1,4,7,8};\\n        if(n<3)\\n            return Math.min(1<<n,mapForLessThan3[Math.min(presses,2)]);            \\n        return mapForMoreThan2[Math.min(presses,3)];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3052235,
                "title": "python-sol-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMy first thought on how to solve this problem is to first check the base cases where n is 0 or presses is 0, and then to check for the different cases where n is 1, 2, or greater than 2 and presses is 1, 2, or greater than 2. Based on these cases, I can return the appropriate number of unique states that can be achieved by flipping the lights.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nMy approach to solving this problem is to use if-else statements to check for the different cases of n and presses, and then return the appropriate number of unique states based on the cases.\\n\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        if n == 0 or presses == 0:\\n            return 1\\n        if n == 1:\\n            return 2\\n        if n == 2:\\n            if presses == 1:\\n                return 3\\n            else:\\n                return 4\\n        if presses == 1:\\n            return 4\\n        if presses == 2:\\n            return 7\\n        return 8\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        if n == 0 or presses == 0:\\n            return 1\\n        if n == 1:\\n            return 2\\n        if n == 2:\\n            if presses == 1:\\n                return 3\\n            else:\\n                return 4\\n        if presses == 1:\\n            return 4\\n        if presses == 2:\\n            return 7\\n        return 8\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2584778,
                "title": "bulb-switcher-ii-very-easy-java-sol-with-proper-explanation",
                "content": "When any of p and n is 0, return 1\\nWhen p = 1:\\n        n = 1, the light has two states: on or off, so the answer is 2;\\n        n = 2, the light has 3 states: 00, 01, 10, so the answer is 3;\\n        n = 3, the light has 4 states: 000, 101, 010, 011, so the answer is 4;\\n        n = 4, the light has 4 states: 0000, 1010, 0101, 0110, so the answer is 4;\\n        Combining n = 3, n = 4, when n > 3, the answer is both 4.\\n\\nWhen p = 2:\\n        n = 1, the light has two states: on or off, so the answer is 2;\\n        n = 2, the light has 4 states: 11, 01, 10, 00, so the answer is 4;\\n        n = 3, the lamp has 7 states: 111, 101.010, 100, 000, 001, 110, so the answer is 7;\\n        Ditto, when n > 3, the answer is both 7.\\n\\n\\nWhen p = 3:\\n        n = 1, the light has two states: on or off, so the answer is 2;\\n        n = 2, the light has 4 states: 00, 01, 10, 11, so the answer is 4;\\n        n = 3, the light has 8 states: 111, 101.010, 100, 000, 001, 110, 011, so the answer is 8;\\n        Ditto, when n > 3, the answer is both 8.\\n\\nWhen p > 3, the answer should be the same as p = 3.\\n\\n\\n\\n```\\nclass Solution {\\n    public int flipLights(int n, int p) {\\n        if (p == 0){\\n            return 1;\\n        }\\n            if(p==1){\\n                if(n==1){\\n                    return 2;\\n                }\\n                if(n==2){\\n                    return 3;\\n                }\\n                else{\\n                    return 4;\\n                }\\n            }\\n        \\n        if(p==2){\\n                if(n==1){\\n                    return 2;\\n                }\\n                if(n==2){\\n                    return 4;\\n                }\\n                else{\\n                    return 7;\\n                }\\n            }\\n        \\n        else{\\n                if(n==1){\\n                    return 2;\\n                }\\n                if(n==2){\\n                    return 4;\\n                }\\n                else{\\n                    return 8;\\n                }\\n            }       \\n\\n\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int p) {\\n        if (p == 0){\\n            return 1;\\n        }\\n            if(p==1){\\n                if(n==1){\\n                    return 2;\\n                }\\n                if(n==2){\\n                    return 3;\\n                }\\n                else{\\n                    return 4;\\n                }\\n            }\\n        \\n        if(p==2){\\n                if(n==1){\\n                    return 2;\\n                }\\n                if(n==2){\\n                    return 4;\\n                }\\n                else{\\n                    return 7;\\n                }\\n            }\\n        \\n        else{\\n                if(n==1){\\n                    return 2;\\n                }\\n                if(n==2){\\n                    return 4;\\n                }\\n                else{\\n                    return 8;\\n                }\\n            }       \\n\\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2172426,
                "title": "c-simple-approach-understanding-the-states",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int k) {\\n        if(k==0)\\n        return 1;\\n        \\n        if(n==1)\\n        return 2;\\n        if(n==2)\\n        {\\n            if(k==1)\\n            {\\n                return 3;\\n            }\\n            else\\n            {\\n                return 4;\\n            }\\n        }\\n        else\\n        {\\n            if(k==1)\\n            {\\n                return 4;\\n            }\\n            else if(k==2)\\n            {\\n                return 7;\\n            }\\n            else\\n            {\\n                return 8;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int k) {\\n        if(k==0)\\n        return 1;\\n        \\n        if(n==1)\\n        return 2;\\n        if(n==2)\\n        {\\n            if(k==1)\\n            {\\n                return 3;\\n            }\\n            else\\n            {\\n                return 4;\\n            }\\n        }\\n        else\\n        {\\n            if(k==1)\\n            {\\n                return 4;\\n            }\\n            else if(k==2)\\n            {\\n                return 7;\\n            }\\n            else\\n            {\\n                return 8;\\n            }\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1909669,
                "title": "java-brute-force-with-optimization-then-o-1-solution",
                "content": "Here\\'s the matrix for all the possibilities of answers. \\n\\n```plain\\n       1  2  3  4 presses\\n1      2, 2, 2, 2\\n2      3, 4, 4, 4\\n3      4, 7, 8, 8\\n4      4, 7, 8, 8\\nlights\\n\\n* 0 press = 1\\n* for presses more than 4, if presses % 2 == 1 check 3 presses, otherwise 4 presses\\n```\\n\\nThere are countless ways to hard-code this matrix, but it is more important to know where these numbers come from.\\n\\nFirst is the brute-force solution. It takes about 1 second. The code uses a string to represent the lights and then switches the light with 4 buttons. Using a set to remove duplicated patterns.\\n\\n```java\\nint flipLights(int n, int presses) {\\n    Set<String> set = new HashSet<>();\\n    StringBuilder builder = new StringBuilder();\\n    for (int i = 0; i < n; i++) {\\n        builder.append(\\'1\\');\\n    }\\n    set.add(builder.toString());\\n    for (int t = 0; t < presses; t++) {\\n        Set<String> newSet = new HashSet<>();\\n        for (String s : set) {\\n            // button 1\\n            char[] cs = s.toCharArray();\\n            for (int i = 0; i < length; i++) {\\n                cs[i] = (cs[i] == \\'1\\' ? \\'0\\' : \\'1\\');\\n            }\\n            newSet.add(new String(cs));\\n\\n            // button 2\\n            cs = s.toCharArray();\\n            for (int i = 0; i < length; i += 2) {\\n                cs[i] = (cs[i] == \\'1\\' ? \\'0\\' : \\'1\\');\\n            }\\n            newSet.add(new String(cs));\\n\\n            // button 3\\n            cs = s.toCharArray();\\n            for (int i = 1; i < length; i += 2) {\\n                cs[i] = (cs[i] == \\'1\\' ? \\'0\\' : \\'1\\');\\n            }\\n            newSet.add(new String(cs));\\n\\n            // button 4\\n            cs = s.toCharArray();\\n            for (int i = 0; i < length; i += 3) {\\n                cs[i] = (cs[i] == \\'1\\' ? \\'0\\' : \\'1\\');\\n            }\\n            newSet.add(new String(cs));\\n        }\\n        set = newSet;\\n    }\\n    return set.size();\\n}\\n```\\n\\nA quick optimization to reduce the time is to check how many lights we need to care about. There are 4 buttons, each button flips different lights. \\n\\n```plain\\nlight 1 button 1, 3, 4\\nlight 2 button 1, 2\\nlight 3 button 1, 3\\nlight 4 button 1, 2, 4\\nlight 5 button 1, 3\\nlight 6 button 1, 2\\nlight 7 button 1, 3, 4\\n...\\n```\\n\\nWhat we can see here is the first 4 lights have all the combinations of buttons. We can use these 4 lights as the sample to check all the patterns. \\n\\n```java\\nint flipLights(int n, int times) {\\n    n = Math.min(n, 4);\\n\\t// ...\\n}\\n```\\n\\nThis optimization gives me a solution with 55ms. It could be better, because 4 lights can be represented with a byte with 8 bits and you can flip the bit with xor bitwise operation.\\n\\nOn the other hand, there should be some way to reduce the presses as well. \\n\\nIf we think of the status of each light, **its final status depends on the count of operations to the light**. For example, 3 times means off, 4 times means on. If the count is an odd, the light is off, otherwise on.\\n\\nThis theory gives me an idea that **the order of the operations doesn\\'t matter** here since you only need to count the operations.\\n\\nAnother observation is **if the same button is pressed twice, the result doesn\\'t change**. Adding an even number to an odd number is still an odd number.\\n\\nWith these two observations, when considering the final status, the count of pressing each button could be simplified to\\n\\n* button 1: 0 times or once\\n* button 2: 0 times or once\\n* button 3: 0 times or once\\n* button 4: 0 times or once\\n\\nany even number becomes 0, any odd number becomes 1 here. In other words, **presses more than 4 can always be reduced to 4 or less**. \\n\\nThis is a big step but we need to think carefully about the button combinations here.\\n\\n```plain\\npresses\\n1: \\nunique buttons: {1}, {2}, {3}, {4}\\n\\n2: \\npress button x twice: {}\\nunique buttons: {1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}\\n\\n3: \\npress button x twice: {1}, {2}, {3}, {4}\\nunique buttons: {1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}\\n\\n4: \\npress button x 4 times: {}\\npress button x twice: {1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}\\nunique buttons: {1, 2, 3, 4}\\n\\n5: same as 3\\n6: same as 4\\n7: same as 3\\n...\\n```\\n\\nSome people would continue to find the patterns to reduce the combinations, I think it is good enough since we have only 4 cases here.\\n\\nThe code to calculate the patterns. This time I also add bit manipulation to do the flipping.\\n\\n```java\\npublic int flipLights(int n, int presses) {\\n    if (presses == 0) return 1;\\n\\n    int maxPresses = presses;\\n    if (presses > 4) {\\n        maxPresses = (presses % 2 == 1 ? 3 : 4);\\n    }\\n    return countPatterns(Math.min(n, 4), maxPresses);\\n}\\n\\nint countPatterns(int lights, int maxPresses) {\\n    if (maxPresses == 1) {\\n        return countPatterns(lights, Arrays.asList(Collections.singletonList(1), Collections.singletonList(2),\\n                Collections.singletonList(3), Collections.singletonList(4)));\\n    }\\n    if (maxPresses == 2) {\\n        return countPatterns(lights, Arrays.asList(Collections.emptyList(), Arrays.asList(1, 2), Arrays.asList(1, 3),\\n                Arrays.asList(1, 4), Arrays.asList(2, 3), Arrays.asList(2, 4), Arrays.asList(3, 4)));\\n    }\\n    if (maxPresses == 3) {\\n        return countPatterns(lights, Arrays.asList(Collections.singletonList(1), Collections.singletonList(2),\\n                Collections.singletonList(3), Collections.singletonList(4),\\n                Arrays.asList(1, 2, 3), Arrays.asList(1, 2, 4), Arrays.asList(1, 3, 4), Arrays.asList(2, 3, 4)));\\n    }\\n    // 4\\n    return countPatterns(lights, Arrays.asList(Collections.emptyList(), Arrays.asList(1, 2), Arrays.asList(1, 3),\\n            Arrays.asList(1, 4), Arrays.asList(2, 3), Arrays.asList(2, 4), Arrays.asList(3, 4), Arrays.asList(1, 2, 3, 4)));\\n}\\n\\nint countPatterns(int lights, List<List<Integer>> combinations) {\\n    int base = (1 << lights) - 1;\\n    Set<Integer> patterns = new HashSet<>();\\n    for (List<Integer> instructions : combinations) {\\n        patterns.addAll(pressButtons(base, instructions));\\n    }\\n    return patterns.size();\\n}\\n\\nprivate Set<Integer> pressButtons(int base, List<Integer> instructions) {\\n    Set<Integer> prev = new HashSet<>();\\n    prev.add(base);\\n    for (Integer button : instructions) {\\n        Set<Integer> next = new HashSet<>();\\n        for (Integer n : prev) {\\n            if (button == 1) {\\n\\t\\t\\t    // if we have only 3 lights, we need 0b111 here so using base as the mask\\n                next.add(n ^ (base & 0b1111));\\n            } else if (button == 2) {\\n                next.add(n ^ (base & 0b0101));\\n            } else if (button == 3) {\\n                next.add(n ^ (base & 0b1010));\\n            } else { // 4\\n                next.add(n ^ (base & 0b1001));\\n            }\\n        }\\n        prev = next;\\n    }\\n    return prev;\\n}\\n```\\n\\nThis solution only takes 5ms. In principal we don\\'t need to do optimization any more. If you want to use some hard-coded answers, do a simple 4x4 loop to generate the matrix at the first of this post.\\n\\nHope this post helps.",
                "solutionTags": [],
                "code": "```plain\\n       1  2  3  4 presses\\n1      2, 2, 2, 2\\n2      3, 4, 4, 4\\n3      4, 7, 8, 8\\n4      4, 7, 8, 8\\nlights\\n\\n* 0 press = 1\\n* for presses more than 4, if presses % 2 == 1 check 3 presses, otherwise 4 presses\\n```\n```java\\nint flipLights(int n, int presses) {\\n    Set<String> set = new HashSet<>();\\n    StringBuilder builder = new StringBuilder();\\n    for (int i = 0; i < n; i++) {\\n        builder.append(\\'1\\');\\n    }\\n    set.add(builder.toString());\\n    for (int t = 0; t < presses; t++) {\\n        Set<String> newSet = new HashSet<>();\\n        for (String s : set) {\\n            // button 1\\n            char[] cs = s.toCharArray();\\n            for (int i = 0; i < length; i++) {\\n                cs[i] = (cs[i] == \\'1\\' ? \\'0\\' : \\'1\\');\\n            }\\n            newSet.add(new String(cs));\\n\\n            // button 2\\n            cs = s.toCharArray();\\n            for (int i = 0; i < length; i += 2) {\\n                cs[i] = (cs[i] == \\'1\\' ? \\'0\\' : \\'1\\');\\n            }\\n            newSet.add(new String(cs));\\n\\n            // button 3\\n            cs = s.toCharArray();\\n            for (int i = 1; i < length; i += 2) {\\n                cs[i] = (cs[i] == \\'1\\' ? \\'0\\' : \\'1\\');\\n            }\\n            newSet.add(new String(cs));\\n\\n            // button 4\\n            cs = s.toCharArray();\\n            for (int i = 0; i < length; i += 3) {\\n                cs[i] = (cs[i] == \\'1\\' ? \\'0\\' : \\'1\\');\\n            }\\n            newSet.add(new String(cs));\\n        }\\n        set = newSet;\\n    }\\n    return set.size();\\n}\\n```\n```plain\\nlight 1 button 1, 3, 4\\nlight 2 button 1, 2\\nlight 3 button 1, 3\\nlight 4 button 1, 2, 4\\nlight 5 button 1, 3\\nlight 6 button 1, 2\\nlight 7 button 1, 3, 4\\n...\\n```\n```java\\nint flipLights(int n, int times) {\\n    n = Math.min(n, 4);\\n\\t// ...\\n}\\n```\n```plain\\npresses\\n1: \\nunique buttons: {1}, {2}, {3}, {4}\\n\\n2: \\npress button x twice: {}\\nunique buttons: {1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}\\n\\n3: \\npress button x twice: {1}, {2}, {3}, {4}\\nunique buttons: {1, 2, 3}, {1, 2, 4}, {1, 3, 4}, {2, 3, 4}\\n\\n4: \\npress button x 4 times: {}\\npress button x twice: {1, 2}, {1, 3}, {1, 4}, {2, 3}, {2, 4}, {3, 4}\\nunique buttons: {1, 2, 3, 4}\\n\\n5: same as 3\\n6: same as 4\\n7: same as 3\\n...\\n```\n```java\\npublic int flipLights(int n, int presses) {\\n    if (presses == 0) return 1;\\n\\n    int maxPresses = presses;\\n    if (presses > 4) {\\n        maxPresses = (presses % 2 == 1 ? 3 : 4);\\n    }\\n    return countPatterns(Math.min(n, 4), maxPresses);\\n}\\n\\nint countPatterns(int lights, int maxPresses) {\\n    if (maxPresses == 1) {\\n        return countPatterns(lights, Arrays.asList(Collections.singletonList(1), Collections.singletonList(2),\\n                Collections.singletonList(3), Collections.singletonList(4)));\\n    }\\n    if (maxPresses == 2) {\\n        return countPatterns(lights, Arrays.asList(Collections.emptyList(), Arrays.asList(1, 2), Arrays.asList(1, 3),\\n                Arrays.asList(1, 4), Arrays.asList(2, 3), Arrays.asList(2, 4), Arrays.asList(3, 4)));\\n    }\\n    if (maxPresses == 3) {\\n        return countPatterns(lights, Arrays.asList(Collections.singletonList(1), Collections.singletonList(2),\\n                Collections.singletonList(3), Collections.singletonList(4),\\n                Arrays.asList(1, 2, 3), Arrays.asList(1, 2, 4), Arrays.asList(1, 3, 4), Arrays.asList(2, 3, 4)));\\n    }\\n    // 4\\n    return countPatterns(lights, Arrays.asList(Collections.emptyList(), Arrays.asList(1, 2), Arrays.asList(1, 3),\\n            Arrays.asList(1, 4), Arrays.asList(2, 3), Arrays.asList(2, 4), Arrays.asList(3, 4), Arrays.asList(1, 2, 3, 4)));\\n}\\n\\nint countPatterns(int lights, List<List<Integer>> combinations) {\\n    int base = (1 << lights) - 1;\\n    Set<Integer> patterns = new HashSet<>();\\n    for (List<Integer> instructions : combinations) {\\n        patterns.addAll(pressButtons(base, instructions));\\n    }\\n    return patterns.size();\\n}\\n\\nprivate Set<Integer> pressButtons(int base, List<Integer> instructions) {\\n    Set<Integer> prev = new HashSet<>();\\n    prev.add(base);\\n    for (Integer button : instructions) {\\n        Set<Integer> next = new HashSet<>();\\n        for (Integer n : prev) {\\n            if (button == 1) {\\n\\t\\t\\t    // if we have only 3 lights, we need 0b111 here so using base as the mask\\n                next.add(n ^ (base & 0b1111));\\n            } else if (button == 2) {\\n                next.add(n ^ (base & 0b0101));\\n            } else if (button == 3) {\\n                next.add(n ^ (base & 0b1010));\\n            } else { // 4\\n                next.add(n ^ (base & 0b1001));\\n            }\\n        }\\n        prev = next;\\n    }\\n    return prev;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1554733,
                "title": "c-bfs-based-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    string rec( string temp , int k ){\\n        \\n        for( int i = 0 ; k == 1 && i < temp.length() ; i++ ){\\n            if( temp[i] ){ temp[i] = 0; }\\n            else{ temp[i] = 1;}\\n        }\\n        \\n        for( int i = 0 ; k == 2 && i < temp.length(); i += 2 ){\\n            if( temp[i] ){ temp[i] = 0; }\\n            else{ temp[i] = 1 ; }\\n        }\\n\\n        for( int i = 1 ; k == 3 && i < temp.length() ; i += 2 ){\\n            if( temp[i] ){ temp[i] = 0; }\\n            else{ temp[i] = 1 ; }\\n        }\\n\\n        for( int i =0 ; k == 4 && 3*i < temp.length() ; i++ ){\\n            if( temp[3*i] ){ temp[3*i] = 0; }\\n            else{ temp[3*i] = 1 ; }\\n        }\\n \\n        return temp;\\n    }\\n    \\n    int flipLights(int n, int presses) {\\n        string r(n,1);\\n        unordered_map<string,int> umap;\\n        queue<string> q;\\n        q.push(r);\\n        int depth = 0;\\n        int prev_size = 0;\\n        while( depth < presses  ){\\n            int size = q.size();\\n            umap.clear();\\n            while( size-- ){\\n                string s = q.front(); q.pop();\\n                for( int k = 1 ; k <= 4 ; k++ ){\\n                    string a = rec(s , k );\\n                    umap[a] = 1;\\n                    q.push(a);\\n                }\\n            }\\n            if( umap.size() == prev_size ){\\n                break;\\n            }\\n            prev_size = umap.size();\\n            \\n            depth++;\\n               \\n        }\\n        \\n        \\n        \\n        return umap.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    string rec( string temp , int k ){\\n        \\n        for( int i = 0 ; k == 1 && i < temp.length() ; i++ ){\\n            if( temp[i] ){ temp[i] = 0; }\\n            else{ temp[i] = 1;}\\n        }\\n        \\n        for( int i = 0 ; k == 2 && i < temp.length(); i += 2 ){\\n            if( temp[i] ){ temp[i] = 0; }\\n            else{ temp[i] = 1 ; }\\n        }\\n\\n        for( int i = 1 ; k == 3 && i < temp.length() ; i += 2 ){\\n            if( temp[i] ){ temp[i] = 0; }\\n            else{ temp[i] = 1 ; }\\n        }\\n\\n        for( int i =0 ; k == 4 && 3*i < temp.length() ; i++ ){\\n            if( temp[3*i] ){ temp[3*i] = 0; }\\n            else{ temp[3*i] = 1 ; }\\n        }\\n \\n        return temp;\\n    }\\n    \\n    int flipLights(int n, int presses) {\\n        string r(n,1);\\n        unordered_map<string,int> umap;\\n        queue<string> q;\\n        q.push(r);\\n        int depth = 0;\\n        int prev_size = 0;\\n        while( depth < presses  ){\\n            int size = q.size();\\n            umap.clear();\\n            while( size-- ){\\n                string s = q.front(); q.pop();\\n                for( int k = 1 ; k <= 4 ; k++ ){\\n                    string a = rec(s , k );\\n                    umap[a] = 1;\\n                    q.push(a);\\n                }\\n            }\\n            if( umap.size() == prev_size ){\\n                break;\\n            }\\n            prev_size = umap.size();\\n            \\n            depth++;\\n               \\n        }\\n        \\n        \\n        \\n        return umap.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1535818,
                "title": "python-3-math-o-1",
                "content": "- There are total 8 different status maximum\\n- Give some test case and play around, you will find the pattern for smaller inputs\\n```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        if not presses: \\n            return 1\\n        elif n < 3:\\n            if n == 1: \\n                return 2\\n            elif presses >= 2:\\n                return 4\\n            else:\\n                return 3\\n        else:\\n            if presses >= 3: \\n                return 8\\n            elif presses == 2:\\n                return 7\\n            else:\\n                return 4\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        if not presses: \\n            return 1\\n        elif n < 3:\\n            if n == 1: \\n                return 2\\n            elif presses >= 2:\\n                return 4\\n            else:\\n                return 3\\n        else:\\n            if presses >= 3: \\n                return 8\\n            elif presses == 2:\\n                return 7\\n            else:\\n                return 4\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1420284,
                "title": "c-faster-than-100-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int p) {\\n        if(p==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2) return p==1?3:4;\\n        else return p==1?4:p==2?7:8;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int p) {\\n        if(p==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2) return p==1?3:4;\\n        else return p==1?4:p==2?7:8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1069221,
                "title": "hard-coded-python-with-picture",
                "content": "![image](https://assets.leetcode.com/users/images/c0886d27-c976-40a0-b01d-d5769caec17c_1613532414.2023501.png)\\n\\n```\\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        if m == 0:\\n            return 1\\n        elif n == 1:\\n            return 2\\n        elif n == 2:\\n            return 3 if m<2 else 4\\n        \\n        else:\\n            if m==1:\\n                return 4\\n            if m==2:\\n                return 7\\n            else:\\n                return 8\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        if m == 0:\\n            return 1\\n        elif n == 1:\\n            return 2\\n        elif n == 2:\\n            return 3 if m<2 else 4\\n        \\n        else:\\n            if m==1:\\n                return 4\\n            if m==2:\\n                return 7\\n            else:\\n                return 8\\n```",
                "codeTag": "Java"
            },
            {
                "id": 828794,
                "title": "golang-o-1-0ms-solution-with-explanation",
                "content": "```go\\nfunc flipLights(n int, m int) int {\\n    // state1: all on\\n    // state2: all off\\n    // state3: even on odd off\\n    // state4: even off odd on\\n    // state5: 3k + 1 on others off\\n    // state6: 3k + 1 off others on\\n    // state7: even on odd off and press button4 once\\n    // state8: even off odd on and press button4 once\\n    if m == 0 || n == 0 {\\n        return 1\\n    }\\n    switch n {\\n    case 1:\\n        // only two status on or off\\n        return 2\\n    case 2:\\n        // button3 & button4 are the same\\n        if m == 1 {\\n            // state 2,3,4\\n            return 3\\n        }\\n        // state 1,2,3,4\\n        return 4\\n    }\\n    // n \\u2265 3 here\\n    switch m {\\n    case 1:\\n        // state 2,3,4,6\\n        return 4\\n    case 2:\\n        // state 1,2,3,4,5,7,8\\n        return 7\\n    }\\n    return 8\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```go\\nfunc flipLights(n int, m int) int {\\n    // state1: all on\\n    // state2: all off\\n    // state3: even on odd off\\n    // state4: even off odd on\\n    // state5: 3k + 1 on others off\\n    // state6: 3k + 1 off others on\\n    // state7: even on odd off and press button4 once\\n    // state8: even off odd on and press button4 once\\n    if m == 0 || n == 0 {\\n        return 1\\n    }\\n    switch n {\\n    case 1:\\n        // only two status on or off\\n        return 2\\n    case 2:\\n        // button3 & button4 are the same\\n        if m == 1 {\\n            // state 2,3,4\\n            return 3\\n        }\\n        // state 1,2,3,4\\n        return 4\\n    }\\n    // n \\u2265 3 here\\n    switch m {\\n    case 1:\\n        // state 2,3,4,6\\n        return 4\\n    case 2:\\n        // state 1,2,3,4,5,7,8\\n        return 7\\n    }\\n    return 8\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 812466,
                "title": "solution-without-enumerating-each-case-generalized-for-this-kind-of-question",
                "content": "At the first glance, the question seems to be quite trivial since for n larger than some number, the answer will be fixed.\\n\\nBut since the question is about dividing something into several groups and do operation for some of these groups. We can generalize it into XOR operation to a initial number.\\n\\nThe detail is:\\n1. We group these bulbs into four groups which can only be changed by operation 2 or 3, or 2,4 or 3,4.\\n2. For each group, we define the initial state as 1 and store it in a set, so the initial state is \\'1111\\' which is 15\\n3. For each operation, we changes state by XOR the current state with a number corresponding to that operation. For example, the operation 2 which flip the even number bulbs can be expressed as \\'1010\\' which means to change the group1 and group3.\\n4. Get all possibilities of the next step and save it as current state.\\n\\n```python\\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        if n==0:\\n            return 0\\n        \\n        ops = [15, 10, 5, 3]\\n        status = set([15])\\n        count = 0\\n        while count<m and len(status)<16:\\n            nstatus = set()\\n            for s in status:\\n                for op in ops:\\n                    nstatus.add(s^op)\\n            status = nstatus\\n            count+=1\\n        \\n\\t\\t# focus on the last n bits of the current status\\n        status = set([bin(s)[2:].rjust(4,\\'0\\')[-n:] for s in status])\\n        \\n        return len(status)\\n```\\n",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        if n==0:\\n            return 0\\n        \\n        ops = [15, 10, 5, 3]\\n        status = set([15])\\n        count = 0\\n        while count<m and len(status)<16:\\n            nstatus = set()\\n            for s in status:\\n                for op in ops:\\n                    nstatus.add(s^op)\\n            status = nstatus\\n            count+=1\\n        \\n\\t\\t# focus on the last n bits of the current status\\n        status = set([bin(s)[2:].rjust(4,\\'0\\')[-n:] for s in status])\\n        \\n        return len(status)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 774709,
                "title": "c-with-comments-on-each-base-case",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if ((m == 0) || (n == 0)) {\\n            return 1;\\n        }\\n        if (n == 1) {\\n            return 2; // even => noop\\n        }\\n        if (m == 1) {\\n            // n = 2\\n            // |-> 01, 10, 11\\n            // n > 2\\n            // |-> 101, 010, 111, 100\\n            return 3 + (n >= 3);\\n        }\\n        if (n == 2) {\\n            // 10  odd or 3k+1\\n            // 01  even\\n            // 11  full or (even + odd)\\n            // 00  two identical ops\\n            return 3 + (m >= 2);\\n        }\\n        // n >= 3, m >= 2\\n        // |-> 010, 101, 111 \\n        // |-> 000 (two identical ops)\\n        // |-> 110, 011 (combined with 3k+1)\\n        // 100 cannot be done with 2 ops\\n        return 7 + (m >= 3);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if ((m == 0) || (n == 0)) {\\n            return 1;\\n        }\\n        if (n == 1) {\\n            return 2; // even => noop\\n        }\\n        if (m == 1) {\\n            // n = 2\\n            // |-> 01, 10, 11\\n            // n > 2\\n            // |-> 101, 010, 111, 100\\n            return 3 + (n >= 3);\\n        }\\n        if (n == 2) {\\n            // 10  odd or 3k+1\\n            // 01  even\\n            // 11  full or (even + odd)\\n            // 00  two identical ops\\n            return 3 + (m >= 2);\\n        }\\n        // n >= 3, m >= 2\\n        // |-> 010, 101, 111 \\n        // |-> 000 (two identical ops)\\n        // |-> 110, 011 (combined with 3k+1)\\n        // 100 cannot be done with 2 ops\\n        return 7 + (m >= 3);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 491184,
                "title": "python3-find-regular-parttern",
                "content": "```\\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        n = min(n, 3)\\n        return min(1<<n, 1+m*n)\\n        # Test cases one by one, u can find the regular pattern\\n        # n > 2, m = 1, res = 4; m = 2, res => 7; m >= 3 res = 8.\\n        # n = 2, m = 1, res = 3; m >= 2, res = 4.\\n        # n = 1, m >= 1, re = 2.\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        n = min(n, 3)\\n        return min(1<<n, 1+m*n)\\n        # Test cases one by one, u can find the regular pattern\\n        # n > 2, m = 1, res = 4; m = 2, res => 7; m >= 3 res = 8.\\n        # n = 2, m = 1, res = 3; m >= 2, res = 4.\\n        # n = 1, m >= 1, re = 2.\\n```",
                "codeTag": "Java"
            },
            {
                "id": 480133,
                "title": "c-simple-solution",
                "content": "```\\nclass Solution {\\n public:\\n  int flipLights(int n, int m) {\\n    if (n == 0) return 0;\\n    if (n >= 1 && m == 0) return 1;\\n    if (n == 1)\\n      return 2;\\n    else if (n == 2 && m == 1)\\n      return 3;\\n    else if (n == 2 && m > 1)\\n      return 4;\\n    else if (n >= 3 && m == 1)\\n      return 4;\\n    else if (n >= 3 && m == 2)\\n      return 7;\\n    else\\n      return 8;\\n  }\\n};\\n```\\n### The idea is :\\n* Every even Flips will cancel each other out\\n* Every Flips 1 = Flips 2 + Flips 3\\n* When n < 3  Flips 3 = Flips 4  \\n### So there are only 8 condition:\\n* even Flips 4\\n* even Flips 4 + Flips 1\\n* even Flips 4 + Flips 2\\n* even Flips 4 + Flips 3\\n* odd Flips 4\\n* odd Flips 4 + Flips 1\\n* odd Flips 4 + Flips 2\\n* odd Flips 4 + Flips 3\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n public:\\n  int flipLights(int n, int m) {\\n    if (n == 0) return 0;\\n    if (n >= 1 && m == 0) return 1;\\n    if (n == 1)\\n      return 2;\\n    else if (n == 2 && m == 1)\\n      return 3;\\n    else if (n == 2 && m > 1)\\n      return 4;\\n    else if (n >= 3 && m == 1)\\n      return 4;\\n    else if (n >= 3 && m == 2)\\n      return 7;\\n    else\\n      return 8;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 195396,
                "title": "c-o-1-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {        \\n        static const int t[4][4] = {\\n            {},\\n            {1, 2, 2, 2},\\n            {1, 3, 4, 4},\\n            {1, 4, 7, 8}\\n        };\\n        \\n        m = min(3, m);\\n        n = min(3, n);\\n        \\n        return t[n][m];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {        \\n        static const int t[4][4] = {\\n            {},\\n            {1, 2, 2, 2},\\n            {1, 3, 4, 4},\\n            {1, 4, 7, 8}\\n        };\\n        \\n        m = min(3, m);\\n        n = min(3, n);\\n        \\n        return t[n][m];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 165143,
                "title": "c-bit-manipulation-solution-with-comments-somewhat-complex",
                "content": "```\\n    int flipLights(int n, int m) {\\n        \\n        // The bulb operations will always end up the same for each group of 4 bulbs\\n        // Therefore, we have a max of 2^4 possible states or less for smaller n\\n        \\n        int states;\\n        if (n > 3)\\n            states = pow(2, 4);\\n        else\\n            states = pow(2, n);\\n        \\n        // There are 4 possible flips, 15 = 1111, 10 = 1010, 5 = 0101, 1 = 0001\\n        int flips[4] = {15, 10, 5, 1};\\n        \\n        // Initially we have only one state possible out of 16 (for n > 3): 1000000000000000\\n        int lastStates = (1 << (states - 1)), newStates = 0;\\n        \\n        // Iterate through all bulb operations (I think this can be reduced so it doesn\\'t have to go to m)\\n        for (int i = 0; i != m; ++i, lastStates = newStates, newStates = 0)\\n            for (int j = 0; j != states; ++j)\\n                if ((lastStates & (1 << j)) == (1 << j))            // if state j was a possibility in the last iteration\\n                    for (int k = 0; k != 4; ++k)                    // perform each bulb operation and flag that the state is now possible\\n                        newStates  |= (1 << ((states - 1) & (j ^ flips[k])));\\n        \\n        // count up our bits/states\\n        int count = 0;\\n        for (int i = 0; i != states; count += (lastStates & (1 << i)) == (1 << i), ++i);\\n        \\n        return count;\\n    }",
                "solutionTags": [],
                "code": "```\\n    int flipLights(int n, int m) {\\n        \\n        // The bulb operations will always end up the same for each group of 4 bulbs\\n        // Therefore, we have a max of 2^4 possible states or less for smaller n\\n        \\n        int states;\\n        if (n > 3)\\n            states = pow(2, 4);\\n        else\\n            states = pow(2, n);\\n        \\n        // There are 4 possible flips, 15 = 1111, 10 = 1010, 5 = 0101, 1 = 0001\\n        int flips[4] = {15, 10, 5, 1};\\n        \\n        // Initially we have only one state possible out of 16 (for n > 3): 1000000000000000\\n        int lastStates = (1 << (states - 1)), newStates = 0;\\n        \\n        // Iterate through all bulb operations (I think this can be reduced so it doesn\\'t have to go to m)\\n        for (int i = 0; i != m; ++i, lastStates = newStates, newStates = 0)\\n            for (int j = 0; j != states; ++j)\\n                if ((lastStates & (1 << j)) == (1 << j))            // if state j was a possibility in the last iteration\\n                    for (int k = 0; k != 4; ++k)                    // perform each bulb operation and flag that the state is now possible\\n                        newStates  |= (1 << ((states - 1) & (j ^ flips[k])));\\n        \\n        // count up our bits/states\\n        int count = 0;\\n        for (int i = 0; i != states; count += (lastStates & (1 << i)) == (1 << i), ++i);\\n        \\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 157343,
                "title": "explained-literally-just-a-bunch-of-if-statements-because-math",
                "content": "So you start with the state 11111.... (n number of 1\\'s), m = 0\\nThen, there\\'s 4 possible states when m = 1\\n* 00000\\n* 10101\\n* 01010\\n* 01101\\n\\nAnd then, when m = 2, there\\'s 7 states:\\n* 11111\\n* 00000\\n* 10101\\n* 01010\\n* 10010\\n* 00111\\n* 11000\\n\\nAnd then you have 8 total states for the next one, and that wraps up all the states. (There can only be 8, because the sequence repeats itself every 3 numbers)\\n\\nThere you have it, ladies and gentleman.\\n\\n\\n```\\nclass Solution:\\n    def flipLights(self, n, m):\\n        \"\"\"\\n        :type n: int\\n        :type m: int\\n        :rtype: int\\n        \"\"\"\\n        if n == 0:\\n            return 1\\n        if m == 0:\\n            return 1\\n        if n == 1:\\n            return 2\\n        if n == 2 and m == 1:\\n            return 3\\n        if n == 2 and m > 1:\\n            return 4\\n        if m == 1:\\n            return 4\\n        if m == 2:\\n            return 7\\n        return 8\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n, m):\\n        \"\"\"\\n        :type n: int\\n        :type m: int\\n        :rtype: int\\n        \"\"\"\\n        if n == 0:\\n            return 1\\n        if m == 0:\\n            return 1\\n        if n == 1:\\n            return 2\\n        if n == 2 and m == 1:\\n            return 3\\n        if n == 2 and m > 1:\\n            return 4\\n        if m == 1:\\n            return 4\\n        if m == 2:\\n            return 7\\n        return 8\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107266,
                "title": "lazy-generalizable-o-1-python-solution-with-explanation",
                "content": "Operations:\\n\\n\\n1. toggle all\\n2. toggle even\\n3. toggle odd\\n4. toggle 1+3k\\n\\nSince each operation always toggles the same set of lights, each operation cancels itself out when applied twice (or an even number of times). Thus we can consider each operation to be like a state, which can be \"ON\" or \"OFF\".  There are 4 individual \"operation states\", which combined yield an upper bound of 2^4 \"bulb states\" (since \"bulb states\" are a function of the operation states). \\n\\nBut since operation 1 (toggle all) is equivalent to operations 2+3, (odd+even) it is redundant unless constrained by # of operations, there are only 3 unique operations and 2^3 = 8 possible \"operation states\". (We can only reach 4 unique \"bulb states\" using any number of operations 1,2,3, i.e. the bulb states [\"all off\", \"even on\", \"odd on\", \"all on\"]), .\\n\\nSince we can reach any of the 2^3 \"operation states\" in at most 3 operations, we are free to limit `m` to a max of 3, and consider only the arity of values of `m` >3 (since we need *exactly*, not *at least* `m` operations).\\n\\nBut, again since operations 2+3 (even + odd) are equivalent to operation 1 (toggle all), we can also ignore the arity for  `m>3` values, since we can always change arity of `m` by changing operation 1 with 2+3 or viceversa.\\n\\nFinally, for each of the unique combination of the 2^3 \"operation states\", we can find the 8 sets of integers which it affects (i.e. all the integers in this set will have the same value):\\n\\n* : {}\\n* 1: odd integers\\n* 2: even integers\\n* 1+2: all integers\\n* 3: integers n s.t. n%3==1\\n* 3+1 integers n s.t. n%3==1 and n%2==1\\n* 3+2: integers n s.t. n%3==1 and n%2==0\\n* 3+1+2: integers n s.t. n%3!=1\\n\\n\\nSince when n=3, there is at least one integer represented in each of the sets above, we can restrict n to a max 3 (any higher index will be in an equivalence class represented by one of the numbers <=3 regardless of which \"operation states\" are \"ON\").\\n\\nSince we can limit both n and m to a constant, we can do an exhaustive search in constant time to find the number of unique bulb-states:\\n\\n```\\nclass Solution(object):\\n        \\n    def flipLights(self, n, m):\\n        \"\"\"\\n        :type n: int\\n        :type m: int\\n        :rtype: int\\n        \"\"\"\\n        states=set()\\n        n=min(3,n)\\n        m=min(m,3)\\n        def flips(op, i):\\n            return op==0 or\\\\\\n                    (op==1 and i%2==1) or\\\\\\n                    (op==2 and i%2==0) or\\\\\\n                    (op==3 and i%3==0)\\n        \\n        for B in xrange(1<<4):\\n            nflips=sum((B>>i)&1 for i in xrange(1<<4))\\n            if nflips>m or nflips%2 != m%2:\\n                continue\\n            curr=\"\"\\n            for i in xrange(n):\\n                d=sum(flips(op, i) for op in xrange(4) if (B>>op)&1)\\n                curr+=\"01\"[d%2]\\n            states.add(curr)\\n                \\n        return len(states)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n        \\n    def flipLights(self, n, m):\\n        \"\"\"\\n        :type n: int\\n        :type m: int\\n        :rtype: int\\n        \"\"\"\\n        states=set()\\n        n=min(3,n)\\n        m=min(m,3)\\n        def flips(op, i):\\n            return op==0 or\\\\\\n                    (op==1 and i%2==1) or\\\\\\n                    (op==2 and i%2==0) or\\\\\\n                    (op==3 and i%3==0)\\n        \\n        for B in xrange(1<<4):\\n            nflips=sum((B>>i)&1 for i in xrange(1<<4))\\n            if nflips>m or nflips%2 != m%2:\\n                continue\\n            curr=\"\"\\n            for i in xrange(n):\\n                d=sum(flips(op, i) for op in xrange(4) if (B>>op)&1)\\n                curr+=\"01\"[d%2]\\n            states.add(curr)\\n                \\n        return len(states)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107280,
                "title": "intuitive-solution",
                "content": "First of all, this solution is not mine, I got it after studying cuiaoxiang's contest solution.\\n\\nThis solution is based on the observation that any result from m > 4 can also be retrieved from a combination while m <= 4. This is because taking a same action twice is same as not taking it, while taking a same action three times is same as taking it one time, etc.\\nWhile m <= 4, we should get 16 different combinations, and we can use a binary number to help us track whether we are taking operation 1), 2), 3) or 4)\\n\\nIn this solution, we will check each of 16 combinations. In each combination, we firstly check how many operations will be taken. If the count > m, then we will not continue in current loop.  If count <= m, then we also need to check if m%2 == count%2. Why? Please see comments in the code....\\nAfter that, We can construct an array with len(n), because n <= 1000, this should not cause any boundary cases. We will apply each operation when the binary number has a 1 in the corresponding digit..\\nWe use a HashSet to catch all possible results and the size of result set should be our output.\\nIt costs me few hours to understand this solution, and I think it is more intuitive for me.....So here it is.\\n```\\npublic int flipLights(int n, int m) {\\n        HashSet<List<Boolean>> hs = new HashSet<>();\\n        \\n        for(int k = 0; k < 16; k++){\\n            //n bulbs\\n            Boolean[] curr = new Boolean[n];\\n            Arrays.fill(curr, false);\\n            int count = 0;\\n            \\n            for(int i = 0; i < 4; i++){\\n                //check how many methods will be used in this loop\\n                if( (k&(1<<i)) > 0 )  count++;  \\n            }\\n            \\n            //if we are going to pick more than m methods, then we skip current loop\\n            if(count > m) continue;\\n            //count < m will also work, since we can apply a same method multiple times\\n            //so that we need to check if m and count are both even or both odd.\\n            //duplicate operations + count = m\\n            //if count = 2, m = 3, then there is no way that we can use 3 operations to achieve the same effect of two operations\\n            //if count = 1, m = 3, then we can apply a method twice to achieve the same result\\n            //if count = 1, m = 2, then there is no way that we can use 1 operation to achieve the same effect of two operations\\n            //if count = 2 or count = 0, m = 2, we can just apply two methods or a method twice to achieve count = 2 or count = 0\\n            if( count%2 != m%2 ) continue;\\n            \\n            if( (k&1) > 0){\\n                for(int i = 0; i < n; i++) curr[i] = !curr[i]; \\n            }\\n            \\n            if( (k&2) > 0){\\n                for(int i = 0; i < n; i+=2) curr[i] = !curr[i];\\n            }\\n            \\n            if( (k&4) > 0){\\n                for(int i = 1; i < n; i+=2) curr[i] = !curr[i];\\n            }\\n            \\n            if( (k&8) > 0){\\n                //3k+1, k = 0,1,2 => now we are 0 based, so it is 3k, k = 0,1,2\\n                for(int i = 0; i < n; i += 3 ) curr[i] = !curr[i];\\n            }            \\n            List<Boolean> list = Arrays.asList(curr);\\n            hs.add(list);\\n        }\\n        \\n        //System.out.println(hs);\\n        return hs.size();\\n }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int flipLights(int n, int m) {\\n        HashSet<List<Boolean>> hs = new HashSet<>();\\n        \\n        for(int k = 0; k < 16; k++){\\n            //n bulbs\\n            Boolean[] curr = new Boolean[n];\\n            Arrays.fill(curr, false);\\n            int count = 0;\\n            \\n            for(int i = 0; i < 4; i++){\\n                //check how many methods will be used in this loop\\n                if( (k&(1<<i)) > 0 )  count++;  \\n            }\\n            \\n            //if we are going to pick more than m methods, then we skip current loop\\n            if(count > m) continue;\\n            //count < m will also work, since we can apply a same method multiple times\\n            //so that we need to check if m and count are both even or both odd.\\n            //duplicate operations + count = m\\n            //if count = 2, m = 3, then there is no way that we can use 3 operations to achieve the same effect of two operations\\n            //if count = 1, m = 3, then we can apply a method twice to achieve the same result\\n            //if count = 1, m = 2, then there is no way that we can use 1 operation to achieve the same effect of two operations\\n            //if count = 2 or count = 0, m = 2, we can just apply two methods or a method twice to achieve count = 2 or count = 0\\n            if( count%2 != m%2 ) continue;\\n            \\n            if( (k&1) > 0){\\n                for(int i = 0; i < n; i++) curr[i] = !curr[i]; \\n            }\\n            \\n            if( (k&2) > 0){\\n                for(int i = 0; i < n; i+=2) curr[i] = !curr[i];\\n            }\\n            \\n            if( (k&4) > 0){\\n                for(int i = 1; i < n; i+=2) curr[i] = !curr[i];\\n            }\\n            \\n            if( (k&8) > 0){\\n                //3k+1, k = 0,1,2 => now we are 0 based, so it is 3k, k = 0,1,2\\n                for(int i = 0; i < n; i += 3 ) curr[i] = !curr[i];\\n            }            \\n            List<Boolean> list = Arrays.asList(curr);\\n            hs.add(list);\\n        }\\n        \\n        //System.out.println(hs);\\n        return hs.size();\\n }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 107281,
                "title": "a-c-solution-using-bit-manipulation",
                "content": "My solution does not leverage much math insights into the problem, but rather apply bit manipulation to simulate the process to find all states after m steps.\\n\\nNevertheless, I do use some insights to reduce the number of bits used to represent light state from n to 3. This is because the n lights can be grouped into the following 3 groups. As lights within the same group will not have a different on/off state through out the m operations, their share one bit to represent their states.\\n\\n* group 1: whose with odd index representable as 3k+1, use the last bit in a char.\\n\\n\\n* group 2: whose with even index use the second last bit in a char.\\n\\n* group 3: whose with odd index, but not representable as 3k+1, use the third last bit in a char.\\n\\nWhen a button is pressed, it is flipping the state (and the corresponding bit ) of one or more groups:\\n\\n* button 1 flips all 3 groups, we can do XOR 7 on the old state to get the new state.\\n\\n* button 2 flips group 2, do XOR 2 on the old state to get the new state.\\n\\n* button 3 flips group 1 and group 3, do XOR 5\\n\\n* button 4 flips group 1, do XOR 1\\n\\nFor small n such as 1 and 2, there maybe zero lights in some of the 3 groups, and we setup mask to disregard the corresponding bits every time we simulate the flip.\\n\\nThe finally observation is that the number of states cannot be more than 8, so once we get a set of 8 states at some step, we do not need to simulate all the remaining ones.\\n\\nThe code in C++ is in the following:\\n\\n\\n\\n\\n    int flipLights(int n, int m) {\\n        char s0,mask;\\n        const int maxStates = 8;\\n        vector<char> buttons = {1,2,5,7};\\n\\n        switch(n){\\n            case 1:\\n                s0 = mask = 1;\\n                break;\\n            case 2:\\n                s0 = mask = 3;\\n                break;\\n            default:\\n                s0 = mask = 7;\\n        }\\n        \\n        set<char> states;\\n        states.insert(s0);\\n        for (int i = 1; i<=m && states.size() < maxStates; i++){\\n            set <char> newStates;\\n            for (auto s : states)\\n                for (auto b: buttons) \\n                    newStates.insert(s^b&mask);\\n            states = newStates;\\n        }\\n        \\n        return states.size();\\n    }\\n\\nAlthough this approach is slower than the other ones with pure math insights, it is generic and justifies this problem as a valid coding problem.",
                "solutionTags": [],
                "code": "My solution does not leverage much math insights into the problem, but rather apply bit manipulation to simulate the process to find all states after m steps.\\n\\nNevertheless, I do use some insights to reduce the number of bits used to represent light state from n to 3. This is because the n lights can be grouped into the following 3 groups. As lights within the same group will not have a different on/off state through out the m operations, their share one bit to represent their states.\\n\\n* group 1: whose with odd index representable as 3k+1, use the last bit in a char.\\n\\n\\n* group 2: whose with even index use the second last bit in a char.\\n\\n* group 3: whose with odd index, but not representable as 3k+1, use the third last bit in a char.\\n\\nWhen a button is pressed, it is flipping the state (and the corresponding bit ) of one or more groups:\\n\\n* button 1 flips all 3 groups, we can do XOR 7 on the old state to get the new state.\\n\\n* button 2 flips group 2, do XOR 2 on the old state to get the new state.\\n\\n* button 3 flips group 1 and group 3, do XOR 5\\n\\n* button 4 flips group 1, do XOR 1\\n\\nFor small n such as 1 and 2, there maybe zero lights in some of the 3 groups, and we setup mask to disregard the corresponding bits every time we simulate the flip.\\n\\nThe finally observation is that the number of states cannot be more than 8, so once we get a set of 8 states at some step, we do not need to simulate all the remaining ones.\\n\\nThe code in C++ is in the following:\\n\\n\\n\\n\\n    int flipLights(int n, int m) {\\n        char s0,mask;\\n        const int maxStates = 8;\\n        vector<char> buttons = {1,2,5,7};\\n\\n        switch(n){\\n            case 1:\\n                s0 = mask = 1;\\n                break;\\n            case 2:\\n                s0 = mask = 3;\\n                break;\\n            default:\\n                s0 = mask = 7;\\n        }\\n        \\n        set<char> states;\\n        states.insert(s0);\\n        for (int i = 1; i<=m && states.size() < maxStates; i++){\\n            set <char> newStates;\\n            for (auto s : states)\\n                for (auto b: buttons) \\n                    newStates.insert(s^b&mask);\\n            states = newStates;\\n        }\\n        \\n        return states.size();\\n    }\\n\\nAlthough this approach is slower than the other ones with pure math insights, it is generic and justifies this problem as a valid coding problem.",
                "codeTag": "Unknown"
            },
            {
                "id": 107288,
                "title": "python-o-1-with-detailed-analysis",
                "content": "First of all, we can just discuss the case that `n = 1,2,3,4,5,6`, because the lights repeat the pattern of first 6 bulbs. Remarkably, the 5th and 6th bulb is the same as 4th and 3th respectively, so we just need to discuss the case `n = 1,2,3,4`. When `n>4`, it is the same as `n=4`.\\n\\nIf you are familiar with group theory, this question is quite simple. We now have four operations `A` (flip All), `E` (flip Even), `O` (flip Odd), `K` (flip 3k+1). Here we denote identical operation (the operation that changes nothing) with `I`. It's obvious that all operations are commutative, the order in which they are performed does not matter. Additionally, we have some other basic rules here, such as perform the same operation twice is equal to do nothing, and flipping all and then flipping even is equal to just flipping Odd. Formally, these rule can be written as\\n\\n```python\\nAA=EE=OO=KK=I    # two same operation is equal to Identical operation\\nAE=O             # flipping all and even is equal to flipping odd\\nAO=E             # flipping all and odd is equal to flipping even\\nOE=A             # flipping odd and even is equal to flipping all\\n```\\n\\n## When `n=1`\\nIn this trivial case, the answer is always 2.\\n\\n## When `n=2`\\n\\nIn this case, the operation K is equal to operation O, so we actually have three operations `A, O, E`. \\nIf `m=1`, three status by performing `A, O, E`. We can draw a table to count the status. The table below shows where can we reach from the identical operation (the initial status is equal to having performed an identical operation).\\n```\\n___|_A___O___E_\\n I | A   O   E \\n```\\nIf `m=2`, we draw table below. In the case `m=1`, we can reach `A, O, E`, after performing one more operation we can reach `A, O, E, I`, four status.\\n```\\n___|_A___O___E_\\n A | I   E   O \\n O | E   I   A \\n E | O   A   I \\n```\\nif `m=3`, we show go one operation far from `m=2`. Again, we can reach four status `A, O, E, I `.\\n```\\n___|_A___O___E_\\n A | I   E   O \\n O | E   I   A \\n E | O   A   I \\n I | A   O   E\\n```\\nIf `m>3`, the table will be the same as `m=3`.\\n\\n## When `n>=3`\\nNow we have four distinct operations `A, O, E, K `.\\nIf `m=1`, four kinds of status, `A, O, E, K `\\n```\\n___|_A__O__E__K__\\n I | A  O  E  K \\n```\\nif `m=2`, we have 7 kinds of status, `I, A, O, E, AK, EK, OK`. Here, `AK` means perform operation `A` and `K` in order. `EK, OK` is the same.\\n```\\n___|_A___O___E___K_\\n A | I   E   O   AK\\n O | E   I   A   OK\\n E | O   A   I   EK\\n K | AK  OK  EK  I\\n```\\nif `m=3`, we have 8 kinds of status, `A, O, E, K, I, AK, OK, EK`.\\n```\\n___|_A___O___E___K_\\n A | I   E   O   AK\\n O | E   I   A   OK\\n E | O   A   I   EK\\n I | A   O   E   K\\n- - - - - - - - - -  # Add this line to make it more readable\\nAK | K   EK  OK  A\\nOK | EK  K   AK  A\\nEK | OK  AK  K   A\\n```\\nif `m>3`, the table will be above one with an extra row. But this does not introduce new status. So it is still 8 kinds of status.\\n```\\n___|_A___O___E___K_\\n K | AK  OK  EK  I\\n```\\n## Summary\\nThe reuslts forms this table:\\n```\\nn\\\\m_0_1_2_3_...\\n1|  1 2 2 2 ...\\n2|  1 3 4 4 ...\\n3|  1 4 7 8 ...\\n4|  1 4 7 8 ...\\n.|  . . . .\\n.|  . . . .\\n```\\n## Python Code\\n```\\nclass Solution(object):\\n    def flipLights(self, n, m):\\n        \"\"\"\\n        :type n: int\\n        :type m: int\\n        :rtype: int\\n        \"\"\"\\n        if m == 0: \\n            return 1\\n        elif n == 1:\\n            return 2\\n        elif n == 2:\\n            return 3 if m<2 else 4\\n        else:\\n            if m == 1:\\n                return 4\\n            elif m == 2:\\n                return 7\\n            else:\\n                return 8\\n```",
                "solutionTags": [],
                "code": "```python\\nAA=EE=OO=KK=I    # two same operation is equal to Identical operation\\nAE=O             # flipping all and even is equal to flipping odd\\nAO=E             # flipping all and odd is equal to flipping even\\nOE=A             # flipping odd and even is equal to flipping all\\n```\n```\\n___|_A___O___E_\\n I | A   O   E \\n```\n```\\n___|_A___O___E_\\n A | I   E   O \\n O | E   I   A \\n E | O   A   I \\n```\n```\\n___|_A___O___E_\\n A | I   E   O \\n O | E   I   A \\n E | O   A   I \\n I | A   O   E\\n```\n```\\n___|_A__O__E__K__\\n I | A  O  E  K \\n```\n```\\n___|_A___O___E___K_\\n A | I   E   O   AK\\n O | E   I   A   OK\\n E | O   A   I   EK\\n K | AK  OK  EK  I\\n```\n```\\n___|_A___O___E___K_\\n A | I   E   O   AK\\n O | E   I   A   OK\\n E | O   A   I   EK\\n I | A   O   E   K\\n- - - - - - - - - -  # Add this line to make it more readable\\nAK | K   EK  OK  A\\nOK | EK  K   AK  A\\nEK | OK  AK  K   A\\n```\n```\\n___|_A___O___E___K_\\n K | AK  OK  EK  I\\n```\n```\\nn\\\\m_0_1_2_3_...\\n1|  1 2 2 2 ...\\n2|  1 3 4 4 ...\\n3|  1 4 7 8 ...\\n4|  1 4 7 8 ...\\n.|  . . . .\\n.|  . . . .\\n```\n```\\nclass Solution(object):\\n    def flipLights(self, n, m):\\n        \"\"\"\\n        :type n: int\\n        :type m: int\\n        :rtype: int\\n        \"\"\"\\n        if m == 0: \\n            return 1\\n        elif n == 1:\\n            return 2\\n        elif n == 2:\\n            return 3 if m<2 else 4\\n        else:\\n            if m == 1:\\n                return 4\\n            elif m == 2:\\n                return 7\\n            else:\\n                return 8\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4091720,
                "title": "consider-all-cases-o-1",
                "content": "Straightforward to know that what matters is only n % 6.\\nSuppose we have a,b,c,d operations of 1,2,3,4.\\nBulb1 =  (a+b+d) % 2\\nBulb2 =  (a+c) % 2\\nBulb3 =  (a+b) % 2\\nand bulb 4 same as 1, 5 same as 3, 6 same as 2\\n\\nTherefore, what really matters is only the first three bulbs. \\n\\nIf we have only 1 bulb, in on step we have the two states 0 and 1 reachable. And so on, we just return 2.\\n\\nIn the case where we have 2 bulbs, step 1 would lead us to states 11,10,01 but not 00. After step 2 we can get 00 again, and so on we can reach whaterver we want.\\n\\n3 bulb, draw on your paper and easily we see in one step we got 4 states, and 2 steps we have all 8 states but 100, which can be reached after the 3 step. \\n\\nTherefore, just a few ifelses, O(1).\\n\\n# Code\\n```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        n = min(3,n)\\n        state = 0\\n        if presses == 0:\\n            return 1\\n        if n == 1:\\n            return 2\\n        if n == 2:\\n            return 4 if presses > 1 else 3\\n        if n == 3:\\n            if presses > 2:return 8\\n            elif presses == 2: return 7\\n            else: return 4\\n\\n\\n\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        n = min(3,n)\\n        state = 0\\n        if presses == 0:\\n            return 1\\n        if n == 1:\\n            return 2\\n        if n == 2:\\n            return 4 if presses > 1 else 3\\n        if n == 3:\\n            if presses > 2:return 8\\n            elif presses == 2: return 7\\n            else: return 4\\n\\n\\n\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079069,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int flipLights(int n, int presses) {\\n    if (presses == 0) {\\n      return 1;\\n    } else if (presses == 1) {\\n      if (n < 3) {\\n        return n + 1;\\n      } else {\\n        return 4;\\n      }\\n    } else if (presses == 2) {\\n      if (n == 1) {\\n        return 2;\\n      } else if (n == 2) {\\n        return 4;\\n      } else {\\n        return 7;\\n      }\\n    } else if (presses >= 3) {\\n      if (n == 1) {\\n        return 2;\\n      } else if (n == 2) {\\n        return 4;\\n      } else {\\n        return 8;\\n      }\\n    }\\n\\n    return -1;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int flipLights(int n, int presses) {\\n    if (presses == 0) {\\n      return 1;\\n    } else if (presses == 1) {\\n      if (n < 3) {\\n        return n + 1;\\n      } else {\\n        return 4;\\n      }\\n    } else if (presses == 2) {\\n      if (n == 1) {\\n        return 2;\\n      } else if (n == 2) {\\n        return 4;\\n      } else {\\n        return 7;\\n      }\\n    } else if (presses >= 3) {\\n      if (n == 1) {\\n        return 2;\\n      } else if (n == 2) {\\n        return 4;\\n      } else {\\n        return 8;\\n      }\\n    }\\n\\n    return -1;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028188,
                "title": "java-simple-solution-beats-100-00",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n          if(presses==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2&&presses==1) return 3;\\n        if(n==2) return 4;\\n        if(presses==1) return 4;\\n        if(presses==2) return 7;\\n        if(presses>=3) return 8;\\n        return 8;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n          if(presses==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2&&presses==1) return 3;\\n        if(n==2) return 4;\\n        if(presses==1) return 4;\\n        if(presses==2) return 7;\\n        if(presses>=3) return 8;\\n        return 8;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923599,
                "title": "easiest-solution",
                "content": "\\n\\n# Code\\n```java []\\nclass Solution {\\n\\n    public int flipLights(int n, int p) {\\n        n = Math.min(n, 4); \\n        p = Math.min(p, 4);\\n        int thre = (1<<n)-1;\\n\\n        int[] flips = new int[] {\\n            Integer.parseInt(\"1111\", 2)&thre,\\n            Integer.parseInt(\"0101\", 2)&thre,\\n            Integer.parseInt(\"1010\", 2)&thre,\\n            Integer.parseInt(\"1001\", 2)&thre\\n        };\\n\\n        if(p==0) return 1;\\n\\n        int ans = 0;\\n        boolean[] used = new boolean[(1<<10)+1];\\n\\n        Queue<int[]> q = new LinkedList();\\n        q.add(new int[] {0, 0});\\n\\n        while(!q.isEmpty()){\\n            int[] val = q.remove();\\n            int cur = val[0];\\n            int presses = val[1];\\n\\n            if(presses==p) {\\n                if(!used[cur]) ans++;\\n                used[cur] = true;\\n                continue;\\n            }\\n\\n            for(int flip : flips){\\n                q.add(new int[] {flip ^ cur, presses + 1});\\n            }          \\n        }\\n\\n        return ans;\\n    }\\n}\\n```\\n\\n```python3 []\\nuse std::collections::{HashSet, VecDeque};\\n\\nimpl Solution {\\n    fn flip_bit(number: i32, position: u32) -> i32 {\\n        let mask = 1 << position;\\n        let flipped_number = number ^ mask;\\n        flipped_number\\n    }\\n    \\n    fn y_function(x: i32) -> i32 {\\n        3 * x + 1\\n    }\\n    \\n    fn get_neighbors(state: i32, n: i32) -> Vec<i32> {\\n        let mut nbrs: Vec<i32> = vec![];\\n        \\n        let mut curr_num = state;\\n        for i in 1..n {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n            \\n        curr_num = state;\\n        for i in (1..n).step_by(2) {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n            \\n        curr_num = state;\\n        for i in (0..n).step_by(2) {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n        \\n        let mut i = 0;\\n        while Solution::y_function(i) < n {\\n            curr_num = Solution::flip_bit(curr_num, Solution::y_function(i) as u32);\\n            i += 1;\\n        }\\n        nbrs.push(curr_num);\\n        \\n        nbrs\\n    }\\n    \\n    // O(n*press) time,\\n    // O(n*space) space,\\n    // Approach: bfs, bit manipulation\\n    fn flip_lights(n: i32, presses: i32) -> i32 {\\n        let mut answer: HashSet<i32> = HashSet::new();\\n        let mut queue: VecDeque<i32> = VecDeque::new();\\n        queue.push_back((2_i32.pow(n as u32) - 1));\\n        answer.insert(queue[0]);\\n        \\n        let mut presses = presses;\\n        \\n        while presses > 0 && !queue.is_empty() {\\n            presses -= 1;\\n            let queue_len = queue.len();\\n            answer = HashSet::new();\\n            for _ in 0..queue_len {\\n                let state = queue.pop_front().unwrap();\\n                let nbrs = Solution::get_neighbors(state, n);\\n                for nbr in nbrs {\\n                    if answer.contains(&nbr) {\\n                        continue;\\n                    }\\n                    answer.insert(nbr);\\n                    queue.push_back(nbr);\\n                }\\n            }\\n        }\\n\\n        answer.len() as i32\\n    }\\n}\\n```\\n```c++ []\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        vector<bitset<1000>> m(4);\\n\\n        for (int i=1;i<n;i+=2) {\\n            m[1].flip(i);\\n            m[2].flip(i-1);\\n        }\\n        if (n%2==1) m[2].flip(n-1);\\n        m[0]=m[1];\\n        m[0]|=m[2];\\n\\n        \\n        for (int i=0;i<n;i+=3) m[3].flip(i);\\n\\n        //for(auto& a:m) cout << a << endl;\\n\\n        unordered_set<bitset<1000>> q;\\n        q.insert(m[0]);\\n\\n        for (int i=0;i<presses;i++){\\n            unordered_set<bitset<1000>> temp;\\n            for (auto& item:q){\\n                for (int j=0;j<4;j++){\\n                    auto t = bitset<1000>{item};\\n                    t ^= m[j];\\n                    temp.insert(t);\\n                }\\n            }\\n            q = temp;\\n        }\\n        return q.size();\\n\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```java []\\nclass Solution {\\n\\n    public int flipLights(int n, int p) {\\n        n = Math.min(n, 4); \\n        p = Math.min(p, 4);\\n        int thre = (1<<n)-1;\\n\\n        int[] flips = new int[] {\\n            Integer.parseInt(\"1111\", 2)&thre,\\n            Integer.parseInt(\"0101\", 2)&thre,\\n            Integer.parseInt(\"1010\", 2)&thre,\\n            Integer.parseInt(\"1001\", 2)&thre\\n        };\\n\\n        if(p==0) return 1;\\n\\n        int ans = 0;\\n        boolean[] used = new boolean[(1<<10)+1];\\n\\n        Queue<int[]> q = new LinkedList();\\n        q.add(new int[] {0, 0});\\n\\n        while(!q.isEmpty()){\\n            int[] val = q.remove();\\n            int cur = val[0];\\n            int presses = val[1];\\n\\n            if(presses==p) {\\n                if(!used[cur]) ans++;\\n                used[cur] = true;\\n                continue;\\n            }\\n\\n            for(int flip : flips){\\n                q.add(new int[] {flip ^ cur, presses + 1});\\n            }          \\n        }\\n\\n        return ans;\\n    }\\n}\\n```\n```python3 []\\nuse std::collections::{HashSet, VecDeque};\\n\\nimpl Solution {\\n    fn flip_bit(number: i32, position: u32) -> i32 {\\n        let mask = 1 << position;\\n        let flipped_number = number ^ mask;\\n        flipped_number\\n    }\\n    \\n    fn y_function(x: i32) -> i32 {\\n        3 * x + 1\\n    }\\n    \\n    fn get_neighbors(state: i32, n: i32) -> Vec<i32> {\\n        let mut nbrs: Vec<i32> = vec![];\\n        \\n        let mut curr_num = state;\\n        for i in 1..n {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n            \\n        curr_num = state;\\n        for i in (1..n).step_by(2) {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n            \\n        curr_num = state;\\n        for i in (0..n).step_by(2) {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n        \\n        let mut i = 0;\\n        while Solution::y_function(i) < n {\\n            curr_num = Solution::flip_bit(curr_num, Solution::y_function(i) as u32);\\n            i += 1;\\n        }\\n        nbrs.push(curr_num);\\n        \\n        nbrs\\n    }\\n    \\n    // O(n*press) time,\\n    // O(n*space) space,\\n    // Approach: bfs, bit manipulation\\n    fn flip_lights(n: i32, presses: i32) -> i32 {\\n        let mut answer: HashSet<i32> = HashSet::new();\\n        let mut queue: VecDeque<i32> = VecDeque::new();\\n        queue.push_back((2_i32.pow(n as u32) - 1));\\n        answer.insert(queue[0]);\\n        \\n        let mut presses = presses;\\n        \\n        while presses > 0 && !queue.is_empty() {\\n            presses -= 1;\\n            let queue_len = queue.len();\\n            answer = HashSet::new();\\n            for _ in 0..queue_len {\\n                let state = queue.pop_front().unwrap();\\n                let nbrs = Solution::get_neighbors(state, n);\\n                for nbr in nbrs {\\n                    if answer.contains(&nbr) {\\n                        continue;\\n                    }\\n                    answer.insert(nbr);\\n                    queue.push_back(nbr);\\n                }\\n            }\\n        }\\n\\n        answer.len() as i32\\n    }\\n}\\n```\n```c++ []\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        vector<bitset<1000>> m(4);\\n\\n        for (int i=1;i<n;i+=2) {\\n            m[1].flip(i);\\n            m[2].flip(i-1);\\n        }\\n        if (n%2==1) m[2].flip(n-1);\\n        m[0]=m[1];\\n        m[0]|=m[2];\\n\\n        \\n        for (int i=0;i<n;i+=3) m[3].flip(i);\\n\\n        //for(auto& a:m) cout << a << endl;\\n\\n        unordered_set<bitset<1000>> q;\\n        q.insert(m[0]);\\n\\n        for (int i=0;i<presses;i++){\\n            unordered_set<bitset<1000>> temp;\\n            for (auto& item:q){\\n                for (int j=0;j<4;j++){\\n                    auto t = bitset<1000>{item};\\n                    t ^= m[j];\\n                    temp.insert(t);\\n                }\\n            }\\n            q = temp;\\n        }\\n        return q.size();\\n\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3896100,
                "title": "c-observational-logic-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThis is highly observation based problem. \\nWe can note that if n is 1 we can only have 2 states (0,1) if we have presses>0. \\nWe then can observe that, when we have n = 2, if presses == 1 we will have (11,01,10). But if we have presses == 2 we have all 4 combinations (00,11,01,10).\\n\\nWe then can observe that if n = 3, if we have presses == 1 we will have 4 unique states (111,010,101,100). If presses == 2 we will have ((111,101,010),000,011,110) 7 states and if presses >= 3 we have ((111,101,010),000,011,110,100,001) all 8 possible states.\\n\\nBut now if we observe for n == 4, if presses == 1 we have same 4 states (1111,0101,1010,1001). For presses == 2 we have ((1111,0101,1010),0000,0110,1100,0011). For presses == 3 we have (((1111,0101,1010),0000,0110,1100,0011), 1001) and for presses == 4,5.. we have same states.\\n\\nThis trend continues for any n >= 3. Hence we follow the above code.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        if(presses==0)return 1;\\n        if(n==1)return 2;\\n        if(n==2)return presses==1?3:4;\\n        if(presses==1)return 4;\\n        if(presses==2)return 7;\\n        return 8;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        if(presses==0)return 1;\\n        if(n==1)return 2;\\n        if(n==2)return presses==1?3:4;\\n        if(presses==1)return 4;\\n        if(presses==2)return 7;\\n        return 8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3860294,
                "title": "c-bitset",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        vector<bitset<1000>> m(4);\\n\\n        for (int i=1;i<n;i+=2) {\\n            m[1].flip(i);\\n            m[2].flip(i-1);\\n        }\\n        if (n%2==1) m[2].flip(n-1);\\n        m[0]=m[1];\\n        m[0]|=m[2];\\n\\n        \\n        for (int i=0;i<n;i+=3) m[3].flip(i);\\n\\n        //for(auto& a:m) cout << a << endl;\\n\\n        unordered_set<bitset<1000>> q;\\n        q.insert(m[0]);\\n\\n        for (int i=0;i<presses;i++){\\n            unordered_set<bitset<1000>> temp;\\n            for (auto& item:q){\\n                for (int j=0;j<4;j++){\\n                    auto t = bitset<1000>{item};\\n                    t ^= m[j];\\n                    temp.insert(t);\\n                }\\n            }\\n            q = temp;\\n        }\\n        return q.size();\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        vector<bitset<1000>> m(4);\\n\\n        for (int i=1;i<n;i+=2) {\\n            m[1].flip(i);\\n            m[2].flip(i-1);\\n        }\\n        if (n%2==1) m[2].flip(n-1);\\n        m[0]=m[1];\\n        m[0]|=m[2];\\n\\n        \\n        for (int i=0;i<n;i+=3) m[3].flip(i);\\n\\n        //for(auto& a:m) cout << a << endl;\\n\\n        unordered_set<bitset<1000>> q;\\n        q.insert(m[0]);\\n\\n        for (int i=0;i<presses;i++){\\n            unordered_set<bitset<1000>> temp;\\n            for (auto& item:q){\\n                for (int j=0;j<4;j++){\\n                    auto t = bitset<1000>{item};\\n                    t ^= m[j];\\n                    temp.insert(t);\\n                }\\n            }\\n            q = temp;\\n        }\\n        return q.size();\\n\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3830675,
                "title": "100-faster-simple-clean-code",
                "content": "# Intuition\\n\\n# Approach\\n1) If same switch repeats itself, it nullifies its effect.\\n2) Switch (1,2,3) form closed loop, i.e., pressing any 2 is equivalent to another\\n3) When (n>2), all switches have unique effect\\n4) At max 8 states possible due to constraint in step-1,2 \\n5) presses==2 : we can\\'t reach a state same as config obtained by switch 4\\n# Complexity\\n- Time complexity:O(1)\\n- Space complexity:O(1)\\n# Code\\n```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n\\n        if(presses==0) return 1;\\n        if(n==1) {\\n            return 2 ;\\n        } \\n        if(n==2){\\n            if(presses==1) return 3 ; \\n            return 4;  \\n        }\\n        if(presses==1) return 4 ; \\n        if(presses==2) return 7 ;   \\n        return 8 ; \\n\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Brainteaser"
                ],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n\\n        if(presses==0) return 1;\\n        if(n==1) {\\n            return 2 ;\\n        } \\n        if(n==2){\\n            if(presses==1) return 3 ; \\n            return 4;  \\n        }\\n        if(presses==1) return 4 ; \\n        if(presses==2) return 7 ;   \\n        return 8 ; \\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3792532,
                "title": "o-1-time-complexity-only-if-else-nothing-other-than-that-beautiful-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        if (presses == 0) return 1;\\n        if (n == 1) return 2;\\n        if (n == 2) return (presses == 1) ? 3 : 4;\\n        if (presses == 1) return 4;\\n        return (presses == 2) ? 7 : 8;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        if (presses == 0) return 1;\\n        if (n == 1) return 2;\\n        if (n == 2) return (presses == 1) ? 3 : 4;\\n        if (presses == 1) return 4;\\n        return (presses == 2) ? 7 : 8;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3685181,
                "title": "scala-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach recursive\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(2^n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nobject Solution {\\n    def flipLights(n: Int, presses: Int): Int = {\\n      if (presses == 0 || n == 0) 1\\n      else if (n > 3) flipLights(3, presses)\\n      else flipLights(n - 1, presses - 1) + flipLights(n - 1, presses)\\n    }\\n}\\n```\\n\\n# Approach math\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nobject Solution {\\n    def flipLights(n: Int, presses: Int): Int = (n, presses) match {\\n      case (_, 0) => 1\\n      case (1, _) => 2\\n      case (2, 1) => 3\\n      case (2, _) => 4\\n      case (_, 1) => 4\\n      case (_, 2) => 7\\n      case (_,_) => 8\\n    }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n    def flipLights(n: Int, presses: Int): Int = {\\n      if (presses == 0 || n == 0) 1\\n      else if (n > 3) flipLights(3, presses)\\n      else flipLights(n - 1, presses - 1) + flipLights(n - 1, presses)\\n    }\\n}\\n```\n```\\nobject Solution {\\n    def flipLights(n: Int, presses: Int): Int = (n, presses) match {\\n      case (_, 0) => 1\\n      case (1, _) => 2\\n      case (2, 1) => 3\\n      case (2, _) => 4\\n      case (_, 1) => 4\\n      case (_, 2) => 7\\n      case (_,_) => 8\\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3664452,
                "title": "bit-manipulation-solution",
                "content": "# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(m)$$. m is number of different states.\\n\\n# Code\\n```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        if presses == 0:\\n            return 1\\n        length = min(10, n)\\n        state = (1 << length) - 1\\n        buttons = [(1 << length) - 1, 0, 0, 0]\\n        for i in range(length):\\n            if i % 2 != 0:\\n                buttons[1] |= 1 << i\\n            if i % 2 == 0:\\n                buttons[2] |= 1 << i\\n            if 3 * i + 1 < length:\\n                buttons[3] |= 1 << (3 * i)\\n        states = set()\\n        visited = set()\\n        q = deque()\\n        q.append([state, presses])\\n        while q:\\n            for _ in range(len(q)):\\n                currentState, currentPresses = q.popleft()\\n                for button in buttons:\\n                    newState = currentState ^ button\\n                    if newState not in states and (newState, currentPresses - 1) not in visited:\\n                        if currentPresses - 1 > 0:\\n                            q.append([newState, currentPresses - 1])\\n                            visited.add((newState, currentPresses - 1))\\n                        else:\\n                            states.add(newState)\\n        return len(states)\\n\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        if presses == 0:\\n            return 1\\n        length = min(10, n)\\n        state = (1 << length) - 1\\n        buttons = [(1 << length) - 1, 0, 0, 0]\\n        for i in range(length):\\n            if i % 2 != 0:\\n                buttons[1] |= 1 << i\\n            if i % 2 == 0:\\n                buttons[2] |= 1 << i\\n            if 3 * i + 1 < length:\\n                buttons[3] |= 1 << (3 * i)\\n        states = set()\\n        visited = set()\\n        q = deque()\\n        q.append([state, presses])\\n        while q:\\n            for _ in range(len(q)):\\n                currentState, currentPresses = q.popleft()\\n                for button in buttons:\\n                    newState = currentState ^ button\\n                    if newState not in states and (newState, currentPresses - 1) not in visited:\\n                        if currentPresses - 1 > 0:\\n                            q.append([newState, currentPresses - 1])\\n                            visited.add((newState, currentPresses - 1))\\n                        else:\\n                            states.add(newState)\\n        return len(states)\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3608789,
                "title": "bit-manipulation-bfs-rust-and-python3-solution",
                "content": "###  Rust Solution (passes)\\n\\n```\\nuse std::collections::{HashSet, VecDeque};\\n\\nimpl Solution {\\n    fn flip_bit(number: i32, position: u32) -> i32 {\\n        let mask = 1 << position;\\n        let flipped_number = number ^ mask;\\n        flipped_number\\n    }\\n    \\n    fn y_function(x: i32) -> i32 {\\n        3 * x + 1\\n    }\\n    \\n    fn get_neighbors(state: i32, n: i32) -> Vec<i32> {\\n        let mut nbrs: Vec<i32> = vec![];\\n        \\n        let mut curr_num = state;\\n        for i in 1..n {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n            \\n        curr_num = state;\\n        for i in (1..n).step_by(2) {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n            \\n        curr_num = state;\\n        for i in (0..n).step_by(2) {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n        \\n        let mut i = 0;\\n        while Solution::y_function(i) < n {\\n            curr_num = Solution::flip_bit(curr_num, Solution::y_function(i) as u32);\\n            i += 1;\\n        }\\n        nbrs.push(curr_num);\\n        \\n        nbrs\\n    }\\n    \\n    // O(n*press) time,\\n    // O(n*space) space,\\n    // Approach: bfs, bit manipulation\\n    fn flip_lights(n: i32, presses: i32) -> i32 {\\n        let mut answer: HashSet<i32> = HashSet::new();\\n        let mut queue: VecDeque<i32> = VecDeque::new();\\n        queue.push_back((2_i32.pow(n as u32) - 1));\\n        answer.insert(queue[0]);\\n        \\n        let mut presses = presses;\\n        \\n        while presses > 0 && !queue.is_empty() {\\n            presses -= 1;\\n            let queue_len = queue.len();\\n            answer = HashSet::new();\\n            for _ in 0..queue_len {\\n                let state = queue.pop_front().unwrap();\\n                let nbrs = Solution::get_neighbors(state, n);\\n                for nbr in nbrs {\\n                    if answer.contains(&nbr) {\\n                        continue;\\n                    }\\n                    answer.insert(nbr);\\n                    queue.push_back(nbr);\\n                }\\n            }\\n        }\\n\\n        answer.len() as i32\\n    }\\n}\\n```\\n\\n### Python3 Solution (TLE)\\n```\\nclass Solution:\\n    \\n    def flipBit(self, number, position):\\n        mask = 1 << position\\n        flipped_number = number ^ mask\\n        return flipped_number\\n        \\n    def yFunction(self, x: int) -> int:\\n        return 3*x + 1\\n    \\n    def getNeighbors(self, state: int, n: int,) -> List[int]:\\n        nbrs = []\\n        \\n        curr_num = state\\n        for i in range(1, n):\\n            curr_num = self.flipBit(curr_num, i)\\n        nbrs.append(curr_num)\\n            \\n        curr_num = state\\n        for i in range(1, n, 2):\\n            curr_num = self.flipBit(curr_num, i)\\n        nbrs.append(curr_num)\\n            \\n        curr_num = state\\n        for i in range(0, n, 2):\\n            curr_num = self.flipBit(curr_num, i)\\n        nbrs.append(curr_num)\\n        \\n        i = 0\\n        while self.yFunction(i) < n:\\n            curr_num = self.flipBit(curr_num, self.yFunction(i))\\n            i += 1\\n        nbrs.append(curr_num)  \\n        \\n        return nbrs\\n            \\n            \\n    # O(n*press) time,\\n    # O(n*space) space,\\n    # Approach: bfs, bit manipulation, \\n    def flipLights(self, n: int, presses: int) -> int:\\n        answer = set()\\n        queue = deque()\\n        queue.append(2**n - 1)\\n        answer.add(queue[0])\\n        \\n        while presses and queue:\\n            presses -= 1\\n            queue_len = len(queue)\\n            answer = set()\\n            for _ in range(queue_len):\\n                state = queue.popleft()\\n                nbrs = self.getNeighbors(state, n)\\n                for nbr in nbrs:\\n                    if nbr in answer:\\n                        continue\\n                    answer.add(nbr)\\n                    queue.append(nbr)\\n\\n        return len(answer)\\n```",
                "solutionTags": [
                    "Python3",
                    "Rust",
                    "Bit Manipulation",
                    "Breadth-First Search"
                ],
                "code": "```\\nuse std::collections::{HashSet, VecDeque};\\n\\nimpl Solution {\\n    fn flip_bit(number: i32, position: u32) -> i32 {\\n        let mask = 1 << position;\\n        let flipped_number = number ^ mask;\\n        flipped_number\\n    }\\n    \\n    fn y_function(x: i32) -> i32 {\\n        3 * x + 1\\n    }\\n    \\n    fn get_neighbors(state: i32, n: i32) -> Vec<i32> {\\n        let mut nbrs: Vec<i32> = vec![];\\n        \\n        let mut curr_num = state;\\n        for i in 1..n {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n            \\n        curr_num = state;\\n        for i in (1..n).step_by(2) {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n            \\n        curr_num = state;\\n        for i in (0..n).step_by(2) {\\n            curr_num = Solution::flip_bit(curr_num, i as u32);\\n        }\\n        nbrs.push(curr_num);\\n        \\n        let mut i = 0;\\n        while Solution::y_function(i) < n {\\n            curr_num = Solution::flip_bit(curr_num, Solution::y_function(i) as u32);\\n            i += 1;\\n        }\\n        nbrs.push(curr_num);\\n        \\n        nbrs\\n    }\\n    \\n    // O(n*press) time,\\n    // O(n*space) space,\\n    // Approach: bfs, bit manipulation\\n    fn flip_lights(n: i32, presses: i32) -> i32 {\\n        let mut answer: HashSet<i32> = HashSet::new();\\n        let mut queue: VecDeque<i32> = VecDeque::new();\\n        queue.push_back((2_i32.pow(n as u32) - 1));\\n        answer.insert(queue[0]);\\n        \\n        let mut presses = presses;\\n        \\n        while presses > 0 && !queue.is_empty() {\\n            presses -= 1;\\n            let queue_len = queue.len();\\n            answer = HashSet::new();\\n            for _ in 0..queue_len {\\n                let state = queue.pop_front().unwrap();\\n                let nbrs = Solution::get_neighbors(state, n);\\n                for nbr in nbrs {\\n                    if answer.contains(&nbr) {\\n                        continue;\\n                    }\\n                    answer.insert(nbr);\\n                    queue.push_back(nbr);\\n                }\\n            }\\n        }\\n\\n        answer.len() as i32\\n    }\\n}\\n```\n```\\nclass Solution:\\n    \\n    def flipBit(self, number, position):\\n        mask = 1 << position\\n        flipped_number = number ^ mask\\n        return flipped_number\\n        \\n    def yFunction(self, x: int) -> int:\\n        return 3*x + 1\\n    \\n    def getNeighbors(self, state: int, n: int,) -> List[int]:\\n        nbrs = []\\n        \\n        curr_num = state\\n        for i in range(1, n):\\n            curr_num = self.flipBit(curr_num, i)\\n        nbrs.append(curr_num)\\n            \\n        curr_num = state\\n        for i in range(1, n, 2):\\n            curr_num = self.flipBit(curr_num, i)\\n        nbrs.append(curr_num)\\n            \\n        curr_num = state\\n        for i in range(0, n, 2):\\n            curr_num = self.flipBit(curr_num, i)\\n        nbrs.append(curr_num)\\n        \\n        i = 0\\n        while self.yFunction(i) < n:\\n            curr_num = self.flipBit(curr_num, self.yFunction(i))\\n            i += 1\\n        nbrs.append(curr_num)  \\n        \\n        return nbrs\\n            \\n            \\n    # O(n*press) time,\\n    # O(n*space) space,\\n    # Approach: bfs, bit manipulation, \\n    def flipLights(self, n: int, presses: int) -> int:\\n        answer = set()\\n        queue = deque()\\n        queue.append(2**n - 1)\\n        answer.add(queue[0])\\n        \\n        while presses and queue:\\n            presses -= 1\\n            queue_len = len(queue)\\n            answer = set()\\n            for _ in range(queue_len):\\n                state = queue.popleft()\\n                nbrs = self.getNeighbors(state, n)\\n                for nbr in nbrs:\\n                    if nbr in answer:\\n                        continue\\n                    answer.add(nbr)\\n                    queue.append(nbr)\\n\\n        return len(answer)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574891,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int p)\\n     {\\n        if (p == 0)\\n         return 1; \\n        if (n == 1) \\n        return 2;\\n        if (p == 1) \\n        return n > 2 ? 4 : 3; \\n        if (n == 2) \\n        return 4; \\n        return p == 2 ? 7 : 8; \\n     }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int p)\\n     {\\n        if (p == 0)\\n         return 1; \\n        if (n == 1) \\n        return 2;\\n        if (p == 1) \\n        return n > 2 ? 4 : 3; \\n        if (n == 2) \\n        return 4; \\n        return p == 2 ? 7 : 8; \\n     }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3547953,
                "title": "java-math",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int flipLights(int n, int p) {\\n        // even - 0000, (p>1) 1100, 1010, 1001, 0110, 0101, 0011, 1111 (for p>3)\\n        // odd  - 1000, 0100, 0010, 0001, (p>2) 1110, 1101, 1011, 0111 \\n\\n        //edge cases\\n        if (p ==0) return 1;\\n        if (n==1) return 2;\\n        if (n==2 && p==1) return 3;\\n        if (n==2 && p>1) return 4;\\n\\n        if (p>4) p= (p%2==0)? 4:3;\\n\\n        if (p==1) return 4; // 1000, 0100, 0010, 0001\\n        if (p==2) return 7; //0000, 1100, 1010, 1001, 0110, 0101, 0011\\n        if (p==3) return 8; //1000, 0100, 0010, 0001, 1110, 1101, 1011, 0111 \\n        if (p==4) return 8;\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int p) {\\n        // even - 0000, (p>1) 1100, 1010, 1001, 0110, 0101, 0011, 1111 (for p>3)\\n        // odd  - 1000, 0100, 0010, 0001, (p>2) 1110, 1101, 1011, 0111 \\n\\n        //edge cases\\n        if (p ==0) return 1;\\n        if (n==1) return 2;\\n        if (n==2 && p==1) return 3;\\n        if (n==2 && p>1) return 4;\\n\\n        if (p>4) p= (p%2==0)? 4:3;\\n\\n        if (p==1) return 4; // 1000, 0100, 0010, 0001\\n        if (p==2) return 7; //0000, 1100, 1010, 1001, 0110, 0101, 0011\\n        if (p==3) return 8; //1000, 0100, 0010, 0001, 1110, 1101, 1011, 0111 \\n        if (p==4) return 8;\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3468142,
                "title": "javascript-detailed-explanation-o-1-beats-96",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSituation 1 `n===1`: Button 1,3,4 are the same, So 2 types of button in total. `t(1) = 2`\\nSituation 2 `n===2`: Button 3,4 are the same, So 3 types of button in total. `t(2) = 3`\\nSituation 3 `n>=3`: 4 button has different outcome. So 4 types of button. `t(n) = 4, n>=3`.\\n\\n**Important:** Based on observation\\n1. Press any button twice equals not press anything.\\n2. The sequence of press button will not impact outcome. Means press `Button 1 -> Button 2` equals `Button 2 -> Button 1`.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWhen `presses == 0 `, no state change, all lights are on. Just `1` status.\\n`flipLights(n, 0) = 1`, when `n >= 1`\\n\\nWhen `presses >= 1`:\\n1. `presses == 1`.\\n\\n`flipLights(n, 1) = t(n)` where `t(1) = 2, t(2) = 3, t(i) = 4 (i>2)`.\\n\\n2. `presses == 2`.\\nSituation 1 `n===1`: `flipLights(1, 2) = C(t(1),2) + flipLights(1, 0) = 1 + 1 = 2`.\\nSituation 2 `n===2`: `flipLights(2, 2) = C(t(2),2) + flipLights(2, 0) = 3 + 1 = 4`.\\nSituation 3 `n>=3`: `flipLights(n, 2) = C(t(n),2) + flipLights(n, 0) = 6 + 1 = 7`.\\n\\n\\n`C(n, r)` is the combination formula, `n` is the size of set, `k` is the size of permutation.\\nFor example, `C(t(3), 2) = C(4, 2)` means, when there are 3 lights, we have 4 different buttons in total, we need to press 2 buttons. So we choose 2 different buttons to press from a total of 4 buttons. That\\'s 6 different combinations.\\n\\n3. `presses >= 3`.\\nWe can have it in general.\\n\\n`flipLights(n, presses) = C(t(n), presses) + flipLights(n, presses-2)`.\\n\\nWhen `t(n) < presses, C(t(n), presses) = 0`, we will get `flipLights(n, presses) = flipLights(n, presses-2)`. It happens when `presses >= 5`. \\n\\nSo all we need to do is to analyse and get the below table.\\n\\nn | presses 0 | presses 1 | presses 2 | presses 3 | presses 4 | presses >= 5| ...\\n--- | --- | --- | --- | --- | --- | --- | ---\\n1 | 1 | 2 | 2 | 2 | 2 | 2 | 2...\\n2 | 1 | 3 | 4 | 4 | 4 | 4 | 4...\\nLarger than 3 | 1 | 4 | 7 | 8 | 8 | 8 | 8...\\n\\n# Complexity\\n- Time complexity: `O(1)`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: `O(1)`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} n\\n * @param {number} presses\\n * @return {number}\\n */\\nvar flipLights = function(n, presses) {\\n    if (presses === 0) {\\n      return 1;\\n    } else if (n === 1) {\\n      return 2;\\n    } else if (n === 2) {\\n      return presses === 1 ? 3 : 4;\\n    } else {\\n      return presses === 1 ? 4 : presses === 2 ? 7 : 8;\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @param {number} presses\\n * @return {number}\\n */\\nvar flipLights = function(n, presses) {\\n    if (presses === 0) {\\n      return 1;\\n    } else if (n === 1) {\\n      return 2;\\n    } else if (n === 2) {\\n      return presses === 1 ? 3 : 4;\\n    } else {\\n      return presses === 1 ? 4 : presses === 2 ? 7 : 8;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3463933,
                "title": "one-image-to-illustrate-the-finite-state-machine",
                "content": "# Intuition\\n1, any two same buttons(operations) lead to the origin state\\ne.g. button1 + button1 = nothing changed\\n2, As to the former 3 operations, any two operations lead to the third operation. e.g. button1 + button2 = button3\\n\\nobserve the image below: \\n![image.png](https://assets.leetcode.com/users/images/e05a58bc-fb9d-44cb-a599-d99672c64fe2_1682698761.0383983.png)\\n\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\n O(1)\\n\\n# Code\\n```\\n// fi + fi = nil, i=1,2,3,4\\n// f1 + f2 = f3, f2 + f3 = f1, f1 + f3 = f2\\n// so, there are 8 situations, which are\\n// nil, f1, f2, f3, f4, f1+f4, f2+f4, f3+f4\\nfunc flipLights(n int, presses int) int {\\n    if presses == 0 {return 1}\\n    if n == 1 {return 2}\\n    if n == 2 {\\n        if presses == 1 {return 3}\\n        return 4\\n    }\\n    if presses == 1 {return 4}\\n    if presses == 2 {return 7}\\n    return 8\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n// fi + fi = nil, i=1,2,3,4\\n// f1 + f2 = f3, f2 + f3 = f1, f1 + f3 = f2\\n// so, there are 8 situations, which are\\n// nil, f1, f2, f3, f4, f1+f4, f2+f4, f3+f4\\nfunc flipLights(n int, presses int) int {\\n    if presses == 0 {return 1}\\n    if n == 1 {return 2}\\n    if n == 2 {\\n        if presses == 1 {return 3}\\n        return 4\\n    }\\n    if presses == 1 {return 4}\\n    if presses == 2 {return 7}\\n    return 8\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3459452,
                "title": "code-in-5-lines-using-conditional-statement-only",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2 && m==1) return 3;\\n        if(n==2 || m==1) return 4;\\n        if(m==2) return 7;\\n        if(m>=3) return 8;\\n        return 8;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2 && m==1) return 3;\\n        if(n==2 || m==1) return 4;\\n        if(m==2) return 7;\\n        if(m>=3) return 8;\\n        return 8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3459260,
                "title": "very-easy-solution",
                "content": "Please UPVOTE if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!\\n# Code\\n```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n        int[] LessThan3 = new int[]{1,3,4};\\n        int[] MoreThan2 = new int[]{1,4,7,8};\\n        if(n<3)\\n            return Math.min(1<<n,LessThan3[Math.min(presses,2)]);            \\n        return MoreThan2[Math.min(presses,3)];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n        int[] LessThan3 = new int[]{1,3,4};\\n        int[] MoreThan2 = new int[]{1,4,7,8};\\n        if(n<3)\\n            return Math.min(1<<n,LessThan3[Math.min(presses,2)]);            \\n        return MoreThan2[Math.min(presses,3)];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3437936,
                "title": "scala",
                "content": "# Code\\n```\\nobject Solution {\\n  def flipLights(n: Int, presses: Int): Int = {\\n    type Status = Set[Int] // contains indexes of bulbes on\\n    \\n    val allOn: Status = Set.from(1 to n)\\n    \\n    def flip(s: Status)(c: Int => Boolean): Status = allOn.filter {\\n      case b if s(b) => !c(b)\\n      case b => c(b)\\n    }\\n    \\n    def button1(s: Status): Status = flip(s)(_ => true)\\n    def button2(s: Status): Status = flip(s)(_ % 2 == 0)\\n    def button3(s: Status): Status = flip(s)(_ % 2 == 1)\\n    def button4(s: Status): Status = flip(s)(_ % 3 == 1)\\n\\n    val mem = scala.collection.mutable.Map[Status, Set[Status]]()\\n\\n    def statusesFrom(s: Status): Set[Status] = {\\n      mem.getOrElseUpdate(s,\\n        Set(button1(s), button2(s), button3(s), button4(s))\\n      )\\n    }\\n\\n    val statuses = LazyList.iterate(Set(allOn)) {\\n      _.flatMap(statusesFrom)\\n    }\\n\\n    statuses(presses).size\\n  }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nobject Solution {\\n  def flipLights(n: Int, presses: Int): Int = {\\n    type Status = Set[Int] // contains indexes of bulbes on\\n    \\n    val allOn: Status = Set.from(1 to n)\\n    \\n    def flip(s: Status)(c: Int => Boolean): Status = allOn.filter {\\n      case b if s(b) => !c(b)\\n      case b => c(b)\\n    }\\n    \\n    def button1(s: Status): Status = flip(s)(_ => true)\\n    def button2(s: Status): Status = flip(s)(_ % 2 == 0)\\n    def button3(s: Status): Status = flip(s)(_ % 2 == 1)\\n    def button4(s: Status): Status = flip(s)(_ % 3 == 1)\\n\\n    val mem = scala.collection.mutable.Map[Status, Set[Status]]()\\n\\n    def statusesFrom(s: Status): Set[Status] = {\\n      mem.getOrElseUpdate(s,\\n        Set(button1(s), button2(s), button3(s), button4(s))\\n      )\\n    }\\n\\n    val statuses = LazyList.iterate(Set(allOn)) {\\n      _.flatMap(statusesFrom)\\n    }\\n\\n    statuses(presses).size\\n  }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3428024,
                "title": "java-intuitive-bfs-with-early-termination-if-converge",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1. 4 operations are four next states from current state\\n2. each press is one bfs search \\n3. we return the size of the results in the neighbors \\n4. one concern is that if press is big, it soon becomes exponential algorithm and very slow\\n5. will the result become stable?\\n6. let\\'s assume it will be stable, how do we terminate the search once it\\'s stable? Check the result size between each press\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nOriginally thought about using int to represent a state, but since n could be large, I decide to go with string.\\nTypical BFS algorithm with some additions:\\na. add a set to check all the children string results to avoid duplicates.\\nb. Between each round of BFS, check the result size, if the size stays the same, it means we reach a stable status, we can return the stable result \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(Math.min(4^presses, 4^(n times to stable))\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(Math.min(4^presses, 4^(n times to stable))\\n# Code\\n```\\nclass Solution {\\n\\n\\n\\n    public int flipLights(int n, int presses) {\\n\\n        // 4 operations are four next states from current state\\n        // each press is one bfs search \\n        // we return the size of the results in the neighbors \\n        // one concern is that if press is big, it soon becomes exponential algorithm and very slow\\n        // will the result become stable?\\n        // let\\'s assume it will be stable, how do we terminate the search once it\\'s stable?\\n        if(presses == 0) return 1;\\n\\n        String init =  buildOnes(n);\\n    \\n        Queue<String> states = new LinkedList<>();\\n        states.offer(init);\\n\\n        int pressCnt = 0;\\n\\n        HashSet<String> memo = new HashSet<>();\\n\\n     \\n   \\n        while(!states.isEmpty() && pressCnt < presses)\\n        {\\n            int size = states.size();\\n            memo.clear();\\n            for(int i=0; i<size; i++)\\n            {\\n                String cur = states.poll();\\n                for(int j=1; j<=4; j++)\\n                {\\n                    String child = operations(cur, j);\\n                    if(!memo.contains(child))\\n                        {\\n                            memo.add(child);\\n                            states.offer(child);\\n                            //System.out.print(child+\" \");\\n                        }\\n                }\\n                \\n            }\\n            //System.out.println();\\n            if(states.size() == size) return size; // it becomes stable we can return    \\n\\n            pressCnt++;\\n        }\\n\\n        return states.size();\\n\\n    }\\n\\n    private String buildOnes(int n)\\n    {\\n        StringBuilder sb = new StringBuilder();\\n        for(int i=0; i<n; i++)\\n            sb.append(\"1\");\\n        return sb.toString();\\n    }\\n\\n    private String operations(String cur, int buttonNum)\\n    {\\n        switch(buttonNum)\\n        {\\n            case 1: return one(cur);\\n            case 2: return two(cur);\\n            case 3: return three(cur);\\n            case 4: return four(cur);\\n            default: break;\\n        }\\n        return cur;\\n    }\\n\\n    private String one(String cur)\\n    {\\n        StringBuilder sb = new StringBuilder();\\n        for(char c:cur.toCharArray())\\n        {\\n            if(c==\\'0\\') sb.append(\"1\");\\n            else sb.append(\"0\");\\n        }\\n        return sb.toString();\\n    }\\n\\n    private String two(String cur)\\n    {\\n         StringBuilder sb = new StringBuilder();\\n         char[] arr = cur.toCharArray();\\n         for(int i=0; i<arr.length;i++)\\n         {\\n             if( (i+1) %2 != 0 )\\n                sb.append(arr[i]);\\n            else\\n            {\\n                if(arr[i] ==\\'0\\') sb.append(\"1\");\\n                else sb.append(\"0\");\\n            }\\n         }\\n         return sb.toString();\\n    }\\n    private String three(String cur)\\n    {\\n        StringBuilder sb = new StringBuilder();\\n         char[] arr = cur.toCharArray();\\n         for(int i=0; i<arr.length;i++)\\n         {\\n             if( (i+1) %2 == 0 )\\n                sb.append(arr[i]);\\n            else\\n            {\\n                if(arr[i] ==\\'0\\') sb.append(\"1\");\\n                else sb.append(\"0\");\\n            }\\n         }\\n         return sb.toString();\\n    }\\n    private String four(String cur)\\n    {\\n        StringBuilder sb = new StringBuilder();\\n         char[] arr = cur.toCharArray();\\n         for(int i=0; i<arr.length;i++)\\n         {\\n             if( ((i+1)-1) % 3 != 0 )\\n                sb.append(arr[i]);\\n            else\\n            {\\n                if(arr[i] ==\\'0\\') sb.append(\"1\");\\n                else sb.append(\"0\");\\n            }\\n         }\\n         return sb.toString();\\n    }\\n\\n\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Solution {\\n\\n\\n\\n    public int flipLights(int n, int presses) {\\n\\n        // 4 operations are four next states from current state\\n        // each press is one bfs search \\n        // we return the size of the results in the neighbors \\n        // one concern is that if press is big, it soon becomes exponential algorithm and very slow\\n        // will the result become stable?\\n        // let\\'s assume it will be stable, how do we terminate the search once it\\'s stable?\\n        if(presses == 0) return 1;\\n\\n        String init =  buildOnes(n);\\n    \\n        Queue<String> states = new LinkedList<>();\\n        states.offer(init);\\n\\n        int pressCnt = 0;\\n\\n        HashSet<String> memo = new HashSet<>();\\n\\n     \\n   \\n        while(!states.isEmpty() && pressCnt < presses)\\n        {\\n            int size = states.size();\\n            memo.clear();\\n            for(int i=0; i<size; i++)\\n            {\\n                String cur = states.poll();\\n                for(int j=1; j<=4; j++)\\n                {\\n                    String child = operations(cur, j);\\n                    if(!memo.contains(child))\\n                        {\\n                            memo.add(child);\\n                            states.offer(child);\\n                            //System.out.print(child+\" \");\\n                        }\\n                }\\n                \\n            }\\n            //System.out.println();\\n            if(states.size() == size) return size; // it becomes stable we can return    \\n\\n            pressCnt++;\\n        }\\n\\n        return states.size();\\n\\n    }\\n\\n    private String buildOnes(int n)\\n    {\\n        StringBuilder sb = new StringBuilder();\\n        for(int i=0; i<n; i++)\\n            sb.append(\"1\");\\n        return sb.toString();\\n    }\\n\\n    private String operations(String cur, int buttonNum)\\n    {\\n        switch(buttonNum)\\n        {\\n            case 1: return one(cur);\\n            case 2: return two(cur);\\n            case 3: return three(cur);\\n            case 4: return four(cur);\\n            default: break;\\n        }\\n        return cur;\\n    }\\n\\n    private String one(String cur)\\n    {\\n        StringBuilder sb = new StringBuilder();\\n        for(char c:cur.toCharArray())\\n        {\\n            if(c==\\'0\\') sb.append(\"1\");\\n            else sb.append(\"0\");\\n        }\\n        return sb.toString();\\n    }\\n\\n    private String two(String cur)\\n    {\\n         StringBuilder sb = new StringBuilder();\\n         char[] arr = cur.toCharArray();\\n         for(int i=0; i<arr.length;i++)\\n         {\\n             if( (i+1) %2 != 0 )\\n                sb.append(arr[i]);\\n            else\\n            {\\n                if(arr[i] ==\\'0\\') sb.append(\"1\");\\n                else sb.append(\"0\");\\n            }\\n         }\\n         return sb.toString();\\n    }\\n    private String three(String cur)\\n    {\\n        StringBuilder sb = new StringBuilder();\\n         char[] arr = cur.toCharArray();\\n         for(int i=0; i<arr.length;i++)\\n         {\\n             if( (i+1) %2 == 0 )\\n                sb.append(arr[i]);\\n            else\\n            {\\n                if(arr[i] ==\\'0\\') sb.append(\"1\");\\n                else sb.append(\"0\");\\n            }\\n         }\\n         return sb.toString();\\n    }\\n    private String four(String cur)\\n    {\\n        StringBuilder sb = new StringBuilder();\\n         char[] arr = cur.toCharArray();\\n         for(int i=0; i<arr.length;i++)\\n         {\\n             if( ((i+1)-1) % 3 != 0 )\\n                sb.append(arr[i]);\\n            else\\n            {\\n                if(arr[i] ==\\'0\\') sb.append(\"1\");\\n                else sb.append(\"0\");\\n            }\\n         }\\n         return sb.toString();\\n    }\\n\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3383937,
                "title": "java-minimum-value-in-a-binary-tree-with-unique-values",
                "content": "# Intuition\\nWe can approach this problem by analyzing the effect of each button press on the bulbs and try to find a pattern that emerges as we perform a certain number of presses.\\n# Approach\\n- If the number of presses is 0, then all bulbs remain turned on, and there is only one possible status.\\n- If there is only one bulb, then we can either turn it off or on, so there are two possible statuses.\\n- If there are two bulbs, then we can either flip both bulbs, flip only the even bulb, flip only the odd bulb, or not flip any bulb. If we have only one press, then we can do any of the four operations, so there are three possible statuses. If we have two presses, then we can do two operations that cancel out each other, so we have four possible statuses.\\n- If there are three or more bulbs, then the fourth button is relevant as it flips bulbs with labels 3k + 1. We can use it to flip all the bulbs in a certain pattern, which can be used to generate all possible statuses.\\n\\nWe can derive the following pattern:\\n\\n- If we press the fourth button, then we flip all bulbs with odd labels.\\n- If we press the first button, then we flip all bulbs.\\n- If we press the second button, then we flip all even bulbs.\\n- If we press the third button, then we flip all odd bulbs.\\n\\nUsing the fourth button, we can generate all possible patterns with only odd bulbs turned on. If n >= 3 and presses >= 2, then we can perform the following sequence of operations:\\n\\n- Press button 4 to turn off all bulbs with labels 1, 4, 7, ...\\n- Press button 2 or 3 to toggle all even or odd bulbs, respectively.\\n- Press button 1 to toggle all bulbs.\\n- Press button 2 or 3 to toggle all even or odd bulbs, respectively.\\n\\nThis generates 8 possible statuses. If we have only one press, then we can do any of the four operations, so there are four possible statuses. If we have two presses but n = 2, then there are only four possible statuses as there are no bulbs with odd labels.\\n# Complexity\\n- Time complexity:\\nO(1). The solution performs a constant number of operations to derive the answer.\\n- Space complexity:\\nO(1). The solution does not use any extra data structures that depend on the input size.\\n\\n\\n# Code\\n```\\npublic class Solution {\\n    public int flipLights(int n, int presses) {\\n        if (presses == 0) {\\n            return 1;\\n        } else if (n == 1) {\\n            return 2;\\n        } else if (n == 2) {\\n            return presses == 1 ? 3 : 4;\\n        } else {\\n            return presses == 1 ? 4 : (presses == 2 ? 7 : 8);\\n        }\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Depth-First Search",
                    "Recursion",
                    "Heap (Priority Queue)",
                    "Binary Tree"
                ],
                "code": "```\\npublic class Solution {\\n    public int flipLights(int n, int presses) {\\n        if (presses == 0) {\\n            return 1;\\n        } else if (n == 1) {\\n            return 2;\\n        } else if (n == 2) {\\n            return presses == 1 ? 3 : 4;\\n        } else {\\n            return presses == 1 ? 4 : (presses == 2 ? 7 : 8);\\n        }\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3383078,
                "title": "dfs-solution-recursion-dp",
                "content": "\\n\\n# Code 1\\n```\\n\\nclass Solution {\\npublic:\\n    set<string>st;\\n        string op(int type,string& s){\\n        if(type==0){\\n            for(int i = 0;i<s.length();i++){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else if(type==1){\\n            for(int i = 1;i<s.length();i+=2){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else if(type==2){\\n            for(int i = 0;i<s.length();i+=2){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else{\\n            for(int k = 0;3*k+1<=s.length();k++){\\n                int i = 3*k;\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        return s;\\n    }\\n    void solve(string s,int presses,unordered_map<string,unordered_map<int,int>>&dp){\\n        if(presses == 0){\\n            st.insert(s);\\n            return;\\n        }\\n\\n        if(dp.count(s) and dp[s].count(presses)) return;\\n\\n        dp[s][presses] = 1;\\n     \\n        solve(op(0,s),presses-1,dp); \\n        solve(op(1,s),presses-1,dp); \\n        solve(op(2,s),presses-1,dp); \\n        solve(op(3,s),presses-1,dp); \\n    }\\n    int flipLights(int n, int presses) {\\n        string s(n,\\'1\\');\\n        unordered_map<string,unordered_map<int,int>>dp;\\n        solve(s,presses,dp);\\n        return st.size();       \\n    }\\n};\\n```\\n\\n# Code 2\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m == 0) return 1;\\n        if(n==1) return 2;\\n        if(n==2) return m==1 ? 3 : 4;\\n        if(m==1) return 4;\\n        if(m==2) return 7;\\n        return 8;\\n    }\\n};\\n```\\n# upvote if it\\'s help you HAPPY CODING :)",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Depth-First Search"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    set<string>st;\\n        string op(int type,string& s){\\n        if(type==0){\\n            for(int i = 0;i<s.length();i++){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else if(type==1){\\n            for(int i = 1;i<s.length();i+=2){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else if(type==2){\\n            for(int i = 0;i<s.length();i+=2){\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        else{\\n            for(int k = 0;3*k+1<=s.length();k++){\\n                int i = 3*k;\\n                if(s[i]==\\'1\\') s[i]=\\'0\\';\\n                else s[i]=\\'1\\';\\n            }\\n        }\\n        return s;\\n    }\\n    void solve(string s,int presses,unordered_map<string,unordered_map<int,int>>&dp){\\n        if(presses == 0){\\n            st.insert(s);\\n            return;\\n        }\\n\\n        if(dp.count(s) and dp[s].count(presses)) return;\\n\\n        dp[s][presses] = 1;\\n     \\n        solve(op(0,s),presses-1,dp); \\n        solve(op(1,s),presses-1,dp); \\n        solve(op(2,s),presses-1,dp); \\n        solve(op(3,s),presses-1,dp); \\n    }\\n    int flipLights(int n, int presses) {\\n        string s(n,\\'1\\');\\n        unordered_map<string,unordered_map<int,int>>dp;\\n        solve(s,presses,dp);\\n        return st.size();       \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m == 0) return 1;\\n        if(n==1) return 2;\\n        if(n==2) return m==1 ? 3 : 4;\\n        if(m==1) return 4;\\n        if(m==2) return 7;\\n        return 8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3296699,
                "title": "bfs",
                "content": "```ruby\\ndef flip_lights n, p\\n    s = Set[[1] * n]\\n    p.times do\\n        t = Set.new\\n        s.each do | x |\\n            a, b, c, d = *4.times.map { x.clone }\\n            for i in 0...n\\n                a[i] ^= 1\\n                i.odd? ? b[i] ^= 1 : c[i] ^= 1\\n                d[i] ^= 1 if i % 3 == 0\\n            end\\n            t += Set[a, b, c, d]\\n        end\\n        s == t ? (break) : s = t\\n    end\\n    s.size\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```ruby\\ndef flip_lights n, p\\n    s = Set[[1] * n]\\n    p.times do\\n        t = Set.new\\n        s.each do | x |\\n            a, b, c, d = *4.times.map { x.clone }\\n            for i in 0...n\\n                a[i] ^= 1\\n                i.odd? ? b[i] ^= 1 : c[i] ^= 1\\n                d[i] ^= 1 if i % 3 == 0\\n            end\\n            t += Set[a, b, c, d]\\n        end\\n        s == t ? (break) : s = t\\n    end\\n    s.size\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3214722,
                "title": "python3-interview-feasible-solution",
                "content": "## Inspired by [awice\\'s post](https://leetcode.com/problems/bulb-switcher-ii/solutions/107267/Python-Straightforward-with-Explanation/)\\n\\n### 1. Observations:\\n1. pressing a button twice ->  nothing happen\\n2. buttons order doesn\\'t matter -> `Button1 + Button2` = `Button2 + Button1` \\n\\n### 2. Thought Processes:\\nFor each of the 4 buttons, it will either be pressed or not pressed at the end (pressing twice equal to nothing happen). \\n\\nHence, we can construct a list of combinations of whether each button is pressed or not, and then validate if we can get that `combination`, like `(1, 0, 0, 1)` meaning `Button1` and `Button4` are pressed. We only have 16 such combinations (2 ** 4)\\n\\nAnd how are we gonna validate the combination? \\n1. `sum(combination) % 2` == `presses % 2` \\n\\n\\tsum of all presses in the combination should be the same as `presses`, ignoring the case pressing the same button even times.\\n\\t\\n\\tLet say testcase `presses=6` and we are validating `combination=(2, 1, 3, 0)`.  We can reduce the combination to `(0, 1, 1, 0)` (`Observation 1`). In this case `sum(combination) % 2` = `presses % 2` = `0`, hence, this should be a potential valid combination.\\n\\t\\n2.  `sum(combination`) <= `presses` \\n\\tif `presses` <= 4, we should not expect more than `presses` buttons being pressed in the combination.\\n\\n\\n\\n#### 3. Code\\n```python\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        \"\"\"\\n        https://leetcode.com/problems/bulb-switcher-ii/discuss/107267\\n        \"\"\"\\n        result = set()\\n\\n        # we can find out that the pattern is repeated each 6 bulbs (least common multiple of 2 and 3)\\n        # 1 is light on, and 0 is off for each bulb\\n        # each of the following represents the operation of the 4 buttons\\n        switches = [\\n            int(\\'111111\\'[-n:], 2),\\n            int(\\'101010\\'[-n:], 2),\\n            int(\\'010101\\'[-n:], 2),\\n            int(\\'001001\\'[-n:], 2),\\n        ]\\n\\n        for combination in itertools.product((0, 1), repeat=4):\\n            # validate operation\\n            if sum(combination) % 2 == presses % 2 and sum(combination) <= presses:\\n                # all lights on initially\\n                bulbs = int(\\'111111\\', 2)\\n                for i, op in enumerate(combination):\\n                    if op == 1:\\n                        bulbs ^= switches[i]\\n\\n                result.add(bulbs)\\n        \\n        return len(result)\\n```",
                "solutionTags": [
                    "Python3",
                    "Bit Manipulation"
                ],
                "code": "```python\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        \"\"\"\\n        https://leetcode.com/problems/bulb-switcher-ii/discuss/107267\\n        \"\"\"\\n        result = set()\\n\\n        # we can find out that the pattern is repeated each 6 bulbs (least common multiple of 2 and 3)\\n        # 1 is light on, and 0 is off for each bulb\\n        # each of the following represents the operation of the 4 buttons\\n        switches = [\\n            int(\\'111111\\'[-n:], 2),\\n            int(\\'101010\\'[-n:], 2),\\n            int(\\'010101\\'[-n:], 2),\\n            int(\\'001001\\'[-n:], 2),\\n        ]\\n\\n        for combination in itertools.product((0, 1), repeat=4):\\n            # validate operation\\n            if sum(combination) % 2 == presses % 2 and sum(combination) <= presses:\\n                # all lights on initially\\n                bulbs = int(\\'111111\\', 2)\\n                for i, op in enumerate(combination):\\n                    if op == 1:\\n                        bulbs ^= switches[i]\\n\\n                result.add(bulbs)\\n        \\n        return len(result)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3153235,
                "title": "beats-100-0ms-runtime",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n        int statuses = 0;\\n        if(n==1 && presses > 0){\\n            statuses = n + 1;\\n        }\\n        else if(presses==1 && n < 4){\\n            statuses = n + presses;\\n        }\\n        else if((n == 2 && presses > 0) || (presses == 1 && n >= 4)){\\n            statuses = 4;\\n        }\\n        else if(presses == 2 && n > presses){\\n            statuses = 7;\\n        }\\n        else if(n*presses > 8){\\n            statuses = 8;\\n        }\\n        else if(n*presses < 8 && n > presses){\\n            statuses = n*presses + 1;\\n        }\\n        else if(n*presses <= 8 && n <= presses){\\n            statuses = 4;\\n        }\\n        else{\\n            return statuses = 1;\\n        }\\n        return statuses;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int presses) {\\n        int statuses = 0;\\n        if(n==1 && presses > 0){\\n            statuses = n + 1;\\n        }\\n        else if(presses==1 && n < 4){\\n            statuses = n + presses;\\n        }\\n        else if((n == 2 && presses > 0) || (presses == 1 && n >= 4)){\\n            statuses = 4;\\n        }\\n        else if(presses == 2 && n > presses){\\n            statuses = 7;\\n        }\\n        else if(n*presses > 8){\\n            statuses = 8;\\n        }\\n        else if(n*presses < 8 && n > presses){\\n            statuses = n*presses + 1;\\n        }\\n        else if(n*presses <= 8 && n <= presses){\\n            statuses = 4;\\n        }\\n        else{\\n            return statuses = 1;\\n        }\\n        return statuses;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3152375,
                "title": "c-100-beats-easy-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nint flipLights(int n, int presses)\\n{\\n    if(presses==0)  {return 1;}\\n    if(n==1)    {return 2;}\\n    if(n==2 && presses==1)  {return 3;}\\n    if(n==2 || presses==1)  {return 4;}\\n    if(presses==2)  {return 7;}\\n    if(presses>=3)  {return 8;}\\n    return 0;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint flipLights(int n, int presses)\\n{\\n    if(presses==0)  {return 1;}\\n    if(n==1)    {return 2;}\\n    if(n==2 && presses==1)  {return 3;}\\n    if(n==2 || presses==1)  {return 4;}\\n    if(presses==2)  {return 7;}\\n    if(presses>=3)  {return 8;}\\n    return 0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3152363,
                "title": "c-c-o-1-time-and-space-using-if-condition",
                "content": "\\n# *Complexity*\\n- *Time complexity*:\\n`O(1)`\\n- *Space complexity*:\\n`O(1)`\\n\\n# *Code*\\n```\\nclass Solution\\n{\\npublic:\\n    int flipLights(int x, int y)\\n    {\\n        if(y == 0)\\n        {\\n            return 1;\\n        }\\n        if(x == 1)\\n        {\\n            return 2;\\n        }\\n\\n        if(x == 2 && y == 1)\\n        {\\n            return 3;\\n        }\\n        if(x == 2 || y == 1)\\n        {\\n            return 4;\\n        }\\n        if(y == 2)\\n        {\\n            return 7;\\n        }\\n        if(y >= 3)\\n        {\\n            return 8;\\n        }\\n        return 0;\\n    }\\n};\\n```\\nDo upvote for this\\uD83D\\uDE03\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int flipLights(int x, int y)\\n    {\\n        if(y == 0)\\n        {\\n            return 1;\\n        }\\n        if(x == 1)\\n        {\\n            return 2;\\n        }\\n\\n        if(x == 2 && y == 1)\\n        {\\n            return 3;\\n        }\\n        if(x == 2 || y == 1)\\n        {\\n            return 4;\\n        }\\n        if(y == 2)\\n        {\\n            return 7;\\n        }\\n        if(y >= 3)\\n        {\\n            return 8;\\n        }\\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3095593,
                "title": "python-one-line-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust try small cases and find a pattern. \\n\\n# Complexity\\n- Time complexity: ```O(1)```\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: ```O(1)```\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def flipLights(self,n,p):\\n        return [[1,1,1],[2,3,4],[2,4,7],[2,4,8]][min(p,3)][min(n-1,2)]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```O(1)```\n```O(1)```\n```\\nclass Solution:\\n    def flipLights(self,n,p):\\n        return [[1,1,1],[2,3,4],[2,4,7],[2,4,8]][min(p,3)][min(n-1,2)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3067989,
                "title": "brute-forcing-2-4-possibilities",
                "content": "```\\nclass Solution {\\npublic:\\n    void fill( vector<string> &allpossi,string &s)\\n    {\\n        if (s.size()==4)\\n        {\\n            allpossi.push_back(s);\\n            return;\\n        }\\n        s.push_back(\\'0\\');\\n        fill(allpossi,s);\\n        s.pop_back();\\n        s.push_back(\\'1\\');\\n        fill(allpossi,s);\\n        s.pop_back();\\n    }\\n    \\n    void change(string &t,int k)\\n    {\\n        if (k==0)\\n        {\\n            for (int i=0;i<t.size();i++)\\n            {\\n                if (t[i]==\\'0\\')\\n                    t[i]=\\'1\\';\\n                    else\\n                    t[i]=\\'0\\';\\n            }\\n        }\\n        else if (k==1)\\n        {\\n            \\n            \\n             for (int i=0;i<t.size();i++)\\n            {\\n                if ((i+1)%2==0)\\n                {\\n                    \\n                    if (t[i]==\\'0\\')\\n                    t[i]=\\'1\\';\\n                    else\\n                    t[i]=\\'0\\';\\n                    \\n                }\\n            }\\n            \\n        }\\n        else if (k==2)\\n        {\\n            \\n            \\n            \\n            \\n          for (int i=0;i<t.size();i++)\\n            {\\n                if ((i+1)%2==1)\\n                {\\n                    \\n                    if (t[i]==\\'0\\')\\n                    t[i]=\\'1\\';\\n                    else\\n                    t[i]=\\'0\\';\\n                    \\n                }\\n            }\\n            \\n            \\n            \\n            \\n            \\n        }\\n        else if (k==3)\\n        {\\n            for (int i=0;i<t.size();i++)\\n            {\\n                if ((i+1)%3==1)\\n                {\\n                    \\n                    if (t[i]==\\'0\\')\\n                    t[i]=\\'1\\';\\n                    else\\n                    t[i]=\\'0\\';\\n                    \\n                }\\n            }\\n            \\n        }\\n    \\n    }\\n    \\n    int flipLights(int n, int presses) {\\n        // pressing a specific button two times is equivalent to not pressing it at all\\n        unordered_set<string> ans;\\n\\n        \\n        string s=\"\";\\n        vector<string> allpossi;\\n        fill(allpossi,s);\\n        \\n         s=\"\";\\n         for (int i=0;i<n;i++)\\n        {\\n            s+=\\'1\\';\\n        }\\n       // for (auto x:allpossi)\\n         //   cout<<x<<endl;\\n       \\n      for (int i=0;i<allpossi.size();i++)\\n      {\\n          string temp=s;\\n          string ps=allpossi[i];\\n          int count=0;\\n          for (int k=0;k<ps.size();k++)\\n          {\\n              if (ps[k]==\\'1\\')\\n                  count++;\\n          }\\n          if (count>presses)\\n              continue;\\n          if (count==0)\\n          {\\n              cout<<i<<\" \"<<temp<<endl;\\n              if (presses%2==0)\\n              {\\n                  ans.insert(temp);\\n              }\\n              continue;\\n          }\\n          \\n          for (int k=0;k<ps.size();k++)\\n          {\\n              if (ps[k]==\\'1\\')\\n              {\\n                  change(temp,k);\\n                 \\n              }\\n          }\\n       //   if (count==presses) // this is wrong\\n       //   ans.insert(temp);\\n          \\n          \\n          if (count==presses)\\n          {\\n              ans.insert(temp);\\n              continue;\\n          }  //count<presses\\n          \\n          if (presses%2==0)\\n          {\\n              \\n              if(count%2==0)\\n              {\\n                 ans.insert(temp); \\n              }\\n          }\\n          else\\n          {\\n              \\n              ans.insert(temp);\\n              \\n          }\\n          \\n          \\n          \\n      }\\n        \\n      for (auto x:ans)\\n          cout<<x<<endl;\\n        \\n        \\n        return ans.size();\\n            \\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    void fill( vector<string> &allpossi,string &s)\\n    {\\n        if (s.size()==4)\\n        {\\n            allpossi.push_back(s);\\n            return;\\n        }\\n        s.push_back(\\'0\\');\\n        fill(allpossi,s);\\n        s.pop_back();\\n        s.push_back(\\'1\\');\\n        fill(allpossi,s);\\n        s.pop_back();\\n    }\\n    \\n    void change(string &t,int k)\\n    {\\n        if (k==0)\\n        {\\n            for (int i=0;i<t.size();i++)\\n            {\\n                if (t[i]==\\'0\\')\\n                    t[i]=\\'1\\';\\n                    else\\n                    t[i]=\\'0\\';\\n            }\\n        }\\n        else if (k==1)\\n        {\\n            \\n            \\n             for (int i=0;i<t.size();i++)\\n            {\\n                if ((i+1)%2==0)\\n                {\\n                    \\n                    if (t[i]==\\'0\\')\\n                    t[i]=\\'1\\';\\n                    else\\n                    t[i]=\\'0\\';\\n                    \\n                }\\n            }\\n            \\n        }\\n        else if (k==2)\\n        {\\n            \\n            \\n            \\n            \\n          for (int i=0;i<t.size();i++)\\n            {\\n                if ((i+1)%2==1)\\n                {\\n                    \\n                    if (t[i]==\\'0\\')\\n                    t[i]=\\'1\\';\\n                    else\\n                    t[i]=\\'0\\';\\n                    \\n                }\\n            }\\n            \\n            \\n            \\n            \\n            \\n        }\\n        else if (k==3)\\n        {\\n            for (int i=0;i<t.size();i++)\\n            {\\n                if ((i+1)%3==1)\\n                {\\n                    \\n                    if (t[i]==\\'0\\')\\n                    t[i]=\\'1\\';\\n                    else\\n                    t[i]=\\'0\\';\\n                    \\n                }\\n            }\\n            \\n        }\\n    \\n    }\\n    \\n    int flipLights(int n, int presses) {\\n        // pressing a specific button two times is equivalent to not pressing it at all\\n        unordered_set<string> ans;\\n\\n        \\n        string s=\"\";\\n        vector<string> allpossi;\\n        fill(allpossi,s);\\n        \\n         s=\"\";\\n         for (int i=0;i<n;i++)\\n        {\\n            s+=\\'1\\';\\n        }\\n       // for (auto x:allpossi)\\n         //   cout<<x<<endl;\\n       \\n      for (int i=0;i<allpossi.size();i++)\\n      {\\n          string temp=s;\\n          string ps=allpossi[i];\\n          int count=0;\\n          for (int k=0;k<ps.size();k++)\\n          {\\n              if (ps[k]==\\'1\\')\\n                  count++;\\n          }\\n          if (count>presses)\\n              continue;\\n          if (count==0)\\n          {\\n              cout<<i<<\" \"<<temp<<endl;\\n              if (presses%2==0)\\n              {\\n                  ans.insert(temp);\\n              }\\n              continue;\\n          }\\n          \\n          for (int k=0;k<ps.size();k++)\\n          {\\n              if (ps[k]==\\'1\\')\\n              {\\n                  change(temp,k);\\n                 \\n              }\\n          }\\n       //   if (count==presses) // this is wrong\\n       //   ans.insert(temp);\\n          \\n          \\n          if (count==presses)\\n          {\\n              ans.insert(temp);\\n              continue;\\n          }  //count<presses\\n          \\n          if (presses%2==0)\\n          {\\n              \\n              if(count%2==0)\\n              {\\n                 ans.insert(temp); \\n              }\\n          }\\n          else\\n          {\\n              \\n              ans.insert(temp);\\n              \\n          }\\n          \\n          \\n          \\n      }\\n        \\n      for (auto x:ans)\\n          cout<<x<<endl;\\n        \\n        \\n        return ans.size();\\n            \\n    }\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3044902,
                "title": "identify-the-states-of-bulb-for-n-1-2-3-o-1",
                "content": "```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        \"\"\"\\n        the trick to problem is that only 3 bulbs are indicative of all the n bulbs\\n        this is because, sequence repeats every 3 bulbs\\n\\n        if n>3, then we can consider sequence of 3 bubls since that will reprsent the \\n        entire sequence\\n\\n        (1, 1, 1) -> (0, 0, 0), (0, 1, 0), (1, 0, 1), (0, 1, 1) [for n>=3, k=1, ans=4]\\n\\n        (0, 0, 0) -> (1, 1, 1), (1, 0, 1), (0, 1, 0), (1, 0, 0)\\n        (0, 1, 0) -> (1, 0, 1), (1, 1, 1), (0, 0, 0), (1, 1, 0)\\n        (1, 0, 1) -> (0, 1, 0), (0, 0, 0), (1, 1, 1), (0, 0, 1)\\n        (0, 1, 1) -> (1, 0, 0), (1, 1, 0), (0, 0, 1), (1, 1, 1) [for n>=3, k=2, ans=7]\\n\\n        for n>=3, k>=3, there will be one more state added i.e. (0, 1, 1)\\n        along with the other 7 states, so ans=8\\n\\n        when n = 1, k>=1\\n        (1) -> (0), (1), (0), (0) [for n=1, for every k, ans=2]\\n\\n        when n=2, k=1\\n        (1,1) -> (0, 0), (1, 0), (0, 1), (0, 1) [for n=2, k=1, ans=3]\\n\\n        (0, 0) -> (1, 1), (1, 0), (0, 1), (0, 0)\\n        (1, 0) -> (0, 1), (1, 1), (0, 0), (0, 0)\\n        (0, 1) -> (1, 0), (1, 1), (0, 0), (1, 1) [for n=2, k>=2, ans=4]\\n        \"\"\"\\n        if presses == 0:\\n            return 1\\n        if n == 1:\\n            return 2\\n        if n == 2:\\n            if presses==1:\\n                return 3\\n            else:\\n                return 4\\n        if n >= 3:\\n            if presses == 1:\\n                return 4\\n            elif presses == 2:\\n                return 7\\n            else:\\n                return 8\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        \"\"\"\\n        the trick to problem is that only 3 bulbs are indicative of all the n bulbs\\n        this is because, sequence repeats every 3 bulbs\\n\\n        if n>3, then we can consider sequence of 3 bubls since that will reprsent the \\n        entire sequence\\n\\n        (1, 1, 1) -> (0, 0, 0), (0, 1, 0), (1, 0, 1), (0, 1, 1) [for n>=3, k=1, ans=4]\\n\\n        (0, 0, 0) -> (1, 1, 1), (1, 0, 1), (0, 1, 0), (1, 0, 0)\\n        (0, 1, 0) -> (1, 0, 1), (1, 1, 1), (0, 0, 0), (1, 1, 0)\\n        (1, 0, 1) -> (0, 1, 0), (0, 0, 0), (1, 1, 1), (0, 0, 1)\\n        (0, 1, 1) -> (1, 0, 0), (1, 1, 0), (0, 0, 1), (1, 1, 1) [for n>=3, k=2, ans=7]\\n\\n        for n>=3, k>=3, there will be one more state added i.e. (0, 1, 1)\\n        along with the other 7 states, so ans=8\\n\\n        when n = 1, k>=1\\n        (1) -> (0), (1), (0), (0) [for n=1, for every k, ans=2]\\n\\n        when n=2, k=1\\n        (1,1) -> (0, 0), (1, 0), (0, 1), (0, 1) [for n=2, k=1, ans=3]\\n\\n        (0, 0) -> (1, 1), (1, 0), (0, 1), (0, 0)\\n        (1, 0) -> (0, 1), (1, 1), (0, 0), (0, 0)\\n        (0, 1) -> (1, 0), (1, 1), (0, 0), (1, 1) [for n=2, k>=2, ans=4]\\n        \"\"\"\\n        if presses == 0:\\n            return 1\\n        if n == 1:\\n            return 2\\n        if n == 2:\\n            if presses==1:\\n                return 3\\n            else:\\n                return 4\\n        if n >= 3:\\n            if presses == 1:\\n                return 4\\n            elif presses == 2:\\n                return 7\\n            else:\\n                return 8\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2979329,
                "title": "python3-o-1-time-and-space-complexity",
                "content": "I claim that, if presses and n are both at least 3, the return is always 8.\\n\\nWith buttons 1, 2, and 3 we have 4 obvious possible states:\\n\\n- all off\\n- all on\\n- evens only\\n- odds only\\n\\nIf we apply button 4 to each of the above we can get:\\n- [3k + 1] are on\\n- [3k + 1] are off\\n- [3k + 1] are on for odds only; other evens are lit\\n- [3k + 1] are on for evens only; other odds are lit\\n\\nFrom each of these states, it is clear that pressing \\'4\\' from here will just return to the state before it was pressed. Under each of the four conditions, what happens when button 1, 2, or 3 is pressed?\\n\\n- first condition above:\\n    - Button 1: toggles to second condition\\n    - Button 2: toggles to the third condition\\n    - Button 3: toggles to the fourth condition\\n- second condition:\\n    - Button 1: toggles to first condition\\n    - Button 2: toggles to fourth condition\\n    - Button 3: toggles to third condition\\n- third condition:\\n    - Button 1: toggles to fourth condition\\n    - Button 2: toggles to first condition\\n    - Button 3: toggles to second condition\\n- fourth condition:\\n    - Button 1: toggles to third condition\\n    - Button 2: toggles to second condition\\n    - Button 3: toggles to the first conditions\\n\\nSo there are 8 possible states achievable given any number of button presses (at least 3) when there are at least 3 bulbs. Per the above, each of these states can be achieved by at most 3 presses.\\n```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        if presses == 0: return 1\\n        if n == 1: return 2\\n        elif n == 2: \\n            if presses == 1:\\n                return 3\\n            else: \\n                return 4\\n        elif presses == 1: return 4\\n        elif presses == 2: return 7\\n        else: return 8\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        if presses == 0: return 1\\n        if n == 1: return 2\\n        elif n == 2: \\n            if presses == 1:\\n                return 3\\n            else: \\n                return 4\\n        elif presses == 1: return 4\\n        elif presses == 2: return 7\\n        else: return 8\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2881799,
                "title": "python3-modified-bfs",
                "content": "# Intuition\\nRepresent \"state\" with 4 lightbulbs, then just flip them and see what we get.  If there\\'s less lightbulbs than 4, then just hide them with a bitmask (bm)\\n\\nPresses bumps up against the pidgeonhole problem.  The 5th toggle, necessarily is going to be reverting a previous button press, therefore we can infer that any state achieved by an EVEN number >=4 can also be achieved by exactly 4 and any odd number higher than 4 can be represented by 5.  So there\\'s no need to go further than that.\\n\\nops variable represents bits corresponding to which lightbulbs will be toggled with each button press.  4 buttons = 4 operations\\n\\n# Note\\nYes, I am aware I could copy my output and put it into a lookup table for O(1), I just don\\'t find that as interesting\\n\\n# Code\\n```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        n = min(4, n)\\n        if presses > 4:\\n            presses = 4 + presses % 2\\n\\n        ops = [15, 5, 10, 9]\\n\\n        items = [(0, 0)]\\n        \\n        found = set()\\n\\n        bm = (1<<n) - 1\\n\\n        while items:\\n            p, s = items.pop(0)\\n            if p == presses:\\n                found.add(s & bm)\\n            else:\\n                for o in ops:\\n                    items.append((p+1, s^o))\\n        \\n        return len(found)\\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        n = min(4, n)\\n        if presses > 4:\\n            presses = 4 + presses % 2\\n\\n        ops = [15, 5, 10, 9]\\n\\n        items = [(0, 0)]\\n        \\n        found = set()\\n\\n        bm = (1<<n) - 1\\n\\n        while items:\\n            p, s = items.pop(0)\\n            if p == presses:\\n                found.add(s & bm)\\n            else:\\n                for o in ops:\\n                    items.append((p+1, s^o))\\n        \\n        return len(found)\\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2694529,
                "title": "python-o-1-solution-faster-than-84",
                "content": "```\\n\\'\\'\\'\\nWe only need to consider special cases which n<=2 and m < 3. When n >2 and m >=3, the result is 8.\\nThe four buttons:\\n\\nFlip all the lights.\\nFlip lights with even numbers.\\nFlip lights with odd numbers.\\nFlip lights with (3k + 1) numbers, k = 0, 1, 2, ...\\nIf we use button 1 and 2, it equals to use button 3.\\nSimilarly...\\n\\n1 + 2 --> 3, 1 + 3 --> 2, 2 + 3 --> 1\\nSo, there are only 8 cases.\\n\\nAll_on, 1, 2, 3, 4, 1+4, 2+4, 3+4\\n\\nAnd we can get all the cases, when n>2 and m>=3.\\n\\'\\'\\'\\n\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        if presses == 0: \\n            return 1\\n        if n == 1: \\n            return 2\\n        if n == 2 and presses == 1: \\n            return 3\\n        if n == 2: \\n            return 4\\n        if presses == 1: \\n            return 4\\n        if presses == 2: \\n            return 7\\n        if presses >= 3: \\n            return 8\\n        return 8\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n\\'\\'\\'\\nWe only need to consider special cases which n<=2 and m < 3. When n >2 and m >=3, the result is 8.\\nThe four buttons:\\n\\nFlip all the lights.\\nFlip lights with even numbers.\\nFlip lights with odd numbers.\\nFlip lights with (3k + 1) numbers, k = 0, 1, 2, ...\\nIf we use button 1 and 2, it equals to use button 3.\\nSimilarly...\\n\\n1 + 2 --> 3, 1 + 3 --> 2, 2 + 3 --> 1\\nSo, there are only 8 cases.\\n\\nAll_on, 1, 2, 3, 4, 1+4, 2+4, 3+4\\n\\nAnd we can get all the cases, when n>2 and m>=3.\\n\\'\\'\\'\\n\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        if presses == 0: \\n            return 1\\n        if n == 1: \\n            return 2\\n        if n == 2 and presses == 1: \\n            return 3\\n        if n == 2: \\n            return 4\\n        if presses == 1: \\n            return 4\\n        if presses == 2: \\n            return 7\\n        if presses >= 3: \\n            return 8\\n        return 8\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2631375,
                "title": "c-amazing-question-with-ad-hoc-o-1-solution",
                "content": "Great question indeed.\\n\\nHere\\'s the logic:\\n\\nLet 0 = switched off, 1 = switched on.\\n\\n* You don\\'t have to simulate the entire process (e.g. press buttons 1000 times, for each time, randomly select button 1 to 4).\\n\\n* Instead, notice the **base cases**: \\n\\n\\t1. If you press 1 button **even** number of times (e.g. 0, 2, 4, ...), **the effect cancelled out**. (on->off->on->off...->on->off). So, the initial state (all switched off) = \"00...000\" is possible.\\n\\t2. In contrast, If you press 1 button **odd** number of times, it is **equivalent to pressing 1 of the four buttons 1 time.**\\n\\n* Next, you shall notice that you can press 2, 3 or 4 **distinct** buttons odd number of times to create **distinct** states. The exact figure of pressing button one to four is irrelevant.\\n\\n\\t* For example, if you have a press sequence like \"11233223321244\", that\\'s equivalent to pressing \"12\". \\n\\n* Also, Recall simple combination, 4C2 = 6, 4C3 = 4, 4C4 = 1.\\n\\n* And notices that:\\n\\n\\t1. If the **even number of counts >= 2**, then you can press two buttons odd number of times.\\n\\ta. For example, if number of counts = 4, you can press one button 3 times, and the second button 1 time.\\n\\nBased on all those rules, you can derive the conditionals easily.\\n\\n```cpp\\nclass Solution {\\npublic:\\n    set<string> res;\\n    string opt1(string s) {\\n        for (int i = 0; i < s.length(); i++) { s[i] = s[i] == \\'0\\' ? \\'1\\' : \\'0\\'; }\\n        return s;\\n    }\\n    string opt2(string s) {\\n        for (int i = 0; i < s.length(); i+=2) { s[i] = s[i] == \\'0\\' ? \\'1\\' : \\'0\\'; }\\n        return s;\\n    }\\n    string opt3(string s) {\\n        for (int i = 1; i < s.length(); i+=2) { s[i] = s[i] == \\'0\\' ? \\'1\\' : \\'0\\'; }\\n        return s;\\n    }\\n    string opt4(string s) {\\n        int k;\\n        int len = s.length();\\n        for (int i = 0; i < len; i++) { k = 3 * i; if (k >= len) { break; } s[k] = s[k] == \\'0\\' ? \\'1\\' : \\'0\\'; }\\n        return s;\\n    }\\n    int flipLights(int n, int p) {\\n        string init(n, \\'0\\');\\n        res.clear();\\n        if (p == 0)\\n            return 1;\\n        if ((p & 1) == 0) {\\n            res.insert(init);\\n        }\\n        if ((p & 1) != 0) {\\n            res.insert(opt1(init));\\n            res.insert(opt2(init));\\n            res.insert(opt3(init));\\n            res.insert(opt4(init));\\n        }\\n        if (p >= 2) {\\n            if ((p >= 2 && p % 2 == 0 && ((p / 2) & 1) != 0) || \\n                (p >= 4 && ((p - 2) & 1) == 0) ||\\n                (p >= 6 && ((p - 4) & 1) == 0)) {\\n                res.insert(opt2(opt1(init)));\\n                res.insert(opt3(opt1(init)));\\n                res.insert(opt4(opt1(init)));\\n                res.insert(opt3(opt2(init)));\\n                res.insert(opt4(opt2(init)));\\n                res.insert(opt4(opt3(init)));\\n            }\\n        }\\n        if (p >= 3 && (p & 1) != 0) {\\n            res.insert(opt3(opt2(opt1(init))));\\n            res.insert(opt4(opt2(opt1(init))));\\n            res.insert(opt4(opt3(opt1(init))));\\n            res.insert(opt4(opt3(opt2(init))));            \\n        }\\n        if (p >= 4) {\\n            if ((p % 4 == 0 && ((p / 4) & 1) != 0) ||\\n                (((p - 3) & 1) != 0) ||\\n                (((p - 2) & 1) == 0) ||\\n                (((p - 1) & 1) != 0)) {\\n                res.insert(opt4(opt3(opt2(opt1(init)))));\\n            }\\n        }\\n        return res.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    set<string> res;\\n    string opt1(string s) {\\n        for (int i = 0; i < s.length(); i++) { s[i] = s[i] == \\'0\\' ? \\'1\\' : \\'0\\'; }\\n        return s;\\n    }\\n    string opt2(string s) {\\n        for (int i = 0; i < s.length(); i+=2) { s[i] = s[i] == \\'0\\' ? \\'1\\' : \\'0\\'; }\\n        return s;\\n    }\\n    string opt3(string s) {\\n        for (int i = 1; i < s.length(); i+=2) { s[i] = s[i] == \\'0\\' ? \\'1\\' : \\'0\\'; }\\n        return s;\\n    }\\n    string opt4(string s) {\\n        int k;\\n        int len = s.length();\\n        for (int i = 0; i < len; i++) { k = 3 * i; if (k >= len) { break; } s[k] = s[k] == \\'0\\' ? \\'1\\' : \\'0\\'; }\\n        return s;\\n    }\\n    int flipLights(int n, int p) {\\n        string init(n, \\'0\\');\\n        res.clear();\\n        if (p == 0)\\n            return 1;\\n        if ((p & 1) == 0) {\\n            res.insert(init);\\n        }\\n        if ((p & 1) != 0) {\\n            res.insert(opt1(init));\\n            res.insert(opt2(init));\\n            res.insert(opt3(init));\\n            res.insert(opt4(init));\\n        }\\n        if (p >= 2) {\\n            if ((p >= 2 && p % 2 == 0 && ((p / 2) & 1) != 0) || \\n                (p >= 4 && ((p - 2) & 1) == 0) ||\\n                (p >= 6 && ((p - 4) & 1) == 0)) {\\n                res.insert(opt2(opt1(init)));\\n                res.insert(opt3(opt1(init)));\\n                res.insert(opt4(opt1(init)));\\n                res.insert(opt3(opt2(init)));\\n                res.insert(opt4(opt2(init)));\\n                res.insert(opt4(opt3(init)));\\n            }\\n        }\\n        if (p >= 3 && (p & 1) != 0) {\\n            res.insert(opt3(opt2(opt1(init))));\\n            res.insert(opt4(opt2(opt1(init))));\\n            res.insert(opt4(opt3(opt1(init))));\\n            res.insert(opt4(opt3(opt2(init))));            \\n        }\\n        if (p >= 4) {\\n            if ((p % 4 == 0 && ((p / 4) & 1) != 0) ||\\n                (((p - 3) & 1) != 0) ||\\n                (((p - 2) & 1) == 0) ||\\n                (((p - 1) & 1) != 0)) {\\n                res.insert(opt4(opt3(opt2(opt1(init)))));\\n            }\\n        }\\n        return res.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2615933,
                "title": "python-top-down-dp",
                "content": "```\\nfrom functools import cache\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        state = tuple([True]*min(6, n))\\n        states = set()\\n        def flip(v, idxs):\\n            for i in idxs:\\n                v[i] = not v[i]\\n        @cache\\n        def dfs(v, press_cnt):\\n            if press_cnt == presses:\\n                if v not in states: \\n                    states.add(v)\\n                return\\n            w = list(v)\\n            flip(w, range(len(w)))\\n            dfs(tuple(w), press_cnt + 1)\\n            w = list(v)\\n            flip(w, range(0,len(w),2))\\n            dfs(tuple(w), press_cnt + 1)\\n            w = list(v)\\n            flip(w, range(1,len(w),2))\\n            dfs(tuple(w), press_cnt + 1)\\n            w = list(v)\\n            flip(w, range(0,len(w),3))\\n            dfs(tuple(w), press_cnt + 1)\\n        dfs(state, 0)\\n        return len(states)\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfrom functools import cache\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        state = tuple([True]*min(6, n))\\n        states = set()\\n        def flip(v, idxs):\\n            for i in idxs:\\n                v[i] = not v[i]\\n        @cache\\n        def dfs(v, press_cnt):\\n            if press_cnt == presses:\\n                if v not in states: \\n                    states.add(v)\\n                return\\n            w = list(v)\\n            flip(w, range(len(w)))\\n            dfs(tuple(w), press_cnt + 1)\\n            w = list(v)\\n            flip(w, range(0,len(w),2))\\n            dfs(tuple(w), press_cnt + 1)\\n            w = list(v)\\n            flip(w, range(1,len(w),2))\\n            dfs(tuple(w), press_cnt + 1)\\n            w = list(v)\\n            flip(w, range(0,len(w),3))\\n            dfs(tuple(w), press_cnt + 1)\\n        dfs(state, 0)\\n        return len(states)\\n",
                "codeTag": "Java"
            },
            {
                "id": 2586762,
                "title": "bulb-switcher-easy-easy-approch-best-solution",
                "content": "class Solution {\\npublic:\\n    int flipLights(int n, int p) {\\n        if (p == 0) {\\n            return 1;\\n        }\\n        if (n == 1) {\\n            return 2;\\n        }\\n        if (n == 2) {\\n            return 3 + (p > 1);\\n        }\\n        if (p == 1) {\\n            return 4;\\n        }\\n        if (p == 2) {\\n            return 7;\\n        }\\n        return 8;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int flipLights(int n, int p) {\\n        if (p == 0) {\\n            return 1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2448655,
                "title": "bulb-switcher-ii-0ms",
                "content": "\\n    public int flipLights(int n, int p) {\\n    if (p == 0) \\n      return 1;\\n    if (n == 1)\\n      return 2;\\n    if (n == 2){\\n        if(p==1)\\n            return 3;\\n        return 4;\\n    }\\n    if (p== 1)\\n      return 4;\\n    else{\\n        if(p==2)\\n            return 7;\\n        return 8;\\n    }\\n  }\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "\\n    public int flipLights(int n, int p) {\\n    if (p == 0) \\n      return 1;\\n    if (n == 1)\\n      return 2;\\n    if (n == 2){\\n        if(p==1)\\n            return 3;\\n        return 4;\\n    }\\n    if (p== 1)\\n      return 4;\\n    else{\\n        if(p==2)\\n            return 7;\\n        return 8;\\n    }\\n  }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2437696,
                "title": "easy-short-efficient-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int p) {\\n        if (p == 0) {\\n            return 1;\\n        }\\n        if (n == 1) {\\n            return 2;\\n        }\\n        if (n == 2) {\\n            return 3 + (p > 1);\\n        }\\n        if (p == 1) {\\n            return 4;\\n        }\\n        if (p == 2) {\\n            return 7;\\n        }\\n        return 8;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int p) {\\n        if (p == 0) {\\n            return 1;\\n        }\\n        if (n == 1) {\\n            return 2;\\n        }\\n        if (n == 2) {\\n            return 3 + (p > 1);\\n        }\\n        if (p == 1) {\\n            return 4;\\n        }\\n        if (p == 2) {\\n            return 7;\\n        }\\n        return 8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2426754,
                "title": "my-solution",
                "content": "```\\n/**\\n * Time Complexity: O(1)\\n * Space Complexity: O(1)\\n */\\nclass Solution {\\n public:\\n  int flipLights(const int n, const int presses) {\\n    if (presses == 0) {\\n      /**\\n       * all bulbs are turned on\\n       */\\n      return 1;\\n    }\\n    if (n == 1) {\\n      /**\\n       * the only bulb is turned on or off, since any button can be pressed at least once\\n       */\\n      return 2;\\n    }\\n    if (n == 2) {\\n      /**\\n       * 1. if `presses` is `1`, pressing button 3 and pressing button 4 have the same effect,\\n       *    so the number of different possible statuses after performing one button press is 3,\\n       *    that is i) press the button 1, ii) press the button 2, iii) press the button 3\\n       * 2. if `presses` is `2`, all 4 different possible statuses can be achieved finally.\\n       */\\n      return presses == 1 ? 3 : 4;\\n    }\\n    if (presses == 1) {\\n      /**\\n       * 1. press button 1 once\\n       * 2. press button 2 once\\n       * 3. press button 3 once\\n       * 4. press button 4 once\\n       */\\n      return 4;\\n    }\\n    /**\\n     * there are 8 possible statuses\\n     * 1. all bulbs are turned on\\n     * 2. press button 1\\n     * 3. press button 2\\n     * 4. press button 3\\n     * 5. press button 4\\n     * 6. press button 1 and 4\\n     * 7. press button 2 and 4\\n     * 8. press button 3 and 4\\n     *\\n     * a) if `presses` is 2, all 8 possible statuses except `5` can be achieved\\n     * b) if `presses` is greater than 2, all 8 possible statuses can be achieved\\n     */\\n    return presses == 2 ? 7 : 8;\\n  }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Time Complexity: O(1)\\n * Space Complexity: O(1)\\n */\\nclass Solution {\\n public:\\n  int flipLights(const int n, const int presses) {\\n    if (presses == 0) {\\n      /**\\n       * all bulbs are turned on\\n       */\\n      return 1;\\n    }\\n    if (n == 1) {\\n      /**\\n       * the only bulb is turned on or off, since any button can be pressed at least once\\n       */\\n      return 2;\\n    }\\n    if (n == 2) {\\n      /**\\n       * 1. if `presses` is `1`, pressing button 3 and pressing button 4 have the same effect,\\n       *    so the number of different possible statuses after performing one button press is 3,\\n       *    that is i) press the button 1, ii) press the button 2, iii) press the button 3\\n       * 2. if `presses` is `2`, all 4 different possible statuses can be achieved finally.\\n       */\\n      return presses == 1 ? 3 : 4;\\n    }\\n    if (presses == 1) {\\n      /**\\n       * 1. press button 1 once\\n       * 2. press button 2 once\\n       * 3. press button 3 once\\n       * 4. press button 4 once\\n       */\\n      return 4;\\n    }\\n    /**\\n     * there are 8 possible statuses\\n     * 1. all bulbs are turned on\\n     * 2. press button 1\\n     * 3. press button 2\\n     * 4. press button 3\\n     * 5. press button 4\\n     * 6. press button 1 and 4\\n     * 7. press button 2 and 4\\n     * 8. press button 3 and 4\\n     *\\n     * a) if `presses` is 2, all 8 possible statuses except `5` can be achieved\\n     * b) if `presses` is greater than 2, all 8 possible statuses can be achieved\\n     */\\n    return presses == 2 ? 7 : 8;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2352345,
                "title": "beats-100-solns-state-diagram-for-understanding",
                "content": "```\\n---------------------------STATE DIAGRAM --------------------------\\n\\na* means a some p times (aaa...a)\\n\\n0* --on step 1-->1*\\n0* --on step 2-->(01)*\\n0* --on step 3-->(10)*\\n0* --on step 4-->(100)*\\n\\n1* --on step 1-->0*\\n1* --on step 2-->(10)*\\n1* --on step 3-->(01)*\\n1* --on step 4-->(011)*\\n\\n(01)* --on step 1-->(10)*\\n(01)* --on step 2-->(0)*\\n(01)* --on step 3-->(1)*\\n(01)* --on step 4-->(110001)*\\n\\n(10)* --on step 1-->(01)*\\n(10)* --on step 2-->(1)*\\n(10)* --on step 3-->(0)*\\n(10)* --on step 4-->(001110)*\\n\\n(011)* --on step 1-->(100)*\\n(011)* --on step 2-->(001110)*\\n(011)* --on step 3-->(110001)*\\n(011)* --on step 4-->(1)*\\n\\n(100)* --on step 1-->(011)*\\n(100)* --on step 2-->(110001)*\\n(100)* --on step 3-->(001110)*\\n(100)* --on step 4-->(0)*\\n\\n(110001)* --on step 1-->(001110)*\\n(110001)* --on step 2-->(100)*\\n(110001)* --on step 3-->(011)*\\n(110001)* --on step 4-->(01)*\\n\\n(001110)* --on step 1-->(110001)*\\n(001110)* --on step 2-->(011)*\\n(001110)* --on step 3-->(100)*\\n(001110)* --on step 4-->(10)*\\n\\n\\n\\nso there a 8 states => 0, 1, 01, 10, 100, 011, 110001, 001110\\n\\nif n==1\\n\\t0 = 01 = 011 = 001110\\n\\t1 = 10 = 100 = 110001\\nif n==2\\n\\t0 = 001110\\n\\t1 = 110001\\n\\t01, 10, 100, 011 are distinct states\\nif n>=3\\n\\tall states are different\\nif presses == 0\\n\\tthere is only 1 state i.e 0*\\nif presses == 1\\n\\tu can reach 4 states from 0*\\nif presses == 2\\n\\tu can reach 7 states from 0*\\nif presses == 3\\n\\tu can reach all 8 states from 0*\\nbut remember among these s states some may be common depending on n value as stated above. Have fun!!\\n\\n```\\n\\n```\\n/*code*/\\nclass Solution {\\npublic:\\n    int flipLights(int n, int k) {\\n        if(k == 0){\\n            return 1;\\n        }\\n        if(n == 1){\\n            return 2;\\n        } else if(n == 2){\\n            if(k == 1){\\n                return 3;\\n            } else {\\n                return 4;                \\n            }\\n        } else {\\n            if(k == 1){\\n                return 4;\\n            } else if(k == 2){\\n                return 7;\\n            }else {\\n                return 8;\\n            }\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\n---------------------------STATE DIAGRAM --------------------------\\n\\na* means a some p times (aaa...a)\\n\\n0* --on step 1-->1*\\n0* --on step 2-->(01)*\\n0* --on step 3-->(10)*\\n0* --on step 4-->(100)*\\n\\n1* --on step 1-->0*\\n1* --on step 2-->(10)*\\n1* --on step 3-->(01)*\\n1* --on step 4-->(011)*\\n\\n(01)* --on step 1-->(10)*\\n(01)* --on step 2-->(0)*\\n(01)* --on step 3-->(1)*\\n(01)* --on step 4-->(110001)*\\n\\n(10)* --on step 1-->(01)*\\n(10)* --on step 2-->(1)*\\n(10)* --on step 3-->(0)*\\n(10)* --on step 4-->(001110)*\\n\\n(011)* --on step 1-->(100)*\\n(011)* --on step 2-->(001110)*\\n(011)* --on step 3-->(110001)*\\n(011)* --on step 4-->(1)*\\n\\n(100)* --on step 1-->(011)*\\n(100)* --on step 2-->(110001)*\\n(100)* --on step 3-->(001110)*\\n(100)* --on step 4-->(0)*\\n\\n(110001)* --on step 1-->(001110)*\\n(110001)* --on step 2-->(100)*\\n(110001)* --on step 3-->(011)*\\n(110001)* --on step 4-->(01)*\\n\\n(001110)* --on step 1-->(110001)*\\n(001110)* --on step 2-->(011)*\\n(001110)* --on step 3-->(100)*\\n(001110)* --on step 4-->(10)*\\n\\n\\n\\nso there a 8 states => 0, 1, 01, 10, 100, 011, 110001, 001110\\n\\nif n==1\\n\\t0 = 01 = 011 = 001110\\n\\t1 = 10 = 100 = 110001\\nif n==2\\n\\t0 = 001110\\n\\t1 = 110001\\n\\t01, 10, 100, 011 are distinct states\\nif n>=3\\n\\tall states are different\\nif presses == 0\\n\\tthere is only 1 state i.e 0*\\nif presses == 1\\n\\tu can reach 4 states from 0*\\nif presses == 2\\n\\tu can reach 7 states from 0*\\nif presses == 3\\n\\tu can reach all 8 states from 0*\\nbut remember among these s states some may be common depending on n value as stated above. Have fun!!\\n\\n```\n```\\n/*code*/\\nclass Solution {\\npublic:\\n    int flipLights(int n, int k) {\\n        if(k == 0){\\n            return 1;\\n        }\\n        if(n == 1){\\n            return 2;\\n        } else if(n == 2){\\n            if(k == 1){\\n                return 3;\\n            } else {\\n                return 4;                \\n            }\\n        } else {\\n            if(k == 1){\\n                return 4;\\n            } else if(k == 2){\\n                return 7;\\n            }else {\\n                return 8;\\n            }\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2342649,
                "title": "simple-swift-solution-with-explanation-beats-100",
                "content": "## Code \\n\\n```\\nclass Solution {\\n    func flipLights(_ n: Int, _ presses: Int) -> Int {\\n        if n < 3 {\\n            return min(1 << n, [1, 3, 4][min(presses, 2)])\\n        }\\n        return [1, 4, 7, 8][min(presses, 3)]\\n    }\\n}\\n```\\n\\n## Explanation\\n\\n1. If n < 3, then the answer is the minimum of the two possible answers:\\n    a. 1 << n, which is the number of lights that are on if all are off\\n    b. [1, 3, 4][min(presses, 2)], which is the number of lights that are on if only the first and last are off\\n2. If n >= 3, then the answer is the minimum of the three possible answers:\\n    a. [1, 4, 7, 8][min(presses, 3)], which is the number of lights that are on if only the first, second, and last are off\\n    b. 1 << n, which is the number of lights that are on if all are off\\n    c. [1, 3, 4][min(presses, 2)], which is the number of lights that are on if only the first and last are off",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func flipLights(_ n: Int, _ presses: Int) -> Int {\\n        if n < 3 {\\n            return min(1 << n, [1, 3, 4][min(presses, 2)])\\n        }\\n        return [1, 4, 7, 8][min(presses, 3)]\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2339209,
                "title": "c-simulation-no-math-alternative-solution-0ms",
                "content": "# C++ Simulation, no math, alternative solution\\n\\nI do like the pure math solutions. \\nHere, I just want to show that we have an alternative (to the math ones), and that the plain old simulation method works, and it also runs fast in 0ms.\\n\\n```\\n// Idea / Approach: simulation we need only 4 bulbs 1..4 to cover all cases.\\nclass Solution { // _Simulation\\n    static unordered_set<uint8_t> simulateStep(const unordered_set<uint8_t>& states, uint8_t mask) {\\n        auto op1 = [](uint8_t x) { return x ^ 0x0f; };\\n        auto op2 = [](uint8_t x) { return x ^ 0b1010; };\\n        auto op3 = [](uint8_t x) { return x ^ 0b0101; };\\n        auto op4 = [](uint8_t x) { return x ^ 0b1001; };\\n\\n        unordered_set<uint8_t> res;\\n        for (auto x : states) {\\n            res.insert(op1(x) & mask);\\n            res.insert(op2(x) & mask);\\n            res.insert(op3(x) & mask);\\n            res.insert(op4(x) & mask);\\n        }\\n        return res;\\n    }\\n\\npublic:\\n    int flipLights(int n, int presses) {\\n        if (presses == 0) {\\n            return 1;\\n        }\\n\\n        uint8_t mask = 0x0F;\\n        if (n == 1) {\\n            mask = 1;\\n        } else if (n == 2) {\\n            mask = 0b11;\\n        } else if (n == 3) {\\n            mask = 0b111;\\n        }\\n        unordered_set<uint8_t> reached; // reached states\\n        reached.insert(0x0F & mask);\\n\\t\\t// if presses > 4, then there must be p-4 presses that are cancelling each other, and not\\n        // creating new states.\\n        // so we can max it out at 4.\\n        for (int i = 0; i < min(4, presses); ++i) {\\n            reached = simulateStep(reached, mask);\\n        }\\n        return reached.size();\\n    }\\n};\\n```\\n\\n\\n",
                "solutionTags": [
                    "C",
                    "Simulation"
                ],
                "code": "```\\n// Idea / Approach: simulation we need only 4 bulbs 1..4 to cover all cases.\\nclass Solution { // _Simulation\\n    static unordered_set<uint8_t> simulateStep(const unordered_set<uint8_t>& states, uint8_t mask) {\\n        auto op1 = [](uint8_t x) { return x ^ 0x0f; };\\n        auto op2 = [](uint8_t x) { return x ^ 0b1010; };\\n        auto op3 = [](uint8_t x) { return x ^ 0b0101; };\\n        auto op4 = [](uint8_t x) { return x ^ 0b1001; };\\n\\n        unordered_set<uint8_t> res;\\n        for (auto x : states) {\\n            res.insert(op1(x) & mask);\\n            res.insert(op2(x) & mask);\\n            res.insert(op3(x) & mask);\\n            res.insert(op4(x) & mask);\\n        }\\n        return res;\\n    }\\n\\npublic:\\n    int flipLights(int n, int presses) {\\n        if (presses == 0) {\\n            return 1;\\n        }\\n\\n        uint8_t mask = 0x0F;\\n        if (n == 1) {\\n            mask = 1;\\n        } else if (n == 2) {\\n            mask = 0b11;\\n        } else if (n == 3) {\\n            mask = 0b111;\\n        }\\n        unordered_set<uint8_t> reached; // reached states\\n        reached.insert(0x0F & mask);\\n\\t\\t// if presses > 4, then there must be p-4 presses that are cancelling each other, and not\\n        // creating new states.\\n        // so we can max it out at 4.\\n        for (int i = 0; i < min(4, presses); ++i) {\\n            reached = simulateStep(reached, mask);\\n        }\\n        return reached.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2309835,
                "title": "c-commented",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n    //Regardless how many n lightbulbs there are with initial state ON=>only 1 state\\n        if (presses==0) return 1;   \\n    //[ flip all, flip odd, or flip 3k+1 ] is OFF.\\n    //[ flip even ] is ON \\n        if (n==1)\\n    //Either this one lightbulb is ON or OFF after m=1 operations. Any additional operations revert the lightbulb to a previous state\\n            if (presses>=1) return 2;\\n                 /*  0 0 ( after 1 operation: flip all )\\n                     0 1 ( after 1 operation: flip odd or 3k+1 )\\n                     1 0 ( after 1 operation: flip even )\\n                  */\\n        if (n==2){\\n            if (presses==1) return 3;\\n            /*\\n               00 or 01 or 10 or 11 possible \\n            */\\n            if (presses>=2) return 4;\\n        }\\n        if (n>=3){\\n            //000 or 010 or 011 or 101\\n            if (presses==1) return 4;\\n            //000 or 001 or 010 or 100 or 101 or 110 or 111\\n            if (presses==2) return 7;\\n            //000 or 001 or 010 or 011 or 100 or 101 or 110 or 111\\n            if (presses>=3) return 8;\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n    //Regardless how many n lightbulbs there are with initial state ON=>only 1 state\\n        if (presses==0) return 1;   \\n    //[ flip all, flip odd, or flip 3k+1 ] is OFF.\\n    //[ flip even ] is ON \\n        if (n==1)\\n    //Either this one lightbulb is ON or OFF after m=1 operations. Any additional operations revert the lightbulb to a previous state\\n            if (presses>=1) return 2;\\n                 /*  0 0 ( after 1 operation: flip all )\\n                     0 1 ( after 1 operation: flip odd or 3k+1 )\\n                     1 0 ( after 1 operation: flip even )\\n                  */\\n        if (n==2){\\n            if (presses==1) return 3;\\n            /*\\n               00 or 01 or 10 or 11 possible \\n            */\\n            if (presses>=2) return 4;\\n        }\\n        if (n>=3){\\n            //000 or 010 or 011 or 101\\n            if (presses==1) return 4;\\n            //000 or 001 or 010 or 100 or 101 or 110 or 111\\n            if (presses==2) return 7;\\n            //000 or 001 or 010 or 011 or 100 or 101 or 110 or 111\\n            if (presses>=3) return 8;\\n        }\\n        \\n        return 0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2214239,
                "title": "python-simple-logic",
                "content": "\\n    def flipLights(self, n, presses):\\n        if presses == 0:\\n            return 1\\n        elif n == 1:\\n            return 2\\n        elif n == 2:\\n            return 3 if presses<2 else 4\\n        else:\\n            if presses == 1:\\n                return 4\\n            if presses == 2:\\n                return 7\\n            else:\\n                return 8",
                "solutionTags": [],
                "code": "\\n    def flipLights(self, n, presses):\\n        if presses == 0:\\n            return 1\\n        elif n == 1:\\n            return 2\\n        elif n == 2:\\n            return 3 if presses<2 else 4\\n        else:\\n            if presses == 1:\\n                return 4\\n            if presses == 2:\\n                return 7\\n            else:\\n                return 8",
                "codeTag": "Python3"
            },
            {
                "id": 2110980,
                "title": "c-o-1-beats-100",
                "content": "![image](https://assets.leetcode.com/users/images/c73cf10c-367d-4de6-a1fa-eb26b123bd99_1654369307.6417487.png)\\n\\n```\\nint flipLights(int n, int m) {\\n\\tif (m==0) return 1;\\n\\tif(n==1) return 2;\\n\\tif(n==2) return m==1?3:4;\\n\\treturn m==1?4:m==2?7:8;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint flipLights(int n, int m) {\\n\\tif (m==0) return 1;\\n\\tif(n==1) return 2;\\n\\tif(n==2) return m==1?3:4;\\n\\treturn m==1?4:m==2?7:8;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2028988,
                "title": "bulb-switcher-python-implementation",
                "content": "class Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        \\n        # when there are no presses, the status will stay\\n        if presses == 0: return 1\\n        \\n        # when there is one bulb, whatever be the no. of presses : possibilities = [off, on]\\n        if n == 1: return 2\\n        \\n        # when there are two bulbs, if no. of presses is 1 : possibilities = [(on,off), (off,on),(off,off)]\\n        # when there are two bulbs, if no. of presses is not 1 : possibilities = [(on, off), (off, on), (off, off), (on, on)]\\n        if n == 2:\\n            if presses == 1:\\n                return 3\\n            return 4\\n        \\n        # when there are three bulbs, if no. of presses is 1: possibilities = [(off, off, off), (on, off, on), (off, on, off), (off, on, on)]\\n        # this status remains the same for bulbs greater than 4 (check it out with n = 4)\\n        if presses == 1: return 4\\n        \\n        # when there are more than 2 bulbs with 2 presses, it will have 7 possibilities (check it out with n = 3 and presses = 2)\\n        if presses == 2:\\n            return 7\\n        # else\\n        return 8",
                "solutionTags": [],
                "code": "class Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        \\n        # when there are no presses, the status will stay\\n        if presses == 0: return 1\\n        \\n        # when there is one bulb, whatever be the no. of presses : possibilities = [off, on]\\n        if n == 1: return 2\\n        \\n        # when there are two bulbs, if no. of presses is 1 : possibilities = [(on,off), (off,on),(off,off)]\\n        # when there are two bulbs, if no. of presses is not 1 : possibilities = [(on, off), (off, on), (off, off), (on, on)]\\n        if n == 2:\\n            if presses == 1:\\n                return 3\\n            return 4\\n        \\n        # when there are three bulbs, if no. of presses is 1: possibilities = [(off, off, off), (on, off, on), (off, on, off), (off, on, on)]\\n        # this status remains the same for bulbs greater than 4 (check it out with n = 4)\\n        if presses == 1: return 4\\n        \\n        # when there are more than 2 bulbs with 2 presses, it will have 7 possibilities (check it out with n = 3 and presses = 2)\\n        if presses == 2:\\n            return 7\\n        # else\\n        return 8",
                "codeTag": "Java"
            },
            {
                "id": 2024121,
                "title": "rust-solution-with-pattern-match",
                "content": "```rust\\nimpl Solution {\\n    pub fn flip_lights(n: i32, presses: i32) -> i32 {\\n        match (n, presses) {\\n            (_, 0) => 1,\\n            (1, _) => 2,\\n            (2, 1) => 3,\\n            (2, _) => 4,\\n            (_, 1) => 4,\\n            (_, 2) => 7,\\n            (_, presses @ _) if presses > 3 => 8,\\n            (_, _) => 8,\\n        }\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn flip_lights(n: i32, presses: i32) -> i32 {\\n        match (n, presses) {\\n            (_, 0) => 1,\\n            (1, _) => 2,\\n            (2, 1) => 3,\\n            (2, _) => 4,\\n            (_, 1) => 4,\\n            (_, 2) => 7,\\n            (_, presses @ _) if presses > 3 => 8,\\n            (_, _) => 8,\\n        }\\n    }\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2008515,
                "title": "kotlin-brute-force-and-math-solution",
                "content": "Please, let me know if you have any questions.\\n\\n```\\nclass Solution {\\n    class BruteForceSolution {\\n        // This was the first idea: generate all possible combinations of button presses\\n        // and simulate it on given bulbs. Clearly it does\\'t fit any time limits :D\\n        fun flipLights(n: Int, presses: Int): Int {\\n            val states = HashSet<MutableList<Boolean>>()\\n\\n            val combinations = mutableListOf<MutableList<Int>>()\\n            generatePressesCombinations(combinations, MutableList(presses) { -1 }, presses)\\n\\n            for (combination in combinations) {\\n                val lights = MutableList(n) { true }\\n                for (button in combination) {\\n                    when (button) {\\n                        1 -> {\\n                            for (i in 1..lights.size) {\\n                                toggle(lights, i)\\n                            }\\n                        }\\n                        2 -> {\\n                            for (i in 1..lights.size) {\\n                                if (i % 2 == 0) {\\n                                    toggle(lights, i)\\n                                }\\n                            }\\n                        }\\n                        3 -> {\\n                            for (i in 1..lights.size) {\\n                                if (i % 2 == 1) {\\n                                    toggle(lights, i)\\n                                }\\n                            }\\n                        }\\n                        4 -> {\\n                            for (i in 1..lights.size) {\\n                                if ((i - 1) % 3 == 0) {\\n                                    toggle(lights, i)\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n                states.add(lights)\\n            }\\n\\n            return states.count()\\n        }\\n\\n        private fun toggle(lights: MutableList<Boolean>, i: Int) {\\n            lights[i - 1] = lights[i - 1].not()\\n        }\\n\\n        private fun generatePressesCombinations(\\n            combinations: MutableList<MutableList<Int>>,\\n            combination: MutableList<Int>,\\n            pressesRemaining: Int\\n        ) {\\n            if (pressesRemaining > 0) {\\n                for (button in 1..4) {\\n                    val tempCombination = mutableListOf(*combination.toTypedArray())\\n                    tempCombination[tempCombination.size - pressesRemaining] = button\\n                    generatePressesCombinations(combinations, tempCombination, pressesRemaining - 1)\\n                }\\n            } else {\\n                combinations.add(combination)\\n            }\\n        }\\n    }\\n\\n    class GodHelpMeSolution { // I\\'m crying xD\\n        // This solution came to my mind when I realised there is a finite number of states for given bulbs for every n.\\n        // For different n it is different. So I built a table/graph representing this state machine.\\n        // What bulbs are switched on:\\n        // A - all\\n        // N - none\\n        // E - evens\\n        // O - odds\\n        // A# - all but thirds\\n        // N# - none but thirds\\n        // E# - evens except thirds\\n        // O# - odds except thirds\\n        // ___| 1B | 2B | 3B | 4B |\\n        // A  | N  | O  | E  | A# |\\n        // N  | A  | E  | O  | N# |\\n        // O  | E  | N  | A  | O# |\\n        // E  | O  | A  | N  | E# |\\n        // A# | N# | O# | E# | A  |\\n        // N# | A# | E# | O# | N  |\\n        // O# | E# | N# | A# | O  |\\n        // E# | O# | A# | N# | E  |\\n        // Starting from 3 bulbs and 3 presses this system can be in 8 different states described in this table.\\n        // When bulbs and presses are lower than 3 we can count number of states we can reach with use of table above.\\n        fun flipLights(bulbs: Int, presses: Int): Int {\\n            return when (bulbs) {\\n                0 -> 1\\n                1 -> when (presses) {\\n                    0 -> 1\\n                    else -> 2\\n                }\\n                2 -> when (presses) {\\n                    0 -> 1\\n                    1 -> 3\\n                    else -> 4\\n                }\\n                else -> when (presses) {\\n                    0 -> 1\\n                    1 -> 4\\n                    2 -> 7\\n                    else -> 8\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    class BruteForceSolution {\\n        // This was the first idea: generate all possible combinations of button presses\\n        // and simulate it on given bulbs. Clearly it does\\'t fit any time limits :D\\n        fun flipLights(n: Int, presses: Int): Int {\\n            val states = HashSet<MutableList<Boolean>>()\\n\\n            val combinations = mutableListOf<MutableList<Int>>()\\n            generatePressesCombinations(combinations, MutableList(presses) { -1 }, presses)\\n\\n            for (combination in combinations) {\\n                val lights = MutableList(n) { true }\\n                for (button in combination) {\\n                    when (button) {\\n                        1 -> {\\n                            for (i in 1..lights.size) {\\n                                toggle(lights, i)\\n                            }\\n                        }\\n                        2 -> {\\n                            for (i in 1..lights.size) {\\n                                if (i % 2 == 0) {\\n                                    toggle(lights, i)\\n                                }\\n                            }\\n                        }\\n                        3 -> {\\n                            for (i in 1..lights.size) {\\n                                if (i % 2 == 1) {\\n                                    toggle(lights, i)\\n                                }\\n                            }\\n                        }\\n                        4 -> {\\n                            for (i in 1..lights.size) {\\n                                if ((i - 1) % 3 == 0) {\\n                                    toggle(lights, i)\\n                                }\\n                            }\\n                        }\\n                    }\\n                }\\n                states.add(lights)\\n            }\\n\\n            return states.count()\\n        }\\n\\n        private fun toggle(lights: MutableList<Boolean>, i: Int) {\\n            lights[i - 1] = lights[i - 1].not()\\n        }\\n\\n        private fun generatePressesCombinations(\\n            combinations: MutableList<MutableList<Int>>,\\n            combination: MutableList<Int>,\\n            pressesRemaining: Int\\n        ) {\\n            if (pressesRemaining > 0) {\\n                for (button in 1..4) {\\n                    val tempCombination = mutableListOf(*combination.toTypedArray())\\n                    tempCombination[tempCombination.size - pressesRemaining] = button\\n                    generatePressesCombinations(combinations, tempCombination, pressesRemaining - 1)\\n                }\\n            } else {\\n                combinations.add(combination)\\n            }\\n        }\\n    }\\n\\n    class GodHelpMeSolution { // I\\'m crying xD\\n        // This solution came to my mind when I realised there is a finite number of states for given bulbs for every n.\\n        // For different n it is different. So I built a table/graph representing this state machine.\\n        // What bulbs are switched on:\\n        // A - all\\n        // N - none\\n        // E - evens\\n        // O - odds\\n        // A# - all but thirds\\n        // N# - none but thirds\\n        // E# - evens except thirds\\n        // O# - odds except thirds\\n        // ___| 1B | 2B | 3B | 4B |\\n        // A  | N  | O  | E  | A# |\\n        // N  | A  | E  | O  | N# |\\n        // O  | E  | N  | A  | O# |\\n        // E  | O  | A  | N  | E# |\\n        // A# | N# | O# | E# | A  |\\n        // N# | A# | E# | O# | N  |\\n        // O# | E# | N# | A# | O  |\\n        // E# | O# | A# | N# | E  |\\n        // Starting from 3 bulbs and 3 presses this system can be in 8 different states described in this table.\\n        // When bulbs and presses are lower than 3 we can count number of states we can reach with use of table above.\\n        fun flipLights(bulbs: Int, presses: Int): Int {\\n            return when (bulbs) {\\n                0 -> 1\\n                1 -> when (presses) {\\n                    0 -> 1\\n                    else -> 2\\n                }\\n                2 -> when (presses) {\\n                    0 -> 1\\n                    1 -> 3\\n                    else -> 4\\n                }\\n                else -> when (presses) {\\n                    0 -> 1\\n                    1 -> 4\\n                    2 -> 7\\n                    else -> 8\\n                }\\n            }\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1934254,
                "title": "simple-c",
                "content": "\\tpublic class Solution {\\n    public int FlipLights(int n, int m) {\\n\\n         if (n == 1 && m > 0) {\\n                return 2;\\n            } else if (n == 2 && m == 1) {\\n                return 3;\\n            } else if ((n > 2 && m == 1) || (n == 2 && m > 1)) {\\n                return 4;\\n            } else if (n > 2 && m == 2) {\\n                return 7;\\n            } else if (n > 2 && m > 2) {\\n                return 8;\\n            } else {\\n                return 1;\\n            }\\n    }\\n\\t}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int FlipLights(int n, int m) {\\n\\n         if (n == 1 && m > 0) {\\n                return 2;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1817884,
                "title": "is-it-just-me-or-anyone-feel-this-problem-should-be-hard",
                "content": "I feel this problem is pretty hard to be medium, lots of brain power, no typical algo/DS",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 1449424,
                "title": "javascript-simple-4-line-logic",
                "content": "```\\nvar flipLights = function(n, presses) {\\n    if (presses === 0) return 1;\\n    if (presses === 1) return n <= 2 ? n + 1 : 4;\\n    if (n <= 2) return 2 * n;\\n    return 7 + (presses >= 3);\\n};",
                "solutionTags": [],
                "code": "```\\nvar flipLights = function(n, presses) {\\n    if (presses === 0) return 1;\\n    if (presses === 1) return n <= 2 ? n + 1 : 4;\\n    if (n <= 2) return 2 * n;\\n    return 7 + (presses >= 3);\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1371395,
                "title": "simple-math-c-solution",
                "content": "Problem is similar to Bul Switcher 1 in the aspect, that we can work out a pattern in the bulbs and presses. If n==0 or presses == 0, there is only 1 state = all ON.\\nIf n == 1, then (as we have already accounted for presses==0), then with atleast 1 press, that one bulb can be ON or OFF. \\nIf n==2, if presses==1, the odd switch and 3k+1 switch will produce same result and hence, will give 2^2 - 1 = 3 patters. If presses is >=1, then states can be 4.\\nNow for any n>2, if presses = 1, there can be 4 states (each switch producing different states). If presses=2, we there can be only 7 unique states and for presses>2, there can be 8.\\nThere cant be any more unique states for the sequence as patterns are repeated between bulbs and if presses are >=3, then we are guaranteed atleast one of the bulb toggled by previous operations will return back to same state, hence keeping number of unique states same as before.\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        if(presses==0 || n==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2) return (presses==1)?3:4;\\n        if(presses==1) return 4;\\n        return (presses==2)?7:8;\\n    }\\n};\\n```\\nTime complexity = O(1)\\nSpace complexity = O(1)",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int presses) {\\n        if(presses==0 || n==0) return 1;\\n        if(n==1) return 2;\\n        if(n==2) return (presses==1)?3:4;\\n        if(presses==1) return 4;\\n        return (presses==2)?7:8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1307308,
                "title": "sollution-in-c",
                "content": "```\\nint flipLights(int n, int presses){\\n    int val = n >=3 ? 3 : n;\\n    if (presses == 0){\\n        return 1;\\n    } else if (presses == 1){\\n        return val == 1 ? 2 : val == 2 ? 3 : 4;\\n    } else if (presses == 2){\\n        return val == 1 ? 2 : val == 2 ? 4 : 7;\\n    } \\n    return val == 1? 2 : val == 2 ? 4 : 8;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint flipLights(int n, int presses){\\n    int val = n >=3 ? 3 : n;\\n    if (presses == 0){\\n        return 1;\\n    } else if (presses == 1){\\n        return val == 1 ? 2 : val == 2 ? 3 : 4;\\n    } else if (presses == 2){\\n        return val == 1 ? 2 : val == 2 ? 4 : 7;\\n    } \\n    return val == 1? 2 : val == 2 ? 4 : 8;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1291782,
                "title": "javascript-set-thinking-faster-than-100",
                "content": "```\\n/**\\n * @param {number} n\\n * @param {number} m\\n * @return {number}\\n */\\nvar flipLights = function(n, m) {\\n    if (m === 0)    return 1\\n\\n    \\n    const sets = {\\n        NONE: \\'\\',\\n        A: \\'A\\',\\n        B: \\'B\\',\\n        C: \\'C\\',\\n        D: \\'D\\',\\n    }\\n    if (n === 1) {\\n        sets.B = sets.A\\n    }\\n    if (n <= 2) {\\n        sets.D = sets.B\\n    }\\n    \\n    \\n    function getSet(...list) {\\n        let set = new Set()\\n        for (const ch of list) {\\n            if (set.has(ch))    set.delete(ch)\\n            else set.add(ch)\\n        }\\n        \\n        const chs = [...set]\\n        chs.sort()\\n        \\n        return chs.join(\\'\\')\\n    }\\n    \\n    \\n    const results = []\\n    results[0] = new Set([sets.NONE])\\n    results[1] = new Set([sets.A, sets.B, sets.C, sets.D])\\n    results[2] = new Set([...results[0], getSet(sets.A, sets.B), getSet(sets.A, sets.C), getSet(sets.A, sets.D), getSet(sets.B, sets.C), getSet(sets.B, sets.D), getSet(sets.C, sets.D)])\\n    results[3] = new Set([...results[1], getSet(sets.A, sets.B, sets.C), getSet(sets.A, sets.B, sets.D), getSet(sets.A, sets.C, sets.D), getSet(sets.B, sets.C, sets.D)])\\n    results[4] = new Set([...results[2], getSet(sets.A, sets.B, sets.C, sets.D)])\\n    \\n    \\n    let result\\n    if (m <= 4) result = results[m]\\n    else {\\n        if (m & 1)  result = results[3]\\n        else result = results[4]\\n    }\\n    \\n\\n    result = result.size\\n    return result\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {number} n\\n * @param {number} m\\n * @return {number}\\n */\\nvar flipLights = function(n, m) {\\n    if (m === 0)    return 1\\n\\n    \\n    const sets = {\\n        NONE: \\'\\',\\n        A: \\'A\\',\\n        B: \\'B\\',\\n        C: \\'C\\',\\n        D: \\'D\\',\\n    }\\n    if (n === 1) {\\n        sets.B = sets.A\\n    }\\n    if (n <= 2) {\\n        sets.D = sets.B\\n    }\\n    \\n    \\n    function getSet(...list) {\\n        let set = new Set()\\n        for (const ch of list) {\\n            if (set.has(ch))    set.delete(ch)\\n            else set.add(ch)\\n        }\\n        \\n        const chs = [...set]\\n        chs.sort()\\n        \\n        return chs.join(\\'\\')\\n    }\\n    \\n    \\n    const results = []\\n    results[0] = new Set([sets.NONE])\\n    results[1] = new Set([sets.A, sets.B, sets.C, sets.D])\\n    results[2] = new Set([...results[0], getSet(sets.A, sets.B), getSet(sets.A, sets.C), getSet(sets.A, sets.D), getSet(sets.B, sets.C), getSet(sets.B, sets.D), getSet(sets.C, sets.D)])\\n    results[3] = new Set([...results[1], getSet(sets.A, sets.B, sets.C), getSet(sets.A, sets.B, sets.D), getSet(sets.A, sets.C, sets.D), getSet(sets.B, sets.C, sets.D)])\\n    results[4] = new Set([...results[2], getSet(sets.A, sets.B, sets.C, sets.D)])\\n    \\n    \\n    let result\\n    if (m <= 4) result = results[m]\\n    else {\\n        if (m & 1)  result = results[3]\\n        else result = results[4]\\n    }\\n    \\n\\n    result = result.size\\n    return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1257539,
                "title": "c-using-a-bit-of-thinking",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        int val = min(3,n);\\n        if(m == 0)\\n        {\\n           return 1; \\n        }\\n        else if(m==1)\\n        {\\n            return val == 1?2:val == 2?3:4;\\n        }\\n        else if(m == 2)\\n            return val == 1?2:val == 2?4:7;\\n        return val == 1?2:val == 2?4:8;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        int val = min(3,n);\\n        if(m == 0)\\n        {\\n           return 1; \\n        }\\n        else if(m==1)\\n        {\\n            return val == 1?2:val == 2?3:4;\\n        }\\n        else if(m == 2)\\n            return val == 1?2:val == 2?4:7;\\n        return val == 1?2:val == 2?4:8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1253549,
                "title": "not-much-thinking-required-just-do-it-in-python",
                "content": "Observation 1. Order of button pressing is irrelevant.\\nObservation 2. Pressing a button two times is exactly equivalent of pressing it zero times. So, we must only consider pressing each button either 0 or 1 times. As we have 4 buttons, we need to consider 16 combinations. We\\'ll use bitmasks for that.\\nObservation 3. We only need to simulate no more than 6 first bulbs, beacause it\\'s a repeating pattern after that.\\nObservation 4. Starting from presses==3, the only thing we need to know is whether presses is even or odd number.\\n```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        n = min(n, 6)\\n        Possibilities = {\\n            0: {0},\\n            1: {1},\\n            2: {0,2},\\n            3: {1,3},\\n            4: {0,2,4}\\n        }\\n        if presses>4:\\n            presses = 4-presses%2\\n        on_counts = Possibilities[presses]\\n        outcomes = set()\\n        for x in range(16):\\n            cnt = bool(x&1)+bool(x&2)+bool(x&4)+bool(x&8)\\n            if cnt not in on_counts:\\n                continue\\n            state = [0]*n\\n            if x&1:\\n                # press button 1\\n                state = [v^1 for v in state]\\n            if x&2:\\n                # press button 2\\n                state = [v^(i&1) for i,v in enumerate(state)]\\n            if x&4:\\n                # press button 3\\n                state = [v^(i&1)^1 for i,v in enumerate(state)]\\n            if x&8:\\n                # press button 4\\n                if n>0: state[0] ^= 1\\n                if n>3: state[3] ^= 1\\n            \\n            outcomes.add(tuple(state))\\n        return len(outcomes)\\n```",
                "solutionTags": [
                    "Python",
                    "Simulation",
                    "Bitmask"
                ],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n: int, presses: int) -> int:\\n        n = min(n, 6)\\n        Possibilities = {\\n            0: {0},\\n            1: {1},\\n            2: {0,2},\\n            3: {1,3},\\n            4: {0,2,4}\\n        }\\n        if presses>4:\\n            presses = 4-presses%2\\n        on_counts = Possibilities[presses]\\n        outcomes = set()\\n        for x in range(16):\\n            cnt = bool(x&1)+bool(x&2)+bool(x&4)+bool(x&8)\\n            if cnt not in on_counts:\\n                continue\\n            state = [0]*n\\n            if x&1:\\n                # press button 1\\n                state = [v^1 for v in state]\\n            if x&2:\\n                # press button 2\\n                state = [v^(i&1) for i,v in enumerate(state)]\\n            if x&4:\\n                # press button 3\\n                state = [v^(i&1)^1 for i,v in enumerate(state)]\\n            if x&8:\\n                # press button 4\\n                if n>0: state[0] ^= 1\\n                if n>3: state[3] ^= 1\\n            \\n            outcomes.add(tuple(state))\\n        return len(outcomes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1104036,
                "title": "c-solution-0ms",
                "content": "Run-time is `O(1)`, space is `O(1)`. \\n\\nThis is just a counting problem where you first realize that there is limited possibilities then you just check what is possible for different combinations of `n` and `m`. \\n\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m == 0) return 1;\\n        else if(m == 1) {\\n            switch(n) {\\n                case 1: return 2;\\n                case 2: return 3;\\n                default: return 4;\\n            }\\n        } else if(m == 2) {\\n            switch(n) {\\n                case 1: return 2;\\n                case 2: return 4;\\n                default: return 7;\\n            }\\n        }\\n        \\n        if(n == 1) return 2;\\n        else if(n == 2) return 4;      \\n        return 8;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m == 0) return 1;\\n        else if(m == 1) {\\n            switch(n) {\\n                case 1: return 2;\\n                case 2: return 3;\\n                default: return 4;\\n            }\\n        } else if(m == 2) {\\n            switch(n) {\\n                case 1: return 2;\\n                case 2: return 4;\\n                default: return 7;\\n            }\\n        }\\n        \\n        if(n == 1) return 2;\\n        else if(n == 2) return 4;      \\n        return 8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1057233,
                "title": "c-o-1",
                "content": "```\\nclass Solution {\\n    /*\\n        4=>4\\n        44=>44\\n        444=>4\\n        4444=>44\\n        ....\\n        (combinations of 4 => only 44 and 4)\\n        \\n        2=>2\\n        22=>3\\n        222=>2\\n        ....\\n        \\n        3=>3\\n        33=>2\\n        333=>3\\n        ...\\n\\t\\t(combinations of 2 and 3 => only 2 and 3)\\n        (for any odd m and even m  2 or 3 can be used)\\n   \\n        13=>2\\n        12=>3\\n        (1,3) will be combined to (2)\\n        (2,3) will be combined to (3)\\n\\t\\t(so don\\'t consider 13 or 23 case)\\n        11=>cancel\\n     -------------------------------------------------------   \\n        summary\\n        if m is odd \\n                consider 1,2,3,4\\n            if (m,n>=3)\\n                consider 42,43,442,443,441 (duplicated 1 so only add extra 4 count)\\n        if m is even\\n                consider 2,3,11\\n            if (m,n>=2)\\n                condsider 44 42 43 41\\n            if (m,n>=3)\\n                consider 442 443 (duplicated 1 so only add extra 1 count)\\n      -------------------------------------------------------   \\n    */\\npublic:\\n    int flipLights(int n, int m) {\\n        int c = 0;\\n        if (m==0) return 1;\\n        if (n==1) return 2;\\n        if (n==2) return m == 1?3:4;\\n        if (m%2 == 0)\\n        {\\n            c += 3;\\n            if (m>=2)\\n                c+=4;\\n            if (m>=3)\\n                c+=1;\\n        }\\n        else\\n        {\\n            c += 4;\\n            if (m>=3)\\n                c+=4;\\n        }\\n        return c;\\n    }\\n};\\n\\n\\n\\n\\n\\n\\n\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    /*\\n        4=>4\\n        44=>44\\n        444=>4\\n        4444=>44\\n        ....\\n        (combinations of 4 => only 44 and 4)\\n        \\n        2=>2\\n        22=>3\\n        222=>2\\n        ....\\n        \\n        3=>3\\n        33=>2\\n        333=>3\\n        ...\\n\\t\\t(combinations of 2 and 3 => only 2 and 3)\\n        (for any odd m and even m  2 or 3 can be used)\\n   \\n        13=>2\\n        12=>3\\n        (1,3) will be combined to (2)\\n        (2,3) will be combined to (3)\\n\\t\\t(so don\\'t consider 13 or 23 case)\\n        11=>cancel\\n     -------------------------------------------------------   \\n        summary\\n        if m is odd \\n                consider 1,2,3,4\\n            if (m,n>=3)\\n                consider 42,43,442,443,441 (duplicated 1 so only add extra 4 count)\\n        if m is even\\n                consider 2,3,11\\n            if (m,n>=2)\\n                condsider 44 42 43 41\\n            if (m,n>=3)\\n                consider 442 443 (duplicated 1 so only add extra 1 count)\\n      -------------------------------------------------------   \\n    */\\npublic:\\n    int flipLights(int n, int m) {\\n        int c = 0;\\n        if (m==0) return 1;\\n        if (n==1) return 2;\\n        if (n==2) return m == 1?3:4;\\n        if (m%2 == 0)\\n        {\\n            c += 3;\\n            if (m>=2)\\n                c+=4;\\n            if (m>=3)\\n                c+=1;\\n        }\\n        else\\n        {\\n            c += 4;\\n            if (m>=3)\\n                c+=4;\\n        }\\n        return c;\\n    }\\n};\\n\\n\\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 905612,
                "title": "rust-0-ms-but-i-feel-it-is-too-verbose",
                "content": "```\\nimpl Solution {\\n    pub fn flip_lights(n: i32, m: i32) -> i32 {\\n        let mut real_n = std::cmp::min(3,n);\\n    if m == 0 {\\n        return 1;\\n    } else if m == 1 {\\n        real_n= if real_n == 1 {\\n            2\\n        } else if real_n == 2 {\\n            3\\n        } else {\\n            4\\n        };\\n        return real_n;\\n    } else if m == 2 {\\n        real_n = if real_n == 1 {\\n            2\\n        } else if real_n == 2 {\\n            4\\n        } else {\\n            7\\n        };\\n        return real_n;\\n    }\\n    real_n = if real_n == 1 {\\n        2\\n    } else if real_n == 2 {\\n        4\\n    } else {\\n        8\\n    };\\n    real_n\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn flip_lights(n: i32, m: i32) -> i32 {\\n        let mut real_n = std::cmp::min(3,n);\\n    if m == 0 {\\n        return 1;\\n    } else if m == 1 {\\n        real_n= if real_n == 1 {\\n            2\\n        } else if real_n == 2 {\\n            3\\n        } else {\\n            4\\n        };\\n        return real_n;\\n    } else if m == 2 {\\n        real_n = if real_n == 1 {\\n            2\\n        } else if real_n == 2 {\\n            4\\n        } else {\\n            7\\n        };\\n        return real_n;\\n    }\\n    real_n = if real_n == 1 {\\n        2\\n    } else if real_n == 2 {\\n        4\\n    } else {\\n        8\\n    };\\n    real_n\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 883263,
                "title": "single-line-c-solution",
                "content": "\\n\\nint flipLights(int n, int m){\\n    return m==0?1:(n>2?(m==1?4:(m==2)?7:8):(n==1)?2:(m==1?3:4));   \\n}",
                "solutionTags": [],
                "code": "\\n\\nint flipLights(int n, int m){\\n    return m==0?1:(n>2?(m==1?4:(m==2)?7:8):(n==1)?2:(m==1?3:4));   \\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 760639,
                "title": "python-slow-solution-but-accepted",
                "content": "```\\ndef f(x,m,d,h,n):\\n    s=int(x,2)\\n    if m==0:\\n        h.add(s)\\n        return\\n    if (s,m) in d:return\\n    a,b,c,e=\\'\\',\\'\\',\\'\\',\\'\\'\\n    g={\\'0\\':\\'1\\',\\'1\\':\\'0\\'}\\n    for i in range(min(4,n)):\\n        if i%2==0:a+=g[x[i]]\\n        else:a+=x[i]\\n        if i%2==1:b+=g[x[i]]\\n        else:b+=x[i]\\n        c+=g[x[i]]\\n        if i in (0,3):e+=g[x[i]]\\n        else:e+=x[i]\\n    f(a,m-1,d,h,n),f(b,m-1,d,h,n),f(c,m-1,d,h,n),f(e,m-1,d,h,n)\\n    d.add((s,m))\\n    return \\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        d=set()\\n        h=set()\\n        x=\"1\"*min(4,n)\\n        f(x,m,d,h,n)\\n        return len(h)\\n```",
                "solutionTags": [],
                "code": "```\\ndef f(x,m,d,h,n):\\n    s=int(x,2)\\n    if m==0:\\n        h.add(s)\\n        return\\n    if (s,m) in d:return\\n    a,b,c,e=\\'\\',\\'\\',\\'\\',\\'\\'\\n    g={\\'0\\':\\'1\\',\\'1\\':\\'0\\'}\\n    for i in range(min(4,n)):\\n        if i%2==0:a+=g[x[i]]\\n        else:a+=x[i]\\n        if i%2==1:b+=g[x[i]]\\n        else:b+=x[i]\\n        c+=g[x[i]]\\n        if i in (0,3):e+=g[x[i]]\\n        else:e+=x[i]\\n    f(a,m-1,d,h,n),f(b,m-1,d,h,n),f(c,m-1,d,h,n),f(e,m-1,d,h,n)\\n    d.add((s,m))\\n    return \\nclass Solution:\\n    def flipLights(self, n: int, m: int) -> int:\\n        d=set()\\n        h=set()\\n        x=\"1\"*min(4,n)\\n        f(x,m,d,h,n)\\n        return len(h)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 678466,
                "title": "c-simple-100-faster-solution-with-explation",
                "content": "```\\n/*x:the times use button1, y:the times use button2 z: the times use button3 w: the times use button4\\nthe order do not infulence the ans ;and the first 4 light will decide the ans; \\n\\nfor the light1 is always the same as light7 , light2 is always the same as light8... under different operations,\\nso we concentrate on the first 6 light ,but light2 is always the same as light6, light3 is always the same as 5,\\nso we only concentrate on the first 4 light;\\n\\nwe can list the equations:\\nx+y+z+w=m  \\nx+z+w=k1(mod2) (k1%2 decide the ans on light1)\\nx+y = k2(mod2) (k2%2 the ans on light2)\\nx+z=k3(mod2)  (k3%2 decide the ans on light3) \\nx+y+w=k4(mod2) (k4%2 decide the ans on light4) \\nso we can fix x,y,z(mod2), to get w(mod2) , and statistics the different ans of tuple [k1,k2,k3] !\\n*/\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        n=(n>4)?4:n;\\n        std::set<int> set;\\n        for(int i = 0;i<8;++i)\\n        {\\n            int x=i&1;\\n            int y=(i>>1)&1;\\n            int z = (i>>2)&1;\\n            int w=m-x-y-z;\\n            if(w>=0)\\n            {\\n                w=w%2;\\n                int b[4]={(x+z+w)%2,(x+y)%2,(x+z)%2,(x+y+w)%2};\\n                int k=0;\\n                for(int t=0;t<n;++t)\\n                {\\n                    k+=(b[t]<<t);\\n                }\\n                set.insert(k);\\n            }\\n        }\\n        return set.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/*x:the times use button1, y:the times use button2 z: the times use button3 w: the times use button4\\nthe order do not infulence the ans ;and the first 4 light will decide the ans; \\n\\nfor the light1 is always the same as light7 , light2 is always the same as light8... under different operations,\\nso we concentrate on the first 6 light ,but light2 is always the same as light6, light3 is always the same as 5,\\nso we only concentrate on the first 4 light;\\n\\nwe can list the equations:\\nx+y+z+w=m  \\nx+z+w=k1(mod2) (k1%2 decide the ans on light1)\\nx+y = k2(mod2) (k2%2 the ans on light2)\\nx+z=k3(mod2)  (k3%2 decide the ans on light3) \\nx+y+w=k4(mod2) (k4%2 decide the ans on light4) \\nso we can fix x,y,z(mod2), to get w(mod2) , and statistics the different ans of tuple [k1,k2,k3] !\\n*/\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        n=(n>4)?4:n;\\n        std::set<int> set;\\n        for(int i = 0;i<8;++i)\\n        {\\n            int x=i&1;\\n            int y=(i>>1)&1;\\n            int z = (i>>2)&1;\\n            int w=m-x-y-z;\\n            if(w>=0)\\n            {\\n                w=w%2;\\n                int b[4]={(x+z+w)%2,(x+y)%2,(x+z)%2,(x+y+w)%2};\\n                int k=0;\\n                for(int t=0;t<n;++t)\\n                {\\n                    k+=(b[t]<<t);\\n                }\\n                set.insert(k);\\n            }\\n        }\\n        return set.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 674865,
                "title": "c-simple-100-faster-solution",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(n==0){\\n            return 0;\\n        }\\n        if(m==0){\\n            return 1;\\n        }\\n        if(n==1){\\n            return 2;\\n        }\\n        if(n==2){\\n            if(m==1){\\n                return 3;\\n            }\\n            return 4;\\n        }\\n        if(m==1){\\n            return 4;\\n        }\\n        if(m==2){\\n            return 7;\\n        }\\n        return 8;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(n==0){\\n            return 0;\\n        }\\n        if(m==0){\\n            return 1;\\n        }\\n        if(n==1){\\n            return 2;\\n        }\\n        if(n==2){\\n            if(m==1){\\n                return 3;\\n            }\\n            return 4;\\n        }\\n        if(m==1){\\n            return 4;\\n        }\\n        if(m==2){\\n            return 7;\\n        }\\n        return 8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 590061,
                "title": "java-math",
                "content": "```\\n    public int flipLights(int n, int m) {\\n        if(m == 0) return 1;\\n        if(n == 1) return 2;\\n        if(n == 2) {\\n            if(m == 1) return 3;\\n            else return 4;\\n        }\\n        if(n >= 3) {\\n            if(m == 1) return 4;\\n            if(m == 2) return 6 + 1;\\n            if(m % 1 == 1) return 4 + 4;\\n        }\\n        return 8;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int flipLights(int n, int m) {\\n        if(m == 0) return 1;\\n        if(n == 1) return 2;\\n        if(n == 2) {\\n            if(m == 1) return 3;\\n            else return 4;\\n        }\\n        if(n >= 3) {\\n            if(m == 1) return 4;\\n            if(m == 2) return 6 + 1;\\n            if(m % 1 == 1) return 4 + 4;\\n        }\\n        return 8;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 573296,
                "title": "c-bit-manipulation-kind-silly-but-more-general-i-think",
                "content": "I didn\\'t think much about the swithes and their relations, therefore I came up with this.\\nBut I think for switches like: \\n```\\n\\tswitch1: flip lights k+1 (k in {0,1,2,3...}\\n\\tswitch2: flip lights 2k+1\\n\\tswitch3: flip lights 3k+1\\n\\t......\\n\\tswitchx: flip lights xk+1\\n```\\nmy idea should still work:\\n```c++\\nclass Solution {\\n private:\\n  // lights are numbered from right to left: 3..1\\n  // 1 means the swither can flip that light\\n  vector<int> switchers = {0b111, 0b010, 0b101, 0b001};\\n  int cnt_bits(int x) {\\n    int res = 0;\\n    while (x) {\\n      res += x & 1;\\n      x >>= 1;\\n    }\\n    return res;\\n  }\\n\\n public:\\n  // n and m both fit in range [0, 1000].\\n  int flipLights(int n, int m) {\\n    if (m == 0 || n == 0) return 1;\\n    // allocate m to four switchers/plates (only need to know the number is even\\n    // or odd) [0, 2**4) 0 0 0 0 ~ 1 1 1 1 printArr(switchers);\\n\\n    // for n, only need to consider n <= 3 \\n    int lights = 0b111;\\n    // if n less than 3, just consider n lights\\n    if (n < 3) lights = (1 << n) - 1;\\n    // if can reach status i (lights = i), statuses[i] = true\\n    vector<bool> statuses(lights + 1);\\n    for (int i = 0; i < 16; ++i) {\\n      int bit_cnt = cnt_bits(i);\\n      if (bit_cnt > m || (m - bit_cnt) & 1) continue;\\n      int switcher = 0;\\n      // total four switchers, combine the switches (which will be used odd\\n      // times)\\n      for (int j = 0; j < 4; ++j) {\\n        if ((1 << j) & i) switcher ^= switchers[j];\\n      }\\n      // flip lights use the combined swither, set the lights\\' status to true\\n      statuses[(lights ^ switcher) & lights] = true;\\n    }\\n\\n    int res = 0;\\n    for (bool status : statuses) {\\n      res += status;\\n    }\\n    return res;\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Bit Manipulation"
                ],
                "code": "```\\n\\tswitch1: flip lights k+1 (k in {0,1,2,3...}\\n\\tswitch2: flip lights 2k+1\\n\\tswitch3: flip lights 3k+1\\n\\t......\\n\\tswitchx: flip lights xk+1\\n```\n```c++\\nclass Solution {\\n private:\\n  // lights are numbered from right to left: 3..1\\n  // 1 means the swither can flip that light\\n  vector<int> switchers = {0b111, 0b010, 0b101, 0b001};\\n  int cnt_bits(int x) {\\n    int res = 0;\\n    while (x) {\\n      res += x & 1;\\n      x >>= 1;\\n    }\\n    return res;\\n  }\\n\\n public:\\n  // n and m both fit in range [0, 1000].\\n  int flipLights(int n, int m) {\\n    if (m == 0 || n == 0) return 1;\\n    // allocate m to four switchers/plates (only need to know the number is even\\n    // or odd) [0, 2**4) 0 0 0 0 ~ 1 1 1 1 printArr(switchers);\\n\\n    // for n, only need to consider n <= 3 \\n    int lights = 0b111;\\n    // if n less than 3, just consider n lights\\n    if (n < 3) lights = (1 << n) - 1;\\n    // if can reach status i (lights = i), statuses[i] = true\\n    vector<bool> statuses(lights + 1);\\n    for (int i = 0; i < 16; ++i) {\\n      int bit_cnt = cnt_bits(i);\\n      if (bit_cnt > m || (m - bit_cnt) & 1) continue;\\n      int switcher = 0;\\n      // total four switchers, combine the switches (which will be used odd\\n      // times)\\n      for (int j = 0; j < 4; ++j) {\\n        if ((1 << j) & i) switcher ^= switchers[j];\\n      }\\n      // flip lights use the combined swither, set the lights\\' status to true\\n      statuses[(lights ^ switcher) & lights] = true;\\n    }\\n\\n    int res = 0;\\n    for (bool status : statuses) {\\n      res += status;\\n    }\\n    return res;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 538057,
                "title": "my-solution-beat-100",
                "content": "```\\nclass Solution {\\npublic:\\nint flipLights(int n, int m) {\\n    int count = 0;\\n    set<string> s;\\n    string str;\\n    str.clear();\\n    for (int a = 0; a <= 1; ++a) {\\n        for (int b = 0; b <= 1; ++b) {\\n            for (int c = 0; c <= 1; ++c) {\\n                for (int d = 0; d <= 1; ++d) {\\n                    count = a + b + c + d;\\n                    if ((count % 2) != (m % 2) || count > m) continue;\\n                    if (n >= 1) {\\n                        str.append(to_string((a+c+d)%2)).append(\"_\");\\n                        if (n >= 2) {\\n                            str.append(to_string((a+b)%2)).append(\"_\");\\n                            if (n >= 3) {\\n                                str.append(to_string((a+c)%2)).append(\"_\");\\n                                if (n >= 4) {\\n                                    str.append(to_string((a+b+d)%2)).append(\"_\");\\n                                }\\n                            }\\n                        }\\n                    }\\n                    if (!str.empty()) {\\n                        s.insert(str);\\n                        str.clear();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    return s.size();\\n}\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\nint flipLights(int n, int m) {\\n    int count = 0;\\n    set<string> s;\\n    string str;\\n    str.clear();\\n    for (int a = 0; a <= 1; ++a) {\\n        for (int b = 0; b <= 1; ++b) {\\n            for (int c = 0; c <= 1; ++c) {\\n                for (int d = 0; d <= 1; ++d) {\\n                    count = a + b + c + d;\\n                    if ((count % 2) != (m % 2) || count > m) continue;\\n                    if (n >= 1) {\\n                        str.append(to_string((a+c+d)%2)).append(\"_\");\\n                        if (n >= 2) {\\n                            str.append(to_string((a+b)%2)).append(\"_\");\\n                            if (n >= 3) {\\n                                str.append(to_string((a+c)%2)).append(\"_\");\\n                                if (n >= 4) {\\n                                    str.append(to_string((a+b+d)%2)).append(\"_\");\\n                                }\\n                            }\\n                        }\\n                    }\\n                    if (!str.empty()) {\\n                        s.insert(str);\\n                        str.clear();\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    return s.size();\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 524764,
                "title": "javascript-bitwize",
                "content": "```\\n/**\\n * @param {number} n\\n * @param {number} m\\n * @return {number}\\n */\\nvar flipLights = function (n, m) {\\n  // fist a*6 bulps always the same, we only need remember 1*6\\n  let total = n > 6 ? n % 6 + 6 : n, states = new Set()\\n  let inital = parseInt(\\'\\'.padEnd(total, \\'1\\'), 2),\\n    even = parseInt(\\'\\'.padEnd(total, \\'10\\'), 2),\\n    odd = parseInt(\\'\\'.padEnd(total, \\'01\\'), 2),\\n    k3p1 = parseInt(\\'\\'.padEnd(total, \\'100\\'), 2),\\n    all = inital, traveled = {}\\n\\n  r(inital, m)\\n  return states.size\\n\\n  function r(cur, left) {\\n    let key = cur + \\'_\\' + left\\n    if (traveled[key]) return\\n    traveled[key] = true\\n    if (left === 0) {\\n      states.add(cur)\\n      return\\n    }\\n    r(cur ^ all, left - 1)\\n    r(cur ^ even, left - 1)\\n    r(cur ^ odd, left - 1)\\n    r(cur ^ k3p1, left - 1)\\n  }\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Bit Manipulation"
                ],
                "code": "```\\n/**\\n * @param {number} n\\n * @param {number} m\\n * @return {number}\\n */\\nvar flipLights = function (n, m) {\\n  // fist a*6 bulps always the same, we only need remember 1*6\\n  let total = n > 6 ? n % 6 + 6 : n, states = new Set()\\n  let inital = parseInt(\\'\\'.padEnd(total, \\'1\\'), 2),\\n    even = parseInt(\\'\\'.padEnd(total, \\'10\\'), 2),\\n    odd = parseInt(\\'\\'.padEnd(total, \\'01\\'), 2),\\n    k3p1 = parseInt(\\'\\'.padEnd(total, \\'100\\'), 2),\\n    all = inital, traveled = {}\\n\\n  r(inital, m)\\n  return states.size\\n\\n  function r(cur, left) {\\n    let key = cur + \\'_\\' + left\\n    if (traveled[key]) return\\n    traveled[key] = true\\n    if (left === 0) {\\n      states.add(cur)\\n      return\\n    }\\n    r(cur ^ all, left - 1)\\n    r(cur ^ even, left - 1)\\n    r(cur ^ odd, left - 1)\\n    r(cur ^ k3p1, left - 1)\\n  }\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 403028,
                "title": "c-easy-to-understand-simple-solution",
                "content": "Assuming we have infinite bulbs and we operate infinite times.\\n* Without any operations, we can get 1 state:\\n\\t*  {all bulbs open}*(state 0)*\\n* In the first operation, we can get 4 different states by 4 different buttons:\\n\\t* {all bulbs close}*(state 1)*, *by button 1*\\n\\t*  {even bulbs close}*(state 2)*, *by button 2*\\n\\t*  {odd bulbs close}*(state 3)*, *by button 3*\\n\\t*  {3k+1 bulbs close}*(state 4)*, *by button 4*\\n* In the second operation, we can get another 3 states which do not appear in above:\\n\\t* {(odd\\u2229{3k+1})\\u222A(even - even\\u2229{3k+1})bulbs close}*(state 5)*, *by button 4 from state 2*\\n\\t* {(even\\u2229{3k+1})\\u222A(odd - odd\\u2229{3k+1})bulbs close}*(state 6)*, *by button 3 from state 3*\\n\\t* {3k+1 bulbs open}*(state 7)*, *by button 4 from state 1 OR  by button 1 from state 4*\\n\\tIn the second operation, we can get another 4 states which appear in above:\\n\\t* We can get back to the state 0 in the second operation by button {1,2,3,4} from state{1,2,3,4}\\n\\t* We can also get back to the state 1 in the second operation by button {2,3} from state{3,2}\\n\\t* We can also get back to the state 2 in the second operation by button 3 from state 1\\n\\t* We can also get back to the state 3 in the second operation by button 2 from state 1\\n* In the 3+ operation, we can get at most 8 states which appear in above:\\n\\tThere are no more states besides above which means at most we can get 8 states.\\n\\tMeanwhile, we can get state 4 by button {1,2,3,4} from state {7,5,6,0} so we can get at most all states when we operate more than twice .\\n```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m==0){ // if there are no bulbs\\n            return 1; //  only 1 state\\n        }else if(m == 1){ // if there is at least one bulb & we operate only once\\n            return min(n+1,4); // we can get no more than 4 status (n+1 from the description which shows operate 1, 2, 3 bulbs once means 2, 3, 4 states)\\n        }else{ //if there is at least one bulb and we operate more than once\\n            int sum = 1;\\n            for(int i = 0; i < n && i < 3; i++){// we can get no more than pow(2,n) states (i < 3 means we do not need to calculate when i >= 3 because sum is more than 8 in that time)\\n                sum *=2;\\n            }\\n            int minn = 7; // if we operate only twice , we can NOT get one of 8 states. That state we cannot get  back in the second time , 7 = 8 - 1\\n            if(m > 2){\\n\\t\\t\\t\\t\\tminn = 8; // we can get no more than 8 states\\n            }\\n            return min(sum,minn);\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(m==0){ // if there are no bulbs\\n            return 1; //  only 1 state\\n        }else if(m == 1){ // if there is at least one bulb & we operate only once\\n            return min(n+1,4); // we can get no more than 4 status (n+1 from the description which shows operate 1, 2, 3 bulbs once means 2, 3, 4 states)\\n        }else{ //if there is at least one bulb and we operate more than once\\n            int sum = 1;\\n            for(int i = 0; i < n && i < 3; i++){// we can get no more than pow(2,n) states (i < 3 means we do not need to calculate when i >= 3 because sum is more than 8 in that time)\\n                sum *=2;\\n            }\\n            int minn = 7; // if we operate only twice , we can NOT get one of 8 states. That state we cannot get  back in the second time , 7 = 8 - 1\\n            if(m > 2){\\n\\t\\t\\t\\t\\tminn = 8; // we can get no more than 8 states\\n            }\\n            return min(sum,minn);\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 400425,
                "title": "bfs",
                "content": "bfs\\n1. careful about the lights being 1 indexed (turnoff every 3 and every 2 and every 1 could be a way to describe it)\\n2. repeats it self at minimal common multiple (tough point to visualize I find personally)\\n```\\nclass Solution(object):\\n    def flipLights(self, n, m):\\n        if n > 6: n = 6 + n % 6\\n        q = set([tuple([0] * n)])\\n        for _ in range(m):  q = set([n for e in q for n in self.neighbours(e)])\\n        #O(mn) = O(11m) = O(m)\\n        #the constant being < 11\\n        return len(q)\\n    def neighbours(self,el):\\n        return set([tuple([1 - e for e in el]), tuple([1 - e if i % 2 == 0 else e for i,e in enumerate(el)]),  tuple([e if i % 2 == 0 else 1 - e for i,e in enumerate(el)]), tuple([1 - e if i % 3 == 0 else e for i,e in enumerate(el)])])\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def flipLights(self, n, m):\\n        if n > 6: n = 6 + n % 6\\n        q = set([tuple([0] * n)])\\n        for _ in range(m):  q = set([n for e in q for n in self.neighbours(e)])\\n        #O(mn) = O(11m) = O(m)\\n        #the constant being < 11\\n        return len(q)\\n    def neighbours(self,el):\\n        return set([tuple([1 - e for e in el]), tuple([1 - e if i % 2 == 0 else e for i,e in enumerate(el)]),  tuple([e if i % 2 == 0 else 1 - e for i,e in enumerate(el)]), tuple([1 - e if i % 3 == 0 else e for i,e in enumerate(el)])])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 390418,
                "title": "cpp-o-1-case-analysis",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if (m==0) return 1;\\n        if (n==1)\\n            if (m>0)return 2;\\n\\n        if(n==2)\\n            if(m==1)return 3;\\n            else return 4;\\n        \\n        if (m==1)return 4;\\n        if(m==2)return 7;\\n            return 8;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if (m==0) return 1;\\n        if (n==1)\\n            if (m>0)return 2;\\n\\n        if(n==2)\\n            if(m==1)return 3;\\n            else return 4;\\n        \\n        if (m==1)return 4;\\n        if(m==2)return 7;\\n            return 8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 357812,
                "title": "same-input-passes-in-test-case-but-not-on-submission-n-3-m-1",
                "content": "```vector<string> result;\\n\\nvoid checkPresence(string s){\\n    vector<string> ::iterator it;\\n    it = find(result.begin(), result.end(), s);\\n    if(it == result.end()){\\n        // std::cout<<\"Entering String : \"<<s<<endl;\\n        result.push_back(s);\\n    }\\n}\\n\\n\\nvoid makePossible(int cases, string s){\\n    switch(cases){\\n        case 1:\\n            for(int i =0; i < s.length(); i++){\\n                s[i] = s[i] == \\'1\\' ? \\'0\\' : \\'1\\';\\n            }\\n            break;\\n        case 2 :\\n            for(int i = 1; i< s.length(); i+=2){\\n                s[i] = s[i] == \\'1\\' ? \\'0\\' : \\'1\\';\\n            }\\n            break;\\n        case 3 :\\n            for(int i = 0; i< s.length(); i+=2){\\n                s[i] = s[i] == \\'1\\' ? \\'0\\' : \\'1\\';\\n            }\\n            break;\\n        case 4 :\\n            for(int i= 0; i <s.length(); i+=3){\\n                s[i] = s[i] == \\'1\\' ? \\'0\\' : \\'1\\';\\n            }\\n            break;\\n    }\\n    checkPresence(s);\\n}\\n\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(n == 1){\\n            return 2;\\n        }\\n        string s = \"\";\\n        while(n > 0){\\n            char ch = 1 + \\'0\\';\\n            s += ch;\\n            n--;\\n        }\\n        result.push_back(s);\\n        while(m){\\n            // std::cout<<\"Here\\\\n\";\\n            for(auto a : result){\\n                makePossible(1, a);\\n                makePossible(2, a);\\n                makePossible(3, a);\\n                makePossible(4, a);\\n            }\\n            m--;\\n        }\\n        return result.size() - 1  ;\\n    }\\n};```",
                "solutionTags": [],
                "code": "```vector<string> result;\\n\\nvoid checkPresence(string s){\\n    vector<string> ::iterator it;\\n    it = find(result.begin(), result.end(), s);\\n    if(it == result.end()){\\n        // std::cout<<\"Entering String : \"<<s<<endl;\\n        result.push_back(s);\\n    }\\n}\\n\\n\\nvoid makePossible(int cases, string s){\\n    switch(cases){\\n        case 1:\\n            for(int i =0; i < s.length(); i++){\\n                s[i] = s[i] == \\'1\\' ? \\'0\\' : \\'1\\';\\n            }\\n            break;\\n        case 2 :\\n            for(int i = 1; i< s.length(); i+=2){\\n                s[i] = s[i] == \\'1\\' ? \\'0\\' : \\'1\\';\\n            }\\n            break;\\n        case 3 :\\n            for(int i = 0; i< s.length(); i+=2){\\n                s[i] = s[i] == \\'1\\' ? \\'0\\' : \\'1\\';\\n            }\\n            break;\\n        case 4 :\\n            for(int i= 0; i <s.length(); i+=3){\\n                s[i] = s[i] == \\'1\\' ? \\'0\\' : \\'1\\';\\n            }\\n            break;\\n    }\\n    checkPresence(s);\\n}\\n\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(n == 1){\\n            return 2;\\n        }\\n        string s = \"\";\\n        while(n > 0){\\n            char ch = 1 + \\'0\\';\\n            s += ch;\\n            n--;\\n        }\\n        result.push_back(s);\\n        while(m){\\n            // std::cout<<\"Here\\\\n\";\\n            for(auto a : result){\\n                makePossible(1, a);\\n                makePossible(2, a);\\n                makePossible(3, a);\\n                makePossible(4, a);\\n            }\\n            m--;\\n        }\\n        return result.size() - 1  ;\\n    }\\n};```",
                "codeTag": "C++"
            },
            {
                "id": 253846,
                "title": "do-you-like-for-in-javascript-here-it-is",
                "content": "```javascript\\nvar flipAll = function(lights) {\\n    var newLights = lights.slice();\\n    for(let i = 0; i < newLights.length; i++) {\\n        if(newLights[i] === 1) newLights[i] = 0;\\n        else newLights[i] = 1;\\n    }\\n    return newLights;\\n};\\n\\nvar flipEven = function(lights) {\\n    var newLights = lights.slice();\\n    for(let i = 0; i < newLights.length; i++) {\\n        if((i + 1) % 2 === 0) {\\n            if(newLights[i] === 1) newLights[i] = 0;\\n            else newLights[i] = 1;\\n        }\\n    }\\n    return newLights;\\n};\\n\\nvar flipOdd = function(lights) {\\n    var newLights = lights.slice();\\n    for(let i = 0; i < newLights.length; i++) {\\n        if((i + 1) % 2 !== 0) {\\n            if(newLights[i] === 1) newLights[i] = 0;\\n            else newLights[i] = 1;\\n        }\\n    }\\n    return newLights;\\n};\\n\\nvar flipNumber = function(lights) {\\n    var newLights = lights.slice();\\n    for(let i = 0; i < newLights.length; i++) {\\n        if((i + 1) % 3 === 1) {\\n            if(newLights[i] === 1) newLights[i] = 0;\\n            else newLights[i] = 1;\\n        }\\n    }\\n    return newLights;\\n};\\n\\nvar deleteDuplicatedCase = function(cases) {\\n    var newCases = cases.slice();\\n    for(let i = 0; i < newCases.length; i++) {\\n        for(let j = i + 1; j < newCases.length; j++) {\\n            let isSame = true;\\n            for(let index = 0; index < newCases[i].length; index++) {\\n                if(newCases[i][index] !== newCases[j][index]) {\\n                    isSame = false;\\n                }\\n            }\\n            if(isSame) {\\n                newCases.splice(j, 1);\\n                j--;\\n            }\\n        }\\n    }\\n    return newCases;\\n};\\n\\nvar flipLights = function(n, m) {\\n    var lights = []\\n    var cases = []\\n    if(m === 0) {\\n        return 1;\\n    }\\n    for(let i = 0; i < n; i++) {\\n        lights.push(1);\\n    }\\n    for(let i = 0; i < m; i++) {\\n        const casesLength = cases.length\\n        if(i === 0) {\\n            cases.push(flipAll(lights));\\n            cases.push(flipEven(lights));\\n            cases.push(flipOdd(lights));\\n            cases.push(flipNumber(lights));\\n        } else {\\n            for(let j = 0; j < casesLength; j++) {\\n                cases.push(flipAll(cases[j]));\\n                cases.push(flipEven(cases[j]));\\n                cases.push(flipOdd(cases[j]));\\n                cases.push(flipNumber(cases[j]));\\n            }\\n        }\\n        cases.splice(0, casesLength)\\n        cases = deleteDuplicatedCase(cases).slice();\\n    }\\n    return cases.length;\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```javascript\\nvar flipAll = function(lights) {\\n    var newLights = lights.slice();\\n    for(let i = 0; i < newLights.length; i++) {\\n        if(newLights[i] === 1) newLights[i] = 0;\\n        else newLights[i] = 1;\\n    }\\n    return newLights;\\n};\\n\\nvar flipEven = function(lights) {\\n    var newLights = lights.slice();\\n    for(let i = 0; i < newLights.length; i++) {\\n        if((i + 1) % 2 === 0) {\\n            if(newLights[i] === 1) newLights[i] = 0;\\n            else newLights[i] = 1;\\n        }\\n    }\\n    return newLights;\\n};\\n\\nvar flipOdd = function(lights) {\\n    var newLights = lights.slice();\\n    for(let i = 0; i < newLights.length; i++) {\\n        if((i + 1) % 2 !== 0) {\\n            if(newLights[i] === 1) newLights[i] = 0;\\n            else newLights[i] = 1;\\n        }\\n    }\\n    return newLights;\\n};\\n\\nvar flipNumber = function(lights) {\\n    var newLights = lights.slice();\\n    for(let i = 0; i < newLights.length; i++) {\\n        if((i + 1) % 3 === 1) {\\n            if(newLights[i] === 1) newLights[i] = 0;\\n            else newLights[i] = 1;\\n        }\\n    }\\n    return newLights;\\n};\\n\\nvar deleteDuplicatedCase = function(cases) {\\n    var newCases = cases.slice();\\n    for(let i = 0; i < newCases.length; i++) {\\n        for(let j = i + 1; j < newCases.length; j++) {\\n            let isSame = true;\\n            for(let index = 0; index < newCases[i].length; index++) {\\n                if(newCases[i][index] !== newCases[j][index]) {\\n                    isSame = false;\\n                }\\n            }\\n            if(isSame) {\\n                newCases.splice(j, 1);\\n                j--;\\n            }\\n        }\\n    }\\n    return newCases;\\n};\\n\\nvar flipLights = function(n, m) {\\n    var lights = []\\n    var cases = []\\n    if(m === 0) {\\n        return 1;\\n    }\\n    for(let i = 0; i < n; i++) {\\n        lights.push(1);\\n    }\\n    for(let i = 0; i < m; i++) {\\n        const casesLength = cases.length\\n        if(i === 0) {\\n            cases.push(flipAll(lights));\\n            cases.push(flipEven(lights));\\n            cases.push(flipOdd(lights));\\n            cases.push(flipNumber(lights));\\n        } else {\\n            for(let j = 0; j < casesLength; j++) {\\n                cases.push(flipAll(cases[j]));\\n                cases.push(flipEven(cases[j]));\\n                cases.push(flipOdd(cases[j]));\\n                cases.push(flipNumber(cases[j]));\\n            }\\n        }\\n        cases.splice(0, casesLength)\\n        cases = deleteDuplicatedCase(cases).slice();\\n    }\\n    return cases.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 237966,
                "title": "c-simple-solution-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(n==0||m==0) return 1;\\n        else if(n==1)return 2;\\n        else if(n==2) return m==1?3:4;\\n        else if(m==1) return 4;\\n        else return m==2?7:8;     \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        if(n==0||m==0) return 1;\\n        else if(n==1)return 2;\\n        else if(n==2) return m==1?3:4;\\n        else if(m==1) return 4;\\n        else return m==2?7:8;     \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 223202,
                "title": "pointless-one-line-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        return \"1111122213441478\"[(min(n, 3) * 4) + min(m, 3)] - \\'0\\';\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int flipLights(int n, int m) {\\n        return \"1111122213441478\"[(min(n, 3) * 4) + min(m, 3)] - \\'0\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 133044,
                "title": "built-recursion-tree-tle",
                "content": "**Idea**\\nI believe this question is more of a Math problem than programming. I tried building a recursion tree without realizing the pattern.\\nAlthough the following approach resulted in TLE, just wanted to put it out there in case if there are no patterns in the solution.\\nPlease comment if you find any pruning I can do for this recursion tree.\\n\\n```\\n    Set<Integer> seen = new HashSet<>();\\n    public int flipLights(int n, int m) {\\n        int[] lights = new int[n+1];\\n        flipLights(lights, 0, m);\\n        return seen.size();\\n    }\\n    private void flipLights(int[] lights, int count, int m){\\n        if(count == m){\\n            seen.add(toInteger(lights));\\n            return;\\n        }\\n        for(int i=1; i <= 4; i++){\\n            int[] tmp = Arrays.copyOf(lights, lights.length);\\n            perform(lights, i);\\n            flipLights(lights, count+1, m);\\n            //reset for new recursion path\\n            lights = Arrays.copyOf(tmp, tmp.length);\\n        }\\n    }\\n    private void perform(int[] lights, int op){\\n        if(op == 1)\\n            for(int i=1; i < lights.length; i++)\\n                lights[i] ^= 1;\\n        else if(op == 2)\\n            for(int i=2; i < lights.length; i+=2)\\n                lights[i] ^= 1;\\n        else if(op == 3)\\n            for(int i=1; i < lights.length; i+=2)\\n                lights[i] ^= 1;\\n        else\\n            for(int k=0; 3*k+1 < lights.length; k++)\\n                lights[3*k+1] ^= 1;\\n    }\\n    private int toInteger(int[] nums){\\n        int sum = 0;\\n        for(int i=1; i < nums.length; i++)\\n            sum = sum*2+nums[i];\\n        return sum;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    Set<Integer> seen = new HashSet<>();\\n    public int flipLights(int n, int m) {\\n        int[] lights = new int[n+1];\\n        flipLights(lights, 0, m);\\n        return seen.size();\\n    }\\n    private void flipLights(int[] lights, int count, int m){\\n        if(count == m){\\n            seen.add(toInteger(lights));\\n            return;\\n        }\\n        for(int i=1; i <= 4; i++){\\n            int[] tmp = Arrays.copyOf(lights, lights.length);\\n            perform(lights, i);\\n            flipLights(lights, count+1, m);\\n            //reset for new recursion path\\n            lights = Arrays.copyOf(tmp, tmp.length);\\n        }\\n    }\\n    private void perform(int[] lights, int op){\\n        if(op == 1)\\n            for(int i=1; i < lights.length; i++)\\n                lights[i] ^= 1;\\n        else if(op == 2)\\n            for(int i=2; i < lights.length; i+=2)\\n                lights[i] ^= 1;\\n        else if(op == 3)\\n            for(int i=1; i < lights.length; i+=2)\\n                lights[i] ^= 1;\\n        else\\n            for(int k=0; 3*k+1 < lights.length; k++)\\n                lights[3*k+1] ^= 1;\\n    }\\n    private int toInteger(int[] nums){\\n        int sum = 0;\\n        for(int i=1; i < nums.length; i++)\\n            sum = sum*2+nums[i];\\n        return sum;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 128006,
                "title": "python-o-1-beat-100",
                "content": "```\\nclass Solution:\\n    def flipLights(self, n, m):\\n        if m == 0: return 1\\n        if n == 1: return 2\\n        if n == 2:\\n            if m == 1: return 3\\n            return 4\\n        if n >= 3:\\n            if m == 1: return 4\\n            if m == 2: return 7        \\n    \\n        return 8\\n        ",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def flipLights(self, n, m):\\n        if m == 0: return 1\\n        if n == 1: return 2\\n        if n == 2:\\n            if m == 1: return 3\\n            return 4\\n        if n >= 3:\\n            if m == 1: return 4\\n            if m == 2: return 7        \\n    \\n        return 8\\n        ",
                "codeTag": "Java"
            },
            {
                "id": 123343,
                "title": "java-solution-with-explanation",
                "content": "```\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if (n == 0 || m == 0) return 1;\\n        if (n == 1) return 2;\\n        else if (n == 2) return (m == 1) ? 3 : 4;\\n        else  return (m == 1) ? 4 : (m == 2) ? 7 : 8;\\n    }\\n}\\n\\n/** 1 + 2 -> 3;\\n *  1 + 3 -> 2;\\n *  2 + 3 -> 1;\\n *  so all cases are: all_on, 1, 2, 3, 4, 1+4, 2+4, 3+4;\\n *  when m == 1, can only have 4 states ( 1, 2, 3, 4)\\n *  when m == 2, can only have 7states (all_on, 1, 2, 3, 1+4, 2+4, 3+4)\\n *  when m == 3, can get all 8 states\\n *  special case analysis required when n < 3;\\n */",
                "solutionTags": [],
                "code": "class Solution {\\n    public int flipLights(int n, int m) {\\n        if (n == 0 || m == 0) return 1;\\n        if (n == 1) return 2;\\n        else if (n == 2) return (m == 1) ? 3 : 4;\\n        else  return (m == 1) ? 4 : (m == 2) ? 7 : 8;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 116911,
                "title": "why-is-n-before-m-in-the-function-signature",
                "content": "Is it just me or would it be better practice to put them in alphabetical order, or call them something more informative like `n.lights` and `n.operations`?\n\n```\n    def flipLights(self, n, m):\n```",
                "solutionTags": [],
                "code": "```\n    def flipLights(self, n, m):\n```",
                "codeTag": "Python3"
            },
            {
                "id": 113976,
                "title": "a-simple-c-solution-accepted",
                "content": "```\\nint flipLights(int n, int m) {\\n    if(m==0){return 1;}\\n    if(n==1){return 2;}\\n    if(n==2&&m==1){return 3;}\\n    if(n==2){return 4;}\\n    if(m==1){return 4;}\\n    if(m==2){return 7;}\\n    if(m>=3){return 8;}\\n    return 0;\\n}\\n````",
                "solutionTags": [],
                "code": "```\\nint flipLights(int n, int m) {\\n    if(m==0){return 1;}\\n    if(n==1){return 2;}\\n    if(n==2&&m==1){return 3;}\\n    if(n==2){return 4;}\\n    if(m==1){return 4;}\\n    if(m==2){return 7;}\\n    if(m>=3){return 8;}\\n    return 0;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 107268,
                "title": "java-o-1-solution-detail-explaination",
                "content": "for four switches , there are 16 combinations:\\n0000\\n0001\\n0010\\n0011\\n....\\n1110\\n1111\\n\\nas @woshifumingyuan have explained 1+2 = 3, 1+3 = 2, 2+3 = 1\\n\\nso :\\n1. all on        0000 = 1110\\n2. turn on 4   0001 = 1111\\n3. turn on 3   0010 = 1100\\n4. turn on 2   0100 = 1010\\n5.turn on 2+4      0101 = 1011\\n 6.turn on 1         0110 = 1000\\n7.turn on 1+4     0111 = 1001\\n 8.turn on 1+4     0011 = 1101\\ntotally, there are only 8 cases. we reduce 16 cases into 8 cases. \\n\\nbut n <= 2 and m < 3 cases needed to be considered individually because:\\n1. when there is only one light, there will be two status: on and off\\n2. when there are two lights:\\n                                            1. m = 1, only have 3 status: off off, off, on, off on\\n   2 . m >= 2, will have four status: off off, off on, on off, off off.\\n3. when n > 2 && m == 1, will have four status: 0001, 0010, 0100, 1000\\n4. when n > 2 && m == 2, will have 7 status: 0000, 1100, 1010, 0101, 0110, 1001, 0001\\n5. other cases will have 8 status.\\n```\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if (n == 0) return 0;\\n        if (m == 0) return 1;\\n        if (n == 1) return 2;\\n        if (n == 2 && m == 1) return 3;\\n        if (n == 2) return 4;\\n        if (m == 1) return 4;\\n        if (m == 2) return 7;\\n       return 8;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        if (n == 0) return 0;\\n        if (m == 0) return 1;\\n        if (n == 1) return 2;\\n        if (n == 2 && m == 1) return 3;\\n        if (n == 2) return 4;\\n        if (m == 1) return 4;\\n        if (m == 2) return 7;\\n       return 8;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107275,
                "title": "simple-thought-process-code",
                "content": "It seems that there are many states resulted from different operation sequences, however, if we look at operation sequences more closely(denoted 1,2,3,4 for each operation, 0 for \"no change\"):\\n\\nWhen m = 1:\\n1=1,2=2,3=3,4=4\\n\\nWhen m = 2:\\n11=0,12=3,13=2,14=14\\n21=3,22=0,23=1,24=24\\n31=2,32=1,33=0,34=34\\n41=14,42=24,43=34,44=0\\n\\nso actually, when m = 2:\\n0,1,2,3,4,14,24,34\\n\\nWhen m >=3:\\nI try out when m=3, the sequences are also 0,1,2,3,4,14,24,34, after cancelling the same operations(like 12=3 etc). I then made a guess when m > 3 the case would be the same. \\n\\nAnd also list out some corner cases when n < 3 and m < 3, we get:\\n\\n```\\nclass Solution {\\npublic:\\n    // 1,2,3,4,11=22=33=44,14,24,34\\n    int flipLights(int n, int m) \\n    {\\n        if (!m) return 1;\\n        if (n == 1) return 2;\\n        if (n == 2 && m == 1) return 3;\\n        if (n == 2 && m >= 2) return 4;\\n        if (m == 1) return 4;\\n        if (m == 2) return 7;\\n        return 8;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    // 1,2,3,4,11=22=33=44,14,24,34\\n    int flipLights(int n, int m) \\n    {\\n        if (!m) return 1;\\n        if (n == 1) return 2;\\n        if (n == 2 && m == 1) return 3;\\n        if (n == 2 && m >= 2) return 4;\\n        if (m == 1) return 4;\\n        if (m == 2) return 7;\\n        return 8;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107276,
                "title": "python-hard-code-o-1-solution",
                "content": "```\\nclass Solution(object):\\n    def flipLights(self, n, m):\\n        if m == 0 or n == 0:\\n            return 1\\n        if n == 1:\\n            return 2\\n        if n == 2:\\n            if m == 1:\\n                return 3\\n            return 4\\n        if n > 2:\\n            if m == 1:\\n                return 4\\n            elif m == 2:\\n                return 7\\n            return 8\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def flipLights(self, n, m):\\n        if m == 0 or n == 0:\\n            return 1\\n        if n == 1:\\n            return 2\\n        if n == 2:\\n            if m == 1:\\n                return 3\\n            return 4\\n        if n > 2:\\n            if m == 1:\\n                return 4\\n            elif m == 2:\\n                return 7\\n            return 8\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107283,
                "title": "java-verbose-solution-using-hashmap-just-do-the-flip-step-by-step",
                "content": "The idea is to use hashmap to store the visited pattern of the bulbs. So you do not need to do the 4 different flips again. And the usage of set can make sure there is no duplicates.\\n\\n    public int flipLights(int n, int m) {     \\n        StringBuilder status = new StringBuilder();\\n        Map<String, String[]> memo = new HashMap<>();\\n        for (int i = 0; i < n; i++) {\\n            status.append(1);\\n        }\\n        Queue<String> current = new LinkedList<>();\\n        current.offer(status.toString());\\n        for (int i = 0; i < m; i++) {\\n            Set<String> visited = new HashSet<>();\\n            while (current.peek() != null) {\\n                String cs = current.poll();\\n                if (memo.containsKey(cs)) {\\n                    for (int j = 0; j < 4; j++) {\\n                        visited.add(memo.get(cs)[j]);\\n                    }\\n                }\\n                else {\\n                    char[] c1 = cs.toCharArray();\\n                    char[] c2 = cs.toCharArray();\\n                    char[] c3 = cs.toCharArray();\\n                    char[] c4 = cs.toCharArray();\\n                    for (int j = 0; j < n; j++) {\\n                        c1[j] = flip(c1[j]);\\n                        if (j%2 == 0) {\\n                            c2[j] = flip(c2[j]);\\n                        }\\n                        if (j%2 == 1) {\\n                            c3[j] = flip(c3[j]);\\n                        }\\n                        if ( j % 3 == 0) {\\n                            c4[j] = flip(c4[j]);\\n                        }\\n                    }\\n                    StringBuilder s1 = new StringBuilder();\\n                    StringBuilder s2 = new StringBuilder();\\n                    StringBuilder s3 = new StringBuilder();\\n                    StringBuilder s4 = new StringBuilder();\\n                    for (int j = 0; j < n; j++) {\\n                        s1.append(c1[j]);\\n                        s2.append(c2[j]);\\n                        s3.append(c3[j]);\\n                        s4.append(c4[j]);\\n                    }\\n                    visited.add(s1.toString());\\n                    visited.add(s2.toString());\\n                    visited.add(s3.toString());\\n                    visited.add(s4.toString());\\n                    String[] temp = {s1.toString(),s2.toString(),s3.toString(),s4.toString()};\\n                    memo.put(cs, temp);\\n                }\\n            }\\n            for (String str: visited) {\\n                current.offer(str);\\n            }\\n        }\\n        return current.size();\\n    }\\n    private char flip(char i) {\\n        if (i == '1') return '0';\\n        else return '1';\\n    }",
                "solutionTags": [],
                "code": "The idea is to use hashmap to store the visited pattern of the bulbs. So you do not need to do the 4 different flips again. And the usage of set can make sure there is no duplicates.\\n\\n    public int flipLights(int n, int m) {     \\n        StringBuilder status = new StringBuilder();\\n        Map<String, String[]> memo = new HashMap<>();\\n        for (int i = 0; i < n; i++) {\\n            status.append(1);\\n        }\\n        Queue<String> current = new LinkedList<>();\\n        current.offer(status.toString());\\n        for (int i = 0; i < m; i++) {\\n            Set<String> visited = new HashSet<>();\\n            while (current.peek() != null) {\\n                String cs = current.poll();\\n                if (memo.containsKey(cs)) {\\n                    for (int j = 0; j < 4; j++) {\\n                        visited.add(memo.get(cs)[j]);\\n                    }\\n                }\\n                else {\\n                    char[] c1 = cs.toCharArray();\\n                    char[] c2 = cs.toCharArray();\\n                    char[] c3 = cs.toCharArray();\\n                    char[] c4 = cs.toCharArray();\\n                    for (int j = 0; j < n; j++) {\\n                        c1[j] = flip(c1[j]);\\n                        if (j%2 == 0) {\\n                            c2[j] = flip(c2[j]);\\n                        }\\n                        if (j%2 == 1) {\\n                            c3[j] = flip(c3[j]);\\n                        }\\n                        if ( j % 3 == 0) {\\n                            c4[j] = flip(c4[j]);\\n                        }\\n                    }\\n                    StringBuilder s1 = new StringBuilder();\\n                    StringBuilder s2 = new StringBuilder();\\n                    StringBuilder s3 = new StringBuilder();\\n                    StringBuilder s4 = new StringBuilder();\\n                    for (int j = 0; j < n; j++) {\\n                        s1.append(c1[j]);\\n                        s2.append(c2[j]);\\n                        s3.append(c3[j]);\\n                        s4.append(c4[j]);\\n                    }\\n                    visited.add(s1.toString());\\n                    visited.add(s2.toString());\\n                    visited.add(s3.toString());\\n                    visited.add(s4.toString());\\n                    String[] temp = {s1.toString(),s2.toString(),s3.toString(),s4.toString()};\\n                    memo.put(cs, temp);\\n                }\\n            }\\n            for (String str: visited) {\\n                current.offer(str);\\n            }\\n        }\\n        return current.size();\\n    }\\n    private char flip(char i) {\\n        if (i == '1') return '0';\\n        else return '1';\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 107284,
                "title": "java-o-1-solution-with-explanation",
                "content": "```\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        // for the 4 operations(labeled 1-4, also suppose the original condition is 0):\\n        // 1 + 2 -> 3\\n        // 1 + 3 -> 2\\n        // 2 + 3 -> 1\\n        // So if n <= 2 and m == 1, the conditions are 1,2,3\\n        // if m >= 2, the conditions are 0,1,2,3\\n        // if n > 2, we need to also count condition 4\\n        // if m == 1, the conditions are 1,2,3,4\\n        // if m == 2, the conditions are 0,1,2,3,1+4,2+4,3+4\\n        // if m > 2, the conditions are 0,1,2,3,0+4,1+4,2+4,3+4\\n        if (n == 0) return 0;\\n        if (m == 0) return 1;\\n        if (n == 1) return 2;\\n        if (n <= 2) {\\n            if (m == 1) return 3;\\n            else return 4;\\n        }\\n        else if (m == 1) return 4;\\n        else if (m == 2) return 7;\\n        else return 8;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int flipLights(int n, int m) {\\n        // for the 4 operations(labeled 1-4, also suppose the original condition is 0):\\n        // 1 + 2 -> 3\\n        // 1 + 3 -> 2\\n        // 2 + 3 -> 1\\n        // So if n <= 2 and m == 1, the conditions are 1,2,3\\n        // if m >= 2, the conditions are 0,1,2,3\\n        // if n > 2, we need to also count condition 4\\n        // if m == 1, the conditions are 1,2,3,4\\n        // if m == 2, the conditions are 0,1,2,3,1+4,2+4,3+4\\n        // if m > 2, the conditions are 0,1,2,3,0+4,1+4,2+4,3+4\\n        if (n == 0) return 0;\\n        if (m == 0) return 1;\\n        if (n == 1) return 2;\\n        if (n <= 2) {\\n            if (m == 1) return 3;\\n            else return 4;\\n        }\\n        else if (m == 1) return 4;\\n        else if (m == 2) return 7;\\n        else return 8;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107285,
                "title": "java-solution",
                "content": "Analysis the operations at first:\\n0. Do nothing (dummy rules)\\n1. Flip all the lights.\\n2. Flip lights with even numbers.\\n3. Flip lights with odd numbers.\\n4. Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...\\n\\nWe can found some rules:\\n1. Do the same operations twice means we do nothing.\\n1 + 1 = 2 + 2 = 3 + 3 = 4 + 4 = 0\\n2. Operations 1, 2, 3 have the relationship:\\n1 + 2 = 3, 1 + 3 = 2, 2 + 3 = 1\\ne..g, we do operations 1 and 2, the result is the same as we just do operation 3.\\n3. Operations 4 is independantly.\\n\\nLet's say n is the number of lights, m is the number of operations.\\nWhen n <= 2, actually operation 4 equals to operation 3. When n = 3, op4 is different with any other operations. So if n > 3, we can just consider as n = 3.\\nWhen m >= 3, whatever the operations are, the results cannot contains any two of operation [0, 1, 2, 3] because of the rule 2. e.g., if the operations are {1, 2, 4}, it would just equal to [3, 4].\\nAll the possible results can be listed : [0+4, 1+4, 2+4, 3+4, 0, 1, 2, 3]. So the result is 8.\\nWhen m == 2, the operation 0+4 cannot happened. So the result is 7.\\n\\n```\\npublic int flipLights(int n, int m) {\\n    int[][] tab = new int[][]{\\n            {1, 1, 1, 1},\\n            {1, 2, 2, 2},\\n            {1, 3, 4, 4},\\n            {1, 4, 7, 8}};\\n    if (n > 3) n = 3;\\n    if (m > 3) m = 3;\\n    return tab[n][m];\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int flipLights(int n, int m) {\\n    int[][] tab = new int[][]{\\n            {1, 1, 1, 1},\\n            {1, 2, 2, 2},\\n            {1, 3, 4, 4},\\n            {1, 4, 7, 8}};\\n    if (n > 3) n = 3;\\n    if (m > 3) m = 3;\\n    return tab[n][m];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 107286,
                "title": "dfs-bfs-swift",
                "content": "```\\nclass Solution {\\n    func flipLights_BFS(_ n: Int, _ m: Int) -> Int {\\n        if n <= 0 || m <= 0 {\\n            return 1\\n        }\\n        \\n        let status = [String](repeatElement(\"1\", count: n))\\n        var queue = [[String]]()\\n        var level = 0\\n        var result = 0\\n        \\n        queue.append(status)\\n        while !queue.isEmpty {\\n            let count = queue.count\\n            var visited = Set<String>()\\n            level += 1\\n            for _ in 0..<count {\\n                let status = queue.removeFirst()\\n                let statusArray = [action1(status), action2(status), action3(status), action4(status)]\\n                \\n                for status in statusArray {\\n                    if !visited.contains(status.joined()) {\\n                        if level != m {\\n                            queue.append(status)\\n                        }\\n                        visited.insert(status.joined())\\n                    }\\n                }\\n                \\n                if level == m {\\n                    result = visited.count\\n                }\\n            }\\n        }\\n        \\n        return result\\n    }\\n    \\n    func flipLights_DFS(_ n: Int, _ m: Int) -> Int {\\n        if n <= 0 || m <= 0 {\\n            return 1\\n        }\\n        \\n        let status = [String](repeatElement(\"1\", count: n))\\n        var kinds = Set<String>()\\n        var cache = Set<String>()\\n        \\n        helper(m, status, &kinds, &cache)\\n        \\n        return kinds.count\\n    }\\n    \\n    private func helper(_ remain: Int, _ status: [String], _ kinds: inout Set<String>, _ cache: inout Set<String>) {\\n        if remain == 0 {\\n            kinds.insert(status.joined())\\n            return\\n        }\\n        \\n        let statusArray = [action1(status), action2(status), action3(status), action4(status)]\\n        \\n        for status in statusArray {\\n            if !cache.contains(\"\\\\(remain)_\\\\(status.joined())\") {\\n                helper(remain - 1, status, &kinds, &cache)\\n                cache.insert(\"\\\\(remain)_\\\\(status.joined())\")\\n            }\\n        }\\n    }\\n    \\n    private func action1(_ status: [String]) -> [String] {\\n        var result = [String]()\\n        \\n        for i in 0..<status.count {\\n            result.append(flip(status[i]))\\n        }\\n        \\n        return result\\n    }\\n    \\n    private func action2(_ status: [String]) -> [String] {\\n        var result = [String]()\\n        \\n        for i in 0..<status.count {\\n            if (i + 1) % 2 == 0 {\\n                result.append(flip(status[i]))\\n            } else {\\n                result.append(status[i])\\n            }\\n        }\\n        \\n        return result\\n    }\\n    \\n    private func action3(_ status: [String]) -> [String] {\\n        var result = [String]()\\n        \\n        for i in 0..<status.count {\\n            if (i + 1) % 2 == 1 {\\n                result.append(flip(status[i]))\\n            } else {\\n                result.append(status[i])\\n            }\\n        }\\n        \\n        return result\\n    }\\n    \\n    private func action4(_ status: [String]) -> [String] {\\n        var result = [String]()\\n        \\n        for i in 0..<status.count {\\n            if (i + 1) % 3 == 1 {\\n                result.append(flip(status[i]))\\n            } else {\\n                result.append(status[i])\\n            }\\n        }\\n        \\n        return result\\n    }\\n    \\n    private func flip(_ status: String) -> String {\\n        return status == \"1\" ? \"0\" : \"1\"\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Depth-First Search",
                    "Breadth-First Search"
                ],
                "code": "```\\nclass Solution {\\n    func flipLights_BFS(_ n: Int, _ m: Int) -> Int {\\n        if n <= 0 || m <= 0 {\\n            return 1\\n        }\\n        \\n        let status = [String](repeatElement(\"1\", count: n))\\n        var queue = [[String]]()\\n        var level = 0\\n        var result = 0\\n        \\n        queue.append(status)\\n        while !queue.isEmpty {\\n            let count = queue.count\\n            var visited = Set<String>()\\n            level += 1\\n            for _ in 0..<count {\\n                let status = queue.removeFirst()\\n                let statusArray = [action1(status), action2(status), action3(status), action4(status)]\\n                \\n                for status in statusArray {\\n                    if !visited.contains(status.joined()) {\\n                        if level != m {\\n                            queue.append(status)\\n                        }\\n                        visited.insert(status.joined())\\n                    }\\n                }\\n                \\n                if level == m {\\n                    result = visited.count\\n                }\\n            }\\n        }\\n        \\n        return result\\n    }\\n    \\n    func flipLights_DFS(_ n: Int, _ m: Int) -> Int {\\n        if n <= 0 || m <= 0 {\\n            return 1\\n        }\\n        \\n        let status = [String](repeatElement(\"1\", count: n))\\n        var kinds = Set<String>()\\n        var cache = Set<String>()\\n        \\n        helper(m, status, &kinds, &cache)\\n        \\n        return kinds.count\\n    }\\n    \\n    private func helper(_ remain: Int, _ status: [String], _ kinds: inout Set<String>, _ cache: inout Set<String>) {\\n        if remain == 0 {\\n            kinds.insert(status.joined())\\n            return\\n        }\\n        \\n        let statusArray = [action1(status), action2(status), action3(status), action4(status)]\\n        \\n        for status in statusArray {\\n            if !cache.contains(\"\\\\(remain)_\\\\(status.joined())\") {\\n                helper(remain - 1, status, &kinds, &cache)\\n                cache.insert(\"\\\\(remain)_\\\\(status.joined())\")\\n            }\\n        }\\n    }\\n    \\n    private func action1(_ status: [String]) -> [String] {\\n        var result = [String]()\\n        \\n        for i in 0..<status.count {\\n            result.append(flip(status[i]))\\n        }\\n        \\n        return result\\n    }\\n    \\n    private func action2(_ status: [String]) -> [String] {\\n        var result = [String]()\\n        \\n        for i in 0..<status.count {\\n            if (i + 1) % 2 == 0 {\\n                result.append(flip(status[i]))\\n            } else {\\n                result.append(status[i])\\n            }\\n        }\\n        \\n        return result\\n    }\\n    \\n    private func action3(_ status: [String]) -> [String] {\\n        var result = [String]()\\n        \\n        for i in 0..<status.count {\\n            if (i + 1) % 2 == 1 {\\n                result.append(flip(status[i]))\\n            } else {\\n                result.append(status[i])\\n            }\\n        }\\n        \\n        return result\\n    }\\n    \\n    private func action4(_ status: [String]) -> [String] {\\n        var result = [String]()\\n        \\n        for i in 0..<status.count {\\n            if (i + 1) % 3 == 1 {\\n                result.append(flip(status[i]))\\n            } else {\\n                result.append(status[i])\\n            }\\n        }\\n        \\n        return result\\n    }\\n    \\n    private func flip(_ status: String) -> String {\\n        return status == \"1\" ? \"0\" : \"1\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 107287,
                "title": "o-1-java-bit-operation",
                "content": "Java O(1) solution:\\n\\nExplain: \\n\\n*  for n > 3, result is same as n = 3, if same series of operations apply on 3 bulbs generate k distinct result, apply them on more than 3 bulbs would also generate k distinct result.\\n*  only even and odd matters for each operation. So the total possible op series would be [0,0,0,0], [0,0,0,1]...to [1,1,1,1], 16 total\\n*  order of operations doesn't matter\\n\\n```\\npublic int flipLights(int n, int m) {\\n        int odd = 0b101;\\n        int even = 0b010;\\n        int three = 0b001;\\n        if (n > 3) n = 3;\\n        Set<Integer> res = new HashSet<>();\\n        for (int i = 0; i < 16; ++i) {\\n            int cnt = 0;\\n\\n            for (int k = 0; k < 4; ++k) if ((i&(1<<k)) != 0)++cnt;\\n            if (cnt % 2 != m % 2 || m < cnt) continue;\\n            int v = (1 << n) - 1;\\n            int mask = v;\\n            if ((i & 1) != 0) v = ~v;\\n            if ((i & 2) != 0) v = even&~v|v&~even;\\n            if ((i & 4) != 0) v = odd&~v|v&~odd;\\n            if ((i & 8) != 0) v = three&~v|v&~three;\\n            res.add(v&mask);\\n        }\\n        return res.size();\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int flipLights(int n, int m) {\\n        int odd = 0b101;\\n        int even = 0b010;\\n        int three = 0b001;\\n        if (n > 3) n = 3;\\n        Set<Integer> res = new HashSet<>();\\n        for (int i = 0; i < 16; ++i) {\\n            int cnt = 0;\\n\\n            for (int k = 0; k < 4; ++k) if ((i&(1<<k)) != 0)++cnt;\\n            if (cnt % 2 != m % 2 || m < cnt) continue;\\n            int v = (1 << n) - 1;\\n            int mask = v;\\n            if ((i & 1) != 0) v = ~v;\\n            if ((i & 2) != 0) v = even&~v|v&~even;\\n            if ((i & 4) != 0) v = odd&~v|v&~odd;\\n            if ((i & 8) != 0) v = three&~v|v&~three;\\n            res.add(v&mask);\\n        }\\n        return res.size();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 107289,
                "title": "c-solution",
                "content": "```\\npublic class Solution {\\n    public int FlipLights(int n, int m) {\\n        if(m == 0)\\n            return 1;\\n        if(n == 0)\\n            return 1;\\n        else if(n == 1)\\n            return 2;\\n        \\n        if(n > 4)\\n            n=4;\\n        \\n        HashSet<int> pool = new HashSet<int>();\\n        int max = 1 << n;\\n        pool.Add(max-1);\\n        int b1 = 15 >> (4-n);\\n        int b2 = 10 >> (4-n);\\n        int b3 = 5 >> (4-n);\\n        int b4 = 9 >> (4-n);\\n        while(m > 0 && pool.Count() < max){\\n            HashSet<int> newpool = new HashSet<int>();\\n            foreach(var item in pool){\\n                newpool.Add(item ^ b1);\\n                newpool.Add(item ^ b2);\\n                newpool.Add(item ^ b3);\\n                newpool.Add(item ^ b4);\\n            }\\n            pool = newpool;\\n            m--;\\n        }\\n        \\n        return pool.Count();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int FlipLights(int n, int m) {\\n        if(m == 0)\\n            return 1;\\n        if(n == 0)\\n            return 1;\\n        else if(n == 1)\\n            return 2;\\n        \\n        if(n > 4)\\n            n=4;\\n        \\n        HashSet<int> pool = new HashSet<int>();\\n        int max = 1 << n;\\n        pool.Add(max-1);\\n        int b1 = 15 >> (4-n);\\n        int b2 = 10 >> (4-n);\\n        int b3 = 5 >> (4-n);\\n        int b4 = 9 >> (4-n);\\n        while(m > 0 && pool.Count() < max){\\n            HashSet<int> newpool = new HashSet<int>();\\n            foreach(var item in pool){\\n                newpool.Add(item ^ b1);\\n                newpool.Add(item ^ b2);\\n                newpool.Add(item ^ b3);\\n                newpool.Add(item ^ b4);\\n            }\\n            pool = newpool;\\n            m--;\\n        }\\n        \\n        return pool.Count();\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1565085,
                "content": [
                    {
                        "username": "gunax",
                        "content": "So it\\'s a somewhat interesting problem, but only if you think of it as a math problem. As a programming problem, i think it\\'s lame.\\n\\nGiven a set of operations, what state would the lights end up in?\\nLet\\'s call f(a) the new state of the lights after performing a\\n\\nLet\\'s add another switch, switch 0, the identity switch (switch 0 does nothing).\\nl1: f(0a) = f(a)\\n\\nFirst, note that flipping is commutative: order does not matter.\\nl2: f(ab) = f(ba)\\n\\nsecond, each function is an inverse of itself:\\nl3: f(aa) = f(0)\\n\\nfinally, note that there flipping odds and evens is the same as flipping all:\\nl4: f(23) = f(1)\\n\\tf(12) = f(3)\\n\\tf(13) = f(2)\\n\\nNow we can reduce any sequence to something much simpler.\\ntake a sequence like:\\n14342\\nby lemma 2 we can re-order:\\n12344\\nusing l4:\\n1144\\nthen by l3:\\n00\\nwhich is just the starting position.\\n\\nIt turns out that we only care then if there is an even or odd number of each flip. The total enumeration of states is:\\n0\\n1\\n2\\n3\\n4\\n12\\n13\\n14\\n23\\n24\\n34\\n123\\n124\\n134\\n234\\n1234\\n\\n16 states... but wait, using lemma 4, some of these are the same (eg 134 = 24). Removing the redundancies from the list above:\\n0\\n1\\n2\\n3\\n4\\n14\\n24\\n34\\n\\nwe get 8 states.\\nSo for a sufficiently high m (turns out its >= 3), we get:\\nflipLights(0) = 1;\\nflipLights(1) = 4\\nflipLights(2+) = 8\\n\\nI am done. This was a waste."
                    },
                    {
                        "username": "yorkshire",
                        "content": "I guess it ought to be, with expected zero output.\nNo lights can have no status.\nBut the OJ seems to output a positive integer eg n = 0, m = 3 outputs 4."
                    },
                    {
                        "username": "awice",
                        "content": "**Firstly, we may take `n = min(n, 3)`.**  The sequence of lights clearly repeats every 6, so the first 6 lights are representative of the whole sequence, as we can construct eg. the 7th light (it's equal to the 1st).\\n\\nActually, the first 3 lights are representative of the whole sequence.  If the operations are a, b, c, d; then modulo 2:\\n\\n* Light 1 = 1 + a + c + d\\n* Light 2 = 1 + a + b\\n* Light 3 = 1 + a + c\\n* Light 4 = 1 + a + b + d\\n* Light 5 = 1 + a + c\\n* Light 6 = 1 + a + b\\n\\nSo that (modulo 2):\\n* Light 4 = (Light 1) + (Light 2) + (Light 3)\\n* Light 5 = Light 3, and \\n* Light 6 = Light 2.\\n\\n---\\n\\nNow, we can do cases on `m`, and analyze the possible lightbulb states for `n >= 3`.  The transitions are to XOR by (1, 1, 1), (0, 1, 0), (1, 0, 1), or (1, 0, 0).\\n\\n* If `m = 0` there is only one state `(1, 1, 1)`.\\n* If `m = 1` then we could get `(0, 0, 0), (1, 0, 1), (0, 1, 0), (0, 1, 1)`.\\n* If `m = 2` we could get all 8 possibilities except `(0, 1, 1)`.\\n* If `m = 3` we can get every possibility.\\n\\nThis reduced the problem to knowing the answer for `m <= 3, n <= 3`.  The final answer is:\\n\\n* When `n == 1`, the answer is 1 if `m == 0`, else 2.\\n* When `n == 2`, the answer is 1 if `m == 0`, 3 if `m == 1`, else 4.\\n* When `n >= 3`, the answer is 1 if `m == 0`, 4 if `m == 1`, 7 if `m == 2`, else 8."
                    },
                    {
                        "username": "dQw4w9WgXcQ",
                        "content": "pretty hard for a med lol"
                    }
                ]
            },
            {
                "id": 1568010,
                "content": [
                    {
                        "username": "gunax",
                        "content": "So it\\'s a somewhat interesting problem, but only if you think of it as a math problem. As a programming problem, i think it\\'s lame.\\n\\nGiven a set of operations, what state would the lights end up in?\\nLet\\'s call f(a) the new state of the lights after performing a\\n\\nLet\\'s add another switch, switch 0, the identity switch (switch 0 does nothing).\\nl1: f(0a) = f(a)\\n\\nFirst, note that flipping is commutative: order does not matter.\\nl2: f(ab) = f(ba)\\n\\nsecond, each function is an inverse of itself:\\nl3: f(aa) = f(0)\\n\\nfinally, note that there flipping odds and evens is the same as flipping all:\\nl4: f(23) = f(1)\\n\\tf(12) = f(3)\\n\\tf(13) = f(2)\\n\\nNow we can reduce any sequence to something much simpler.\\ntake a sequence like:\\n14342\\nby lemma 2 we can re-order:\\n12344\\nusing l4:\\n1144\\nthen by l3:\\n00\\nwhich is just the starting position.\\n\\nIt turns out that we only care then if there is an even or odd number of each flip. The total enumeration of states is:\\n0\\n1\\n2\\n3\\n4\\n12\\n13\\n14\\n23\\n24\\n34\\n123\\n124\\n134\\n234\\n1234\\n\\n16 states... but wait, using lemma 4, some of these are the same (eg 134 = 24). Removing the redundancies from the list above:\\n0\\n1\\n2\\n3\\n4\\n14\\n24\\n34\\n\\nwe get 8 states.\\nSo for a sufficiently high m (turns out its >= 3), we get:\\nflipLights(0) = 1;\\nflipLights(1) = 4\\nflipLights(2+) = 8\\n\\nI am done. This was a waste."
                    },
                    {
                        "username": "yorkshire",
                        "content": "I guess it ought to be, with expected zero output.\nNo lights can have no status.\nBut the OJ seems to output a positive integer eg n = 0, m = 3 outputs 4."
                    },
                    {
                        "username": "awice",
                        "content": "**Firstly, we may take `n = min(n, 3)`.**  The sequence of lights clearly repeats every 6, so the first 6 lights are representative of the whole sequence, as we can construct eg. the 7th light (it's equal to the 1st).\\n\\nActually, the first 3 lights are representative of the whole sequence.  If the operations are a, b, c, d; then modulo 2:\\n\\n* Light 1 = 1 + a + c + d\\n* Light 2 = 1 + a + b\\n* Light 3 = 1 + a + c\\n* Light 4 = 1 + a + b + d\\n* Light 5 = 1 + a + c\\n* Light 6 = 1 + a + b\\n\\nSo that (modulo 2):\\n* Light 4 = (Light 1) + (Light 2) + (Light 3)\\n* Light 5 = Light 3, and \\n* Light 6 = Light 2.\\n\\n---\\n\\nNow, we can do cases on `m`, and analyze the possible lightbulb states for `n >= 3`.  The transitions are to XOR by (1, 1, 1), (0, 1, 0), (1, 0, 1), or (1, 0, 0).\\n\\n* If `m = 0` there is only one state `(1, 1, 1)`.\\n* If `m = 1` then we could get `(0, 0, 0), (1, 0, 1), (0, 1, 0), (0, 1, 1)`.\\n* If `m = 2` we could get all 8 possibilities except `(0, 1, 1)`.\\n* If `m = 3` we can get every possibility.\\n\\nThis reduced the problem to knowing the answer for `m <= 3, n <= 3`.  The final answer is:\\n\\n* When `n == 1`, the answer is 1 if `m == 0`, else 2.\\n* When `n == 2`, the answer is 1 if `m == 0`, 3 if `m == 1`, else 4.\\n* When `n >= 3`, the answer is 1 if `m == 0`, 4 if `m == 1`, 7 if `m == 2`, else 8."
                    },
                    {
                        "username": "dQw4w9WgXcQ",
                        "content": "pretty hard for a med lol"
                    }
                ]
            },
            {
                "id": 1569148,
                "content": [
                    {
                        "username": "gunax",
                        "content": "So it\\'s a somewhat interesting problem, but only if you think of it as a math problem. As a programming problem, i think it\\'s lame.\\n\\nGiven a set of operations, what state would the lights end up in?\\nLet\\'s call f(a) the new state of the lights after performing a\\n\\nLet\\'s add another switch, switch 0, the identity switch (switch 0 does nothing).\\nl1: f(0a) = f(a)\\n\\nFirst, note that flipping is commutative: order does not matter.\\nl2: f(ab) = f(ba)\\n\\nsecond, each function is an inverse of itself:\\nl3: f(aa) = f(0)\\n\\nfinally, note that there flipping odds and evens is the same as flipping all:\\nl4: f(23) = f(1)\\n\\tf(12) = f(3)\\n\\tf(13) = f(2)\\n\\nNow we can reduce any sequence to something much simpler.\\ntake a sequence like:\\n14342\\nby lemma 2 we can re-order:\\n12344\\nusing l4:\\n1144\\nthen by l3:\\n00\\nwhich is just the starting position.\\n\\nIt turns out that we only care then if there is an even or odd number of each flip. The total enumeration of states is:\\n0\\n1\\n2\\n3\\n4\\n12\\n13\\n14\\n23\\n24\\n34\\n123\\n124\\n134\\n234\\n1234\\n\\n16 states... but wait, using lemma 4, some of these are the same (eg 134 = 24). Removing the redundancies from the list above:\\n0\\n1\\n2\\n3\\n4\\n14\\n24\\n34\\n\\nwe get 8 states.\\nSo for a sufficiently high m (turns out its >= 3), we get:\\nflipLights(0) = 1;\\nflipLights(1) = 4\\nflipLights(2+) = 8\\n\\nI am done. This was a waste."
                    },
                    {
                        "username": "yorkshire",
                        "content": "I guess it ought to be, with expected zero output.\nNo lights can have no status.\nBut the OJ seems to output a positive integer eg n = 0, m = 3 outputs 4."
                    },
                    {
                        "username": "awice",
                        "content": "**Firstly, we may take `n = min(n, 3)`.**  The sequence of lights clearly repeats every 6, so the first 6 lights are representative of the whole sequence, as we can construct eg. the 7th light (it's equal to the 1st).\\n\\nActually, the first 3 lights are representative of the whole sequence.  If the operations are a, b, c, d; then modulo 2:\\n\\n* Light 1 = 1 + a + c + d\\n* Light 2 = 1 + a + b\\n* Light 3 = 1 + a + c\\n* Light 4 = 1 + a + b + d\\n* Light 5 = 1 + a + c\\n* Light 6 = 1 + a + b\\n\\nSo that (modulo 2):\\n* Light 4 = (Light 1) + (Light 2) + (Light 3)\\n* Light 5 = Light 3, and \\n* Light 6 = Light 2.\\n\\n---\\n\\nNow, we can do cases on `m`, and analyze the possible lightbulb states for `n >= 3`.  The transitions are to XOR by (1, 1, 1), (0, 1, 0), (1, 0, 1), or (1, 0, 0).\\n\\n* If `m = 0` there is only one state `(1, 1, 1)`.\\n* If `m = 1` then we could get `(0, 0, 0), (1, 0, 1), (0, 1, 0), (0, 1, 1)`.\\n* If `m = 2` we could get all 8 possibilities except `(0, 1, 1)`.\\n* If `m = 3` we can get every possibility.\\n\\nThis reduced the problem to knowing the answer for `m <= 3, n <= 3`.  The final answer is:\\n\\n* When `n == 1`, the answer is 1 if `m == 0`, else 2.\\n* When `n == 2`, the answer is 1 if `m == 0`, 3 if `m == 1`, else 4.\\n* When `n >= 3`, the answer is 1 if `m == 0`, 4 if `m == 1`, 7 if `m == 2`, else 8."
                    },
                    {
                        "username": "dQw4w9WgXcQ",
                        "content": "pretty hard for a med lol"
                    }
                ]
            },
            {
                "id": 2042249,
                "content": [
                    {
                        "username": "gunax",
                        "content": "So it\\'s a somewhat interesting problem, but only if you think of it as a math problem. As a programming problem, i think it\\'s lame.\\n\\nGiven a set of operations, what state would the lights end up in?\\nLet\\'s call f(a) the new state of the lights after performing a\\n\\nLet\\'s add another switch, switch 0, the identity switch (switch 0 does nothing).\\nl1: f(0a) = f(a)\\n\\nFirst, note that flipping is commutative: order does not matter.\\nl2: f(ab) = f(ba)\\n\\nsecond, each function is an inverse of itself:\\nl3: f(aa) = f(0)\\n\\nfinally, note that there flipping odds and evens is the same as flipping all:\\nl4: f(23) = f(1)\\n\\tf(12) = f(3)\\n\\tf(13) = f(2)\\n\\nNow we can reduce any sequence to something much simpler.\\ntake a sequence like:\\n14342\\nby lemma 2 we can re-order:\\n12344\\nusing l4:\\n1144\\nthen by l3:\\n00\\nwhich is just the starting position.\\n\\nIt turns out that we only care then if there is an even or odd number of each flip. The total enumeration of states is:\\n0\\n1\\n2\\n3\\n4\\n12\\n13\\n14\\n23\\n24\\n34\\n123\\n124\\n134\\n234\\n1234\\n\\n16 states... but wait, using lemma 4, some of these are the same (eg 134 = 24). Removing the redundancies from the list above:\\n0\\n1\\n2\\n3\\n4\\n14\\n24\\n34\\n\\nwe get 8 states.\\nSo for a sufficiently high m (turns out its >= 3), we get:\\nflipLights(0) = 1;\\nflipLights(1) = 4\\nflipLights(2+) = 8\\n\\nI am done. This was a waste."
                    },
                    {
                        "username": "yorkshire",
                        "content": "I guess it ought to be, with expected zero output.\nNo lights can have no status.\nBut the OJ seems to output a positive integer eg n = 0, m = 3 outputs 4."
                    },
                    {
                        "username": "awice",
                        "content": "**Firstly, we may take `n = min(n, 3)`.**  The sequence of lights clearly repeats every 6, so the first 6 lights are representative of the whole sequence, as we can construct eg. the 7th light (it's equal to the 1st).\\n\\nActually, the first 3 lights are representative of the whole sequence.  If the operations are a, b, c, d; then modulo 2:\\n\\n* Light 1 = 1 + a + c + d\\n* Light 2 = 1 + a + b\\n* Light 3 = 1 + a + c\\n* Light 4 = 1 + a + b + d\\n* Light 5 = 1 + a + c\\n* Light 6 = 1 + a + b\\n\\nSo that (modulo 2):\\n* Light 4 = (Light 1) + (Light 2) + (Light 3)\\n* Light 5 = Light 3, and \\n* Light 6 = Light 2.\\n\\n---\\n\\nNow, we can do cases on `m`, and analyze the possible lightbulb states for `n >= 3`.  The transitions are to XOR by (1, 1, 1), (0, 1, 0), (1, 0, 1), or (1, 0, 0).\\n\\n* If `m = 0` there is only one state `(1, 1, 1)`.\\n* If `m = 1` then we could get `(0, 0, 0), (1, 0, 1), (0, 1, 0), (0, 1, 1)`.\\n* If `m = 2` we could get all 8 possibilities except `(0, 1, 1)`.\\n* If `m = 3` we can get every possibility.\\n\\nThis reduced the problem to knowing the answer for `m <= 3, n <= 3`.  The final answer is:\\n\\n* When `n == 1`, the answer is 1 if `m == 0`, else 2.\\n* When `n == 2`, the answer is 1 if `m == 0`, 3 if `m == 1`, else 4.\\n* When `n >= 3`, the answer is 1 if `m == 0`, 4 if `m == 1`, 7 if `m == 2`, else 8."
                    },
                    {
                        "username": "dQw4w9WgXcQ",
                        "content": "pretty hard for a med lol"
                    }
                ]
            }
        ]
    },
    {
        "title": "Basic Calculator III",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1566316,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1566843,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1569620,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1569734,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1569180,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1572668,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1687493,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1940377,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1566316,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1566843,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1569620,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1569734,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1569180,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1572668,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1687493,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            },
            {
                "id": 1940377,
                "content": [
                    {
                        "username": "mingrui",
                        "content": "\"0-2147483648\" is a wrong test case since the problem description clarifies that \"All intermediate results will be in the range of [-2147483648, 2147483647]\""
                    },
                    {
                        "username": "fdsm_lhn",
                        "content": "All solutions I saw so far will fail, I wonder do you really have to include that into test case? change datatype to long will work. MEANINGLESS TEST CASE."
                    },
                    {
                        "username": "_Hamada",
                        "content": "one of the test cases `\"-1+4*3/3/3\"` but the problem statement states that the input will not have `negative` values. does any one have a problem with this test case or did I misunderstand the problem description."
                    },
                    {
                        "username": "lixt7891",
                        "content": "Copy paste from the problem statement: \\n\\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces .\\n\\nAnd we have some amazing test cases like this:\\n\\n\"-1+4*3/3/3\"\\n\"0-2147483648\"\\n\\nIs my math wrong, or -1 and 2147483648 are all so called non-negative integers?\\n\\nI have to make my code work for all negative number cases and handle the overflow. Why don\\'t simply say so and stop fooling people like this?"
                    },
                    {
                        "username": "0xFFFFFFFF",
                        "content": "testcase \\n\\n(   31 + (   (   (( ((  (   (   (  33   +   46 )   -(  97  +88  ))+   (  (91/74 )  - ( 82  *74)   ))-   41 ) + ( (   ( ( 59+37   )   / (  25   +86  ))+   (   61 -60 )  )- (  ((  94*78   )*   (  11 + 66  ) ) * ( (   93 *62  )+   ( 85+  58  ))   ) )  ) - (( (  63+  (  ( 91  +70   ) * (   99  * 68  )   )  ) -   (   (  48 - (   89*  75   )   )  -  ((27  *  41  ) * (85   +27  ) )   )   )   * (  (((   69 +79 ) /( 71  + 29   ))  + (82  - (  83+   64  )  ) )  -(  (( 13+  88   )-  25  ) /   (  (   9  *   3 )+( 26  *  7  )  )   ) )  )  ) -   ( ((  (   11- (  (47  -53  )+(78 * 52 )))   +   ( 59/((   62  +34) /   (   9/   6) ) ) ) +(  49/   27   ))   + ( ( ( ( (   1  / 3   )*   ( 91*  7  )   )   *  (13  -(   97  - 91 )  ) )   *   (   (   13   -   (  14  +   67)  ) +  ((  40+ 38)  * (   12  *  21) ))   )  *((   (   (18+ 9   )   +   (   26  *3 ))  +( ( 19 + 34  )+ ( 62   -  57   )   )   ) *(~~(( 92  +   58   )-   (82   /  36 )  )/(   ( 84  - 96 ) /(43   * 59 )   )~~   ))) )  )   +((  ((   (   (   (   57   *  45 ) - (  13   +  77)  )   +( (24*75  )   +(   84 + 22  )   )) +   (   (  (60  * 40 )   +   (  60*  55 )) +   (( 48  *   89  ) +  (   45 * 59  )   )  )  ) -  ((   62+ ((  33+  78  )+   (   18 +  92)   )  )+   ((  (25+  96 )  *   (67/   48 )   )   /((  35  *   69 )  -(80  +28 )   ))  ))   +  ( (  41   -15   )   +( (17   + (  (67   +   64  ) +(   88+  68  )   ) )-   ( ( (   49 +69  )+( 51  * 77 ))/   (( 4-82) +80)   ) )  )   )   + 3 )  )/  (  (( ((  (  ((   87   *12  )  *(  64   +  48   )   ) +   (   43*  51 ))  -( (   (  49   - 20)/  (60+   36)   )   -   (  (   75-   48  )   +  ( 10 -   10 )   )   )  )-  (   (  (  4  * (59   /   70   ))   + (  (52 +  59)   + ( 89- 27   )) )   /  54   )  )+ (( 4 + ( (  (   97 + 39  )   /   ( 51*  9 )  )  +(   (  78  * 60)  * (   61+   14 )   )   ) )   *   (   ( 51  -(  (   31 -4  )  *  19))+   44 )  )  )-  57   )   *   ( ((   74* (( (   (50   +   73)  *  (   98*15 )  ) + (   ( 28 +94   )   *  ( 61   -  4) )  ) -   (   ((   45 -   91 )   -(   15  *  51  ) )+  (  (  34   *   9  )  -  ( 17   -87   )) ) )   )   + (( ( (   (91 *78 )  -  (33   -99 )) +   (   95 /   57 )   )   * (  ( (  82   +  63   ) -(  57  - 39   )   )   +   (   (  67 *67   ) *(  34  *62   ) ) ))+ (   ((( 59  -   70  )  * ( 66 *  59   )   )   +   (  (   62 *  88 )  *(6   /   18  )   )   )   -(   ( ( 5  +89  )  * (38   +  20) )   - (  (   84  +  61   )   * ( 97  + 96  )   ))) ))   *62  )) ))\\n\\ncontains \\n\\n`((92  +   58) - (82   /  36)) / ((84  - 96) / (43   * 59))` which is divided by zero, but why c++ compiler can pass?"
                    },
                    {
                        "username": "wenwei202",
                        "content": "*\"The integer division should truncate toward zero.\"* means `(3-10)/(4-1)=-7/3` should be `-2` instead of `-3`, since `-2` is closer to `0`? However, the test case gives a result of `-3`. \\nWell, `-3` is good, since we can directly use `/` or `//` (in python), otherwise, we need `int(-7 / float(3))`. However, is it better to clarify it?"
                    },
                    {
                        "username": "RjRahul003",
                        "content": "How can 9*1/9 == 1 and not 0. DMAS rule has division first. "
                    },
                    {
                        "username": "RohitSgh",
                        "content": "As per **BEDMAS** rule, \n1. Bracket\n2. Exponent\n3. Division-Multiplication, if both evaluate from Left to Right\n4. Addition-Subtraction, if both evaluate from Left to Right\n\nDivision First is misinterpretation. If both D and M are there, we evaluate Left to Right. This was explained in [Editorial of \"Evaluate Reverse Polish Notation\"](https://leetcode.com/problems/evaluate-reverse-polish-notation/solutions/509590/)\n\nThus.\n= 9*1/9\n= 9/9        [Multiplication since it is on Left]\n= 1\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "I have a python question:\\nHere are two version of the solution. The first one fails, but the second one works. I don\\'t get it.\\nThe only different is for loop and while loop.\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n\\n        return ans + last_num\\n```\\n\\n\\n```\\nclass Solution:\\n    def calculate(self, s: str) -> int:\\n        op = \\'+\\'\\n        num = 0\\n        last_num = 0\\n        ans = 0\\n        i = 0\\n        while i < len(s):\\n            if s[i].isdigit():\\n                num = num * 10 + int(s[i])\\n            elif s[i] == \\'(\\':\\n                j = i + 1\\n                brackets = 1\\n                while brackets > 0:\\n                    if s[j] == \\'(\\':\\n                        brackets += 1\\n                    elif s[j] == \\')\\':\\n                        brackets -= 1\\n                    j += 1\\n\\n                num = self.calculate(s[i+1:j-1])\\n                i = j-1\\n\\n            \\n            if  s[i] in [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] or i == len(s)-1:\\n                if op == \\'+\\':\\n                    ans += last_num\\n                    last_num = num\\n                elif op == \\'-\\':\\n                    ans += last_num\\n                    last_num = -num\\n                elif op == \\'*\\':\\n                    last_num *= num\\n                elif op == \\'/\\':\\n                    last_num = int(last_num / num)\\n\\n                \\n                op = s[i]\\n                num = 0\\n            i += 1\\n        return ans + last_num\\n```\\n\\n"
                    },
                    {
                        "username": "HaoTLee",
                        "content": "[@RohitSgh](/RohitSgh)  Thanks for quick response! I see. I usually do this in other language like C++. Now I know I can\\'t do the same thing in Python."
                    },
                    {
                        "username": "RohitSgh",
                        "content": "Roughly speaking, in python, you cannot update the `for` loop iterator insider the loop, [@HaoLee](/HaoTLee). Thus, the last line of `for` loop in the first solution is actually not leading to any update.\n\n```python3\n                i = j-1\n```\n\nYou can print the value of `i` as first statement of loops to deduce the same.\n\n```for [ ]\n        for i in range(len(s)):\n            print(i)\n```\n```while [ ]\n        while i < len(s):\n            print(i)\n```\n\nHowever, just for the note, technically `i = j-1` will lead to update, but when next iteration starts, the `i` gets re-initialized. "
                    }
                ]
            }
        ]
    },
    {
        "title": "Projection Area of 3D Shapes",
        "question_content": "<p>You are given an <code>n x n</code> <code>grid</code> where we place some <code>1 x 1 x 1</code> cubes that are axis-aligned with the <code>x</code>, <code>y</code>, and <code>z</code> axes.</p>\n\n<p>Each value <code>v = grid[i][j]</code> represents a tower of <code>v</code> cubes placed on top of the cell <code>(i, j)</code>.</p>\n\n<p>We view the projection of these cubes onto the <code>xy</code>, <code>yz</code>, and <code>zx</code> planes.</p>\n\n<p>A <strong>projection</strong> is like a shadow, that maps our <strong>3-dimensional</strong> figure to a <strong>2-dimensional</strong> plane. We are viewing the &quot;shadow&quot; when looking at the cubes from the top, the front, and the side.</p>\n\n<p>Return <em>the total area of all three projections</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"width: 800px; height: 214px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,2],[3,4]]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> Here are the three projections (&quot;shadows&quot;) of the shape made with each axis-aligned plane.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[2]]\n<strong>Output:</strong> 5\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> grid = [[1,0],[0,2]]\n<strong>Output:</strong> 8\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 50</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 50</code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 156726,
                "title": "c-java-python-straight-forward-one-pass",
                "content": "## **Explanation**\\nfront-back projection area on xz = `sum(max value for every col)`\\nright-left projection area on yz = `sum(max value for every row)`\\ntop-down projection area on xy = `sum(1 for every v > 0)`\\n<br>\\n## **Diagram**\\nI drawn this diagram to help understand.\\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png\" style=\"width: 749px; height: 200px;\" />\\n<br>\\n\\n## **Complexity**\\nTime `O(N^2)` for one pass.\\nSpace `O(1)` extra space.\\n<br>\\n\\n**C++:**\\n```\\n    int projectionArea(const vector<vector<int>>& grid) {\\n        int res = 0, n = grid.size(), x, y;\\n        for (int i = 0; i < n; ++i) {\\n            x = 0, y = 0;\\n            for (int j = 0; j < n; ++j) {\\n                x = max(x, grid[i][j]);\\n                y = max(y, grid[j][i]);\\n                if (grid[i][j]) ++res;\\n            }\\n            res += x + y;\\n        }\\n        return res;\\n    }\\n```\\n\\n**Java:**\\n```\\n    public int projectionArea(int[][] grid) {\\n        int res = 0, n = grid.length;\\n        for (int i = 0; i < n; ++i) {\\n            int x = 0, y = 0;\\n            for (int j = 0; j < n; ++j) {\\n                x = Math.max(x, grid[i][j]);\\n                y = Math.max(y, grid[j][i]);\\n                if (grid[i][j] > 0) ++res;\\n            }\\n            res += x + y;\\n        }\\n        return res;\\n    }\\n```\\n\\n**Python**\\n```\\n    def projectionArea(self, grid):\\n        hor = sum(map(max, grid))\\n        ver = sum(map(max, zip(*grid)))\\n        top = sum(v > 0 for row in grid for v in row)\\n        return ver + hor + top\\n```\\n\\n**Python, Make it 1-line:**\\n```\\n    def projectionArea(self, grid):\\n        return sum(map(max, grid + zip(*grid))) + sum(v > 0 for row in grid for v in row)\\n```",
                "solutionTags": [],
                "code": "```\\n    int projectionArea(const vector<vector<int>>& grid) {\\n        int res = 0, n = grid.size(), x, y;\\n        for (int i = 0; i < n; ++i) {\\n            x = 0, y = 0;\\n            for (int j = 0; j < n; ++j) {\\n                x = max(x, grid[i][j]);\\n                y = max(y, grid[j][i]);\\n                if (grid[i][j]) ++res;\\n            }\\n            res += x + y;\\n        }\\n        return res;\\n    }\\n```\n```\\n    public int projectionArea(int[][] grid) {\\n        int res = 0, n = grid.length;\\n        for (int i = 0; i < n; ++i) {\\n            int x = 0, y = 0;\\n            for (int j = 0; j < n; ++j) {\\n                x = Math.max(x, grid[i][j]);\\n                y = Math.max(y, grid[j][i]);\\n                if (grid[i][j] > 0) ++res;\\n            }\\n            res += x + y;\\n        }\\n        return res;\\n    }\\n```\n```\\n    def projectionArea(self, grid):\\n        hor = sum(map(max, grid))\\n        ver = sum(map(max, zip(*grid)))\\n        top = sum(v > 0 for row in grid for v in row)\\n        return ver + hor + top\\n```\n```\\n    def projectionArea(self, grid):\\n        return sum(map(max, grid + zip(*grid))) + sum(v > 0 for row in grid for v in row)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 156771,
                "title": "11-line-1-pass-java-and-1-liner-python-3-codes-w-explanation-of-the-problem",
                "content": "**Update:**\\n(If you have no difficulty to understand the problem description, just skip the update part)\\n\\nIt appears that lots of people complain that they do NOT understand the problem description. In fact, I did NOT either at first glance.\\n\\nIn my view, the description omits a key point: **each unit (1 X 1)  grid cell referred by grid[i][j] is placed on x-y plane such that its bottom left corner is on (i, j),** though we can guess it from the picture and context.\\n\\nIn addition, if the input changed into a matrix, it could be easier to establish the relation of the input and the geometric shape.\\n\\nLet\\'s use the input: [[1,2],[3,4]] as our case, and its corresponding matrix is as follows: \\n[[1,   2],\\n [3,   4]]\\n In more details, please see the left 2 pictures below: \\n \\ngrid[**0**][**0**] = **1:** There is **1** unit of cube placed on a unit cell with bottom left corner at **(0, 0)**, and the other 3 corners, in clockwise order, are at (0, 1), (1,1), (1,0).\\n\\ngrid[**0**][**1**] = **2**: There are **2** units of cube placed on a unit cell with bottom left corner at **(0, 1)**, and the other 3 corners, in clockwise order, are at (0, 2), (1,2), (1,1).\\n\\ngrid[**1**][**1**] = **3**: There are **3** units of cube placed on a unit cell with bottom left corner at **(1, 1)**, and the other 3 corners, in clockwise order, are at (1, 2), (2,2), (2,1).\\n\\ngrid[**1**][**0**] = **4:** There are **4** units of cube placed on a unit cell with bottom left corner at **(1, 0)**, and the other 3 corners, in clockwise order, are at (1, 1), (2,1), (2,0).\\n\\n![image](https://s3-lc-upload.s3.amazonaws.com/users/rock/image_1533633857.png)\\n\\nHope the above can clarify possible confusion about understanding the problem.\\n\\n**end of update.**\\n\\n\\n\\nNote: for a N * N grid, i & j limits are both **grid.length**.\\n1) get max  out of grid **[j]** [i] (j =  0  ~ grid.length), the projection in x direction (on y-z plane)\\n2) get max  out of grid[i]**[j]**   (j = 0 ~ grid.length), the projection in y direction (on x-z plane)\\n```java\\n    public int projectionArea(int[][] grid) {\\n        int z = 0, x = 0, y = 0;\\n        for (int i = 0; i < grid.length; ++i) {\\n            int mx = 0, my = 0; // max of x & y values.\\n            for (int j = 0; j < grid.length; ++j) {\\n                mx = Math.max(mx, grid[j][i]); // see above 1\\n                my = Math.max(my, grid[i][j]); // see above 2\\n                if (grid[i][j] > 0) { ++z; } // only the cell with positive value has a projection area of size 1 in z direction (on x-y plane). \\n            }\\n            x += mx; y += my; // x & y projection accumulation.\\n        }\\n        return x + y + z;\\n    }\\n```\\nIn case you want a more flexible code to deal with `M * N` grid, the follows are 2-pass **java** and **Python 3** codes:\\n```java\\n    public int projectionArea(int[][] grid) {\\n        int z = 0, x = 0, y = 0;\\n        for (int[] row : grid)\\n            y += Arrays.stream(row).max().getAsInt();\\n        for (int j = 0; j < grid[0].length; ++j) {\\n            int mx = 0;\\n            for (int i = 0; i < grid.length; ++i) {\\n                mx = Math.max(mx, grid[i][j]);\\n                if (grid[i][j] > 0) { ++z; }\\n            }\\n            x += mx;\\n        }\\n        return x + y + z;\\n    }\\n```\\n```python\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        return sum(cell > 0 for row in grid for cell in row) + sum(map(max, grid + list(zip(*grid))))\\n```\\n**Analysis:**\\nTime: O(N ^ 2), space O(1), where N = grid.length.",
                "solutionTags": [],
                "code": "```java\\n    public int projectionArea(int[][] grid) {\\n        int z = 0, x = 0, y = 0;\\n        for (int i = 0; i < grid.length; ++i) {\\n            int mx = 0, my = 0; // max of x & y values.\\n            for (int j = 0; j < grid.length; ++j) {\\n                mx = Math.max(mx, grid[j][i]); // see above 1\\n                my = Math.max(my, grid[i][j]); // see above 2\\n                if (grid[i][j] > 0) { ++z; } // only the cell with positive value has a projection area of size 1 in z direction (on x-y plane). \\n            }\\n            x += mx; y += my; // x & y projection accumulation.\\n        }\\n        return x + y + z;\\n    }\\n```\n```java\\n    public int projectionArea(int[][] grid) {\\n        int z = 0, x = 0, y = 0;\\n        for (int[] row : grid)\\n            y += Arrays.stream(row).max().getAsInt();\\n        for (int j = 0; j < grid[0].length; ++j) {\\n            int mx = 0;\\n            for (int i = 0; i < grid.length; ++i) {\\n                mx = Math.max(mx, grid[i][j]);\\n                if (grid[i][j] > 0) { ++z; }\\n            }\\n            x += mx;\\n        }\\n        return x + y + z;\\n    }\\n```\n```python\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        return sum(cell > 0 for row in grid for cell in row) + sum(map(max, grid + list(zip(*grid))))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 156738,
                "title": "python-1-liner",
                "content": "* 1-liner as requested\\n```\\nclass Solution:\\n    def projectionArea(self, grid):\\n        return sum(max(grid[i]) + max(row[i] for row in grid) + sum(v != 0 for v in grid[i]) for i in range(len(grid)))\\n```\\n* Original 4-liner for readability\\n```\\nclass Solution:\\n    def projectionArea(self, grid):\\n        top = sum(v != 0 for row in grid for v in row)\\n        front = sum(max(row) for row in grid)\\n        side = sum(max(row[j] for row in grid) for j in range(len(grid)))\\n        return top + front + side\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid):\\n        return sum(max(grid[i]) + max(row[i] for row in grid) + sum(v != 0 for v in grid[i]) for i in range(len(grid)))\\n```\n```\\nclass Solution:\\n    def projectionArea(self, grid):\\n        top = sum(v != 0 for row in grid for v in row)\\n        front = sum(max(row) for row in grid)\\n        side = sum(max(row[j] for row in grid) for j in range(len(grid)))\\n        return top + front + side\\n```",
                "codeTag": "Java"
            },
            {
                "id": 760701,
                "title": "ez-python-code",
                "content": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n\\t\\t# Think as looking in a 3-D model from top, front, and side.\\n        top = sum([1 for g in grid for l in g if l > 0])\\n        front = sum([max(g) for g in grid])\\n        side = sum([max(g) for g in zip(*grid)])\\n        return top + front + side\\n```\\n\\nI think to truly understand a problem is very important after I\\'ve solved some easy problems in leetcode.\\n\\nMy thinking process is read through problems mutiple times(English is not my first language), and try to come up with my own example.\\n\\nFor this problem, I\\'m glad they have a sweet diagram with unique numbers so I have visual help to understand why such example has such output. \\n\\nThen you will know how to implement solution after you know how to come up with good examples.",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n\\t\\t# Think as looking in a 3-D model from top, front, and side.\\n        top = sum([1 for g in grid for l in g if l > 0])\\n        front = sum([max(g) for g in grid])\\n        side = sum([max(g) for g in zip(*grid)])\\n        return top + front + side\\n```",
                "codeTag": "Java"
            },
            {
                "id": 703478,
                "title": "simple-easy-solution-by-python-3",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        xy = sum(i > 0 for s in grid for i in s)\\n        xz = sum(max(s) for s in grid)\\n        yz = sum(max(s[i] for s in grid) for i in range(len(grid)))\\n        return xy + xz + yz\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        xy = sum(i > 0 for s in grid for i in s)\\n        xz = sum(max(s) for s in grid)\\n        yz = sum(max(s[i] for s in grid) for i in range(len(grid)))\\n        return xy + xz + yz\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1761504,
                "title": "python-easy-solution",
                "content": "```\\n n = len(grid)\\n        x = sum(max(grid[i][j] for i in range(n)) for j in range(n)) \\n        y = sum(max(grid[j][i] for i in range(n)) for j in range(n)) \\n        z = sum(grid[i][j] > 0 for i in range(n) for j in range(n)) \\n        return sum([x,y,z])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n n = len(grid)\\n        x = sum(max(grid[i][j] for i in range(n)) for j in range(n)) \\n        y = sum(max(grid[j][i] for i in range(n)) for j in range(n)) \\n        z = sum(grid[i][j] > 0 for i in range(n) for j in range(n)) \\n        return sum([x,y,z])\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 512018,
                "title": "javascript-solutions",
                "content": "### The usual way:\\n\\n```javascript\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n  let res = 0;\\n  for (let i = 0; i < grid.length; i++) {\\n    for (let j = 0; j < grid[0].length; j++) {\\n      if (grid[i][j] > 0) res++;\\n    }\\n    res += Math.max(...grid[i]);\\n    res += Math.max(...grid.map(r => r[i]));\\n  }\\n  return res;\\n};\\n```\\n\\n### Using map:\\n\\n```javascript\\nvar projectionArea = function(grid) {\\n  const x = grid.reduce((a, b) => a.concat(b), []).filter(x => x > 0).length;\\n  const y = grid.map(r => Math.max(...r)).reduce((acc, idx) => acc + idx);\\n  const z = grid[0].map((_, i) => Math.max(...grid.map(r => r[i]))).reduce((acc, idx) => acc + idx);\\n  return x + y + z;\\n};\\n```\\n\\n### One-liner:\\n\\n```javascript\\nvar projectionArea = function(grid) {\\n  return [\\n    ...grid.reduce((a, b) => a.concat(b), []).filter(x => x > 0).map(_ => 1),\\n    ...grid.map(r => Math.max(...r)),\\n    ...grid[0].map((_, i) => Math.max(...grid.map(r => r[i])))\\n  ].reduce((acc, idx) => acc + idx);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n  let res = 0;\\n  for (let i = 0; i < grid.length; i++) {\\n    for (let j = 0; j < grid[0].length; j++) {\\n      if (grid[i][j] > 0) res++;\\n    }\\n    res += Math.max(...grid[i]);\\n    res += Math.max(...grid.map(r => r[i]));\\n  }\\n  return res;\\n};\\n```\n```javascript\\nvar projectionArea = function(grid) {\\n  const x = grid.reduce((a, b) => a.concat(b), []).filter(x => x > 0).length;\\n  const y = grid.map(r => Math.max(...r)).reduce((acc, idx) => acc + idx);\\n  const z = grid[0].map((_, i) => Math.max(...grid.map(r => r[i]))).reduce((acc, idx) => acc + idx);\\n  return x + y + z;\\n};\\n```\n```javascript\\nvar projectionArea = function(grid) {\\n  return [\\n    ...grid.reduce((a, b) => a.concat(b), []).filter(x => x > 0).map(_ => 1),\\n    ...grid.map(r => Math.max(...r)),\\n    ...grid[0].map((_, i) => Math.max(...grid.map(r => r[i])))\\n  ].reduce((acc, idx) => acc + idx);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 349560,
                "title": "simple-c-approach-99-time-beat-97-space",
                "content": "The problem can be thought as counting squares with projected view of shapes on all three planes\\nxy, yz, and xz\\n\\tNow the idea is to sum up the square from all three views as you know on seeing from side we will only see the max_height block in its projection and a n*n square view from top\\n\\tsum it al and you get it!!!!!\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int N=grid.size();\\n        int sum=0;                                                                                         //global sum\\n\\t\\t// ========View from x axis ===============//\\n        for(int i=0;i<N;i++)\\n        {\\n            int max=*max_element(grid[i].begin(),grid[i].end());            //find max element in a row\\n            sum+=max;                                                                          //add that to sum\\n        }\\n        //==========View from y-axis==========//\\n        int k=0;\\n        for(int i=0;i<N;i++){\\n            int maxel=0;\\n            for(int j=0;j<N;j++){\\n                if(grid[j][i]==0) k++;                                    //keeps track of places where no block is placed\\n                maxel=max(maxel,grid[j][i]);                         //maxlen is max element in a column\\n            }\\n            sum+=maxel;                                                    //adding maxlen to sum\\n        \\n        }\\n        //========View from z-axis=======//\\n\\t\\tsum+=(N*N);                                        //top view has n*n squares\\n        sum-=k;                                               //excluding where no squares are there\\n\\t\\t\\n        return sum;\\n    }\\n};\\n```\\n===PLEASE UPVOTE IF YOU LIKE IT==========",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int N=grid.size();\\n        int sum=0;                                                                                         //global sum\\n\\t\\t// ========View from x axis ===============//\\n        for(int i=0;i<N;i++)\\n        {\\n            int max=*max_element(grid[i].begin(),grid[i].end());            //find max element in a row\\n            sum+=max;                                                                          //add that to sum\\n        }\\n        //==========View from y-axis==========//\\n        int k=0;\\n        for(int i=0;i<N;i++){\\n            int maxel=0;\\n            for(int j=0;j<N;j++){\\n                if(grid[j][i]==0) k++;                                    //keeps track of places where no block is placed\\n                maxel=max(maxel,grid[j][i]);                         //maxlen is max element in a column\\n            }\\n            sum+=maxel;                                                    //adding maxlen to sum\\n        \\n        }\\n        //========View from z-axis=======//\\n\\t\\tsum+=(N*N);                                        //top view has n*n squares\\n        sum-=k;                                               //excluding where no squares are there\\n\\t\\t\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 226005,
                "title": "rust-0ms-short-solution",
                "content": "```\\nimpl Solution {\\n    pub fn projection_area(grid: Vec<Vec<i32>>) -> i32 {\\n        let N = grid.len();\\n        \\n        let front : i32 = (0..N).map(|i| *grid[i].iter().max().unwrap_or(&0)).sum();\\n        let side : i32 = (0..N).map(|i| grid.iter().map(|r| r[i]).max().unwrap_or(0)).sum();\\n        let top : i32 = grid.iter().map(|r| r.iter().filter(|v| **v != 0).count()).sum::<usize>() as i32;\\n        \\n        front + side + top\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn projection_area(grid: Vec<Vec<i32>>) -> i32 {\\n        let N = grid.len();\\n        \\n        let front : i32 = (0..N).map(|i| *grid[i].iter().max().unwrap_or(&0)).sum();\\n        let side : i32 = (0..N).map(|i| grid.iter().map(|r| r[i]).max().unwrap_or(0)).sum();\\n        let top : i32 = grid.iter().map(|r| r.iter().filter(|v| **v != 0).count()).sum::<usize>() as i32;\\n        \\n        front + side + top\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 187862,
                "title": "c-1-pass-solution",
                "content": "```\\nint projectionArea(vector<vector<int>>& grid) \\n{\\n\\tint area = 0;\\n\\tint row = grid.size();\\n\\tint col = grid[0].size();\\n\\tint maxvalrow = INT_MIN;\\n\\tint maxvalcol = INT_MIN;\\n\\t\\n\\tfor (int i = 0; i < row; i++)\\n\\t{\\n\\t\\tfor (int j = 0; j < col; j++)\\n\\t\\t{\\n\\t\\t\\tmaxvalcol = max(maxvalcol, grid[i][j]);\\n\\t\\t\\tmaxvalrow = max(maxvalrow, grid[j][i]);\\n\\t\\t\\tif (grid[i][j]) area++;\\n\\t\\t}\\n\\t\\tarea += maxvalcol;\\n\\t\\tarea += maxvalrow;\\n\\t\\tmaxvalrow = INT_MIN;\\n\\t\\tmaxvalcol = INT_MIN;\\n\\t}\\n\\treturn area;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint projectionArea(vector<vector<int>>& grid) \\n{\\n\\tint area = 0;\\n\\tint row = grid.size();\\n\\tint col = grid[0].size();\\n\\tint maxvalrow = INT_MIN;\\n\\tint maxvalcol = INT_MIN;\\n\\t\\n\\tfor (int i = 0; i < row; i++)\\n\\t{\\n\\t\\tfor (int j = 0; j < col; j++)\\n\\t\\t{\\n\\t\\t\\tmaxvalcol = max(maxvalcol, grid[i][j]);\\n\\t\\t\\tmaxvalrow = max(maxvalrow, grid[j][i]);\\n\\t\\t\\tif (grid[i][j]) area++;\\n\\t\\t}\\n\\t\\tarea += maxvalcol;\\n\\t\\tarea += maxvalrow;\\n\\t\\tmaxvalrow = INT_MIN;\\n\\t\\tmaxvalcol = INT_MIN;\\n\\t}\\n\\treturn area;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2847125,
                "title": "easiest-solution-easy-to-understand-just-doing-what-they-have-said",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int sum  = 0;\\n        // sum+=(grid.size()*grid[0].size());\\n        for(int i=0;i<grid.size();i++){\\n            for(int j=0;j<grid.size();j++){\\n                if(grid[i][j]!=0) sum++;\\n            }\\n        }\\n        int a = 0;\\n        while(a<grid.size()){\\n            int maxi = INT_MIN;\\n            for(int i=0;i<grid.size();i++){\\n                maxi=max(maxi,grid[i][a]);\\n            }\\n            maxi!=INT_MIN?sum+=maxi:sum+=0;\\n            a++;\\n        }\\n        int b = 0;\\n        while(b<grid.size()){\\n            int maxi=INT_MIN;\\n            for(int i=0;i<grid.size();i++){\\n                maxi=max(maxi,grid[b][i]);\\n            }\\n            maxi!=INT_MIN?sum+=maxi:sum+=0;\\n            b++;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int sum  = 0;\\n        // sum+=(grid.size()*grid[0].size());\\n        for(int i=0;i<grid.size();i++){\\n            for(int j=0;j<grid.size();j++){\\n                if(grid[i][j]!=0) sum++;\\n            }\\n        }\\n        int a = 0;\\n        while(a<grid.size()){\\n            int maxi = INT_MIN;\\n            for(int i=0;i<grid.size();i++){\\n                maxi=max(maxi,grid[i][a]);\\n            }\\n            maxi!=INT_MIN?sum+=maxi:sum+=0;\\n            a++;\\n        }\\n        int b = 0;\\n        while(b<grid.size()){\\n            int maxi=INT_MIN;\\n            for(int i=0;i<grid.size();i++){\\n                maxi=max(maxi,grid[b][i]);\\n            }\\n            maxi!=INT_MIN?sum+=maxi:sum+=0;\\n            b++;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 217642,
                "title": "python3-one-line",
                "content": "```\\ndef projectionArea(self, grid):\\n        # Explanation:\\n\\t\\t# 1) sum(map(max,grid))                       the sum of the max of all rows\\n        # 2) sum(map(max,zip(*grid)))                 the sum of the max of all columns\\n        # 3) sum(map(len, grid)) if element!=0        the number of squares which have at least one cube\\n\\n        return sum(map(len, [[row for row in col if row] for col in grid])) + sum(map(max,grid)) + sum(map(max,zip(*grid)))\\n```",
                "solutionTags": [],
                "code": "```\\ndef projectionArea(self, grid):\\n        # Explanation:\\n\\t\\t# 1) sum(map(max,grid))                       the sum of the max of all rows\\n        # 2) sum(map(max,zip(*grid)))                 the sum of the max of all columns\\n        # 3) sum(map(len, grid)) if element!=0        the number of squares which have at least one cube\\n\\n        return sum(map(len, [[row for row in col if row] for col in grid])) + sum(map(max,grid)) + sum(map(max,zip(*grid)))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3507864,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size(), area = 0;\\n        vector<int> x_v(n), y_v(n);\\n        for (int x = 0; x < n; x++) {\\n            for (int y = 0; y < n; y++) {\\n                int v = grid[x][y];\\n                if (v) {\\n                    area++;\\n                    if (x_v[x] < v) x_v[x] = v;\\n                    if (y_v[y] < v) y_v[y] = v;\\n                }\\n            }\\n            area += x_v[x];\\n        }\\n        for (int y = 0; y < n; y++)\\n            area += y_v[y];\\n        return area;\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:    \\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        xy = sum(i > 0 for s in grid for i in s)\\n        xz = sum(max(s) for s in grid)\\n        yz = sum(max(s[i] for s in grid) for i in range(len(grid)))\\n        return xy + xz + yz\\n```\\n\\n```Java []\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int a=0,x=0;\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            int mr=Integer.MIN_VALUE;\\n            int mc=Integer.MIN_VALUE;\\n            for(int j=0;j<grid[0].length;j++)\\n            {\\n                if(grid[i][j]!=0)x+=1;\\n                if(grid[i][j]>mr)mr=grid[i][j];\\n                if(grid[j][i]>mc)mc=grid[j][i];\\n            }\\n            a+=mr+mc;\\n        }\\n        return (a+x);\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size(), area = 0;\\n        vector<int> x_v(n), y_v(n);\\n        for (int x = 0; x < n; x++) {\\n            for (int y = 0; y < n; y++) {\\n                int v = grid[x][y];\\n                if (v) {\\n                    area++;\\n                    if (x_v[x] < v) x_v[x] = v;\\n                    if (y_v[y] < v) y_v[y] = v;\\n                }\\n            }\\n            area += x_v[x];\\n        }\\n        for (int y = 0; y < n; y++)\\n            area += y_v[y];\\n        return area;\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:    \\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        xy = sum(i > 0 for s in grid for i in s)\\n        xz = sum(max(s) for s in grid)\\n        yz = sum(max(s[i] for s in grid) for i in range(len(grid)))\\n        return xy + xz + yz\\n```\n```Java []\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int a=0,x=0;\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            int mr=Integer.MIN_VALUE;\\n            int mc=Integer.MIN_VALUE;\\n            for(int j=0;j<grid[0].length;j++)\\n            {\\n                if(grid[i][j]!=0)x+=1;\\n                if(grid[i][j]>mr)mr=grid[i][j];\\n                if(grid[j][i]>mc)mc=grid[j][i];\\n            }\\n            a+=mr+mc;\\n        }\\n        return (a+x);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2585097,
                "title": "java-100-fast-easy-and-understable",
                "content": "if u like it kindly upvote it bcoz it motivates me to post more precise solution \\n\\n```\\nclass Solution {\\n    public int projectionArea(int[][] arr) {\\n        int res=0;\\n      int c=0;\\n        for(int i=0;i<arr.length;i++){\\n              int res1=-1;\\n              int res2=-1;\\n           \\n            for(int j=0;j<arr.length;j++){\\n                 if(arr[i][j]==0){\\n                     c++;\\n                 }\\n                res1=Math.max(res1,arr[i][j]);\\n                res2=Math.max(res2,arr[j][i]);\\n            }\\n            res+=res1+res2;\\n        }\\n        return res+arr.length*arr.length-c;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] arr) {\\n        int res=0;\\n      int c=0;\\n        for(int i=0;i<arr.length;i++){\\n              int res1=-1;\\n              int res2=-1;\\n           \\n            for(int j=0;j<arr.length;j++){\\n                 if(arr[i][j]==0){\\n                     c++;\\n                 }\\n                res1=Math.max(res1,arr[i][j]);\\n                res2=Math.max(res2,arr[j][i]);\\n            }\\n            res+=res1+res2;\\n        }\\n        return res+arr.length*arr.length-c;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2418230,
                "title": "easy-to-understand-java-solution-with-explanation",
                "content": "/*\\n\\nEXAMPLE :  grid = [  [1,2,3],[0,2,4],[6,1,2]  ]\\n\\n\\n TopView  ===> Count the number elements which are greater than zero in the grid = 8 \\n                (Not the sum only the count of numbers )\\n \\n SideView ===>\\n\\n                        1,2,3   <= max in a row is 3\\n                        0,2,4   <= max in a row is 4\\n                        6,1,2   <= max in a row is 6\\nSideView = 3+4+6=13\\n    \\n    \\n FrontView ===>\\n    \\n                      1 , 2 , 3 \\n                      0 , 2 , 4\\n                      6 , 1 , 2\\n                      ---------\\nMaximum in a column   : 6 : 2 : 4 ===>  FrontView=6+2+4=12\\n    \\n    \\n    \\n    ans = TopView +  SideView + FrontView\\n    ans =  8+13+12 = 33\\n    \\n    Total area of all three projections = ans = 33\\n    \\n\\n*/\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public int projectionArea(int[][] a) \\n    {\\n//  topViewCount as top ,sideViewCount as side,frontViewCount as front  all initalized to  zero \\n        \\n        int top=0,side=0,front=0;\\n        \\n        \\n        for(int i=0;i<a.length;i++)\\n        {\\n            int maxr=0; // initalize maximun in a row as 0\\n            int maxc=0; // initalize maximun in a column as 0\\n            for(int j=0;j<a[i].length;j++)\\n            {\\n                \\n              if(a[i][j]>0) {   top++;  }  // find the boxes present from top view \\n                  \\n              maxr=Math.max(a[i][j],maxr);  // find max present in a row \\n                \\n              maxc=Math.max(a[j][i],maxc);  // find max present in a column \\n                \\n                \\n            }\\n            ///   System.out.println(maxr + \"  \" + maxc );\\n            \\n            side+=maxr;   // add row max to the SideView\\n            front+=maxc;  // add column max to the FrontView\\n        }\\n        \\n       \\n        \\n        int ans =top+side+front;\\n        \\n        return ans;\\n    }\\n}\\n\\n\\n",
                "solutionTags": [],
                "code": "class Solution {\\n    public int projectionArea(int[][] a) \\n    {\\n//  topViewCount as top ,sideViewCount as side,frontViewCount as front  all initalized to  zero \\n        \\n        int top=0,side=0,front=0;\\n        \\n        \\n        for(int i=0;i<a.length;i++)\\n        {\\n            int maxr=0; // initalize maximun in a row as 0\\n            int maxc=0; // initalize maximun in a column as 0\\n            for(int j=0;j<a[i].length;j++)\\n            {\\n                \\n              if(a[i][j]>0) {   top++;  }",
                "codeTag": "Java"
            },
            {
                "id": 2373080,
                "title": "another-pythonic-solution-with-comments",
                "content": "```\\ndef projectionArea(self, grid: List[List[int]]) -> int:\\n\\txy = sum(1 for row in grid for v in row if v)    # for xy projection count non-zero values\\n    xz = sum(max(row) for row in grid)               # for xz - it is the sum of the max values in each row\\n    yz = sum(max(col) for col in zip(*grid))         # for yz - it is the sum of the max values in each column\\n\\t\\n\\treturn xy + xz + yz\\n```",
                "solutionTags": [
                    "Python",
                    "Matrix"
                ],
                "code": "```\\ndef projectionArea(self, grid: List[List[int]]) -> int:\\n\\txy = sum(1 for row in grid for v in row if v)    # for xy projection count non-zero values\\n    xz = sum(max(row) for row in grid)               # for xz - it is the sum of the max values in each row\\n    yz = sum(max(col) for col in zip(*grid))         # for yz - it is the sum of the max values in each column\\n\\t\\n\\treturn xy + xz + yz\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2362452,
                "title": "883-projection-area-of-3d-shapes-c-fast",
                "content": "class Solution {\\npublic:\\n\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int area = 0;\\n        for (int i = 0; i < grid.size(); i++ ) {\\n            int row = 0;\\n            int col = 0;\\n            for (int j = 0; j < grid[0].size(); j++) {\\n                area += grid[i][j] ? 1 : 0;\\n                row = max(row, grid[i][j]);\\n                col = max(col, grid[j][i]);\\n            }\\n            area += row + col;\\n        }\\n\\n        return area;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int area = 0;\\n        for (int i = 0; i < grid.size(); i++ ) {\\n            int row = 0;\\n            int col = 0;\\n            for (int j = 0; j < grid[0].size(); j++) {\\n                area += grid[i][j] ? 1 : 0;\\n                row = max(row, grid[i][j]);\\n                col = max(col, grid[j][i]);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2281696,
                "title": "only-nested-loop",
                "content": "```\\nPLEASE UPVOTE IF YOU LIKE.\\n``` \\n```\\n\\t\\tint xy = 0;\\n        int xz = 0;\\n        int yz = 0;\\n        \\n        for(int i = 0; i < grid.length; i++){\\n            int maxxz = 0;\\n            int maxyz = 0;\\n            for(int j = 0; j < grid[0].length; j++){\\n                maxxz = Math.max(maxxz, grid[i][j]);\\n                maxyz = Math.max(maxyz, grid[j][i]);\\n                if(grid[i][j] > 0) xy++;\\n            }\\n            xz += maxxz;\\n            yz += maxyz;\\n        }\\n        \\n        return xy + xz + yz;",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nPLEASE UPVOTE IF YOU LIKE.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1664836,
                "title": "python-solution-classified-by-each-projection-for-easy-understanding",
                "content": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n        xy = sum([len([i for i in g if i != 0]) for g in grid])\\n        zx = sum([max(g) for g in grid])\\n        yz = sum([max(g) for g in list(zip(*grid))])\\n        \\n        return xy + yz + zx\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n        xy = sum([len([i for i in g if i != 0]) for g in grid])\\n        zx = sum([max(g) for g in grid])\\n        yz = sum([max(g) for g in list(zip(*grid))])\\n        \\n        return xy + yz + zx\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1531910,
                "title": "c-simplest-solution-beats-95",
                "content": "class Solution {\\npublic:\\n********\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int r = grid.size();\\n        int c = grid[0].size();\\n        \\n        if(r==1 && c==1) return (grid[0][0]*2 + 1);\\n        \\n        int area = 0;\\n        \\n        // for toparea\\n        int count = 0;\\n        for(int i=0 ; i<r ; ++i)\\n        {\\n            for(int j=0 ; j<c ; ++j) \\n            {\\n                if(grid[i][j]!=0) count++;\\n            }\\n        }\\n        area = count;\\n    \\n        \\n        //for frontarea\\n        for(int j=0 ; j<c ; ++j)\\n        {\\n            int temp =0;\\n            for(int i=0 ; i<r ; ++i)\\n            {\\n                temp = max(temp, grid[i][j]);\\n            }\\n            area += temp;\\n        }\\n    \\n        //for sidearea\\n        for(int i=0 ; i<r ; ++i)\\n        {\\n            int temp = 0;\\n            for(int j=0 ; j<c ; ++j)\\n            {\\n                temp = max(temp, grid[i][j]);\\n            }\\n            area += temp;   \\n        }\\n    \\n        return area;\\n    }\\n};\\n\\n**leave a like.**",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n********\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int r = grid.size();\\n        int c = grid[0].size();\\n        \\n        if(r==1 && c==1) return (grid[0][0]*2 + 1);\\n        \\n        int area = 0;\\n        \\n        // for toparea\\n        int count = 0;\\n        for(int i=0 ; i<r ; ++i)\\n        {\\n            for(int j=0 ; j<c ; ++j) \\n            {\\n                if(grid[i][j]!=0) count++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1111506,
                "title": "python3-humbly-hope-to-be-readable",
                "content": "\\n\\'\\'\\'\\n    \\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n\\t\\n        N = len(grid)\\n\\n        xy, yz,xz = 0,0, [0] * N\\n        for row in grid:\\n            xy += sum(1 for x in row if x > 0)\\n            yz += max(row)\\n            for i in range(N):\\n                xz[i] = max(xz[i], row[i])\\n\\n        return xy + yz + sum(xz)\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "\\n\\'\\'\\'\\n    \\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n\\t\\n        N = len(grid)\\n\\n        xy, yz,xz = 0,0, [0] * N\\n        for row in grid:\\n            xy += sum(1 for x in row if x > 0)\\n            yz += max(row)\\n            for i in range(N):\\n                xz[i] = max(xz[i], row[i])\\n\\n        return xy + yz + sum(xz)\\n\\'\\'\\'",
                "codeTag": "Python3"
            },
            {
                "id": 425940,
                "title": "java-another-simple-solution",
                "content": "```\\npublic int projectionArea(int[][] grid) {\\n\\tint maxX[] = new int[grid.length], maxY[] = new int[grid[0].length], countZ = 0;\\n\\tfor(int i=0; i<grid.length; i++) \\n\\t\\tfor(int j=0; j<grid.length; j++) \\n\\t\\t\\tif(grid[i][j]!=0) {\\n\\t\\t\\t\\tmaxX[i] = Math.max(maxX[i], grid[i][j]);\\n\\t\\t\\t\\tmaxY[j] = Math.max(maxY[j], grid[i][j]);\\n\\t\\t\\t\\tcountZ++;\\n\\t\\t\\t}\\n\\tfor(int x : maxX)\\n\\t\\tcountZ+=x;\\n\\tfor(int y : maxY)\\n\\t\\tcountZ+=y;\\n\\treturn countZ;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int projectionArea(int[][] grid) {\\n\\tint maxX[] = new int[grid.length], maxY[] = new int[grid[0].length], countZ = 0;\\n\\tfor(int i=0; i<grid.length; i++) \\n\\t\\tfor(int j=0; j<grid.length; j++) \\n\\t\\t\\tif(grid[i][j]!=0) {\\n\\t\\t\\t\\tmaxX[i] = Math.max(maxX[i], grid[i][j]);\\n\\t\\t\\t\\tmaxY[j] = Math.max(maxY[j], grid[i][j]);\\n\\t\\t\\t\\tcountZ++;\\n\\t\\t\\t}\\n\\tfor(int x : maxX)\\n\\t\\tcountZ+=x;\\n\\tfor(int y : maxY)\\n\\t\\tcountZ+=y;\\n\\treturn countZ;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 283097,
                "title": "java-clear-code-with-comments",
                "content": "```java\\nclass Solution {\\n    \\n    // Let a = sum(max value of each row)\\n    // Let b = sum(max value of each colomn)\\n    // Let c = count(grid[i][j], where grid[i][j] > 0)\\n    // ans = c + a + b\\n    public int projectionArea(int[][] grid) {\\n        int M = grid.length;\\n        int N = grid[0].length;\\n        \\n        int[] leftProj = new int[M];\\n        int[] topProj = new int[N];\\n        \\n        int a = 0;\\n        int c = 0;\\n        for (int i = 0; i < M; i++) {\\n            for (int j = 0 ; j < N; j++) {\\n                leftProj[i] = Math.max(leftProj[i], grid[i][j]);\\n                if (grid[i][j] > 0) c++;\\n            }\\n            a += leftProj[i];\\n        }\\n        \\n        int b = 0;\\n        for (int j = 0; j < N; j++) {\\n            for (int i = 0; i < M; i++) {\\n                topProj[j] = Math.max(topProj[j], grid[i][j]);\\n            }\\n            b += topProj[j];\\n        }\\n               \\n        return c + a + b;\\n    }\\n}\\n```\\n\\nBetter solutions here. Should notice that col and row length are same.\\n\\n```java\\nclass Solution {\\n\\n    public int projectionArea(int[][] grid) {\\n        int N = grid.length;\\n        int ans = 0;\\n        \\n        for (int i = 0; i < N; i++) {\\n            int rowMax = 0;\\n            int colMax = 0;\\n            for (int j = 0 ; j < N; j++) {\\n                if (grid[i][j] > 0) ans++;\\n                rowMax = Math.max(rowMax, grid[i][j]);\\n                colMax = Math.max(colMax, grid[j][i]);\\n            }\\n            ans += rowMax + colMax;\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\nclass Solution {\\n    \\n    // Let a = sum(max value of each row)\\n    // Let b = sum(max value of each colomn)\\n    // Let c = count(grid[i][j], where grid[i][j] > 0)\\n    // ans = c + a + b\\n    public int projectionArea(int[][] grid) {\\n        int M = grid.length;\\n        int N = grid[0].length;\\n        \\n        int[] leftProj = new int[M];\\n        int[] topProj = new int[N];\\n        \\n        int a = 0;\\n        int c = 0;\\n        for (int i = 0; i < M; i++) {\\n            for (int j = 0 ; j < N; j++) {\\n                leftProj[i] = Math.max(leftProj[i], grid[i][j]);\\n                if (grid[i][j] > 0) c++;\\n            }\\n            a += leftProj[i];\\n        }\\n        \\n        int b = 0;\\n        for (int j = 0; j < N; j++) {\\n            for (int i = 0; i < M; i++) {\\n                topProj[j] = Math.max(topProj[j], grid[i][j]);\\n            }\\n            b += topProj[j];\\n        }\\n               \\n        return c + a + b;\\n    }\\n}\\n```\n```java\\nclass Solution {\\n\\n    public int projectionArea(int[][] grid) {\\n        int N = grid.length;\\n        int ans = 0;\\n        \\n        for (int i = 0; i < N; i++) {\\n            int rowMax = 0;\\n            int colMax = 0;\\n            for (int j = 0 ; j < N; j++) {\\n                if (grid[i][j] > 0) ans++;\\n                rowMax = Math.max(rowMax, grid[i][j]);\\n                colMax = Math.max(colMax, grid[j][i]);\\n            }\\n            ans += rowMax + colMax;\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 273499,
                "title": "straight-forward-c",
                "content": "```    \\nint projectionArea(vector<vector<int>>& grid) {\\n\\tint ct = 0;\\n\\n\\tfor(int i=0, maxInRow = 0, maxInCol = 0; i<grid.size(); i++, maxInRow = 0, maxInCol = 0) {\\n\\t\\tfor(int j=0; j<grid.size(); j++) {\\n\\t\\t\\tif(grid[i][j] > 0) ct++;\\n\\t\\t\\tif(grid[i][j] > maxInCol) maxInCol = grid[i][j];\\n\\t\\t\\tif(grid[j][i] > maxInRow) maxInRow = grid[j][i];\\n\\t\\t}\\n\\t\\tct += maxInCol + maxInRow;\\n\\t}\\n\\n\\treturn ct;\\n}\\n",
                "solutionTags": [],
                "code": "```    \\nint projectionArea(vector<vector<int>>& grid) {\\n\\tint ct = 0;\\n\\n\\tfor(int i=0, maxInRow = 0, maxInCol = 0; i<grid.size(); i++, maxInRow = 0, maxInCol = 0) {\\n\\t\\tfor(int j=0; j<grid.size(); j++) {\\n\\t\\t\\tif(grid[i][j] > 0) ct++;\\n\\t\\t\\tif(grid[i][j] > maxInCol) maxInCol = grid[i][j];\\n\\t\\t\\tif(grid[j][i] > maxInRow) maxInRow = grid[j][i];\\n\\t\\t}\\n\\t\\tct += maxInCol + maxInRow;\\n\\t}\\n\\n\\treturn ct;\\n}\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3465742,
                "title": "c-solution-with-intuition",
                "content": "# Intuition\\nhere, i -> row and j -> column\\n- top shadow = sum(1 for every grid[i][j] > 0)\\n- front shadow = sum(max value of every column i.e grid[i][j])\\n- side shadow = sum(max value of every row i.e grid[j][i])\\n\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int m = n;\\n\\n        int ans = 0;\\n\\n        for (int i=0; i<n; i++) {\\n            int top = 0, front = 0, side = 0;\\n            for (int j=0; j<n; j++) {\\n                if (grid[i][j]) top++;\\n                front = max(front, grid[i][j]);\\n                side = max(side, grid[j][i]);\\n            }\\n\\n            ans += top + front + side;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int m = n;\\n\\n        int ans = 0;\\n\\n        for (int i=0; i<n; i++) {\\n            int top = 0, front = 0, side = 0;\\n            for (int j=0; j<n; j++) {\\n                if (grid[i][j]) top++;\\n                front = max(front, grid[i][j]);\\n                side = max(side, grid[j][i]);\\n            }\\n\\n            ans += top + front + side;\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3076403,
                "title": "c-solution",
                "content": "# Code\\n```\\nint max(int a,int b){\\n    return a>b?a:b;\\n}\\nint projectionArea(int** grid, int gridSize, int* gridColSize){\\n    int sum=0;\\n    // find x-y plane, y-z plane , x-z plane\\n    for(int row=0;row<gridSize;row++){\\n        int x_z_plane=0,y_z_plane=0;\\n        for(int col=0;col<*gridColSize;col++){\\n            x_z_plane=max(x_z_plane,grid[row][col]);\\n            y_z_plane=max(y_z_plane,grid[col][row]);\\n            if(grid[row][col]) ++sum; // x-y plane\\n        }\\n        sum+=(x_z_plane+y_z_plane);\\n    }\\n    return sum;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint max(int a,int b){\\n    return a>b?a:b;\\n}\\nint projectionArea(int** grid, int gridSize, int* gridColSize){\\n    int sum=0;\\n    // find x-y plane, y-z plane , x-z plane\\n    for(int row=0;row<gridSize;row++){\\n        int x_z_plane=0,y_z_plane=0;\\n        for(int col=0;col<*gridColSize;col++){\\n            x_z_plane=max(x_z_plane,grid[row][col]);\\n            y_z_plane=max(y_z_plane,grid[col][row]);\\n            if(grid[row][col]) ++sum; // x-y plane\\n        }\\n        sum+=(x_z_plane+y_z_plane);\\n    }\\n    return sum;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2621063,
                "title": "java-easy-solution-counting-max-of-each-row-and-column-number-of-non-zero-elements",
                "content": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int a=0,x=0;\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            int mr=Integer.MIN_VALUE;\\n            int mc=Integer.MIN_VALUE;\\n            for(int j=0;j<grid[0].length;j++)\\n            {\\n                if(grid[i][j]!=0)x+=1;//calculate number of non zero elements for area from top view\\n                if(grid[i][j]>mr)mr=grid[i][j];//calculate maximum element of each row\\n                if(grid[j][i]>mc)mc=grid[j][i];//calculate maximum element of each column\\n            }\\n            a+=mr+mc; //add max of each row and each column \\n        }\\n        return (a+x);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int a=0,x=0;\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            int mr=Integer.MIN_VALUE;\\n            int mc=Integer.MIN_VALUE;\\n            for(int j=0;j<grid[0].length;j++)\\n            {\\n                if(grid[i][j]!=0)x+=1;//calculate number of non zero elements for area from top view\\n                if(grid[i][j]>mr)mr=grid[i][j];//calculate maximum element of each row\\n                if(grid[j][i]>mc)mc=grid[j][i];//calculate maximum element of each column\\n            }\\n            a+=mr+mc; //add max of each row and each column \\n        }\\n        return (a+x);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2369514,
                "title": "fastest-java-solution-100-faster",
                "content": "Basically, the complexity is O(2n) -> O(n)\\n```\\nint projectionArea(int[][] grid) {\\n        int sum = 0;\\n        for (int i = 0; i < grid.length; i++) {\\n            sum += findMaxForRow(i, grid);\\n        }\\n\\n        for (int i = 0; i < grid.length; i++) {\\n            sum += findMaxForColumn(i, grid);\\n        }\\n\\n        for (int i = 0; i < grid.length; i++) {\\n            for (int j = 0; j < grid.length; j++) {\\n                if (grid[i][j] > 0) {\\n                    sum++;\\n                }\\n            }\\n        }\\n        return sum;\\n    }\\n\\n    private int findMaxForColumn(int col, int[][] matrix) {\\n        int max = matrix[0][col];\\n        for (int i = 0; i < matrix.length; i++) {\\n            if (max < matrix[i][col]) {\\n                max = matrix[i][col];\\n            }\\n        }\\n        return max;\\n    }\\n\\n    private int findMaxForRow(int row, int[][] matrix) {\\n        int min = matrix[row][0];\\n        for (int i = 1; i < matrix[row].length; i++) {\\n            if (min < matrix[row][i]) {\\n                min = matrix[row][i];\\n            }\\n        }\\n        return min;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "Basically, the complexity is O(2n) -> O(n)\\n```\\nint projectionArea(int[][] grid) {\\n        int sum = 0;\\n        for (int i = 0; i < grid.length; i++) {\\n            sum += findMaxForRow(i, grid);\\n        }\\n\\n        for (int i = 0; i < grid.length; i++) {\\n            sum += findMaxForColumn(i, grid);\\n        }\\n\\n        for (int i = 0; i < grid.length; i++) {\\n            for (int j = 0; j < grid.length; j++) {\\n                if (grid[i][j] > 0) {\\n                    sum++;\\n                }\\n            }\\n        }\\n        return sum;\\n    }\\n\\n    private int findMaxForColumn(int col, int[][] matrix) {\\n        int max = matrix[0][col];\\n        for (int i = 0; i < matrix.length; i++) {\\n            if (max < matrix[i][col]) {\\n                max = matrix[i][col];\\n            }\\n        }\\n        return max;\\n    }\\n\\n    private int findMaxForRow(int row, int[][] matrix) {\\n        int min = matrix[row][0];\\n        for (int i = 1; i < matrix[row].length; i++) {\\n            if (min < matrix[row][i]) {\\n                min = matrix[row][i];\\n            }\\n        }\\n        return min;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2326279,
                "title": "c-easy-code-with-explanation-70-fast",
                "content": "Please Upvote :)\\n\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int res=0;\\n        // X-Y ( top )\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            for(int j=0;j<grid[0].size();j++)\\n            {\\n                if(grid[i][j]) // if some cubes are present it is seen as of area 1 from top\\n                    res++; \\n            }\\n        }\\n        \\n        // Z-X ( front )\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int m=grid[i][0];\\n            for(int j=1;j<grid[0].size();j++)\\n            {\\n                m=max(m,grid[i][j]);// from front, the tower with heightest height can only be seen in column\\n            }\\n            res+=m;\\n        }\\n        \\n        // Z-Y ( side )\\n        for(int j=0;j<grid[0].size();j++)\\n        {\\n            int m=grid[0][j];\\n            for(int i=1;i<grid.size();i++)\\n            {\\n                m=max(m,grid[i][j]);// // from side, the tower with heightest height can only be seen in row\\n            }\\n            res+=m;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int res=0;\\n        // X-Y ( top )\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            for(int j=0;j<grid[0].size();j++)\\n            {\\n                if(grid[i][j]) // if some cubes are present it is seen as of area 1 from top\\n                    res++; \\n            }\\n        }\\n        \\n        // Z-X ( front )\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int m=grid[i][0];\\n            for(int j=1;j<grid[0].size();j++)\\n            {\\n                m=max(m,grid[i][j]);// from front, the tower with heightest height can only be seen in column\\n            }\\n            res+=m;\\n        }\\n        \\n        // Z-Y ( side )\\n        for(int j=0;j<grid[0].size();j++)\\n        {\\n            int m=grid[0][j];\\n            for(int i=1;i<grid.size();i++)\\n            {\\n                m=max(m,grid[i][j]);// // from side, the tower with heightest height can only be seen in row\\n            }\\n            res+=m;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2123506,
                "title": "efficient-java-solution-o-n-2-time-and-o-1-space-one-pass-solution",
                "content": "**Approach**\\nLet\\'s say the 2D matrix is drawn on the floor. The size of each cell is 1 * 1 and we can place a cube one above the other inside each cell. Now we have to caculate the area of projections from 3 views, the top view, the front view and the right view. \\n\\nWhen seen from the top, we can see those cells which have at least one cube. So to view area will be (( 1 * 1 ) * n ), where n is the number of cells which have at least 1 cube.\\n\\nWhen seen from front or back, we can see cubes in those cells which have maximum height or maximum number of cubes piled up in them. So the front view area of the shadow will be sum of maximum value in all the rows , i.e. (m1 * 1) + (m2 * 1) + (m3 * 1) + ..., where m1, m2, m3 are maximum values in the ith row.\\n\\nWhen seen from right or left, similarly we can see cubes in those cells which have maximum height or maximum number of cubes piled up in them. So if you put light from the right or left side, the shadow will be formed on the other side as per the maximum height for a certain cell. So the right view area of the shadow will be sum of maximum values in all the columns, i.e. (n1 * 1) + (n2 * 1) + ... , whre n1, n2 etc are maximum value for the ith column.\\n\\nHence the total shadow area formed from all the views are sum of the following areas,\\n\\t* Top view area = k * 1, where k is the number of cells where the value is greater than zero.\\n\\t* Front view area = (m1 * 1) + (m2 * 1) + (m3 * 1) + ... = m1 + m2 + m3 + ... , where mi is the maximum value for ith row.\\n\\t*   Right view area = (n1 * 1) + (n2 * 1) + (n3 * 1) + ... = n1 + n2 + n3 + ... , where ni is the maximum value fro ith column.\\n\\n```\\n\\tpublic int projectionArea(int[][] grid) {\\n        int m = grid.length, totalArea = 0, xzMax, yzMax;\\n\\n        for ( int i = 0; i < m; i++ ) {\\n            xzMax = 0; yzMax = 0;\\n            for ( int j = 0; j < m; j++ ) {\\n                xzMax = Math.max(xzMax, grid[i][j]);\\n                yzMax = Math.max(yzMax, grid[j][i]);\\n                if ( grid[i][j] > 0 ) totalArea += 1;\\n            }\\n            totalArea += xzMax + yzMax;\\n        }\\n        return totalArea;\\n    }\\n```\\n\\nPlease upvote if you like the explanation and solution. Thank you..",
                "solutionTags": [
                    "Java",
                    "Matrix",
                    "Iterator"
                ],
                "code": "```\\n\\tpublic int projectionArea(int[][] grid) {\\n        int m = grid.length, totalArea = 0, xzMax, yzMax;\\n\\n        for ( int i = 0; i < m; i++ ) {\\n            xzMax = 0; yzMax = 0;\\n            for ( int j = 0; j < m; j++ ) {\\n                xzMax = Math.max(xzMax, grid[i][j]);\\n                yzMax = Math.max(yzMax, grid[j][i]);\\n                if ( grid[i][j] > 0 ) totalArea += 1;\\n            }\\n            totalArea += xzMax + yzMax;\\n        }\\n        return totalArea;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1974019,
                "title": "python-easy-to-understand",
                "content": "```\\n# to calculate area from top -> count all non zero values\\n# to calculate area from front -> take sum of max from each row\\n# to calculate area from side -> take sum of max from each column\\narea_from_top = 0\\narea_from_front = 0\\narea_from_side = 0\\n\\nfor row in grid:\\n\\tfor v in row:\\n\\t\\tarea_from_top += v > 0\\n\\nfor row in grid:\\n\\tarea_from_front += max(row)\\n\\nfor j in range(len(grid[0])):\\n\\tmax_v = 0\\n\\tfor i in range(len(grid)):\\n\\t\\tmax_v = max(max_v, grid[i][j])\\n\\tarea_from_side += max_v\\n\\nreturn area_from_top + area_from_front + area_from_side\\n```",
                "solutionTags": [],
                "code": "```\\n# to calculate area from top -> count all non zero values\\n# to calculate area from front -> take sum of max from each row\\n# to calculate area from side -> take sum of max from each column\\narea_from_top = 0\\narea_from_front = 0\\narea_from_side = 0\\n\\nfor row in grid:\\n\\tfor v in row:\\n\\t\\tarea_from_top += v > 0\\n\\nfor row in grid:\\n\\tarea_from_front += max(row)\\n\\nfor j in range(len(grid[0])):\\n\\tmax_v = 0\\n\\tfor i in range(len(grid)):\\n\\t\\tmax_v = max(max_v, grid[i][j])\\n\\tarea_from_side += max_v\\n\\nreturn area_from_top + area_from_front + area_from_side\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1773941,
                "title": "ruby-one-liner",
                "content": "```\\n# @param {Integer[][]} grid\\n# @return {Integer}\\ndef projection_area(grid)\\n  grid.sum(&:max) + grid.transpose.sum(&:max) + grid.flatten(1).count(&:nonzero?)  \\nend\\n```",
                "solutionTags": [],
                "code": "```\\n# @param {Integer[][]} grid\\n# @return {Integer}\\ndef projection_area(grid)\\n  grid.sum(&:max) + grid.transpose.sum(&:max) + grid.flatten(1).count(&:nonzero?)  \\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1712914,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int max_row[]=new int[grid.length];\\n        int max_col[]=new int[grid[0].length];\\n        int ans=0;\\n        for(int i=0;i<grid.length;i++){\\n            for(int j=0;j<grid.length;j++){\\n                max_row[i]=Math.max(max_row[i],grid[i][j]);\\n                max_col[j]=Math.max(max_col[j],grid[i][j]);\\n                if(grid[i][j]>0) ans++;\\n            }\\n        }\\n        for(int t:max_row) ans+=t;\\n        for(int t:max_col) ans+=t;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int max_row[]=new int[grid.length];\\n        int max_col[]=new int[grid[0].length];\\n        int ans=0;\\n        for(int i=0;i<grid.length;i++){\\n            for(int j=0;j<grid.length;j++){\\n                max_row[i]=Math.max(max_row[i],grid[i][j]);\\n                max_col[j]=Math.max(max_col[j],grid[i][j]);\\n                if(grid[i][j]>0) ans++;\\n            }\\n        }\\n        for(int t:max_row) ans+=t;\\n        for(int t:max_col) ans+=t;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1658152,
                "title": "c-easy-to-understand-simple",
                "content": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n       int xy=0,yz=0,zx=0;\\n        int n=grid.size();\\n        int m=grid[0].size();\\n        for(int i=0;i<n;i++)\\n        {\\n            int bestCol=0,bestRow=0;\\n            for(int j=0;j<m;j++)\\n            {\\n                if(grid[i][j]>0)\\n                {\\n                    xy++;\\n                }\\n                bestCol=max(bestCol,grid[i][j]);\\n                bestRow=max(bestRow,grid[j][i]);\\n            }\\n            yz+=bestCol;\\n            zx+=bestRow;\\n        }\\n        return (xy+yz+zx);\\n    }\\n};\\n```\\n**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n       int xy=0,yz=0,zx=0;\\n        int n=grid.size();\\n        int m=grid[0].size();\\n        for(int i=0;i<n;i++)\\n        {\\n            int bestCol=0,bestRow=0;\\n            for(int j=0;j<m;j++)\\n            {\\n                if(grid[i][j]>0)\\n                {\\n                    xy++;\\n                }\\n                bestCol=max(bestCol,grid[i][j]);\\n                bestRow=max(bestRow,grid[j][i]);\\n            }\\n            yz+=bestCol;\\n            zx+=bestRow;\\n        }\\n        return (xy+yz+zx);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1604283,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int xy=0,yz=0,zx=0;\\n        for(int i=0;i<grid.size();i++) {\\n            yz+=*max_element(grid[i].begin(),grid[i].end());\\n            for(int j=0;j<grid[0].size();j++) {\\n                if(grid[i][j]>0) {\\n                    xy++;\\n                }\\n            }\\n        }\\n        for(int j=0;j<grid[0].size();j++) {\\n            int height=INT_MIN;\\n            for(int i=0;i<grid.size();i++) {\\n                height=max(height,grid[i][j]);\\n            }\\n            zx+=height;\\n        }\\n        return xy+yz+zx;\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int xy=0,yz=0,zx=0;\\n        for(int i=0;i<grid.size();i++) {\\n            yz+=*max_element(grid[i].begin(),grid[i].end());\\n            for(int j=0;j<grid[0].size();j++) {\\n                if(grid[i][j]>0) {\\n                    xy++;\\n                }\\n            }\\n        }\\n        for(int j=0;j<grid[0].size();j++) {\\n            int height=INT_MIN;\\n            for(int i=0;i<grid.size();i++) {\\n                height=max(height,grid[i][j]);\\n            }\\n            zx+=height;\\n        }\\n        return xy+yz+zx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1560075,
                "title": "python-100-faster",
                "content": "![image](https://assets.leetcode.com/users/images/ad3bda50-3b7f-4430-8a1f-ba367e32a750_1636082132.1390212.png)\\n\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        ans = 0\\n        for i in grid:\\n            ans += max(i) + len(i) - i.count(0)\\n        for j in zip(*grid):\\n            ans += max(j)\\n        return ans",
                "solutionTags": [],
                "code": "![image](https://assets.leetcode.com/users/images/ad3bda50-3b7f-4430-8a1f-ba367e32a750_1636082132.1390212.png)\\n\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        ans = 0\\n        for i in grid:\\n            ans += max(i) + len(i) - i.count(0)\\n        for j in zip(*grid):\\n            ans += max(j)\\n        return ans",
                "codeTag": "Java"
            },
            {
                "id": 1530047,
                "title": "c-easy-understandable-code",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) \\n    {\\n        int answer=0;\\n        int count=0;\\n        //top view\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            for(int j=0;j<grid[i].size();j++)\\n            {\\n                if(grid[i][j]!=0)\\n                {\\n                    count++;\\n                }\\n            }\\n        }\\n        answer=answer+count*1;\\n        \\n        //front view\\n        int temp=INT_MIN;\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int temp=INT_MIN;\\n            for(int j=0;j<grid[i].size();j++)\\n            {\\n                temp=max(temp,grid[j][i]);\\n            }\\n            answer=answer+temp*1;   \\n        }\\n        \\n        //side view\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int temp=INT_MIN;\\n            for(int j=0;j<grid[i].size();j++)\\n            {\\n                temp=max(temp,grid[i][j]);\\n            }\\n            answer=answer+temp*1;   \\n        }\\n        return answer;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) \\n    {\\n        int answer=0;\\n        int count=0;\\n        //top view\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            for(int j=0;j<grid[i].size();j++)\\n            {\\n                if(grid[i][j]!=0)\\n                {\\n                    count++;\\n                }\\n            }\\n        }\\n        answer=answer+count*1;\\n        \\n        //front view\\n        int temp=INT_MIN;\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int temp=INT_MIN;\\n            for(int j=0;j<grid[i].size();j++)\\n            {\\n                temp=max(temp,grid[j][i]);\\n            }\\n            answer=answer+temp*1;   \\n        }\\n        \\n        //side view\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int temp=INT_MIN;\\n            for(int j=0;j<grid[i].size();j++)\\n            {\\n                temp=max(temp,grid[i][j]);\\n            }\\n            answer=answer+temp*1;   \\n        }\\n        return answer;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1459698,
                "title": "one-pass-c-beats-99-time",
                "content": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int ans=0;\\n        for (int i=0; i<grid.size(); i++){\\n            int x=0, y=0;\\n            for (int j=0; j<grid.size(); j++){\\n                if (grid[i][j]>x) x=grid[i][j];\\n                if (grid[j][i]>y) y=grid[j][i];\\n                if (grid[i][j]) ans++;\\n            }\\n            ans+=x+y;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int ans=0;\\n        for (int i=0; i<grid.size(); i++){\\n            int x=0, y=0;\\n            for (int j=0; j<grid.size(); j++){\\n                if (grid[i][j]>x) x=grid[i][j];\\n                if (grid[j][i]>y) y=grid[j][i];\\n                if (grid[i][j]) ans++;\\n            }\\n            ans+=x+y;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1375020,
                "title": "simple-python3-o-n-2-solution",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        N = len(grid)\\n        ans = 0\\n\\n        for i in range(N):\\n            best_row = 0  # max of grid[i][j]\\n            best_col = 0  # max of grid[j][i]\\n            for j in range(N):\\n                if grid[i][j]: ans += 1  # top shadow\\n                best_row = max(best_row, grid[i][j])\\n                best_col = max(best_col, grid[j][i])\\n\\n            ans += best_row + best_col\\n\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        N = len(grid)\\n        ans = 0\\n\\n        for i in range(N):\\n            best_row = 0  # max of grid[i][j]\\n            best_col = 0  # max of grid[j][i]\\n            for j in range(N):\\n                if grid[i][j]: ans += 1  # top shadow\\n                best_row = max(best_row, grid[i][j])\\n                best_col = max(best_col, grid[j][i])\\n\\n            ans += best_row + best_col\\n\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1357263,
                "title": "python3-olution",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        p = len(grid)\\n        x, y, c = [], [0]*p, 0\\n        for i in range(p):\\n            x.append(0)\\n            for j in range(p):\\n                n = grid[i][j]\\n                if n > 0:\\n                    c += 1\\n                if x[i] < n:\\n                    x[i] = n\\n                if y[j] < n:\\n                    y[j] = n\\n\\n        return (sum(x)+sum(y)+c)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        p = len(grid)\\n        x, y, c = [], [0]*p, 0\\n        for i in range(p):\\n            x.append(0)\\n            for j in range(p):\\n                n = grid[i][j]\\n                if n > 0:\\n                    c += 1\\n                if x[i] < n:\\n                    x[i] = n\\n                if y[j] < n:\\n                    y[j] = n\\n\\n        return (sum(x)+sum(y)+c)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1287505,
                "title": "python-64ms-95-97-straigthforward-operations",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        # initialize the parts of the sum\\n        p_xy = 0\\n        p_xz = 0\\n        p_yz = 0\\n        # simply iterate over the grid and watch where the bins are present (bird-view)\\n        for i in grid:\\n            for j in i:\\n                if j > 0:\\n                    p_xy += 1\\n        # find the maximum shadow from one side prospective, which overrules the smaler bins            \\n        for i in grid:\\n            p_xz += max(i)\\n        # do the same with the second bottom dimension         \\n        for i in zip(*grid):\\n            p_yz += max(i)\\n            \\n        return p_xy + p_xz + p_yz\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        # initialize the parts of the sum\\n        p_xy = 0\\n        p_xz = 0\\n        p_yz = 0\\n        # simply iterate over the grid and watch where the bins are present (bird-view)\\n        for i in grid:\\n            for j in i:\\n                if j > 0:\\n                    p_xy += 1\\n        # find the maximum shadow from one side prospective, which overrules the smaler bins            \\n        for i in grid:\\n            p_xz += max(i)\\n        # do the same with the second bottom dimension         \\n        for i in zip(*grid):\\n            p_yz += max(i)\\n            \\n        return p_xy + p_xz + p_yz\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1201138,
                "title": "python3-simple-solution-beats-98-users",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        area = 0\\n        for i in grid:\\n            area += len(i) - i.count(0) + max(i)\\n        for i in zip(*grid):\\n            area += max(i)\\n        return area\\n```\\n**If you like this solution, please upvote for this**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        area = 0\\n        for i in grid:\\n            area += len(i) - i.count(0) + max(i)\\n        for i in zip(*grid):\\n            area += max(i)\\n        return area\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1194480,
                "title": "golang-solution-with-quick-explanation-and-images",
                "content": "[883. Projection Area of 3D Shapes](https://leetcode.com/problems/projection-area-of-3d-shapes/)\\n\\nThe core ideas of this solution are that there are three views that can be used to solve this problem. This can be shown using an example, `input : [[2,3][1,0]]`\\n\\n![image](https://assets.leetcode.com/users/images/78969ac9-54e6-4978-9c4c-2c787b322ad7_1620308420.5680377.jpeg)\\n\\n\\nWe find the side shadows by finding the max value in each row and each column. Then we add the max to the result. Finally, we find the bottom shadow by checking whether `grid[i][j]` is not equal to `0`. If so, we can add one to `result`.\\n\\n\\n``` go\\nfunc projectionArea(grid [][]int) int {\\n\\tresult := 0\\n\\n\\tfor i := 0; i < len(grid); i++ {\\n\\t\\tmaxRow, maxCol := 0, 0\\n\\n\\t\\tfor j := 0; j < len(grid[i]); j++ {\\n\\t\\t\\tif grid[j][i] > maxRow {\\n\\t\\t\\t\\tmaxRow = grid[j][i]\\n\\t\\t\\t}\\n\\t\\t\\tif grid[i][j] > maxCol {\\n\\t\\t\\t\\tmaxCol = grid[i][j]\\n\\t\\t\\t}\\n\\t\\t\\tif grid[i][j] != 0 {\\n\\t\\t\\t\\tresult++\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tresult = result + maxCol + maxRow\\n\\t}\\n\\n\\treturn result\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "``` go\\nfunc projectionArea(grid [][]int) int {\\n\\tresult := 0\\n\\n\\tfor i := 0; i < len(grid); i++ {\\n\\t\\tmaxRow, maxCol := 0, 0\\n\\n\\t\\tfor j := 0; j < len(grid[i]); j++ {\\n\\t\\t\\tif grid[j][i] > maxRow {\\n\\t\\t\\t\\tmaxRow = grid[j][i]\\n\\t\\t\\t}\\n\\t\\t\\tif grid[i][j] > maxCol {\\n\\t\\t\\t\\tmaxCol = grid[i][j]\\n\\t\\t\\t}\\n\\t\\t\\tif grid[i][j] != 0 {\\n\\t\\t\\t\\tresult++\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tresult = result + maxCol + maxRow\\n\\t}\\n\\n\\treturn result\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1156315,
                "title": "my-python-solution-faster-than-96",
                "content": "```\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = len(grid) #length of the grid\\n        \\n        top,side,frontValues = 0, 0, [0]*n #empty promises to add values to(not in the programming sense)\\n\\n        for i in range(n): #looking at the x coordinates(i)\\n            \\n            side += max(grid[i]) #taking the maximum z value for a single x and n*y, \\n\\t\\t\\t#and adding it to Total Side Area\\n            \\n            for j in range(n): #looking at y coordinates too (j)\\n            \\n                if grid[i][j] != 0: top += 1\\n\\t\\t\\t\\t#if value of z at (x,y) i.e. (i,j) is zero then don\\'t add it to the Total Top Area\\n                \\n\\t\\t\\t\\t#Now I try to find the maximum z value for a single y and n*x,\\n                if frontValues[j] > grid[i][j]: continue\\n                else: frontValues[j] = grid[i][j]\\n\\t\\t\\t\\t\\n        \\n\\t\\tfront = sum(frontValues) #After finding all max z values of every y, we add them all and that is the Total Front Area\\n\\t\\t\\n        return (top+side+front) #return the sum of all three area\\n```\\n\\nI hope you can understand this, sorry if I didn\\'t explain it concisely.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = len(grid) #length of the grid\\n        \\n        top,side,frontValues = 0, 0, [0]*n #empty promises to add values to(not in the programming sense)\\n\\n        for i in range(n): #looking at the x coordinates(i)\\n            \\n            side += max(grid[i]) #taking the maximum z value for a single x and n*y, \\n\\t\\t\\t#and adding it to Total Side Area\\n            \\n            for j in range(n): #looking at y coordinates too (j)\\n            \\n                if grid[i][j] != 0: top += 1\\n\\t\\t\\t\\t#if value of z at (x,y) i.e. (i,j) is zero then don\\'t add it to the Total Top Area\\n                \\n\\t\\t\\t\\t#Now I try to find the maximum z value for a single y and n*x,\\n                if frontValues[j] > grid[i][j]: continue\\n                else: frontValues[j] = grid[i][j]\\n\\t\\t\\t\\t\\n        \\n\\t\\tfront = sum(frontValues) #After finding all max z values of every y, we add them all and that is the Total Front Area\\n\\t\\t\\n        return (top+side+front) #return the sum of all three area\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1129930,
                "title": "java-100-easy-explanation",
                "content": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int sum = 0;\\n        for (int i = 0; i < grid.length; i++){\\n\\t\\t\\n            int max1 = -1, max2 = -1;\\n\\t\\t\\t\\n            for (int j=0; j<grid.length; j++){\\n                if(grid[i][j] > 0) sum++; // xy axis - if value is greater than zero, means cube is there\\n                if(grid[i][j] > max1) max1 = grid[i][j]; // xz axis - max element in row\\n                if(grid[j][i] > max2) max2 = grid[j][i]; // yz axiz - max element in column\\n            }\\n            sum = sum + max1 + max2;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int sum = 0;\\n        for (int i = 0; i < grid.length; i++){\\n\\t\\t\\n            int max1 = -1, max2 = -1;\\n\\t\\t\\t\\n            for (int j=0; j<grid.length; j++){\\n                if(grid[i][j] > 0) sum++; // xy axis - if value is greater than zero, means cube is there\\n                if(grid[i][j] > max1) max1 = grid[i][j]; // xz axis - max element in row\\n                if(grid[j][i] > max2) max2 = grid[j][i]; // yz axiz - max element in column\\n            }\\n            sum = sum + max1 + max2;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1083137,
                "title": "very-easy-to-understand-java-solution",
                "content": "To count the projection area onto xy-plane, we simply count the number of cells in the matrix with value greater than 0 and add 1 for to the result for each such cell (since all cubes are 1 by 1).\\n\\nTo count the projection area onto xz plane, we find the maximum value in EACH ROW and add that maximum to total area.\\n\\nTo count the projection area onto yz plane, we find the maximum value in EACH COLUMN and add that maximum to total area.\\n\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int xy = 0, yz = 0, xz = 0;\\n        for(int i = 0; i < grid.length; i ++) {\\n            for(int j = 0; j < grid[0].length; j ++) {\\n                if(grid[i][j] > 0)\\n                    xy ++ ;\\n            }\\n        }\\n        for(int i = 0; i < grid.length; i ++) {\\n            int max = 0;\\n            for(int j = 0; j < grid[0].length; j ++) \\n                max = Math.max(max, grid[i][j]);\\n            xz += max;\\n        }\\n        for(int i = 0; i < grid[0].length; i ++) {\\n            int max = 0;\\n            for(int j = 0; j < grid.length; j ++) \\n                max = Math.max(max, grid[j][i]);\\n            yz += max;\\n        }\\n        return xy + xz + yz;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int xy = 0, yz = 0, xz = 0;\\n        for(int i = 0; i < grid.length; i ++) {\\n            for(int j = 0; j < grid[0].length; j ++) {\\n                if(grid[i][j] > 0)\\n                    xy ++ ;\\n            }\\n        }\\n        for(int i = 0; i < grid.length; i ++) {\\n            int max = 0;\\n            for(int j = 0; j < grid[0].length; j ++) \\n                max = Math.max(max, grid[i][j]);\\n            xz += max;\\n        }\\n        for(int i = 0; i < grid[0].length; i ++) {\\n            int max = 0;\\n            for(int j = 0; j < grid.length; j ++) \\n                max = Math.max(max, grid[j][i]);\\n            yz += max;\\n        }\\n        return xy + xz + yz;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 964016,
                "title": "python-3-short-solution-not-very-fast-though",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        #\\n        rowmaxs = [max(i) for i in grid]\\n        colmaxs = [max(i) for i in zip(*grid)]\\n        zeros = sum(j == 0 for i in grid for j in i)\\n        return len(rowmaxs)*len(colmaxs)+sum(rowmaxs)+sum(colmaxs)-zeros\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        #\\n        rowmaxs = [max(i) for i in grid]\\n        colmaxs = [max(i) for i in zip(*grid)]\\n        zeros = sum(j == 0 for i in grid for j in i)\\n        return len(rowmaxs)*len(colmaxs)+sum(rowmaxs)+sum(colmaxs)-zeros\\n```",
                "codeTag": "Java"
            },
            {
                "id": 955059,
                "title": "c-91",
                "content": "```\\nclass Solution {\\npublic:\\n    int projectionArea(const vector<vector<int>>& grid) {\\n        \\n        int base = 0, maxRow = 0;\\n        vector<int> maxCol(grid[0].size());\\n        \\n        for(int i=0; i<grid.size(); ++i) {\\n            for(int k=0; k<grid[0].size(); ++k) {\\n                if(grid[i][k]) {\\n                    ++base;\\n                    maxRow = max(maxRow, grid[i][k]);\\n                    maxCol[k] = max(maxCol[k], grid[i][k]);\\n                }\\n            }\\n            base += maxRow;\\n            maxRow = 0;\\n        }\\n        \\n        return base + accumulate(maxCol.begin(),maxCol.end(),0);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(const vector<vector<int>>& grid) {\\n        \\n        int base = 0, maxRow = 0;\\n        vector<int> maxCol(grid[0].size());\\n        \\n        for(int i=0; i<grid.size(); ++i) {\\n            for(int k=0; k<grid[0].size(); ++k) {\\n                if(grid[i][k]) {\\n                    ++base;\\n                    maxRow = max(maxRow, grid[i][k]);\\n                    maxCol[k] = max(maxCol[k], grid[i][k]);\\n                }\\n            }\\n            base += maxRow;\\n            maxRow = 0;\\n        }\\n        \\n        return base + accumulate(maxCol.begin(),maxCol.end(),0);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 884495,
                "title": "intuitive-cpp-solution",
                "content": "Time - O(N^2) Space - O(1)\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int col=0, row=0, top=0;\\n        for(int i=0; i<grid.size(); i++){\\n            int max_row=INT_MIN;\\n            for(int j=0; j<grid[0].size(); j++){\\n                max_row = max(max_row, grid[i][j]);\\n                if(grid[i][j]) top++;\\n            }\\n            row+= max_row;\\n        }\\n        for(int i=0; i<grid[0].size(); i++){\\n            int max_col = INT_MIN;\\n            for(int j=0; j<grid.size(); j++)\\n                max_col = max(max_col, grid[j][i]);\\n            col+=max_col;\\n        }\\n        return top + row+col;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int col=0, row=0, top=0;\\n        for(int i=0; i<grid.size(); i++){\\n            int max_row=INT_MIN;\\n            for(int j=0; j<grid[0].size(); j++){\\n                max_row = max(max_row, grid[i][j]);\\n                if(grid[i][j]) top++;\\n            }\\n            row+= max_row;\\n        }\\n        for(int i=0; i<grid[0].size(); i++){\\n            int max_col = INT_MIN;\\n            for(int j=0; j<grid.size(); j++)\\n                max_col = max(max_col, grid[j][i]);\\n            col+=max_col;\\n        }\\n        return top + row+col;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 859016,
                "title": "python-beats-98-single-pass-of-grid",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = len(grid)\\n        m = len(grid[0])\\n        top = 0\\n        rows = [0]*n\\n        cols = [0]*m\\n        \\n        for i in range(n):\\n            for j in range(m):\\n                if grid[i][j] > 0: top += 1\\n                rows[i] = max(rows[i], grid[i][j])\\n                cols[j] = max(cols[j], grid[i][j])\\n        \\n        return top + sum(rows) + sum(cols)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = len(grid)\\n        m = len(grid[0])\\n        top = 0\\n        rows = [0]*n\\n        cols = [0]*m\\n        \\n        for i in range(n):\\n            for j in range(m):\\n                if grid[i][j] > 0: top += 1\\n                rows[i] = max(rows[i], grid[i][j])\\n                cols[j] = max(cols[j], grid[i][j])\\n        \\n        return top + sum(rows) + sum(cols)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 816439,
                "title": "c-100-with-detail",
                "content": "**Explanation:**\\n\\ngrid[[2]] means at position 0,0 there is a block of height 2\\n[[2,2,2],[2,1,2],[2,2,2]] means\\nAt 0,0 there is a block of height 2. At 0,1 there is a block of height 2. At 0,2 there is a block of height 2.\\nAt 1,0 there is a block of height 2. At 1,1 there is a block of height 1. At 1,2 there is a block of height 2.\\nAt 2,0 there is a block of height 2. At 2,1 there is a block of height 2. At 2,2 there is a block of height 2.\\n\\n**C++:**\\n\\n```\\n    int projectionArea(vector<vector<int>>& grid) {\\n      int n = grid.size();\\n      int xy=0, xz=0, yz=0;//xy, yz, yz plane area\\n      int xz_tmp=0, yz_tmp=0;\\n      for(int i=0;i<n;++i){\\n        xz_tmp = 0 , yz_tmp = 0;\\n        for(int j=0;j<n;++j){\\n          xy += grid[i][j]!=0 ;\\n          xz_tmp = max(grid[i][j], xz_tmp);\\n          yz_tmp = max(grid[j][i], yz_tmp);\\n        }\\n        xz += xz_tmp;\\n        yz += yz_tmp;\\n      }\\n      return xy+yz+xz;\\n\\t}\\n```\\n\\n**Detail:**\\n\\nxz formula => `max(grid[i][j], xz_tmp)`\\nyz formula => `max(grid[j][i], yz_tmp)`\\n\\n**Example:**\\n\\n[[1,2][3,4]]\\n![image](https://assets.leetcode.com/users/images/ee619fad-e734-433e-8edc-a53dff40861b_1598611485.9520311.png)\\n\\nxz += max(grid[0,0],grid[0,1])\\nxz += max(grid[1,0],grid[1,1])\\nyz += max(grid[0,0],grid[1,0])\\nyz += max(grid[0,1],grid[1,1])\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    int projectionArea(vector<vector<int>>& grid) {\\n      int n = grid.size();\\n      int xy=0, xz=0, yz=0;//xy, yz, yz plane area\\n      int xz_tmp=0, yz_tmp=0;\\n      for(int i=0;i<n;++i){\\n        xz_tmp = 0 , yz_tmp = 0;\\n        for(int j=0;j<n;++j){\\n          xy += grid[i][j]!=0 ;\\n          xz_tmp = max(grid[i][j], xz_tmp);\\n          yz_tmp = max(grid[j][i], yz_tmp);\\n        }\\n        xz += xz_tmp;\\n        yz += yz_tmp;\\n      }\\n      return xy+yz+xz;\\n\\t}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 715650,
                "title": "c-solution-for-general-m-n-matrix-beats-99-7",
                "content": "The aim is to sum 3 counters\\n1. Whether the value>0 then add 1 for all such values in the matrix (Area sum of x-y plane)\\n2. Maximum value of each row (Area sum of x-z plane)\\n3. Maximum value of each column (Area sum of y-z plane)\\n\\n```\\nint projectionArea(vector<vector<int>>& grid) {\\n        int xy=0,xz=0;\\n        vector<int> yz(grid[0].size(),-1);\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int row_max = -1;\\n            for(int j=0;j<grid[0].size();j++)\\n            {\\n                if(grid[i][j]>0)\\n                    xy++;\\n                row_max = max(row_max,grid[i][j]);\\n                yz[j] = max(yz[j],grid[i][j]);\\n            }\\n            xz += row_max;\\n        }\\n        return xy + xz + accumulate(yz.begin(),yz.end(),0);    \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint projectionArea(vector<vector<int>>& grid) {\\n        int xy=0,xz=0;\\n        vector<int> yz(grid[0].size(),-1);\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int row_max = -1;\\n            for(int j=0;j<grid[0].size();j++)\\n            {\\n                if(grid[i][j]>0)\\n                    xy++;\\n                row_max = max(row_max,grid[i][j]);\\n                yz[j] = max(yz[j],grid[i][j]);\\n            }\\n            xz += row_max;\\n        }\\n        return xy + xz + accumulate(yz.begin(),yz.end(),0);    \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 498844,
                "title": "python-91-37",
                "content": "```python\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        \\n        s = 0\\n        for i in range(len(grid)):\\n            x_max = max(grid[i])\\n            y_max = 0\\n            for j in range(len(grid)):\\n                if grid[j][i] > y_max: y_max = grid[j][i]\\n                if grid[i][j]: s += 1\\n                    \\n            s += x_max + y_max\\n        \\n        return s\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        \\n        s = 0\\n        for i in range(len(grid)):\\n            x_max = max(grid[i])\\n            y_max = 0\\n            for j in range(len(grid)):\\n                if grid[j][i] > y_max: y_max = grid[j][i]\\n                if grid[i][j]: s += 1\\n                    \\n            s += x_max + y_max\\n        \\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 465350,
                "title": "4-lines-rust-solution",
                "content": "**4 Lines Functional Solution**\\n```rust\\npub fn projection_area(A: Vec<Vec<i32>>) -> i32 {\\n\\tlet xy: i32 = A.iter().map(|p| p.iter().filter(|&&z| z > 0).count() as i32).sum();\\n\\tlet xz: i32 = A.iter().map(|p| *p.iter().max().unwrap()).sum();\\n\\tlet yz: i32 = (0..A.len()).map(|i| A.iter().map(|p| p[i]).max().unwrap()).sum();\\n\\txy + xz + yz\\n}\\n```\\n\\n**One Pass Solution**\\n```rust\\npub fn projection_area(A: Vec<Vec<i32>>) -> i32 {\\n\\tlet (mut xy, mut xz, mut yz) = (0, 0, 0);\\n\\tfor i in 0..A.len() {\\n\\t\\tlet (mut mxz, mut myz) = (0, 0);\\n\\t\\tfor j in 0..A.len() {\\n\\t\\t\\tif A[i][j] > 0 { xy += 1; }\\n\\t\\t\\tmxz = std::cmp::max(mxz, A[i][j]);\\n\\t\\t\\tmyz = std::cmp::max(myz, A[j][i]);\\n\\t\\t}\\n\\t\\txz += mxz;\\n\\t\\tyz += myz;\\n\\t}\\n\\txy + xz + yz\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\npub fn projection_area(A: Vec<Vec<i32>>) -> i32 {\\n\\tlet xy: i32 = A.iter().map(|p| p.iter().filter(|&&z| z > 0).count() as i32).sum();\\n\\tlet xz: i32 = A.iter().map(|p| *p.iter().max().unwrap()).sum();\\n\\tlet yz: i32 = (0..A.len()).map(|i| A.iter().map(|p| p[i]).max().unwrap()).sum();\\n\\txy + xz + yz\\n}\\n```\n```rust\\npub fn projection_area(A: Vec<Vec<i32>>) -> i32 {\\n\\tlet (mut xy, mut xz, mut yz) = (0, 0, 0);\\n\\tfor i in 0..A.len() {\\n\\t\\tlet (mut mxz, mut myz) = (0, 0);\\n\\t\\tfor j in 0..A.len() {\\n\\t\\t\\tif A[i][j] > 0 { xy += 1; }\\n\\t\\t\\tmxz = std::cmp::max(mxz, A[i][j]);\\n\\t\\t\\tmyz = std::cmp::max(myz, A[j][i]);\\n\\t\\t}\\n\\t\\txz += mxz;\\n\\t\\tyz += myz;\\n\\t}\\n\\txy + xz + yz\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 461519,
                "title": "c-solution",
                "content": "class Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        \\n        int xy=0,yz=0,zx=0;\\n        \\n        \\n        for(int i=0;i<grid.size();i++)\\n            yz+=*max_element(grid[i].begin(),grid[i].end());\\n        \\n        for(int j=0;j<grid.size();j++)\\n        {\\n            int maxi=0;\\n            \\n            for(int i=0;i<grid.size();i++)\\n            {\\n                maxi=max(maxi,grid[i][j]);\\n                \\n                if(grid[i][j]!=0)\\n                    xy++;\\n            }\\n            \\n            zx+=maxi;\\n          \\n        }\\n        \\n        return xy+yz+zx;\\n          \\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        \\n        int xy=0,yz=0,zx=0;\\n        \\n        \\n        for(int i=0;i<grid.size();i++)\\n            yz+=*max_element(grid[i].begin(),grid[i].end());\\n        \\n        for(int j=0;j<grid.size();j++)\\n        {\\n            int maxi=0;\\n            \\n            for(int i=0;i<grid.size();i++)\\n            {\\n                maxi=max(maxi,grid[i][j]);\\n                \\n                if(grid[i][j]!=0)\\n                    xy++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 395852,
                "title": "python-3-concise-solution",
                "content": "Algo: \\nxy projection counts non-zero entries in matrix\\nzx projection reflects sum of maximum elements in each row\\nyz projection reflects sum of maximum elements in each column \\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        xy = sum(map(bool, sum(grid, [])))\\n        yz = sum(map(max, zip(*grid)))\\n        zx = sum(map(max, grid))\\n        return xy + yz + zx \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        xy = sum(map(bool, sum(grid, [])))\\n        yz = sum(map(max, zip(*grid)))\\n        zx = sum(map(max, grid))\\n        return xy + yz + zx \\n```",
                "codeTag": "Java"
            },
            {
                "id": 381846,
                "title": "solution-in-python-3-one-line-beats-96",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, G: List[List[int]]) -> int:\\n    \\treturn sum([1 for i in G for j in i if j != 0]+[max(i) for i in G]+[max(i) for i in list(zip(*G))])\\n\\t\\t\\n\\t\\t\\n- Junaid Mansuri\\n(LeetCode ID)@hotmail.com",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, G: List[List[int]]) -> int:\\n    \\treturn sum([1 for i in G for j in i if j != 0]+[max(i) for i in G]+[max(i) for i in list(zip(*G))])\\n\\t\\t\\n\\t\\t\\n- Junaid Mansuri\\n(LeetCode ID)@hotmail.com",
                "codeTag": "Java"
            },
            {
                "id": 374312,
                "title": "javascript-solution-faster-than-98",
                "content": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n    let area = 0;\\n    \\n    // first projection is num of cells > 0 in grid\\n    let first = 0;\\n    // second projection is sum of max of rows\\n    let secondMax = 0;\\n    // third projection is sum of max of columns\\n    let thirdMax = 0;\\n    \\n    for (let i = 0; i < grid.length; i++) {        \\n        for(let j = 0; j < grid.length; j++) {\\n            if (grid[i][j] > secondMax) {\\n                secondMax = grid[i][j];\\n            }\\n            \\n            if (grid[j][i] > thirdMax) {\\n                thirdMax = grid[j][i];\\n            }\\n            \\n            if (grid[i][j] > 0) {\\n                first++;\\n            }\\n        }\\n        \\n        area += first + secondMax + thirdMax;\\n        first = 0;\\n        secondMax = 0;\\n        thirdMax = 0;\\n    }\\n    \\n    return area;\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n    let area = 0;\\n    \\n    // first projection is num of cells > 0 in grid\\n    let first = 0;\\n    // second projection is sum of max of rows\\n    let secondMax = 0;\\n    // third projection is sum of max of columns\\n    let thirdMax = 0;\\n    \\n    for (let i = 0; i < grid.length; i++) {        \\n        for(let j = 0; j < grid.length; j++) {\\n            if (grid[i][j] > secondMax) {\\n                secondMax = grid[i][j];\\n            }\\n            \\n            if (grid[j][i] > thirdMax) {\\n                thirdMax = grid[j][i];\\n            }\\n            \\n            if (grid[i][j] > 0) {\\n                first++;\\n            }\\n        }\\n        \\n        area += first + secondMax + thirdMax;\\n        first = 0;\\n        secondMax = 0;\\n        thirdMax = 0;\\n    }\\n    \\n    return area;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 301608,
                "title": "java-how-if-statement-can-be-faster-than-math-min",
                "content": "A version of the 1ms Java solution is at the bottom for reference.\\n\\nI was confused as to why the lines `if (grid[x][y] > 0) totalArea++;` and `totalArea += Math.min(1, grid[x][y]);` produced reliably different benchmarks from leetcode. The if statement always came back as 1ms, and the Math.min() always came back as 2ms. I spend a lot of time on GPUs ... I admittedly assumed Math.min() would be faster.\\n\\nBranch prediction appears to be the answer as to why the if statement happens to be superior here. So I thought I\\'d write here and share this SO that helped me to understand how: https://stackoverflow.com/questions/22752198/java-math-min-max-performance\\n\\n```java\\npublic int projectionArea(int[][] grid) {\\n\\tint size = grid.length;\\n\\tint totalArea = 0;\\n\\n\\tfor (int x = 0; x < size; ++x) {\\n\\t\\tint xMax = 0;\\n\\t\\tint yMax = 0;\\n\\t\\tfor (int y = 0; y < size; ++y) {\\n\\t\\t\\txMax = Math.max(xMax, grid[x][y]);\\n\\t\\t\\tyMax = Math.max(yMax, grid[y][x]);\\n\\t\\t\\tif (grid[x][y] > 0) totalArea++; // faster than Math.min() below\\n\\t\\t\\t//totalArea += Math.min(1, grid[x][y]);\\n\\t\\t}\\n\\t\\ttotalArea += xMax + yMax;\\n\\t}\\n\\n\\treturn totalArea;\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\npublic int projectionArea(int[][] grid) {\\n\\tint size = grid.length;\\n\\tint totalArea = 0;\\n\\n\\tfor (int x = 0; x < size; ++x) {\\n\\t\\tint xMax = 0;\\n\\t\\tint yMax = 0;\\n\\t\\tfor (int y = 0; y < size; ++y) {\\n\\t\\t\\txMax = Math.max(xMax, grid[x][y]);\\n\\t\\t\\tyMax = Math.max(yMax, grid[y][x]);\\n\\t\\t\\tif (grid[x][y] > 0) totalArea++; // faster than Math.min() below\\n\\t\\t\\t//totalArea += Math.min(1, grid[x][y]);\\n\\t\\t}\\n\\t\\ttotalArea += xMax + yMax;\\n\\t}\\n\\n\\treturn totalArea;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 295047,
                "title": "python3-one-line-solution",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:        \\n        # Z = len(grid)**2-sum(g.count(0) for g in grid)\\n        # Y = sum(max(g) for g in grid)\\n        # X = sum(max(g[i] for g in grid) for i in range(len(grid)))\\n        return len(grid)**2-sum(g.count(0) for g in grid) + sum(max(g) for g in grid) + sum(max(g[i] for g in grid) for i in range(len(grid)))",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:        \\n        # Z = len(grid)**2-sum(g.count(0) for g in grid)\\n        # Y = sum(max(g) for g in grid)\\n        # X = sum(max(g[i] for g in grid) for i in range(len(grid)))\\n        return len(grid)**2-sum(g.count(0) for g in grid) + sum(max(g) for g in grid) + sum(max(g[i] for g in grid) for i in range(len(grid)))",
                "codeTag": "Java"
            },
            {
                "id": 284319,
                "title": "python3-one-line-solution",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        return sum([len([i for i in j if i>0]) for j in grid])+sum([max(i) for i in grid])+sum([max([j[i] for j in grid]) for i in range(len(grid[0]))])\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        return sum([len([i for i in j if i>0]) for j in grid])+sum([max(i) for i in grid])+sum([max([j[i] for j in grid]) for i in range(len(grid[0]))])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 226226,
                "title": "python3-solution",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n        x = sum(max(v) for v in grid)\\n        y = sum(max(v) for v in zip(*grid))\\n        z = sum(1 for v in grid for e in v if e != 0)\\n        return x + y + z",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n        x = sum(max(v) for v in grid)\\n        y = sum(max(v) for v in zip(*grid))\\n        z = sum(1 for v in grid for e in v if e != 0)\\n        return x + y + z",
                "codeTag": "Java"
            },
            {
                "id": 214819,
                "title": "java-solution",
                "content": "Something to keep in mind with this problem is that only the max heights matter for each row and column.\\nIf we shine a light perpendicular to the X-axis only the shadows of the tallest cubes will cast shadows.\\nSimilarly, if we shine a light perpendicular to the Y-axis only the tallest cubes cast shadows.\\nLastly, the XY direction is the area of the grid minus the number of buildings with zero height.\\n```\\n  public int projectionArea(int[][] grid) {\\n    int[] rowMaxes = new int[grid.length];\\n    int[] colMaxes = new int[grid[0].length];\\n    int sum = 0;\\n    \\n    for(int i = 0; i < grid.length; i++){\\n      for(int j = 0; j < grid[i].length; j++){\\n        if(grid[i][j] > rowMaxes[i])\\n          rowMaxes[i] = grid[i][j]; // Y-Z\\n        if(grid[i][j] > colMaxes[j]){\\n          colMaxes[j] = grid[i][j]; // used for X-Z\\n        }\\n\\t\\t// Used for X-Y only\\n        if(grid[i][j] != 0)\\n          sum += 1;\\n      }\\n    }\\n    \\n    for(int val : rowMaxes){\\n      sum += val;\\n    }\\n    \\n    for(int val : colMaxes){\\n      sum += val;\\n    }\\n    return sum;\\n  }",
                "solutionTags": [],
                "code": "Something to keep in mind with this problem is that only the max heights matter for each row and column.\\nIf we shine a light perpendicular to the X-axis only the shadows of the tallest cubes will cast shadows.\\nSimilarly, if we shine a light perpendicular to the Y-axis only the tallest cubes cast shadows.\\nLastly, the XY direction is the area of the grid minus the number of buildings with zero height.\\n```\\n  public int projectionArea(int[][] grid) {\\n    int[] rowMaxes = new int[grid.length];\\n    int[] colMaxes = new int[grid[0].length];\\n    int sum = 0;\\n    \\n    for(int i = 0; i < grid.length; i++){\\n      for(int j = 0; j < grid[i].length; j++){\\n        if(grid[i][j] > rowMaxes[i])\\n          rowMaxes[i] = grid[i][j]; // Y-Z\\n        if(grid[i][j] > colMaxes[j]){\\n          colMaxes[j] = grid[i][j]; // used for X-Z\\n        }\\n\\t\\t// Used for X-Y only\\n        if(grid[i][j] != 0)\\n          sum += 1;\\n      }\\n    }\\n    \\n    for(int val : rowMaxes){\\n      sum += val;\\n    }\\n    \\n    for(int val : colMaxes){\\n      sum += val;\\n    }\\n    return sum;\\n  }",
                "codeTag": "Unknown"
            },
            {
                "id": 203077,
                "title": "python-solution-and-problem-explanation",
                "content": "Problem is poorly expressed by OP, but I\\'ll try to dumb it down:\\n\\nBasically, you\\'re given a matrix with numbers that represents the Z-axis value of that particular position in the grid:\\n\\nFor example: \\ngrid[1][0] = 2   means at position 1,0 there exist a pillar with a height of 2\\n\\nSo basically the Matrix is representation of a structure with variables heights (imagine a castle, or something).\\n\\nWhat the OP want is that you find the total area when you are looking from a birds-eye view (xz plane), from a front view, (xz plane), and a lateral view (yz plane).  \\n\\nHint: The trick is when you are viewing from the front, and the side, only the greatest height matters\\nHint: When viewing from birds-eye view, if the height is zero, would there actually be a structure?\\n\\n\\n```\\nclass Solution:\\n    def projectionArea(self, grid):\\n        xz_greatest_heights = [max(i) for i in zip(*grid)]\\n        yz_greatest_heights = [max(i) for i in grid]\\n        \\n        xy_area = 0\\n        \\n        for row in grid:\\n            for col in row:\\n                if col:\\n                    xy_area += 1\\n        \\n        \\n        return xy_area + sum(xz_greatest_heights) + sum(yz_greatest_heights)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid):\\n        xz_greatest_heights = [max(i) for i in zip(*grid)]\\n        yz_greatest_heights = [max(i) for i in grid]\\n        \\n        xy_area = 0\\n        \\n        for row in grid:\\n            for col in row:\\n                if col:\\n                    xy_area += 1\\n        \\n        \\n        return xy_area + sum(xz_greatest_heights) + sum(yz_greatest_heights)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 187280,
                "title": "javascript-solution-56ms",
                "content": "```\nvar projectionArea = function(grid) {\n    let total =0;\n    for(let i=0;i<grid.length; i++){\n        let xTall = 0;\n        let yTall = 0;\n        for(let j = 0; j<grid[i].length;j++){\n            if(grid[i][j]){\n               total++;\n             }\n            if(xTall<grid[i][j]){\n                xTall=grid[i][j];\n            }\n            if(yTall<grid[j][i]){\n                yTall = grid[j][i];\n            }\n        }\n        total+=xTall+yTall;\n    }\n    return total;\n};\n```",
                "solutionTags": [],
                "code": "```\nvar projectionArea = function(grid) {\n    let total =0;\n    for(let i=0;i<grid.length; i++){\n        let xTall = 0;\n        let yTall = 0;\n        for(let j = 0; j<grid[i].length;j++){\n            if(grid[i][j]){\n               total++;\n             }\n            if(xTall<grid[i][j]){\n                xTall=grid[i][j];\n            }\n            if(yTall<grid[j][i]){\n                yTall = grid[j][i];\n            }\n        }\n        total+=xTall+yTall;\n    }\n    return total;\n};\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 164636,
                "title": "easy-peasy",
                "content": "    int projectionArea(vector<vector<int>>& grid) {\\n        \\n        int top=0,front=0,side=0;\\n        int m=grid.size();\\n        int n=grid[0].size();\\n        for(int i=0;i<m;i++)\\n        {\\n            int mx=0;\\n            for(auto j:grid[i])\\n                mx=max(mx,j);\\n            front+=mx;\\n        }\\n        \\n        for(int j=0;j<n;j++)\\n        {\\n            int mx=0;\\n            for(int i=0;i<m;i++)\\n            {  mx=max(mx,grid[i][j]);\\n               if(grid[i][j]!=0)\\n                   top++;\\n            }\\n            side+=mx;\\n        }\\n        \\n        return top+front+side;\\n                \\n    }",
                "solutionTags": [],
                "code": "    int projectionArea(vector<vector<int>>& grid) {\\n        \\n        int top=0,front=0,side=0;\\n        int m=grid.size();\\n        int n=grid[0].size();\\n        for(int i=0;i<m;i++)\\n        {\\n            int mx=0;\\n            for(auto j:grid[i])\\n                mx=max(mx,j);\\n            front+=mx;\\n        }\\n        \\n        for(int j=0;j<n;j++)\\n        {\\n            int mx=0;\\n            for(int i=0;i<m;i++)\\n            {  mx=max(mx,grid[i][j]);\\n               if(grid[i][j]!=0)\\n                   top++;\\n            }\\n            side+=mx;\\n        }\\n        \\n        return top+front+side;\\n                \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 157540,
                "title": "javascript-56-ms-simple-solution-almost-o-n",
                "content": "Top - simply what is more then 0\\nFront - max from i loop\\nSide - max from j loop\\n```\\nvar projectionArea = function(grid) {\\n    var top = 0;\\n    var len = grid.length;\\n    var front = Array(len).fill(0);\\n    var side = Array(len).fill(0);\\n    for (var i = 0; i < len; i++) {\\n        for (var j = 0; j < len; j++) {\\n            front[i] = Math.max(front[i], grid[i][j]);\\n            side[j] = Math.max(side[j], grid[i][j]);\\n            if (grid[i][j] > 0) {\\n                top++;\\n            }\\n        }\\n    }\\n    \\n    var frontSum = front.reduce((sum, current) => sum + current);\\n    var sideSum = side.reduce((sum, current) => sum + current);\\n    \\n    return top + frontSum + sideSum;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar projectionArea = function(grid) {\\n    var top = 0;\\n    var len = grid.length;\\n    var front = Array(len).fill(0);\\n    var side = Array(len).fill(0);\\n    for (var i = 0; i < len; i++) {\\n        for (var j = 0; j < len; j++) {\\n            front[i] = Math.max(front[i], grid[i][j]);\\n            side[j] = Math.max(side[j], grid[i][j]);\\n            if (grid[i][j] > 0) {\\n                top++;\\n            }\\n        }\\n    }\\n    \\n    var frontSum = front.reduce((sum, current) => sum + current);\\n    var sideSum = side.reduce((sum, current) => sum + current);\\n    \\n    return top + frontSum + sideSum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 156722,
                "title": "easy-to-understand-python-explained",
                "content": "```\\ndef projectionArea(self, grid):\\n    ans = 0\\n    r, c = len(grid), len(grid[0])\\n    # count number of non-zero elements\\n    ans += sum([grid[i][j] != 0 for j in range(c) for i in range(r)])\\n\\n    # get max of each row\\n    for i in range(r):\\n        ans += max(grid[i])\\n\\n    # get max of each col\\n    grid = list(map(list, zip(*grid)))\\n    for i in range(c):\\n        ans += max(grid[i])\\n\\n    return ans\\n```",
                "solutionTags": [],
                "code": "```\\ndef projectionArea(self, grid):\\n    ans = 0\\n    r, c = len(grid), len(grid[0])\\n    # count number of non-zero elements\\n    ans += sum([grid[i][j] != 0 for j in range(c) for i in range(r)])\\n\\n    # get max of each row\\n    for i in range(r):\\n        ans += max(grid[i])\\n\\n    # get max of each col\\n    grid = list(map(list, zip(*grid)))\\n    for i in range(c):\\n        ans += max(grid[i])\\n\\n    return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4067536,
                "title": "python-bruteforce-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        gridlen=len(grid)\\n        ans =0\\n        for i in range(gridlen):\\n            gridrow=0\\n            gridcol=0\\n            for j in range(gridlen):\\n                if grid[i][j] > 0:\\n                    ans +=1\\n                gridrow= max(gridrow,grid[i][j])\\n                gridcol=max(gridcol,grid[j][i])\\n            ans +=gridrow+gridcol\\n        return ans\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        gridlen=len(grid)\\n        ans =0\\n        for i in range(gridlen):\\n            gridrow=0\\n            gridcol=0\\n            for j in range(gridlen):\\n                if grid[i][j] > 0:\\n                    ans +=1\\n                gridrow= max(gridrow,grid[i][j])\\n                gridcol=max(gridcol,grid[j][i])\\n            ans +=gridrow+gridcol\\n        return ans\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4066943,
                "title": "easiest-solution",
                "content": "\\n\\n# Code\\n```java []\\nclass Solution {\\n    public int projectionArea(int[][] grid) \\n    {\\n        int x=0,y=0,z=0;\\n\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            for(int j=0;j<grid[0].length;j++)\\n            {\\n                if(grid[i][j]!=0) x++;\\n            }\\n        }\\n\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            int max=grid[i][0];\\n            for(int j=0;j<grid[i].length;j++)\\n            {\\n                if(grid[i][j]>=max) max=grid[i][j];\\n            }\\n            y+=max;\\n        }\\n     \\n         for(int i=0;i<grid.length;i++)\\n        {\\n             int max=grid[0][i];\\n             for(int j=0;j<grid[i].length;j++)\\n             {\\n                 if(grid[j][i]>=max) max=grid[j][i];\\n             }\\n             z+=max;\\n        }\\n\\n        return x+y+z;\\n        \\n    }\\n}\\n```\\n```c++ []\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        area = 0\\n        \\n        for x in grid:\\n            maxx = 0\\n            for y in x:\\n                if y:\\n                    maxx = max(y,maxx)\\n                    area += 1\\n            area += maxx\\n        \\n        for j in range(len(grid[0])):\\n            area += max(grid[i][j] for i in range(len(grid)))\\n\\n        return area\\n```",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java []\\nclass Solution {\\n    public int projectionArea(int[][] grid) \\n    {\\n        int x=0,y=0,z=0;\\n\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            for(int j=0;j<grid[0].length;j++)\\n            {\\n                if(grid[i][j]!=0) x++;\\n            }\\n        }\\n\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            int max=grid[i][0];\\n            for(int j=0;j<grid[i].length;j++)\\n            {\\n                if(grid[i][j]>=max) max=grid[i][j];\\n            }\\n            y+=max;\\n        }\\n     \\n         for(int i=0;i<grid.length;i++)\\n        {\\n             int max=grid[0][i];\\n             for(int j=0;j<grid[i].length;j++)\\n             {\\n                 if(grid[j][i]>=max) max=grid[j][i];\\n             }\\n             z+=max;\\n        }\\n\\n        return x+y+z;\\n        \\n    }\\n}\\n```\n```c++ []\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        area = 0\\n        \\n        for x in grid:\\n            maxx = 0\\n            for y in x:\\n                if y:\\n                    maxx = max(y,maxx)\\n                    area += 1\\n            area += maxx\\n        \\n        for j in range(len(grid[0])):\\n            area += max(grid[i][j] for i in range(len(grid)))\\n\\n        return area\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4053562,
                "title": "sum-of-tree-functions",
                "content": "# Code\\n```\\npublic class Solution\\n{\\n    public int ProjectionArea(int[][] grid)\\n    {\\n        return totalXY(grid) + totalXZ(grid) + totalYZ(grid);\\n    }\\n\\n    public int totalXY(int[][] grid)\\n    {\\n        var count = 0;\\n        foreach (var arr in grid)\\n        {\\n            foreach (var num in arr)\\n            {\\n                if (num != 0)\\n                {\\n                    count++;\\n                }\\n            }\\n        }\\n\\n        return count;\\n    }\\n\\n    public int totalXZ(int[][] grid)\\n    {\\n        var sum = 0;\\n\\n        foreach (var arr in grid)\\n        {\\n            sum += arr.Max();\\n        }\\n\\n        return sum;\\n    }\\n\\n    public int totalYZ(int[][] grid)\\n    {\\n        var sum = 0;\\n\\n        for (var i = 0; i < grid.Length; i++)\\n        {\\n            var max = 0;\\n\\n            for (var j = 0; j < grid.Length; j++)\\n            {\\n                if (max < grid[j][i])\\n                {\\n                    max = grid[j][i];\\n                }\\n            }\\n\\n            sum += max;\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n{\\n    public int ProjectionArea(int[][] grid)\\n    {\\n        return totalXY(grid) + totalXZ(grid) + totalYZ(grid);\\n    }\\n\\n    public int totalXY(int[][] grid)\\n    {\\n        var count = 0;\\n        foreach (var arr in grid)\\n        {\\n            foreach (var num in arr)\\n            {\\n                if (num != 0)\\n                {\\n                    count++;\\n                }\\n            }\\n        }\\n\\n        return count;\\n    }\\n\\n    public int totalXZ(int[][] grid)\\n    {\\n        var sum = 0;\\n\\n        foreach (var arr in grid)\\n        {\\n            sum += arr.Max();\\n        }\\n\\n        return sum;\\n    }\\n\\n    public int totalYZ(int[][] grid)\\n    {\\n        var sum = 0;\\n\\n        for (var i = 0; i < grid.Length; i++)\\n        {\\n            var max = 0;\\n\\n            for (var j = 0; j < grid.Length; j++)\\n            {\\n                if (max < grid[j][i])\\n                {\\n                    max = grid[j][i];\\n                }\\n            }\\n\\n            sum += max;\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4049192,
                "title": "fastest-c-easy-to-understand-all-test-cases-passed",
                "content": "\\n# Complexity\\n- Time complexity: O(m*n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n=grid.size();\\n        int m=grid[0].size();\\n        int ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<m;j++)\\n            if(grid[i][j])\\n            ans++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            int row=INT_MIN;\\n            for(int j=0;j<m;j++)\\n            {\\n                if(grid[i][j]>row)\\n                row=grid[i][j];\\n            }\\n            ans+=row;\\n        }\\n        for(int j=0;j<m;j++)\\n        {\\n            int col=INT_MIN;\\n            for(int i=0;i<n;i++)\\n            if(grid[i][j]>col)\\n            col=grid[i][j];\\n            ans+=col;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n=grid.size();\\n        int m=grid[0].size();\\n        int ans=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<m;j++)\\n            if(grid[i][j])\\n            ans++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            int row=INT_MIN;\\n            for(int j=0;j<m;j++)\\n            {\\n                if(grid[i][j]>row)\\n                row=grid[i][j];\\n            }\\n            ans+=row;\\n        }\\n        for(int j=0;j<m;j++)\\n        {\\n            int col=INT_MIN;\\n            for(int i=0;i<n;i++)\\n            if(grid[i][j]>col)\\n            col=grid[i][j];\\n            ans+=col;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4037117,
                "title": "python-two-one-liners",
                "content": "\\n# Complexity\\n- Time complexity: Both solutions are $$O(n^2)$$ which is the time needed to iterate over the matrix anyways.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: Both are technically $$O(n)$$ due to the unpacking in the `zip(*grid)` call, but this is probably optimized by the Python interpreter as it is qiute a common approach to iterate over a matrix\\'s columns.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        return sum(map(bool, chain.from_iterable(grid))) + sum(map(max, grid)) + sum(map(max, zip(*grid)))\\n```\\n\\nOr, if you prefer list comprehension:\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        sum(x != 0 for row in grid for x in row) + sum(map(max, grid)) + sum(map(max, zip(*grid)))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        return sum(map(bool, chain.from_iterable(grid))) + sum(map(max, grid)) + sum(map(max, zip(*grid)))\\n```\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        sum(x != 0 for row in grid for x in row) + sum(map(max, grid)) + sum(map(max, zip(*grid)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4034409,
                "title": "84-beats-in-java",
                "content": "# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        \\n        int n  = grid.length;\\n\\n        int top = 0;\\n        int left = 0;\\n        int right = 0;\\n        int max1 = 0;\\n        int max2 = 0;\\n\\n        for(int i = 0; i<n; i++){\\n\\n            for(int j = 0; j<n; j++){\\n                if(grid[i][j]>0) top++;\\n                max1= Math.max(grid[i][j],max1);\\n                max2 = Math.max(grid[j][i],max2);\\n            }\\n            left+=max1;\\n            right+=max2;\\n            max1 = 0;\\n            max2 = 0;\\n        \\n        }\\n\\n\\n        return left+right+top;\\n\\n\\n\\n\\n\\n\\n\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        \\n        int n  = grid.length;\\n\\n        int top = 0;\\n        int left = 0;\\n        int right = 0;\\n        int max1 = 0;\\n        int max2 = 0;\\n\\n        for(int i = 0; i<n; i++){\\n\\n            for(int j = 0; j<n; j++){\\n                if(grid[i][j]>0) top++;\\n                max1= Math.max(grid[i][j],max1);\\n                max2 = Math.max(grid[j][i],max2);\\n            }\\n            left+=max1;\\n            right+=max2;\\n            max1 = 0;\\n            max2 = 0;\\n        \\n        }\\n\\n\\n        return left+right+top;\\n\\n\\n\\n\\n\\n\\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4021945,
                "title": "masum-code-c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int temp=grid.size();\\n        int ans=0;\\n        for(int i=0;i<temp;i++)\\n        {\\n            for(int j=0;j<temp;j++)\\n            {\\n                if(grid[i][j]!=0)\\n                {\\n                    ans++;\\n                }\\n            }\\n        }\\n\\n        for(int i=0;i<temp;i++)\\n        {\\n            int maxi=-1e9;;\\n            for(int j=0;j<temp;j++)\\n            {\\n                maxi=max(maxi,grid[i][j]);\\n\\n            }\\n            ans+=maxi;\\n            maxi=-1e9;\\n            for(int j=0;j<temp;j++)\\n            {\\n                maxi=max(maxi,grid[j][i]);\\n            }\\n            ans+=maxi;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int temp=grid.size();\\n        int ans=0;\\n        for(int i=0;i<temp;i++)\\n        {\\n            for(int j=0;j<temp;j++)\\n            {\\n                if(grid[i][j]!=0)\\n                {\\n                    ans++;\\n                }\\n            }\\n        }\\n\\n        for(int i=0;i<temp;i++)\\n        {\\n            int maxi=-1e9;;\\n            for(int j=0;j<temp;j++)\\n            {\\n                maxi=max(maxi,grid[i][j]);\\n\\n            }\\n            ans+=maxi;\\n            maxi=-1e9;\\n            for(int j=0;j<temp;j++)\\n            {\\n                maxi=max(maxi,grid[j][i]);\\n            }\\n            ans+=maxi;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007278,
                "title": "c-easiest-method-with-one-loop",
                "content": "# Intuition\\nSimplest you can find.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nProcess rows and columns in the same loop.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int ans = 0, x = 0, y = 0;\\n        for (int i = 0; i < n; i++){\\n            for (int j = 0; j < n; j++){\\n                if (grid[i][j] != 0) ans++;\\n                if (grid[i][j] > x) x = grid[i][j];\\n                if (grid[j][i] > y) y = grid[j][i];\\n            }\\n            ans += x + y;\\n            x = 0;\\n            y = 0;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int ans = 0, x = 0, y = 0;\\n        for (int i = 0; i < n; i++){\\n            for (int j = 0; j < n; j++){\\n                if (grid[i][j] != 0) ans++;\\n                if (grid[i][j] > x) x = grid[i][j];\\n                if (grid[j][i] > y) y = grid[j][i];\\n            }\\n            ans += x + y;\\n            x = 0;\\n            y = 0;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005896,
                "title": "python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n\\n        x_c = 0\\n        y_c = 0\\n        z_c = 0\\n\\n\\n        for r in grid: #get all count \\n            for v in r:\\n                if v > 0:\\n                    x_c += 1\\n\\n        for r in grid: #get max of rows\\n            y_c += max(r)\\n\\n        for r in zip(*grid):\\n            z_c += max(r)\\n        \\n\\n        return x_c + y_c + z_c\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n\\n        x_c = 0\\n        y_c = 0\\n        z_c = 0\\n\\n\\n        for r in grid: #get all count \\n            for v in r:\\n                if v > 0:\\n                    x_c += 1\\n\\n        for r in grid: #get max of rows\\n            y_c += max(r)\\n\\n        for r in zip(*grid):\\n            z_c += max(r)\\n        \\n\\n        return x_c + y_c + z_c\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3989648,
                "title": "c-time-o-n-space-o-1",
                "content": "```\\npublic class Solution {\\n    public int ProjectionArea(int[][] grid) {\\n        var area = grid.Length * grid.Length;\\n        for(int i = 0; i < grid.Length; i++)\\n        {\\n          var maxR = 0;\\n          var maxC = 0;\\n          for(int j = 0; j < grid.Length; j++)\\n          {\\n            if(grid[i][j] == 0) area--;\\n            maxR = Math.Max(maxR, grid[j][i]);\\n            maxC = Math.Max(maxC, grid[i][j]);\\n          }\\n          area += maxR + maxC;\\n        }\\n        return area;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int ProjectionArea(int[][] grid) {\\n        var area = grid.Length * grid.Length;\\n        for(int i = 0; i < grid.Length; i++)\\n        {\\n          var maxR = 0;\\n          var maxC = 0;\\n          for(int j = 0; j < grid.Length; j++)\\n          {\\n            if(grid[i][j] == 0) area--;\\n            maxR = Math.Max(maxR, grid[j][i]);\\n            maxC = Math.Max(maxC, grid[i][j]);\\n          }\\n          area += maxR + maxC;\\n        }\\n        return area;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3949024,
                "title": "beats-100-ruby-easy-to-understand-883-projection-area-of-3d-shapes",
                "content": "# Code\\n```\\n# @param {Integer[][]} grid\\n# @return {Integer}\\ndef projection_area(grid)\\n    xy = grid.flatten.select{|x| x > 0}.size\\n    xz = grid.map{|x| x.max}.sum\\n    yz = grid.transpose.map{|x| x.max}.sum\\n    xy+xz+yz\\nend\\n```",
                "solutionTags": [
                    "Ruby",
                    "Array",
                    "Math",
                    "Geometry"
                ],
                "code": "```\\n# @param {Integer[][]} grid\\n# @return {Integer}\\ndef projection_area(grid)\\n    xy = grid.flatten.select{|x| x > 0}.size\\n    xz = grid.map{|x| x.max}.sum\\n    yz = grid.transpose.map{|x| x.max}.sum\\n    xy+xz+yz\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3909383,
                "title": "a-lot-of-loops",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        [\\n            [1,2],\\n            [3,4]\\n        ]\\n        todown = 0\\n        for row in grid:\\n            for el in row:\\n                if el!=0:\\n                    todown+=1\\n        toright = 0\\n        for row in grid:\\n            toright += max(row)\\n        tostraight = 0\\n        for j in range(len(grid[0])):\\n            mx = 0\\n            for i in range(len(grid)):\\n                mx=max(grid[i][j],mx)\\n            tostraight += mx\\n        return todown+toright+tostraight\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        [\\n            [1,2],\\n            [3,4]\\n        ]\\n        todown = 0\\n        for row in grid:\\n            for el in row:\\n                if el!=0:\\n                    todown+=1\\n        toright = 0\\n        for row in grid:\\n            toright += max(row)\\n        tostraight = 0\\n        for j in range(len(grid[0])):\\n            mx = 0\\n            for i in range(len(grid)):\\n                mx=max(grid[i][j],mx)\\n            tostraight += mx\\n        return todown+toright+tostraight\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3870897,
                "title": "sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = len(grid)\\n        xy = 0\\n        yz = 0\\n        zx = 0\\n        for i in range(n):\\n            max_row = 0\\n            max_col = 0\\n            for j in range(n):\\n                if grid[i][j] > 0:\\n                    xy += 1\\n                max_row = max(max_row, grid[i][j])\\n                max_col = max(max_col, grid[j][i])\\n            yz += max_row\\n            zx += max_col\\n\\n        return xy + yz + zx\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = len(grid)\\n        xy = 0\\n        yz = 0\\n        zx = 0\\n        for i in range(n):\\n            max_row = 0\\n            max_col = 0\\n            for j in range(n):\\n                if grid[i][j] > 0:\\n                    xy += 1\\n                max_row = max(max_row, grid[i][j])\\n                max_col = max(max_col, grid[j][i])\\n            yz += max_row\\n            zx += max_col\\n\\n        return xy + yz + zx\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3845114,
                "title": "easy-cpp-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int sum = 0, sz=grid.size(), cnt=0;\\n        // rowm = row Wise Max Values && \\n        // colm = column Wise Max Values\\n        vector<int> rowm, colm;\\n        for(int i=0; i<sz; i++){\\n            for(int j=0; j<grid[i].size(); j++){\\n\\n                if(grid[i][j] > 0) cnt++;\\n\\n                if(rowm.size() <= j)\\n                   rowm.push_back(grid[i][j]);\\n                else\\n                    rowm[j] = max(rowm[j], grid[i][j]);\\n\\n                if(colm.size() <= i)\\n                    colm.push_back(grid[i][j]);\\n                else\\n                    colm[i] = max(colm[i], grid[i][j]);\\n            }\\n        }\\n\\n        for(int i : rowm)\\n            cnt += i;\\n        for(int i : colm)\\n            cnt += i;\\n\\n        return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int sum = 0, sz=grid.size(), cnt=0;\\n        // rowm = row Wise Max Values && \\n        // colm = column Wise Max Values\\n        vector<int> rowm, colm;\\n        for(int i=0; i<sz; i++){\\n            for(int j=0; j<grid[i].size(); j++){\\n\\n                if(grid[i][j] > 0) cnt++;\\n\\n                if(rowm.size() <= j)\\n                   rowm.push_back(grid[i][j]);\\n                else\\n                    rowm[j] = max(rowm[j], grid[i][j]);\\n\\n                if(colm.size() <= i)\\n                    colm.push_back(grid[i][j]);\\n                else\\n                    colm[i] = max(colm[i], grid[i][j]);\\n            }\\n        }\\n\\n        for(int i : rowm)\\n            cnt += i;\\n        for(int i : colm)\\n            cnt += i;\\n\\n        return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3844645,
                "title": "the-fastest-in-dart",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n- Space complexity:\\nO(n)\\n# Code\\n```\\nclass Solution {\\n  int projectionArea(List<List<int>> grid) {\\n  int area = 0;\\n  int n = grid.length;\\n  \\n  List<int> rowMax = List.filled(n, 0); // Maximum values for each row\\n  List<int> colMax = List.filled(n, 0); // Maximum values for each column\\n\\n  for (int i = 0; i < n; i++) {\\n    for (int j = 0; j < n; j++) {\\n      int value = grid[i][j]; // Current value in the grid\\n\\n      if (value > 0) {\\n        area++; // zx-plane projection\\n      }\\n\\n      rowMax[i] = value > rowMax[i] ? value : rowMax[i]; // Update rowMax\\n      colMax[j] = value > colMax[j] ? value : colMax[j]; // Update colMax\\n    }\\n  }\\n\\n  area += rowMax.reduce((a, b) => a + b); // Sum of maximum values in rows\\n  area += colMax.reduce((a, b) => a + b); // Sum of maximum values in columns\\n  \\n  return area;\\n}\\n\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int projectionArea(List<List<int>> grid) {\\n  int area = 0;\\n  int n = grid.length;\\n  \\n  List<int> rowMax = List.filled(n, 0); // Maximum values for each row\\n  List<int> colMax = List.filled(n, 0); // Maximum values for each column\\n\\n  for (int i = 0; i < n; i++) {\\n    for (int j = 0; j < n; j++) {\\n      int value = grid[i][j]; // Current value in the grid\\n\\n      if (value > 0) {\\n        area++; // zx-plane projection\\n      }\\n\\n      rowMax[i] = value > rowMax[i] ? value : rowMax[i]; // Update rowMax\\n      colMax[j] = value > colMax[j] ? value : colMax[j]; // Update colMax\\n    }\\n  }\\n\\n  area += rowMax.reduce((a, b) => a + b); // Sum of maximum values in rows\\n  area += colMax.reduce((a, b) => a + b); // Sum of maximum values in columns\\n  \\n  return area;\\n}\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3828817,
                "title": "python3-simplest-approach-65ms-beats-100",
                "content": "![image](https://assets.leetcode.com/users/images/f073a91b-41c7-4147-a448-ba11955f6036_1690547961.407219.png)\\n\\n```\\n\"\"\"\\nWhat does each projection mean?\\n\\n- The xz projection is the view from the y-axis (one side).\\n\\n- The yz projection is the view from the x-axis (other side).\\n\\n- The xy projection is the view fromthe z-axis (top-down).\\n\"\"\"\\n\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        # Declare variables to store the areas for each projection.\\n        area_xz = area_xy = 0\\n        heights_yz = [0 for _ in grid[0]] # List to store max height of each column.\\n        \\n        # Calculate the areas for each projection.\\n        for r in range(len(grid)):\\n            # Add the max height of each row.\\n            area_xz += max(grid[r])\\n            for c in range(len(grid[0])):\\n                # Update the max height of each column.\\n                heights_yz[c] = max(heights_yz[c], grid[r][c])\\n                \\n                # Tower exists at this coordinate.\\n                if grid[r][c] > 0:\\n                    # Add 1 to the area of the top-down projection.\\n                    area_xy += 1\\n                    \\n        # Return the sum of the areas for each projection.\\n        return area_xz + sum(heights_yz) + area_xy\\n```",
                "solutionTags": [],
                "code": "```\\n\"\"\"\\nWhat does each projection mean?\\n\\n- The xz projection is the view from the y-axis (one side).\\n\\n- The yz projection is the view from the x-axis (other side).\\n\\n- The xy projection is the view fromthe z-axis (top-down).\\n\"\"\"\\n\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        # Declare variables to store the areas for each projection.\\n        area_xz = area_xy = 0\\n        heights_yz = [0 for _ in grid[0]] # List to store max height of each column.\\n        \\n        # Calculate the areas for each projection.\\n        for r in range(len(grid)):\\n            # Add the max height of each row.\\n            area_xz += max(grid[r])\\n            for c in range(len(grid[0])):\\n                # Update the max height of each column.\\n                heights_yz[c] = max(heights_yz[c], grid[r][c])\\n                \\n                # Tower exists at this coordinate.\\n                if grid[r][c] > 0:\\n                    # Add 1 to the area of the top-down projection.\\n                    area_xy += 1\\n                    \\n        # Return the sum of the areas for each projection.\\n        return area_xz + sum(heights_yz) + area_xy\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3800739,
                "title": "easy-go-solution",
                "content": "```\\nfunc projectionArea(grid [][]int) int {\\n        m, n := len(grid), len(grid[0])\\n        var xyAxis, xzAxis, yzAxis int\\n        maximums := make([]int, n, n)\\n\\n        for i := 0; i < m; i++ {\\n                nums := grid[i]\\n\\n                var max int\\n                for j := 0; j < n; j++ {\\n                        num := nums[j]\\n\\n                        if num > 0 {\\n                                xyAxis++\\n                        }\\n\\n                        if num > max {\\n                                max = num\\n                        }\\n\\n                        if num > maximums[j] {\\n                                maximums[j] = num\\n                        }\\n                }\\n\\n                xzAxis += max\\n        }\\n\\n        for i := 0; i < len(maximums); i++ {\\n                yzAxis += maximums[i]\\n        }\\n\\n        return xyAxis + xzAxis + yzAxis\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc projectionArea(grid [][]int) int {\\n        m, n := len(grid), len(grid[0])\\n        var xyAxis, xzAxis, yzAxis int\\n        maximums := make([]int, n, n)\\n\\n        for i := 0; i < m; i++ {\\n                nums := grid[i]\\n\\n                var max int\\n                for j := 0; j < n; j++ {\\n                        num := nums[j]\\n\\n                        if num > 0 {\\n                                xyAxis++\\n                        }\\n\\n                        if num > max {\\n                                max = num\\n                        }\\n\\n                        if num > maximums[j] {\\n                                maximums[j] = num\\n                        }\\n                }\\n\\n                xzAxis += max\\n        }\\n\\n        for i := 0; i < len(maximums); i++ {\\n                yzAxis += maximums[i]\\n        }\\n\\n        return xyAxis + xzAxis + yzAxis\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3800488,
                "title": "simple-solution-30-ms-beats-99-accepted",
                "content": "# Code\\n```\\nclass Solution:\\n    def projectionArea(self, x: List[List[int]]) -> int:\\n        s=len(x)*len(x[0])\\n        y=list(zip(*x))\\n        for i in x: s-=i.count(0)\\n        y=[list(y[i]) for i in range(len(y))]\\n        for i in x: s+=max(i)\\n        for i in y: s+=max(i)\\n        return s\\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Math",
                    "Geometry",
                    "Matrix"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, x: List[List[int]]) -> int:\\n        s=len(x)*len(x[0])\\n        y=list(zip(*x))\\n        for i in x: s-=i.count(0)\\n        y=[list(y[i]) for i in range(len(y))]\\n        for i in x: s+=max(i)\\n        for i in y: s+=max(i)\\n        return s\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3773346,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int xz=0,m=0, xy=0, yz=0;\\n        vector<int> temp(50,0);\\n        for(auto v:grid){\\n            for(int i=0;i<v.size();i++){\\n                m=max(m,v[i]);\\n                if(v[i])xy++;\\n                temp[i]=max(temp[i],v[i]);\\n            }\\n            xz=xz+m;m=0;\\n        }\\n        for(int n:temp){cout<<n<<endl;yz=yz+n;}\\n        //cout<<xy<<\" \"<<yz<<\" \"<<xz<<endl;\\n        return xy+yz+xz;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int xz=0,m=0, xy=0, yz=0;\\n        vector<int> temp(50,0);\\n        for(auto v:grid){\\n            for(int i=0;i<v.size();i++){\\n                m=max(m,v[i]);\\n                if(v[i])xy++;\\n                temp[i]=max(temp[i],v[i]);\\n            }\\n            xz=xz+m;m=0;\\n        }\\n        for(int n:temp){cout<<n<<endl;yz=yz+n;}\\n        //cout<<xy<<\" \"<<yz<<\" \"<<xz<<endl;\\n        return xy+yz+xz;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3763988,
                "title": "c",
                "content": "```cpp\\nint projectionArea( vector< vector< int >>& g ) {\\n  int x{};\\n  for ( size_t i{}, s{ g.size() }; i < s; ++i ) {\\n    int y{}, z{};\\n    for ( size_t j{}; j < s; ++j )\\n      x += g[ i ][ j ] > 0,\\n      y = max( y, g[ i ][ j ] ),\\n      z = max( z, g[ j ][ i ] );\\n    x += y + z;\\n  }\\n  return x;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Geometry",
                    "Matrix"
                ],
                "code": "```cpp\\nint projectionArea( vector< vector< int >>& g ) {\\n  int x{};\\n  for ( size_t i{}, s{ g.size() }; i < s; ++i ) {\\n    int y{}, z{};\\n    for ( size_t j{}; j < s; ++j )\\n      x += g[ i ][ j ] > 0,\\n      y = max( y, g[ i ][ j ] ),\\n      z = max( z, g[ j ][ i ] );\\n    x += y + z;\\n  }\\n  return x;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3751202,
                "title": "sum-of-row-max-col-max-and-no-of-elements-greater-then-zero",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        ans,r,c=0,len(grid),len(grid[0])\\n        for i in xrange(r):\\n            col,row=0,0\\n            for j in xrange(c):\\n                if grid[i][j]>0:ans+=1\\n                col,row=max(col,grid[j][i]),max(row,grid[i][j])\\n            ans+=col+row\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Array",
                    "Math",
                    "Geometry",
                    "Matrix"
                ],
                "code": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        ans,r,c=0,len(grid),len(grid[0])\\n        for i in xrange(r):\\n            col,row=0,0\\n            for j in xrange(c):\\n                if grid[i][j]>0:ans+=1\\n                col,row=max(col,grid[j][i]),max(row,grid[i][j])\\n            ans+=col+row\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3746690,
                "title": "beats-98-21-easy-javascript-solution-in-javascript-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n    let result = 0; // initialize result to zero\\n    for (let i = 0; i < grid.length; i++) { // loop through the every element of array grid\\n        let x = y = 0; // initialize x and y to zero\\n        for (let j = 0; j < grid.length; j++) { // loop through the every element of array grid\\n            x = Math.max(x, grid[i][j]); // find max from grid row\\n            y = Math.max(y, grid[j][i]); // find max from grid column\\n            if(grid[i][j] > 0) result++; // if grid[i][j] is greater than zero then increase result\\n        }\\n        result += x + y; // add x and y to result\\n    }\\n    return result; // return result\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n    let result = 0; // initialize result to zero\\n    for (let i = 0; i < grid.length; i++) { // loop through the every element of array grid\\n        let x = y = 0; // initialize x and y to zero\\n        for (let j = 0; j < grid.length; j++) { // loop through the every element of array grid\\n            x = Math.max(x, grid[i][j]); // find max from grid row\\n            y = Math.max(y, grid[j][i]); // find max from grid column\\n            if(grid[i][j] > 0) result++; // if grid[i][j] is greater than zero then increase result\\n        }\\n        result += x + y; // add x and y to result\\n    }\\n    return result; // return result\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3733236,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size();    \\n        int ans = 0;\\n        for (int i=0 ; i<n ; i++){\\n            for (int j=0 ; j<n ; j++){\\n                if (grid[i][j] != 0)\\n                    ans++;\\n            }\\n        }\\n\\n        for (int i=0 ; i<n ; i++){\\n            int maxi = -1e9;\\n            for (int j=0 ; j<n ; j++){\\n                maxi = max(maxi , grid[i][j]);\\n            }\\n            ans += maxi;\\n            maxi = -1e9;\\n            for (int j=0 ; j<n ; j++){\\n                maxi = max(maxi , grid[j][i]);\\n            }\\n            ans += maxi;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size();    \\n        int ans = 0;\\n        for (int i=0 ; i<n ; i++){\\n            for (int j=0 ; j<n ; j++){\\n                if (grid[i][j] != 0)\\n                    ans++;\\n            }\\n        }\\n\\n        for (int i=0 ; i<n ; i++){\\n            int maxi = -1e9;\\n            for (int j=0 ; j<n ; j++){\\n                maxi = max(maxi , grid[i][j]);\\n            }\\n            ans += maxi;\\n            maxi = -1e9;\\n            for (int j=0 ; j<n ; j++){\\n                maxi = max(maxi , grid[j][i]);\\n            }\\n            ans += maxi;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3718867,
                "title": "light",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        x = 0\\n        y = 0\\n        z = [0 for _ in grid[0]]\\n        for i in grid:\\n            if max(i)!=0:\\n                y += max(i)\\n            for ind,i_2 in enumerate(i):\\n                if i_2 != 0:\\n                    x += 1\\n                if i_2>z[ind]:\\n                    z[ind] = i_2\\n        return x+y+sum(z)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        x = 0\\n        y = 0\\n        z = [0 for _ in grid[0]]\\n        for i in grid:\\n            if max(i)!=0:\\n                y += max(i)\\n            for ind,i_2 in enumerate(i):\\n                if i_2 != 0:\\n                    x += 1\\n                if i_2>z[ind]:\\n                    z[ind] = i_2\\n        return x+y+sum(z)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3711294,
                "title": "visual-explanation-python3",
                "content": "# Explanation\\n\\n![2023-07-03 09_06_09-Pr\\xE9sentation1 - PowerPoint (\\xC9chec de l\\u2019activation du produit).jpg](https://assets.leetcode.com/users/images/05afb5b9-e609-43a7-81d2-910b308d1574_1688364599.1374288.jpeg)\\n\\n\\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = len(grid)\\n        zx = sum(max(row) for row in grid)\\n        yz = sum(max(col) for col in zip(*grid))\\n        xy = sum(grid[i][j] != 0 for i in range(n) for j in range(n))\\n\\n        return zx + yz + xy\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = len(grid)\\n        zx = sum(max(row) for row in grid)\\n        yz = sum(max(col) for col in zip(*grid))\\n        xy = sum(grid[i][j] != 0 for i in range(n) for j in range(n))\\n\\n        return zx + yz + xy\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3693379,
                "title": "kotlin-single-pass",
                "content": "# Approach\\nSingle pass\\n\\n# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    fun projectionArea(grid: Array<IntArray>): Int {\\n        var totalArea = 0\\n        var max1 = 0\\n        var max2 = Array(grid[0].size){0}\\n\\n        for (i in 0 until grid.size) {\\n            max1 = 0\\n            for (j in 0 until grid[i].size) {\\n                // base area (z)\\n                if (grid[i][j] > 0) totalArea++\\n                // area of one side\\n                max1 = maxOf(max1, grid[i][j])\\n                // area of the other side\\n                max2[j] = maxOf(max2[j], grid[i][j])\\n            }\\n            totalArea += max1\\n        }\\n\\n        return totalArea + max2.sum()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun projectionArea(grid: Array<IntArray>): Int {\\n        var totalArea = 0\\n        var max1 = 0\\n        var max2 = Array(grid[0].size){0}\\n\\n        for (i in 0 until grid.size) {\\n            max1 = 0\\n            for (j in 0 until grid[i].size) {\\n                // base area (z)\\n                if (grid[i][j] > 0) totalArea++\\n                // area of one side\\n                max1 = maxOf(max1, grid[i][j])\\n                // area of the other side\\n                max2[j] = maxOf(max2[j], grid[i][j])\\n            }\\n            totalArea += max1\\n        }\\n\\n        return totalArea + max2.sum()\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3675304,
                "title": "python-3-short-powerful-solution-with-explanation",
                "content": "# Approach\\nThe `projectionArea` function calculates the total projection area of a 3D grid represented as a 2D list. It computes the projection area by considering three directions: z-axis, x-axis, and y-axis.\\n\\n1. Counting the non-zero elements (`z`): It counts the number of non-zero elements in the grid, representing the projection area from the z-axis direction.\\n\\n2. Calculating the sum of the maximum values for each row (`x`): It finds the maximum value in each row and sums them up, representing the projection area from the x-axis direction.\\n\\n3. Calculating the sum of the maximum values for each column (`y`): It transposes the grid, finds the maximum value in each column, and sums them up, representing the projection area from the y-axis direction.\\n\\nFinally, the function returns the sum of `x`, `y`, and `z`, which represents the total projection area of the 3D grid.\\n\\nBy considering the height values in different directions, the function provides a concise measure of the overall projection area, offering insights into the shape and prominence of the 3D structure.\\n\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nConsidering the steps above, the overall time complexity of the projectionArea function is O(n^2).\\n\\n- Space complexity:\\nConsidering the steps above, the overall space complexity of the projectionArea function is O(n^2).\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        z = len([x for sublist in grid for x in sublist if x != 0])\\n        x = sum([max(row) for row in grid])\\n        y = sum([max(column) for column in zip(*grid)])\\n        return x+y+z\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        z = len([x for sublist in grid for x in sublist if x != 0])\\n        x = sum([max(row) for row in grid])\\n        y = sum([max(column) for column in zip(*grid)])\\n        return x+y+z\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3627357,
                "title": "python3-good-enough",
                "content": "``` Python3 []\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        area = 0\\n        \\n        for x in grid:\\n            maxx = 0\\n            for y in x:\\n                if y:\\n                    maxx = max(y,maxx)\\n                    area += 1\\n            area += maxx\\n        \\n        for j in range(len(grid[0])):\\n            area += max(grid[i][j] for i in range(len(grid)))\\n\\n        return area\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "``` Python3 []\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        area = 0\\n        \\n        for x in grid:\\n            maxx = 0\\n            for y in x:\\n                if y:\\n                    maxx = max(y,maxx)\\n                    area += 1\\n            area += maxx\\n        \\n        for j in range(len(grid[0])):\\n            area += max(grid[i][j] for i in range(len(grid)))\\n\\n        return area\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3609385,
                "title": "rust-iterators-o-1-space",
                "content": "# Intuition\\nThere are three planes we care about.\\n\\nThe ground has a shadow for any cell that has at least 1 block stacked on it. So we just count the number of grid cells that are nonzero.\\n\\nThen, one side plane projection will have a shadow for the tallest tower in the rows of grid. So we get the maximum element of each row in grid, and sum them.\\n\\nFinally, the other side plane has a shadow for the tallest tower in the columns of grid. So we get the maximum element of each column in grid and sum them. \\n\\n\\n# Approach\\nFor the ground shadow, the position of each cell is irrelevant, so we can just flat_map the entire grid.\\n\\nFor the row shadow, we can iterate over rows and take the max in O(1) space.\\n\\nFor the col shadow, we need to actually iterate over the column index and map to index into the row.\\n\\n\\n# Complexity\\n- Time complexity: O(n^2), we have to iterate over the entire grid a constance number of times.\\n\\n- Space complexity: O(1), we perform no heap allocations.\\n\\n# Code\\n```\\nimpl Solution {\\n    pub fn projection_area(grid: Vec<Vec<i32>>) -> i32 {\\n        let ground: i32 = grid\\n            .iter()\\n            .flat_map(|row| row.iter())\\n            .map(|&cell| if cell > 0 { 1 } else { 0 })\\n            .sum();\\n\\n        let row_shadow : i32 = grid\\n        .iter()\\n        .map(|row| row.iter().copied().max().unwrap_or_default())\\n        .sum();\\n\\n        let col_shadow: i32 = (0..grid.len())\\n        .map(|j| grid.iter().map(|row| row[j]).max().unwrap_or_default())\\n        .sum();\\n\\n        ground + row_shadow + col_shadow\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn projection_area(grid: Vec<Vec<i32>>) -> i32 {\\n        let ground: i32 = grid\\n            .iter()\\n            .flat_map(|row| row.iter())\\n            .map(|&cell| if cell > 0 { 1 } else { 0 })\\n            .sum();\\n\\n        let row_shadow : i32 = grid\\n        .iter()\\n        .map(|row| row.iter().copied().max().unwrap_or_default())\\n        .sum();\\n\\n        let col_shadow: i32 = (0..grid.len())\\n        .map(|j| grid.iter().map(|row| row[j]).max().unwrap_or_default())\\n        .sum();\\n\\n        ground + row_shadow + col_shadow\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3605686,
                "title": "java-simple-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int n = grid.length;\\n        int ans = n*n;\\n        for(int i=0;i<n;i++) {\\n            int colMax = 0, rowMax = 0;\\n            for(int j=0;j<n;j++) {\\n                if(grid[i][j] == 0) ans--;\\n                colMax = Math.max(colMax, grid[i][j]);\\n                rowMax = Math.max(rowMax, grid[j][i]);\\n            }\\n            ans += colMax+rowMax;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Greedy",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int n = grid.length;\\n        int ans = n*n;\\n        for(int i=0;i<n;i++) {\\n            int colMax = 0, rowMax = 0;\\n            for(int j=0;j<n;j++) {\\n                if(grid[i][j] == 0) ans--;\\n                colMax = Math.max(colMax, grid[i][j]);\\n                rowMax = Math.max(rowMax, grid[j][i]);\\n            }\\n            ans += colMax+rowMax;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3601263,
                "title": "easy-to-understand-solution-c",
                "content": "Best Ever Explanation for this question do refer to understand the description of the problem and do upvote:\\n\\nhttps://leetcode.com/problems/projection-area-of-3d-shapes/description/comments/1566133\\n\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int top=0;\\n        vector<int>front;\\n        vector<int>side;\\n        int ans=0;\\n        \\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int maxr=0;\\n            int maxc=0;\\n            for(int j=0;j<grid[i].size();j++)\\n            {\\n                //for calculating non zero elements\\n                if(grid[i][j]>0)\\n                {\\n                    top++;\\n                }\\n                //for calculating max of each row\\n                if(maxr<grid[i][j])\\n                {\\n                    maxr=grid[i][j];\\n                }\\n                //for calculating max of each column\\n                if(maxc<grid[j][i])\\n                {\\n                    maxc=grid[j][i];\\n                }\\n            }\\n            //storing the maximum of each column and row\\n            front.push_back(maxr);\\n            side.push_back(maxc);\\n        }\\n        //adding to the answer\\n       for(int i=0;i<front.size();i++)\\n       {\\n           ans+=front[i]+side[i];\\n       } \\n       //final addition to the answer\\n       ans+=top;\\n       return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int top=0;\\n        vector<int>front;\\n        vector<int>side;\\n        int ans=0;\\n        \\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int maxr=0;\\n            int maxc=0;\\n            for(int j=0;j<grid[i].size();j++)\\n            {\\n                //for calculating non zero elements\\n                if(grid[i][j]>0)\\n                {\\n                    top++;\\n                }\\n                //for calculating max of each row\\n                if(maxr<grid[i][j])\\n                {\\n                    maxr=grid[i][j];\\n                }\\n                //for calculating max of each column\\n                if(maxc<grid[j][i])\\n                {\\n                    maxc=grid[j][i];\\n                }\\n            }\\n            //storing the maximum of each column and row\\n            front.push_back(maxr);\\n            side.push_back(maxc);\\n        }\\n        //adding to the answer\\n       for(int i=0;i<front.size();i++)\\n       {\\n           ans+=front[i]+side[i];\\n       } \\n       //final addition to the answer\\n       ans+=top;\\n       return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3565543,
                "title": "step-by-step-easy-to-understand",
                "content": "# Intuition\\nThis is my first time sharing a solution, just started programming in python. \\n\\n# Approach\\nI\\'ve tried to do the problem in the easiest way as possible, to help those who are having a difficult time solving it.\\nFirst things first, let\\'s understand the problem:\\nIt ask us the \"total area of the three projections\". The projectios are calculated by adding the shadows of 1 x 1 x 1 cubes \"cast\" against a wall. In other words, we\\'ll get the perimeter of a given diretion.\\n\\nNow, to the input:\\nWe are given a matrix, with each number representing the amount of cubes in each cell, where grid[0] represents the first row and grid[i] represents the ith row and grid[][j] represents the jth column\\nexs:\\n```\\n                             |3  4|\\ngrid = [[1,2],[3,4]]  <=>    |1  2|\\n                          \\n\\n                                     |2  3  6|\\ngrid = [[7,0,1],[0,0,3],[2,3,6]] <=> |0  0  3|\\n                                     |7  0  1|\\n                                     \\n```\\nWith all that said, now we only need to code it:\\nX\\xD7Y projection:\\nIt\\'s a view from above projection, which means we\\'ll only need to count those cells were we have squares over. This way, we`ll count each cell that is different than 0. using -row.count(0) to exclude the zeros or cel>0 which will only be True(hence 1) if greater than 0.\\n\\nX\\xD7Z projection:\\nSince each row in grid is a representention of a X\\xD7Y, we only need the max value from each one to find the shadow cast on Z.\\n\\nY\\xD7Z projection:\\nthe same principle of X\\xD7Z however we cannot easily acess the columnn values. For that reason will iterate over each row and then will get the max value from the same position.\\n(grid[row][0], grid[row][1], grid[row][2])\\n\\nOr we can transpose the matrix and then sum the rows\\n```\\n|g  h  i|      transpose    |g  d  a|\\n|d  e  f|         <=>       |h  e  b|\\n|a  b  c|                   |i  f  c|\\n```\\nOutput:\\nIn the end, just sum the area from all the shadows.\\n\\n\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        #xy\\n        a = sum([len(row) - row.count(0) for row in grid])\\n        #xz \\n        b = sum([max(row) for row in grid])\\n        #yz\\n        c= []\\n        grid_row_len = len(grid[0])\\n        grid_len = len(grid)\\n        for j in range(grid_len):\\n            c.append(0)\\n            for i in range(grid_row_len):\\n                c[j] = max(c[j], grid[i][j])\\n        return  a + b + sum(c)        \\n\\n```\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        a = sum(cel > 0 for row in grid for cel in row)\\n        b = sum(map(max, grid))\\n        c = sum(map(max, zip(*grid)))\\n        return a + b + c\\n```\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n                             |3  4|\\ngrid = [[1,2],[3,4]]  <=>    |1  2|\\n                          \\n\\n                                     |2  3  6|\\ngrid = [[7,0,1],[0,0,3],[2,3,6]] <=> |0  0  3|\\n                                     |7  0  1|\\n                                     \\n```\n```\\n|g  h  i|      transpose    |g  d  a|\\n|d  e  f|         <=>       |h  e  b|\\n|a  b  c|                   |i  f  c|\\n```\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        #xy\\n        a = sum([len(row) - row.count(0) for row in grid])\\n        #xz \\n        b = sum([max(row) for row in grid])\\n        #yz\\n        c= []\\n        grid_row_len = len(grid[0])\\n        grid_len = len(grid)\\n        for j in range(grid_len):\\n            c.append(0)\\n            for i in range(grid_row_len):\\n                c[j] = max(c[j], grid[i][j])\\n        return  a + b + sum(c)        \\n\\n```\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        a = sum(cel > 0 for row in grid for cel in row)\\n        b = sum(map(max, grid))\\n        c = sum(map(max, zip(*grid)))\\n        return a + b + c\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3550173,
                "title": "easy-solution-in-python-runtime-84ms-beats-70-31",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        ans = len(grid) * len(grid[0])\\n        ic = [0] * len(grid[0])\\n        for i in grid:\\n            ans += max(i)\\n            for m,n in enumerate(i):\\n                if n == 0:\\n                    ans -= 1\\n                if n > ic[m]:\\n                    ic[m] = n\\n        ans += sum(ic)\\n        return ans\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        ans = len(grid) * len(grid[0])\\n        ic = [0] * len(grid[0])\\n        for i in grid:\\n            ans += max(i)\\n            for m,n in enumerate(i):\\n                if n == 0:\\n                    ans -= 1\\n                if n > ic[m]:\\n                    ic[m] = n\\n        ans += sum(ic)\\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3536976,
                "title": "java",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int xz=0, xy=0, yz=0;\\n        for (int [] row : grid){\\n            int maxRow = row[0];\\n            for (int h:row){\\n                if(h>0) xz++;\\n                maxRow = Math.max (maxRow,h);\\n            }\\n            xy+= maxRow;\\n        }\\n        for (int i=0;i<grid[0].length;i++){\\n            int maxCol = grid[0][i];\\n            for (int j=0;j<grid.length;j++){\\n                maxCol =  Math.max (maxCol,grid[j][i]);\\n            }\\n            yz+= maxCol;\\n        }\\n        return xz+xy+yz;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int xz=0, xy=0, yz=0;\\n        for (int [] row : grid){\\n            int maxRow = row[0];\\n            for (int h:row){\\n                if(h>0) xz++;\\n                maxRow = Math.max (maxRow,h);\\n            }\\n            xy+= maxRow;\\n        }\\n        for (int i=0;i<grid[0].length;i++){\\n            int maxCol = grid[0][i];\\n            for (int j=0;j<grid.length;j++){\\n                maxCol =  Math.max (maxCol,grid[j][i]);\\n            }\\n            yz+= maxCol;\\n        }\\n        return xz+xy+yz;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3535828,
                "title": "sum-the-max-of-each-row-and-column",
                "content": "# Intuition\\n- Sum of the max of each row would be the area of one side\\n- Sum of the max of each column would be the area of another side\\n- count of all non zero values would be the area at top/bottom\\n\\n# Complexity\\n- Time complexity:\\n`O(n*n)`\\n\\n- Space complexity:\\n`O(n)`\\n\\n# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int n = grid.length;\\n        int area = 0;\\n        int[] maxCols = new int[n];\\n        for (int row = 0; row < n; row++) {\\n            int maxRow = 0;\\n            for (int col = 0; col < n; col++) {\\n                int val = grid[row][col];\\n                if (val > maxRow) maxRow = val;\\n                if (val > maxCols[col]) maxCols[col] = val;\\n                if (val > 0) area++;\\n            }\\n            area += maxRow;\\n        }\\n        for (int colArea : maxCols) {\\n            area += colArea;\\n        }\\n        return area;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int n = grid.length;\\n        int area = 0;\\n        int[] maxCols = new int[n];\\n        for (int row = 0; row < n; row++) {\\n            int maxRow = 0;\\n            for (int col = 0; col < n; col++) {\\n                int val = grid[row][col];\\n                if (val > maxRow) maxRow = val;\\n                if (val > maxCols[col]) maxCols[col] = val;\\n                if (val > 0) area++;\\n            }\\n            area += maxRow;\\n        }\\n        for (int colArea : maxCols) {\\n            area += colArea;\\n        }\\n        return area;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3488352,
                "title": "simple-easy-c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int ans = 0,m1,m2,n = grid.size();\\n        for(int i=0; i<n; i++){\\n            m1=0,m2=0;\\n            for(int j=0; j<n; j++){\\n                if(grid[i][j]>0)ans++;\\n                m1 = max(m1,grid[i][j]);\\n                m2 = max(m2,grid[j][i]);\\n            }\\n            ans+=m1+m2;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int ans = 0,m1,m2,n = grid.size();\\n        for(int i=0; i<n; i++){\\n            m1=0,m2=0;\\n            for(int j=0; j<n; j++){\\n                if(grid[i][j]>0)ans++;\\n                m1 = max(m1,grid[i][j]);\\n                m2 = max(m2,grid[j][i]);\\n            }\\n            ans+=m1+m2;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3486743,
                "title": "beginner-level-solution-beats-92-65-runtime",
                "content": "# Approach\\n1. Top shadow = no. of cell that is not 0.\\n2. Front shadow = max of each row\\n3. Side shadow = max of each col\\n\\nIterate through the list and find each of these shadow.\\nReturn sum of 3.\\n\\n# Code\\n```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n\\n        n = len(grid)\\n\\n        top, front, side = 0, 0, 0\\n\\n        for i in range(n):\\n            for j in range(n):\\n                if grid[i][j] > 0: top += 1\\n\\n        for i in range(n):\\n            top += max(grid[i])\\n\\n        for j in range(n):\\n            s = 0\\n            for i in range(n):\\n                s = max(s, grid[i][j])\\n            side += s\\n\\n        return top + front + side\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n\\n        n = len(grid)\\n\\n        top, front, side = 0, 0, 0\\n\\n        for i in range(n):\\n            for j in range(n):\\n                if grid[i][j] > 0: top += 1\\n\\n        for i in range(n):\\n            top += max(grid[i])\\n\\n        for j in range(n):\\n            s = 0\\n            for i in range(n):\\n                s = max(s, grid[i][j])\\n            side += s\\n\\n        return top + front + side\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3463866,
                "title": "very-easy-solution-c-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^2)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int count=0;\\n        for(int i=0;i<grid.size();i++)\\n        {   int max=0;\\n           int max1=0;\\n            for(int j=0;j<grid.size();j++)\\n            {\\n                if(grid[i][j]!=0){count++;}\\n                if(grid[i][j]>=max){max=grid[i][j];}\\n                if(grid[j][i]>=max1){max1=grid[j][i];}\\n            }\\n            count+=max;\\n            count+=max1;\\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int count=0;\\n        for(int i=0;i<grid.size();i++)\\n        {   int max=0;\\n           int max1=0;\\n            for(int j=0;j<grid.size();j++)\\n            {\\n                if(grid[i][j]!=0){count++;}\\n                if(grid[i][j]>=max){max=grid[i][j];}\\n                if(grid[j][i]>=max1){max1=grid[j][i];}\\n            }\\n            count+=max;\\n            count+=max1;\\n        }\\n        return count;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3452246,
                "title": "rust-explanation-of-the-question",
                "content": "# Intuition\\nNice question, but terrible explanation. It took a lot of time to figure out what does the input represents.\\n\\nInput `[x, y, z], [a], [b, c]` means that at you put at position\\n - 0, 0 x cubes\\n - 0, 1 y cubes\\n - 0, 2 z cubes\\n - 1, 0 a cubes\\n - 2, 0 b cubes\\n - 2, 1 c cubes\\n\\n# Complexity\\n- Time complexity: $O(n^2)$\\n- Space complexity: $O(n)$\\n\\n\\n# Code\\n```\\nimpl Solution {\\n  pub fn projection_area(grid: Vec<Vec<i32>>) -> i32 {\\n    let n = grid.len();\\n\\n    let mut res = 0;\\n    let mut data_y = [0; 51];\\n    let mut data_x = [0; 51];\\n    for i in 0 .. n {\\n      for j in 0 .. grid[i].len() {\\n        let v = grid[i][j];\\n        if v > 0 {\\n          res += 1;\\n        }\\n        data_y[i] = data_y[i].max(v);\\n        data_x[j] = data_x[j].max(v);\\n      }\\n    }\\n\\n    for i in 0 .. 51 {\\n      res += data_y[i] + data_x[i];\\n    }\\n    return res;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n  pub fn projection_area(grid: Vec<Vec<i32>>) -> i32 {\\n    let n = grid.len();\\n\\n    let mut res = 0;\\n    let mut data_y = [0; 51];\\n    let mut data_x = [0; 51];\\n    for i in 0 .. n {\\n      for j in 0 .. grid[i].len() {\\n        let v = grid[i][j];\\n        if v > 0 {\\n          res += 1;\\n        }\\n        data_y[i] = data_y[i].max(v);\\n        data_x[j] = data_x[j].max(v);\\n      }\\n    }\\n\\n    for i in 0 .. 51 {\\n      res += data_y[i] + data_x[i];\\n    }\\n    return res;\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3444238,
                "title": "c-solution-easy-fast-solution",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(N ^ 2)\\n- Space complexity:\\nO(N)\\n# Code\\n```\\npublic class Solution {\\n    public int ProjectionArea(int[][] grid) {\\n        int topProjection = 0, rowProjection = 0, colProjection = 0;\\n        int[] maxNumberInCols = new int[grid.Length];\\n        for(int i = 0; i < grid.Length;i++){\\n            int maxNumberInRow = grid[i][0];\\n            for(int j = 0; j < grid.Length;j++){\\n                if(grid[i][j] > 0) topProjection++;\\n                maxNumberInRow = Math.Max(maxNumberInRow,grid[i][j]);\\n                maxNumberInCols[j] = Math.Max(maxNumberInCols[j],grid[i][j]);\\n            }\\n            rowProjection+= maxNumberInRow;\\n        }\\n        for(int i = 0;i < maxNumberInCols.Length;i++) colProjection+= maxNumberInCols[i];\\n        return topProjection + rowProjection  + colProjection;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Math",
                    "Matrix"
                ],
                "code": "```\\npublic class Solution {\\n    public int ProjectionArea(int[][] grid) {\\n        int topProjection = 0, rowProjection = 0, colProjection = 0;\\n        int[] maxNumberInCols = new int[grid.Length];\\n        for(int i = 0; i < grid.Length;i++){\\n            int maxNumberInRow = grid[i][0];\\n            for(int j = 0; j < grid.Length;j++){\\n                if(grid[i][j] > 0) topProjection++;\\n                maxNumberInRow = Math.Max(maxNumberInRow,grid[i][j]);\\n                maxNumberInCols[j] = Math.Max(maxNumberInCols[j],grid[i][j]);\\n            }\\n            rowProjection+= maxNumberInRow;\\n        }\\n        for(int i = 0;i < maxNumberInCols.Length;i++) colProjection+= maxNumberInCols[i];\\n        return topProjection + rowProjection  + colProjection;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3442219,
                "title": "solution-in-layman-s-terms-java",
                "content": "# Intuition\\n- To cut directly to the how each projections is calculated:\\n\\n- Finding xy projection just means to add 1 to the total area if grid[x][y] != 0\\n- Finding xz projection means finding the maximum element in each grid row.\\n- Finding yz projection means finding the n largest values for each y in grid[x][y]\\n- Hope this helps.\\n\\n# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int area = 0;\\n        int[] yzVals = new int[grid.length];\\n        for(int x = 0; x<grid.length; x++){\\n            int xzProjection = 0;\\n            for(int y = 0; y<grid[0].length; y++){\\n                if(grid[x][y] != 0){\\n                    //xz projection\\n                    xzProjection = Math.max(xzProjection,grid[x][y]);\\n                    //yz projection\\n                    yzVals[y] = Math.max(yzVals[y],grid[x][y]);\\n                    //xy projection\\n                    area++;\\n                }\\n            }\\n            area += xzProjection;\\n        }\\n\\n       for(int num : yzVals)\\n            area += num;\\n        return area;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int area = 0;\\n        int[] yzVals = new int[grid.length];\\n        for(int x = 0; x<grid.length; x++){\\n            int xzProjection = 0;\\n            for(int y = 0; y<grid[0].length; y++){\\n                if(grid[x][y] != 0){\\n                    //xz projection\\n                    xzProjection = Math.max(xzProjection,grid[x][y]);\\n                    //yz projection\\n                    yzVals[y] = Math.max(yzVals[y],grid[x][y]);\\n                    //xy projection\\n                    area++;\\n                }\\n            }\\n            area += xzProjection;\\n        }\\n\\n       for(int num : yzVals)\\n            area += num;\\n        return area;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3437271,
                "title": "for-loop",
                "content": "```\\n int projectionArea(vector<vector<int>>& grid) {\\n        int first=0;\\n        int second=0;\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int local_second=0;\\n            for(int j=0;j<grid[i].size();j++)\\n            {\\n                if(grid[i][j]!=0)\\n                {\\n                    first++;\\n                }\\n                local_second=max(local_second,grid[i][j]);\\n            }\\n            second+=local_second;\\n        }\\n        int third=0;\\n        for(int j=0;j<grid[0].size();j++)\\n        {\\n            int local_third=0;\\n            for(int i=0;i<grid.size();i++)\\n            {\\n                local_third=max(local_third,grid[i][j]);\\n            }\\n            third+=local_third;\\n        }\\n        return first+second+third;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n int projectionArea(vector<vector<int>>& grid) {\\n        int first=0;\\n        int second=0;\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int local_second=0;\\n            for(int j=0;j<grid[i].size();j++)\\n            {\\n                if(grid[i][j]!=0)\\n                {\\n                    first++;\\n                }\\n                local_second=max(local_second,grid[i][j]);\\n            }\\n            second+=local_second;\\n        }\\n        int third=0;\\n        for(int j=0;j<grid[0].size();j++)\\n        {\\n            int local_third=0;\\n            for(int i=0;i<grid.size();i++)\\n            {\\n                local_third=max(local_third,grid[i][j]);\\n            }\\n            third+=local_third;\\n        }\\n        return first+second+third;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3414025,
                "title": "solution-in-1ms-and-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int n= grid.length;\\n\\n        int ans= 0;\\n\\n        for(int i=0; i<n; i++) {\\n            int rows= 0; // to find max row \\n            int cols= 0; // to find max column\\n\\n            for(int j=0; j<n; j++) {\\n                if(grid[i][j] > 0) {\\n                    ans++;\\n                }\\n\\n                rows= Math.max(rows, grid[i][j]);\\n                cols= Math.max(cols, grid[j][i]);\\n            }\\n            ans += rows + cols;\\n        }\\n\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Geometry",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int n= grid.length;\\n\\n        int ans= 0;\\n\\n        for(int i=0; i<n; i++) {\\n            int rows= 0; // to find max row \\n            int cols= 0; // to find max column\\n\\n            for(int j=0; j<n; j++) {\\n                if(grid[i][j] > 0) {\\n                    ans++;\\n                }\\n\\n                rows= Math.max(rows, grid[i][j]);\\n                cols= Math.max(cols, grid[j][i]);\\n            }\\n            ans += rows + cols;\\n        }\\n\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3382571,
                "title": "simple-and-fast-c-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int sum =0,c=0,s;\\n        for(int i=0;i<n;i++){\\n            sum+=*max_element(grid[i].begin(), grid[i].end());\\n            s=0;\\n            for(int j=0;j<grid[i].size();j++){\\n                if(grid[i][j]!=0)\\n                c++;\\n                s = max(s,grid[j][i]);\\n            }\\n            sum+=s;\\n        }\\n        sum+=c;\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int sum =0,c=0,s;\\n        for(int i=0;i<n;i++){\\n            sum+=*max_element(grid[i].begin(), grid[i].end());\\n            s=0;\\n            for(int j=0;j<grid[i].size();j++){\\n                if(grid[i][j]!=0)\\n                c++;\\n                s = max(s,grid[j][i]);\\n            }\\n            sum+=s;\\n        }\\n        sum+=c;\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3381334,
                "title": "python-beats-96",
                "content": "# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n\\n        ans = len(grid) * len(grid[0])\\n\\n        ic = [0] * len(grid[0])\\n        \\n        for i in grid:\\n            ans += max(i)\\n\\n            for m,n in enumerate(i):\\n                if n == 0:\\n                    ans -= 1\\n\\n                if n > ic[m]:\\n                    ic[m] = n\\n\\n        ans += sum(ic)\\n\\n        return ans\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n\\n        ans = len(grid) * len(grid[0])\\n\\n        ic = [0] * len(grid[0])\\n        \\n        for i in grid:\\n            ans += max(i)\\n\\n            for m,n in enumerate(i):\\n                if n == 0:\\n                    ans -= 1\\n\\n                if n > ic[m]:\\n                    ic[m] = n\\n\\n        ans += sum(ic)\\n\\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3375865,
                "title": "c-easy-approach",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int res=0;\\n        // X-Y ( top )\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            for(int j=0;j<grid[0].size();j++)\\n            {\\n                if(grid[i][j]) // if some cubes are present it is seen as of area 1 from top\\n                    res++; \\n            }\\n        }\\n        \\n        // Z-X ( front )\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int m=grid[i][0];\\n            for(int j=1;j<grid[0].size();j++)\\n            {\\n                m=max(m,grid[i][j]);// from front, the tower with heightest height can only be seen in column\\n            }\\n            res+=m;\\n        }\\n        \\n        // Z-Y ( side )\\n        for(int j=0;j<grid[0].size();j++)\\n        {\\n            int m=grid[0][j];\\n            for(int i=1;i<grid.size();i++)\\n            {\\n                m=max(m,grid[i][j]);// // from side, the tower with heightest height can only be seen in row\\n            }\\n            res+=m;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int res=0;\\n        // X-Y ( top )\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            for(int j=0;j<grid[0].size();j++)\\n            {\\n                if(grid[i][j]) // if some cubes are present it is seen as of area 1 from top\\n                    res++; \\n            }\\n        }\\n        \\n        // Z-X ( front )\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            int m=grid[i][0];\\n            for(int j=1;j<grid[0].size();j++)\\n            {\\n                m=max(m,grid[i][j]);// from front, the tower with heightest height can only be seen in column\\n            }\\n            res+=m;\\n        }\\n        \\n        // Z-Y ( side )\\n        for(int j=0;j<grid[0].size();j++)\\n        {\\n            int m=grid[0][j];\\n            for(int i=1;i<grid.size();i++)\\n            {\\n                m=max(m,grid[i][j]);// // from side, the tower with heightest height can only be seen in row\\n            }\\n            res+=m;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3375278,
                "title": "883-projection-area-of-3d-shapes",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nconst sum = (...xs) => xs.reduce((acc, x) => x + acc, 0);\\nconst max = (arr) => Math.max(...arr);\\n\\nconst projectionArea = (grid) => {\\n  const xz = grid.map(max);\\n  const xy = grid.flat().map(value => value && 1);\\n  const yz = grid.map((_, i) => grid.map(x => x[i])).map(max);\\n\\n  return sum(...xy, ...xz, ...yz)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst sum = (...xs) => xs.reduce((acc, x) => x + acc, 0);\\nconst max = (arr) => Math.max(...arr);\\n\\nconst projectionArea = (grid) => {\\n  const xz = grid.map(max);\\n  const xy = grid.flat().map(value => value && 1);\\n  const yz = grid.map((_, i) => grid.map(x => x[i])).map(max);\\n\\n  return sum(...xy, ...xz, ...yz)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3373966,
                "title": "c-sol",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n=grid.size();\\n        int ans=0;\\n        for(int i=0;i<n;i++){\\n            int r=0;\\n            int c=0;\\n            for(int j=0;j<n;j++){\\n                if(grid[i][j]>0)ans++;\\n                r=max(r,grid[i][j]);\\n                c=max(c,grid[j][i]);\\n            }\\n            ans+=r+c;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n=grid.size();\\n        int ans=0;\\n        for(int i=0;i<n;i++){\\n            int r=0;\\n            int c=0;\\n            for(int j=0;j<n;j++){\\n                if(grid[i][j]>0)ans++;\\n                r=max(r,grid[i][j]);\\n                c=max(c,grid[j][i]);\\n            }\\n            ans+=r+c;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3345824,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int sizeX = grid.size();\\n        int sizeY = grid[0].size();\\n        std::unordered_map<int, int> projectionXZ;\\n        std::unordered_map<int, int> projectionYZ;\\n        int res;\\n        for (int i = 0; i < sizeX; i++)\\n        {\\n            for (int j = 0; j < sizeY; j++)\\n            {\\n                if (grid[i][j] > 0)\\n                {\\n                    res++; // collect XY projection\\n                    if (projectionXZ[i] < grid[i][j])\\n                    {\\n                        projectionXZ[i] = grid[i][j];\\n                    }\\n                    if (projectionYZ[j] < grid[i][j])\\n                    {\\n                        projectionYZ[j] = grid[i][j];\\n                    }\\n                }\\n            }\\n        }\\n        for (auto x: projectionXZ)\\n        {\\n            res += x.second;\\n        }\\n        for (auto x: projectionYZ)\\n        {\\n            res += x.second;\\n        }\\n\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int sizeX = grid.size();\\n        int sizeY = grid[0].size();\\n        std::unordered_map<int, int> projectionXZ;\\n        std::unordered_map<int, int> projectionYZ;\\n        int res;\\n        for (int i = 0; i < sizeX; i++)\\n        {\\n            for (int j = 0; j < sizeY; j++)\\n            {\\n                if (grid[i][j] > 0)\\n                {\\n                    res++; // collect XY projection\\n                    if (projectionXZ[i] < grid[i][j])\\n                    {\\n                        projectionXZ[i] = grid[i][j];\\n                    }\\n                    if (projectionYZ[j] < grid[i][j])\\n                    {\\n                        projectionYZ[j] = grid[i][j];\\n                    }\\n                }\\n            }\\n        }\\n        for (auto x: projectionXZ)\\n        {\\n            res += x.second;\\n        }\\n        for (auto x: projectionYZ)\\n        {\\n            res += x.second;\\n        }\\n\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3345670,
                "title": "easy-python-solution-with-list-comprehensions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n`xy` plane is simple - just count the number of non-zero `grid[i][j]` elements.\\n`xz` is also quite simple - it corresponds to the sum of max numbers in each inner array.\\n`yz` is little harder - it\\'s the sum of the max numbers in each index positions in each nested array.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n^3 + n^2 + n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        xy = len([item for elem in grid for item in elem if item != 0])\\n        xz = sum([max(item) for item in grid])\\n        yz = sum([max(elem) for elem in [[item[i] for item in grid] for i in range(len(grid[0]))]])\\n        return xy + xz + yz\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        xy = len([item for elem in grid for item in elem if item != 0])\\n        xz = sum([max(item) for item in grid])\\n        yz = sum([max(elem) for elem in [[item[i] for item in grid] for i in range(len(grid[0]))]])\\n        return xy + xz + yz\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3315737,
                "title": "one-liner-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHere,\\n\\nxy projection will be sum of length of each sublist present in main list provided that the sublist will only contain non-zero elements. So, if the sublist consists zeros, eliminate them iteratively.\\n\\nxz projection will be sum of maximum element present in a row/sublist\\n\\nyz projection will be sum of maximum element present in a column, i.e. maximum element present in jth column\\n\\n# Code\\n```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n        return sum([len(x3) for x3 in [[y for y in x if y>0] for x in grid]])+sum([max(x) for x in grid])+sum(list(map(max, zip(*grid))))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n        return sum([len(x3) for x3 in [[y for y in x if y>0] for x in grid]])+sum([max(x) for x in grid])+sum(list(map(max, zip(*grid))))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3261161,
                "title": "javascript-100-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n    // [[1,2],[3,4]]\\n    // top: count of positive numbers\\n    // front: sum of max value of each row\\n    // side: sum of max value of each column\\n    // invariant:\\n    // row and column\\n    let res = 0\\n    for (let i = 0; i < grid.length; i++) {\\n        let x = y = 0\\n        for (let j = 0; j < grid[0].length; j++) {\\n            x = Math.max(x, grid[i][j])\\n            y = Math.max(y, grid[j][i])\\n            if(grid[i][j] > 0) res++\\n        }\\n        res += x + y\\n    }\\n    return res\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n    // [[1,2],[3,4]]\\n    // top: count of positive numbers\\n    // front: sum of max value of each row\\n    // side: sum of max value of each column\\n    // invariant:\\n    // row and column\\n    let res = 0\\n    for (let i = 0; i < grid.length; i++) {\\n        let x = y = 0\\n        for (let j = 0; j < grid[0].length; j++) {\\n            x = Math.max(x, grid[i][j])\\n            y = Math.max(y, grid[j][i])\\n            if(grid[i][j] > 0) res++\\n        }\\n        res += x + y\\n    }\\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3261021,
                "title": "javascript-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n * n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1), exclude input\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n    // [[1,2],[3,4]]\\n    // top: count of positive numbers\\n    // front: sum of max value of each row\\n    // side: sum of max value of each column\\n    // invariant:\\n    // row and column\\n    let sumFS = 0\\n    let sumTop = 0\\n    for (let i = 0; i < grid.length; i++) {\\n        let maxRow = 0\\n        for (const num of grid[i]) {\\n            maxRow = Math.max(maxRow,num)\\n            if(num > 0)  sumTop++\\n        }\\n\\n        let maxCol = 0\\n        for (let j = 0; j < grid.length; j++) {\\n            maxCol = Math.max(maxCol, grid[j][i])\\n        }\\n        sumFS = sumFS + maxRow + maxCol\\n    }\\n    \\n    return sumFS + sumTop\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n    // [[1,2],[3,4]]\\n    // top: count of positive numbers\\n    // front: sum of max value of each row\\n    // side: sum of max value of each column\\n    // invariant:\\n    // row and column\\n    let sumFS = 0\\n    let sumTop = 0\\n    for (let i = 0; i < grid.length; i++) {\\n        let maxRow = 0\\n        for (const num of grid[i]) {\\n            maxRow = Math.max(maxRow,num)\\n            if(num > 0)  sumTop++\\n        }\\n\\n        let maxCol = 0\\n        for (let j = 0; j < grid.length; j++) {\\n            maxCol = Math.max(maxCol, grid[j][i])\\n        }\\n        sumFS = sumFS + maxRow + maxCol\\n    }\\n    \\n    return sumFS + sumTop\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3230906,
                "title": "c-solution-simple",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        \\n        int front = 0, left = 0, top = 0;\\n        int tempfront = 0, templeft = 0;\\n        for(int i = 0; i<grid.size();i++){\\n            // front = max 00, 01 02....\\n            tempfront = 0;\\n            templeft = 0;\\n            for(int j = 0; j<grid.size(); j++){\\n                tempfront = max(tempfront,grid[i][j]);\\n                templeft = max(templeft,grid[j][i]);\\n                if(grid[i][j])\\n                    top++;\\n            }\\n            front = front + tempfront;\\n            left = left + templeft;\\n        }\\n\\n        return top + front + left;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        \\n        int front = 0, left = 0, top = 0;\\n        int tempfront = 0, templeft = 0;\\n        for(int i = 0; i<grid.size();i++){\\n            // front = max 00, 01 02....\\n            tempfront = 0;\\n            templeft = 0;\\n            for(int j = 0; j<grid.size(); j++){\\n                tempfront = max(tempfront,grid[i][j]);\\n                templeft = max(templeft,grid[j][i]);\\n                if(grid[i][j])\\n                    top++;\\n            }\\n            front = front + tempfront;\\n            left = left + templeft;\\n        }\\n\\n        return top + front + left;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3216441,
                "title": "python-code",
                "content": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = len(grid)\\n        xy,xz,yz = 0,0,0\\n        for i in range(n):\\n            for j in range(n):\\n                if grid[i][j] > 0:\\n                    xy+=1\\n            xz+= max(grid[i])\\n        for j in range(n):\\n            mx = 0\\n            for i in range(n):\\n                mx = max(mx,grid[i][j])\\n            yz+=mx\\n        print(xy,xz,yz)\\n \\xA0 \\xA0 \\xA0 \\xA0return (xy+xz+yz)\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = len(grid)\\n        xy,xz,yz = 0,0,0\\n        for i in range(n):\\n            for j in range(n):\\n                if grid[i][j] > 0:\\n                    xy+=1\\n            xz+= max(grid[i])\\n        for j in range(n):\\n            mx = 0\\n            for i in range(n):\\n                mx = max(mx,grid[i][j])\\n            yz+=mx\\n        print(xy,xz,yz)\\n \\xA0 \\xA0 \\xA0 \\xA0return (xy+xz+yz)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3207018,
                "title": "simple-easy-c-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int r=grid.size();\\n        int c=grid[0].size();\\n        int area=0;\\n        for(auto it:grid){\\n            for(auto i:it){\\n                if(i!=0){\\n                    area++;\\n                }\\n            }\\n        }\\n        \\n        int maxi=0;\\n        int a,b;\\n        int tempa;\\n        int max=0;\\n        int tempb;\\n        int maxy=0;\\n        vector<int>maximum;\\n        for(auto it:grid){\\n            a=*max_element(it.begin(),it.end());\\n            if(a>maxi){\\n                maxi=a;\\n            }\\n\\n        }\\n        tempa=maxi*r;\\n        for(auto it:grid){\\n            b=*max_element(it.begin(),it.end());\\n            if(b!=maxi){\\n                tempa=tempa-(1*(maxi-b));\\n            }\\n        }\\n        area+=tempa;\\n\\n        for(int i=0;i<grid[0].size();i++){\\n            for(int j=0;j<grid.size();j++){\\n                if(grid[j][i]>max){\\n                    max=grid[j][i];\\n                }\\n            }\\n            maximum.push_back(max);\\n            if(max>maxy){\\n                maxy=max;\\n            }\\n            max=0;\\n        }\\n        tempb=maxy*r;\\n\\n        for(auto i:maximum){\\n            if(i!=maxy){\\n                tempb=tempb-(maxy-i);\\n            }\\n        }\\n        area+=tempb;\\n\\n    return area;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int r=grid.size();\\n        int c=grid[0].size();\\n        int area=0;\\n        for(auto it:grid){\\n            for(auto i:it){\\n                if(i!=0){\\n                    area++;\\n                }\\n            }\\n        }\\n        \\n        int maxi=0;\\n        int a,b;\\n        int tempa;\\n        int max=0;\\n        int tempb;\\n        int maxy=0;\\n        vector<int>maximum;\\n        for(auto it:grid){\\n            a=*max_element(it.begin(),it.end());\\n            if(a>maxi){\\n                maxi=a;\\n            }\\n\\n        }\\n        tempa=maxi*r;\\n        for(auto it:grid){\\n            b=*max_element(it.begin(),it.end());\\n            if(b!=maxi){\\n                tempa=tempa-(1*(maxi-b));\\n            }\\n        }\\n        area+=tempa;\\n\\n        for(int i=0;i<grid[0].size();i++){\\n            for(int j=0;j<grid.size();j++){\\n                if(grid[j][i]>max){\\n                    max=grid[j][i];\\n                }\\n            }\\n            maximum.push_back(max);\\n            if(max>maxy){\\n                maxy=max;\\n            }\\n            max=0;\\n        }\\n        tempb=maxy*r;\\n\\n        for(auto i:maximum){\\n            if(i!=maxy){\\n                tempb=tempb-(maxy-i);\\n            }\\n        }\\n        area+=tempb;\\n\\n    return area;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3197743,
                "title": "easy-to-understand-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) \\n    {\\n        int x=0,y=0,z=0;\\n\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            for(int j=0;j<grid[0].length;j++)\\n            {\\n                if(grid[i][j]!=0) x++;\\n            }\\n        }\\n\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            int max=grid[i][0];\\n            for(int j=0;j<grid[i].length;j++)\\n            {\\n                if(grid[i][j]>=max) max=grid[i][j];\\n            }\\n            y+=max;\\n        }\\n     \\n         for(int i=0;i<grid.length;i++)\\n        {\\n             int max=grid[0][i];\\n             for(int j=0;j<grid[i].length;j++)\\n             {\\n                 if(grid[j][i]>=max) max=grid[j][i];\\n             }\\n             z+=max;\\n        }\\n\\n        return x+y+z;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) \\n    {\\n        int x=0,y=0,z=0;\\n\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            for(int j=0;j<grid[0].length;j++)\\n            {\\n                if(grid[i][j]!=0) x++;\\n            }\\n        }\\n\\n        for(int i=0;i<grid.length;i++)\\n        {\\n            int max=grid[i][0];\\n            for(int j=0;j<grid[i].length;j++)\\n            {\\n                if(grid[i][j]>=max) max=grid[i][j];\\n            }\\n            y+=max;\\n        }\\n     \\n         for(int i=0;i<grid.length;i++)\\n        {\\n             int max=grid[0][i];\\n             for(int j=0;j<grid[i].length;j++)\\n             {\\n                 if(grid[j][i]>=max) max=grid[j][i];\\n             }\\n             z+=max;\\n        }\\n\\n        return x+y+z;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3166313,
                "title": "simple-ruby-o-n",
                "content": "# Intuition, Approach\\nArea of xy is 1 per element with value nonzero.\\nArea of xz is the sum of the max value per row of the grid.\\nArea of yz is the sum of the max value per col of the grid.\\n\\n# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\n# @param {Integer[][]} grid\\n# @return {Integer}\\ndef projection_area(grid)\\n  xy_area = grid.flatten.count{ |v| v != 0  }\\n  (0...grid.size).reduce(xy_area) do |area, i|\\n    xz_i_area = grid[i].max\\n    yz_i_area = grid.map{ _1[i] }.max\\n    area + xz_i_area + yz_i_area\\n  end\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n# @param {Integer[][]} grid\\n# @return {Integer}\\ndef projection_area(grid)\\n  xy_area = grid.flatten.count{ |v| v != 0  }\\n  (0...grid.size).reduce(xy_area) do |area, i|\\n    xz_i_area = grid[i].max\\n    yz_i_area = grid.map{ _1[i] }.max\\n    area + xz_i_area + yz_i_area\\n  end\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3153028,
                "title": "c",
                "content": "# Intuition\\n3 part\\n(1)total count (2)each row max (3)each column max\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n(1)count grid element (when we meet value ==  0, we need to count--)\\n(2) find row max by row\\n(2) find col max use array to store each col max\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(\\u221An)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution\\n        {\\n            public int ProjectionArea(int[][] grid)\\n            {\\n                int result = grid.Length * grid[0].Length;\\n                int[] colmax = new int[grid[0].Length];\\n\\n                for(int i = 0;i<grid.Length ; i++)\\n                {\\n                    int rowmax = 0;\\n                    for (int j = 0; j < grid[i].Length; j++)\\n                    {\\n                        if (grid[i][j] > rowmax)\\n                            rowmax = grid[i][j];\\n\\n                        if (grid[i][j] > colmax[j])\\n                            colmax[j] = grid[i][j];\\n\\n                        if (grid[i][j] == 0)\\n                            result--;\\n                    }\\n                    result += rowmax;\\n                }\\n\\n                return result + colmax.Sum();\\n            }\\n        }\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n        {\\n            public int ProjectionArea(int[][] grid)\\n            {\\n                int result = grid.Length * grid[0].Length;\\n                int[] colmax = new int[grid[0].Length];\\n\\n                for(int i = 0;i<grid.Length ; i++)\\n                {\\n                    int rowmax = 0;\\n                    for (int j = 0; j < grid[i].Length; j++)\\n                    {\\n                        if (grid[i][j] > rowmax)\\n                            rowmax = grid[i][j];\\n\\n                        if (grid[i][j] > colmax[j])\\n                            colmax[j] = grid[i][j];\\n\\n                        if (grid[i][j] == 0)\\n                            result--;\\n                    }\\n                    result += rowmax;\\n                }\\n\\n                return result + colmax.Sum();\\n            }\\n        }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3125619,
                "title": "java-simple-solution-greedy-with-explanation-1ms-100",
                "content": "# Description\\nIn top projection, number of cubes will be `n^2`, but in case of `0` values there will not be any cube and we should not count it.\\n\\nIn case of front and side projections it will be the sum of maximum values in the rows and columns of matrix.\\n\\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n\\n    public int projectionArea(int[][] grid) {\\n        int n = grid.length;\\n        int sum = n * n;\\n\\n        for (int i = 0; i < n; i++) {\\n            int rowMax = Integer.MIN_VALUE;\\n            int colMax = Integer.MIN_VALUE;\\n            for (int j = 0; j < n; j++) {\\n                rowMax = Math.max(rowMax, grid[i][j]);\\n                colMax = Math.max(colMax, grid[j][i]);\\n\\n                if (grid[i][j] == 0) {\\n                    sum--;\\n                }\\n            }\\n            sum += rowMax + colMax;\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Geometry",
                    "Matrix"
                ],
                "code": "```\\nclass Solution {\\n\\n    public int projectionArea(int[][] grid) {\\n        int n = grid.length;\\n        int sum = n * n;\\n\\n        for (int i = 0; i < n; i++) {\\n            int rowMax = Integer.MIN_VALUE;\\n            int colMax = Integer.MIN_VALUE;\\n            for (int j = 0; j < n; j++) {\\n                rowMax = Math.max(rowMax, grid[i][j]);\\n                colMax = Math.max(colMax, grid[j][i]);\\n\\n                if (grid[i][j] == 0) {\\n                    sum--;\\n                }\\n            }\\n            sum += rowMax + colMax;\\n        }\\n\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3105872,
                "title": "easy-solution-o-n2-python",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        a=0\\n        for i in range(len(grid)):\\n            numMax, numMax1= 0 , 0\\n            for j in range(len(grid)):\\n                if grid[i][j]>0:\\n                    a+=1\\n                if grid[i][j]>numMax:\\n                    numMax=grid[i][j]\\n                if grid[j][i]>numMax1:\\n                    numMax1=grid[j][i]\\n            a+=numMax+numMax1 \\n        return a\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        a=0\\n        for i in range(len(grid)):\\n            numMax, numMax1= 0 , 0\\n            for j in range(len(grid)):\\n                if grid[i][j]>0:\\n                    a+=1\\n                if grid[i][j]>numMax:\\n                    numMax=grid[i][j]\\n                if grid[j][i]>numMax1:\\n                    numMax1=grid[j][i]\\n            a+=numMax+numMax1 \\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3095835,
                "title": "trivial-c-beats-100",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        auto rowCount = grid.size(), columnCount = grid.begin()->size();\\n        auto sumMaxAmongRows = 0, sumMaxAmongColumns = 0, sumNonZero = 0;\\n        for (auto i = 0; i < rowCount; ++i) {\\n            auto ma = 0;\\n            for (auto j = 0; j < columnCount; ++j) {\\n                ma = max(ma, grid[i][j]);\\n                if (grid[i][j] > 0) ++sumNonZero;\\n            }\\n            sumMaxAmongRows += ma;\\n        }\\n        for (auto j = 0; j < columnCount; ++j) {\\n            auto ma = 0;\\n            for (auto i = 0; i < rowCount; ++i) {\\n                ma = max(ma, grid[i][j]);\\n            }\\n            sumMaxAmongColumns += ma;\\n        }\\n        return sumNonZero + sumMaxAmongRows + sumMaxAmongColumns;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        auto rowCount = grid.size(), columnCount = grid.begin()->size();\\n        auto sumMaxAmongRows = 0, sumMaxAmongColumns = 0, sumNonZero = 0;\\n        for (auto i = 0; i < rowCount; ++i) {\\n            auto ma = 0;\\n            for (auto j = 0; j < columnCount; ++j) {\\n                ma = max(ma, grid[i][j]);\\n                if (grid[i][j] > 0) ++sumNonZero;\\n            }\\n            sumMaxAmongRows += ma;\\n        }\\n        for (auto j = 0; j < columnCount; ++j) {\\n            auto ma = 0;\\n            for (auto i = 0; i < rowCount; ++i) {\\n                ma = max(ma, grid[i][j]);\\n            }\\n            sumMaxAmongColumns += ma;\\n        }\\n        return sumNonZero + sumMaxAmongRows + sumMaxAmongColumns;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3075436,
                "title": "c",
                "content": "```\\nint projectionArea(int** grid, int gridSize, int* gridColSize){\\n    int m = gridSize ; \\n    int n = *gridColSize ;\\n    int ans = 0 ;\\n    //case 1:\\n    for(int i = 0 ; i < m; i++){\\n        for(int j = 0 ; j < n ; j++){\\n            ans += (grid[i][j] > 0) ;\\n        }\\n    }\\n    \\n    //case 2 :\\n    for(int i = 0 ; i < m ;i++){\\n        int max = grid[i][0] ;\\n        for(int j = 1 ; j < n ;j++)\\n            max = fmax( max, grid[i][j]) ;\\n        ans += max ;\\n    }\\n    //case 3:\\n    for(int j = 0; j < n ; j++){\\n        int max = grid[0][j] ;\\n        for(int i = 1; i < m; i++)\\n            max = fmax(max, grid[i][j]) ;\\n        ans += max ;\\n    }\\n    return ans ;\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nint projectionArea(int** grid, int gridSize, int* gridColSize){\\n    int m = gridSize ; \\n    int n = *gridColSize ;\\n    int ans = 0 ;\\n    //case 1:\\n    for(int i = 0 ; i < m; i++){\\n        for(int j = 0 ; j < n ; j++){\\n            ans += (grid[i][j] > 0) ;\\n        }\\n    }\\n    \\n    //case 2 :\\n    for(int i = 0 ; i < m ;i++){\\n        int max = grid[i][0] ;\\n        for(int j = 1 ; j < n ;j++)\\n            max = fmax( max, grid[i][j]) ;\\n        ans += max ;\\n    }\\n    //case 3:\\n    for(int j = 0; j < n ; j++){\\n        int max = grid[0][j] ;\\n        for(int i = 1; i < m; i++)\\n            max = fmax(max, grid[i][j]) ;\\n        ans += max ;\\n    }\\n    return ans ;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3072857,
                "title": "c-beats-100-time-complexity",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int ProjectionArea(int[][] grid) {\\n        var n = grid.Length;\\n        int zView = 0, xView = 0, yView = 0;\\n\\n        for (var i = 0; i < n; i++)\\n        {\\n            var yMax = 0;\\n            var xMax = 0;\\n\\n            for (var j = 0; j < n; j++)\\n            {\\n                if (grid[j][i] > yMax)\\n                    yMax = grid[j][i];\\n\\n                if (grid[i][j] > xMax)\\n                    xMax = grid[i][j];\\n\\n                if (grid[i][j] <= 0) continue;\\n\\n                zView += 1;\\n            }\\n\\n            xView += xMax;\\n            yView += yMax;\\n        }\\n\\n        var area = zView + xView + yView;\\n\\n        return area;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int ProjectionArea(int[][] grid) {\\n        var n = grid.Length;\\n        int zView = 0, xView = 0, yView = 0;\\n\\n        for (var i = 0; i < n; i++)\\n        {\\n            var yMax = 0;\\n            var xMax = 0;\\n\\n            for (var j = 0; j < n; j++)\\n            {\\n                if (grid[j][i] > yMax)\\n                    yMax = grid[j][i];\\n\\n                if (grid[i][j] > xMax)\\n                    xMax = grid[i][j];\\n\\n                if (grid[i][j] <= 0) continue;\\n\\n                zView += 1;\\n            }\\n\\n            xView += xMax;\\n            yView += yMax;\\n        }\\n\\n        var area = zView + xView + yView;\\n\\n        return area;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3072214,
                "title": "simple-and-short-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int result = 0;\\n        for (int i = 0; i < grid.length; i++) {\\n            int xz = 0, yz = 0;\\n            for (int j = 0; j < grid[i].length; j++) {\\n                result += grid[i][j] > 0 ? 1 : 0;\\n                xz = Math.max(grid[i][j], xz);\\n                yz = Math.max(grid[j][i], yz);\\n            }\\n            result += xz + yz;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int result = 0;\\n        for (int i = 0; i < grid.length; i++) {\\n            int xz = 0, yz = 0;\\n            for (int j = 0; j < grid[i].length; j++) {\\n                result += grid[i][j] > 0 ? 1 : 0;\\n                xz = Math.max(grid[i][j], xz);\\n                yz = Math.max(grid[j][i], yz);\\n            }\\n            result += xz + yz;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3071290,
                "title": "java-solution",
                "content": "# Complexity\\n- Time complexity: O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n\\n        int row = grid.length;\\n        int colm = row;\\n        \\n        int ans = 0;\\n\\n        for(int i=0; i<row; i++){\\n            int val1 = 0;\\n            int val2 = 0;\\n            for(int j=0; j<colm; j++){\\n\\n                if(grid[i][j] > 0){ ans++; }\\n                val1 = Math.max(val1,grid[i][j]);\\n                val2 = Math.max(val2,grid[j][i]);\\n\\n            }\\n            ans += val1 + val2;\\n        }\\n\\n        return ans;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n\\n        int row = grid.length;\\n        int colm = row;\\n        \\n        int ans = 0;\\n\\n        for(int i=0; i<row; i++){\\n            int val1 = 0;\\n            int val2 = 0;\\n            for(int j=0; j<colm; j++){\\n\\n                if(grid[i][j] > 0){ ans++; }\\n                val1 = Math.max(val1,grid[i][j]);\\n                val2 = Math.max(val2,grid[j][i]);\\n\\n            }\\n            ans += val1 + val2;\\n        }\\n\\n        return ans;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3063013,
                "title": "beats-99-java-o-n-2-time-complexity-easy-to-understand",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n\\n        int result=0;\\n        int n=grid.length;\\n\\n\\n        for(int i=0;i<n;i++){\\n            int max1=grid[i][0];\\n            int max2=grid[0][i];\\n\\n            for(int j=0;j<n;j++){\\n\\n                if(grid[i][j]>0){\\n                    result++;\\n                }\\n\\n                max1=Math.max(max1,grid[i][j]);\\n                max2=Math.max(max2,grid[j][i]);\\n\\n            }\\n\\n            result+=max1+max2;\\n            \\n        }\\n\\n        return result;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n\\n        int result=0;\\n        int n=grid.length;\\n\\n\\n        for(int i=0;i<n;i++){\\n            int max1=grid[i][0];\\n            int max2=grid[0][i];\\n\\n            for(int j=0;j<n;j++){\\n\\n                if(grid[i][j]>0){\\n                    result++;\\n                }\\n\\n                max1=Math.max(max1,grid[i][j]);\\n                max2=Math.max(max2,grid[j][i]);\\n\\n            }\\n\\n            result+=max1+max2;\\n            \\n        }\\n\\n        return result;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3062532,
                "title": "99-6-with-explanation",
                "content": "# Intuition\\nDid what problem said.\\n\\n# Approach\\nAdding the blocks from point of view\\n1. taking whole space of grid (m*n).\\n2. Counting and removing zeros as they will not take area when look from above(XY)\\n3. Getting the max value from each row and adding to result it will give area when seen from left(XZ).\\n4. Transpose whole matrix (changing rows to column) and do the same operation as did in 3rd step it will give area from upper part (YZ).\\n\\nI have written axis according to the description might be different for you but will get the same answer.\\n \\n\\n# Code\\n```\\n\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        c=len(grid)*len(grid[0])\\n        for i in range(len(grid)):\\n            c-=grid[i].count(0)\\n        for i in range(len(grid)):\\n            c+=max(grid[i])\\n        grid=list(zip(*grid))\\n        for i in range(len(grid)):\\n            c+=max(grid[i])\\n        return c\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        c=len(grid)*len(grid[0])\\n        for i in range(len(grid)):\\n            c-=grid[i].count(0)\\n        for i in range(len(grid)):\\n            c+=max(grid[i])\\n        grid=list(zip(*grid))\\n        for i in range(len(grid)):\\n            c+=max(grid[i])\\n        return c\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3041728,
                "title": "python-60-ms",
                "content": "XY:\\n-Count non-zero grid[i][j] elements.\\n\\nZX:\\n-For every row (grid[i]), find the maximum element.\\n\\nYZ:\\n-For every column, find the maximum element.\\n\\n\\n```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n\\n        count = 0 \\n\\n        for i in range(len(grid)):\\n            count += max(grid[i]) #zx\\n            for j in range(len(grid[i])):\\n                if grid[i][j] > 0: #xy\\n                    count += 1\\n\\n        #yz\\n        for j in range(len(grid[0])):\\n            max_column = 0\\n            for i in range(len(grid)):\\n                max_column = max(max_column, grid[i][j])\\n            count += max_column\\n            \\n        return count\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n\\n        count = 0 \\n\\n        for i in range(len(grid)):\\n            count += max(grid[i]) #zx\\n            for j in range(len(grid[i])):\\n                if grid[i][j] > 0: #xy\\n                    count += 1\\n\\n        #yz\\n        for j in range(len(grid[0])):\\n            max_column = 0\\n            for i in range(len(grid)):\\n                max_column = max(max_column, grid[i][j])\\n            count += max_column\\n            \\n        return count\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3038041,
                "title": "easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n        m, n = len(grid), len(grid[0])\\n        mat_t = [[grid[r][c] for r in range(m)] for c in range(n)]\\n        area_xy = sum(1 for row in grid for v in row if v)\\n        area_xz = sum(max(row) for row in grid)\\n        area_yz = sum(max(row) for row in mat_t)\\n        return area_xy + area_xz + area_yz\\n\\n    \\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n        m, n = len(grid), len(grid[0])\\n        mat_t = [[grid[r][c] for r in range(m)] for c in range(n)]\\n        area_xy = sum(1 for row in grid for v in row if v)\\n        area_xz = sum(max(row) for row in grid)\\n        area_yz = sum(max(row) for row in mat_t)\\n        return area_xy + area_xz + area_yz\\n\\n    \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3035596,
                "title": "python-easiest",
                "content": "# Upvote it :)\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        summ = 0\\n        \"\"\"for XY projection\"\"\"\\n        for row in grid:\\n            for column in row:\\n                if column > 0:\\n                    summ += 1\\n        \\n        \"\"\"for XZ projection\"\"\"\\n        for row in grid:\\n            summ += max(row)\\n\\n        \"\"\"for YZ projection\"\"\"\\n        for column in range(len(grid[0])):\\n            maxx = 0\\n            for row in grid:\\n                maxx = max(maxx, row[column])\\n            summ += maxx\\n\\n        return summ\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        summ = 0\\n        \"\"\"for XY projection\"\"\"\\n        for row in grid:\\n            for column in row:\\n                if column > 0:\\n                    summ += 1\\n        \\n        \"\"\"for XZ projection\"\"\"\\n        for row in grid:\\n            summ += max(row)\\n\\n        \"\"\"for YZ projection\"\"\"\\n        for column in range(len(grid[0])):\\n            maxx = 0\\n            for row in grid:\\n                maxx = max(maxx, row[column])\\n            summ += maxx\\n\\n        return summ\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3001978,
                "title": "beats-94-20-solutions-easy-to-understand-and-with-full-explanation-by-bolt-coding-in-python",
                "content": "If you look closely the top is sum of all numbers which is not 0. As each block is of 1x1 size to total area of top is number of block with non zero size\\n\\nComing to right side ZX plane - the shadow is max values of all lists inside the grid (as smaller block will be covered in shawdow of larger ones)\\n\\nLastly for left size that is ZY plane - shadow is always the max of each columns. So to get each column\\'s max we are using a nested for loop.\\n\\n# Complexity\\n- Time complexity:\\nO(n^2) since we are using nested loop in two of the three faces\\n\\n- Space complexity:\\nO(1) since we are using 3 variables\\n\\n# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        tot = 0\\n        n = len(grid)\\n        top = sum(grid[i][j] != 0 for i in range(n) for j in range(n))\\n        right = sum(max(grid[i]) for i in range(n))\\n        left = sum(max(grid[i][j] for i in range(n)) for j in range(n))\\n\\n        return right+top+left\\n\\n\\n```\\n\\nFor more such easy explanations, understanding Python, Needs Help with Doubts or Becoming an expert in Machine Learning Subscribe to My channel\\nBOLT CODING - https://www.youtube.com/@boltcoding",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        tot = 0\\n        n = len(grid)\\n        top = sum(grid[i][j] != 0 for i in range(n) for j in range(n))\\n        right = sum(max(grid[i]) for i in range(n))\\n        left = sum(max(grid[i][j] for i in range(n)) for j in range(n))\\n\\n        return right+top+left\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2980522,
                "title": "python-solution-by-finding-non-zero-and-maximums",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBottom: the number of non-zeros\\nOne side: sum of row maximums\\nThe other side: sum of col maximums\\n\\n\\n# Complexity\\n- Time complexity: `O(n^2)`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: `O(n)`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```python\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = sum(x != 0 for row in grid for x in row)\\n        row_max = [max(row) for row in grid]\\n        col_max = [max(col) for col in zip(*grid)]\\n        return n + sum(row_max) + sum(col_max)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        n = sum(x != 0 for row in grid for x in row)\\n        row_max = [max(row) for row in grid]\\n        col_max = [max(col) for col in zip(*grid)]\\n        return n + sum(row_max) + sum(col_max)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2968141,
                "title": "easy-to-read-javascript-100-mem-90-speed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\ncreate a function for each projection and add them all together\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nthe top view project required a simple count of blocks\\nthe x projection finds the largest number in each subarray of the grid array\\nthe y projection finds the largest number throughout all subarrays for that index and creates a new array. Then this array\\'s sum is returned.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n    function topProjection(grid){\\n        var topCount = 0;\\n        for (i=0;i<grid.length;++i){\\n            for (j=0;j<grid[i].length;++j){\\n                if (grid[i][j] > 0){\\n                   topCount++; \\n                }\\n            }\\n        }\\n        return topCount;\\n    }\\n      function yProjection(grid){\\n        //biggest in each index\\n        var maxArr = [];\\n        for (i=0;i<grid[0].length;++i){  \\n        size = grid.length;\\n            let newMax = 0;\\n            for (j=0;j<size;++j){\\n                  newMax = Math.max(grid[j][i], newMax);          \\n            }\\n            maxArr[i] = newMax;\\n        }\\n        const sum = maxArr.reduce((partialSum, a) => partialSum + a, 0);\\n        return  sum;\\n    }\\n     function xProjection(grid){\\n        //biggest in each sub array\\n        var count = 0;\\n        for (i=0;i<grid.length;++i){\\n            var bigNum = 0;\\n            for (j=0;j<grid[i].length;++j){\\n                if (grid[i][j]>bigNum){\\n                   bigNum = grid[i][j];\\n                }\\n            }\\n            count = bigNum + count;\\n        }\\n        return  count;\\n    }\\n    console.log(\\'top \\'+topProjection(grid) + \\'x \\'+ xProjection(grid) + \\'y \\'+ yProjection(grid));\\n   return topProjection(grid) + xProjection(grid) + yProjection(grid);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n    function topProjection(grid){\\n        var topCount = 0;\\n        for (i=0;i<grid.length;++i){\\n            for (j=0;j<grid[i].length;++j){\\n                if (grid[i][j] > 0){\\n                   topCount++; \\n                }\\n            }\\n        }\\n        return topCount;\\n    }\\n      function yProjection(grid){\\n        //biggest in each index\\n        var maxArr = [];\\n        for (i=0;i<grid[0].length;++i){  \\n        size = grid.length;\\n            let newMax = 0;\\n            for (j=0;j<size;++j){\\n                  newMax = Math.max(grid[j][i], newMax);          \\n            }\\n            maxArr[i] = newMax;\\n        }\\n        const sum = maxArr.reduce((partialSum, a) => partialSum + a, 0);\\n        return  sum;\\n    }\\n     function xProjection(grid){\\n        //biggest in each sub array\\n        var count = 0;\\n        for (i=0;i<grid.length;++i){\\n            var bigNum = 0;\\n            for (j=0;j<grid[i].length;++j){\\n                if (grid[i][j]>bigNum){\\n                   bigNum = grid[i][j];\\n                }\\n            }\\n            count = bigNum + count;\\n        }\\n        return  count;\\n    }\\n    console.log(\\'top \\'+topProjection(grid) + \\'x \\'+ xProjection(grid) + \\'y \\'+ yProjection(grid));\\n   return topProjection(grid) + xProjection(grid) + yProjection(grid);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2951367,
                "title": "python3-concise-solution-beats-99",
                "content": "# Code\\n```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        xy = sum(i > 0 for s in grid for i in s)\\n        xz = sum(max(s) for s in grid)\\n        yz = sum(max(s[i] for s in grid) for i in range(len(grid)))\\n        return xy + xz + yz\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def projectionArea(self, grid: List[List[int]]) -> int:\\n        xy = sum(i > 0 for s in grid for i in s)\\n        xz = sum(max(s) for s in grid)\\n        yz = sum(max(s[i] for s in grid) for i in range(len(grid)))\\n        return xy + xz + yz\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2941639,
                "title": "accepted-swift",
                "content": "```\\nclass Solution {\\n    func projectionArea(_ grid: [[Int]]) -> Int {\\n        \\n        let x = grid\\n            .map { $0.filter({ $0 != 0 }).count }\\n            .reduce(0, +)\\n        \\n        let y = grid\\n            .map { $0.max()! }\\n            .reduce(0, +)\\n        \\n        let z = grid.indices\\n            .map { i in grid.map({ $0[i] }).max()! }\\n            .reduce(0, +)\\n        \\n        return x + y + z\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func projectionArea(_ grid: [[Int]]) -> Int {\\n        \\n        let x = grid\\n            .map { $0.filter({ $0 != 0 }).count }\\n            .reduce(0, +)\\n        \\n        let y = grid\\n            .map { $0.max()! }\\n            .reduce(0, +)\\n        \\n        let z = grid.indices\\n            .map { i in grid.map({ $0[i] }).max()! }\\n            .reduce(0, +)\\n        \\n        return x + y + z\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2936821,
                "title": "python-numpy-solution",
                "content": "Will take more space but clearer \\n# Code\\n```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n        import numpy as np\\n        grid = np.array(grid)\\n        return (grid != 0).sum() + grid.max(axis=0).sum() + grid.max(axis=1).sum()\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def projectionArea(self, grid):\\n        \"\"\"\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        \"\"\"\\n        import numpy as np\\n        grid = np.array(grid)\\n        return (grid != 0).sum() + grid.max(axis=0).sum() + grid.max(axis=1).sum()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2931159,
                "title": "c-solution-with-explanation",
                "content": "# Intuition\\nThis question is all about visualisation. If you can visualise the projections you can easily understand the approach.\\n\\n# Approach\\n\\n![WhatsApp Image 2022-12-20 at 12.25.14 PM.jpeg](https://assets.leetcode.com/users/images/743835ac-f7d9-4b0e-9241-91bcc84f29fb_1671519336.9855208.jpeg)\\n\\nFor top view - \\nAll the elements will be seen except for element which are 0\\n\\nFor front view - \\nAlways the element which is largest in that particular column (refer image case 4 & 5) \\nTotal will be sum of all the largest elements in each column.\\n\\nFor side view -\\nAlways the element which is largest in that particular row(refer image case 4 & 5))\\nTotal will be sum of all the largest elements in each row.\\n\\n\\n# Complexity\\n- Time complexity:\\n0(n^2)\\n\\n- Space complexity:\\n0(1)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& g) {\\n        int p1=0, p2=0, p3=0;\\n        int n = g.size();\\n        //for top view\\n        for(int i=0; i<n; i++)\\n            for(int j=0; j<n; j++)\\n                if(g[i][j])\\n                    p1++;\\n\\n        for(int i=0; i<n; i++)\\n        {\\n            int max_val = INT_MIN;\\n            for(int j=0; j<n; j++)\\n            {\\n                if(g[i][j] > max_val)\\n                    max_val = g[i][j];\\n            }\\n            p2 += max_val;\\n        }\\n\\n        for(int j=0; j<n;j++)\\n        {\\n            int max_val = INT_MIN;\\n            for(int i=0; i<n;i++)\\n            {\\n                if(g[i][j]>max_val)\\n                    max_val =g[i][j];\\n            }\\n            p3 += max_val;\\n        }\\n        return p1+p2+p3;\\n    }\\n};\\n\\n```\\n\\nUpvote if you like it.\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& g) {\\n        int p1=0, p2=0, p3=0;\\n        int n = g.size();\\n        //for top view\\n        for(int i=0; i<n; i++)\\n            for(int j=0; j<n; j++)\\n                if(g[i][j])\\n                    p1++;\\n\\n        for(int i=0; i<n; i++)\\n        {\\n            int max_val = INT_MIN;\\n            for(int j=0; j<n; j++)\\n            {\\n                if(g[i][j] > max_val)\\n                    max_val = g[i][j];\\n            }\\n            p2 += max_val;\\n        }\\n\\n        for(int j=0; j<n;j++)\\n        {\\n            int max_val = INT_MIN;\\n            for(int i=0; i<n;i++)\\n            {\\n                if(g[i][j]>max_val)\\n                    max_val =g[i][j];\\n            }\\n            p3 += max_val;\\n        }\\n        return p1+p2+p3;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2923145,
                "title": "easy-js-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n   let res =0;\\n   for(let i=0; i<grid.length; i++){\\n       let arr=[];\\n       res+= Math.max(...grid[i])\\n       for(let j=0; j<grid.length; j++){\\n           arr.push(grid[j][i])\\n           if(grid[i][j]>0){\\n               res++;\\n           }\\n       }\\n       res+=Math.max(...arr);\\n   } \\n   return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} grid\\n * @return {number}\\n */\\nvar projectionArea = function(grid) {\\n   let res =0;\\n   for(let i=0; i<grid.length; i++){\\n       let arr=[];\\n       res+= Math.max(...grid[i])\\n       for(let j=0; j<grid.length; j++){\\n           arr.push(grid[j][i])\\n           if(grid[i][j]>0){\\n               res++;\\n           }\\n       }\\n       res+=Math.max(...arr);\\n   } \\n   return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2920955,
                "title": "one-pass-efficient-kotlin-solution",
                "content": "```\\nclass Solution {\\n    fun projectionArea(grid: Array<IntArray>): Int {\\n        var result = 0\\n        val n = grid.size\\n        for (i in 0..n-1) {\\n            var x = 0\\n            var y = 0\\n            for (j in 0..n-1) {\\n                x = maxOf(x, grid[i][j])\\n                y = maxOf(y, grid[j][i])\\n                if (grid[i][j] != 0) result++\\n            }\\n            result += x + y\\n        }\\n\\n        return result\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun projectionArea(grid: Array<IntArray>): Int {\\n        var result = 0\\n        val n = grid.size\\n        for (i in 0..n-1) {\\n            var x = 0\\n            var y = 0\\n            for (j in 0..n-1) {\\n                x = maxOf(x, grid[i][j])\\n                y = maxOf(y, grid[j][i])\\n                if (grid[i][j] != 0) result++\\n            }\\n            result += x + y\\n        }\\n\\n        return result\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2914709,
                "title": "java-o-n-2-time-complexity",
                "content": "# Intuition\\nProjections in xz-plane and yz-plane can be determined by finding maximum row-wise and column-wise tower heights.\\nProjection on xy-plane is determined by observing presence or absence of tower at that location.\\n\\n# Approach\\nyz-projections are determined by finding maximum row-wise tower heights.\\n```\\nint[] yzProjections = new int[grid.length];\\nfor(int i=0; i<grid.length; i++){\\n    int highestShadow = 0;\\n    for(int j=0; j<grid[0].length; j++){\\n        highestShadow = Math.max(highestShadow, grid[i][j]);\\n    }\\n    yzProjections[i] = highestShadow;\\n}\\n```\\n\\nxz-projections are determined by finding maximum column-wise tower heights.\\n```\\nint[] xzProjections = new int[grid[0].length];\\nfor(int j=0; j<grid[0].length; j++){\\n    int highestShadow = 0;\\n    for(int i=0; i<grid.length; i++){\\n        highestShadow = Math.max(highestShadow, grid[i][j]);\\n    }\\n    xzProjections[j] = highestShadow;\\n}\\n```\\n\\nxy-plane projections are determined by observing presence or absence of tower at that location.\\n```\\nint[][] xyProjections = new int[grid.length][grid[0].length];\\nfor(int i=0; i<grid.length; i++){\\n    for(int j=0; j<grid[0].length; j++){\\n        if(grid[i][j] > 0){\\n            xyProjections[i][j] = 1;\\n        }\\n    }\\n}\\n```\\n\\nAt the end, we sum all the projections.\\n\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(n^2) \\nwe can reduce space complexity to O(1) - We don\\'t have to create arrays to store the different projections. We can add highest shadows to a variable and return it.\\n\\n# Code\\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int[] yzProjections = new int[grid.length];\\n        for(int i=0; i<grid.length; i++){\\n            int highestShadow = 0;\\n            for(int j=0; j<grid[0].length; j++){\\n                highestShadow = Math.max(highestShadow, grid[i][j]);\\n            }\\n            yzProjections[i] = highestShadow;\\n        }\\n\\n        int[] xzProjections = new int[grid[0].length];\\n        for(int j=0; j<grid[0].length; j++){\\n            int highestShadow = 0;\\n            for(int i=0; i<grid.length; i++){\\n                highestShadow = Math.max(highestShadow, grid[i][j]);\\n            }\\n            xzProjections[j] = highestShadow;\\n        }\\n\\n        int[][] xyProjections = new int[grid.length][grid[0].length];\\n        for(int i=0; i<grid.length; i++){\\n            for(int j=0; j<grid[0].length; j++){\\n                if(grid[i][j] > 0){\\n                    xyProjections[i][j] = 1;\\n                }\\n            }\\n        }\\n\\n        int yzProjectionArea = 0;\\n        for(int i=0; i<grid.length; i++){\\n            yzProjectionArea += yzProjections[i];\\n        }\\n\\n        int xzProjectionArea = 0;\\n        for(int j=0; j<grid[0].length; j++){\\n            xzProjectionArea += xzProjections[j];\\n        }\\n\\n        int xyProjectionArea = 0;\\n        for(int i=0; i<grid.length; i++){\\n            for(int j=0; j<grid[0].length; j++){\\n                if(xyProjections[i][j] == 1){\\n                    xyProjectionArea++;\\n                }\\n            }\\n        }\\n\\n        return yzProjectionArea + xzProjectionArea + xyProjectionArea;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nint[] yzProjections = new int[grid.length];\\nfor(int i=0; i<grid.length; i++){\\n    int highestShadow = 0;\\n    for(int j=0; j<grid[0].length; j++){\\n        highestShadow = Math.max(highestShadow, grid[i][j]);\\n    }\\n    yzProjections[i] = highestShadow;\\n}\\n```\n```\\nint[] xzProjections = new int[grid[0].length];\\nfor(int j=0; j<grid[0].length; j++){\\n    int highestShadow = 0;\\n    for(int i=0; i<grid.length; i++){\\n        highestShadow = Math.max(highestShadow, grid[i][j]);\\n    }\\n    xzProjections[j] = highestShadow;\\n}\\n```\n```\\nint[][] xyProjections = new int[grid.length][grid[0].length];\\nfor(int i=0; i<grid.length; i++){\\n    for(int j=0; j<grid[0].length; j++){\\n        if(grid[i][j] > 0){\\n            xyProjections[i][j] = 1;\\n        }\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int projectionArea(int[][] grid) {\\n        int[] yzProjections = new int[grid.length];\\n        for(int i=0; i<grid.length; i++){\\n            int highestShadow = 0;\\n            for(int j=0; j<grid[0].length; j++){\\n                highestShadow = Math.max(highestShadow, grid[i][j]);\\n            }\\n            yzProjections[i] = highestShadow;\\n        }\\n\\n        int[] xzProjections = new int[grid[0].length];\\n        for(int j=0; j<grid[0].length; j++){\\n            int highestShadow = 0;\\n            for(int i=0; i<grid.length; i++){\\n                highestShadow = Math.max(highestShadow, grid[i][j]);\\n            }\\n            xzProjections[j] = highestShadow;\\n        }\\n\\n        int[][] xyProjections = new int[grid.length][grid[0].length];\\n        for(int i=0; i<grid.length; i++){\\n            for(int j=0; j<grid[0].length; j++){\\n                if(grid[i][j] > 0){\\n                    xyProjections[i][j] = 1;\\n                }\\n            }\\n        }\\n\\n        int yzProjectionArea = 0;\\n        for(int i=0; i<grid.length; i++){\\n            yzProjectionArea += yzProjections[i];\\n        }\\n\\n        int xzProjectionArea = 0;\\n        for(int j=0; j<grid[0].length; j++){\\n            xzProjectionArea += xzProjections[j];\\n        }\\n\\n        int xyProjectionArea = 0;\\n        for(int i=0; i<grid.length; i++){\\n            for(int j=0; j<grid[0].length; j++){\\n                if(xyProjections[i][j] == 1){\\n                    xyProjectionArea++;\\n                }\\n            }\\n        }\\n\\n        return yzProjectionArea + xzProjectionArea + xyProjectionArea;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2891472,
                "title": "simple-and-intuitive-answer-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis problem can be split in three, as we are asked to compute the sum of three things. First, let\\'s focus on the area viewed from the \"top\" of the $$X-Y$$ plane. \\nThink of the grid as a skycraper city, like New York. Each value of the grid is the height of the skycraper at that position.\\nIf we were in an airplane watching this skycraper city from the top, counting what we see from there would be equivalent to counting how many skycrapers we see, that is (if we see a skycraper with height 0 as there being no skycraper) counting the amount of grid positions where the value is not 0.\\nThen we have to look at the $$X-Z$$ plane.\\nIf you think of what would appear in the shadow at each column of the projection, it will be the tallest building from all of the buildings between you and the shadow, that is the tallest building from the row, or $$max_j(grid[i][j])$$ for your column i. Therefore the projection being the sum of the projection of each column, the result would be $$\\\\sum_{i=0}^{n}max_j(grid[i][j])$$.\\nIn an analog way, for the $$X-Y$$ plane this would yield $$\\\\sum_{j=0}^{n}max_i(grid[i][j])$$. The final result would be the sum of these three quantities.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe will go through the grid to find the maximum of each row and the maximum of each column of the grid, which correspond to the different sticks of the shadow we see by looking from the $$X-Z$$ plane and the $$Y-Z$$ plane, and additionally counting how much buildings we see, that is how many of the grid units have a non zero component.\\nWe can do this in one run instead of going through the grid 3 times for each of our three components.\\n\\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nWe have to go through every square of the grid once. This means as many steps as squares in the grid, so $$n^2$$. Then we add all the maximums in linear time, $$O(n)$$, which is overshadowed by the dominating $$O(n^2)$$.\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nWe have created two auxiliary vectors, one for the row maxima and one for the column maxima. They are of length the amount of rows and the amount of columns of the grid respectively, so $$n$$. We therefore use $$O(n)$$ auxiliary space.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int totalNotNull = 0;\\n        vector<int>max_row(n,0),max_col(n,0);\\n        for (int i=0;i<n;i++){\\n            for (int j=0;j<n;j++){\\n                max_row[i] = max(max_row[i],grid[i][j]);\\n                max_col[j] = max(max_col[j],grid[i][j]);\\n                if (grid[i][j] != 0) totalNotNull++;\\n            }\\n        }\\n    int sum = 0;\\n    sum += totalNotNull;\\n    for (int i=0;i<n;i++){\\n        sum += max_col[i] + max_row[i];\\n    }\\n    return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int projectionArea(vector<vector<int>>& grid) {\\n        int n = grid.size();\\n        int totalNotNull = 0;\\n        vector<int>max_row(n,0),max_col(n,0);\\n        for (int i=0;i<n;i++){\\n            for (int j=0;j<n;j++){\\n                max_row[i] = max(max_row[i],grid[i][j]);\\n                max_col[j] = max(max_col[j],grid[i][j]);\\n                if (grid[i][j] != 0) totalNotNull++;\\n            }\\n        }\\n    int sum = 0;\\n    sum += totalNotNull;\\n    for (int i=0;i<n;i++){\\n        sum += max_col[i] + max_row[i];\\n    }\\n    return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564617,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1564820,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1566133,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1565489,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1565357,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1573482,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1572831,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1852698,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1964068,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1823231,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1564617,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1564820,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1566133,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1565489,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1565357,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1573482,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1572831,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1852698,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1964068,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            },
            {
                "id": 1823231,
                "content": [
                    {
                        "username": "Happy4892",
                        "content": "The problem description is very ambiguous and confusing. I actually spent 90% of my time to understand what does the input imply when I tried to solve this problem. If you want to make problems complicated to solve, you should increase the complexity by making the algorithm itself hard to implement or think of, not making bad wordings and trying to confuse people. If I met this type of problem description in an actual interview, I might not even proceed with it."
                    },
                    {
                        "username": "xd386",
                        "content": "can any body explain me the means of the first input?"
                    },
                    {
                        "username": "someguyidkman",
                        "content": "If anyone still has issue with this:\\ngrid = [[1,2],[3,4]] is where each element in the grid is a row and each element within each row is a cell with the amount of blocks stacked on top of each other. So in this example we have the first row with a single 1x1x1 block next to 2 blocks (all blocks are 1x1x1 units so 1unit^3) and below that we have another row, since 3 is in the same position [0] in the row list as 1 (also [0]), then they are in the same column. \\n\\na visual 2D-bird\\'s-eyeview representation of this would be like Kapple (user below) described it:\\n[[1,2],\\n[3,4]]\\nwhere each number represents a height in units, which correlates with the amount of blocks stacked up, 0 being no blocks being there. The problem is asking you to return the amount of \\'visible\\' 1x1 2D squares that make up the surface area of each 3D figure/shape.\\n\\nHope this helped! glhf <3"
                    },
                    {
                        "username": "Kapple",
                        "content": "Instead of looking at the matrix in inline like this [[2,3,2],[2,1,2],[2,2,2]] look at it using a square as below:\\n[2,3,2],\\n[2,1,2],\\n[2,2,2]\\n\\nConsider all the numbers as a building of that height. If it is 0 then there is no building at that place. \\nWhat you have to calculate is the shadow the buildings will create if the light is thrown from the top, front, and side. \\nFrom the top - since all the numbers are > 0 shadow length = 3x3 = 9.\\nFrom the front - 1st row is having 3 as max height, 2nd row is having 2, and 3rd row is also having 2. = 7\\nFrom the side - 1st column is having 2 as max height, 2nd column is having 3, and 3rd column is also having 2. = 7\\nTotal = 9 + 7 + 7 = 23"
                    },
                    {
                        "username": "amanrai942",
                        "content": "thanks mate"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "It drove me nuts."
                    },
                    {
                        "username": "wise",
                        "content": "the description is so awful, i even can\\'t understand the input"
                    },
                    {
                        "username": "amitmpatil1996",
                        "content": "Not able to understand the description of the question. Also the input-output is not clear."
                    },
                    {
                        "username": "natalie11594",
                        "content": "Could someone explain the question?"
                    },
                    {
                        "username": "quandaica",
                        "content": "If you don't understand the given examples:\ngrid [x][y]: x, y is coordinate on the ground.\ngrid[x][y] = c -> there are c cubes on the ground at position [x][y]\n\nExample 1:\n`grid = [[2]]` => `5`\n`grid[0][0] = 2` : position with coordinate [0][0]: there are 2 cubes:\n- there is 1 location on x that have cube [0][0] -> shadow on x = 1\n- there are 2 cubes stacked, height of the columns is 2 -> shadow on y, z are equal = 2\n\nExample 2: `grid = [[1,0],[0,2]]` => `8`\n```\ngrid =  [[1,0], [0,2]]\ngrid[0][0] = 1\ngrid[0][1] = 0\ngrid[1][0] = 0\ngrid[1][1] = 2\n````\n-> 3 cube in total\nshadow on x: there are 2 positions on the ground that have cube:  `[0,0], [1,1]` => `shadow = 2`\nshadow on y:  get max value of coordinate\n    compare value with the same [y]\n    `max(grid[0][0], grid[1][0]) + max(grid[0][1], grid[1][1])` = `1 + 2` = `3`\nshadow on z:\n    compare value with the same[x]\n    `max(grid[0]) + max(grid[1])` = `1 + 2` = `3`\n-> total_shadow = 8"
                    },
                    {
                        "username": "Kavdan",
                        "content": "Why do people write that tasks should be clear and that they would leave the interview if they were given such a confusing task. Firstly, you grow only when you overcome difficulties, what is the point in tasks if you understand them all and can solve them without problems. Understanding the task is also an obstacle that you need to overcome in order to become stronger. As for work, don't worry, if you leave, then there will be a few hundred more people in your place who can understand and solve the problem. I advise you to leave the interview only in one case, if there is an Asian there. There's no chance to get job"
                    },
                    {
                        "username": "CustomAP",
                        "content": "For those who are confused what input actually means. Use this question to refer to input description - https://leetcode.com/problems/surface-area-of-3d-shapes\\nSimilar question, but input meaning is explained better"
                    }
                ]
            }
        ]
    },
    {
        "title": "Add to Array-Form of Integer",
        "question_content": "<p>The <strong>array-form</strong> of an integer <code>num</code> is an array representing its digits in left to right order.</p>\n\n<ul>\n\t<li>For example, for <code>num = 1321</code>, the array form is <code>[1,3,2,1]</code>.</li>\n</ul>\n\n<p>Given <code>num</code>, the <strong>array-form</strong> of an integer, and an integer <code>k</code>, return <em>the <strong>array-form</strong> of the integer</em> <code>num + k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = [1,2,0,0], k = 34\n<strong>Output:</strong> [1,2,3,4]\n<strong>Explanation:</strong> 1200 + 34 = 1234\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = [2,7,4], k = 181\n<strong>Output:</strong> [4,5,5]\n<strong>Explanation:</strong> 274 + 181 = 455\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = [2,1,5], k = 806\n<strong>Output:</strong> [1,0,2,1]\n<strong>Explanation:</strong> 215 + 806 = 1021\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= num[i] &lt;= 9</code></li>\n\t<li><code>num</code> does not contain any leading zeros except for the zero itself.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 234488,
                "title": "java-c-python-take-k-itself-as-a-carry",
                "content": "## **Explanation**\\nTake `K` as a carry.\\nAdd it to the lowest digit,\\nUpdate carry `K`,\\nand keep going to higher digit.\\n<br>\\n\\n## **Complexity**\\nInsert will take `O(1)` time or `O(N)` time on shifting, depending on the data stucture.\\nBut in this problem `K` is at most 5 digit so this is restricted.\\nSo this part doesn\\'t matter.\\n\\nThe overall time complexity is `O(N)`.\\nFor space I\\'ll say `O(1)`\\n<br>\\n\\n**Java**\\n```java\\n    public List<Integer> addToArrayForm(int[] A, int K) {\\n        List<Integer> res = new LinkedList<>();\\n        for (int i = A.length - 1; i >= 0; --i) {\\n            res.add(0, (A[i] + K) % 10);\\n            K = (A[i] + K) / 10;\\n        }\\n        while (K > 0) {\\n            res.add(0, K % 10);\\n            K /= 10;\\n        }\\n        return res;\\n    }\\n```\\n**Java**\\nWith one loop.\\n```java\\n    public List<Integer> addToArrayForm(int[] A, int K) {\\n        List res = new LinkedList<>();\\n        for (int i = A.length - 1; i >= 0 || K > 0; --i) {\\n            res.add(0, (i >= 0 ? A[i] + K : K) % 10);\\n            K = (i >= 0 ? A[i] + K : K) / 10;\\n        }\\n        return res;\\n    }\\n```\\n\\n**C++:**\\n```cpp\\n    vector<int> addToArrayForm(vector<int> A, int K) {\\n        for (int i = A.size() - 1; i >= 0 && K > 0; --i) {\\n            A[i] += K;\\n            K = A[i] / 10;\\n            A[i] %= 10;\\n        }\\n        while (K > 0) {\\n            A.insert(A.begin(), K % 10);\\n            K /= 10;\\n        }\\n        return A;\\n    }\\n```\\n\\n**Python:**\\n```py\\n    def addToArrayForm(self, A, K):\\n        for i in range(len(A) - 1, -1, -1):\\n            K, A[i] = divmod(A[i] + K, 10)\\n        return [int(i) for i in str(K)] + A if K else A\\n```\\n",
                "solutionTags": [],
                "code": "```java\\n    public List<Integer> addToArrayForm(int[] A, int K) {\\n        List<Integer> res = new LinkedList<>();\\n        for (int i = A.length - 1; i >= 0; --i) {\\n            res.add(0, (A[i] + K) % 10);\\n            K = (A[i] + K) / 10;\\n        }\\n        while (K > 0) {\\n            res.add(0, K % 10);\\n            K /= 10;\\n        }\\n        return res;\\n    }\\n```\n```java\\n    public List<Integer> addToArrayForm(int[] A, int K) {\\n        List res = new LinkedList<>();\\n        for (int i = A.length - 1; i >= 0 || K > 0; --i) {\\n            res.add(0, (i >= 0 ? A[i] + K : K) % 10);\\n            K = (i >= 0 ? A[i] + K : K) / 10;\\n        }\\n        return res;\\n    }\\n```\n```cpp\\n    vector<int> addToArrayForm(vector<int> A, int K) {\\n        for (int i = A.size() - 1; i >= 0 && K > 0; --i) {\\n            A[i] += K;\\n            K = A[i] / 10;\\n            A[i] %= 10;\\n        }\\n        while (K > 0) {\\n            A.insert(A.begin(), K % 10);\\n            K /= 10;\\n        }\\n        return A;\\n    }\\n```\n```py\\n    def addToArrayForm(self, A, K):\\n        for i in range(len(A) - 1, -1, -1):\\n            K, A[i] = divmod(A[i] + K, 10)\\n        return [int(i) for i in str(K)] + A if K else A\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3187080,
                "title": "simplest-solution-full-explanation-c-python3-java",
                "content": "# Consider\\uD83D\\uDC4D\\n```\\n                    Please Upvote If You Find It Helpful\\n```\\n# Intuition\\nWe are taking `k` as carry.\\nWe start from the last or lowest digit in array `num` add `k`.\\nThen **update** `k` and move untill the highest digit.\\nAfter traversing array if carry is  **>** `0` then we add it to begining of `num`.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n    Example: `num` = [2,1,5], `k` = 806\\n    At index 2 num = [2, 1, 811] \\n    So, `k` = 81 and `num` = [2, 1, 1]\\n\\n    At index 1 num = [2, 82, 1]\\n    So, `k` = 8 and `num` = [2, 2, 1]\\n\\n    At index 0 num = [10, 2, 1]\\n    So, `k` = 1 and `num` = [0, 2, 1]\\n\\n    Now `k` > 0\\n    So, we add at the beginning of num\\n    `num` = [1, 0, 2, 1]\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        for(int i=num.size()-1;i>=0;i--){\\n            num[i] += k;\\n            k = num[i]/10;\\n            num[i] %= 10;\\n        }\\n        while(k > 0){\\n            num.insert(num.begin(), k%10);\\n            k /= 10;\\n        }\\n        return num;\\n    }\\n};\\n```\\n```python []\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        for i in range(len(num) - 1, -1, -1):\\n            k, num[i] = divmod(num[i] + k, 10)\\n        while k:\\n            k, a = divmod(k, 10)\\n            num = [a] + num\\n        return num\\n```\\n```Java []\\npublic List<Integer> addToArrayForm(int[] num, int K) {\\n    List<Integer> res = new LinkedList<>();\\n    for (int i = num.length - 1; i >= 0; --i) {\\n        res.add(0, (num[i] + K) % 10);\\n        K = (num[i] + K) / 10;\\n    }\\n    while (K > 0) {\\n        res.add(0, K % 10);\\n        K /= 10;\\n    }\\n    return res;\\n}\\n```\\n\\n```\\n                    Give a \\uD83D\\uDC4D. It motivates me alot\\n```\\nLet\\'s Connect On [Linkedin](https://www.linkedin.com/in/naman-agarwal-0551aa1aa/)",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "Array"
                ],
                "code": "```\\n                    Please Upvote If You Find It Helpful\\n```\n```C++ []\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        for(int i=num.size()-1;i>=0;i--){\\n            num[i] += k;\\n            k = num[i]/10;\\n            num[i] %= 10;\\n        }\\n        while(k > 0){\\n            num.insert(num.begin(), k%10);\\n            k /= 10;\\n        }\\n        return num;\\n    }\\n};\\n```\n```python []\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        for i in range(len(num) - 1, -1, -1):\\n            k, num[i] = divmod(num[i] + k, 10)\\n        while k:\\n            k, a = divmod(k, 10)\\n            num = [a] + num\\n        return num\\n```\n```Java []\\npublic List<Integer> addToArrayForm(int[] num, int K) {\\n    List<Integer> res = new LinkedList<>();\\n    for (int i = num.length - 1; i >= 0; --i) {\\n        res.add(0, (num[i] + K) % 10);\\n        K = (num[i] + K) / 10;\\n    }\\n    while (K > 0) {\\n        res.add(0, K % 10);\\n        K /= 10;\\n    }\\n    return res;\\n}\\n```\n```\\n                    Give a \\uD83D\\uDC4D. It motivates me alot\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1287541,
                "title": "java-simple-o-max-n-logk-no-reverse-efficient-explained",
                "content": "# **Please UPVOTE if you find this post useful :)**\\n\\n<u><strong>Refer to the following github repsitory for more leetcode solutions<strong></u>\\nhttps://github.com/Akshaya-Amar/LeetCodeSolutions\\n\\n* <u>**COMPLEXITY**</u>\\n\\t* **Time: O(max(n, log<sub>10</sub>(k)))**, where **n** is the **length of the array** and **log<sub>10</sub>(k)** is the **number of digits** present in variable `k`.\\n\\t* **Space: O(max(n, log<sub>10</sub>(k)))**, not an in-place as we need space equal to the given k or length of array, whichever is maximum between the two, to store the elements.\\n\\n* <u>**BASIC IDEA**</u>\\nBasic Idea behind this implementation is to add the num array element one by one with the k\\neg:\\n`num[] = {1, 2, 3}` and `k = 45;`\\n\\n\\t* **1<sup>st</sup> Iteration:**\\n`k += num[len--]` --> k = k + num[2] --> k = 45 + 3 --> k = 48\\n`list.addFirst(k % 10)` --> list.addFirst(48 % 10) --> list.addFirst(8) --> [8]  \\n`k /= 10` --> k = k / 10 --> 48 / 10 --> k = 4\\n\\n\\t* **2<sup>nd</sup> Iteration:**\\n`k += num[len--]` --> k = k + num[1] --> k = 4 + 2 --> k = 6\\n`list.addFirst(k % 10)` --> list.addFirst(6 % 10) --> list.addFirst(6) --> [6, 8]\\n`k /= 10` --> k = k / 10 --> 6 / 10 --> k = 0\\n\\n\\t* **3<sup>rd</sup> Iteration:**\\n`k += num[len--]` --> k = k + num[0] --> k = 0 + 1 --> k = 1\\n`list.addFirst(k % 10)` --> list.addFirst(1 % 10) --> list.addFirst(1) --> [1, 6, 8]  **<--- Desired Output**\\n`k /= 10` --> k = k / 10 --> 1 / 10 --> k = 0\\n\\n\\t**Here, the loop will be executed 3 times as (length of num) > (number of digits in k) i.e. O(max(n, log<sub>10</sub>(k))), where n is the length of the array and log<sub>10</sub>(k) is the number of digits**\\n\\n<iframe src=\"https://leetcode.com/playground/UiX43koL/shared\" frameBorder=\"0\" width=\"100%\" height=\"400\"></iframe>\\n\\n<u><strong>Refer to the following github repsitory for more leetcode solutions<strong></u>\\nhttps://github.com/Akshaya-Amar/LeetCodeSolutions\\n\\n# **Please UPVOTE if you find this post useful :)**",
                "solutionTags": [
                    "Java"
                ],
                "code": "# **Please UPVOTE if you find this post useful :)**\\n\\n<u><strong>Refer to the following github repsitory for more leetcode solutions<strong></u>\\nhttps://github.com/Akshaya-Amar/LeetCodeSolutions\\n\\n* <u>**COMPLEXITY**</u>\\n\\t* **Time: O(max(n, log<sub>10</sub>(k)))**, where **n** is the **length of the array** and **log<sub>10</sub>(k)** is the **number of digits** present in variable `k`.\\n\\t* **Space: O(max(n, log<sub>10</sub>(k)))**, not an in-place as we need space equal to the given k or length of array, whichever is maximum between the two, to store the elements.\\n\\n* <u>**BASIC IDEA**</u>\\nBasic Idea behind this implementation is to add the num array element one by one with the k\\neg:\\n`num[] = {1, 2, 3}` and `k = 45;`\\n\\n\\t* **1<sup>st</sup> Iteration:**\\n`k += num[len--]` --> k = k + num[2] --> k = 45 + 3 --> k = 48\\n`list.addFirst(k % 10)` --> list.addFirst(48 % 10) --> list.addFirst(8) --> [8]  \\n`k /= 10` --> k = k / 10 --> 48 / 10 --> k = 4\\n\\n\\t* **2<sup>nd</sup> Iteration:**\\n`k += num[len--]` --> k = k + num[1] --> k = 4 + 2 --> k = 6\\n`list.addFirst(k % 10)` --> list.addFirst(6 % 10) --> list.addFirst(6) --> [6, 8]\\n`k /= 10` --> k = k / 10 --> 6 / 10 --> k = 0\\n\\n\\t* **3<sup>rd</sup> Iteration:**\\n`k += num[len--]` --> k = k + num[0] --> k = 0 + 1 --> k = 1\\n`list.addFirst(k % 10)` --> list.addFirst(1 % 10) --> list.addFirst(1) --> [1, 6, 8]  **<--- Desired Output**\\n`k /= 10` --> k = k / 10 --> 1 / 10 --> k = 0\\n\\n\\t**Here, the loop will be executed 3 times as (length of num) > (number of digits in k) i.e. O(max(n, log<sub>10</sub>(k))), where n is the length of the array and log<sub>10</sub>(k) is the number of digits**\\n\\n<iframe src=\"https://leetcode.com/playground/UiX43koL/shared\" frameBorder=\"0\" width=\"100%\" height=\"400\"></iframe>\\n\\n<u><strong>Refer to the following github repsitory for more leetcode solutions<strong></u>\\nhttps://github.com/Akshaya-Amar/LeetCodeSolutions\\n\\n# **Please UPVOTE if you find this post useful :)**",
                "codeTag": "Unknown"
            },
            {
                "id": 3187425,
                "title": "java-easy-two-approaches-math-100-faster",
                "content": "**Approach 1**\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> res=new LinkedList<>();\\n        int carry=0;\\n        int i=0;\\n\\t\\t/*We always start computing from array\\'s last element and k\\'s last digit and will \\n\\t\\tcompute sum and carry. We will iterate it till k and index of array both have existance. \\n\\t\\tIf one of them gets exhausted the for loop below will not work.*/\\n        for(i=num.length-1;i>=0 && k>0;i--){\\n            int temp=num[i];\\n            res.addFirst((temp+carry+(k%10))%10);\\n            carry=(temp+carry+(k%10))/10;\\n            k/=10;\\n        }\\n\\t\\t/*If for an instance your k is greater than the number that is present in the form of \\n\\t\\tarray then the below while loop will work.*/\\n        while(k!=0){\\n            int compute=(k%10)+carry;\\n            res.addFirst(compute%10);\\n            carry=compute/10;\\n            k/=10;\\n        }\\n\\t\\t/*If for an instance the number that is present in the form of array is greater than k \\n\\t\\tthen the below for loop will work.*/\\n        for(int r=i;r>=0;r--){\\n            int temp=num[r];\\n            res.addFirst((temp+carry)%10);\\n            carry=(temp+carry)/10;\\n        }\\n\\t\\t/*If there is some carry still remaining at last then add it to beginning of the \\n\\t\\tarraylist or linkedlist.*/\\n        if(carry!=0)\\n            res.addFirst(carry);\\n        return res;\\n    }\\n}\\n```\\n\\n**Approach 2 (incase someone doesn\\'t want to use LinkedList that is used in Approach 1 and want to use ArrayList only)**\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> res=new ArrayList<>();\\n        int carry=0;\\n        int i=0;\\n        for(i=num.length-1;i>=0 && k>0;i--){\\n            int temp=num[i];\\n            res.add(0,(temp+carry+(k%10))%10);\\n            carry=(temp+carry+(k%10))/10;\\n            k/=10;\\n        }\\n        while(k!=0){\\n            int compute=(k%10)+carry;\\n            res.add(0,compute%10);\\n            carry=compute/10;\\n            k/=10;\\n        }\\n        for(int r=i;r>=0;r--){\\n            int temp=num[r];\\n            res.add(0,(temp+carry)%10);\\n            carry=(temp+carry)/10;\\n        }\\n        if(carry!=0)\\n            res.add(0,carry);\\n        return res;\\n    }\\n}\\n```\\n\\n**Approach 3**\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> res=new LinkedList<>();\\n        int len=num.length-1;\\n        while(len>=0 || k>0){\\n            if(len>=0){\\n                k+=num[len--];\\n            }\\n            res.addFirst(k%10);\\n            k/=10;\\n        }\\n        return res;\\n    }\\n}\\n```\\n![image](https://assets.leetcode.com/users/images/7d843226-f217-4fe9-a80a-e940a877394b_1676433898.1173701.jpeg)\\n\\n",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Linked List",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> res=new LinkedList<>();\\n        int carry=0;\\n        int i=0;\\n\\t\\t/*We always start computing from array\\'s last element and k\\'s last digit and will \\n\\t\\tcompute sum and carry. We will iterate it till k and index of array both have existance. \\n\\t\\tIf one of them gets exhausted the for loop below will not work.*/\\n        for(i=num.length-1;i>=0 && k>0;i--){\\n            int temp=num[i];\\n            res.addFirst((temp+carry+(k%10))%10);\\n            carry=(temp+carry+(k%10))/10;\\n            k/=10;\\n        }\\n\\t\\t/*If for an instance your k is greater than the number that is present in the form of \\n\\t\\tarray then the below while loop will work.*/\\n        while(k!=0){\\n            int compute=(k%10)+carry;\\n            res.addFirst(compute%10);\\n            carry=compute/10;\\n            k/=10;\\n        }\\n\\t\\t/*If for an instance the number that is present in the form of array is greater than k \\n\\t\\tthen the below for loop will work.*/\\n        for(int r=i;r>=0;r--){\\n            int temp=num[r];\\n            res.addFirst((temp+carry)%10);\\n            carry=(temp+carry)/10;\\n        }\\n\\t\\t/*If there is some carry still remaining at last then add it to beginning of the \\n\\t\\tarraylist or linkedlist.*/\\n        if(carry!=0)\\n            res.addFirst(carry);\\n        return res;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> res=new ArrayList<>();\\n        int carry=0;\\n        int i=0;\\n        for(i=num.length-1;i>=0 && k>0;i--){\\n            int temp=num[i];\\n            res.add(0,(temp+carry+(k%10))%10);\\n            carry=(temp+carry+(k%10))/10;\\n            k/=10;\\n        }\\n        while(k!=0){\\n            int compute=(k%10)+carry;\\n            res.add(0,compute%10);\\n            carry=compute/10;\\n            k/=10;\\n        }\\n        for(int r=i;r>=0;r--){\\n            int temp=num[r];\\n            res.add(0,(temp+carry)%10);\\n            carry=(temp+carry)/10;\\n        }\\n        if(carry!=0)\\n            res.add(0,carry);\\n        return res;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> res=new LinkedList<>();\\n        int len=num.length-1;\\n        while(len>=0 || k>0){\\n            if(len>=0){\\n                k+=num[len--];\\n            }\\n            res.addFirst(k%10);\\n            k/=10;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1272816,
                "title": "c-fast-and-efficient-with-explanation",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome**\\n\\nContinuing the example of 123 + 912, we start with [1, 2, 3+912]. Then we perform the addition 3+912, leaving 915. The 5 stays as the digit, while we \\'carry\\' 910 into the next column which becomes 91.\\n\\nWe repeat this process with [1, 2+91, 5]. We have 93, where 3 stays and 90 is carried over as 9. Again, we have [1+9, 3, 5] which transforms into [1, 0, 3, 5].\\n```\\nclass Solution {\\npublic:\\nvector<int> addToArrayForm(vector<int> A, int K) {\\n    for(int i=A.size()-1;i>=0&&K>0;i--)\\n    {\\n        A[i]+=K;\\n        K=A[i]/10;\\n        A[i]%=10;\\n    }\\n    while(K>0)\\n    {\\n        A.insert(A.begin(),K%10);\\n        K/=10;\\n    } \\n    return A;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\nvector<int> addToArrayForm(vector<int> A, int K) {\\n    for(int i=A.size()-1;i>=0&&K>0;i--)\\n    {\\n        A[i]+=K;\\n        K=A[i]/10;\\n        A[i]%=10;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 3187149,
                "title": "c-faster-than-95-no-shortcut-mehthod-self-explanatory-code",
                "content": "# Code\\n\\n# Please Do Upvote!!!!\\n##### Connect with me on Linkedin -> https://www.linkedin.com/in/md-kamran-55b98521a/\\n\\n```\\n\\nclass Solution {\\npublic:\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        \\n        int carry = 0;\\n        int j = num.size() - 1;\\n\\n        while(j >= 0)\\n        {\\n\\n         int sum = num[j] + (k % 10) + carry;\\n         k /= 10;\\n\\n         num[j--] = sum % 10;\\n         carry = sum/10;\\n\\n        }\\n\\n        while(k > 0)\\n        {\\n\\n         int sum = (k % 10) + carry;\\n         k /= 10;\\n    \\n         num.insert(num.begin(), sum%10);\\n         carry = sum/10;\\n       \\n        }\\n\\n        if(carry > 0) num.insert(num.begin(), carry);\\n        \\n        return num;\\n    }\\n};\\n\\n```\\n![b62ab1be-232a-438f-9524-7d8ca4dbd5fe_1675328166.1161866.png](https://assets.leetcode.com/users/images/98b7adbc-5abf-45f7-9b5b-538574194654_1676344687.6513524.png)",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        \\n        int carry = 0;\\n        int j = num.size() - 1;\\n\\n        while(j >= 0)\\n        {\\n\\n         int sum = num[j] + (k % 10) + carry;\\n         k /= 10;\\n\\n         num[j--] = sum % 10;\\n         carry = sum/10;\\n\\n        }\\n\\n        while(k > 0)\\n        {\\n\\n         int sum = (k % 10) + carry;\\n         k /= 10;\\n    \\n         num.insert(num.begin(), sum%10);\\n         carry = sum/10;\\n       \\n        }\\n\\n        if(carry > 0) num.insert(num.begin(), carry);\\n        \\n        return num;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3186990,
                "title": "day-46-c-easiest-beginner-friendly-sol-o-max-n-log-k-time-and-o-max-n-log-k-space",
                "content": "# Intuition of this Problem:\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**NOTE - PLEASE READ APPROACH FIRST THEN SEE THE CODE. YOU WILL DEFINITELY UNDERSTAND THE CODE LINE BY LINE AFTER SEEING THE APPROACH.**\\n\\n# Approach for this Problem:\\n1. Initialize an empty vector \"ans\" to store the final result\\n2. Initialize \"carry\" to 0 and \"i\" to the index of the last digit of \"num\"\\n3. Loop while there is a digit left in k, or there are digits left in num, or there is a carry value.\\n4. Compute the sum by adding the carry, the last digit of k (if k has digits left) and the i-th digit of num (if num has digits left).\\n5. Compute the carry by taking the sum divided by 10.\\n6. Add the digit to the front of the \"ans\" vector by taking the sum modulo 10.\\n7. Decrement i and divide k by 10 (if applicable).\\n8. Reverse the \"ans\" vector and return it.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Humble Request:\\n- If my solution is helpful to you then please **UPVOTE** my solution, your **UPVOTE** motivates me to post such kind of solution.\\n- Please let me know in comments if there is need to do any improvement in my approach, code....anything.\\n- **Let\\'s connect on** https://www.linkedin.com/in/abhinash-singh-1b851b188\\n\\n![57jfh9.jpg](https://assets.leetcode.com/users/images/c2826b72-fb1c-464c-9f95-d9e578abcaf3_1674104075.4732099.jpeg)\\n\\n# Code:\\n```C++ []\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> ans;\\n        int n = num.size();\\n        int carry = 0, i = n-1;\\n        while (k > 0 || i >= 0 || carry > 0) {\\n            int sum = carry;\\n            if (k > 0) {\\n                int remainder = k % 10;\\n                sum += remainder;\\n                k = k / 10;\\n            }\\n            if (i >= 0) {\\n                sum += num[i];\\n                i--;\\n            }\\n            carry = sum / 10;\\n            ans.push_back(sum % 10);\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n        int n = num.length;\\n        int carry = 0, i = n-1;\\n        while (k > 0 || i >= 0 || carry > 0) {\\n            int sum = carry;\\n            if (k > 0) {\\n                int remainder = k % 10;\\n                sum += remainder;\\n                k = k / 10;\\n            }\\n            if (i >= 0) {\\n                sum += num[i];\\n                i--;\\n            }\\n            carry = sum / 10;\\n            ans.add(0, sum % 10);\\n        }\\n        return ans;\\n    }\\n}\\n\\n```\\n```Python []\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        ans = []\\n        n = len(num)\\n        carry = 0\\n        i = n - 1\\n        while k > 0 or i >= 0 or carry > 0:\\n            sum = carry\\n            if k > 0:\\n                remainder = k % 10\\n                sum += remainder\\n                k //= 10\\n            if i >= 0:\\n                sum += num[i]\\n                i -= 1\\n            carry = sum // 10\\n            ans.insert(0, sum % 10)\\n        return ans\\n\\n```\\n\\n# Time Complexity and Space Complexity:\\n- Time complexity: **O(max(N, log K))**, where N is the number of digits in \"num\" and K is the value of \"k\". We have to iterate over all digits in both \"num\" and \"k\" to compute the sum.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(max(N, log K))**, since the size of the output vector can be at most max(N, log K) + 1.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> ans;\\n        int n = num.size();\\n        int carry = 0, i = n-1;\\n        while (k > 0 || i >= 0 || carry > 0) {\\n            int sum = carry;\\n            if (k > 0) {\\n                int remainder = k % 10;\\n                sum += remainder;\\n                k = k / 10;\\n            }\\n            if (i >= 0) {\\n                sum += num[i];\\n                i--;\\n            }\\n            carry = sum / 10;\\n            ans.push_back(sum % 10);\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n        int n = num.length;\\n        int carry = 0, i = n-1;\\n        while (k > 0 || i >= 0 || carry > 0) {\\n            int sum = carry;\\n            if (k > 0) {\\n                int remainder = k % 10;\\n                sum += remainder;\\n                k = k / 10;\\n            }\\n            if (i >= 0) {\\n                sum += num[i];\\n                i--;\\n            }\\n            carry = sum / 10;\\n            ans.add(0, sum % 10);\\n        }\\n        return ans;\\n    }\\n}\\n\\n```\n```Python []\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        ans = []\\n        n = len(num)\\n        carry = 0\\n        i = n - 1\\n        while k > 0 or i >= 0 or carry > 0:\\n            sum = carry\\n            if k > 0:\\n                remainder = k % 10\\n                sum += remainder\\n                k //= 10\\n            if i >= 0:\\n                sum += num[i]\\n                i -= 1\\n            carry = sum // 10\\n            ans.insert(0, sum % 10)\\n        return ans\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 234535,
                "title": "c-well-commented-solution-with-explanation-100",
                "content": "```\\n/* An important observation ---\\n1) num%10 gives us the last digit of a number\\n2) num = num/10 cuts off the last digit of the number \\n3) numVector.back() gives us the last digit of the number in vector form\\n4) numVector.pop_back() cuts off the last digit of the number in vector form\\n5) The extra space required can be reduced by overwriting the first vector. \\n*/\\n\\n\\nclass Solution\\n{\\npublic:\\n    vector<int> addToArrayForm(vector<int>& a, int k);\\n};\\n\\n/* Returns the sum of 2 numbers in vector form */\\nvector<int> Solution :: addToArrayForm(vector<int>& a, int k)\\n{\\n    // Get the length of the first number\\n    int n = a.size();\\n    \\n    // Vector to store the answer\\n    vector<int> answer;\\n    \\n    /* Start adding both the numbers from the end */\\n    \\n    int carry = 0;\\n    // As long as one of the number exists, keep adding them\\n    while(!a.empty() || k!=0)\\n    {\\n        // Get the last digits of both the numbers. If a vector has finished off, the last digit is zero\\n        int lastDigit_1 = a.empty() ? 0 : a.back();\\n        int lastDigit_2 = k%10;\\n        \\n        // Sum up the digits and add the carry\\n        int sum = lastDigit_1 + lastDigit_2 + carry;\\n        answer.push_back(sum%10);\\n        carry = sum/10;\\n        \\n        // Remove the last digits of both the numbers\\n        if(!a.empty()) a.pop_back();\\n        k = k/10;\\n    }\\n    \\n    // If the carry is remaining, add it\\n    if(carry!=0) answer.push_back(carry);\\n    \\n    // Reverse the answer, since we were summing up from the end\\n    reverse(answer.begin(), answer.end());\\n    \\n    // Return the answer in vector format\\n    return answer;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/* An important observation ---\\n1) num%10 gives us the last digit of a number\\n2) num = num/10 cuts off the last digit of the number \\n3) numVector.back() gives us the last digit of the number in vector form\\n4) numVector.pop_back() cuts off the last digit of the number in vector form\\n5) The extra space required can be reduced by overwriting the first vector. \\n*/\\n\\n\\nclass Solution\\n{\\npublic:\\n    vector<int> addToArrayForm(vector<int>& a, int k);\\n};\\n\\n/* Returns the sum of 2 numbers in vector form */\\nvector<int> Solution :: addToArrayForm(vector<int>& a, int k)\\n{\\n    // Get the length of the first number\\n    int n = a.size();\\n    \\n    // Vector to store the answer\\n    vector<int> answer;\\n    \\n    /* Start adding both the numbers from the end */\\n    \\n    int carry = 0;\\n    // As long as one of the number exists, keep adding them\\n    while(!a.empty() || k!=0)\\n    {\\n        // Get the last digits of both the numbers. If a vector has finished off, the last digit is zero\\n        int lastDigit_1 = a.empty() ? 0 : a.back();\\n        int lastDigit_2 = k%10;\\n        \\n        // Sum up the digits and add the carry\\n        int sum = lastDigit_1 + lastDigit_2 + carry;\\n        answer.push_back(sum%10);\\n        carry = sum/10;\\n        \\n        // Remove the last digits of both the numbers\\n        if(!a.empty()) a.pop_back();\\n        k = k/10;\\n    }\\n    \\n    // If the carry is remaining, add it\\n    if(carry!=0) answer.push_back(carry);\\n    \\n    // Reverse the answer, since we were summing up from the end\\n    reverse(answer.begin(), answer.end());\\n    \\n    // Return the answer in vector format\\n    return answer;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 234558,
                "title": "java-python-3-6-liner-w-comment-and-analysis",
                "content": "# **Note:**\\n\\nI read several other java solutions, and found `ArrayList.add(0, K % 10)` was used, and it is not `O(1)` but `O(n)` instead. \\n\\n`LinkedList.add(0, i)` or `offerFirst(i)` is `O(1)`.\\n\\nCorrect me if I am wrong.\\n\\n```java\\n    public List<Integer> addToArrayForm(int[] A, int K) {\\n        LinkedList<Integer> ans = new LinkedList<>();\\n        for (int i = A.length - 1; K > 0 || i >= 0; --i, K /= 10) { // loop through A and K, from right to left.\\n            K += i >= 0 ? A[i] : 0; // Use K as carry over, and add A[i].\\n            ans.offerFirst(K % 10); // add the least significant digit of K.\\n        }\\n        return ans;\\n    }\\n```\\t\\n```python\\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\\n        ans, i = [], len(A) - 1\\n        while K > 0 or i >= 0:\\n            K, rmd = divmod(K + (A[i] if i >= 0 else 0), 10)\\n            ans.append(rmd)\\n            i -= 1\\n        return reversed(ans)\\n```\\n**Analysis:**\\n\\n**Time & space: O(n + logK)**, where n = A.length.",
                "solutionTags": [],
                "code": "```java\\n    public List<Integer> addToArrayForm(int[] A, int K) {\\n        LinkedList<Integer> ans = new LinkedList<>();\\n        for (int i = A.length - 1; K > 0 || i >= 0; --i, K /= 10) { // loop through A and K, from right to left.\\n            K += i >= 0 ? A[i] : 0; // Use K as carry over, and add A[i].\\n            ans.offerFirst(K % 10); // add the least significant digit of K.\\n        }\\n        return ans;\\n    }\\n```\n```python\\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\\n        ans, i = [], len(A) - 1\\n        while K > 0 or i >= 0:\\n            K, rmd = divmod(K + (A[i] if i >= 0 else 0), 10)\\n            ans.append(rmd)\\n            i -= 1\\n        return reversed(ans)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1777035,
                "title": "java-solution-optimal-and-simple",
                "content": "\\'\\'\\'\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        final LinkedList<Integer> result = new LinkedList<>();\\n        int len = num.length - 1;\\n        \\n        while(len >= 0 || k != 0){\\n            \\n            if(len >= 0){\\n                k += num[len];\\n\\t\\t\\t\\tlen--;\\n            }\\n            \\n            result.addFirst(k % 10);\\n            k /= 10;\\n        }\\n            \\n        return result;\\n        \\n    }\\n}\\n\\'\\'\\'",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        final LinkedList<Integer> result = new LinkedList<>();\\n        int len = num.length - 1;\\n        \\n        while(len >= 0 || k != 0){\\n            \\n            if(len >= 0){\\n                k += num[len];\\n\\t\\t\\t\\tlen--;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 743936,
                "title": "c-very-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& A, int K) {\\n        vector<int> ans;\\n        int carry = 0, i = A.size()-1;\\n        while(i>=0 || carry > 0 || K!=0){\\n            if(K!=0){\\n                carry += K%10;\\n                K = K/10;\\n            }\\n            if(i>=0){\\n                carry += A[i];\\n                i--;                \\n            }\\n            ans.push_back(carry%10);\\n            carry = carry/10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\\nFeel free to ask any doubts in the **comment** section and I will respond **ASAP**.\\nIf you like this solution, do **UPVOTE**.\\nHappy Coding :)",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& A, int K) {\\n        vector<int> ans;\\n        int carry = 0, i = A.size()-1;\\n        while(i>=0 || carry > 0 || K!=0){\\n            if(K!=0){\\n                carry += K%10;\\n                K = K/10;\\n            }\\n            if(i>=0){\\n                carry += A[i];\\n                i--;                \\n            }\\n            ans.push_back(carry%10);\\n            carry = carry/10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 437674,
                "title": "python3-improving-the-leetcode-solution-and-avoiding-the-use-of-str-int-and-map",
                "content": "# Notes:\\n- Leetcode provided a simple [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solution/), but it is not efficient. K has 5 digits at most, but A can have 10000 elements. This means that the summation might finish after 5 iterations, but the loop will continue for 10000 times! I added a condition to avoid this.\\n- I think the purpose of this question is to provide a summation based on elementary school math, and avoid other functions such as \\'str\\', \\'int\\' and \\'map\\'. \\n- The Leetcode solution does not work for Python3, but slight changes would make it compatible for both Python/ Python3.\\n\\n\\n# Python/ Python3 code:\\n```\\n        for i in range(len(A) - 1, -1, -1):\\n            if not K: break\\n            K, A[i] = divmod(A[i] + K, 10)\\n        while K:\\n            K, a = divmod(K, 10)\\n            A = [a] + A\\n        return A\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n        for i in range(len(A) - 1, -1, -1):\\n            if not K: break\\n            K, A[i] = divmod(A[i] + K, 10)\\n        while K:\\n            K, a = divmod(K, 10)\\n            A = [a] + A\\n        return A\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 236107,
                "title": "java-easy-to-understand-solution",
                "content": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] A, int K) {\\n        LinkedList<Integer> res = new LinkedList<>();\\n        int carry = 0;\\n        int index = A.length - 1;\\n        while(K > 0 || index >= 0){\\n            int curK = K % 10;\\n            int curA = index >= 0 ? A[index]: 0;\\n            int curDigitSum = curK + curA + carry;\\n            int toBeAdded = curDigitSum % 10;\\n            carry = curDigitSum / 10;\\n            index --;\\n            K /= 10;\\n            res.addFirst(toBeAdded);\\n        }\\n        if(carry != 0){\\n            res.addFirst(1);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] A, int K) {\\n        LinkedList<Integer> res = new LinkedList<>();\\n        int carry = 0;\\n        int index = A.length - 1;\\n        while(K > 0 || index >= 0){\\n            int curK = K % 10;\\n            int curA = index >= 0 ? A[index]: 0;\\n            int curDigitSum = curK + curA + carry;\\n            int toBeAdded = curDigitSum % 10;\\n            carry = curDigitSum / 10;\\n            index --;\\n            K /= 10;\\n            res.addFirst(toBeAdded);\\n        }\\n        if(carry != 0){\\n            res.addFirst(1);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1446211,
                "title": "javascript-solution-with-full-explanation",
                "content": "*Please upvote if you find the solution helpful.*\\n\\n```\\nvar addToArrayForm = function(num, k) {\\n\\n    let i = num.length - 1;\\n    let res = [];\\n    while(i >= 0 || k >0 ){\\n\\t\\t//this is the general check : taking the last elemnt and adding it with the k value then take the carry(if any to the next iteration) \\n        if(i >= 0){\\n            res.push((num[i] + k) % 10);\\n            k = Math.trunc((num[i] + k) / 10);\\n\\t\\t\\ti--;\\t\\n        } \\n\\t\\t//this else block will handle the edge case when we need to increase the array length based on k value\\n\\t\\telse {\\n            res.push( k % 10);\\n            k = Math.trunc(k / 10);\\n        }\\n    }\\n    return res.reverse();  \\n}\\n//  we can devide this question in two parts based on the fact that do we need extra space for the carry see e.g 2\\n/**\\n * e.g 1: - [1,2,6,3] & k = 516 || No Extra space needed\\n * let i = 3 (num.length - 1);\\n * step 1: (inside first if block cz 3 >= 0)\\n * \\t\\t\\tnum[3] + 516 = 519;\\n * \\t\\t\\t519 % 10 = 9;\\n * \\t\\t\\tres = [9];\\n * \\t\\t\\tk = (519/10) = 51;\\n * \\t\\t\\ti-- ==> 2;\\n * step 2: (inside first if block cz 2 >= 0)\\n * \\t\\t\\tnum[2] + 51 = 57;\\n * \\t\\t\\t57 % 10 = 7;\\n * \\t\\t\\tres = [9, 7];\\n * \\t\\t\\tk = (57/10) = 5;\\n * \\t\\t\\ti-- ==> 1;\\n * step 3: (inside first if block cz 1 >= 0)\\n * \\t\\t\\tnum[1] + 5 = 7;\\n * \\t\\t\\t7 % 10 = 7;\\n * \\t\\t\\tres = [9, 7, 7];\\n * \\t\\t\\tk = (7/10) = 0;\\n * \\t\\t\\ti-- ==> 0;\\n * step 4: (inside first if block cz 0 >= 0)\\n * \\t\\t\\tnum[0] + 0 = 1;\\n * \\t\\t\\t1 % 10 = 1;\\n * \\t\\t\\tres = [9, 7, 7, 1];\\n * \\t\\t\\tk = (1/10) = 0;\\n * \\t\\t\\ti-- ==> -1; (first if consition will be false it will     * never going to the 2nd if bcz k is already 0)\\n * in this case we need to reverse this array to get the result \\n * Answer - [9, 7, 7, 1].reverse() => [1, 7, 7, 9]\\n */\\n\\n/**\\n * e.g 1: - [9, 9, 9] & k = 1 || Extra space needed\\n * let i = 2 (num.length - 1);\\n * step 1: (inside first if block cz 2 >= 0)\\n * \\t\\t\\tnum[2] + 1 = 10;\\n * \\t\\t\\t10 % 10 = 0;\\n * \\t\\t\\tres = [0];\\n * \\t\\t\\tk = (10/10) = 1;\\n * \\t\\t\\ti-- ==> 1;\\n * step 2: (inside first if block cz 1 >= 0)\\n * \\t\\t\\tnum[1] + 1 = 10;\\n * \\t\\t\\t10 % 10 = 0;\\n * \\t\\t\\tres = [0, 0];\\n * \\t\\t\\tk = (10/10) = 1;\\n * \\t\\t\\ti-- ==> 0;\\n * step 3: (inside first if block cz 0 >= 0)\\n * \\t\\t\\tnum[0] + 1 = 10;\\n * \\t\\t\\t10 % 10 = 0;\\n * \\t\\t\\tres = [0, 0, 0];\\n * \\t\\t\\tk = (10/10) = 1;\\n * \\t\\t\\ti-- ==> -1; (loop will break)\\n * step 4: (inside SECOND if block cz k is still 1 >= 0 and i = -1)\\n * \\t\\t\\t(k value is 1) 1 % 10 = 1;\\n * \\t\\t\\tres = [0, 0, 0, 1];\\n * \\t\\t\\tk = (1/10) = 0; ( k value finally 0 NO MORE ELEMENTS TO *ADD)\\n * Answer - res.reverse() => [1, 0, 0, 0]\\n */\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar addToArrayForm = function(num, k) {\\n\\n    let i = num.length - 1;\\n    let res = [];\\n    while(i >= 0 || k >0 ){\\n\\t\\t//this is the general check : taking the last elemnt and adding it with the k value then take the carry(if any to the next iteration) \\n        if(i >= 0){\\n            res.push((num[i] + k) % 10);\\n            k = Math.trunc((num[i] + k) / 10);\\n\\t\\t\\ti--;\\t\\n        } \\n\\t\\t//this else block will handle the edge case when we need to increase the array length based on k value\\n\\t\\telse {\\n            res.push( k % 10);\\n            k = Math.trunc(k / 10);\\n        }\\n    }\\n    return res.reverse();  \\n}\\n//  we can devide this question in two parts based on the fact that do we need extra space for the carry see e.g 2\\n/**\\n * e.g 1: - [1,2,6,3] & k = 516 || No Extra space needed\\n * let i = 3 (num.length - 1);\\n * step 1: (inside first if block cz 3 >= 0)\\n * \\t\\t\\tnum[3] + 516 = 519;\\n * \\t\\t\\t519 % 10 = 9;\\n * \\t\\t\\tres = [9];\\n * \\t\\t\\tk = (519/10) = 51;\\n * \\t\\t\\ti-- ==> 2;\\n * step 2: (inside first if block cz 2 >= 0)\\n * \\t\\t\\tnum[2] + 51 = 57;\\n * \\t\\t\\t57 % 10 = 7;\\n * \\t\\t\\tres = [9, 7];\\n * \\t\\t\\tk = (57/10) = 5;\\n * \\t\\t\\ti-- ==> 1;\\n * step 3: (inside first if block cz 1 >= 0)\\n * \\t\\t\\tnum[1] + 5 = 7;\\n * \\t\\t\\t7 % 10 = 7;\\n * \\t\\t\\tres = [9, 7, 7];\\n * \\t\\t\\tk = (7/10) = 0;\\n * \\t\\t\\ti-- ==> 0;\\n * step 4: (inside first if block cz 0 >= 0)\\n * \\t\\t\\tnum[0] + 0 = 1;\\n * \\t\\t\\t1 % 10 = 1;\\n * \\t\\t\\tres = [9, 7, 7, 1];\\n * \\t\\t\\tk = (1/10) = 0;\\n * \\t\\t\\ti-- ==> -1; (first if consition will be false it will     * never going to the 2nd if bcz k is already 0)\\n * in this case we need to reverse this array to get the result \\n * Answer - [9, 7, 7, 1].reverse() => [1, 7, 7, 9]\\n */\\n\\n/**\\n * e.g 1: - [9, 9, 9] & k = 1 || Extra space needed\\n * let i = 2 (num.length - 1);\\n * step 1: (inside first if block cz 2 >= 0)\\n * \\t\\t\\tnum[2] + 1 = 10;\\n * \\t\\t\\t10 % 10 = 0;\\n * \\t\\t\\tres = [0];\\n * \\t\\t\\tk = (10/10) = 1;\\n * \\t\\t\\ti-- ==> 1;\\n * step 2: (inside first if block cz 1 >= 0)\\n * \\t\\t\\tnum[1] + 1 = 10;\\n * \\t\\t\\t10 % 10 = 0;\\n * \\t\\t\\tres = [0, 0];\\n * \\t\\t\\tk = (10/10) = 1;\\n * \\t\\t\\ti-- ==> 0;\\n * step 3: (inside first if block cz 0 >= 0)\\n * \\t\\t\\tnum[0] + 1 = 10;\\n * \\t\\t\\t10 % 10 = 0;\\n * \\t\\t\\tres = [0, 0, 0];\\n * \\t\\t\\tk = (10/10) = 1;\\n * \\t\\t\\ti-- ==> -1; (loop will break)\\n * step 4: (inside SECOND if block cz k is still 1 >= 0 and i = -1)\\n * \\t\\t\\t(k value is 1) 1 % 10 = 1;\\n * \\t\\t\\tres = [0, 0, 0, 1];\\n * \\t\\t\\tk = (1/10) = 0; ( k value finally 0 NO MORE ELEMENTS TO *ADD)\\n * Answer - res.reverse() => [1, 0, 0, 0]\\n */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3187352,
                "title": "java-easy-solution-with-detailed-explanation",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- We approach this question just like we add two numbers given that you can add only one-one digits at a time.\\n- We start iterating to the array from the last of it, & also from the last of k as well.\\n- At each iteration, we keep adding the `carry` , `num[i]` , & the last digit of `k` i.e. `k%10` to `digitSum`\\n- We add the last digit of `digitSum` to the `list`\\n- We keep the rest of the number to `carry`\\n\\n- After iterating we reverse the `list`. We could also do it without using the `reverse()` method by Using `list.add(0, digitSum%10)`. By doing this the `list` will be in the right order. But this takes more time because after adding the number to the index 0, the rest of the numbers needs to be shifted to the right.\\n\\n\\n# Complexity\\n- Time complexity: `O(n)`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: `O(1)` Since we do not have used any extra space. The list that we created is the return type therefore no extra space is used.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Please UPVOTE this if you find it useful\\nLet\\'s Connect On [LinkedIn OliFarhaan](https://www.linkedin.com/in/olifarhaan/)\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list= new ArrayList<>();\\n        int carry=0, digitSum=0;\\n        int i= num.length-1;\\n        while(i>=0 || k >0 || carry >0){\\n            digitSum=carry;\\n            if(i>=0) digitSum += num[i--];\\n            if(k>0) digitSum += k%10;\\n            list.add(digitSum%10);\\n            k=k/10;\\n            carry= digitSum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list= new ArrayList<>();\\n        int carry=0, digitSum=0;\\n        int i= num.length-1;\\n        while(i>=0 || k >0 || carry >0){\\n            digitSum=carry;\\n            if(i>=0) digitSum += num[i--];\\n            if(k>0) digitSum += k%10;\\n            list.add(digitSum%10);\\n            k=k/10;\\n            carry= digitSum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1422739,
                "title": "java-simple-solution-array-list-beginner-friendly",
                "content": "**Runtime: 42 ms, faster than 19.81% of Java online submissions for Add to Array-Form of Integer.\\nMemory Usage: 40.4 MB, less than 54.92% of Java online submissions for Add to Array-Form of Integer.**\\n\\n\\n```\\nList<Integer> ans=new ArrayList<>();\\n        \\n        for(int i=num.length-1;i>=0;i--){\\n            \\n            int n=num[i];\\n            int sum=n+k;\\n            int rem=sum%10;\\n            ans.add(0,rem);\\n            k=sum/10;\\n            \\n        }\\n        \\n        while(k>0){\\n            ans.add(0,k%10);\\n            k/=10;\\n        }\\n        return ans;\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nList<Integer> ans=new ArrayList<>();\\n        \\n        for(int i=num.length-1;i>=0;i--){\\n            \\n            int n=num[i];\\n            int sum=n+k;\\n            int rem=sum%10;\\n            ans.add(0,rem);\\n            k=sum/10;\\n            \\n        }\\n        \\n        while(k>0){\\n            ans.add(0,k%10);\\n            k/=10;\\n        }\\n        return ans;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 258286,
                "title": "javascript-clean-and-fast-solution-with-explanation-no-reverse",
                "content": "```js\\nvar addToArrayForm = function(A, K) {\\n    let flag = A.length - 1\\n    while(K) {\\n        if(flag < 0) {\\n            A.unshift(K % 10)\\n        } else {\\n            K += A[flag]\\n            A[flag--] = K % 10\\n        }\\n        K = Math.floor(K / 10)\\n    }\\n    return A\\n}\\n```\\nExplanation:\\n1. Take `K` as a carry.\\n2. Use `flag` to point from right to left (from lower to higher digit).\\n3. If `flag` less than 0, it means `A` need to insert a new digit to the head of `A`.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nvar addToArrayForm = function(A, K) {\\n    let flag = A.length - 1\\n    while(K) {\\n        if(flag < 0) {\\n            A.unshift(K % 10)\\n        } else {\\n            K += A[flag]\\n            A[flag--] = K % 10\\n        }\\n        K = Math.floor(K / 10)\\n    }\\n    return A\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3187634,
                "title": "4ms-beats-90-00-full-explanation-breadth-first-search-c-java-python3",
                "content": "# Intuition :\\n- Here we have to add a non-negative integer k to an array of non-negative integers num, where each element in num is between 0 and 9 (inclusive), and returning the result as a list of integers.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Explanation to Approach :\\n- First, iterate over each element in num and compute the sum of the corresponding digit in num and k. \\n- Then store the ones digit of the sum in a new list called ans.\\n- If the sum of the two digits is greater than 9, \"carrie over\" the tens digit to the next iteration of the loop.\\n- If k still has remaining digits, they are also added to the ans list. \\n- Finally, the resulting list ans is returned.\\n# Look at this Example:\\n- Let\\'s say we have an array num containing the numbers [1, 2, 3, 4] and we want to add the integer k = 567 to it. The expected result would be a list [1, 7, 9, 1].\\n# Here\\'s how the algorithm works step by step :\\n- Starting from the end of the array, we begin by adding the last element of num and k. This gives us 4 + 7 = 11. The ones digit, which is 1, is added to a new list ans and the tens digit, which is 1, is carried over to the next iteration.\\n- The next element of num is 3. We add 3 to the carried over tens digit, which gives us 3 + 1 = 4. The ones digit, which is 4, is added to the front of ans, and the tens digit, which is 0, is carried over to the next iteration.\\n- The next element of num is 2. We add 2 to the carried over tens digit, which gives us 2 + 0 = 2. The ones digit, which is 2, is added to the front of ans, and the tens digit, which is 0, is carried over to the next iteration.\\n- The last element of num is 1. We add 1 to the carried over tens digit, which gives us 1 + 0 = 1. The ones digit, which is 1, is added to the front of ans, and the tens digit, which is 0, is carried over to the next iteration.\\n- At this point, we have finished iterating over all elements of num. If there is still a carried over tens digit, it is added to the front of ans. But since the carried over digit is 0, this step doesn\\'t do anything in our example.\\n- Finally, we return the ans list, which contains the result [1, 7, 9, 1].\\n- So, this code adds 567 to the array [1, 2, 3, 4] and returns the list [1, 7, 9, 1].\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity :\\n- Time complexity : O(max(N, log(k)))\\n```\\nReason  : Because the algorithm iterates over each element \\nin num once and may iterate over the digits of k up to log(k) \\ntimes, depending on the size of k. \\n```\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity : O(max(N, log(k)))\\n```\\nReason  : Because it creates a new list ans to store the result.\\n```\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A\\n```\\n# Codes [C++ |Java |Python3] \\n```C++ []\\nclass Solution \\n{\\n public:\\n  vector<int> addToArrayForm(vector<int>& num, int k) \\n  {\\n    for (int i = num.size() - 1; i >= 0; --i) \\n    {\\n      num[i] += k;\\n      k = num[i] / 10;\\n      num[i] %= 10;\\n    }\\n    while (k > 0) {\\n      num.insert(begin(num), k % 10);\\n      k /= 10;\\n    }\\n    return num;\\n  }\\n};\\n```\\n```Java []\\nclass Solution \\n{\\n  public List<Integer> addToArrayForm(int[] num, int k) \\n  {\\n    List<Integer> ans = new LinkedList<>();\\n    for (int i = num.length - 1; i >= 0; --i) {\\n      ans.add(0, (num[i] + k) % 10);\\n      k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n      ans.add(0, k % 10);\\n      k /= 10;\\n    }\\n    return ans;\\n  }\\n}\\n```\\n```Python3 []\\nclass Solution:\\n  def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n    for i in reversed(range(len(num))):\\n      k, num[i] = divmod(num[i] + k, 10)\\n\\n    while k > 0:\\n      num = [k % 10] + num\\n      k //= 10\\n\\n    return num\\n```\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n![ezgif-3-22a360561c.gif](https://assets.leetcode.com/users/images/783ed385-9d4d-4bec-95a2-86d4de605639_1676438010.7088408.gif)\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nReason  : Because the algorithm iterates over each element \\nin num once and may iterate over the digits of k up to log(k) \\ntimes, depending on the size of k. \\n```\n```\\nReason  : Because it creates a new list ans to store the result.\\n```\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A\\n```\n```C++ []\\nclass Solution \\n{\\n public:\\n  vector<int> addToArrayForm(vector<int>& num, int k) \\n  {\\n    for (int i = num.size() - 1; i >= 0; --i) \\n    {\\n      num[i] += k;\\n      k = num[i] / 10;\\n      num[i] %= 10;\\n    }\\n    while (k > 0) {\\n      num.insert(begin(num), k % 10);\\n      k /= 10;\\n    }\\n    return num;\\n  }\\n};\\n```\n```Java []\\nclass Solution \\n{\\n  public List<Integer> addToArrayForm(int[] num, int k) \\n  {\\n    List<Integer> ans = new LinkedList<>();\\n    for (int i = num.length - 1; i >= 0; --i) {\\n      ans.add(0, (num[i] + k) % 10);\\n      k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n      ans.add(0, k % 10);\\n      k /= 10;\\n    }\\n    return ans;\\n  }\\n}\\n```\n```Python3 []\\nclass Solution:\\n  def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n    for i in reversed(range(len(num))):\\n      k, num[i] = divmod(num[i] + k, 10)\\n\\n    while k > 0:\\n      num = [k % 10] + num\\n      k //= 10\\n\\n    return num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187344,
                "title": "c-math-two-pointer-faster-easy-to-understand",
                "content": "* ***Math***\\n\\n* ***Time Complexity :- O(N)***\\n\\n* ***Space Complexity :- O(Constant)***\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        \\n        int n = num.size();\\n        \\n        // convert the k into string\\n        \\n        string str = to_string(k);\\n        \\n        int m = str.size();\\n        \\n        // intitialize i and j\\n        \\n        int i = n - 1, j = m - 1;\\n        \\n        int carry = 0;\\n        \\n        vector<int> res;\\n        \\n        // start traversing from right side\\n        \\n        while(i >= 0 || j >= 0 || carry)\\n        {\\n            // find sum\\n            \\n            int sum = 0;\\n            \\n            if(i >= 0)\\n            {\\n                sum += num[i];\\n            }\\n            \\n            if(j >= 0)\\n            {\\n                sum += str[j] - \\'0\\';\\n            }\\n            \\n            sum += carry;\\n            \\n            // update the carry\\n            \\n            carry = sum / 10;\\n            \\n            // push the digit into res\\n            \\n            res.push_back(sum % 10);\\n            \\n            // update pointers\\n            \\n            i--;\\n            \\n            j--;\\n        }\\n        \\n        // reverse the res\\n        \\n        reverse(res.begin(), res.end());\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        \\n        int n = num.size();\\n        \\n        // convert the k into string\\n        \\n        string str = to_string(k);\\n        \\n        int m = str.size();\\n        \\n        // intitialize i and j\\n        \\n        int i = n - 1, j = m - 1;\\n        \\n        int carry = 0;\\n        \\n        vector<int> res;\\n        \\n        // start traversing from right side\\n        \\n        while(i >= 0 || j >= 0 || carry)\\n        {\\n            // find sum\\n            \\n            int sum = 0;\\n            \\n            if(i >= 0)\\n            {\\n                sum += num[i];\\n            }\\n            \\n            if(j >= 0)\\n            {\\n                sum += str[j] - \\'0\\';\\n            }\\n            \\n            sum += carry;\\n            \\n            // update the carry\\n            \\n            carry = sum / 10;\\n            \\n            // push the digit into res\\n            \\n            res.push_back(sum % 10);\\n            \\n            // update pointers\\n            \\n            i--;\\n            \\n            j--;\\n        }\\n        \\n        // reverse the res\\n        \\n        reverse(res.begin(), res.end());\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2265636,
                "title": "java-3-different-approach-55ms-to-4ms-runtime",
                "content": "Hii,\\n**Intuition :**\\n\\nBASIC IDEA\\n1.  Basic Idea behind this implementation is to add the num array element one by one with the k\\neg:\\nnum[] = {1, 2, 3} and k = 45;\\n\\n* \\t1st Iteration:\\nk += num[len--] --> k = k + num[2] --> k = 45 + 3 --> k = 48\\nlist.addFirst(k % 10) --> list.addFirst(48 % 10) --> list.addFirst(8) --> [8]\\nk /= 10 --> k = k / 10 --> 48 / 10 --> k = 4\\n\\n* 2nd Iteration:\\nk += num[len--] --> k = k + num[1] --> k = 4 + 2 --> k = 6\\nlist.addFirst(k % 10) --> list.addFirst(6 % 10) --> list.addFirst(6) --> [6, 8]\\nk /= 10 --> k = k / 10 --> 6 / 10 --> k = 0\\n\\n* 3rd Iteration:\\nk += num[len--] --> k = k + num[0] --> k = 0 + 1 --> k = 1\\nlist.addFirst(k % 10) --> list.addFirst(1 % 10) --> list.addFirst(1) --> [1, 6, 8] <--- Desired Output\\nk /= 10 --> k = k / 10 --> 1 / 10 --> k = 0\\n\\n\\t//  credit @akshayaamar05\\n\\t\\nAt the beginning i was getting **55ms** runtime for submission which was slower than 80% but changing my list it was mitigated to just **4ms** which is faster than ***98%*** submission.\\nso, let just look how it was done\\n1. First using ArrayLIst we are appending the element at the beginning of ArrayList \\n2. taking lot of time process \\n3.  runtime = 55ms.\\n```\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();               \\n        int len = num.length-1;\\n        while( len >=0 || k!=0){\\n            if( len >= 0){\\n                k += num[len--];\\n            }\\n            list.add(0,k % 10);        // using  .add(int index, E value); method to add element at the beginning of arraylist                   \\n            k /= 10;\\n        }    \\n      return list;\\n    }\\n```\\n\\nUsing LinkedList\\n* using linkedList provide the method addFirst(value) which consumes less time \\n* runtime = 7ms.\\n* space = 64 MB, less than only 12%.\\n```\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> list = new LinkedList<Integer>();               \\n        int len = num.length-1;\\n        while( len >=0 || k!=0){\\n            if( len >= 0){\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);                          // adding remender to beginning of LinkedList \\n            k /= 10;\\n        }                \\n      return list;\\n    }\\n```\\n![image](https://assets.leetcode.com/users/images/1654c6e4-5259-4fb5-85e6-02c8f27c81ae_1657501263.0771966.png)\\n\\n\\n\\nAgain using ArrayList but with different approach \\n* As we have seen above it is least efficient it is because it has to take some extra time to process the method add(int index, E value)\\n* but can avoid this and can achieve most efficient solution for both space and time \\n* Runtime = 4ms\\n* space = 43 MB lesser than **99.39%**.\\n\\n```\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();               \\n        int len = num.length-1;\\n        while( len >=0 || k!=0){\\n            if( len >= 0){\\n                k += num[len];\\n                len--;\\n            }\\n            list.add(k % 10);                      // using normal add method which add element at the end of list.     \\n            k /= 10;\\n        }\\n        Collections.reverse(list);         // using collections reverse method to reverse our arraylist         \\n      return list;\\n    }\\n```\\n\\n![image](https://assets.leetcode.com/users/images/38420d40-d2d6-4e8d-8eb7-28dbfdd474ff_1657501703.7822409.png)\\nThanks for Reading!\\nKeep Grinding!\\nPlease Upvote, if you find helpful.\\n\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();               \\n        int len = num.length-1;\\n        while( len >=0 || k!=0){\\n            if( len >= 0){\\n                k += num[len--];\\n            }\\n            list.add(0,k % 10);        // using  .add(int index, E value); method to add element at the beginning of arraylist                   \\n            k /= 10;\\n        }    \\n      return list;\\n    }\\n```\n```\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> list = new LinkedList<Integer>();               \\n        int len = num.length-1;\\n        while( len >=0 || k!=0){\\n            if( len >= 0){\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);                          // adding remender to beginning of LinkedList \\n            k /= 10;\\n        }                \\n      return list;\\n    }\\n```\n```\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();               \\n        int len = num.length-1;\\n        while( len >=0 || k!=0){\\n            if( len >= 0){\\n                k += num[len];\\n                len--;\\n            }\\n            list.add(k % 10);                      // using normal add method which add element at the end of list.     \\n            k /= 10;\\n        }\\n        Collections.reverse(list);         // using collections reverse method to reverse our arraylist         \\n      return list;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 234503,
                "title": "screencast-of-leetcode-weekly-contest-123",
                "content": "https://www.youtube.com/watch?v=50jJcFYaskQ",
                "solutionTags": [],
                "code": "https://www.youtube.com/watch?v=50jJcFYaskQ",
                "codeTag": "Unknown"
            },
            {
                "id": 3187733,
                "title": "for-n-base-characters-and-beyond-o-n-time-and-o-n-space",
                "content": "# Intuition\\nThis problem is similar to problem: [67. Add Binary](https://leetcode.com/problems/add-binary/). You should try and solve that problem first. If you are still confused, see the below solution.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nMy solution to [67. Add Binary](https://leetcode.com/problems/add-binary/)  => [https://leetcode.com/problems/add-binary/solutions/3186596/have-you-thought-this-way-beats-100-self-explanatory-code/](https://leetcode.com/problems/add-binary/solutions/3186596/have-you-thought-this-way-beats-100-self-explanatory-code/)\\n\\n![3549-pepepopcorn.png](https://assets.leetcode.com/users/images/ae3f7606-e894-4cd9-8ec8-79ed937375ed_1676439722.7051065.png)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAs you have learned basic summation by hand. You probably have an idea about the **carry**. In this solution we will also need to keep and store **carry** in a variable. You probably start from the right then calculate to the left.\\n\\nLet\\'s see for an example:\\n```\\nnum = [2,1,5], k = 806\\n```\\n\\n| carry | num1 from k | num2 from num[] | sum | add to list | updated carry |\\n|-------|------|------|-----|-----|-----|\\n|0 | 6 | 5 | 11 | 1 | 1 |\\n|1 | 0 | 1 | 2 | 2 | 0 |\\n|0 | 8 | 2 | 10 | 0 | 1 |\\n|1 | 0 | 0 | 1 | 1 | 0 |\\n\\nTo find the last digit from k, we will do k%10. As this is a 10 base number, we need to mod 10. If this was 2 base (binary) or 8 base (octal) number then we need to do k%2 or k%8 respectively.\\nAfter doing that, we update k by doing k/10. This means we are erasing the last digit. Again, as it is 10 base number we are using 10. For 2 or 8 base number we will use 2 or 8.\\n\\nWe iterate the loop of the array. After the iteration is complete, we check if k is 0. If it is not, we further add the values from k.\\n\\nLastly, an important part is, whether carry is 0 or not. If it is not 0, we must add that to the list.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\nWe are declaring another list to store the output.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code [Java]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        int carry = 0;\\n        for(int i=num.length-1; i>=0; i--){\\n            int num1 = 0;\\n            if(k!=0){\\n                num1 = k%10;\\n                k/=10;\\n            }\\n            int num2 = num[i];\\n            int sum = carry + num1 + num2;\\n            carry = sum/10;\\n            list.add(sum%10);\\n        }\\n        while(k!=0){\\n            int sum = carry + k%10;\\n            k/=10;\\n            carry = sum/10;\\n            list.add(sum%10);\\n        }\\n        if(carry!=0){\\n            list.add(carry);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```\\n\\n![No Upvotes, Have a Good Day.png](https://assets.leetcode.com/users/images/7211cfa9-b625-4ca0-bdd0-32a8b8e5e10c_1676440010.2570288.png)\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nnum = [2,1,5], k = 806\\n```\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        int carry = 0;\\n        for(int i=num.length-1; i>=0; i--){\\n            int num1 = 0;\\n            if(k!=0){\\n                num1 = k%10;\\n                k/=10;\\n            }\\n            int num2 = num[i];\\n            int sum = carry + num1 + num2;\\n            carry = sum/10;\\n            list.add(sum%10);\\n        }\\n        while(k!=0){\\n            int sum = carry + k%10;\\n            k/=10;\\n            carry = sum/10;\\n            list.add(sum%10);\\n        }\\n        if(carry!=0){\\n            list.add(carry);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 728123,
                "title": "python-one-liner-better-than-88",
                "content": "Approach:\\n1. Convert the list of integers into a single number using ```join()```\\n2. Explicitly convert the new string into int and add it with ```K```.\\n3. Convert the sum into string and return it as a list using ```list()```.\\n\\n```\\nclass Solution:\\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\\n        return (list(str(int(\"\".join(map(str, A))) + K)))\\n```\\n```\\n#Runtime: 304ms\\n#Memory Usage: 14.3MB\\n```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```join()```\n```K```\n```list()```\n```\\nclass Solution:\\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\\n        return (list(str(int(\"\".join(map(str, A))) + K)))\\n```\n```\\n#Runtime: 304ms\\n#Memory Usage: 14.3MB\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187127,
                "title": "python3-268-ms-faster-than-96-60-of-python3",
                "content": "![image](https://assets.leetcode.com/users/images/56149966-d41d-41e2-9bc6-5ee3fcc51014_1676427091.1014879.png)\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        if not num:\\n            return [int(d) for d in str(k)]\\n        carry = 0\\n        res = []\\n        for i in range(len(num)-1, -1, -1):\\n            total = num[i] + carry + (k % 10)\\n            carry = total // 10\\n            res.append(total % 10)\\n            k //= 10\\n        while k > 0:\\n            total = carry + (k % 10)\\n            carry = total // 10\\n            res.append(total % 10)\\n            k //= 10\\n        if carry > 0:\\n            res.append(carry)\\n        return res[::-1]\\n```\\nThe main idea of the function is to simulate the addition process for two numbers: the input num and the input k. The addition is performed digit by digit, from right to left, while keeping track of the carry from one digit to the next. The function appends each resulting digit to the res list and returns it at the end.\\nHere\\'s a step by step description of the code:\\n\\n1. Define a function addToArrayForm that takes in a list of integers num and an integer k, and returns a list of integers.\\n1. Check if num is an empty list. If so, convert k to a list of integers and return it.\\n1. Initialize variables carry and res to 0 and an empty list, respectively.\\n1. Loop over num in reverse order using the range function. At each iteration:\\n\\t1. \\tCalculate the sum of the current digit of num, the corresponding digit of k, and the carry using the modulo operator (%).\\n\\t1. \\tUpdate the carry by dividing the total by 10 using integer division (//).\\n\\t1. \\tAppend the remainder of the total (i.e., total % 10) to res.\\n\\t1. \\tUpdate k by dividing it by 10 using integer division (//).\\n1. Loop over k while it is greater than 0. At each iteration:\\n\\t1. Calculate the sum of the current digit of k and the carry using the modulo operator (%).\\n\\t1. Update the carry by dividing the total by 10 using integer division (//).\\n\\t1. Append the remainder of the total (i.e., total % 10) to res.\\n\\t1. Update k by dividing it by 10 using integer division (//).\\n1. If the final carry value is greater than 0, append it to res.\\n1. Return the reversed list res.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        if not num:\\n            return [int(d) for d in str(k)]\\n        carry = 0\\n        res = []\\n        for i in range(len(num)-1, -1, -1):\\n            total = num[i] + carry + (k % 10)\\n            carry = total // 10\\n            res.append(total % 10)\\n            k //= 10\\n        while k > 0:\\n            total = carry + (k % 10)\\n            carry = total // 10\\n            res.append(total % 10)\\n            k //= 10\\n        if carry > 0:\\n            res.append(carry)\\n        return res[::-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 234485,
                "title": "simple-python",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, A: \\'List[int]\\', K: \\'int\\') -> \\'List[int]\\':\\n        A[-1] += K\\n        i = len(A) - 1\\n        while i > 0 and A[i] > 9:\\n            A[i-1] += A[i] // 10\\n            A[i] = A[i] % 10\\n            i -= 1\\n        while A[0] > 9:\\n            A = [A[0] // 10] + A\\n            A[1] = A[1] % 10\\n        return A\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, A: \\'List[int]\\', K: \\'int\\') -> \\'List[int]\\':\\n        A[-1] += K\\n        i = len(A) - 1\\n        while i > 0 and A[i] > 9:\\n            A[i-1] += A[i] // 10\\n            A[i] = A[i] % 10\\n            i -= 1\\n        while A[0] > 9:\\n            A = [A[0] // 10] + A\\n            A[1] = A[1] % 10\\n        return A\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187265,
                "title": "easy-javascript-solution",
                "content": "\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let sum = BigInt(num.join(\\'\\')) + BigInt(k);\\n    let convertSum = sum.toString().split(\\'\\').map((num) => parseInt(num));\\n    return convertSum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let sum = BigInt(num.join(\\'\\')) + BigInt(k);\\n    let convertSum = sum.toString().split(\\'\\').map((num) => parseInt(num));\\n    return convertSum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1554978,
                "title": "java-easy-solution-with-explanation",
                "content": "# JAVA SOLUTION @DeepakKumar\\n# In Case of Any Doubt Feel Free to ASK...\\n\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n  // Create A List\\n        List<Integer> list = new ArrayList<>();\\n        // Start from Last index of num Array\\n        /*\\n                          INDEX -> 0 1 2\\n        Explanation: let  num --> [2,3,2]\\n                          k   -->  8947\\n                     ADD num[LAST INDEX] + k  --> 2 + 8947 =  8949 --> k\\'   ADD(9) to LIST\\n                     Now ADD num[1] + (k\\' % 10) --> 3 + 894 = 897   --> k\\'   ADD(7) to LIST\\n                     Now ADD num[0] + (k\\' % 10) --> 2 + 89 = 91     --> k\\'   ADD(1) to LIST\\n                      k = k\\' % 10 = 9\\n                     At the End of the loop k != 0    So  \\n                     Now ADD DIGITS of k to list FROM the END     --> ADD(9) to List\\n                     Now k is 0 so END while Loop\\n                     \\n       At this point we have List as --> [9,7,1,9]  --> **Here NOTE that it is the REQUIRED ANS BUT **\\n\\t   IN REVERSE ORDER\\n                     --> So, now REVERSE the LIST \\n                     --> At the END return the Required List           \\n         */\\n        for(int i=num.length-1 ; i>=0;i--) {\\n            int sum = num[i] + k;\\n            list.add(sum % 10);\\n            k = sum/ 10; \\n        }\\n        // if After Adding k in the Number  k is not ZERO then do this\\n        while(k > 0){\\n            list.add(k%10);\\n            k /= 10;\\n        }\\n        // Now Reverse the LIST\\n        Collections.reverse(list);\\n        // AT the end Return the list\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n  // Create A List\\n        List<Integer> list = new ArrayList<>();\\n        // Start from Last index of num Array\\n        /*\\n                          INDEX -> 0 1 2\\n        Explanation: let  num --> [2,3,2]\\n                          k   -->  8947\\n                     ADD num[LAST INDEX] + k  --> 2 + 8947 =  8949 --> k\\'   ADD(9) to LIST\\n                     Now ADD num[1] + (k\\' % 10) --> 3 + 894 = 897   --> k\\'   ADD(7) to LIST\\n                     Now ADD num[0] + (k\\' % 10) --> 2 + 89 = 91     --> k\\'   ADD(1) to LIST\\n                      k = k\\' % 10 = 9\\n                     At the End of the loop k != 0    So  \\n                     Now ADD DIGITS of k to list FROM the END     --> ADD(9) to List\\n                     Now k is 0 so END while Loop\\n                     \\n       At this point we have List as --> [9,7,1,9]  --> **Here NOTE that it is the REQUIRED ANS BUT **\\n\\t   IN REVERSE ORDER\\n                     --> So, now REVERSE the LIST \\n                     --> At the END return the Required List           \\n         */\\n        for(int i=num.length-1 ; i>=0;i--) {\\n            int sum = num[i] + k;\\n            list.add(sum % 10);\\n            k = sum/ 10; \\n        }\\n        // if After Adding k in the Number  k is not ZERO then do this\\n        while(k > 0){\\n            list.add(k%10);\\n            k /= 10;\\n        }\\n        // Now Reverse the LIST\\n        Collections.reverse(list);\\n        // AT the end Return the list\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187823,
                "title": "c-very-easy-beats-100-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSimply just transform k into an array for easy traversal then just take care of carry and take the sum of nums vector and kth vector .\\n- We can avoid using the vector for k by just taking directly elements from k .\\n- Below are given the  two implementations :\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(max(n,logK))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(max(n,logK))$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& arr, int k) {\\n        vector<int>ans;\\n        vector<int>v;\\n        while(k>0){\\n            v.push_back(k%10);\\n            k/=10;\\n        }\\n        reverse(begin(v),end(v));\\n        int n=arr.size();\\n        int carry=0;\\n        int i=n-1,j=v.size()-1;\\n        while(i>=0 or j>=0){\\n            int sum=carry;\\n          if(i>=0)sum+=arr[i--];\\n          if(j>=0)sum+=v[j--];\\n          carry=sum/10;\\n          ans.push_back(sum%10);\\n        }\\n        if(carry)\\n        ans.push_back(carry);\\n         reverse(begin(ans),end(ans));\\n        return ans;\\n    }\\n};\\n```\\n**Wihtout using a vector for k**\\n```\\nvector<int> addToArrayForm(vector<int>& arr, int k) {\\n        vector<int>ans;\\n        int i=arr.size()-1;\\n        int carry=0;\\n       while(k>0 or i>=0){\\n           int sum=carry;\\n           if(i>=0)sum+=arr[i--];\\n           sum+=k%10;\\n           carry=sum/10;\\n           k/=10;\\n           ans.push_back(sum%10);\\n       }\\n       if(carry)ans.push_back(carry);\\n       reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math",
                    "Number Theory"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& arr, int k) {\\n        vector<int>ans;\\n        vector<int>v;\\n        while(k>0){\\n            v.push_back(k%10);\\n            k/=10;\\n        }\\n        reverse(begin(v),end(v));\\n        int n=arr.size();\\n        int carry=0;\\n        int i=n-1,j=v.size()-1;\\n        while(i>=0 or j>=0){\\n            int sum=carry;\\n          if(i>=0)sum+=arr[i--];\\n          if(j>=0)sum+=v[j--];\\n          carry=sum/10;\\n          ans.push_back(sum%10);\\n        }\\n        if(carry)\\n        ans.push_back(carry);\\n         reverse(begin(ans),end(ans));\\n        return ans;\\n    }\\n};\\n```\n```\\nvector<int> addToArrayForm(vector<int>& arr, int k) {\\n        vector<int>ans;\\n        int i=arr.size()-1;\\n        int carry=0;\\n       while(k>0 or i>=0){\\n           int sum=carry;\\n           if(i>=0)sum+=arr[i--];\\n           sum+=k%10;\\n           carry=sum/10;\\n           k/=10;\\n           ans.push_back(sum%10);\\n       }\\n       if(carry)ans.push_back(carry);\\n       reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2415851,
                "title": "beginner-friendly-javascript-python-solution",
                "content": "\\n```javascript []\\nvar addToArrayForm = function(num, k) {\\n    let res = [], i=num.length\\n    while(i-- > 0 || k){\\n        if(i >= 0)  k += num[i];\\n        res.unshift(k%10)\\n        k = Math.floor(k/10)\\n    }\\n    return res\\n};\\n```\\n\\n``` python []\\nclass Solution(object):\\n    def addToArrayForm(self, num, k):\\n        res = [] \\n        i=len(num)-1\\n        while i >= 0 or k:\\n            if i >= 0:\\n                k += num[i]\\n            res.insert(0, k%10)\\n            k = k/10\\n            i -= 1\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "JavaScript"
                ],
                "code": "```javascript []\\nvar addToArrayForm = function(num, k) {\\n    let res = [], i=num.length\\n    while(i-- > 0 || k){\\n        if(i >= 0)  k += num[i];\\n        res.unshift(k%10)\\n        k = Math.floor(k/10)\\n    }\\n    return res\\n};\\n```\n``` python []\\nclass Solution(object):\\n    def addToArrayForm(self, num, k):\\n        res = [] \\n        i=len(num)-1\\n        while i >= 0 or k:\\n            if i >= 0:\\n                k += num[i]\\n            res.insert(0, k%10)\\n            k = k/10\\n            i -= 1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1429258,
                "title": "a-simple-java-solution",
                "content": "\\n\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> arr = new ArrayList<Integer>();\\n        for (int i = num.length - 1; i >= 0 ; i--) {\\n            arr.add((num[i] + k) % 10);\\n            k = (num[i] + k) / 10;\\n        }\\n        while (k>0){\\n            arr.add(k % 10);\\n            k = k /10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n```\\n\\nComment down if needed more clarity.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> arr = new ArrayList<Integer>();\\n        for (int i = num.length - 1; i >= 0 ; i--) {\\n            arr.add((num[i] + k) % 10);\\n            k = (num[i] + k) / 10;\\n        }\\n        while (k>0){\\n            arr.add(k % 10);\\n            k = k /10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 955987,
                "title": "c-faster-than-91-of-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int> &A, int K)\\n    {\\n        int i, size = A.size();\\n\\n        for (i = size - 1; i >= 0 && K != 0; i--)\\n        {\\n            K = K + A[i];\\n            A[i] = K % 10;\\n            K = K / 10;\\n        }\\n        while (K != 0)\\n        {\\n            A.insert(A.begin(), K % 10);\\n            K = K / 10;\\n        }\\n        return A;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int> &A, int K)\\n    {\\n        int i, size = A.size();\\n\\n        for (i = size - 1; i >= 0 && K != 0; i--)\\n        {\\n            K = K + A[i];\\n            A[i] = K % 10;\\n            K = K / 10;\\n        }\\n        while (K != 0)\\n        {\\n            A.insert(A.begin(), K % 10);\\n            K = K / 10;\\n        }\\n        return A;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 234521,
                "title": "c",
                "content": "```\\npublic IList<int> AddToArrayForm(int[] A, int K) {\\n    var i = A.Length - 1;\\n    var result = new List<int>();\\n    while(i >= 0 || K > 0) {\\n        K += (i >= 0 ? A[i--] : 0);\\n        result.Add((K % 10));\\n        K /= 10;\\n    }\\n    result.Reverse();\\n    return result;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic IList<int> AddToArrayForm(int[] A, int K) {\\n    var i = A.Length - 1;\\n    var result = new List<int>();\\n    while(i >= 0 || K > 0) {\\n        K += (i >= 0 ? A[i--] : 0);\\n        result.Add((K % 10));\\n        K /= 10;\\n    }\\n    result.Reverse();\\n    return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 234505,
                "title": "python3-one-line",
                "content": "A = [1,2,0,0], K = 34\\n[1,2,0,0] -> \"1200\" -> 1200 -> add K -> 1234 -> \"1234\" -> [1,2,3,4]\\n```python\\nclass Solution:\\n    def addToArrayForm(self, A: \\'List[int]\\', K: \\'int\\') -> \\'List[int]\\':\\n        return [int(s) for s in str(int(\\'\\'.join(str(x) for x in A)) + K)]\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def addToArrayForm(self, A: \\'List[int]\\', K: \\'int\\') -> \\'List[int]\\':\\n        return [int(s) for s in str(int(\\'\\'.join(str(x) for x in A)) + K)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188807,
                "title": "java-solution-easy-peasy-lemon-squeezy-simple",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        int i = num.length-1;\\n        int carry = 0;\\n        while(i >= 0){\\n            int val = num[i] + (k % 10) + carry;\\n            if(val > 9){\\n                list.add ( val % 10);\\n                val = val/10;\\n                carry = val;\\n            }\\n            else{\\n                list.add(  val);\\n                carry = 0;\\n            }\\n            i--;\\n            k=k/10;\\n        }\\n\\n        if(i >=0 ){\\n            while(i >= 0){\\n                list.add(num[i]);\\n                 i--;\\n            }\\n        }\\n        if(k != 0){\\n            while(k>0){\\n            int val = (k % 10) + carry;\\n            if(val > 9){\\n                list.add ( val % 10);\\n                val = val/10;\\n                carry = val;\\n            }\\n            else{\\n                list.add(  val);\\n                carry = 0;\\n            }\\n            k = k/10;\\n          }\\n        }\\n        if(carry !=0 ) list.add(carry);\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        int i = num.length-1;\\n        int carry = 0;\\n        while(i >= 0){\\n            int val = num[i] + (k % 10) + carry;\\n            if(val > 9){\\n                list.add ( val % 10);\\n                val = val/10;\\n                carry = val;\\n            }\\n            else{\\n                list.add(  val);\\n                carry = 0;\\n            }\\n            i--;\\n            k=k/10;\\n        }\\n\\n        if(i >=0 ){\\n            while(i >= 0){\\n                list.add(num[i]);\\n                 i--;\\n            }\\n        }\\n        if(k != 0){\\n            while(k>0){\\n            int val = (k % 10) + carry;\\n            if(val > 9){\\n                list.add ( val % 10);\\n                val = val/10;\\n                carry = val;\\n            }\\n            else{\\n                list.add(  val);\\n                carry = 0;\\n            }\\n            k = k/10;\\n          }\\n        }\\n        if(carry !=0 ) list.add(carry);\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188581,
                "title": "java-solution-the-hard-way",
                "content": "Please **UPVOTE** if you like my solution!\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        String n = \"\";\\n        for(int i = num.length-1;i>=0;i--){\\n            n += String.valueOf(num[i]); \\n        }\\n        StringBuilder sb = new StringBuilder(String.valueOf(k));\\n        String s = sb.reverse().toString();\\n\\n        int carry = 0;\\n        int sum = 0;\\n        for(int i = 0,j = 0;i<n.length() || j<s.length();i++,j++){\\n            \\n            if(i >= n.length()){\\n                sum = (s.charAt(j)-\\'0\\') + carry;\\n                carry = 0;\\n            }\\n            else if(j >= s.length()){\\n                sum = (n.charAt(i)-\\'0\\') + carry;\\n                carry = 0;\\n            }\\n            else{\\n                sum = (n.charAt(i)-\\'0\\') + (s.charAt(j)-\\'0\\') + carry;\\n                carry = 0;\\n            }\\n            if(sum>=10){\\n                list.add(sum%10);\\n                carry = sum/10;\\n            }\\n            else if(i == n.length()-1 && j >= s.length() && sum >= 10){\\n                list.add(sum%10);\\n                list.add(sum/10);\\n            }\\n            else if(i >= n.length() && j == s.length()-1 && sum >= 10){\\n                list.add(sum%10);\\n                list.add(sum/10);\\n            }\\n            else if(i == n.length()-1 && j == s.length()-1 && sum >= 10){\\n                list.add(sum%10);\\n                list.add(sum/10);\\n            }\\n            else{\\n                list.add(sum);\\n            }  \\n        }\\n        if(carry != 0){\\n            list.add(1);\\n        }\\n        \\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        String n = \"\";\\n        for(int i = num.length-1;i>=0;i--){\\n            n += String.valueOf(num[i]); \\n        }\\n        StringBuilder sb = new StringBuilder(String.valueOf(k));\\n        String s = sb.reverse().toString();\\n\\n        int carry = 0;\\n        int sum = 0;\\n        for(int i = 0,j = 0;i<n.length() || j<s.length();i++,j++){\\n            \\n            if(i >= n.length()){\\n                sum = (s.charAt(j)-\\'0\\') + carry;\\n                carry = 0;\\n            }\\n            else if(j >= s.length()){\\n                sum = (n.charAt(i)-\\'0\\') + carry;\\n                carry = 0;\\n            }\\n            else{\\n                sum = (n.charAt(i)-\\'0\\') + (s.charAt(j)-\\'0\\') + carry;\\n                carry = 0;\\n            }\\n            if(sum>=10){\\n                list.add(sum%10);\\n                carry = sum/10;\\n            }\\n            else if(i == n.length()-1 && j >= s.length() && sum >= 10){\\n                list.add(sum%10);\\n                list.add(sum/10);\\n            }\\n            else if(i >= n.length() && j == s.length()-1 && sum >= 10){\\n                list.add(sum%10);\\n                list.add(sum/10);\\n            }\\n            else if(i == n.length()-1 && j == s.length()-1 && sum >= 10){\\n                list.add(sum%10);\\n                list.add(sum/10);\\n            }\\n            else{\\n                list.add(sum);\\n            }  \\n        }\\n        if(carry != 0){\\n            list.add(1);\\n        }\\n        \\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187749,
                "title": "c-begineer-friendly-easy-understanding-video-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n**C++ Clear Explaination ,Please support if you find it usefull. Can give me feedback in comment for improvement.,will be very thankfull.**\\nhttps://www.youtube.com/watch?v=qWmANiGB00I/\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n        for(int i=num.size()-1;i>=0;i--){\\n            int temp = num[i]+k;\\n            // value to store .\\n            num[i] = temp%10;\\n            k=temp/10; // carry.\\n        }\\n        // if k>0 that means we need to insert in front.\\n        while(k>0){\\n            num.insert(num.begin(),k%10);\\n            k=k/10;\\n        }\\n\\n        return num;\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n        for(int i=num.size()-1;i>=0;i--){\\n            int temp = num[i]+k;\\n            // value to store .\\n            num[i] = temp%10;\\n            k=temp/10; // carry.\\n        }\\n        // if k>0 that means we need to insert in front.\\n        while(k>0){\\n            num.insert(num.begin(),k%10);\\n            k=k/10;\\n        }\\n\\n        return num;\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3186890,
                "title": "daily-leetcoding-challenge-february-day-15",
                "content": "This problem is the Daily LeetCoding Challenge for February, Day 15.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-to-array-form-of-integer/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 1 approach in the official solution</summary>\n\n  \n**Approach 1:** Schoolbook Addition\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/add-to-array-form-of-integer/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 2271708,
                "title": "easy-better-c-solution-explained-in-place-o-n",
                "content": "Algorithm:\\n1. Traversing the vector array from last and continuously adding the last element of integer \\'K\\'\\n\\ta. Adding k to num[i]\\n\\tb. Updating k by num[i]/10\\n\\tb. Updating num[i] by num[i]%10  \\n2. If any carry left, it will be inserted at start of the vector array num\\n3. Return the array.\\n\\nTime Complexity: O(n)\\nSpace Complexity: O(1)\\n\\nThanks for reading, If you like it, please upvote \\u2B06\\uFE0F and help me gain good reputation.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        // Peforming element wise sum\\n        for (int i=num.size()-1; i>=0 && k>0; i--) {\\n            num[i]+=k;\\n            k=num[i]/10;\\n            num[i]%=10;\\n        }\\n        \\n        // if carry left, insert it in vector in front\\n        while(k>0) {\\n            num.insert(num.begin(), k%10);\\n            k/=10;\\n        }\\n        \\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        // Peforming element wise sum\\n        for (int i=num.size()-1; i>=0 && k>0; i--) {\\n            num[i]+=k;\\n            k=num[i]/10;\\n            num[i]%=10;\\n        }\\n        \\n        // if carry left, insert it in vector in front\\n        while(k>0) {\\n            num.insert(num.begin(), k%10);\\n            k/=10;\\n        }\\n        \\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1717913,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list=new ArrayList<>();\\n        int i=num.length-1;\\n        while(i>=0 || k>0){\\n            if(i>=0)\\n                k=k+num[i];\\n            list.add(k%10);\\n            k/=10;\\n            i--;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list=new ArrayList<>();\\n        int i=num.length-1;\\n        while(i>=0 || k>0){\\n            if(i>=0)\\n                k=k+num[i];\\n            list.add(k%10);\\n            k/=10;\\n            i--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 561645,
                "title": "1-line-lazy-javascript-solution",
                "content": "```\\n156 / 156 test cases passed.\\nStatus: Accepted\\nRuntime: 176 ms\\nMemory Usage: 42.1 MB\\n\\n/**\\n * @param {number[]} A\\n * @param {number} K\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(A, K) {\\n  return [...(BigInt(A.join(\\'\\')) + BigInt(K) + \\'\\')];\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n156 / 156 test cases passed.\\nStatus: Accepted\\nRuntime: 176 ms\\nMemory Usage: 42.1 MB\\n\\n/**\\n * @param {number[]} A\\n * @param {number} K\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(A, K) {\\n  return [...(BigInt(A.join(\\'\\')) + BigInt(K) + \\'\\')];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 446914,
                "title": "accepted-python3-one-liner-using-map",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\\n        return list(map(int, list(str(int(\\'\\'.join(map(str, A))) + K))))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\\n        return list(map(int, list(str(int(\\'\\'.join(map(str, A))) + K))))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3190531,
                "title": "python-clean-simple-solution",
                "content": "- For Time Complexity we can say O(n),\\nand for space O(1). \\n\\n# Code\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        n = 0\\n        for i in num:\\n            n = n * 10 + i\\n        \\n        n = n + k\\n        num = []\\n\\n        while n != 0:\\n            num.append(n % 10)\\n            n //= 10\\n            \\n        return num[::-1]\\n```\\n\\n## One Liner\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return [int(i) for i in str(int(\\'\\'.join(map(str,num))) + k)]\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        n = 0\\n        for i in num:\\n            n = n * 10 + i\\n        \\n        n = n + k\\n        num = []\\n\\n        while n != 0:\\n            num.append(n % 10)\\n            n //= 10\\n            \\n        return num[::-1]\\n```\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return [int(i) for i in str(int(\\'\\'.join(map(str,num))) + k)]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188378,
                "title": "easy-java-solution-using-stack",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nTo solve the problem, you can start by converting the array num into an integer, then add k to it, and finally convert the result back into an array. However, since the constraints are quite large, you need to be careful about the implementation to avoid integer overflow.\\n\\nOne way to avoid integer overflow is to add k to the least significant digit of num, then compute the carry and propagate it to the more significant digits until there is no more carry. To convert the result back into an array, you can use a stack to store the digits in reverse order.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->Initialize a stack to store the digits of the result in reverse order, and set the carry to k.\\nIterate over the digits of the input array num from right to left, adding each digit to the carry and updating the carry accordingly. If the input array has more digits than k, the remaining digits are effectively treated as zeros.\\nAfter processing all the digits of num, or if there is still a carry, continue the iteration by adding the carry to the next digit (which may be zero), and updating the carry accordingly.\\nCompute the least significant digit of the result by taking the remainder of the sum modulo 10, and push it onto the stack.\\nDivide the sum by 10 to update the carry, and repeat the process for the next digit.\\nAfter processing all the digits, the stack contains the digits of the result in reverse order, so we create a new list and pop the digits from the stack one by one, adding them to the list.\\nReturn the list as the final result.\\n\\n\\n# Complexity\\n- Time complexity:O(max(N, log K))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(max(N, log K))\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        // Initialize a stack to store the digits of the result in reverse order, and set the carry to k.\\n        Stack<Integer> stack = new Stack<>();\\n        int carry = k;\\n        \\n        // Iterate over the digits of the input array num from right to left, adding each digit to the carry and updating the carry accordingly.\\n        int i = num.length - 1;\\n        while (i >= 0 || carry > 0) {\\n            if (i >= 0) {\\n                carry += num[i];\\n            }\\n            \\n            // Compute the least significant digit of the result by taking the remainder of the sum modulo 10, and push it onto the stack.\\n            stack.push(carry % 10);\\n            \\n            // Divide the sum by 10 to update the carry, and repeat the process for the next digit.\\n            carry /= 10;\\n            i--;\\n        }\\n        \\n        // Create a new list to store the digits of the result in the correct order, and pop the digits from the stack one by one, adding them to the list.\\n        List<Integer> result = new ArrayList<>();\\n        while (!stack.isEmpty()) {\\n            result.add(stack.pop());\\n        }\\n        \\n        // Return the list as the final result.\\n        return result;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        // Initialize a stack to store the digits of the result in reverse order, and set the carry to k.\\n        Stack<Integer> stack = new Stack<>();\\n        int carry = k;\\n        \\n        // Iterate over the digits of the input array num from right to left, adding each digit to the carry and updating the carry accordingly.\\n        int i = num.length - 1;\\n        while (i >= 0 || carry > 0) {\\n            if (i >= 0) {\\n                carry += num[i];\\n            }\\n            \\n            // Compute the least significant digit of the result by taking the remainder of the sum modulo 10, and push it onto the stack.\\n            stack.push(carry % 10);\\n            \\n            // Divide the sum by 10 to update the carry, and repeat the process for the next digit.\\n            carry /= 10;\\n            i--;\\n        }\\n        \\n        // Create a new list to store the digits of the result in the correct order, and pop the digits from the stack one by one, adding them to the list.\\n        List<Integer> result = new ArrayList<>();\\n        while (!stack.isEmpty()) {\\n            result.add(stack.pop());\\n        }\\n        \\n        // Return the list as the final result.\\n        return result;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187677,
                "title": "java-c-100-solution-using-math-add-to-array-form-of-integer",
                "content": "# Complexity\\n- Time complexity: $$O(max(n,m))$$ \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(max(n,m))$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n*where n is size of num vector and m is number of digits in k.*\\n\\n# Code\\n```C++ []\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> ans;\\n        int i=num.size();\\n        while(i || k!=0)\\n        {\\n            if(i>0)\\n                k+=num[--i];\\n\\n            ans.push_back(k%10);\\n            k/=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\\n```Java []\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        int i=num.length;\\n        while(i>0 || k!=0)\\n        {\\n            if(i>0)\\n                k+=num[--i];\\n\\n            ans.add(k%10);\\n            k/=10;\\n        }\\n        Collections.reverse(ans);\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Math"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> ans;\\n        int i=num.size();\\n        while(i || k!=0)\\n        {\\n            if(i>0)\\n                k+=num[--i];\\n\\n            ans.push_back(k%10);\\n            k/=10;\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\n```Java []\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        int i=num.length;\\n        while(i>0 || k!=0)\\n        {\\n            if(i>0)\\n                k+=num[--i];\\n\\n            ans.add(k%10);\\n            k/=10;\\n        }\\n        Collections.reverse(ans);\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187257,
                "title": "golang-short-and-simple-solution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(1) - if we don\\'t count additional elements produced by k. But it\\'s limited to 4 as k <= 10^4\\n\\n\\n# Code\\n```\\nfunc addToArrayForm(num []int, k int) []int {\\n    i := 1\\n    for k > 0 {\\n        if len(num) >= i {\\n            k += num[len(num)-i]\\n            num[len(num)-i] = k % 10\\n        } else {\\n            num = append([]int{k % 10}, num...)\\n        }\\n        i++\\n        k = k / 10\\n    }\\n    return num\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc addToArrayForm(num []int, k int) []int {\\n    i := 1\\n    for k > 0 {\\n        if len(num) >= i {\\n            k += num[len(num)-i]\\n            num[len(num)-i] = k % 10\\n        } else {\\n            num = append([]int{k % 10}, num...)\\n        }\\n        i++\\n        k = k / 10\\n    }\\n    return num\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3187190,
                "title": "c-0ms-faster-solution-o-1-space-complexity-clean-and-understandable",
                "content": "# Code\\n# **PLEASE DO UPVOTE !**\\n**CONNECT WITH ME ON LINKEDIN : https://www.linkedin.com/in/kunal-shaw-/**\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int n=num.size();\\n        int c=0;\\n        int i;\\n        for(i=n-1;i>=0 or k>0;i--){\\n            int r=k%10;\\n            k/=10;\\n            if(i>=0){\\n                int res=num[i]+r+c;\\n                num[i]=res%10;\\n                c=res/10;\\n            }\\n            else{\\n                int res=r+c;\\n                num.insert(num.begin(),res%10);\\n                c=res/10;\\n            }\\n\\n        }\\n        if(c>0){\\n            num.insert(num.begin(),c);\\n        }\\n        return num;\\n    }\\n};\\n```\\n![memer-cat.jpg](https://assets.leetcode.com/users/images/dfc2018d-01d8-43da-9889-af2896179f15_1675779280.3429081.jpeg)",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int n=num.size();\\n        int c=0;\\n        int i;\\n        for(i=n-1;i>=0 or k>0;i--){\\n            int r=k%10;\\n            k/=10;\\n            if(i>=0){\\n                int res=num[i]+r+c;\\n                num[i]=res%10;\\n                c=res/10;\\n            }\\n            else{\\n                int res=r+c;\\n                num.insert(num.begin(),res%10);\\n                c=res/10;\\n            }\\n\\n        }\\n        if(c>0){\\n            num.insert(num.begin(),c);\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187181,
                "title": "one-liner-parseint-substitute",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    return [...(BigInt(num.join(\"\"))+BigInt(k)).toString()]\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    return [...(BigInt(num.join(\"\"))+BigInt(k)).toString()]\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3119652,
                "title": "java-biginteger-easy-to-understand",
                "content": "```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s=\"\";\\n        for(int i:num){\\n            s+=i;\\n        }\\n        String kk=k+\"\";\\n        List<Integer> al=new ArrayList<>();\\n        BigInteger a=new BigInteger(s);\\n        BigInteger b=new BigInteger(kk);\\n        BigInteger c=a.add(b);\\n        String str=c.toString();\\n        for(char ch:str.toCharArray()){\\n            al.add(ch-\\'0\\');\\n        }\\n        return al;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s=\"\";\\n        for(int i:num){\\n            s+=i;\\n        }\\n        String kk=k+\"\";\\n        List<Integer> al=new ArrayList<>();\\n        BigInteger a=new BigInteger(s);\\n        BigInteger b=new BigInteger(kk);\\n        BigInteger c=a.add(b);\\n        String str=c.toString();\\n        for(char ch:str.toCharArray()){\\n            al.add(ch-\\'0\\');\\n        }\\n        return al;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2483086,
                "title": "python-c-java-beginner-level-as-simple-as-u-think-simple-short-solution",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome*.**\\n___________________\\n_________________\\n***Q989. Add to Array-Form of Integer***\\nThe **array-form** of an integer num is an array representing its digits in left to right order.\\n\\n* `For example, for num = 1321, the array form is [1,3,2,1].`\\n\\nGiven num, the **array-form** of an integer, and an integer k`, return the `**array-form** of the integer `num + k`\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **Python  Code** :\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        s=\\'\\'.join(map(str,num))\\n        a=int(s)+k\\n        return [int(i) for i in str(a)]\\n```\\n**Runtime:**  662 ms\\t\\n**Memory Usage:**  13.9 MB\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\n\\u2705 **Java Code** :\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num ,int k) {\\n        List<Integer> res = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) \\n        {\\n            res.add(0, (num[i] + k) % 10);\\n            k = (num[i] + k) / 10;\\n        }\\n        while (k > 0) {\\n            res.add(0, k % 10);\\n            k /= 10;\\n        }\\n        return res;\\n    }\\n}\\n```\\n**Runtime:**  11 ms\\t\\t\\n**Memory Usage:**  62.8 MB\\t\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **C++  Code** :\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int l=num.size()-1;\\n        for(int i=l;i>=0&&k>0;--i)\\n        {\\n            num[i]=num[i]+k;\\n            k=num[i]/10;\\n            num[i]=num[i]%10;\\n        }\\n        while(k>0)\\n        {\\n            num.insert(num.begin(),k%10);\\n            k/=10;\\n        }\\n        return num;\\n    }\\n};\\n```\\n**Runtime:** 11 ms\\t\\n**Memory Usage:**  62.3 MB\\t\\t\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        s=\\'\\'.join(map(str,num))\\n        a=int(s)+k\\n        return [int(i) for i in str(a)]\\n```\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num ,int k) {\\n        List<Integer> res = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) \\n        {\\n            res.add(0, (num[i] + k) % 10);\\n            k = (num[i] + k) / 10;\\n        }\\n        while (k > 0) {\\n            res.add(0, k % 10);\\n            k /= 10;\\n        }\\n        return res;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int l=num.size()-1;\\n        for(int i=l;i>=0&&k>0;--i)\\n        {\\n            num[i]=num[i]+k;\\n            k=num[i]/10;\\n            num[i]=num[i]%10;\\n        }\\n        while(k>0)\\n        {\\n            num.insert(num.begin(),k%10);\\n            k/=10;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2385158,
                "title": "c-solution-98-ms-15-9-mb",
                "content": "![image](https://assets.leetcode.com/users/images/5f628d40-07e1-4605-b8ae-a283bc9a2b94_1659748246.6982584.png)\\n\\n```\\nint* addToArrayForm(int* num, int numSize, int k, int* returnSize){\\n    int car = 0; int* returnNum;\\n    *returnSize = numSize;\\n    \\n    for (int i = numSize - 1; i > -1; i--)\\n    {\\n        num[i] += ((k % 10) + car);\\n        k /= 10;\\n        \\n        if (num[i] > 9)\\n        {\\n            car = 1;\\n            num[i] %= 10;\\n        }\\n        else car = 0;\\n    }\\n    \\n\\t// i.e. if k.len > num.len and/or (num + k).len > num.len\\n    if (k || car)\\n    {\\n        k += car;\\n        int nlen = ((k) ? log10(k) + 1 : 0);\\n        *returnSize += nlen;\\n        returnNum = (int*) malloc(sizeof(int) * (*returnSize));\\n        \\n        for (int i = nlen - 1; i > -1; i--) \\n        {\\n            returnNum[i] = k % 10;\\n            k /= 10;\\n        }\\n        for (int i = nlen; i < (*returnSize); i++) returnNum[i] = num[i - nlen];\\n    }\\n    else\\n    {\\n        returnNum = (int*) malloc(sizeof(int) * numSize); \\n        for (int i = 0; i < numSize; i++) returnNum[i] = num[i];\\n    }\\n    \\n    return returnNum;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Array"
                ],
                "code": "```\\nint* addToArrayForm(int* num, int numSize, int k, int* returnSize){\\n    int car = 0; int* returnNum;\\n    *returnSize = numSize;\\n    \\n    for (int i = numSize - 1; i > -1; i--)\\n    {\\n        num[i] += ((k % 10) + car);\\n        k /= 10;\\n        \\n        if (num[i] > 9)\\n        {\\n            car = 1;\\n            num[i] %= 10;\\n        }\\n        else car = 0;\\n    }\\n    \\n\\t// i.e. if k.len > num.len and/or (num + k).len > num.len\\n    if (k || car)\\n    {\\n        k += car;\\n        int nlen = ((k) ? log10(k) + 1 : 0);\\n        *returnSize += nlen;\\n        returnNum = (int*) malloc(sizeof(int) * (*returnSize));\\n        \\n        for (int i = nlen - 1; i > -1; i--) \\n        {\\n            returnNum[i] = k % 10;\\n            k /= 10;\\n        }\\n        for (int i = nlen; i < (*returnSize); i++) returnNum[i] = num[i - nlen];\\n    }\\n    else\\n    {\\n        returnNum = (int*) malloc(sizeof(int) * numSize); \\n        for (int i = 0; i < numSize; i++) returnNum[i] = num[i];\\n    }\\n    \\n    return returnNum;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2294016,
                "title": "simple-c-code-with-explanation-comments-added",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n    vector<int>ans;\\n      int carry=0;\\n      \\n     int i=num.size()-1;\\n      while(i>=0 || carry>0 || k!=0 )\\n     {\\n       if(k!=0)  // here we are adding last digit of k in a[i] from last, and if after adding value is greater than 10\\n                 \\n      { carry+=k%10;\\n       k/=10;}\\n       \\n        if(i>=0)\\n       { carry+=num[i--];}\\n       \\n      ans.push_back(carry%10);// than we using carry%10 and left carry is stored by carry/=10 , and used further \\n       carry/=10;\\n     }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n    }\\n};\\nhoped you understood man , happy coding  (if you are an indian than definetly you will upvote this)\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n    vector<int>ans;\\n      int carry=0;\\n      \\n     int i=num.size()-1;\\n      while(i>=0 || carry>0 || k!=0 )\\n     {\\n       if(k!=0)  // here we are adding last digit of k in a[i] from last, and if after adding value is greater than 10\\n                 \\n      { carry+=k%10;\\n       k/=10;}\\n       \\n        if(i>=0)\\n       { carry+=num[i--];}\\n       \\n      ans.push_back(carry%10);// than we using carry%10 and left carry is stored by carry/=10 , and used further \\n       carry/=10;\\n     }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n    }\\n};\\nhoped you understood man , happy coding  (if you are an indian than definetly you will upvote this)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1909820,
                "title": "java-very-easy-solution-less-than-90-59-memory-o-n-time",
                "content": "***Please Upvote if you find this helpful***\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        int sum = 0;\\n        for (int i = num.length; i > 0; i--) {\\n            if (k > 0) {\\n                sum = sum + (k % 10) + num[i-1];\\n                list.add(0, sum % 10);\\n                k /= 10;\\n            }\\n            else {\\n                sum += num[i-1];\\n                list.add(0, sum % 10);\\n            }\\n            sum /= 10;\\n        }\\n        while (sum > 0 || k > 0) {\\n            sum += k % 10;\\n            list.add(0, sum % 10);\\n            sum /= 10; k /= 10;\\n        }\\n        return list;\\n    }\\n}\\n```\\n***Please Upvote if you find this helpful***\\n![image](https://assets.leetcode.com/users/images/b6d2df43-956f-413b-93d4-eb01a511ceb7_1648970779.6249008.png)\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        int sum = 0;\\n        for (int i = num.length; i > 0; i--) {\\n            if (k > 0) {\\n                sum = sum + (k % 10) + num[i-1];\\n                list.add(0, sum % 10);\\n                k /= 10;\\n            }\\n            else {\\n                sum += num[i-1];\\n                list.add(0, sum % 10);\\n            }\\n            sum /= 10;\\n        }\\n        while (sum > 0 || k > 0) {\\n            sum += k % 10;\\n            list.add(0, sum % 10);\\n            sum /= 10; k /= 10;\\n        }\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1426870,
                "title": "java-o-n-time-o-n-space",
                "content": "```\\nclass Solution {\\n    // O(n) Time | O(n) Space\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int n = num.length;\\n        ArrayList<Integer> list = new ArrayList<>();\\n        for(int i = n - 1; i >= 0; i--) { \\n            int sum = num[i] + k;\\n            list.add(sum % 10); // Inserting at the end of arraylist takes O(1) time.\\n            k = sum / 10;\\n        }\\n        while(k > 0) {\\n            list.add(k % 10); \\n            k = k / 10;\\n        }\\n        Collections.reverse(list); // Reversing will take O(n) time.\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    // O(n) Time | O(n) Space\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int n = num.length;\\n        ArrayList<Integer> list = new ArrayList<>();\\n        for(int i = n - 1; i >= 0; i--) { \\n            int sum = num[i] + k;\\n            list.add(sum % 10); // Inserting at the end of arraylist takes O(1) time.\\n            k = sum / 10;\\n        }\\n        while(k > 0) {\\n            list.add(k % 10); \\n            k = k / 10;\\n        }\\n        Collections.reverse(list); // Reversing will take O(n) time.\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1013078,
                "title": "easiest-solution-o-n-amazon-facebook-asked-10-lines-of-code",
                "content": "If you like my approach please do upvote!\\n\\nIn this we have converted a number to string so that we can add it\\'s corresponding values easily!\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& A, int K) {\\n        vector<int>v;\\n        string p=to_string(K);\\n        int l1=A.size()-1;\\n        int l2=p.size()-1;\\n        int carry=0;\\n        int i=0;\\n        while(l1>=0 || l2>=0){\\n            \\n            int sum=carry;\\n            //here sum=sum+carry would be same as this s have written it like this only\\n            if(l1>=0){\\n                sum=sum+A[l1--];\\n            }\\n            if(l2>=0){\\n                sum=sum+p[l2--]-\\'0\\';\\n            }\\n            v.push_back(sum%10);\\n            carry=sum/10;\\n            \\n        }\\n        if(carry>0){\\n            v.push_back(carry);\\n        }\\n        reverse(v.begin(),v.end());\\n        \\n        return v;\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& A, int K) {\\n        vector<int>v;\\n        string p=to_string(K);\\n        int l1=A.size()-1;\\n        int l2=p.size()-1;\\n        int carry=0;\\n        int i=0;\\n        while(l1>=0 || l2>=0){\\n            \\n            int sum=carry;\\n            //here sum=sum+carry would be same as this s have written it like this only\\n            if(l1>=0){\\n                sum=sum+A[l1--];\\n            }\\n            if(l2>=0){\\n                sum=sum+p[l2--]-\\'0\\';\\n            }\\n            v.push_back(sum%10);\\n            carry=sum/10;\\n            \\n        }\\n        if(carry>0){\\n            v.push_back(carry);\\n        }\\n        reverse(v.begin(),v.end());\\n        \\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 572725,
                "title": "javascript-solution",
                "content": "```\\nvar addToArrayForm = function(A, K) {\\n    // i = current index of array A\\n    // c = carry\\n    // k = current least significant digit of K\\n    // a = current least significant digit of A\\n    // d = current digit to push\\n    \\n    const n = A.length\\n    const temp = []\\n    let i = n - 1\\n    let c = 0\\n    \\n    while (i >= 0 || K > 0) {\\n        let k = K % 10\\n        let a = i < 0 ? 0 : A[i]\\n        let s = k + a + c\\n        let d = s % 10\\n        temp.push(d)\\n        c = s > 9 ? 1 : 0\\n        K = Math.floor(K / 10)\\n        i--\\n    }\\n\\n    if (c == 1) temp.push(c)\\n    \\n    return temp.reverse()\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar addToArrayForm = function(A, K) {\\n    // i = current index of array A\\n    // c = carry\\n    // k = current least significant digit of K\\n    // a = current least significant digit of A\\n    // d = current digit to push\\n    \\n    const n = A.length\\n    const temp = []\\n    let i = n - 1\\n    let c = 0\\n    \\n    while (i >= 0 || K > 0) {\\n        let k = K % 10\\n        let a = i < 0 ? 0 : A[i]\\n        let s = k + a + c\\n        let d = s % 10\\n        temp.push(d)\\n        c = s > 9 ? 1 : 0\\n        K = Math.floor(K / 10)\\n        i--\\n    }\\n\\n    if (c == 1) temp.push(c)\\n    \\n    return temp.reverse()\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 559443,
                "title": "python-easy-solution",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\\n        # prepare original number\\n        str_numbers_list = [str(number) for number in A]\\n        number = int(\"\".join(str_numbers_list))\\n\\n        # prepare and return the answer\\n        number += K\\n        res = [int(x) for x in str(number)] \\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\\n        # prepare original number\\n        str_numbers_list = [str(number) for number in A]\\n        number = int(\"\".join(str_numbers_list))\\n\\n        # prepare and return the answer\\n        number += K\\n        res = [int(x) for x in str(number)] \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 234502,
                "title": "c-reverse",
                "content": "Reverse the string first to simplify things. Then add numbers left to rigth, and mind the overflow.\\n\\nIf needed, add an extra character to the end of the string. Since the string is reversed, adding a character does not require shifting the whole string.\\n\\nIn the end, reverse the string back.\\n```\\nvector<int> addToArrayForm(vector<int>& A, int K) {\\n  reverse(begin(A), end(A));\\n  for (size_t i = 0; K > 0; K /= 10, ++i) {\\n    A.resize(max(i + 1, A.size()));\\n    if ((A[i] += K % 10) >= 10) {\\n      A[i] -= 10;\\n      K += 10;\\n    }\\n  }\\n  reverse(begin(A), end(A));\\n  return A;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvector<int> addToArrayForm(vector<int>& A, int K) {\\n  reverse(begin(A), end(A));\\n  for (size_t i = 0; K > 0; K /= 10, ++i) {\\n    A.resize(max(i + 1, A.size()));\\n    if ((A[i] += K % 10) >= 10) {\\n      A[i] -= 10;\\n      K += 10;\\n    }\\n  }\\n  reverse(begin(A), end(A));\\n  return A;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3194158,
                "title": "java-straight-froward-easy-solution-easy-approach",
                "content": "# Intuition\\nEasy Java Solution \\n\\n# Approach\\njust like orthodox addition method ie..\\n 1 2 \\n+  5\\n____\\n 1 7\\n\\nhere we are adding numbers from end of array a keeping an carry for further addition purpose \\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n) , for answer set List for solution we do not require any space ie. O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        int carry =0;\\n        for(int i =num.length-1;i>=0;i--){\\n            int n = k%10;\\n            k = k/10;\\n            int total = n+num[i]+carry;\\n            if(total>9){\\n                carry = 1;\\n                total = total%10;\\n            }\\n            else if(total<=9){\\n                carry=0;\\n            }\\n            list.add(0,total);\\n        }\\n        if(k>0){\\n            while(k>0){\\n            int n = k%10;\\n            k = k/10;\\n            int total = n+carry;\\n            if(total>9){\\n                carry = 1;\\n                total = total%10;\\n            }\\n            else if(total<=9){\\n                carry=0;\\n            }\\n            list.add(0,total);\\n            }\\n        }\\n        if(carry==1){\\n            list.add(0,1);\\n        }\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        int carry =0;\\n        for(int i =num.length-1;i>=0;i--){\\n            int n = k%10;\\n            k = k/10;\\n            int total = n+num[i]+carry;\\n            if(total>9){\\n                carry = 1;\\n                total = total%10;\\n            }\\n            else if(total<=9){\\n                carry=0;\\n            }\\n            list.add(0,total);\\n        }\\n        if(k>0){\\n            while(k>0){\\n            int n = k%10;\\n            k = k/10;\\n            int total = n+carry;\\n            if(total>9){\\n                carry = 1;\\n                total = total%10;\\n            }\\n            else if(total<=9){\\n                carry=0;\\n            }\\n            list.add(0,total);\\n            }\\n        }\\n        if(carry==1){\\n            list.add(0,1);\\n        }\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189940,
                "title": "1-line-python-solution-beats-98-4-in-memory",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. turn each element on nums into a string \\n```\\nmap(str,num)\\n```\\n2. concate the elements of the array together\\n```\\n\\'\\'.join(map(str,num))\\n```\\n3. type cast into int and add k\\n```\\nint(\\'\\'.join(map(str,num))) + k\\n```\\n4. type cast into string\\n```\\nstr(int(\\'\\'.join(map(str,num)))+k)\\n```\\n5. create a list after type casting each char of the string into int\\n```\\nlist(map(int,str(int(\\'\\'.join(map(str,num)))+k)))\\n```\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ ; where n = len(num)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\ndon\\'t know how to actually compute it, let me know in the comments.\\n\\n# Code\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return list(map(int,str(int(\\'\\'.join(map(str,num)))+k)))\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nmap(str,num)\\n```\n```\\n\\'\\'.join(map(str,num))\\n```\n```\\nint(\\'\\'.join(map(str,num))) + k\\n```\n```\\nstr(int(\\'\\'.join(map(str,num)))+k)\\n```\n```\\nlist(map(int,str(int(\\'\\'.join(map(str,num)))+k)))\\n```\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return list(map(int,str(int(\\'\\'.join(map(str,num)))+k)))\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189933,
                "title": "python3-one-line-easiest-solution-beats-66-runtime-65-memory",
                "content": "# Intuition\\nEasy problem with one line solution where `num` list is joined to form an int and then added to `k` and again converted to list.\\n\\n# Approach\\nAlthough its a one-line solution, there are multiple steps involved.\\n1. Iterating through the `nums` list while converting each element to `str` and then joining them. Now this joined string will be converted to `int`.\\n2. The `int` obtained in Step-1 will be added to `k` and then the `sum` is again converted to string.\\n3. Now, iterate over the `sum` string into `list` while converting each element to `int`.\\n\\n# Complexity\\n- Time complexity : $$O(log(len(num)^2 + k))$$\\n- Space complexity : $$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return [int(i) for i in str(k+ int(\\'\\'.join(str(n) for n in num)))]\\n```\\n---\\n\\n### Happy Coding \\uD83D\\uDC68\\u200D\\uD83D\\uDCBB\\n\\n---\\n\\n### If this solution helped you then do consider Upvoting \\u2B06.\\n#### Lets connect on LinkedIn : [Om Anand](https://www.linkedin.com/in/om-anand-38341a1ba/) \\uD83D\\uDD90\\uD83D\\uDE00\\n---\\n\\n### Comment your views/corrections \\uD83D\\uDE0A\\n",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return [int(i) for i in str(k+ int(\\'\\'.join(str(n) for n in num)))]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189543,
                "title": "easy-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMove from write to left, k is the carry, add num[i]+k, num[i]=lastdigit\\nand k = alldigits except last digit .... do so on.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        for(int i=num.size()-1;i>=0;i--){\\n            num[i] += k;\\n            k = num[i]/10;\\n            num[i] %= 10;\\n        }\\n        while(k > 0){\\n            num.insert(num.begin(), k%10);\\n            k /= 10;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        for(int i=num.size()-1;i>=0;i--){\\n            num[i] += k;\\n            k = num[i]/10;\\n            num[i] %= 10;\\n        }\\n        while(k > 0){\\n            num.insert(num.begin(), k%10);\\n            k /= 10;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189482,
                "title": "0ms-simple-java-solution-easy-to-understand-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n      List<Integer> r = new ArrayList<>();\\n      int l=num.length-1;\\n      int c=0;\\n      while(l>=0||k>0){\\n          int sum=c;\\n          if(l>=0){\\n              sum+=num[l];\\n              l--;\\n          }\\n          if(k>=0){\\n              sum+=(k%10);\\n              k/=10;\\n          }\\n          r.add(sum%10);\\n          c=sum/10;\\n      }\\n      if(c>0){\\n          r.add(c);\\n      }\\n    Collections.reverse(r);\\n    return r;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n      List<Integer> r = new ArrayList<>();\\n      int l=num.length-1;\\n      int c=0;\\n      while(l>=0||k>0){\\n          int sum=c;\\n          if(l>=0){\\n              sum+=num[l];\\n              l--;\\n          }\\n          if(k>=0){\\n              sum+=(k%10);\\n              k/=10;\\n          }\\n          r.add(sum%10);\\n          c=sum/10;\\n      }\\n      if(c>0){\\n          r.add(c);\\n      }\\n    Collections.reverse(r);\\n    return r;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187947,
                "title": "java-easy-to-understand-solution",
                "content": "\\n# Approach\\nJUST SIMPLE ADDITION.\\n\\nTIP : use LinkedList instead of ArrayList.\\n\\n# Complexity\\n- Time complexity : O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int n=num.length;\\n        List<Integer> l=new LinkedList<>();\\n        for(int i=0;i<n||k!=0;i++){\\n            if(i<n) k+=num[n-i-1];\\n            l.add(0,k%10);\\n            k=k/10;\\n        }\\n        return l;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Linked List",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int n=num.length;\\n        List<Integer> l=new LinkedList<>();\\n        for(int i=0;i<n||k!=0;i++){\\n            if(i<n) k+=num[n-i-1];\\n            l.add(0,k%10);\\n            k=k/10;\\n        }\\n        return l;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187887,
                "title": "optimized-solution-in-c",
                "content": "# Intuition\\nWe can optimize the solution to avoid the integer conversion and make it more efficient. Instead of computing the sum of the input integer and k digit by digit, we can directly add k to the least significant digit of the input integer and carry over the result to the higher digits. This way, we can build the array-form of the sum digit by digit, without having to convert the input integer to an integer.\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n    vector<int> res;\\n    int carry = k;\\n    \\n    for (int i = num.size() - 1; i >= 0 || carry > 0; i--) {\\n        if (i >= 0) {\\n            carry += num[i];\\n        }\\n        res.push_back(carry % 10);\\n        carry /= 10;\\n    }\\n    \\n    reverse(res.begin(), res.end());\\n    return res;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n    vector<int> res;\\n    int carry = k;\\n    \\n    for (int i = num.size() - 1; i >= 0 || carry > 0; i--) {\\n        if (i >= 0) {\\n            carry += num[i];\\n        }\\n        res.push_back(carry % 10);\\n        carry /= 10;\\n    }\\n    \\n    reverse(res.begin(), res.end());\\n    return res;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187535,
                "title": "simple-beginner-solution-addition-carry-concept",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int n=num.size();\\n        vector<int> ans;\\n        int carry=0;\\n        for(int i=n-1;i>=0;--i){\\n             int res=num[i]+k%10+ carry;\\n             ans.push_back(res%10);\\n              carry=res/10;\\n              k=k/10;\\n              \\n        }\\n      \\n         while(k){\\n           int res=carry+k%10;\\n              ans.push_back(res%10);\\n              carry=res/10;\\n              k=k/10;\\n         }\\n         if(carry){\\n             ans.push_back(carry);\\n         }\\n         \\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int n=num.size();\\n        vector<int> ans;\\n        int carry=0;\\n        for(int i=n-1;i>=0;--i){\\n             int res=num[i]+k%10+ carry;\\n             ans.push_back(res%10);\\n              carry=res/10;\\n              k=k/10;\\n              \\n        }\\n      \\n         while(k){\\n           int res=carry+k%10;\\n              ans.push_back(res%10);\\n              carry=res/10;\\n              k=k/10;\\n         }\\n         if(carry){\\n             ans.push_back(carry);\\n         }\\n         \\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187277,
                "title": "rust-easy-solution",
                "content": "\\n```\\nimpl Solution {\\n    pub fn add_to_array_form(num: Vec<i32>, k: i32) -> Vec<i32> {\\n        let mut k = k;\\n        let mut res = vec![];\\n        let mut j = num.len();\\n        let mut carry = 0;\\n\\n        while j > 0 || k > 0 || carry > 0 {\\n            if j > 0 {\\n                carry += num[j - 1];\\n                j -= 1;\\n            }\\n\\n            carry += k % 10;\\n            k /= 10;\\n\\n            res.push(carry % 10);\\n            carry /= 10;\\n        }\\n\\n        res.reverse();\\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn add_to_array_form(num: Vec<i32>, k: i32) -> Vec<i32> {\\n        let mut k = k;\\n        let mut res = vec![];\\n        let mut j = num.len();\\n        let mut carry = 0;\\n\\n        while j > 0 || k > 0 || carry > 0 {\\n            if j > 0 {\\n                carry += num[j - 1];\\n                j -= 1;\\n            }\\n\\n            carry += k % 10;\\n            k /= 10;\\n\\n            res.push(carry % 10);\\n            carry /= 10;\\n        }\\n\\n        res.reverse();\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3186984,
                "title": "java-linkedlist-10-lines-beats-97",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(max(N,logK))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(max(N,logK))$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public List<Integer> addToArrayForm(int[] num, int k) {\\n    var ans = new LinkedList<Integer>();\\n    var carry = 0;\\n\\n    for (var i = num.length - 1; i >= 0 || k > 0 ; i--, k /= 10) {\\n      var a = i >= 0 ? num[i] : 0;\\n      var b = k > 0 ? k % 10 : 0;\\n      var c = a + b + carry;\\n\\n      ans.addFirst(c % 10);\\n      carry = c / 10;\\n    }\\n    if (carry > 0) ans.addFirst(carry);\\n    return ans;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Doubly-Linked List"
                ],
                "code": "```\\nclass Solution {\\n  public List<Integer> addToArrayForm(int[] num, int k) {\\n    var ans = new LinkedList<Integer>();\\n    var carry = 0;\\n\\n    for (var i = num.length - 1; i >= 0 || k > 0 ; i--, k /= 10) {\\n      var a = i >= 0 ? num[i] : 0;\\n      var b = k > 0 ? k % 10 : 0;\\n      var c = a + b + carry;\\n\\n      ans.addFirst(c % 10);\\n      carry = c / 10;\\n    }\\n    if (carry > 0) ans.addFirst(carry);\\n    return ans;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3140879,
                "title": "python3-simple-solution-and-explained-o-n",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- First I converted list into string format in order to make it as number.\\n- Then I added the num and K and then converted the result into string again to convert from string format to list and assigned to str_list.\\n- Later converted the str_list into int by using map function and assigned it to final_str_list and returned it.\\n\\n# Code\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        s = \"\"\\n        for i in num:\\n            s+=str(i)\\n        str_list = \" \".join(str(int(s)+k)).split()\\n        final_list = list(map(int,str_list))\\n        return final_list\\n```\\n# Please upvote if you find the solution helpful.",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        s = \"\"\\n        for i in num:\\n            s+=str(i)\\n        str_list = \" \".join(str(int(s)+k)).split()\\n        final_list = list(map(int,str_list))\\n        return final_list\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2536523,
                "title": "java-simple-solution-faster-than-97",
                "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n\\t\\n        int n = num.length;\\n        int i = n-1;\\n        List<Integer> sol = new ArrayList<>();\\n        while(i >= 0 || k > 0) { \\n            if(i >= 0) {\\n            sol.add((num[i] + k) % 10);\\n            k = (num[i] + k) / 10;\\n        } else { \\n            sol.add(k % 10);\\n            k = k / 10;\\n            }\\n            i--;\\n        }\\n        Collections.reverse(sol);\\n        return sol;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n\\t\\n        int n = num.length;\\n        int i = n-1;\\n        List<Integer> sol = new ArrayList<>();\\n        while(i >= 0 || k > 0) { \\n            if(i >= 0) {\\n            sol.add((num[i] + k) % 10);\\n            k = (num[i] + k) / 10;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2037608,
                "title": "python3-one-line-solution",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return list(str(int(\"\".join([str(x) for x in num])) + k))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return list(str(int(\"\".join([str(x) for x in num])) + k))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1705822,
                "title": "java-easy-code",
                "content": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] nums, int k) {\\n        List<Integer> list=new ArrayList<>();\\n        int i=nums.length-1;\\n        while(i>=0 || k>0)\\n        {\\n            if(i>=0)\\n                k=k+nums[i];\\n            list.add(k%10);\\n            k/=10;\\n            i--;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] nums, int k) {\\n        List<Integer> list=new ArrayList<>();\\n        int i=nums.length-1;\\n        while(i>=0 || k>0)\\n        {\\n            if(i>=0)\\n                k=k+nums[i];\\n            list.add(k%10);\\n            k/=10;\\n            i--;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1611889,
                "title": "java-solution-with-complete-explanation",
                "content": "```\\n//refer screenshot for explanation\\n![image](https://assets.leetcode.com/users/images/fb0baa98-9a04-451a-92ec-e86406672045_1638670271.803106.png)\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList<>();\\n        \\n        for(int i=num.length-1; i>=0 || k>0; i--){\\n            \\n            if(i>=0){\\n                list.add((num[i]+k)%10);\\n                k=(num[i]+k)/10;\\n            }\\n            else{\\n                list.add(k%10);\\n                k/=10;\\n            }\\n        }\\n        \\n        Collections.reverse(list);\\n      return list;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n//refer screenshot for explanation\\n![image](https://assets.leetcode.com/users/images/fb0baa98-9a04-451a-92ec-e86406672045_1638670271.803106.png)\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList<>();\\n        \\n        for(int i=num.length-1; i>=0 || k>0; i--){\\n            \\n            if(i>=0){\\n                list.add((num[i]+k)%10);\\n                k=(num[i]+k)/10;\\n            }\\n            else{\\n                list.add(k%10);\\n                k/=10;\\n            }\\n        }\\n        \\n        Collections.reverse(list);\\n      return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1234980,
                "title": "simple-java-solution-faster-than-99-61-2ms",
                "content": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        LinkedList<Integer> result = new LinkedList();\\n        \\n        int sum = 0;\\n        int carry = 0;\\n        int i = num.length - 1;\\n        int data = 0;\\n        \\n        while(i >= 0 && k > 0){\\n            sum = num[i] + (k % 10) + carry;\\n            carry = sum / 10;\\n            result.addFirst(sum % 10);\\n            i--;\\n            k = k/10;\\n        }\\n        while(k > 0){\\n            sum = (k % 10) + carry;\\n            carry = sum / 10;\\n            result.addFirst(sum % 10);\\n            k = k/10;\\n        }\\n        while(i >= 0){\\n            sum = num[i] + carry;\\n            carry = sum / 10;\\n            result.addFirst(sum % 10);\\n            i--;\\n        }\\n        if(carry > 0)\\n            result.addFirst(carry);\\n        \\n        return result;\\n      \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        LinkedList<Integer> result = new LinkedList();\\n        \\n        int sum = 0;\\n        int carry = 0;\\n        int i = num.length - 1;\\n        int data = 0;\\n        \\n        while(i >= 0 && k > 0){\\n            sum = num[i] + (k % 10) + carry;\\n            carry = sum / 10;\\n            result.addFirst(sum % 10);\\n            i--;\\n            k = k/10;\\n        }\\n        while(k > 0){\\n            sum = (k % 10) + carry;\\n            carry = sum / 10;\\n            result.addFirst(sum % 10);\\n            k = k/10;\\n        }\\n        while(i >= 0){\\n            sum = num[i] + carry;\\n            carry = sum / 10;\\n            result.addFirst(sum % 10);\\n            i--;\\n        }\\n        if(carry > 0)\\n            result.addFirst(carry);\\n        \\n        return result;\\n      \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 931656,
                "title": "c-o-n-solution",
                "content": "# Implementation\\n* Time complexity: O(N) where N is the length of A.\\n  Traversing the input array takes O(N). List.Add() is a O(1) operation. List.Reverse() is a O(N) operation. \\n  \\n* Space complexity: O(N)\\n```\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] A, int K) {\\n         \\n        int carry = K, i = A.Length - 1;\\n        \\n        List<int> res = new List<int>();\\n        while(i >= 0 || carry > 0)\\n        {\\n            int val = i >= 0? A[i] : 0;\\n            int sum = val + carry;\\n            carry = sum / 10;\\n            res.Add(sum % 10);\\n            i--;\\n        }\\n        \\n        res.Reverse();\\n        return res;\\n    }\\n}\\n```\\n\\n# Some thoughts\\nUsing List.Insert() to build result from LSD (least significant digit)to MSD (most significant digit) will save a Reverse. However, List.Insert() is a O(N) operation, so below implemetation has O(N^2) time complexity.\\n```\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] A, int K) {\\n        \\n        char[] B = K.ToString().ToArray();\\n        \\n        int carry = 0, i1 = A.Length - 1, i2 = B.Length - 1;\\n        List<int> res = new List<int>();\\n        while(i1 >= 0 || i2 >= 0 || carry > 0)\\n        {\\n            int val1 = i1 >= 0? A[i1] : 0;\\n            int val2 = i2 >= 0? B[i2] - \\'0\\' : 0;\\n            int sum = val1 + val2 + carry;\\n            carry = sum / 10;\\n            res.Insert(0, sum % 10);\\n            i1--;\\n            i2--;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```\\n\\nWe can also use LinkedList to build the result. Unlike List<T> whose underlying data structure is Array, LinkedList<T> underlying data structure is a double linked list. LinkedList.AddFirst() is a O(1) operation and we can use it to build the result from LSD to MSD. Below solution will have O(N) time complexity.\\n```\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] A, int K) {\\n        \\n        char[] B = K.ToString().ToArray();\\n        \\n        int carry = 0, i1 = A.Length - 1, i2 = B.Length - 1;\\n        LinkedList<int> res = new LinkedList<int>();\\n        while(i1 >= 0 || i2 >= 0 || carry > 0)\\n        {\\n            int val1 = i1 >= 0? A[i1] : 0;\\n            int val2 = i2 >= 0? B[i2] - \\'0\\' : 0;\\n            int sum = val1 + val2 + carry;\\n            carry = sum / 10;\\n            res.AddFirst(sum % 10);\\n            i1--;\\n            i2--;\\n        }\\n        \\n        return new List<int>(res);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] A, int K) {\\n         \\n        int carry = K, i = A.Length - 1;\\n        \\n        List<int> res = new List<int>();\\n        while(i >= 0 || carry > 0)\\n        {\\n            int val = i >= 0? A[i] : 0;\\n            int sum = val + carry;\\n            carry = sum / 10;\\n            res.Add(sum % 10);\\n            i--;\\n        }\\n        \\n        res.Reverse();\\n        return res;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] A, int K) {\\n        \\n        char[] B = K.ToString().ToArray();\\n        \\n        int carry = 0, i1 = A.Length - 1, i2 = B.Length - 1;\\n        List<int> res = new List<int>();\\n        while(i1 >= 0 || i2 >= 0 || carry > 0)\\n        {\\n            int val1 = i1 >= 0? A[i1] : 0;\\n            int val2 = i2 >= 0? B[i2] - \\'0\\' : 0;\\n            int sum = val1 + val2 + carry;\\n            carry = sum / 10;\\n            res.Insert(0, sum % 10);\\n            i1--;\\n            i2--;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] A, int K) {\\n        \\n        char[] B = K.ToString().ToArray();\\n        \\n        int carry = 0, i1 = A.Length - 1, i2 = B.Length - 1;\\n        LinkedList<int> res = new LinkedList<int>();\\n        while(i1 >= 0 || i2 >= 0 || carry > 0)\\n        {\\n            int val1 = i1 >= 0? A[i1] : 0;\\n            int val2 = i2 >= 0? B[i2] - \\'0\\' : 0;\\n            int sum = val1 + val2 + carry;\\n            carry = sum / 10;\\n            res.AddFirst(sum % 10);\\n            i1--;\\n            i2--;\\n        }\\n        \\n        return new List<int>(res);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3840190,
                "title": "easy-beginner-friendly-python-solution",
                "content": "# Easy Beginner Friendly Python Solution :)\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Run Time\\n<!-- Describe your approach to solving the problem. -->\\nBeats 98.87%\\n\\n# Memory\\n<!-- Describe your approach to solving the problem. -->\\nBeats 62.89%\\n\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        ans=[]\\n        n=len(num)\\n        while n>0 or k!=0:\\n            if n>0:\\n                n -=1\\n                k+=num[n]\\n            ans.append(k%10)\\n            k=k//10\\n        newlis=ans[::-1]\\n        return newlis\\n```\\n![neko ask upvote.jpeg](https://assets.leetcode.com/users/images/80711c8a-144f-49ed-844f-4ad4bd029fd2_1691001342.2790887.jpeg)\\n\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        ans=[]\\n        n=len(num)\\n        while n>0 or k!=0:\\n            if n>0:\\n                n -=1\\n                k+=num[n]\\n            ans.append(k%10)\\n            k=k//10\\n        newlis=ans[::-1]\\n        return newlis\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3695224,
                "title": "what-is-the-time-and-space-complexity-of-my-solution",
                "content": "```c++\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        short carry = 0;\\n        \\n        for (int i = num.size() - 1; i >= 0; i--) {\\n            short sum = num[i] + (k % 10) + carry;\\n            \\n            if (sum > 9) {\\n                num[i] = sum % 10;\\n                carry = sum / 10;\\n                k /= 10;\\n            } else {\\n                num[i] = sum;\\n                k /= 10;\\n                carry = 0;\\n            }\\n        }\\n        \\n        while (k || carry) {\\n            short sum = (k % 10) + carry;\\n            \\n            if (sum > 9) {\\n                carry = sum / 10;\\n                num.insert(num.begin(), sum % 10);\\n                k /= 10;\\n            } else {\\n                num.insert(num.begin(), sum);\\n                carry = 0;\\n                k /= 10;      \\n            }\\n        }\\n        \\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```c++\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        short carry = 0;\\n        \\n        for (int i = num.size() - 1; i >= 0; i--) {\\n            short sum = num[i] + (k % 10) + carry;\\n            \\n            if (sum > 9) {\\n                num[i] = sum % 10;\\n                carry = sum / 10;\\n                k /= 10;\\n            } else {\\n                num[i] = sum;\\n                k /= 10;\\n                carry = 0;\\n            }\\n        }\\n        \\n        while (k || carry) {\\n            short sum = (k % 10) + carry;\\n            \\n            if (sum > 9) {\\n                carry = sum / 10;\\n                num.insert(num.begin(), sum % 10);\\n                k /= 10;\\n            } else {\\n                num.insert(num.begin(), sum);\\n                carry = 0;\\n                k /= 10;      \\n            }\\n        }\\n        \\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3277186,
                "title": "3-ms-solution-easiest-approach-short-code-java",
                "content": "- 152/152 cases passed (3 ms)\\n- Your runtime beats 96.62 % of java submissions\\n- Your memory usage beats 5.31 % of java submissions (44.8 MB)\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> out=new LinkedList<>();\\n        int c=0;\\n\\n        for(int i=num.length-1;i>=0;i--){\\n            c+=num[i]+(k%10);\\n            k/=10;\\n            out.addFirst(c%10);\\n            c/=10;\\n        }\\n        while(k>0 || c!=0){\\n            c+=(k%10);\\n            out.addFirst(c%10);\\n            c/=10;\\n            k/=10;\\n        }\\n        return out;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> out=new LinkedList<>();\\n        int c=0;\\n\\n        for(int i=num.length-1;i>=0;i--){\\n            c+=num[i]+(k%10);\\n            k/=10;\\n            out.addFirst(c%10);\\n            c/=10;\\n        }\\n        while(k>0 || c!=0){\\n            c+=(k%10);\\n            out.addFirst(c%10);\\n            c/=10;\\n            k/=10;\\n        }\\n        return out;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3195752,
                "title": "another-accepted-java-solution",
                "content": "```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] nums, int k) {\\n        List<Integer> res=new ArrayList<>();\\n        if(nums==null || nums.length==0)\\n        {\\n            return res;\\n        }\\n        String s=\"\";\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            s=s+Integer.toString(nums[i]);\\n        }\\n        BigInteger b1=new BigInteger(s);\\n        BigInteger b2=new BigInteger(k+\"\");\\n        BigInteger sum=b1.add(b2);\\n        String r1=sum.toString();\\n        for(int i=0;i<r1.length();i++)\\n        {\\n            res.add(r1.charAt(i)-\\'0\\');\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.BigInteger;\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] nums, int k) {\\n        List<Integer> res=new ArrayList<>();\\n        if(nums==null || nums.length==0)\\n        {\\n            return res;\\n        }\\n        String s=\"\";\\n        for(int i=0;i<nums.length;i++)\\n        {\\n            s=s+Integer.toString(nums[i]);\\n        }\\n        BigInteger b1=new BigInteger(s);\\n        BigInteger b2=new BigInteger(k+\"\");\\n        BigInteger sum=b1.add(b2);\\n        String r1=sum.toString();\\n        for(int i=0;i<r1.length();i++)\\n        {\\n            res.add(r1.charAt(i)-\\'0\\');\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3190870,
                "title": "crazy-adhd-solution-absolute-insanity-java",
                "content": "# Intuition\\nI have no clue why this has so many insane edge cases. I lost my sleep.\\n\\n# Approach\\nLose your sleep over petty edge cases and a question marked as \"Easy\"\\n\\n# Complexity\\n- Time complexity: Not enough time to sleep\\n\\n- Space complexity: Atleast I have space to breathe now so who cares.\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        // This will carry all your life problems.\\n        int carry=0;\\n        List<Integer> ans = new ArrayList<>();\\n        // When you are absolute mad and have no idea when will it terminate\\n        for (int i=num.length-1;k>0||i>=0||carry>0;i--) {\\n            int rem = k%10;\\n            k=k/10;\\n            if (i<0 && (carry+rem!=0 || k!=0)) {\\n                // Right shift.\\n                ans.add(0,(rem + carry) % 10);\\n                // Carry your burden yourself.\\n                carry = (rem + carry) / 10;\\n            } else if (i<0 && carry+rem==0) {\\n                // Nothing to do. Life wasted.\\n            } else {\\n                if ( (num[i] + rem + carry) / 10 == 0) {\\n                    ans.add(0,num[i] + rem + carry);\\n                    carry = 0;\\n                    // This is not really required.\\n                    continue;\\n                } else {\\n                    ans.add(0,(num[i] + rem + carry) % 10);\\n                    carry = (num[i] + rem + carry) / 10;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        // This will carry all your life problems.\\n        int carry=0;\\n        List<Integer> ans = new ArrayList<>();\\n        // When you are absolute mad and have no idea when will it terminate\\n        for (int i=num.length-1;k>0||i>=0||carry>0;i--) {\\n            int rem = k%10;\\n            k=k/10;\\n            if (i<0 && (carry+rem!=0 || k!=0)) {\\n                // Right shift.\\n                ans.add(0,(rem + carry) % 10);\\n                // Carry your burden yourself.\\n                carry = (rem + carry) / 10;\\n            } else if (i<0 && carry+rem==0) {\\n                // Nothing to do. Life wasted.\\n            } else {\\n                if ( (num[i] + rem + carry) / 10 == 0) {\\n                    ans.add(0,num[i] + rem + carry);\\n                    carry = 0;\\n                    // This is not really required.\\n                    continue;\\n                } else {\\n                    ans.add(0,(num[i] + rem + carry) % 10);\\n                    carry = (num[i] + rem + carry) / 10;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3190607,
                "title": "java-easy-solution",
                "content": "\\n\\n# Approach\\nK taking as carry and adding from last element.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(N)\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> a=new LinkedList<>();\\n\\n        for(int i=num.length-1;i>=0;i--){\\n            a.add(0,(num[i]+k)%10);\\n            k=(num[i]+k)/10;\\n        }\\n        while(k>0){\\n            a.add(0,k%10);\\n            k/=10;\\n        }\\n        return a;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> a=new LinkedList<>();\\n\\n        for(int i=num.length-1;i>=0;i--){\\n            a.add(0,(num[i]+k)%10);\\n            k=(num[i]+k)/10;\\n        }\\n        while(k>0){\\n            a.add(0,k%10);\\n            k/=10;\\n        }\\n        return a;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3190425,
                "title": "java-very-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer>ans=new ArrayList<>();\\n        int len=num.length-1;\\n        while(len>=0||k>0){\\n            if(len >= 0){\\n                k += num[len];\\n                len--;\\n            }\\n            ans.add(0,k % 10);\\n            k = k/10;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer>ans=new ArrayList<>();\\n        int len=num.length-1;\\n        while(len>=0||k>0){\\n            if(len >= 0){\\n                k += num[len];\\n                len--;\\n            }\\n            ans.add(0,k % 10);\\n            k = k/10;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189763,
                "title": "easy-1-liner-in-c-with-linq",
                "content": "Here is an easy to understand 1 liner\\n\\n# Approach\\n1. Convert the num array to a string\\n2. Parse as a number\\n3. Add k\\n4. Convert value to string\\n5. Convert each element to an int\\n6. Build list to return\\n\\n# Code\\n```\\nusing System.Numerics;\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] num, int k) {\\n        return (BigInteger.Parse(string.Join(\"\", num.Select(x => x))) + k).ToString().Select(x => int.Parse(x.ToString())).ToList();\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\nusing System.Numerics;\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] num, int k) {\\n        return (BigInteger.Parse(string.Join(\"\", num.Select(x => x))) + k).ToString().Select(x => int.Parse(x.ToString())).ToList();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189365,
                "title": "python-very-intuitive",
                "content": "This question basically tests whether we are good at converting data types. I followed this method and it\\'s very intuitive for me. Feel free to share your idea as well if you\\'re reading this.\\n1. I have taken an empty string s.\\n2. For every character in num, I built the string s. After that I calculated the sum by converting the computed string into integer and adding the given k value to it.\\n3. Once again I converted into string, and for every character in string I appended to a list and returned it.\\nSimple! Happy Coding!\\n\\n# Code\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        s=\\'\\'\\n        for i in num:\\n            s+=str(i)\\n        res1=str(int(s)+k)\\n        num2=[]\\n        for i in res1:\\n            num2.append(int(i))\\n        return num2\\n        \\n            \\n```",
                "solutionTags": [
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        s=\\'\\'\\n        for i in num:\\n            s+=str(i)\\n        res1=str(int(s)+k)\\n        num2=[]\\n        for i in res1:\\n            num2.append(int(i))\\n        return num2\\n        \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189262,
                "title": "simplest-solution-full-explanation-arraylist-solution-java",
                "content": "# Intuition\\nWe will be using ArrayList and using the number ```k``` as the carry we\\'ll add the following.\\nWe will begin from ```nums.length-1``` that is its last element and add ```k``` to each and store remainder in the ArrayList.\\nWe\\'ll keep updating and removing the last digit of ```k```.\\nAfter travelsing array if ```k>0``` then we add remaining digits of ```k```.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n```\\nExample: `num` = [2,1,5], `k` = 806\\nAt index 2 num = [2, 1, 811] \\nSo, `k` = 81 and `num` = [2, 1, 1]\\n\\nAt index 1 num = [2, 82, 1]\\nSo, `k` = 8 and `num` = [2, 2, 1]\\n\\nAt index 0 num = [10, 2, 1]\\nSo, `k` = 1 and `num` = [0, 2, 1]\\n\\nNow `k` > 0\\nSo, we add at the beginning of num\\n`num` = [1, 0, 2, 1]\\n```\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        //new ArrayList  to store and return \\n        List<Integer> list = new ArrayList<>();\\n\\n        for(int i=num.length-1; i>=0; i--){\\n            list.add(0, (num[i]+k)%10); //add remainder of its sum\\n            k = (num[i]+k)/10; //updating k, removing last digit\\n        }\\n\\n        //add remaining digits of k is any\\n        while(k>0){\\n            list.add(0, k%10);\\n            k = k/10;\\n        }\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```k```\n```nums.length-1```\n```k```\n```k```\n```k>0```\n```k```\n```\\nExample: `num` = [2,1,5], `k` = 806\\nAt index 2 num = [2, 1, 811] \\nSo, `k` = 81 and `num` = [2, 1, 1]\\n\\nAt index 1 num = [2, 82, 1]\\nSo, `k` = 8 and `num` = [2, 2, 1]\\n\\nAt index 0 num = [10, 2, 1]\\nSo, `k` = 1 and `num` = [0, 2, 1]\\n\\nNow `k` > 0\\nSo, we add at the beginning of num\\n`num` = [1, 0, 2, 1]\\n```\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        //new ArrayList  to store and return \\n        List<Integer> list = new ArrayList<>();\\n\\n        for(int i=num.length-1; i>=0; i--){\\n            list.add(0, (num[i]+k)%10); //add remainder of its sum\\n            k = (num[i]+k)/10; //updating k, removing last digit\\n        }\\n\\n        //add remaining digits of k is any\\n        while(k>0){\\n            list.add(0, k%10);\\n            k = k/10;\\n        }\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188977,
                "title": "simple-java-solution-3ms-97-faster",
                "content": "# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new LinkedList<>();\\n\\n        for (int i = num.length - 1; i >= 0; --i) {\\n           ans.add(0, (num[i] + k) % 10);\\n           k = (num[i] + k) / 10;\\n        }\\n\\n        while (k > 0) {\\n           ans.add(0, k % 10);\\n           k /= 10;\\n        }\\n        return ans;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Linked List",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new LinkedList<>();\\n\\n        for (int i = num.length - 1; i >= 0; --i) {\\n           ans.add(0, (num[i] + k) % 10);\\n           k = (num[i] + k) / 10;\\n        }\\n\\n        while (k > 0) {\\n           ans.add(0, k % 10);\\n           k /= 10;\\n        }\\n        return ans;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188795,
                "title": "c-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int n = num.size(), cur = k;\\n        vector<int> ans;\\n        int i = n;\\n        while(--i >= 0 or cur > 0) {\\n            if(i >= 0) cur += num[i];\\n            ans.push_back(cur % 10);\\n            cur /= 10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int n = num.size(), cur = k;\\n        vector<int> ans;\\n        int i = n;\\n        while(--i >= 0 or cur > 0) {\\n            if(i >= 0) cur += num[i];\\n            ans.push_back(cur % 10);\\n            cur /= 10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188717,
                "title": "easily-understandable-solution-beats-99-30",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> ans;\\n       int sum=0;\\n       for(int i=num.size()-1; i>=0;i--){\\n           sum=num[i]+k%10;\\n           ans.push_back(sum%10);\\n           k=k/10; sum=sum/10;\\n           k=k+sum;\\n           if(i==0 && k!=0){\\n               while(k!=0){\\n                   ans.push_back(k%10);\\n                   k=k/10;\\n               }\\n           }\\n       }\\n       reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```\\nPlease upvote to motivate me to write more solutions\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> ans;\\n       int sum=0;\\n       for(int i=num.size()-1; i>=0;i--){\\n           sum=num[i]+k%10;\\n           ans.push_back(sum%10);\\n           k=k/10; sum=sum/10;\\n           k=k+sum;\\n           if(i==0 && k!=0){\\n               while(k!=0){\\n                   ans.push_back(k%10);\\n                   k=k/10;\\n               }\\n           }\\n       }\\n       reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188575,
                "title": "very-straightforward-c-solution",
                "content": "# Approach\\nStarting from the end of `num`, sum the `num` digit and the last digit of `k` one by one in a loop while keeping track of a carry on each step. Remove the last digit of `k` on the each step. If one of the numbers ends, use a zero instead of a digit. In the end, reverse the result list to get the final number. That\\'s it!\\n\\n# Complexity\\nLet\\'s assume that `n` is the length of the `num` array, and `m` is the count of digits in the number `k`. Then:\\n\\n- Time complexity: $$O(Max(n,m))$$\\n\\n- Space complexity: $$O(Max(n,m))$$\\n\\n# Code\\n```\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] num, int k) {\\n        var result = new List<int>();\\n        for (int i = num.Length - 1, carry = 0; i >= 0 || k > 0 || carry > 0; i--, k /= 10)\\n        {\\n            var numDigit = i >= 0 ? num[i] : 0;\\n            var kDigit = k % 10;\\n            var sum = numDigit + kDigit + carry;\\n            result.Add(sum % 10);\\n            carry = sum / 10;\\n        }\\n        result.Reverse();\\n        return result;\\n    }\\n}\\n```\\nPlease, upvote if the solution was useful for you!",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] num, int k) {\\n        var result = new List<int>();\\n        for (int i = num.Length - 1, carry = 0; i >= 0 || k > 0 || carry > 0; i--, k /= 10)\\n        {\\n            var numDigit = i >= 0 ? num[i] : 0;\\n            var kDigit = k % 10;\\n            var sum = numDigit + kDigit + carry;\\n            result.Add(sum % 10);\\n            carry = sum / 10;\\n        }\\n        result.Reverse();\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188348,
                "title": "c-beats-100-simple-approach",
                "content": "# Intuition : Think of taking carry.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach : Take the k into vector by dividing it by 10 and taking modulus 10.Reverse the num vector or start from back, iterate through a loop till min of length of two vector.Check for both the vectors and then check for carry.Take sum= num[j]+carry similarly for other sum=v[j]+carry and push_back(sum%10) and if sum>9 update carry=1 otherwise carry=0.At last if carry is 1 then push it in vector.Reverse the required vector and then return.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(max(num.size(),log10(k)))\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(max(num.size(),log10(k)))\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v,v1;\\n        while(k>0){\\n            v.push_back(k%10);\\n            k/=10;\\n        }\\n        reverse(num.begin(),num.end());\\n        int carry=0;\\n        int i=0;\\n        for( i=0;i<min(v.size(),num.size());i++ ){\\n          int sum=v[i]+num[i]+carry;\\n            if(sum>9){\\n                carry=1;\\n                v1.push_back(sum%10);\\n            }else{\\n                carry=0;\\n                v1.push_back(sum);\\n            }\\n        }\\n        for(int j=i;j<v.size();j++){\\n            int sum=v[j]+carry;\\n            if(sum>9){\\n                carry=1;\\n                v1.push_back(sum%10);\\n            }else{\\n                carry=0;\\n                v1.push_back(sum);\\n            }\\n        }\\n        for(int j=i;j<num.size();j++){\\n            int sum=num[j]+carry;\\n            if(sum>9){\\n                carry=1;\\n                v1.push_back(sum%10);\\n            }else{\\n                carry=0;\\n                v1.push_back(sum);\\n            }\\n        }\\n        if(carry==1){\\n            v1.push_back(1);\\n        }\\n        reverse(v1.begin(),v1.end());\\n        return v1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v,v1;\\n        while(k>0){\\n            v.push_back(k%10);\\n            k/=10;\\n        }\\n        reverse(num.begin(),num.end());\\n        int carry=0;\\n        int i=0;\\n        for( i=0;i<min(v.size(),num.size());i++ ){\\n          int sum=v[i]+num[i]+carry;\\n            if(sum>9){\\n                carry=1;\\n                v1.push_back(sum%10);\\n            }else{\\n                carry=0;\\n                v1.push_back(sum);\\n            }\\n        }\\n        for(int j=i;j<v.size();j++){\\n            int sum=v[j]+carry;\\n            if(sum>9){\\n                carry=1;\\n                v1.push_back(sum%10);\\n            }else{\\n                carry=0;\\n                v1.push_back(sum);\\n            }\\n        }\\n        for(int j=i;j<num.size();j++){\\n            int sum=num[j]+carry;\\n            if(sum>9){\\n                carry=1;\\n                v1.push_back(sum%10);\\n            }else{\\n                carry=0;\\n                v1.push_back(sum);\\n            }\\n        }\\n        if(carry==1){\\n            v1.push_back(1);\\n        }\\n        reverse(v1.begin(),v1.end());\\n        return v1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188331,
                "title": "c-easy-to-understand",
                "content": "# Code\\n```\\nclass Solution \\n{\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) \\n    {\\n        int carry=0, sum, i=num.size()-1;\\n        while(k || carry)\\n        {\\n            sum = carry + k%10;\\n            k /= 10;\\n\\n            if(i>=0)\\n            {\\n                sum += num[i];\\n                num[i] = sum%10;\\n                i--;\\n            }\\n            else\\n            {\\n                num.insert(num.begin(), sum%10);\\n            }\\n            carry = sum/10;\\n        }\\n        return num;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) \\n    {\\n        int carry=0, sum, i=num.size()-1;\\n        while(k || carry)\\n        {\\n            sum = carry + k%10;\\n            k /= 10;\\n\\n            if(i>=0)\\n            {\\n                sum += num[i];\\n                num[i] = sum%10;\\n                i--;\\n            }\\n            else\\n            {\\n                num.insert(num.begin(), sum%10);\\n            }\\n            carry = sum/10;\\n        }\\n        return num;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188292,
                "title": "super-easy-java-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> ans = new LinkedList<>();\\n        int len = num.length-1;\\n        while(len >= 0 || k != 0){\\n            if(len >= 0){\\n                k += num[len];\\n                len--;\\n            }\\n            ans.addFirst(k % 10);\\n            k = k/10;\\n        }     \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> ans = new LinkedList<>();\\n        int len = num.length-1;\\n        while(len >= 0 || k != 0){\\n            if(len >= 0){\\n                k += num[len];\\n                len--;\\n            }\\n            ans.addFirst(k % 10);\\n            k = k/10;\\n        }     \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188201,
                "title": "c-simplest-solution-faster-than-98-array-index-wise-addition",
                "content": "# Approach\\nWe are taking carry. We start from the last digit in array num add carry and the modulus of the input k%10.\\nThen update array and move untill the highest digit.\\nAfter traversing array if carry is > 0 then we add it to begining of num vector using a loop\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n\\n- Time complexity: $$O(n)$$\\n\\nIn this problem k is at most 5 digits \\nSo, Insertion time complexity doesn\\'t matter\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int a) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);        \\n        int carry=0;\\n        for(int i=num.size()-1;i>=0;i--) {\\n            num[i]=(num[i]+(a%10)) +carry;\\n            carry = num[i]/10;            \\n            num[i]=num[i]%10;\\n            a=a/10;\\n        }        \\n        if(carry!=0 || a!=0) {\\n            carry=carry+a;\\n            while(carry !=0) {\\n                num.insert(num.begin(),carry%10);\\n                carry/=10;    \\n            }       \\n        }            \\n        return num;\\n    }\\n};\\n```\\n# Upvote for Leetcode Chad \\n\\n\\n\\u28FF\\u28FF\\u28FF\\u28FF\\u280F\\u280C\\u28FE\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u28FF\\u28FF\\u28FF\\u2800\\u2800\\u2838\\u283F\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u28FF\\u28FF\\u2803\\u2800\\u28E0\\u28FE\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u287F\\u2803\\u2800\\u28B0\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u2803\\u2800\\u2800\\u28FE\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28E6\\u2800\\u2808\\u283B\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u2800\\u2800\\u2800\\u28FF\\u28FF\\u28FF\\u281F\\u2809\\u2809\\u2809\\u28E6\\u28E4\\u2800\\u2808\\u28BF\\u28FF\\u28FF\\n\\u28FF\\u2800\\u2800\\u2800\\u28B8\\u28FF\\u285F\\u2800\\u2800\\u2800\\u2800\\u28B8\\u28FF\\u28E7\\u2800\\u2800\\u2819\\u28FF\\u28FF\\n\\u28FF\\u2846\\u2800\\u2800\\u2808\\u283B\\u2845\\u2800\\u2800\\u2800\\u2800\\u28F8\\u28FF\\u283F\\u2807\\u2800\\u2800\\u28B8\\u28FF\\n\\u28FF\\u28FF\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2814\\u281B\\u2801\\u2800\\u2800\\u2800\\u28E0\\u28FF\\u28FF\\n\\u28FF\\u28FF\\u2800\\u2800\\u2800\\u2800We\\u2800\\u2800\\u2800\\u2800\\u2800  \\u28F4\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u28FF\\u2803\\u2800\\u2800\\u2800Do\\u2800\\u2800\\u2800 \\u28E0\\u28FE\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u28FF\\u2847\\u2800\\u2800Leet\\u2800 \\u28FE\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u28FF\\u2847\\u2800\\u2800Code\\u2800\\u28B0\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u28FF\\u28FF\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28B8\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u28FF\\u28FF\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2818\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u28FF\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28B9\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u28FF\\u281F\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28A0\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n\\u285F\\u2801\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u2800\\u28B8\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\u28FF\\n",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int a) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(NULL);        \\n        int carry=0;\\n        for(int i=num.size()-1;i>=0;i--) {\\n            num[i]=(num[i]+(a%10)) +carry;\\n            carry = num[i]/10;            \\n            num[i]=num[i]%10;\\n            a=a/10;\\n        }        \\n        if(carry!=0 || a!=0) {\\n            carry=carry+a;\\n            while(carry !=0) {\\n                num.insert(num.begin(),carry%10);\\n                carry/=10;    \\n            }       \\n        }            \\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188172,
                "title": "python-simple-solution-for-noobs-for-people-new-to-coding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->Using brute force to look.\\nfirst for loop is used to convert the list to number.\\nthen we store the acquired number in **s**\\nAdd the k in s then loop the s and enter the digits in empty list named **lst** \\nBut this new list will have result in reverse order so we will return it by reversing it as **lst[::-1]**\\n\\nNote: for better understanding take a list containing not more than 2 elements and run through the code.Also you can use jupyter or use print statement after steps how the code is progressing.\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def addToArrayForm(self, num, k):\\n        \"\"\"\\n        :type num: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        \"\"\"\\n        s=0\\n        for i in num:\\n            s=s*10+i\\n        s=s+k\\n        lst=[]\\n        while(s!=0):\\n            lst.append(s%10)\\n            s=s//10\\n        return lst[::-1]\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def addToArrayForm(self, num, k):\\n        \"\"\"\\n        :type num: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        \"\"\"\\n        s=0\\n        for i in num:\\n            s=s*10+i\\n        s=s+k\\n        lst=[]\\n        while(s!=0):\\n            lst.append(s%10)\\n            s=s//10\\n        return lst[::-1]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3188040,
                "title": "100-faster-step-by-step-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        // Create a new list to store the answer\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        \\n        // Initialize the index to the end of the array\\n        int len = num.length - 1;\\n        \\n        // Initialize the carry to 0\\n        int c = 0;\\n\\n        // Loop through both arrays and the carry value\\n        while(len >= 0 || k > 0 || c > 0){\\n            // Initialize the sum to the current carry\\n            int sum = c;\\n\\n            // Add the current digit from the first array to the sum\\n            if(len >= 0){\\n                sum += num[len];\\n                len--;\\n            }\\n            \\n            // Add the current digit from the second number to the sum\\n            if(k > 0){\\n                sum += k % 10;\\n                k = k / 10;\\n            }\\n\\n            // If the sum is greater than 9, set the carry to 1 and take the remainder\\n            if(sum > 9){\\n                c = sum / 10;\\n                sum = sum % 10;\\n            } else {\\n                // Otherwise, set the carry to 0\\n                c = 0;\\n            }\\n            \\n            // Add the sum to the answer list\\n            ans.add(sum);\\n        }\\n\\n        // Reverse the answer list to get the correct order of digits\\n        Collections.reverse(ans);\\n        return ans;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        // Create a new list to store the answer\\n        ArrayList<Integer> ans = new ArrayList<>();\\n        \\n        // Initialize the index to the end of the array\\n        int len = num.length - 1;\\n        \\n        // Initialize the carry to 0\\n        int c = 0;\\n\\n        // Loop through both arrays and the carry value\\n        while(len >= 0 || k > 0 || c > 0){\\n            // Initialize the sum to the current carry\\n            int sum = c;\\n\\n            // Add the current digit from the first array to the sum\\n            if(len >= 0){\\n                sum += num[len];\\n                len--;\\n            }\\n            \\n            // Add the current digit from the second number to the sum\\n            if(k > 0){\\n                sum += k % 10;\\n                k = k / 10;\\n            }\\n\\n            // If the sum is greater than 9, set the carry to 1 and take the remainder\\n            if(sum > 9){\\n                c = sum / 10;\\n                sum = sum % 10;\\n            } else {\\n                // Otherwise, set the carry to 0\\n                c = 0;\\n            }\\n            \\n            // Add the sum to the answer list\\n            ans.add(sum);\\n        }\\n\\n        // Reverse the answer list to get the correct order of digits\\n        Collections.reverse(ans);\\n        return ans;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187843,
                "title": "one-line-js",
                "content": "```\\n\\nconst addToArrayForm = (nums, k) => (BigInt(nums.join(\\'\\')) + BigInt(k)).toString().split(\\'\\')\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nconst addToArrayForm = (nums, k) => (BigInt(nums.join(\\'\\')) + BigInt(k)).toString().split(\\'\\')\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3187754,
                "title": "rust-only-iterators-no-loops-from-fn-and-scan",
                "content": "Easy enough - with some help from an existing solution.\\n# Code\\n```\\nuse std::iter::repeat;\\nimpl Solution {\\n    pub fn add_to_array_form(num: Vec<i32>, k: i32) -> Vec<i32> {\\n        let mut k = k;\\n        let digit10 = std::iter::from_fn(move || match k.cmp(&0) {\\n            std::cmp::Ordering::Greater => {\\n                let d = k % 10;\\n                k /= 10;\\n                Some(d)\\n            }\\n            _ => None,\\n        });\\n        let mut ret : Vec<i32> = num.into_iter().rev().chain(repeat(-1)).zip(digit10.chain(repeat(-1))).scan(0, |carry, (a, b)|{\\n            match (a, b, *carry) {\\n                (-1, -1, 0) => None,\\n                _ => {\\n                    *carry += a.max(0) + b.max(0);\\n                    let res = Some(*carry % 10);\\n                    *carry /= 10;\\n                    res\\n                }\\n            }\\n        }).collect();\\n        ret.reverse();\\n        ret\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::iter::repeat;\\nimpl Solution {\\n    pub fn add_to_array_form(num: Vec<i32>, k: i32) -> Vec<i32> {\\n        let mut k = k;\\n        let digit10 = std::iter::from_fn(move || match k.cmp(&0) {\\n            std::cmp::Ordering::Greater => {\\n                let d = k % 10;\\n                k /= 10;\\n                Some(d)\\n            }\\n            _ => None,\\n        });\\n        let mut ret : Vec<i32> = num.into_iter().rev().chain(repeat(-1)).zip(digit10.chain(repeat(-1))).scan(0, |carry, (a, b)|{\\n            match (a, b, *carry) {\\n                (-1, -1, 0) => None,\\n                _ => {\\n                    *carry += a.max(0) + b.max(0);\\n                    let res = Some(*carry % 10);\\n                    *carry /= 10;\\n                    res\\n                }\\n            }\\n        }).collect();\\n        ret.reverse();\\n        ret\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3187704,
                "title": "worst-solution-for-java-aasheesh-63th-day",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n![UP vote ki bhik.jpeg](https://assets.leetcode.com/users/images/0bcaf72d-9066-4616-99f6-72ef6d1d587e_1676439222.586076.jpeg)\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        int carry = 0;\\n        int sum = 0;\\n       int temp = k;\\n       int rem = 0;\\n       int store = 0;\\n        for(int i = num.length - 1;i >= 0 ; i--){\\n            rem = temp %10;\\n            sum = num[i] + carry + rem;\\n            temp= temp / 10;\\n            if(sum > 9){\\n                store = sum %10;\\n                list.add(0,store);\\n                carry = 1;\\n            }\\n            else{\\n                list.add(0, sum);\\n                carry = 0;\\n            }\\n        }\\n        while(temp != 0){\\n            rem = temp %10;\\n            sum = carry + rem;\\n            temp= temp / 10;\\n            if(sum > 9){\\n                store = sum %10;\\n                list.add(0,store);\\n                carry = 1;\\n            }\\n            else{\\n                list.add(0, sum);\\n                carry = 0;\\n            }\\n        }\\n        if(carry == 1){\\n            list.add(0 , 1);\\n        }\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        int carry = 0;\\n        int sum = 0;\\n       int temp = k;\\n       int rem = 0;\\n       int store = 0;\\n        for(int i = num.length - 1;i >= 0 ; i--){\\n            rem = temp %10;\\n            sum = num[i] + carry + rem;\\n            temp= temp / 10;\\n            if(sum > 9){\\n                store = sum %10;\\n                list.add(0,store);\\n                carry = 1;\\n            }\\n            else{\\n                list.add(0, sum);\\n                carry = 0;\\n            }\\n        }\\n        while(temp != 0){\\n            rem = temp %10;\\n            sum = carry + rem;\\n            temp= temp / 10;\\n            if(sum > 9){\\n                store = sum %10;\\n                list.add(0,store);\\n                carry = 1;\\n            }\\n            else{\\n                list.add(0, sum);\\n                carry = 0;\\n            }\\n        }\\n        if(carry == 1){\\n            list.add(0 , 1);\\n        }\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187669,
                "title": "easy-approach-used-in-multiple-problems",
                "content": "# Intuition\\nSimilar problems are:\\n-> Add Two Numbers\\n-> Plus One\\n-> Add Binary\\n-> Add Strings\\n\\n# Approach\\nfirst convert given k into vector.\\nNow place two pointer.\\nOne at the last of first vector.\\nSecond pointer at the last of second vector.\\nThere is also a variable carry which is used for carry as well as sum of two number at i and j index.\\n\\n\\n# Complexity\\n- Time complexity:\\n$$O(max(len(num1),len(num2)))$$\\n\\n- Space complexity:\\n$$O(max(len(num1),len(num2)))$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num1, int k) {\\n        vector<int>num2;\\n//      Converting k into vector\\n        while(k){ \\n            num2.push_back(k%10);\\n            k=k/10;\\n        }\\n        reverse(num2.begin(),num2.end());\\n//      Reverse the vector\\n        vector<int>vect;\\n//      First pointer at the end of num1\\n        int i=num1.size()-1;\\n//      Second pointer at the end of num2\\n        int j=num2.size()-1;\\n        int carry=0;\\n        while(i>=0 || j>=0 || carry){\\n//          condition is running untill array has element.\\n            if(i>=0){\\n                carry+=num1[i];\\n                i--;\\n            }\\n//          condition is running untill array has element.\\n            if(j>=0){\\n                carry+=num2[j];\\n                j--;\\n            }\\n            vect.push_back(carry%10);\\n            carry=carry/10;\\n        }\\n//         reverse the \\n        reverse(vect.begin(),vect.end());\\n        return vect;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num1, int k) {\\n        vector<int>num2;\\n//      Converting k into vector\\n        while(k){ \\n            num2.push_back(k%10);\\n            k=k/10;\\n        }\\n        reverse(num2.begin(),num2.end());\\n//      Reverse the vector\\n        vector<int>vect;\\n//      First pointer at the end of num1\\n        int i=num1.size()-1;\\n//      Second pointer at the end of num2\\n        int j=num2.size()-1;\\n        int carry=0;\\n        while(i>=0 || j>=0 || carry){\\n//          condition is running untill array has element.\\n            if(i>=0){\\n                carry+=num1[i];\\n                i--;\\n            }\\n//          condition is running untill array has element.\\n            if(j>=0){\\n                carry+=num2[j];\\n                j--;\\n            }\\n            vect.push_back(carry%10);\\n            carry=carry/10;\\n        }\\n//         reverse the \\n        reverse(vect.begin(),vect.end());\\n        return vect;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187604,
                "title": "python-short-and-clean",
                "content": "# Approach\\n1. Convert `k` to reversed iterable of digits using `rdigits`.\\n\\n2. Add backwards, digit by digit with carry, of `num` and `rdigits(k)`\\n\\n3. Push the results into a queue to un-reverse the sum, and return.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(n)$$\\n\\nwhere, `n is the max length of num and k`\\n\\n# Code\\n```python\\nclass Solution:\\n    def addToArrayForm(self, num: list[int], k: int) -> list[int]:\\n        def rdigits(n: int) -> Iterable[int]:\\n            while n: n, r = divmod(n, 10); yield r\\n        \\n        def sum_iter(xs: Iterable[int], ys: Iterable[int]) -> Iterable[int]:\\n            c = 0\\n            for x, y in zip_longest(xs, ys, fillvalue=0):\\n                c, s = divmod(x + y + c, 10)\\n                yield s\\n            if c: yield c\\n        \\n        sum_ = deque()\\n        sum_.extendleft(sum_iter(reversed(num), rdigits(k)))\\n        return sum_\\n\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```python\\nclass Solution:\\n    def addToArrayForm(self, num: list[int], k: int) -> list[int]:\\n        def rdigits(n: int) -> Iterable[int]:\\n            while n: n, r = divmod(n, 10); yield r\\n        \\n        def sum_iter(xs: Iterable[int], ys: Iterable[int]) -> Iterable[int]:\\n            c = 0\\n            for x, y in zip_longest(xs, ys, fillvalue=0):\\n                c, s = divmod(x + y + c, 10)\\n                yield s\\n            if c: yield c\\n        \\n        sum_ = deque()\\n        sum_.extendleft(sum_iter(reversed(num), rdigits(k)))\\n        return sum_\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187550,
                "title": "understandable-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int carry=0;\\n        int n=num.size();\\n        for(int i=n-1;i>=0 ;i--)\\n        {\\n            int temp=carry+(k%10)+num[i]; // performing addition \\n            carry=temp/10; // calculating carry\\n            num[i]=temp%10;\\n            k=k/10;\\n        }\\n        while(k) //if k is greater than num\\'s size \\n        {\\n            int temp=(k%10)+carry;\\n            num.insert(num.begin(),temp%10);\\n            carry=temp/10;\\n            k/=10;\\n        }\\n        if(carry >0) num.insert(num.begin(),carry); // if at last carry is left we need to insert it\\n        // at the beginnnig  \\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int carry=0;\\n        int n=num.size();\\n        for(int i=n-1;i>=0 ;i--)\\n        {\\n            int temp=carry+(k%10)+num[i]; // performing addition \\n            carry=temp/10; // calculating carry\\n            num[i]=temp%10;\\n            k=k/10;\\n        }\\n        while(k) //if k is greater than num\\'s size \\n        {\\n            int temp=(k%10)+carry;\\n            num.insert(num.begin(),temp%10);\\n            carry=temp/10;\\n            k/=10;\\n        }\\n        if(carry >0) num.insert(num.begin(),carry); // if at last carry is left we need to insert it\\n        // at the beginnnig  \\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187229,
                "title": "simple-and-beginner-friendly-solution-cpp-must-watch-with-explanation",
                "content": "# Intuition\\n- It\\'s same problem as the following leetcode problems \\n    1. Add Two Numbers\\n    2. Add Binary(yesterday POTD)\\n\\n# Approach\\n- The approach is always same we have to make sure the usage of carry while adding the numbers and little bit of maths.\\n- So we always gonna take sum variable to calculate the sum of *nth* digit place and we will use % operator for the last digit of sum and / operator for calculating the modulus.\\n- Note that modulus if taken for the next carry each time if the mod becomes zero then there is no carry for the next digit sum.\\n- And regarding the last if statement suppose we have a digit lets say [Our given array is [9,9,9] and k = 1]. In this example the carry does always exists and its even exceeding the original space by 1. So to avoid this edge case we use the if statement outside the loop to accumulate all the digits in our given array.\\n- Reverse the answer array and return it. \\n\\n# Complexity\\n- Time complexity:\\n- O(n)\\n- Space complexity:\\n- O(n+k)\\n*Exaplanation* : \\nO(k) for the digit to store in the vector form\\nO(n)/O(n+1)[which is the edge case in our question].\\nSO O(n)/O(n+1) ~ O(n)\\n\\n\\nIf u liked the solution the upvote would be appreciated :)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> gg,ans;\\n        while(k){\\n            gg.push_back(k%10);\\n            k/=10;\\n        }\\n        reverse(gg.begin(),gg.end());\\n        int len1 = num.size()-1;\\n        int len2 = gg.size()-1;\\n        int carry = 0,sum = 0;\\n        while(len1>=0  || len2>=0 || carry){\\n            if(len1>=0){sum+=num[len1];len1--;}\\n            if(len2>=0) {sum+=gg[len2];len2--;}\\n            sum+=carry;\\n            carry = sum/10;\\n            ans.push_back(sum%10);\\n            sum = 0;\\n        }\\n        if(carry) ans.push_back(carry);\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> gg,ans;\\n        while(k){\\n            gg.push_back(k%10);\\n            k/=10;\\n        }\\n        reverse(gg.begin(),gg.end());\\n        int len1 = num.size()-1;\\n        int len2 = gg.size()-1;\\n        int carry = 0,sum = 0;\\n        while(len1>=0  || len2>=0 || carry){\\n            if(len1>=0){sum+=num[len1];len1--;}\\n            if(len2>=0) {sum+=gg[len2];len2--;}\\n            sum+=carry;\\n            carry = sum/10;\\n            ans.push_back(sum%10);\\n            sum = 0;\\n        }\\n        if(carry) ans.push_back(carry);\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3186987,
                "title": "well-detailed-explanation-python-2-approaches-easy-explanation",
                "content": "# Logic\\n    Logic of Approach 1 --\\n        1. Just convert array form to number\\n        2. Add number + k and store in result\\n        3. Convert result into Array Form \\n        4. Return resultant Array Form\\n\\n    Logic of Approach 2 -- \\n        Repeat this step until reach at 0 index of array\\n            1. Add k  and array last index value\\n            2. Do the mod with 10 and division with 10\\n            3. Store the mod value in that index \\n            4. Store the division value in K\\n            5. Decrement index by 1\\n        If k still not 0, then\\n            then add all k in array from in front of num array\\n        Finally return num array\\n\\n\\n    If you find hard to understand that you can also watch this video.\\n    I explained with code :)\\n\\n    Kindly Upvote if you findit helpful\\uD83D\\uDC4D.\\nhttps://youtu.be/548-VplMrrQ\\n\\n\\n# Code\\n\\n```python []\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        # Approach 1,   T.C =  O(max(N,K)) where K = length of str(k)\\n        \\n        data = 0\\n        for val in num:\\n            data = data*10+val\\n\\n        data+=k\\n        res = []\\n        while data!=0:\\n            res.append(data%10)\\n            data//=10\\n        return res[::-1]\\n        \\n\\n        # Approach 2,  T.C = O(max(N,K)) where K = length of str(k)\\n        \\n        n = len(num)\\n        for i in range(n-1,-1,-1):\\n            num[i],k = (num[i]+k)%10,(num[i]+k)//10\\n        if k!=0:\\n            return [int(val) for val in str(k)]+num\\n        return num\\n        \\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array"
                ],
                "code": "```python []\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        # Approach 1,   T.C =  O(max(N,K)) where K = length of str(k)\\n        \\n        data = 0\\n        for val in num:\\n            data = data*10+val\\n\\n        data+=k\\n        res = []\\n        while data!=0:\\n            res.append(data%10)\\n            data//=10\\n        return res[::-1]\\n        \\n\\n        # Approach 2,  T.C = O(max(N,K)) where K = length of str(k)\\n        \\n        n = len(num)\\n        for i in range(n-1,-1,-1):\\n            num[i],k = (num[i]+k)%10,(num[i]+k)//10\\n        if k!=0:\\n            return [int(val) for val in str(k)]+num\\n        return num\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3186923,
                "title": "elementary-maths-back-to-first-standard",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nElementary maths - 123 can be expressed as 1\\\\*100 + 2\\\\*10 + 3\\\\*1\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFrom the given array compute the decimal input \\n\\nAdd that to k\\n\\nConvert decimal to array\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n\\n        no, place = 0, 1\\n\\n        for i in range(len(num)-1, -1, -1):\\n            no += num[i] * place\\n            place = place * 10\\n        \\n        no += k\\n        return [int(i) for i in list(str(no))]\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n\\n        no, place = 0, 1\\n\\n        for i in range(len(num)-1, -1, -1):\\n            no += num[i] * place\\n            place = place * 10\\n        \\n        no += k\\n        return [int(i) for i in list(str(no))]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3184334,
                "title": "python-easiest-understandable-code",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->Firstly, converted the list of integer to a single integer(s) and then added the given value(k) to that single integer(s). Then returned the list of integer of s.\\n\\n# Code\\n```\\nclass Solution(object):\\n    def addToArrayForm(self, num, k):\\n        \"\"\"\\n        :type num: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        \"\"\"\\n        s=0\\n        for i in num:\\n            s=s*10+int(i)\\n        s+=k\\n        return [int(i) for i in str(s)]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def addToArrayForm(self, num, k):\\n        \"\"\"\\n        :type num: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        \"\"\"\\n        s=0\\n        for i in num:\\n            s=s*10+int(i)\\n        s+=k\\n        return [int(i) for i in str(s)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3058031,
                "title": "add-to-array-form-of-integer-c-easy-approach-fast-simple",
                "content": "**IF YOU LIKE, PLEASE UPVOTE. IT HELPS\\u2764\\uFE0F\\u2764\\uFE0F**\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) \\n    {\\n        int n = nums.size()-1;\\n        while(k > 0 and n >= 0)\\n        {\\n            nums[n] += k;\\n            k = nums[n]/10;\\n            nums[n] = nums[n]%10;\\n            n--;\\n        }\\n\\n        while(k > 0)\\n        {\\n            nums.insert(nums.begin(),k%10);\\n            k = k/10;\\n        }\\n\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) \\n    {\\n        int n = nums.size()-1;\\n        while(k > 0 and n >= 0)\\n        {\\n            nums[n] += k;\\n            k = nums[n]/10;\\n            nums[n] = nums[n]%10;\\n            n--;\\n        }\\n\\n        while(k > 0)\\n        {\\n            nums.insert(nums.begin(),k%10);\\n            k = k/10;\\n        }\\n\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2811962,
                "title": "java-easiest-solution-arraylist",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> res = new ArrayList<>();\\n        int last = num.length-1;\\n\\n        while(last>=0 || k!=0 ){\\n            if(last >= 0){\\n                k+=num[last];\\n                last--;\\n            }\\n            res.add(k%10);\\n            k = k/10;\\n        }\\n        Collections.reverse(res);\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> res = new ArrayList<>();\\n        int last = num.length-1;\\n\\n        while(last>=0 || k!=0 ){\\n            if(last >= 0){\\n                k+=num[last];\\n                last--;\\n            }\\n            res.add(k%10);\\n            k = k/10;\\n        }\\n        Collections.reverse(res);\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2809384,
                "title": "c-easy-short",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int> A, int K) {\\n        for (int i = A.size() - 1; i >= 0 && K > 0; --i) {\\n            A[i] += K;\\n            K = A[i] / 10;\\n            A[i] %= 10;\\n        }\\n        while (K > 0) {\\n            A.insert(A.begin(), K % 10);\\n            K /= 10;\\n        }\\n        return A;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int> A, int K) {\\n        for (int i = A.size() - 1; i >= 0 && K > 0; --i) {\\n            A[i] += K;\\n            K = A[i] / 10;\\n            A[i] %= 10;\\n        }\\n        while (K > 0) {\\n            A.insert(A.begin(), K % 10);\\n            K /= 10;\\n        }\\n        return A;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2754867,
                "title": "python3-solution-string-integer-conversion",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        s=\\'\\'\\n        new = []\\n        for i in num:\\n            s+=str(i)\\n        s = int(s) + k\\n        for i in str(s):\\n            new.append(int(i))\\n        return(new)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        s=\\'\\'\\n        new = []\\n        for i in num:\\n            s+=str(i)\\n        s = int(s) + k\\n        for i in str(s):\\n            new.append(int(i))\\n        return(new)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2701617,
                "title": "simple-python-solution-faster-than-100-users",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        num[-1]+=k\\n        i=len(num)-1\\n        while i>0 and num[i]>9:\\n            num[i-1]+=num[i]//10\\n            num[i]=num[i]%10\\n            i-=1\\n        while num[0]>9:\\n            num=[num[0]//10]+num\\n            num[1]=num[1]%10\\n        return  num\\n\\t\\t",
                "solutionTags": [
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        num[-1]+=k\\n        i=len(num)-1\\n        while i>0 and num[i]>9:\\n            num[i-1]+=num[i]//10\\n            num[i]=num[i]%10\\n            i-=1\\n        while num[0]>9:\\n            num=[num[0]//10]+num\\n            num[1]=num[1]%10\\n        return  num\\n\\t\\t",
                "codeTag": "Java"
            },
            {
                "id": 2562650,
                "title": "easy-python-solution-time-space-o-n",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        temp=0\\n        for x in num:\\n            temp = (temp*10)+x\\n        temp+=k\\n        ans=[]\\n        while temp>0:\\n            rem=temp%10\\n            ans.append(rem)\\n            temp=temp//10\\n\\t\\t#reverse the array without using reverse() method\\n        l=0\\n        r=len(ans)-1\\n        while l<r:\\n            ans[l],ans[r]=ans[r],ans[l]\\n            l+=1\\n            r-=1\\n        return ans\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        temp=0\\n        for x in num:\\n            temp = (temp*10)+x\\n        temp+=k\\n        ans=[]\\n        while temp>0:\\n            rem=temp%10\\n            ans.append(rem)\\n            temp=temp//10\\n\\t\\t#reverse the array without using reverse() method\\n        l=0\\n        r=len(ans)-1\\n        while l<r:\\n            ans[l],ans[r]=ans[r],ans[l]\\n            l+=1\\n            r-=1\\n        return ans\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2391335,
                "title": "java-solution-add-to-array-form-of-integer",
                "content": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> res = new ArrayList<>();\\n        \\n        int i = num.length;\\n        while(--i >= 0 || k > 0) {\\n            if(i >= 0)\\n                k += num[i];\\n            \\n            res.add(k % 10);\\n            k /= 10;\\n        }\\n        Collections.reverse(res);\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> res = new ArrayList<>();\\n        \\n        int i = num.length;\\n        while(--i >= 0 || k > 0) {\\n            if(i >= 0)\\n                k += num[i];\\n            \\n            res.add(k % 10);\\n            k /= 10;\\n        }\\n        Collections.reverse(res);\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2383271,
                "title": "c-easy-solution-short-code",
                "content": "```\\nvector<int> addToArrayForm(vector<int>& nums, int k) {\\n        int c = 0;\\n        int n = nums.size();\\n        int sum = k;\\n        for(int i=n-1;i>=0;i--){\\n            sum+=nums[i]+c;\\n            c=sum/10;\\n            sum%=10;\\n            nums[i]=sum;\\n            sum=0;\\n        }\\n        while(c){\\n            nums.insert(nums.begin(),c%10);\\n            c/=10;\\n        }\\n        return nums;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nvector<int> addToArrayForm(vector<int>& nums, int k) {\\n        int c = 0;\\n        int n = nums.size();\\n        int sum = k;\\n        for(int i=n-1;i>=0;i--){\\n            sum+=nums[i]+c;\\n            c=sum/10;\\n            sum%=10;\\n            nums[i]=sum;\\n            sum=0;\\n        }\\n        while(c){\\n            nums.insert(nums.begin(),c%10);\\n            c/=10;\\n        }\\n        return nums;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2380020,
                "title": "go",
                "content": "My Solution on Github: [link](https://github.com/lostlang/LeetcodeGo)\\n```\\nfunc addToArrayForm(num []int, k int) []int {\\n\\tvar out = []int{}\\n\\n\\tfor i := len(num) - 1; i >= 0; i-- {\\n\\t\\tk += num[i]\\n\\t\\tout = append(out, k%10)\\n\\t\\tk /= 10\\n\\t}\\n\\n\\tfor k > 0 {\\n\\t\\tout = append(out, k%10)\\n\\t\\tk /= 10\\n\\t}\\n\\n\\tfor i := 0; i < len(out)/2; i++ {\\n\\t\\tout[i], out[len(out)-i-1] = out[len(out)-i-1], out[i]\\n\\t}\\n\\n\\treturn out\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc addToArrayForm(num []int, k int) []int {\\n\\tvar out = []int{}\\n\\n\\tfor i := len(num) - 1; i >= 0; i-- {\\n\\t\\tk += num[i]\\n\\t\\tout = append(out, k%10)\\n\\t\\tk /= 10\\n\\t}\\n\\n\\tfor k > 0 {\\n\\t\\tout = append(out, k%10)\\n\\t\\tk /= 10\\n\\t}\\n\\n\\tfor i := 0; i < len(out)/2; i++ {\\n\\t\\tout[i], out[len(out)-i-1] = out[len(out)-i-1], out[i]\\n\\t}\\n\\n\\treturn out\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2285716,
                "title": "java-easy-fast-solution-faster-than-99-65-no-reverse",
                "content": "```\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list;\\n    }",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Linked List"
                ],
                "code": "```\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2202370,
                "title": "c-easy-lines-to-understand-explanation",
                "content": "Begin from the right side of the array \\n```\\n i = num.size()-1;\\n```\\nIterate through the digits of K\\n```\\n  while(k!=0)\\n      {\\n\\t  ...\\n\\t  i--;\\n\\t  }\\n```\\nGetting the first bit of K\\n```\\n(k%10)\\n```\\nAdding the  Ith digit of k to the Ith digit  from right of the array \\n```\\nkNum = num[i] + (k%10);\\n```\\nOne element of the array contains one digit so,\\n```\\nnum[i] = kNum%10;\\n```\\nIf a summation of two digits is more than one digit, Add the second digit to the K as carry. But first divide K by 10 to get rid of the first digit - which we added to array already-.\\n```\\nk/=10;\\nk+=kNum/10;\\n```\\n\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n      int kNum, i = num.size()-1;\\n      while(k!=0)\\n      {\\n          if(i<0) {num.insert(num.begin(),1,0); i++;}\\n\\t\\t  \\n          kNum = num[i] + (k%10);\\n          num[i] = kNum%10;\\n          k/=10;\\n          k+=kNum/10;\\n          i--;\\n      }\\n    return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n i = num.size()-1;\\n```\n```\\n  while(k!=0)\\n      {\\n\\t  ...\\n\\t  i--;\\n\\t  }\\n```\n```\\n(k%10)\\n```\n```\\nkNum = num[i] + (k%10);\\n```\n```\\nnum[i] = kNum%10;\\n```\n```\\nk/=10;\\nk+=kNum/10;\\n```\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n      int kNum, i = num.size()-1;\\n      while(k!=0)\\n      {\\n          if(i<0) {num.insert(num.begin(),1,0); i++;}\\n\\t\\t  \\n          kNum = num[i] + (k%10);\\n          num[i] = kNum%10;\\n          k/=10;\\n          k+=kNum/10;\\n          i--;\\n      }\\n    return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1970766,
                "title": "simple-7-python-lines-very-faster-than-83",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        n = \"\"\\n        for i in num:\\n            n+=str(i)\\n        lista = int(n) + k\\n        return list(str(lista))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        n = \"\"\\n        for i in num:\\n            n+=str(i)\\n        lista = int(n) + k\\n        return list(str(lista))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1930260,
                "title": "o-n-solution-python-beats-94-66",
                "content": "![image](https://assets.leetcode.com/users/images/84e690c5-2df0-4b84-9254-b008bb7b68ef_1649534756.8219285.png)\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        a = \"\"\\n        for i in num:\\n            a += str(i)\\n        a = int(a) + k\\n        a = list(str(a))\\n        return a\\n```\\n\\nIf there is any mistake/suggestion please let me know below...\\uD83D\\uDC47",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        a = \"\"\\n        for i in num:\\n            a += str(i)\\n        a = int(a) + k\\n        a = list(str(a))\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1926002,
                "title": "c-fastest-o-n-easy-unique-explained",
                "content": "-Separate the digits of k and add to num from end\\n -Traverse from end and fill in a new vector \\n -Look for number greater than 9, if it is, separate its digits keep last digit and push next forward\\n        \\n\\nclass Solution {\\npublic:\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int j=num.size()-1;\\n        while(k!=0 && j>=0)\\n        {\\n            num[j]+=(k%10);\\n            k/=10;\\n            j--;\\n        }\\n        if(k!=0)\\n        {\\n            reverse(num.begin(),num.end());\\n            while(k!=0)\\n        {\\n            num.push_back(k%10);\\n            k/=10;\\n        }\\n            reverse(num.begin(),num.end());\\n        }\\n        vector<int>ans;\\n        int ct=0;\\n        for(int i=num.size()-1;i>=0;i--)\\n        {\\n            if(num[i]+ct<=9){\\n                ans.push_back(num[i]+ct);\\n                ct=0;\\n                }\\n            else \\n            {\\n                int n=num[i]+ct;\\n                while(n>9)\\n                {\\n                    ans.push_back(n%10);\\n                    n/=10;\\n                }\\n                ct=n;\\n            }\\n        }\\n        if(ct!=0)\\n            ans.push_back(ct);\\n        \\n        reverse(ans.begin(),ans.end());\\n        \\n        return ans;\\n          }\\n\\t\\t};",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "class Solution {\\npublic:\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int j=num.size()-1;\\n        while(k!=0 && j>=0)\\n        {\\n            num[j]+=(k%10);\\n            k/=10;\\n            j--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1853536,
                "title": "simple-addition-java",
                "content": "```\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        LinkedList<Integer> res = new LinkedList<>();\\n        int c = 0; //carry\\n        int i = num.length-1;\\n        \\n        while(k>0 || i>=0){\\n            int sum = c;\\n            if(k>0){\\n                sum+=k%10;\\n                k = k/10;\\n            }\\n            if(i>=0){\\n                sum+=num[i];\\n                i--;\\n            }\\n            res.addFirst(sum%10);\\n            c = sum/10;\\n        }\\n        if(c>0){\\n            res.addFirst(1);\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        LinkedList<Integer> res = new LinkedList<>();\\n        int c = 0; //carry\\n        int i = num.length-1;\\n        \\n        while(k>0 || i>=0){\\n            int sum = c;\\n            if(k>0){\\n                sum+=k%10;\\n                k = k/10;\\n            }\\n            if(i>=0){\\n                sum+=num[i];\\n                i--;\\n            }\\n            res.addFirst(sum%10);\\n            c = sum/10;\\n        }\\n        if(c>0){\\n            res.addFirst(1);\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1794862,
                "title": "python3-hold-my-beer",
                "content": "**One line solution**\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return [int(i) for i in str(int(\\'\\'.join([str(i) for i in num]))+k)]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return [int(i) for i in str(int(\\'\\'.join([str(i) for i in num]))+k)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1680601,
                "title": "java-solution-o-n",
                "content": "This is probably a very infefficent solution, but this took way too long, so I give up.\\n\\n```\\nclass Solution {\\n  public List<Integer> addToArrayForm(int[] num, int k) {\\n\\n    int n = num.length - 1;\\n    \\n    int carry = 0;\\n        \\n    while (n >= 0) {\\n      num[n] += carry;\\n      carry = 0;\\n      int sum = num[n] + k % 10;\\n      if (sum >= 10) {\\n        carry = sum / 10;\\n        sum %= 10;\\n      }\\n      num[n--] = sum;\\n      k /= 10;\\n    }\\n    \\n    List<Integer> ret = new ArrayList<>();\\n\\n    while (k != 0) {\\n      int sum = k % 10 + carry;\\n      carry = 0;\\n      if (sum >= 10) {\\n        carry = sum / 10;\\n        sum %= 10;\\n      }\\n      ret.add(0, sum);\\n      k /= 10;\\n    }\\n\\n    if (carry != 0) ret.add(0, carry);\\n\\n    for (int x : num) ret.add(x);\\n    \\n    return ret;\\n    \\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public List<Integer> addToArrayForm(int[] num, int k) {\\n\\n    int n = num.length - 1;\\n    \\n    int carry = 0;\\n        \\n    while (n >= 0) {\\n      num[n] += carry;\\n      carry = 0;\\n      int sum = num[n] + k % 10;\\n      if (sum >= 10) {\\n        carry = sum / 10;\\n        sum %= 10;\\n      }\\n      num[n--] = sum;\\n      k /= 10;\\n    }\\n    \\n    List<Integer> ret = new ArrayList<>();\\n\\n    while (k != 0) {\\n      int sum = k % 10 + carry;\\n      carry = 0;\\n      if (sum >= 10) {\\n        carry = sum / 10;\\n        sum %= 10;\\n      }\\n      ret.add(0, sum);\\n      k /= 10;\\n    }\\n\\n    if (carry != 0) ret.add(0, carry);\\n\\n    for (int x : num) ret.add(x);\\n    \\n    return ret;\\n    \\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1661291,
                "title": "java-solution-not-the-fastest-but-very-intuitive",
                "content": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        int carry = 0;\\n        int index = num.length-1;\\n        while(k>0 && index>=0){\\n            int kRem = k%10;\\n            int sum = 0;\\n            if(carry!=0){\\n            sum = kRem + num[index] + carry;\\n            carry =0;\\n            }\\n            else sum = kRem + num[index];\\n            if(sum >9){\\n                carry = sum/10;\\n                sum = sum%10;\\n            }\\n            list.add(sum);\\n            k=k/10;\\n            index--;\\n        }\\n        \\n        if(index>=0){\\n            if(carry!=0){\\n                while(index>=0){\\n                    int sum = num[index] + carry;\\n                    carry = 0;\\n                    if(sum>9){\\n                        carry = sum/10;\\n                        sum = sum%10;\\n                    }\\n                    list.add(sum);\\n                    index--;\\n                }\\n            }else{\\n                while(index>=0){\\n                    list.add(num[index]);\\n                    index--;\\n                }\\n            }\\n        }\\n        \\n       else if(k>0){\\n            if(carry != 0){\\n                while(k>0){\\n                    int kRem = k%10;\\n                    int sum = kRem + carry;\\n                    carry = 0;\\n                    if(sum>9){\\n                        carry = sum/10;\\n                        sum = sum%10;\\n                    }\\n                    list.add(sum);\\n                    k=k/10;\\n                }\\n            }else{\\n                while(k>0){\\n                    list.add(k%10);\\n                    k=k/10;\\n                }\\n            }\\n        }\\n        \\n        if(carry !=0) list.add(carry);\\n        \\n        Collections.reverse(list);\\n            \\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new ArrayList<>();\\n        int carry = 0;\\n        int index = num.length-1;\\n        while(k>0 && index>=0){\\n            int kRem = k%10;\\n            int sum = 0;\\n            if(carry!=0){\\n            sum = kRem + num[index] + carry;\\n            carry =0;\\n            }\\n            else sum = kRem + num[index];\\n            if(sum >9){\\n                carry = sum/10;\\n                sum = sum%10;\\n            }\\n            list.add(sum);\\n            k=k/10;\\n            index--;\\n        }\\n        \\n        if(index>=0){\\n            if(carry!=0){\\n                while(index>=0){\\n                    int sum = num[index] + carry;\\n                    carry = 0;\\n                    if(sum>9){\\n                        carry = sum/10;\\n                        sum = sum%10;\\n                    }\\n                    list.add(sum);\\n                    index--;\\n                }\\n            }else{\\n                while(index>=0){\\n                    list.add(num[index]);\\n                    index--;\\n                }\\n            }\\n        }\\n        \\n       else if(k>0){\\n            if(carry != 0){\\n                while(k>0){\\n                    int kRem = k%10;\\n                    int sum = kRem + carry;\\n                    carry = 0;\\n                    if(sum>9){\\n                        carry = sum/10;\\n                        sum = sum%10;\\n                    }\\n                    list.add(sum);\\n                    k=k/10;\\n                }\\n            }else{\\n                while(k>0){\\n                    list.add(k%10);\\n                    k=k/10;\\n                }\\n            }\\n        }\\n        \\n        if(carry !=0) list.add(carry);\\n        \\n        Collections.reverse(list);\\n            \\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1602645,
                "title": "python-one-liner-simple-solution",
                "content": "\\n\\tclass Solution(object):\\n\\t\\tdef addToArrayForm(self, num, k):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:type num: List[int]\\n\\t\\t\\t:type k: int\\n\\t\\t\\t:rtype: List[int]\\n\\t\\t\\t\"\"\"\\n\\t\\t\\treturn (list(str(int(\"\".join(map(str, num))) + k)))\\n\\t\\t\\t\\nWe approach the problem in 3 steps\\n1. Convert the list of integers into a single number \\n2. Convert the string to int and add K to it.\\n3. Convert the sum into string and return it as string",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\n\\tclass Solution(object):\\n\\t\\tdef addToArrayForm(self, num, k):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:type num: List[int]\\n\\t\\t\\t:type k: int\\n\\t\\t\\t:rtype: List[int]\\n\\t\\t\\t\"\"\"\\n\\t\\t\\treturn (list(str(int(\"\".join(map(str, num))) + k)))\\n\\t\\t\\t\\nWe approach the problem in 3 steps\\n1. Convert the list of integers into a single number \\n2. Convert the string to int and add K to it.\\n3. Convert the sum into string and return it as string",
                "codeTag": "Java"
            },
            {
                "id": 1576312,
                "title": "java-c-c-94-faster-in-java-solution",
                "content": "**If explanation needed comment below.!**\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        for(int i=num.length-1; i>=0 || k>0; i--){\\n            if(i>=0){\\n                list.add((num[i]+k)%10);\\n                k=(num[i]+k)/10;\\n            }else{\\n                list.add(k%10);\\n                k/=10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList<Integer>();\\n        for(int i=num.length-1; i>=0 || k>0; i--){\\n            if(i>=0){\\n                list.add((num[i]+k)%10);\\n                k=(num[i]+k)/10;\\n            }else{\\n                list.add(k%10);\\n                k/=10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1561509,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return map(int, (list(str(int(\\'\\'.join(map(str, num))) + k))))\\n```\\t\\t",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        return map(int, (list(str(int(\\'\\'.join(map(str, num))) + k))))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1553691,
                "title": "rust-with-iterators-power-12-ms",
                "content": "```\\nimpl Solution {\\n    pub fn add_to_array_form(num: Vec<i32>, mut k: i32) -> Vec<i32> {\\n        use std::iter::{from_fn, repeat};\\n\\n        let mut q = std::collections::VecDeque::with_capacity(num.len());\\n        let it_num = num.into_iter().rev();\\n        let it_k = from_fn(move || {\\n            if k > 0 {\\n                let dig = k % 10;\\n                k /= 10;\\n                Some(dig)\\n            } else {\\n                None\\n            }\\n        });\\n\\n        let mut carry = 0;\\n\\n        for (dig_num, dig_k) in it_num.chain(repeat(-1)).zip(it_k.chain(repeat(-1))) {\\n            if dig_num == -1 && dig_k == -1 {\\n                break;\\n            }\\n            let sum_dig = dig_num.max(0) + dig_k.max(0) + carry;\\n            q.push_front(sum_dig % 10);\\n            carry = if sum_dig >= 10 { 1 } else { 0 };\\n        }\\n\\n        if carry > 0 {\\n            q.push_front(1);\\n        }\\n\\n        q.into_iter().collect()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Queue"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn add_to_array_form(num: Vec<i32>, mut k: i32) -> Vec<i32> {\\n        use std::iter::{from_fn, repeat};\\n\\n        let mut q = std::collections::VecDeque::with_capacity(num.len());\\n        let it_num = num.into_iter().rev();\\n        let it_k = from_fn(move || {\\n            if k > 0 {\\n                let dig = k % 10;\\n                k /= 10;\\n                Some(dig)\\n            } else {\\n                None\\n            }\\n        });\\n\\n        let mut carry = 0;\\n\\n        for (dig_num, dig_k) in it_num.chain(repeat(-1)).zip(it_k.chain(repeat(-1))) {\\n            if dig_num == -1 && dig_k == -1 {\\n                break;\\n            }\\n            let sum_dig = dig_num.max(0) + dig_k.max(0) + carry;\\n            q.push_front(sum_dig % 10);\\n            carry = if sum_dig >= 10 { 1 } else { 0 };\\n        }\\n\\n        if carry > 0 {\\n            q.push_front(1);\\n        }\\n\\n        q.into_iter().collect()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1538711,
                "title": "c-simple-solution-beats-80",
                "content": "class Solution {\\npublic:\\n\\n    vector<int> addToArrayForm(vector<int>& A, int k) {\\n        int n = A.size();\\n        vector<int> result;\\n        int carry =0;\\n        \\n        for(int i=n-1 ; i>=0 ; --i)\\n        {\\n            int temp = 0;\\n            temp = k%10;\\n            k = k/10;\\n            temp += A[i] + carry;\\n            carry = temp>9 ? 1 : 0;\\n            if(carry) result.push_back(temp-10);\\n            else result.push_back(temp);\\n        }\\n        \\n        while(k>0)\\n        {\\n            int temp = k%10 + carry;\\n            k /= 10;\\n            carry = temp>9 ? 1 : 0;\\n            if(carry) result.push_back(temp-10);\\n            else result.push_back(temp);\\n        }\\n        if(carry) result.push_back(1);\\n        reverse(result.begin(), result.end());\\n        \\n        return result;\\n    }\\n};\\n**leave a like.**",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    vector<int> addToArrayForm(vector<int>& A, int k) {\\n        int n = A.size();\\n        vector<int> result;\\n        int carry =0;\\n        \\n        for(int i=n-1 ; i>=0 ; --i)\\n        {\\n            int temp = 0;\\n            temp = k%10;\\n            k = k/10;\\n            temp += A[i] + carry;\\n            carry = temp>9 ? 1 : 0;\\n            if(carry) result.push_back(temp-10);\\n            else result.push_back(temp);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1484059,
                "title": "javascript-solution",
                "content": "```\\nvar addStrings = function(num1, num2) {\\n    let carry = 0, ans = \"\";\\n    let reverse = (str) => [...str].reverse().join(\\'\\');\\n    num1 = reverse(num1);\\n    num2 = reverse(num2);\\n    for(let i = 0; i <= Math.max(num1.length, num2.length)-1; i++) {\\n        let c = num1.charAt(i) - \\'0\\'; // string - \\'0\\' converts to int... didn\\'t know that\\n        let d = num2.charAt(i) - \\'0\\';\\n        ans += (c + d + carry) % 10;\\n        carry = Math.trunc((c + d + carry) / 10);\\n    }\\n    ans += carry > 0 ? carry : \\'\\';\\n    return reverse(ans);\\n};\\n\\nvar addToArrayForm = function(num, k) {\\n    let n = num.join(\\'\\');\\n    let sum = addStrings(n, k.toString());\\n    return sum.split(\\'\\').map(Number);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar addStrings = function(num1, num2) {\\n    let carry = 0, ans = \"\";\\n    let reverse = (str) => [...str].reverse().join(\\'\\');\\n    num1 = reverse(num1);\\n    num2 = reverse(num2);\\n    for(let i = 0; i <= Math.max(num1.length, num2.length)-1; i++) {\\n        let c = num1.charAt(i) - \\'0\\'; // string - \\'0\\' converts to int... didn\\'t know that\\n        let d = num2.charAt(i) - \\'0\\';\\n        ans += (c + d + carry) % 10;\\n        carry = Math.trunc((c + d + carry) / 10);\\n    }\\n    ans += carry > 0 ? carry : \\'\\';\\n    return reverse(ans);\\n};\\n\\nvar addToArrayForm = function(num, k) {\\n    let n = num.join(\\'\\');\\n    let sum = addStrings(n, k.toString());\\n    return sum.split(\\'\\').map(Number);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1397047,
                "title": "simple-c-solution-o-1-space-used",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int carry=k;\\n        reverse(num.begin(),num.end());\\n        \\n        for(int i=0;i<num.size();i++ )\\n        {\\n            int sum=num[i]+carry;\\n            num[i]=sum%10;\\n            carry=sum/10;\\n            \\n        }\\n        if(carry!=0)\\n        {\\n            while(carry)\\n            {\\n                num.push_back(carry%10);\\n                carry=carry/10;\\n            }\\n        }\\n        reverse(num.begin(),num.end());\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int carry=k;\\n        reverse(num.begin(),num.end());\\n        \\n        for(int i=0;i<num.size();i++ )\\n        {\\n            int sum=num[i]+carry;\\n            num[i]=sum%10;\\n            carry=sum/10;\\n            \\n        }\\n        if(carry!=0)\\n        {\\n            while(carry)\\n            {\\n                num.push_back(carry%10);\\n                carry=carry/10;\\n            }\\n        }\\n        reverse(num.begin(),num.end());\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1380482,
                "title": "simple-java-solution",
                "content": "import java.math.*;\\nclass Solution {\\n\\n    public List<Integer> addToArrayForm(int[] n, int k) {\\n        String a=\"\";\\n        int i;\\n        for(i=0;i<n.length;i++)\\n        {\\n            a=a+n[i];\\n        }\\n        BigInteger nm=new BigInteger(a);\\n        BigInteger kk=new BigInteger(String.valueOf(k));\\n        nm=nm.add(kk);\\n        a=nm.toString();\\n        List<Integer> mm=new ArrayList<>();\\n        for(i=0;i<a.length();i++)\\n        {\\n            mm.add(Integer.parseInt(String.valueOf(a.charAt(i))));\\n        }\\n        return mm;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public List<Integer> addToArrayForm(int[] n, int k) {\\n        String a=\"\";\\n        int i;\\n        for(i=0;i<n.length;i++)\\n        {\\n            a=a+n[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1352652,
                "title": "add-carry-to-k",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        \\n        int n = nums.size();\\n        \\n        for(int i=n-1; i>=0 && k>0; i--){\\n            \\n            nums[i] += k%10;\\n            k /= 10;\\n\\n            k += nums[i] / 10; //adding carry to k\\n            nums[i] %= 10;\\n        }\\n        \\n        while(k){\\n            nums.insert(nums.begin(),k%10);\\n            k /= 10;\\n        }\\n        \\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        \\n        int n = nums.size();\\n        \\n        for(int i=n-1; i>=0 && k>0; i--){\\n            \\n            nums[i] += k%10;\\n            k /= 10;\\n\\n            k += nums[i] / 10; //adding carry to k\\n            nums[i] %= 10;\\n        }\\n        \\n        while(k){\\n            nums.insert(nums.begin(),k%10);\\n            k /= 10;\\n        }\\n        \\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1340570,
                "title": "99-94-2ms-java-solution",
                "content": "If you are reading this you are probably failing some test cases with large input numbers (or perhaps just curious about other solutions). The way I solved this was iterating through each digit (from right to left) in both the input array and `k` and using a carry if their sum is larger than 10. \\n\\nI\\'d still classify this problem as \"easy\", however, it took a few tries to get it right given the failing test cases with large numbers (20+ digits).\\n\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n\\n        int iter = num.length-1, sum=0, carry=0;\\n        LinkedList<Integer> res = new LinkedList<Integer>();\\n        \\n        while(iter >= 0 || k > 0){\\n            int temp = iter >= 0 ? num[iter] : 0;\\n            int kdig = k%10;\\n            k /= 10;\\n            \\n            int sum = kdig + temp + carry;\\n            if(sum >= 10){\\n                sum = sum % 10;\\n                carry = 1;\\n            }\\n            else{\\n                carry = 0;\\n            }\\n            \\n            iter--;\\n            res.addFirst(tempSum);\\n        }\\n        \\n        if(carry > 0)res.addFirst(1);\\n        \\n        return res;\\n    }",
                "solutionTags": [],
                "code": "If you are reading this you are probably failing some test cases with large input numbers (or perhaps just curious about other solutions). The way I solved this was iterating through each digit (from right to left) in both the input array and `k` and using a carry if their sum is larger than 10. \\n\\nI\\'d still classify this problem as \"easy\", however, it took a few tries to get it right given the failing test cases with large numbers (20+ digits).\\n\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n\\n        int iter = num.length-1, sum=0, carry=0;\\n        LinkedList<Integer> res = new LinkedList<Integer>();\\n        \\n        while(iter >= 0 || k > 0){\\n            int temp = iter >= 0 ? num[iter] : 0;\\n            int kdig = k%10;\\n            k /= 10;\\n            \\n            int sum = kdig + temp + carry;\\n            if(sum >= 10){\\n                sum = sum % 10;\\n                carry = 1;\\n            }\\n            else{\\n                carry = 0;\\n            }\\n            \\n            iter--;\\n            res.addFirst(tempSum);\\n        }\\n        \\n        if(carry > 0)res.addFirst(1);\\n        \\n        return res;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1101240,
                "title": "c-straightforward-approach",
                "content": "The approach to solve this problem is quite straightforward.... What we do is like start from the last element of the array and keep adding the element and k%10 and storing carry as well....\\nIg complexity will be O(n+k)\\n#nevergiveup\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& arr, int k) {\\n        int n=arr.size();\\n        int num=0;\\n        // vector<int> ans;\\n        for(int i=n-1;i>=0;i--){\\n            num+=k%10;\\n            num+=arr[i];\\n            k/=10;\\n            arr[i]=num%10;\\n            num/=10;\\n        }\\n        while(k){\\n            num+=k%10;\\n            k/=10;\\n            arr.insert(arr.begin(),num%10);\\n            num/=10;\\n        }\\n        if(num){\\n            arr.insert(arr.begin(),num);\\n        }\\n        return arr;\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& arr, int k) {\\n        int n=arr.size();\\n        int num=0;\\n        // vector<int> ans;\\n        for(int i=n-1;i>=0;i--){\\n            num+=k%10;\\n            num+=arr[i];\\n            k/=10;\\n            arr[i]=num%10;\\n            num/=10;\\n        }\\n        while(k){\\n            num+=k%10;\\n            k/=10;\\n            arr.insert(arr.begin(),num%10);\\n            num/=10;\\n        }\\n        if(num){\\n            arr.insert(arr.begin(),num);\\n        }\\n        return arr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1017649,
                "title": "python-3-very-easy-to-understand-one-liner",
                "content": "```\\nreturn list(str(K + int(\"\".join(map(str, A)))))\\n```",
                "solutionTags": [],
                "code": "```\\nreturn list(str(K + int(\"\".join(map(str, A)))))\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1003554,
                "title": "java-simple-solution-100-time",
                "content": "This solution works around the extraction of the digits of both the array and K starting from the last ones then adding them and pushing the result to the return list. We must also consider the carry.\\n\\n\\tclass Solution {\\n\\t\\tpublic List<Integer> addToArrayForm(int[] A, int K) {\\n\\t\\t\\tLinkedList<Integer> ret = new LinkedList();\\n\\n\\t\\t\\tint carry = 0;\\n\\t\\t\\tint i = A.length-1;\\n\\t\\t\\twhile(i >= 0 || K > 0){\\n\\t\\t\\t\\t// Extraction of A\\'s digits\\n\\t\\t\\t\\tint A_dig = 0;\\n\\t\\t\\t\\tif(i >= 0){\\n\\t\\t\\t\\t\\tA_dig = A[i];\\n\\t\\t\\t\\t\\ti--;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// Extraction of K\\'s digits\\n\\t\\t\\t\\tint K_dig = K % 10;\\n\\t\\t\\t\\tcarry += A_dig + K_dig;\\n\\n\\t\\t\\t\\tret.addFirst(carry % 10);\\n\\t\\t\\t\\tcarry /= 10;\\n\\t\\t\\t\\tK /= 10;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif(carry == 1) ret.addFirst(1);\\n\\t\\t\\treturn ret;\\n\\t\\t}\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\t\\tpublic List<Integer> addToArrayForm(int[] A, int K) {\\n\\t\\t\\tLinkedList<Integer> ret = new LinkedList();\\n\\n\\t\\t\\tint carry = 0;\\n\\t\\t\\tint i = A.length-1;\\n\\t\\t\\twhile(i >= 0 || K > 0){\\n\\t\\t\\t\\t// Extraction of A\\'s digits\\n\\t\\t\\t\\tint A_dig = 0;\\n\\t\\t\\t\\tif(i >= 0){\\n\\t\\t\\t\\t\\tA_dig = A[i];\\n\\t\\t\\t\\t\\ti--;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 711419,
                "title": "c-faster-than-92-77",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& A, int K) \\n    {\\n        int n=A.size()-1;\\n       \\n        int carry=0;\\n     \\n        while(n>=0||K)\\n        {   if(n<0)\\n            {\\n                A.insert(A.begin(),K%10+carry);\\n                if(A[0]>=10)\\n                {\\n                    A[0]=A[0]%10;\\n                    carry=1;\\n                }\\n                else\\n                    carry=0;\\n            }\\n         \\n            else\\n            {\\n                A[n]+=K%10+carry;\\n               \\n                if(A[n]>=10)\\n                {\\n                    A[n]=A[n]%10;\\n                    carry=1;\\n                }\\n            \\n                else\\n                    carry=0;\\n            }\\n            \\n            K=K/10;\\n            n--;\\n        }\\n        if(carry==1)\\n            A.insert(A.begin(),1);\\n        return A;\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& A, int K) \\n    {\\n        int n=A.size()-1;\\n       \\n        int carry=0;\\n     \\n        while(n>=0||K)\\n        {   if(n<0)\\n            {\\n                A.insert(A.begin(),K%10+carry);\\n                if(A[0]>=10)\\n                {\\n                    A[0]=A[0]%10;\\n                    carry=1;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 655940,
                "title": "java-o-max-n-logk-solution",
                "content": "Pretty straightforward. Just make sure to build the list up in reverse order or it will be expensive to shift the digits at each iteration.\\n```\\n    public List<Integer> addToArrayForm(int[] A, int k) {\\n        List<Integer> result = new ArrayList<>();\\n        int i = A.length - 1, carry = 0;\\n        while (i >= 0 || k > 0) {\\n            int val = k % 10;\\n            int sum;\\n            if (i < 0) sum = val + carry;\\n            else sum = val + carry + A[i];\\n            result.add(sum % 10);\\n            carry = sum / 10;\\n            k /= 10;\\n            i--;\\n        }\\n        \\n        if (carry == 1) result.add(carry);\\n        Collections.reverse(result);\\n        return result;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public List<Integer> addToArrayForm(int[] A, int k) {\\n        List<Integer> result = new ArrayList<>();\\n        int i = A.length - 1, carry = 0;\\n        while (i >= 0 || k > 0) {\\n            int val = k % 10;\\n            int sum;\\n            if (i < 0) sum = val + carry;\\n            else sum = val + carry + A[i];\\n            result.add(sum % 10);\\n            carry = sum / 10;\\n            k /= 10;\\n            i--;\\n        }\\n        \\n        if (carry == 1) result.add(carry);\\n        Collections.reverse(result);\\n        return result;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 514537,
                "title": "javascript-intuitive-solution",
                "content": "```javascript\\n/**\\n * @param {number[]} A\\n * @param {number} K\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(A, K) {\\n  let i = A.length - 1;\\n  let carry = 0;\\n  while (K || carry) {\\n    const d = K % 10;\\n    if (i >= 0) {\\n      A[i] = A[i] + d + carry;\\n      carry = A[i] > 9 ? 1 : 0;\\n      A[i] = A[i] % 10;\\n      i--;\\n    } else {\\n      const p = d + carry;\\n      carry = p > 9 ? 1 : 0;\\n      A.unshift(p % 10);\\n    }\\n    K = Math.trunc(K / 10);\\n  }\\n  return A;\\n};\\n```\\n\\n* 156/156 cases passed (104 ms)\\n* Your runtime beats 90 % of javascript submissions\\n* Your memory usage beats 90 % of javascript submissions (38.3 MB)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @param {number[]} A\\n * @param {number} K\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(A, K) {\\n  let i = A.length - 1;\\n  let carry = 0;\\n  while (K || carry) {\\n    const d = K % 10;\\n    if (i >= 0) {\\n      A[i] = A[i] + d + carry;\\n      carry = A[i] > 9 ? 1 : 0;\\n      A[i] = A[i] % 10;\\n      i--;\\n    } else {\\n      const p = d + carry;\\n      carry = p > 9 ? 1 : 0;\\n      A.unshift(p % 10);\\n    }\\n    K = Math.trunc(K / 10);\\n  }\\n  return A;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 501794,
                "title": "python-one-liner-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\\n        return list(str(int(\"\".join([str(i) for i in A])) + K))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, A: List[int], K: int) -> List[int]:\\n        return list(str(int(\"\".join([str(i) for i in A])) + K))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 396693,
                "title": "go-golang-two-solutions",
                "content": ">Runtime: 220 ms, faster than 63.16% of Go online submissions for Add to Array-Form of Integer.\\nMemory Usage: 8.3 MB, less than 80.00% of Go online submissions for Add to Array-Form of Integer.\\n\\n```go\\nfunc addToArrayForm(A []int, K int) []int {\\n\\n\\tres := []int{}\\n\\n\\tfor i := len(A) - 1; i >= 0; i-- {\\n\\t\\tres = append(res, (A[i]+K)%10)\\n\\t\\tK = (A[i] + K) / 10\\n\\t}\\n\\tfor K > 0 {\\n\\t\\tres = append(res, K%10)\\n\\t\\tK /= 10\\n\\t}\\n\\tfor l, r := 0, len(res)-1; l < r; l, r = l+1, r-1 {\\n\\t\\tres[l], res[r] = res[r], res[l]\\n\\t}\\n\\treturn res\\n}\\n\\n```\\n\\n>Runtime: 212 ms, faster than 96.49% of Go online submissions for Add to Array-Form of Integer.\\nMemory Usage: 8.4 MB, less than 80.00% of Go online submissions for Add to Array-Form of Integer.\\n\\n```go\\nfunc addToArrayForm(A []int, K int) []int {\\n    i := len(A) - 1\\n\\tres := []int{}\\n    \\n    for i >= 0 || K > 0 {\\n        if i >= 0 {\\n            K += A[i]\\n        }\\n        res = append(res, K%10)\\n        K /= 10\\n        i--\\n    }\\n    for l, r := 0, len(res)-1; l < r; l, r = l+1, r-1 {\\n\\t\\tres[l], res[r] = res[r], res[l]\\n\\t}\\n\\treturn res\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```go\\nfunc addToArrayForm(A []int, K int) []int {\\n\\n\\tres := []int{}\\n\\n\\tfor i := len(A) - 1; i >= 0; i-- {\\n\\t\\tres = append(res, (A[i]+K)%10)\\n\\t\\tK = (A[i] + K) / 10\\n\\t}\\n\\tfor K > 0 {\\n\\t\\tres = append(res, K%10)\\n\\t\\tK /= 10\\n\\t}\\n\\tfor l, r := 0, len(res)-1; l < r; l, r = l+1, r-1 {\\n\\t\\tres[l], res[r] = res[r], res[l]\\n\\t}\\n\\treturn res\\n}\\n\\n```\n```go\\nfunc addToArrayForm(A []int, K int) []int {\\n    i := len(A) - 1\\n\\tres := []int{}\\n    \\n    for i >= 0 || K > 0 {\\n        if i >= 0 {\\n            K += A[i]\\n        }\\n        res = append(res, K%10)\\n        K /= 10\\n        i--\\n    }\\n    for l, r := 0, len(res)-1; l < r; l, r = l+1, r-1 {\\n\\t\\tres[l], res[r] = res[r], res[l]\\n\\t}\\n\\treturn res\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 310332,
                "title": "cpp-easy-few-lines-100-beats-easy-to-understand",
                "content": "```\\nvector<int> addToArrayForm(vector<int>& A, int K) {\\n        int size = A.size(), carry = 0;\\n        for(int i = size-1; i >= 0; i--){\\n            carry += K % 10; K /= 10;\\n            int val = A[i];\\n            A[i] = (A[i] + carry) % 10;\\n            carry = (val + carry) / 10;\\n        }\\n        while(K){\\n            carry += K % 10; K /= 10;\\n            A.insert(A.begin(), carry % 10);\\n            carry /= 10;\\n        }\\n        if(carry)\\n            A.insert(A.begin(), carry);\\n        return A;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "```\\nvector<int> addToArrayForm(vector<int>& A, int K) {\\n        int size = A.size(), carry = 0;\\n        for(int i = size-1; i >= 0; i--){\\n            carry += K % 10; K /= 10;\\n            int val = A[i];\\n            A[i] = (A[i] + carry) % 10;\\n            carry = (val + carry) / 10;\\n        }\\n        while(K){\\n            carry += K % 10; K /= 10;\\n            A.insert(A.begin(), carry % 10);\\n            carry /= 10;\\n        }\\n        if(carry)\\n            A.insert(A.begin(), carry);\\n        return A;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 235972,
                "title": "python-two-solutions-type-conversion-and-normal-mod",
                "content": "```\\nclass Solution:\\n    def addToArrayForm(self, A: \\'List[int]\\', K: \\'int\\') -> \\'List[int]\\':\\n        \"\"\"\\n        Method 1, convert A to an integer first, do the addition, finally             convert to list\\n        \"\"\"\\n        def list2int(l):\\n            s = list(map(str, l))\\n            s = \\'\\'.join(s)\\n            return int(s)\\n        \\n        def int2list(i):\\n            s = str(i)\\n            return list(map(int, s))\\n        \\n        return int2list(list2int(A) + K)\\n    \\n        \"\"\"\\n        Method 2, Schoolbook Addition\\n        \"\"\"\\n        for i in range(len(A) - 1, -1, -1):\\n            # Option 1: vanilla way to deal with remainder and quotient\\n            # K, A[i] =(A[i] + K) // 10, (A[i] + K) % 10\\n            # Option 2: use divmod()\\n            K, A[i] = divmod(A[i] + K, 10)\\n        \\n        # If K still has value, unshift it from head\\n        return list(map(int, str(K))) + A if K else A\\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, A: \\'List[int]\\', K: \\'int\\') -> \\'List[int]\\':\\n        \"\"\"\\n        Method 1, convert A to an integer first, do the addition, finally             convert to list\\n        \"\"\"\\n        def list2int(l):\\n            s = list(map(str, l))\\n            s = \\'\\'.join(s)\\n            return int(s)\\n        \\n        def int2list(i):\\n            s = str(i)\\n            return list(map(int, s))\\n        \\n        return int2list(list2int(A) + K)\\n    \\n        \"\"\"\\n        Method 2, Schoolbook Addition\\n        \"\"\"\\n        for i in range(len(A) - 1, -1, -1):\\n            # Option 1: vanilla way to deal with remainder and quotient\\n            # K, A[i] =(A[i] + K) // 10, (A[i] + K) % 10\\n            # Option 2: use divmod()\\n            K, A[i] = divmod(A[i] + K, 10)\\n        \\n        # If K still has value, unshift it from head\\n        return list(map(int, str(K))) + A if K else A\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 234872,
                "title": "c-straight-forward-solution",
                "content": "Standard way of using sum and carry to isolate digits.\\n\\n```\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] A, int K) {\\n        IList<int> res = new List<int>();\\n        int sum = 0, carry = 0;\\n        \\n        for(int i = A.Length-1; i >= 0; i--) {\\n            sum = A[i] + (K % 10) + carry;\\n            res.Add(sum % 10);\\n            carry = sum / 10;\\n            K = K / 10;\\n        }\\n        \\n        K += carry;\\n        while(K > 0) {\\n            res.Add(K % 10);\\n            K = K / 10;\\n        }\\n        \\n        return new List<int>(res.Reverse());\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public IList<int> AddToArrayForm(int[] A, int K) {\\n        IList<int> res = new List<int>();\\n        int sum = 0, carry = 0;\\n        \\n        for(int i = A.Length-1; i >= 0; i--) {\\n            sum = A[i] + (K % 10) + carry;\\n            res.Add(sum % 10);\\n            carry = sum / 10;\\n            K = K / 10;\\n        }\\n        \\n        K += carry;\\n        while(K > 0) {\\n            res.Add(K % 10);\\n            K = K / 10;\\n        }\\n        \\n        return new List<int>(res.Reverse());\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4087868,
                "title": "python-95-beats-2-approach-simple-code",
                "content": "**If you got help from this,... Plz Upvote .. it encourage me**\\n# Code\\n# Approach 1 Array\\n```\\nclass Solution(object):\\n    def addToArrayForm(self, A, K):\\n        A[-1] += K\\n        for i in range(len(A) - 1, -1, -1):\\n            carry, A[i] = divmod(A[i], 10)\\n            if i: A[i-1] += carry\\n        if carry:\\n            A = list(map(int, str(carry))) + A\\n        return A\\n\\n```\\n\\n.\\n\\n# Approach 2 (By Convert list into number then add and then convert number into digit)\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        # List -> Number\\n        n = 0\\n        for ele in num:\\n            n = (n*10) + ele\\n        \\n        n = n+k\\n        \\n        # Number -> List\\n        num = []\\n        while n > 0:\\n            num.insert(0, n % 10)  \\n            n //= 10 \\n        return num\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Math"
                ],
                "code": "```\\nclass Solution(object):\\n    def addToArrayForm(self, A, K):\\n        A[-1] += K\\n        for i in range(len(A) - 1, -1, -1):\\n            carry, A[i] = divmod(A[i], 10)\\n            if i: A[i-1] += carry\\n        if carry:\\n            A = list(map(int, str(carry))) + A\\n        return A\\n\\n```\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        # List -> Number\\n        n = 0\\n        for ele in num:\\n            n = (n*10) + ele\\n        \\n        n = n+k\\n        \\n        # Number -> List\\n        num = []\\n        while n > 0:\\n            num.insert(0, n % 10)  \\n            n //= 10 \\n        return num\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3960812,
                "title": "easy-approach-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        int i=n-1;\\n        int carry=0;\\n        vector<int> ans;\\n        while(i>=0)\\n        {\\n            int dig=k%10;\\n            k/=10;\\n            int sum=nums[i]+dig+carry;\\n            ans.push_back(sum%10);\\n            carry=sum/10;\\n            \\n            i--;\\n        }\\n        while(k)\\n        {\\n            int dig=k%10;\\n            k/=10;\\n            int sum=dig+carry;\\n            ans.push_back(sum%10);\\n            carry=sum/10;\\n        }\\n        if(carry>0)\\n        {\\n            ans.push_back(carry);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        int i=n-1;\\n        int carry=0;\\n        vector<int> ans;\\n        while(i>=0)\\n        {\\n            int dig=k%10;\\n            k/=10;\\n            int sum=nums[i]+dig+carry;\\n            ans.push_back(sum%10);\\n            carry=sum/10;\\n            \\n            i--;\\n        }\\n        while(k)\\n        {\\n            int dig=k%10;\\n            k/=10;\\n            int sum=dig+carry;\\n            ans.push_back(sum%10);\\n            carry=sum/10;\\n        }\\n        if(carry>0)\\n        {\\n            ans.push_back(carry);\\n        }\\n        reverse(ans.begin(),ans.end());\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3853226,
                "title": "c-98-6",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int> &A, int K)\\n    {\\n        int i, size = A.size();\\n\\n        for (i = size - 1; i >= 0 && K != 0; i--)\\n        {\\n            K = K + A[i];\\n            A[i] = K % 10;\\n            K = K / 10;\\n        }\\n        while (K != 0)\\n        {\\n            A.insert(A.begin(), K % 10);\\n            K = K / 10;\\n        }\\n        return A;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int> &A, int K)\\n    {\\n        int i, size = A.size();\\n\\n        for (i = size - 1; i >= 0 && K != 0; i--)\\n        {\\n            K = K + A[i];\\n            A[i] = K % 10;\\n            K = K / 10;\\n        }\\n        while (K != 0)\\n        {\\n            A.insert(A.begin(), K % 10);\\n            K = K / 10;\\n        }\\n        return A;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3823496,
                "title": "beats-100-java-solution-easy-to-understand-simplest-solution-full-explanation",
                "content": "\\n# Consider\\uD83D\\uDC4D\\n                    Please Upvote If You Find It Helpful\\n\\n# Code\\n```\\nclass Solution \\n{\\n    public List<Integer> addToArrayForm(int[] arr, int k) \\n    {\\n            int i,l=arr.length;      arr[l-1]+=k;\\n            for(i=l-1;i>0;i--)\\n            {\\n                if(arr[i]>=10)\\n                {\\n                    arr[i-1]+=arr[i]/10;\\n                    arr[i]=arr[i]%10;\\n                }   else    break;\\n            }\\n            int digits=(int)Math.log10(arr[0])+1;\\n            ArrayList<Integer> ne = new ArrayList<Integer>(0);\\n        if(arr[0]>=10)\\n           for(i=digits-1;i>0;i--)\\n            {\\n                ne.add(arr[0]/(int)Math.pow(10,i));\\n                arr[0]=(arr[0]%(int)Math.pow(10,i));\\n            }\\n        for(i=0;i<arr.length;i++)\\n            ne.add(arr[i]);\\n        return ne;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public List<Integer> addToArrayForm(int[] arr, int k) \\n    {\\n            int i,l=arr.length;      arr[l-1]+=k;\\n            for(i=l-1;i>0;i--)\\n            {\\n                if(arr[i]>=10)\\n                {\\n                    arr[i-1]+=arr[i]/10;\\n                    arr[i]=arr[i]%10;\\n                }   else    break;\\n            }\\n            int digits=(int)Math.log10(arr[0])+1;\\n            ArrayList<Integer> ne = new ArrayList<Integer>(0);\\n        if(arr[0]>=10)\\n           for(i=digits-1;i>0;i--)\\n            {\\n                ne.add(arr[0]/(int)Math.pow(10,i));\\n                arr[0]=(arr[0]%(int)Math.pow(10,i));\\n            }\\n        for(i=0;i<arr.length;i++)\\n            ne.add(arr[i]);\\n        return ne;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3679669,
                "title": "easy-c-solution-beginner-friendly-approach",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        for(int i=num.size()-1; i>=0; i--)\\n        {\\n            num[i] += k;\\n            k = num[i] / 10;\\n            num[i] %= 10;\\n        }\\n        while(k){\\n            num.insert(num.begin(), k % 10);\\n            k /= 10;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        for(int i=num.size()-1; i>=0; i--)\\n        {\\n            num[i] += k;\\n            k = num[i] / 10;\\n            num[i] %= 10;\\n        }\\n        while(k){\\n            num.insert(num.begin(), k % 10);\\n            k /= 10;\\n        }\\n        return num;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3626747,
                "title": "easy-to-understand-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nKeep on adding the digits of k in each element of array form the end side. If the array exhausts, add the remaining elements to the front of the array.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n    \\n        int carry = 0, n = nums.size(),p = n-1;\\n        while(k>0 || carry == 1)\\n        {\\n            if(p>=0)\\n            {\\n                if(nums[p] + k%10+ carry <= 9)\\n                {\\n                    nums[p] += k%10 + carry;\\n                    carry = 0;\\n                }\\n                else\\n                {\\n                    nums[p] = (nums[p]+k%10+carry)%10;\\n                    carry = 1;\\n                }\\n                p--;\\n                k/=10;\\n            }\\n            else\\n            break;\\n        }\\n// Adding the remaining digits to the front of array by reversing \\n// both the array and the digits of k.\\n            k = k + carry;\\n            reverse(nums.begin(), nums.end());\\n            while(k>0)\\n            {\\n                nums.push_back(k%10);\\n                k/=10;\\n            }\\n            reverse(nums.begin(), nums.end());\\n        return nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n    \\n        int carry = 0, n = nums.size(),p = n-1;\\n        while(k>0 || carry == 1)\\n        {\\n            if(p>=0)\\n            {\\n                if(nums[p] + k%10+ carry <= 9)\\n                {\\n                    nums[p] += k%10 + carry;\\n                    carry = 0;\\n                }\\n                else\\n                {\\n                    nums[p] = (nums[p]+k%10+carry)%10;\\n                    carry = 1;\\n                }\\n                p--;\\n                k/=10;\\n            }\\n            else\\n            break;\\n        }\\n// Adding the remaining digits to the front of array by reversing \\n// both the array and the digits of k.\\n            k = k + carry;\\n            reverse(nums.begin(), nums.end());\\n            while(k>0)\\n            {\\n                nums.push_back(k%10);\\n                k/=10;\\n            }\\n            reverse(nums.begin(), nums.end());\\n        return nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3561486,
                "title": "python3",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        for i in range(len(num) - 1, -1, -1):\\n            n = (num[i] + k) // 10\\n            num[i] = (num[i]+ k) % 10\\n            k = n\\n        \\n        while k:\\n            n = k % 10\\n            k //= 10\\n            num = [n] + num\\n        return num\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\\n        for i in range(len(num) - 1, -1, -1):\\n            n = (num[i] + k) // 10\\n            num[i] = (num[i]+ k) % 10\\n            k = n\\n        \\n        while k:\\n            n = k % 10\\n            k //= 10\\n            num = [n] + num\\n        return num\\n\\n\\n\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1801412,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1646508,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1801372,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1732619,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1801434,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1731226,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1802190,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1801788,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1801714,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1730314,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1801412,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1646508,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1801372,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1732619,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1801434,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1731226,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1802190,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1801788,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1801714,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1730314,
                "content": [
                    {
                        "username": "Casardo",
                        "content": "we don\\'t have no valentines, but we do have leetcode. "
                    },
                    {
                        "username": "masemune",
                        "content": "The funniest thing I\\'ve read on this site"
                    },
                    {
                        "username": "sandeshnep",
                        "content": "this problem is annoying"
                    },
                    {
                        "username": "santanusen",
                        "content": "This is almost the same annoyance, I mean problem, as yesterday\\'s."
                    },
                    {
                        "username": "scor32k",
                        "content": "ig lc is planning something big. This is the silence before dissaster. :)"
                    },
                    {
                        "username": "katalma",
                        "content": ":-D "
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Yeah I'm worried about it too... I don't want too break my streak that has been there since the start of this year ☹"
                    },
                    {
                        "username": "arghyadas",
                        "content": "Another Graph week maybe?\\uD83E\\uDD72"
                    },
                    {
                        "username": "heg816",
                        "content": "Calm before the storm"
                    },
                    {
                        "username": "ayushprakash1912",
                        "content": "Tip for Java coders: Use LinkedList instead of simple Arraylist. It speeds up the computation time manifolds!"
                    },
                    {
                        "username": "kurtischarnock",
                        "content": "manifolds? \\uD83D\\uDE05"
                    },
                    {
                        "username": "skrishg",
                        "content": "If using the arraylist, adding at the end and reversing the list before returning would be the better way. But linkedlist still tops that."
                    },
                    {
                        "username": "namnguyenarsenal",
                        "content": "thank you, improved from 21% to 100% :D. Almost forgot that addFirst in LinkedList only costs O(1), while ArrayList is O(n)"
                    },
                    {
                        "username": "YusenPeng",
                        "content": "Thank u sm!  "
                    },
                    {
                        "username": "Movsar",
                        "content": "Think about these corner cases: \nnum = [9,9,9,9,9,9,9,9,9,9], k = 1\nnum = [0], k = 23\nnum = [6], k = 809\n\nLifehack to get last digit from `k`: `k % 10`. Don't forget to delete last digit `k /= 10`. \n**Example: k = 809**\n  - 809 % 10 = 9 \n  - 809 / 10 = 80\n  - 80 % 10 = 0\n  - 80 / 10 = 8\n  - 8 % 10 = 8\n  - 8 / 10 = 0\n\n1) Check case `if k == 0` but index `i still less than num.length`\n2) Don't forget to check carry before return. `If (carry == 1) res.add(1)`\n3) Will need extra loop before return if `k > 0` in the case `num = [6], k = 809` \n\n`return res.reverse()`;"
                    },
                    {
                        "username": "parthsrivastava6112004",
                        "content": "[@heisenberg280](/heisenberg280)  i think it\\'s because integer is a 32 bit \\nwe need long "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@heisenberg280](/heisenberg280) bro let me know if you find a way\\n"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@heisenberg280](/heisenberg280) \nI decreased `k` after first iteration from the end of array `num` and did this check in the loop\n\n```\nif (k == 0) {\n    if (carry == 1) {\n        int sum = num[i] + carry;\n        carry = sum > 9 ? 1 : 0;\n        result.add(sum % 10);\n    } else {\n        result.add(num[i]);\n    }\n    continue;\n}\n```"
                    },
                    {
                        "username": "Movsar",
                        "content": "[@Preposterone](/Preposterone) Good idea! I did it after main iteration before return"
                    },
                    {
                        "username": "Preposterone",
                        "content": "[@heisenberg280](/heisenberg280) if you\\'re iterating from the end and you\\'re already at 0th index, then prepend a new element (list.insert(value: 0, index: 0) and continue with your algorithm as before."
                    },
                    {
                        "username": "heisenberg280",
                        "content": "How to tackle num = [9,9,9,9,9,9,9,9,9,9], k = 1?"
                    },
                    {
                        "username": "ajinkode",
                        "content": "This should be a medium level problem"
                    },
                    {
                        "username": "vasanthnannuri",
                        "content": "[@2017016](/2017016) try using long brother(still wouldnt work by the way)\\n"
                    },
                    {
                        "username": "heenahmed08",
                        "content": "[@2017016](/2017016) as the number variable overflows , remember range of int .(-2,147,483,648 to 2,147,483,647)"
                    },
                    {
                        "username": "2017016",
                        "content": "I getting wrong answer for the test case num=[9,9,9,9,9,9,9,9,9,9], k=1.\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        \\n        int number=0;\\n       \\n        for(int i=0;i<num.length;i++){\\n            number = number*10 + num[i];\\n        }\\n\\n        number  = number + k;\\n\\n         LinkedList<Integer> list = new LinkedList<Integer>();\\n\\n        while(number>0){\\n            int rem = number%10;\\n            number = number/10;\\n            list.addFirst(rem);\\n        }\\n\\nreturn list;\\n    }\\n}\\n"
                    },
                    {
                        "username": "tejasX",
                        "content": "why so?"
                    },
                    {
                        "username": "Jolly_Bolt",
                        "content": "If you are just trying to get the number from vector to a variable, then you will run into overflow problem. No variable can hold a number with 10^4 digits. This method would have worked if the constraints were smaller. Think of a different approach. This question is not as easy as it seems."
                    },
                    {
                        "username": "Entrropic",
                        "content": "And then there is python which can very much hold a 10^4 length integer without doing anything particularly fancy :P"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "At the first glance , I thought this is the easiest problem, but as we say never judge a book by its Cover. Lol."
                    },
                    {
                        "username": "Dhruv_Gupta1",
                        "content": "If you think it is medium level problem , It is!!"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "[@AdityaBharat](/AdityaBharat) In Python, use str() function fail."
                    },
                    {
                        "username": "GitG0",
                        "content": "[@AdityaBharat](/AdityaBharat) I think the difficulty is language dependant as I\\'m not sure it would be possible to recreate your naive example in a language like Java or C++"
                    },
                    {
                        "username": "harisriram2002",
                        "content": "Naah man it is easy tbh. You just have to be aware of the edge cases."
                    },
                    {
                        "username": "Satyendra001",
                        "content": "[@AdityaBharat](/AdityaBharat) Sorry Dude C++ doesn't have this much flexibility. I tried to convert string to int/long(which you are doing in step 4) using \"stoi\", \"stoll\" and other but all gave out of range. So went for the long way :) which wasn't that hard!"
                    },
                    {
                        "username": "AdityaBharat",
                        "content": "no its easy only , until they have some restriction on solving it .\\n you can convert num to str , convert str to int add with k , convert to str again , loop and put in array while converting to int and that\\'s the naive way to solve it , if this was not allowed then it is a medium problem\\nhere is naive sol;\\n        s = \\'\\'\\n        for i in num:\\n            s+=str(i)\\n        a =(int(s)) + k \\n        a = str(a)\\n        z = [int(i) for i in a]\\n        return z \\n"
                    },
                    {
                        "username": "BhushanBK",
                        "content": "Testcase fail at [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] why?\\npublic List addToArrayForm(int[] num, int k) {\\n        List ans=new ArrayList<Long>();\\n        long n=num[0];\\n        for(int i=1;i<num.length;i++){\\n            n=n*10+num[i];\\n        } n=n+k;\\n        while(n!=0){\\n            ans.add(n%10);\\n            n/=10;\\n        }\\n        for (int i = 0, j = ans.size() - 1; i < j; i++){\\n            ans.add(i, ans.remove(j));\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "andresestrella",
                        "content": "number is too large to store on variable"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "SOMA283",
                        "content": "the storage limit of n exceeds 2^31"
                    }
                ]
            },
            {
                "id": 1802166,
                "content": [
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "This problem seems pathetic- long type value is also out of bound. somehow manage to get in long type. 90 cases passed now value is too large to handled by long variable."
                    },
                    {
                        "username": "jfsengineer",
                        "content": "[@shrusky](/shrusky) So now you have to think about how to do it without adding it together all at once.   How did you learn to add in gradeschool?"
                    },
                    {
                        "username": "shrusky",
                        "content": "Same case with me"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "Can anyone explain why this approach is not working ->\\n\\n class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int nums = 0;\\n        for(int i=0;i<num.length;i++){\\n            nums = nums*10+num[i];\\n        }\\n        int res = nums+k;\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        while(res!=0){\\n            int temp = res%10;\\n            result.add(temp);\\n            res = res/10;\\n        }\\n        Collections.reverse(result);\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Praveenkumar_kasipanthula",
                        "content": "declaration of array is wrong\\nList<Integer> result = new ArrayList<Integer>();"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Mightbe: res //= 10 ??"
                    },
                    {
                        "username": "popupro",
                        "content": "[@anirudhkulkarni9094](/anirudhkulkarni9094) I already solved it, so I don\\'t want to spoil the entire solution, but what if you add the number to the array by separating k using the % operator, and adding numbers to the array using insert?"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "[@popupro](/popupro)  how about we convert the whole number into a double and then to array list ?"
                    },
                    {
                        "username": "popupro",
                        "content": "The problem is that the int limit is at like 10 digits\\n\\nBut they can easily give you a number that\\'s way larger, for example something like\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]\\n\\nNo integer can hold a number of this size"
                    },
                    {
                        "username": "nehawadhwa378",
                        "content": "the same problem arises with me but not able to find the answer "
                    },
                    {
                        "username": "n761z",
                        "content": "90/152 | Signed integer overflow even after long long | Need Help\\n\\nHere\\'s the code...\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        long long sum=0;\\n        vector<int> ans;\\n        for(long long i=0; i<num.size(); i++){\\n           sum = (sum*10) + num[i];\\n       }\\n        long long temp = sum+k;\\n        while(temp>0){\\n            long long rem = temp%10;\\n            ans.push_back(rem);\\n            temp = temp/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "mohitstark",
                        "content": "rahne de bhai"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "If you are thinking of converting into int and then adding and again converting to vector, sorry !! see the constraints, they are 10^4 length. So think of adding k from last index of num array."
                    },
                    {
                        "username": "PuneetamTewari",
                        "content": "[@me-oniichan](/me-oniichan) Pro-Gamer Move right here"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "*switches to python*"
                    },
                    {
                        "username": "dtsiki",
                        "content": "I was today years old when knowledge of JavaScript\\'s data types was finally useful to me"
                    },
                    {
                        "username": "aditibhagat23",
                        "content": "Can somebody help....getting wrong answer only for this test case\\nnum=[9,9,9,9,9,9,9,9,9,9]\\nk =1\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       int place=1;\\n       int sum=0;\\n       for(int i=num.length-1;i>=0;i--){\\n           sum+=place*num[i];\\n           place*=10;\\n       } \\n        sum+=k;\\n        ArrayList<Integer>arr=new ArrayList<>();\\n        while(sum>0){\\n            arr.add(sum%10);\\n            sum/=10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "a int variable cant store 1000000000 so maybe coz of this it is throwing error"
                    },
                    {
                        "username": "mostafijurj",
                        "content": "one of critical problem.  "
                    },
                    {
                        "username": "harsha6278",
                        "content": "this test case failed\\nnum =[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nanyone know why?\\n\\nvar addToArrayForm = function(num, k) {\\n    const temp=Number(num.join(\\'\\'));\\n    return (temp+k).toString().split(\\'\\');\\n    };"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "Try to wrap your temp into BigInt()\nBut in this case we don't need use Number, and we also need to transform k into BigInt:\n\nconst temp = BigInt(num.join('')) + BigInt(k)\nreturn temp.toString().split('')"
                    },
                    {
                        "username": "MohamedMF2",
                        "content": "this test case [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] wont work on all languages ,\\nfor e.g javascript has limits on these large numbers "
                    },
                    {
                        "username": "RhaskiaGameDev",
                        "content": "I think it\\'s meant so that you have to avoid converting num into an actual integer"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "You can try to use BigInt in javascript"
                    },
                    {
                        "username": "mdjordhan",
                        "content": "After [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] this test case\\nfinally I give up"
                    },
                    {
                        "username": "murphy8486",
                        "content": "[@shrusky](/shrusky) This input for num is outside the given constraints of the problem itself. This test case is out of bounds of the original problem how did this make it into the question is beyond me."
                    },
                    {
                        "username": "shrusky",
                        "content": "I have spend 3+ hours, and I too give up. I have tried whatever I could."
                    }
                ]
            },
            {
                "id": 1801938,
                "content": [
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "This problem seems pathetic- long type value is also out of bound. somehow manage to get in long type. 90 cases passed now value is too large to handled by long variable."
                    },
                    {
                        "username": "jfsengineer",
                        "content": "[@shrusky](/shrusky) So now you have to think about how to do it without adding it together all at once.   How did you learn to add in gradeschool?"
                    },
                    {
                        "username": "shrusky",
                        "content": "Same case with me"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "Can anyone explain why this approach is not working ->\\n\\n class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int nums = 0;\\n        for(int i=0;i<num.length;i++){\\n            nums = nums*10+num[i];\\n        }\\n        int res = nums+k;\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        while(res!=0){\\n            int temp = res%10;\\n            result.add(temp);\\n            res = res/10;\\n        }\\n        Collections.reverse(result);\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Praveenkumar_kasipanthula",
                        "content": "declaration of array is wrong\\nList<Integer> result = new ArrayList<Integer>();"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Mightbe: res //= 10 ??"
                    },
                    {
                        "username": "popupro",
                        "content": "[@anirudhkulkarni9094](/anirudhkulkarni9094) I already solved it, so I don\\'t want to spoil the entire solution, but what if you add the number to the array by separating k using the % operator, and adding numbers to the array using insert?"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "[@popupro](/popupro)  how about we convert the whole number into a double and then to array list ?"
                    },
                    {
                        "username": "popupro",
                        "content": "The problem is that the int limit is at like 10 digits\\n\\nBut they can easily give you a number that\\'s way larger, for example something like\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]\\n\\nNo integer can hold a number of this size"
                    },
                    {
                        "username": "nehawadhwa378",
                        "content": "the same problem arises with me but not able to find the answer "
                    },
                    {
                        "username": "n761z",
                        "content": "90/152 | Signed integer overflow even after long long | Need Help\\n\\nHere\\'s the code...\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        long long sum=0;\\n        vector<int> ans;\\n        for(long long i=0; i<num.size(); i++){\\n           sum = (sum*10) + num[i];\\n       }\\n        long long temp = sum+k;\\n        while(temp>0){\\n            long long rem = temp%10;\\n            ans.push_back(rem);\\n            temp = temp/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "mohitstark",
                        "content": "rahne de bhai"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "If you are thinking of converting into int and then adding and again converting to vector, sorry !! see the constraints, they are 10^4 length. So think of adding k from last index of num array."
                    },
                    {
                        "username": "PuneetamTewari",
                        "content": "[@me-oniichan](/me-oniichan) Pro-Gamer Move right here"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "*switches to python*"
                    },
                    {
                        "username": "dtsiki",
                        "content": "I was today years old when knowledge of JavaScript\\'s data types was finally useful to me"
                    },
                    {
                        "username": "aditibhagat23",
                        "content": "Can somebody help....getting wrong answer only for this test case\\nnum=[9,9,9,9,9,9,9,9,9,9]\\nk =1\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       int place=1;\\n       int sum=0;\\n       for(int i=num.length-1;i>=0;i--){\\n           sum+=place*num[i];\\n           place*=10;\\n       } \\n        sum+=k;\\n        ArrayList<Integer>arr=new ArrayList<>();\\n        while(sum>0){\\n            arr.add(sum%10);\\n            sum/=10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "a int variable cant store 1000000000 so maybe coz of this it is throwing error"
                    },
                    {
                        "username": "mostafijurj",
                        "content": "one of critical problem.  "
                    },
                    {
                        "username": "harsha6278",
                        "content": "this test case failed\\nnum =[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nanyone know why?\\n\\nvar addToArrayForm = function(num, k) {\\n    const temp=Number(num.join(\\'\\'));\\n    return (temp+k).toString().split(\\'\\');\\n    };"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "Try to wrap your temp into BigInt()\nBut in this case we don't need use Number, and we also need to transform k into BigInt:\n\nconst temp = BigInt(num.join('')) + BigInt(k)\nreturn temp.toString().split('')"
                    },
                    {
                        "username": "MohamedMF2",
                        "content": "this test case [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] wont work on all languages ,\\nfor e.g javascript has limits on these large numbers "
                    },
                    {
                        "username": "RhaskiaGameDev",
                        "content": "I think it\\'s meant so that you have to avoid converting num into an actual integer"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "You can try to use BigInt in javascript"
                    },
                    {
                        "username": "mdjordhan",
                        "content": "After [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] this test case\\nfinally I give up"
                    },
                    {
                        "username": "murphy8486",
                        "content": "[@shrusky](/shrusky) This input for num is outside the given constraints of the problem itself. This test case is out of bounds of the original problem how did this make it into the question is beyond me."
                    },
                    {
                        "username": "shrusky",
                        "content": "I have spend 3+ hours, and I too give up. I have tried whatever I could."
                    }
                ]
            },
            {
                "id": 1801783,
                "content": [
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "This problem seems pathetic- long type value is also out of bound. somehow manage to get in long type. 90 cases passed now value is too large to handled by long variable."
                    },
                    {
                        "username": "jfsengineer",
                        "content": "[@shrusky](/shrusky) So now you have to think about how to do it without adding it together all at once.   How did you learn to add in gradeschool?"
                    },
                    {
                        "username": "shrusky",
                        "content": "Same case with me"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "Can anyone explain why this approach is not working ->\\n\\n class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int nums = 0;\\n        for(int i=0;i<num.length;i++){\\n            nums = nums*10+num[i];\\n        }\\n        int res = nums+k;\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        while(res!=0){\\n            int temp = res%10;\\n            result.add(temp);\\n            res = res/10;\\n        }\\n        Collections.reverse(result);\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Praveenkumar_kasipanthula",
                        "content": "declaration of array is wrong\\nList<Integer> result = new ArrayList<Integer>();"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Mightbe: res //= 10 ??"
                    },
                    {
                        "username": "popupro",
                        "content": "[@anirudhkulkarni9094](/anirudhkulkarni9094) I already solved it, so I don\\'t want to spoil the entire solution, but what if you add the number to the array by separating k using the % operator, and adding numbers to the array using insert?"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "[@popupro](/popupro)  how about we convert the whole number into a double and then to array list ?"
                    },
                    {
                        "username": "popupro",
                        "content": "The problem is that the int limit is at like 10 digits\\n\\nBut they can easily give you a number that\\'s way larger, for example something like\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]\\n\\nNo integer can hold a number of this size"
                    },
                    {
                        "username": "nehawadhwa378",
                        "content": "the same problem arises with me but not able to find the answer "
                    },
                    {
                        "username": "n761z",
                        "content": "90/152 | Signed integer overflow even after long long | Need Help\\n\\nHere\\'s the code...\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        long long sum=0;\\n        vector<int> ans;\\n        for(long long i=0; i<num.size(); i++){\\n           sum = (sum*10) + num[i];\\n       }\\n        long long temp = sum+k;\\n        while(temp>0){\\n            long long rem = temp%10;\\n            ans.push_back(rem);\\n            temp = temp/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "mohitstark",
                        "content": "rahne de bhai"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "If you are thinking of converting into int and then adding and again converting to vector, sorry !! see the constraints, they are 10^4 length. So think of adding k from last index of num array."
                    },
                    {
                        "username": "PuneetamTewari",
                        "content": "[@me-oniichan](/me-oniichan) Pro-Gamer Move right here"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "*switches to python*"
                    },
                    {
                        "username": "dtsiki",
                        "content": "I was today years old when knowledge of JavaScript\\'s data types was finally useful to me"
                    },
                    {
                        "username": "aditibhagat23",
                        "content": "Can somebody help....getting wrong answer only for this test case\\nnum=[9,9,9,9,9,9,9,9,9,9]\\nk =1\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       int place=1;\\n       int sum=0;\\n       for(int i=num.length-1;i>=0;i--){\\n           sum+=place*num[i];\\n           place*=10;\\n       } \\n        sum+=k;\\n        ArrayList<Integer>arr=new ArrayList<>();\\n        while(sum>0){\\n            arr.add(sum%10);\\n            sum/=10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "a int variable cant store 1000000000 so maybe coz of this it is throwing error"
                    },
                    {
                        "username": "mostafijurj",
                        "content": "one of critical problem.  "
                    },
                    {
                        "username": "harsha6278",
                        "content": "this test case failed\\nnum =[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nanyone know why?\\n\\nvar addToArrayForm = function(num, k) {\\n    const temp=Number(num.join(\\'\\'));\\n    return (temp+k).toString().split(\\'\\');\\n    };"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "Try to wrap your temp into BigInt()\nBut in this case we don't need use Number, and we also need to transform k into BigInt:\n\nconst temp = BigInt(num.join('')) + BigInt(k)\nreturn temp.toString().split('')"
                    },
                    {
                        "username": "MohamedMF2",
                        "content": "this test case [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] wont work on all languages ,\\nfor e.g javascript has limits on these large numbers "
                    },
                    {
                        "username": "RhaskiaGameDev",
                        "content": "I think it\\'s meant so that you have to avoid converting num into an actual integer"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "You can try to use BigInt in javascript"
                    },
                    {
                        "username": "mdjordhan",
                        "content": "After [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] this test case\\nfinally I give up"
                    },
                    {
                        "username": "murphy8486",
                        "content": "[@shrusky](/shrusky) This input for num is outside the given constraints of the problem itself. This test case is out of bounds of the original problem how did this make it into the question is beyond me."
                    },
                    {
                        "username": "shrusky",
                        "content": "I have spend 3+ hours, and I too give up. I have tried whatever I could."
                    }
                ]
            },
            {
                "id": 1801445,
                "content": [
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "This problem seems pathetic- long type value is also out of bound. somehow manage to get in long type. 90 cases passed now value is too large to handled by long variable."
                    },
                    {
                        "username": "jfsengineer",
                        "content": "[@shrusky](/shrusky) So now you have to think about how to do it without adding it together all at once.   How did you learn to add in gradeschool?"
                    },
                    {
                        "username": "shrusky",
                        "content": "Same case with me"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "Can anyone explain why this approach is not working ->\\n\\n class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int nums = 0;\\n        for(int i=0;i<num.length;i++){\\n            nums = nums*10+num[i];\\n        }\\n        int res = nums+k;\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        while(res!=0){\\n            int temp = res%10;\\n            result.add(temp);\\n            res = res/10;\\n        }\\n        Collections.reverse(result);\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Praveenkumar_kasipanthula",
                        "content": "declaration of array is wrong\\nList<Integer> result = new ArrayList<Integer>();"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Mightbe: res //= 10 ??"
                    },
                    {
                        "username": "popupro",
                        "content": "[@anirudhkulkarni9094](/anirudhkulkarni9094) I already solved it, so I don\\'t want to spoil the entire solution, but what if you add the number to the array by separating k using the % operator, and adding numbers to the array using insert?"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "[@popupro](/popupro)  how about we convert the whole number into a double and then to array list ?"
                    },
                    {
                        "username": "popupro",
                        "content": "The problem is that the int limit is at like 10 digits\\n\\nBut they can easily give you a number that\\'s way larger, for example something like\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]\\n\\nNo integer can hold a number of this size"
                    },
                    {
                        "username": "nehawadhwa378",
                        "content": "the same problem arises with me but not able to find the answer "
                    },
                    {
                        "username": "n761z",
                        "content": "90/152 | Signed integer overflow even after long long | Need Help\\n\\nHere\\'s the code...\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        long long sum=0;\\n        vector<int> ans;\\n        for(long long i=0; i<num.size(); i++){\\n           sum = (sum*10) + num[i];\\n       }\\n        long long temp = sum+k;\\n        while(temp>0){\\n            long long rem = temp%10;\\n            ans.push_back(rem);\\n            temp = temp/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "mohitstark",
                        "content": "rahne de bhai"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "If you are thinking of converting into int and then adding and again converting to vector, sorry !! see the constraints, they are 10^4 length. So think of adding k from last index of num array."
                    },
                    {
                        "username": "PuneetamTewari",
                        "content": "[@me-oniichan](/me-oniichan) Pro-Gamer Move right here"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "*switches to python*"
                    },
                    {
                        "username": "dtsiki",
                        "content": "I was today years old when knowledge of JavaScript\\'s data types was finally useful to me"
                    },
                    {
                        "username": "aditibhagat23",
                        "content": "Can somebody help....getting wrong answer only for this test case\\nnum=[9,9,9,9,9,9,9,9,9,9]\\nk =1\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       int place=1;\\n       int sum=0;\\n       for(int i=num.length-1;i>=0;i--){\\n           sum+=place*num[i];\\n           place*=10;\\n       } \\n        sum+=k;\\n        ArrayList<Integer>arr=new ArrayList<>();\\n        while(sum>0){\\n            arr.add(sum%10);\\n            sum/=10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "a int variable cant store 1000000000 so maybe coz of this it is throwing error"
                    },
                    {
                        "username": "mostafijurj",
                        "content": "one of critical problem.  "
                    },
                    {
                        "username": "harsha6278",
                        "content": "this test case failed\\nnum =[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nanyone know why?\\n\\nvar addToArrayForm = function(num, k) {\\n    const temp=Number(num.join(\\'\\'));\\n    return (temp+k).toString().split(\\'\\');\\n    };"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "Try to wrap your temp into BigInt()\nBut in this case we don't need use Number, and we also need to transform k into BigInt:\n\nconst temp = BigInt(num.join('')) + BigInt(k)\nreturn temp.toString().split('')"
                    },
                    {
                        "username": "MohamedMF2",
                        "content": "this test case [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] wont work on all languages ,\\nfor e.g javascript has limits on these large numbers "
                    },
                    {
                        "username": "RhaskiaGameDev",
                        "content": "I think it\\'s meant so that you have to avoid converting num into an actual integer"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "You can try to use BigInt in javascript"
                    },
                    {
                        "username": "mdjordhan",
                        "content": "After [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] this test case\\nfinally I give up"
                    },
                    {
                        "username": "murphy8486",
                        "content": "[@shrusky](/shrusky) This input for num is outside the given constraints of the problem itself. This test case is out of bounds of the original problem how did this make it into the question is beyond me."
                    },
                    {
                        "username": "shrusky",
                        "content": "I have spend 3+ hours, and I too give up. I have tried whatever I could."
                    }
                ]
            },
            {
                "id": 1802446,
                "content": [
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "This problem seems pathetic- long type value is also out of bound. somehow manage to get in long type. 90 cases passed now value is too large to handled by long variable."
                    },
                    {
                        "username": "jfsengineer",
                        "content": "[@shrusky](/shrusky) So now you have to think about how to do it without adding it together all at once.   How did you learn to add in gradeschool?"
                    },
                    {
                        "username": "shrusky",
                        "content": "Same case with me"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "Can anyone explain why this approach is not working ->\\n\\n class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int nums = 0;\\n        for(int i=0;i<num.length;i++){\\n            nums = nums*10+num[i];\\n        }\\n        int res = nums+k;\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        while(res!=0){\\n            int temp = res%10;\\n            result.add(temp);\\n            res = res/10;\\n        }\\n        Collections.reverse(result);\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Praveenkumar_kasipanthula",
                        "content": "declaration of array is wrong\\nList<Integer> result = new ArrayList<Integer>();"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Mightbe: res //= 10 ??"
                    },
                    {
                        "username": "popupro",
                        "content": "[@anirudhkulkarni9094](/anirudhkulkarni9094) I already solved it, so I don\\'t want to spoil the entire solution, but what if you add the number to the array by separating k using the % operator, and adding numbers to the array using insert?"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "[@popupro](/popupro)  how about we convert the whole number into a double and then to array list ?"
                    },
                    {
                        "username": "popupro",
                        "content": "The problem is that the int limit is at like 10 digits\\n\\nBut they can easily give you a number that\\'s way larger, for example something like\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]\\n\\nNo integer can hold a number of this size"
                    },
                    {
                        "username": "nehawadhwa378",
                        "content": "the same problem arises with me but not able to find the answer "
                    },
                    {
                        "username": "n761z",
                        "content": "90/152 | Signed integer overflow even after long long | Need Help\\n\\nHere\\'s the code...\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        long long sum=0;\\n        vector<int> ans;\\n        for(long long i=0; i<num.size(); i++){\\n           sum = (sum*10) + num[i];\\n       }\\n        long long temp = sum+k;\\n        while(temp>0){\\n            long long rem = temp%10;\\n            ans.push_back(rem);\\n            temp = temp/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "mohitstark",
                        "content": "rahne de bhai"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "If you are thinking of converting into int and then adding and again converting to vector, sorry !! see the constraints, they are 10^4 length. So think of adding k from last index of num array."
                    },
                    {
                        "username": "PuneetamTewari",
                        "content": "[@me-oniichan](/me-oniichan) Pro-Gamer Move right here"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "*switches to python*"
                    },
                    {
                        "username": "dtsiki",
                        "content": "I was today years old when knowledge of JavaScript\\'s data types was finally useful to me"
                    },
                    {
                        "username": "aditibhagat23",
                        "content": "Can somebody help....getting wrong answer only for this test case\\nnum=[9,9,9,9,9,9,9,9,9,9]\\nk =1\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       int place=1;\\n       int sum=0;\\n       for(int i=num.length-1;i>=0;i--){\\n           sum+=place*num[i];\\n           place*=10;\\n       } \\n        sum+=k;\\n        ArrayList<Integer>arr=new ArrayList<>();\\n        while(sum>0){\\n            arr.add(sum%10);\\n            sum/=10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "a int variable cant store 1000000000 so maybe coz of this it is throwing error"
                    },
                    {
                        "username": "mostafijurj",
                        "content": "one of critical problem.  "
                    },
                    {
                        "username": "harsha6278",
                        "content": "this test case failed\\nnum =[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nanyone know why?\\n\\nvar addToArrayForm = function(num, k) {\\n    const temp=Number(num.join(\\'\\'));\\n    return (temp+k).toString().split(\\'\\');\\n    };"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "Try to wrap your temp into BigInt()\nBut in this case we don't need use Number, and we also need to transform k into BigInt:\n\nconst temp = BigInt(num.join('')) + BigInt(k)\nreturn temp.toString().split('')"
                    },
                    {
                        "username": "MohamedMF2",
                        "content": "this test case [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] wont work on all languages ,\\nfor e.g javascript has limits on these large numbers "
                    },
                    {
                        "username": "RhaskiaGameDev",
                        "content": "I think it\\'s meant so that you have to avoid converting num into an actual integer"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "You can try to use BigInt in javascript"
                    },
                    {
                        "username": "mdjordhan",
                        "content": "After [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] this test case\\nfinally I give up"
                    },
                    {
                        "username": "murphy8486",
                        "content": "[@shrusky](/shrusky) This input for num is outside the given constraints of the problem itself. This test case is out of bounds of the original problem how did this make it into the question is beyond me."
                    },
                    {
                        "username": "shrusky",
                        "content": "I have spend 3+ hours, and I too give up. I have tried whatever I could."
                    }
                ]
            },
            {
                "id": 1802303,
                "content": [
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "This problem seems pathetic- long type value is also out of bound. somehow manage to get in long type. 90 cases passed now value is too large to handled by long variable."
                    },
                    {
                        "username": "jfsengineer",
                        "content": "[@shrusky](/shrusky) So now you have to think about how to do it without adding it together all at once.   How did you learn to add in gradeschool?"
                    },
                    {
                        "username": "shrusky",
                        "content": "Same case with me"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "Can anyone explain why this approach is not working ->\\n\\n class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int nums = 0;\\n        for(int i=0;i<num.length;i++){\\n            nums = nums*10+num[i];\\n        }\\n        int res = nums+k;\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        while(res!=0){\\n            int temp = res%10;\\n            result.add(temp);\\n            res = res/10;\\n        }\\n        Collections.reverse(result);\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Praveenkumar_kasipanthula",
                        "content": "declaration of array is wrong\\nList<Integer> result = new ArrayList<Integer>();"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Mightbe: res //= 10 ??"
                    },
                    {
                        "username": "popupro",
                        "content": "[@anirudhkulkarni9094](/anirudhkulkarni9094) I already solved it, so I don\\'t want to spoil the entire solution, but what if you add the number to the array by separating k using the % operator, and adding numbers to the array using insert?"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "[@popupro](/popupro)  how about we convert the whole number into a double and then to array list ?"
                    },
                    {
                        "username": "popupro",
                        "content": "The problem is that the int limit is at like 10 digits\\n\\nBut they can easily give you a number that\\'s way larger, for example something like\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]\\n\\nNo integer can hold a number of this size"
                    },
                    {
                        "username": "nehawadhwa378",
                        "content": "the same problem arises with me but not able to find the answer "
                    },
                    {
                        "username": "n761z",
                        "content": "90/152 | Signed integer overflow even after long long | Need Help\\n\\nHere\\'s the code...\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        long long sum=0;\\n        vector<int> ans;\\n        for(long long i=0; i<num.size(); i++){\\n           sum = (sum*10) + num[i];\\n       }\\n        long long temp = sum+k;\\n        while(temp>0){\\n            long long rem = temp%10;\\n            ans.push_back(rem);\\n            temp = temp/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "mohitstark",
                        "content": "rahne de bhai"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "If you are thinking of converting into int and then adding and again converting to vector, sorry !! see the constraints, they are 10^4 length. So think of adding k from last index of num array."
                    },
                    {
                        "username": "PuneetamTewari",
                        "content": "[@me-oniichan](/me-oniichan) Pro-Gamer Move right here"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "*switches to python*"
                    },
                    {
                        "username": "dtsiki",
                        "content": "I was today years old when knowledge of JavaScript\\'s data types was finally useful to me"
                    },
                    {
                        "username": "aditibhagat23",
                        "content": "Can somebody help....getting wrong answer only for this test case\\nnum=[9,9,9,9,9,9,9,9,9,9]\\nk =1\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       int place=1;\\n       int sum=0;\\n       for(int i=num.length-1;i>=0;i--){\\n           sum+=place*num[i];\\n           place*=10;\\n       } \\n        sum+=k;\\n        ArrayList<Integer>arr=new ArrayList<>();\\n        while(sum>0){\\n            arr.add(sum%10);\\n            sum/=10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "a int variable cant store 1000000000 so maybe coz of this it is throwing error"
                    },
                    {
                        "username": "mostafijurj",
                        "content": "one of critical problem.  "
                    },
                    {
                        "username": "harsha6278",
                        "content": "this test case failed\\nnum =[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nanyone know why?\\n\\nvar addToArrayForm = function(num, k) {\\n    const temp=Number(num.join(\\'\\'));\\n    return (temp+k).toString().split(\\'\\');\\n    };"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "Try to wrap your temp into BigInt()\nBut in this case we don't need use Number, and we also need to transform k into BigInt:\n\nconst temp = BigInt(num.join('')) + BigInt(k)\nreturn temp.toString().split('')"
                    },
                    {
                        "username": "MohamedMF2",
                        "content": "this test case [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] wont work on all languages ,\\nfor e.g javascript has limits on these large numbers "
                    },
                    {
                        "username": "RhaskiaGameDev",
                        "content": "I think it\\'s meant so that you have to avoid converting num into an actual integer"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "You can try to use BigInt in javascript"
                    },
                    {
                        "username": "mdjordhan",
                        "content": "After [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] this test case\\nfinally I give up"
                    },
                    {
                        "username": "murphy8486",
                        "content": "[@shrusky](/shrusky) This input for num is outside the given constraints of the problem itself. This test case is out of bounds of the original problem how did this make it into the question is beyond me."
                    },
                    {
                        "username": "shrusky",
                        "content": "I have spend 3+ hours, and I too give up. I have tried whatever I could."
                    }
                ]
            },
            {
                "id": 1802241,
                "content": [
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "This problem seems pathetic- long type value is also out of bound. somehow manage to get in long type. 90 cases passed now value is too large to handled by long variable."
                    },
                    {
                        "username": "jfsengineer",
                        "content": "[@shrusky](/shrusky) So now you have to think about how to do it without adding it together all at once.   How did you learn to add in gradeschool?"
                    },
                    {
                        "username": "shrusky",
                        "content": "Same case with me"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "Can anyone explain why this approach is not working ->\\n\\n class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int nums = 0;\\n        for(int i=0;i<num.length;i++){\\n            nums = nums*10+num[i];\\n        }\\n        int res = nums+k;\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        while(res!=0){\\n            int temp = res%10;\\n            result.add(temp);\\n            res = res/10;\\n        }\\n        Collections.reverse(result);\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Praveenkumar_kasipanthula",
                        "content": "declaration of array is wrong\\nList<Integer> result = new ArrayList<Integer>();"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Mightbe: res //= 10 ??"
                    },
                    {
                        "username": "popupro",
                        "content": "[@anirudhkulkarni9094](/anirudhkulkarni9094) I already solved it, so I don\\'t want to spoil the entire solution, but what if you add the number to the array by separating k using the % operator, and adding numbers to the array using insert?"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "[@popupro](/popupro)  how about we convert the whole number into a double and then to array list ?"
                    },
                    {
                        "username": "popupro",
                        "content": "The problem is that the int limit is at like 10 digits\\n\\nBut they can easily give you a number that\\'s way larger, for example something like\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]\\n\\nNo integer can hold a number of this size"
                    },
                    {
                        "username": "nehawadhwa378",
                        "content": "the same problem arises with me but not able to find the answer "
                    },
                    {
                        "username": "n761z",
                        "content": "90/152 | Signed integer overflow even after long long | Need Help\\n\\nHere\\'s the code...\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        long long sum=0;\\n        vector<int> ans;\\n        for(long long i=0; i<num.size(); i++){\\n           sum = (sum*10) + num[i];\\n       }\\n        long long temp = sum+k;\\n        while(temp>0){\\n            long long rem = temp%10;\\n            ans.push_back(rem);\\n            temp = temp/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "mohitstark",
                        "content": "rahne de bhai"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "If you are thinking of converting into int and then adding and again converting to vector, sorry !! see the constraints, they are 10^4 length. So think of adding k from last index of num array."
                    },
                    {
                        "username": "PuneetamTewari",
                        "content": "[@me-oniichan](/me-oniichan) Pro-Gamer Move right here"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "*switches to python*"
                    },
                    {
                        "username": "dtsiki",
                        "content": "I was today years old when knowledge of JavaScript\\'s data types was finally useful to me"
                    },
                    {
                        "username": "aditibhagat23",
                        "content": "Can somebody help....getting wrong answer only for this test case\\nnum=[9,9,9,9,9,9,9,9,9,9]\\nk =1\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       int place=1;\\n       int sum=0;\\n       for(int i=num.length-1;i>=0;i--){\\n           sum+=place*num[i];\\n           place*=10;\\n       } \\n        sum+=k;\\n        ArrayList<Integer>arr=new ArrayList<>();\\n        while(sum>0){\\n            arr.add(sum%10);\\n            sum/=10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "a int variable cant store 1000000000 so maybe coz of this it is throwing error"
                    },
                    {
                        "username": "mostafijurj",
                        "content": "one of critical problem.  "
                    },
                    {
                        "username": "harsha6278",
                        "content": "this test case failed\\nnum =[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nanyone know why?\\n\\nvar addToArrayForm = function(num, k) {\\n    const temp=Number(num.join(\\'\\'));\\n    return (temp+k).toString().split(\\'\\');\\n    };"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "Try to wrap your temp into BigInt()\nBut in this case we don't need use Number, and we also need to transform k into BigInt:\n\nconst temp = BigInt(num.join('')) + BigInt(k)\nreturn temp.toString().split('')"
                    },
                    {
                        "username": "MohamedMF2",
                        "content": "this test case [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] wont work on all languages ,\\nfor e.g javascript has limits on these large numbers "
                    },
                    {
                        "username": "RhaskiaGameDev",
                        "content": "I think it\\'s meant so that you have to avoid converting num into an actual integer"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "You can try to use BigInt in javascript"
                    },
                    {
                        "username": "mdjordhan",
                        "content": "After [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] this test case\\nfinally I give up"
                    },
                    {
                        "username": "murphy8486",
                        "content": "[@shrusky](/shrusky) This input for num is outside the given constraints of the problem itself. This test case is out of bounds of the original problem how did this make it into the question is beyond me."
                    },
                    {
                        "username": "shrusky",
                        "content": "I have spend 3+ hours, and I too give up. I have tried whatever I could."
                    }
                ]
            },
            {
                "id": 1802069,
                "content": [
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "This problem seems pathetic- long type value is also out of bound. somehow manage to get in long type. 90 cases passed now value is too large to handled by long variable."
                    },
                    {
                        "username": "jfsengineer",
                        "content": "[@shrusky](/shrusky) So now you have to think about how to do it without adding it together all at once.   How did you learn to add in gradeschool?"
                    },
                    {
                        "username": "shrusky",
                        "content": "Same case with me"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "Can anyone explain why this approach is not working ->\\n\\n class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int nums = 0;\\n        for(int i=0;i<num.length;i++){\\n            nums = nums*10+num[i];\\n        }\\n        int res = nums+k;\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        while(res!=0){\\n            int temp = res%10;\\n            result.add(temp);\\n            res = res/10;\\n        }\\n        Collections.reverse(result);\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Praveenkumar_kasipanthula",
                        "content": "declaration of array is wrong\\nList<Integer> result = new ArrayList<Integer>();"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Mightbe: res //= 10 ??"
                    },
                    {
                        "username": "popupro",
                        "content": "[@anirudhkulkarni9094](/anirudhkulkarni9094) I already solved it, so I don\\'t want to spoil the entire solution, but what if you add the number to the array by separating k using the % operator, and adding numbers to the array using insert?"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "[@popupro](/popupro)  how about we convert the whole number into a double and then to array list ?"
                    },
                    {
                        "username": "popupro",
                        "content": "The problem is that the int limit is at like 10 digits\\n\\nBut they can easily give you a number that\\'s way larger, for example something like\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]\\n\\nNo integer can hold a number of this size"
                    },
                    {
                        "username": "nehawadhwa378",
                        "content": "the same problem arises with me but not able to find the answer "
                    },
                    {
                        "username": "n761z",
                        "content": "90/152 | Signed integer overflow even after long long | Need Help\\n\\nHere\\'s the code...\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        long long sum=0;\\n        vector<int> ans;\\n        for(long long i=0; i<num.size(); i++){\\n           sum = (sum*10) + num[i];\\n       }\\n        long long temp = sum+k;\\n        while(temp>0){\\n            long long rem = temp%10;\\n            ans.push_back(rem);\\n            temp = temp/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "mohitstark",
                        "content": "rahne de bhai"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "If you are thinking of converting into int and then adding and again converting to vector, sorry !! see the constraints, they are 10^4 length. So think of adding k from last index of num array."
                    },
                    {
                        "username": "PuneetamTewari",
                        "content": "[@me-oniichan](/me-oniichan) Pro-Gamer Move right here"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "*switches to python*"
                    },
                    {
                        "username": "dtsiki",
                        "content": "I was today years old when knowledge of JavaScript\\'s data types was finally useful to me"
                    },
                    {
                        "username": "aditibhagat23",
                        "content": "Can somebody help....getting wrong answer only for this test case\\nnum=[9,9,9,9,9,9,9,9,9,9]\\nk =1\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       int place=1;\\n       int sum=0;\\n       for(int i=num.length-1;i>=0;i--){\\n           sum+=place*num[i];\\n           place*=10;\\n       } \\n        sum+=k;\\n        ArrayList<Integer>arr=new ArrayList<>();\\n        while(sum>0){\\n            arr.add(sum%10);\\n            sum/=10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "a int variable cant store 1000000000 so maybe coz of this it is throwing error"
                    },
                    {
                        "username": "mostafijurj",
                        "content": "one of critical problem.  "
                    },
                    {
                        "username": "harsha6278",
                        "content": "this test case failed\\nnum =[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nanyone know why?\\n\\nvar addToArrayForm = function(num, k) {\\n    const temp=Number(num.join(\\'\\'));\\n    return (temp+k).toString().split(\\'\\');\\n    };"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "Try to wrap your temp into BigInt()\nBut in this case we don't need use Number, and we also need to transform k into BigInt:\n\nconst temp = BigInt(num.join('')) + BigInt(k)\nreturn temp.toString().split('')"
                    },
                    {
                        "username": "MohamedMF2",
                        "content": "this test case [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] wont work on all languages ,\\nfor e.g javascript has limits on these large numbers "
                    },
                    {
                        "username": "RhaskiaGameDev",
                        "content": "I think it\\'s meant so that you have to avoid converting num into an actual integer"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "You can try to use BigInt in javascript"
                    },
                    {
                        "username": "mdjordhan",
                        "content": "After [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] this test case\\nfinally I give up"
                    },
                    {
                        "username": "murphy8486",
                        "content": "[@shrusky](/shrusky) This input for num is outside the given constraints of the problem itself. This test case is out of bounds of the original problem how did this make it into the question is beyond me."
                    },
                    {
                        "username": "shrusky",
                        "content": "I have spend 3+ hours, and I too give up. I have tried whatever I could."
                    }
                ]
            },
            {
                "id": 1802059,
                "content": [
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "This problem seems pathetic- long type value is also out of bound. somehow manage to get in long type. 90 cases passed now value is too large to handled by long variable."
                    },
                    {
                        "username": "jfsengineer",
                        "content": "[@shrusky](/shrusky) So now you have to think about how to do it without adding it together all at once.   How did you learn to add in gradeschool?"
                    },
                    {
                        "username": "shrusky",
                        "content": "Same case with me"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "Can anyone explain why this approach is not working ->\\n\\n class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int nums = 0;\\n        for(int i=0;i<num.length;i++){\\n            nums = nums*10+num[i];\\n        }\\n        int res = nums+k;\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        while(res!=0){\\n            int temp = res%10;\\n            result.add(temp);\\n            res = res/10;\\n        }\\n        Collections.reverse(result);\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Praveenkumar_kasipanthula",
                        "content": "declaration of array is wrong\\nList<Integer> result = new ArrayList<Integer>();"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Mightbe: res //= 10 ??"
                    },
                    {
                        "username": "popupro",
                        "content": "[@anirudhkulkarni9094](/anirudhkulkarni9094) I already solved it, so I don\\'t want to spoil the entire solution, but what if you add the number to the array by separating k using the % operator, and adding numbers to the array using insert?"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "[@popupro](/popupro)  how about we convert the whole number into a double and then to array list ?"
                    },
                    {
                        "username": "popupro",
                        "content": "The problem is that the int limit is at like 10 digits\\n\\nBut they can easily give you a number that\\'s way larger, for example something like\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]\\n\\nNo integer can hold a number of this size"
                    },
                    {
                        "username": "nehawadhwa378",
                        "content": "the same problem arises with me but not able to find the answer "
                    },
                    {
                        "username": "n761z",
                        "content": "90/152 | Signed integer overflow even after long long | Need Help\\n\\nHere\\'s the code...\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        long long sum=0;\\n        vector<int> ans;\\n        for(long long i=0; i<num.size(); i++){\\n           sum = (sum*10) + num[i];\\n       }\\n        long long temp = sum+k;\\n        while(temp>0){\\n            long long rem = temp%10;\\n            ans.push_back(rem);\\n            temp = temp/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "mohitstark",
                        "content": "rahne de bhai"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "If you are thinking of converting into int and then adding and again converting to vector, sorry !! see the constraints, they are 10^4 length. So think of adding k from last index of num array."
                    },
                    {
                        "username": "PuneetamTewari",
                        "content": "[@me-oniichan](/me-oniichan) Pro-Gamer Move right here"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "*switches to python*"
                    },
                    {
                        "username": "dtsiki",
                        "content": "I was today years old when knowledge of JavaScript\\'s data types was finally useful to me"
                    },
                    {
                        "username": "aditibhagat23",
                        "content": "Can somebody help....getting wrong answer only for this test case\\nnum=[9,9,9,9,9,9,9,9,9,9]\\nk =1\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       int place=1;\\n       int sum=0;\\n       for(int i=num.length-1;i>=0;i--){\\n           sum+=place*num[i];\\n           place*=10;\\n       } \\n        sum+=k;\\n        ArrayList<Integer>arr=new ArrayList<>();\\n        while(sum>0){\\n            arr.add(sum%10);\\n            sum/=10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "a int variable cant store 1000000000 so maybe coz of this it is throwing error"
                    },
                    {
                        "username": "mostafijurj",
                        "content": "one of critical problem.  "
                    },
                    {
                        "username": "harsha6278",
                        "content": "this test case failed\\nnum =[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nanyone know why?\\n\\nvar addToArrayForm = function(num, k) {\\n    const temp=Number(num.join(\\'\\'));\\n    return (temp+k).toString().split(\\'\\');\\n    };"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "Try to wrap your temp into BigInt()\nBut in this case we don't need use Number, and we also need to transform k into BigInt:\n\nconst temp = BigInt(num.join('')) + BigInt(k)\nreturn temp.toString().split('')"
                    },
                    {
                        "username": "MohamedMF2",
                        "content": "this test case [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] wont work on all languages ,\\nfor e.g javascript has limits on these large numbers "
                    },
                    {
                        "username": "RhaskiaGameDev",
                        "content": "I think it\\'s meant so that you have to avoid converting num into an actual integer"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "You can try to use BigInt in javascript"
                    },
                    {
                        "username": "mdjordhan",
                        "content": "After [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] this test case\\nfinally I give up"
                    },
                    {
                        "username": "murphy8486",
                        "content": "[@shrusky](/shrusky) This input for num is outside the given constraints of the problem itself. This test case is out of bounds of the original problem how did this make it into the question is beyond me."
                    },
                    {
                        "username": "shrusky",
                        "content": "I have spend 3+ hours, and I too give up. I have tried whatever I could."
                    }
                ]
            },
            {
                "id": 1802000,
                "content": [
                    {
                        "username": "Saurabhkumar_sde",
                        "content": "This problem seems pathetic- long type value is also out of bound. somehow manage to get in long type. 90 cases passed now value is too large to handled by long variable."
                    },
                    {
                        "username": "jfsengineer",
                        "content": "[@shrusky](/shrusky) So now you have to think about how to do it without adding it together all at once.   How did you learn to add in gradeschool?"
                    },
                    {
                        "username": "shrusky",
                        "content": "Same case with me"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "Can anyone explain why this approach is not working ->\\n\\n class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        int nums = 0;\\n        for(int i=0;i<num.length;i++){\\n            nums = nums*10+num[i];\\n        }\\n        int res = nums+k;\\n        ArrayList<Integer> result = new ArrayList<Integer>();\\n        while(res!=0){\\n            int temp = res%10;\\n            result.add(temp);\\n            res = res/10;\\n        }\\n        Collections.reverse(result);\\n        return result;\\n    }\\n}"
                    },
                    {
                        "username": "Praveenkumar_kasipanthula",
                        "content": "declaration of array is wrong\\nList<Integer> result = new ArrayList<Integer>();"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Mightbe: res //= 10 ??"
                    },
                    {
                        "username": "popupro",
                        "content": "[@anirudhkulkarni9094](/anirudhkulkarni9094) I already solved it, so I don\\'t want to spoil the entire solution, but what if you add the number to the array by separating k using the % operator, and adding numbers to the array using insert?"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "[@popupro](/popupro)  how about we convert the whole number into a double and then to array list ?"
                    },
                    {
                        "username": "popupro",
                        "content": "The problem is that the int limit is at like 10 digits\\n\\nBut they can easily give you a number that\\'s way larger, for example something like\\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 ,9]\\n\\nNo integer can hold a number of this size"
                    },
                    {
                        "username": "nehawadhwa378",
                        "content": "the same problem arises with me but not able to find the answer "
                    },
                    {
                        "username": "n761z",
                        "content": "90/152 | Signed integer overflow even after long long | Need Help\\n\\nHere\\'s the code...\\n\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        long long sum=0;\\n        vector<int> ans;\\n        for(long long i=0; i<num.size(); i++){\\n           sum = (sum*10) + num[i];\\n       }\\n        long long temp = sum+k;\\n        while(temp>0){\\n            long long rem = temp%10;\\n            ans.push_back(rem);\\n            temp = temp/10;\\n        }\\n        reverse(ans.begin(), ans.end());\\n        return ans;\\n    }\\n};\\n\\n"
                    },
                    {
                        "username": "Glory_Killer",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       LinkedList<Integer> list = new LinkedList<Integer>();\\n        \\n        int len = num.length - 1;\\n        \\n        while (len >= 0 || k != 0) {\\n            if (len >= 0) {\\n                k += num[len];\\n                len--;\\n            }\\n            list.addFirst(k % 10);\\n            k /= 10;\\n        }\\n        return list; \\n    }\\n}"
                    },
                    {
                        "username": "mohitstark",
                        "content": "rahne de bhai"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "If you are thinking of converting into int and then adding and again converting to vector, sorry !! see the constraints, they are 10^4 length. So think of adding k from last index of num array."
                    },
                    {
                        "username": "PuneetamTewari",
                        "content": "[@me-oniichan](/me-oniichan) Pro-Gamer Move right here"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "*switches to python*"
                    },
                    {
                        "username": "dtsiki",
                        "content": "I was today years old when knowledge of JavaScript\\'s data types was finally useful to me"
                    },
                    {
                        "username": "aditibhagat23",
                        "content": "Can somebody help....getting wrong answer only for this test case\\nnum=[9,9,9,9,9,9,9,9,9,9]\\nk =1\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       int place=1;\\n       int sum=0;\\n       for(int i=num.length-1;i>=0;i--){\\n           sum+=place*num[i];\\n           place*=10;\\n       } \\n        sum+=k;\\n        ArrayList<Integer>arr=new ArrayList<>();\\n        while(sum>0){\\n            arr.add(sum%10);\\n            sum/=10;\\n        }\\n        Collections.reverse(arr);\\n        return arr;\\n    }\\n}\\n"
                    },
                    {
                        "username": "anirudhkulkarni9094",
                        "content": "a int variable cant store 1000000000 so maybe coz of this it is throwing error"
                    },
                    {
                        "username": "mostafijurj",
                        "content": "one of critical problem.  "
                    },
                    {
                        "username": "harsha6278",
                        "content": "this test case failed\\nnum =[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nanyone know why?\\n\\nvar addToArrayForm = function(num, k) {\\n    const temp=Number(num.join(\\'\\'));\\n    return (temp+k).toString().split(\\'\\');\\n    };"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "Try to wrap your temp into BigInt()\nBut in this case we don't need use Number, and we also need to transform k into BigInt:\n\nconst temp = BigInt(num.join('')) + BigInt(k)\nreturn temp.toString().split('')"
                    },
                    {
                        "username": "MohamedMF2",
                        "content": "this test case [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] wont work on all languages ,\\nfor e.g javascript has limits on these large numbers "
                    },
                    {
                        "username": "RhaskiaGameDev",
                        "content": "I think it\\'s meant so that you have to avoid converting num into an actual integer"
                    },
                    {
                        "username": "ValyaVyrodova",
                        "content": "You can try to use BigInt in javascript"
                    },
                    {
                        "username": "mdjordhan",
                        "content": "After [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3] this test case\\nfinally I give up"
                    },
                    {
                        "username": "murphy8486",
                        "content": "[@shrusky](/shrusky) This input for num is outside the given constraints of the problem itself. This test case is out of bounds of the original problem how did this make it into the question is beyond me."
                    },
                    {
                        "username": "shrusky",
                        "content": "I have spend 3+ hours, and I too give up. I have tried whatever I could."
                    }
                ]
            },
            {
                "id": 1801508,
                "content": [
                    {
                        "username": "thisannie",
                        "content": "Back to back 3 easy problems?? HOW!?"
                    },
                    {
                        "username": "Umair9912",
                        "content": "not exactly easy tho"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "If you are not using LL then :\\n1. Use while loop till array_size > 0 || k > 0\\n2. Inside while :\\n             2.1.Use If to check weather size > 0\\n                    2.1.1Add last element of array into k\\n                   2.1.2 decrease array_size by 1. \\n              2.2.Add last element of K in your list\\n              2.3 remove last element of k\\n             \\n3. IF REQUIRED reverse your list and return \\n\\nHope This will be helpful ....."
                    },
                    {
                        "username": "aashrith_d4",
                        "content": "Easy to understand\\n"
                    },
                    {
                        "username": "simrannasrin",
                        "content": "Can anyone tell me why the code below is not working for edge cases like 9999999+1?  \\n\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        int j=0;\\n        for(int i=0; i<num.length; i++){\\n            j=j*10+num[i];\\n        }\\n\\n        int number=j+k;\\n        ArrayList<Integer> list= new ArrayList<>();\\n\\n        while(number>0){\\n            int digit=number%10;\\n            list.add(digit);\\n            number=number/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "masemune",
                        "content": "Every digit past 2^53 will start losing precision which can cause things like erroneous rounding. If you need to work with larger numbers then use `BigInt`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Adding elements from the left is must efficient. We can do that using linked list or other data structure. In python, we can use $$deque()$$  from $$collections$$. We don't need to import it in **leetcode**. Also we just need to  return this $$deque$$ and it will be accepted."
                    },
                    {
                        "username": "anand_083",
                        "content": "  this is brute force method it work properly but in 3rd case it can not give 0th index can anyone have guts to debug this solution  /\\n        int n=num.length-1;\\n       int base=1;\\n      for(int i=n;i>0;i--){\\n          base=base*10;// base mil gyi //\\n      }\\n        int sum=0;\\n// this loop give me 1000,100,10,0, as my question demand//\\n        for (int i = 0; i <n ; i++) {\\n            int temp=num[i]*base;  // 1*1000\\n            sum=sum+temp;           // 1000\\n            base=base/10;              // update base as 100\\n        }\\n        sum=sum+k+num[num.length-1];\\n// however it give sum properly include 3 rd case //\\n\\n// for printing //\\n        for (int i = n; i>=0 ; i--) {\\n            num[i]=sum%10;\\n            sum=sum/10;\\n        }\\n        return num;\\n// run this code in your local compiler  //// "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "why does this code not work for num = [9,9,9,9,9,9,9,9,9,9]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        int number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        int tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, tempnum % 10);\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@adityadewhy](/adityadewhy) nevermind, even long aint enough for the other test case ie [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "i am assuming the problem was with int data type(int too small to store that big a value)\\nhere\\'s the fix\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        long number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        long tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, (int)(tempnum % 10));\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "parth_chittora",
                        "content": "`class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       long value = num[0];\\n        List<Integer> list = new ArrayList<>();\\n        for(int i = 1;i<num.length;i++){\\n            value = value*10+num[i];\\n        }\\n        value = value+k;\\n        System.out.print(value);\\n        int dig;\\n        int i= 0;\\n        while(value>0){\\n            dig = (int)value%10;\\n            value = value/10;\\n            list.add(list.size()-i,dig);\\n            i++;\\n        }\\n        return list;\\n    }\\n} `\\nWhy is it not giving the ans for the test case 999999999"
                    },
                    {
                        "username": "takezo_shinmen",
                        "content": "AYOO guyz ,  whhats wrong eith this test case\\nnum =\\n[7,8,2,9,2,5,4,7,1,8,0,6,6,7,4,9,0,3,9,9,2,2,6,6,2,5,8,3,6,3,9,6,3,3,1,6,2,7,5,9,8,9,4,4,7,5,0,7,3,8,7,6,0,9,0,7,4,1,1,4,0,7,7,7,6,1,6,5,1,7,4,9,0,4,2,4,4,4,2,6,6,2,1,3,6,7,2,1,9,5,8,3,6,4,2,1,6,6,7,1,0,2,9,3,5,6,8,5,4,2,7,0,3,6,5,0,2,1,1,4,0,1,3,7,7,1,9,1,6,5,9,7,3,3,1,0,9,4,6,5,3,2,0,8,2,7,7,5,4,2,9,9,3,1,9,5,5,4,0,7,3,6,8,9,6,5,1,1,7,0,7,5,3,2,3,1,4,8,2,5,9,6,0,0,2,4,7,9,6,2,3,2,8,5,6,1,0,7,9,1,6,5,6,2,8,5,0,9,2,5,4,0,3,6,0,7,0,3,0,0,8,5,1,2,5,5,1,6,6,0,9,7,9,2,2,7,0,4,3,1,0,4,8,8,6,6,4,6,4,3,1,3,1,5,4,4,3,6,4,5,2,3,7,6,2,4,0,3,7,5,6,8,9,8,6,9,6,9,0,1,3,1,9,0,8,1,9,8,0,4,1,8,1,1,6,0,9,2,8,3,6,0,0,7,2,4,6,3,9,9,2,6,4,8,1,1,1,0,8,8,2,5,9,3,5,4,0,2,5,9,9,1,7,3,7,4,0,1,9,5,5,0,8,2,4,5,9,0,3,9,3,0,6,6,0,7,0,4,2,1,4,8,0,4,5,4,9,9,3,4,0,9,1,1,0,2,0,6,1,2,8,6,3,3,2,5,2,9,9,4,0,0,9,5,7,8,9,2,0,4,0,4,9,1,9,3,9,8,3,6,4,8,7,4,9,6,3,7,8,2,3,4,5,6,0,7,5,2,6,4,6,5,8,9,2,5,6,5,7,1,0,1,2,3,2,2,2,3,4,5,0,8,7,0,8,4,3,6,8,9,9,4,9,5,6,8,3,7,5,9,3,7,5,3,8,2,2,9,1,2,1,7,6,2,4,3,5,8,5,8,4,9,5,4,6,2,7,3,7,2,1,5,9,1,1,6,8,8,6,6,8,1,4,7,7,7,7,3,1,8,5,5,0,3,5,8,6,5,2,9,6,0,0,3,1,3,8,3,7,6,5,3,6,9,7,0,9,0,4,1,6,5,0,6,5,7,7,3,0,9,0,2,9,5,1,9,9,9,8,9,4,4,4,6,1,3,2,0,8,3,6,5,0,8,5,7,3,9,1,3,7,1,3,1,6,9,5,5,1,6,7,5,6,5,1,6,4,6,3,4,1,3,8,8,3,9,5,2,5,5,6,9,3,2,9,9,5,7,0,7,0,5,8,0,7,0,8,0,4,6,0,0,3,7,2,3,8,1,4,6,5,6,4,0,4,8,7,5,8,5,8,1,7,3,7,8,8,5,3,4,1,9,3,0,2,9,6,3,3,4,1,8,5,1,7,4,4,4,9,7,3,7,0,7,5,5,0,0,1,9,2,6,0,9,6,5,1,4,0,2,0,7,5,4,8,8,7,0,4,1,0,8,9,9,3,3,4,0,9,5,7,5,3,6,2,4,1,0,9,1,5,7,5,4,5,6,2,9,9,4,2,1,5,6,1,1,8,8,2,8,0,9,0,8,1,4,9,3,0,6,5,1,3,6,2,1,9,1,2,8,7,0,2,4,7,8,3,1,6,4,1,4,9,9,5,4,0,3,8,5,2,3,7,1,8,4,2,2,5,2,9,6,2,1,3,3,3,9,1,1,3,9,1,0,0,6,7,1,3,3,2,6,9,5,2,8,8,7,2,5,2,7,1,4,2,0,1,9,8,5,6,3,2,2,3,3,1,8,9,8,5,6,4,7,8,6,5,8,8,6,0,5,5,0,8,3,6,3,0,1,3,0,8,2,1,6,9,8,0,5,0,9,4,0,5,8,8,9,8,8,5,0,1,1,1,6,2,2,8,8,0,6,7,8,8,3,5,8,4,9,7,2,1,9,4,1,0,1,3,1,6,1,3,7,8,7,3,5,9,1,5,9,8,3,1,7,3,0,2,0,6,8,5,5,5,3,4,3,0,4,0,2,2,0,5,5,9,2,0,9,7,3,3,3,9,5,0,4,1,3,3,2,2,5,1,9,3,5,6,1,6,3,0,3,1,6,3,8,1,9,9,9,9,9,0,5,0,8,9,2,1,5,9,6,6,8,3,0,3,1,2,9,1,8,2,8,8,1,5,1,9,7,0,3,4,3,7,1,0,2,2,5,0,8,1,6,1,4,4,7,0,2,4,4,9,5,1,7,1,8,2,5,0,1,3,3,5,5,2,2,3,5,8,6,6,0,0,3,9,0,1,8,0,6,2,2,9,1,8,2,6,6,4,9,5,1,6,5,9,5,7,3,8,5,2,3,5,6,3,5,7,2,1,0,4,3,2,2,5,9,3,2,2,1,1,5,1,7,4,6,5,8,9,8,6,2,6,4,2,5,2,4,8,0,1,7,8,3,8,5,3,3,2,9,4,2,8,7,2,8,6,7,8,8,7,9,7,3,0,7,7,6,0,9,1,8,7,2,4,9,0,4,4,3,9,2,6,3,4,2,9,6,2,6,7,6,9,9,7,2,4,9,1,3,5,7,7,8,4,9,1,1,0,8,3,5,6,9,0,5,5,4,0,8,3,6,4,9,1,4,4,9,8,2,2,4,4,0,9,1,1,9,3,5,0,6,8,2,5,7,5,0,7,2,7,7,5,1,7,9,5,8,7,9,7,1,9,1,7,5,0,1,8,1,0,5,1,0,5,9,7,8,9,9,5,6,0,1,9,3,1,1,3,2,3,1,2,8,9,9,0,2,9,5,4,7,3,9,5,1,9,4,6,3,2,0,0,0,8,2,6,1,2,4,9,5,7,9,9,6,7,4,0,7,1,5,4,4,6,2,0,4,0,1,8,7,7,5,8,9,6,6,5,0,6,2,5,5,7,7,7,2,9,6,9,4,8,4,0,4,6,1,5,1,6,7,7,0,6,1,2,8,8,6,4,1,0,5,7,6,4,2,0,2,0,5,1,6,9,4,2,2,0,1,6,5,9,8,6,3,7,3,8,5,0,6,5,7,3,0,6,8,2,1,2,9,9,4,3,0,3,1,2,9,6,8,4,6,9,0,3,6,3,2,5,9,9,4,3,6,2,2,5,8,1,6,9,7,1,9,1,7,1,4,8,2,7,4,9,9,8,8,0,4,3,3,9,8,8,9,7,2,3,4,9,2,0,5,4,4,3,4,8,5,7,4,1,1,9,9,7,5,9,2,7,7,2,3,2,2,0,1,6,9,0,7,8,7,3,9,6,1,9,0,4,5,3,4,2,3,2,1,8,2,0,2,5,4,7,4,2,0,7,1,7,7,8,5,6,2,2,0,2,5,7,2,0,6,6,9,0,1,2,4,0,5,5,2,1,6,8,7,9,7,6,7,1,8,0,3,0,6,1,4,6,9,1,4,5,8,4,8,0,5,7,8,2,8,6,7,4,9,9,8,7,7,1,3,8,7,2,1,7,5,3,7,2,2,2,1,6,1,2,1,3,0,2,4,3,8,8,3,7,5,9,9,7,3,3,8,9,2,3,2,5,5,5,2,6,1,9,2,4,8,0,7,9,5,2,7,3,2,9,2,1,9,9,5,0,9,6,4,5,8,8,9,0,8,8,4,2,6,2,2,2,4,9,7,5,3,3,9,1,0,7,0,0,3,9,4,8,4,8,6,6,4,0,3,4,9,0,4,0,3,9,1,4,5,8,0,2,4,3,8,8,6,6,2,8,4,3,8,3,9,2,4,3,7,4,7,7,9,3,6,3,8,1,2,5,0,9,3,5,0,3,0,5,5,0,3,3,8,8,4,2,3,4,3,9,3,5,2,3,2,8,7,2,2,7,5,9,5,8,9,4,7,6,6,1,5,9,2,8,7,5,6,3,0,7,9,0,0,7,8,7,0,5,2,4,5,9,6,0,0,8,9,3,4,0,7,7,7,3,5,1,3,9,6,1,0,7,3,2,9,3,4,0,8,5,3,2,2,5,7,4,3,6,1,3,0,3,1,4,4,7,4,2,1,1,3,8,4,9,1,0,7,1,1,5,6,8,9,2,0,8,7,7,3,6,6,5,0,8,8,9,0,6,5,9,9,3,2,8,6,1,9,8,2,2,4,4,9,6,1,9,5,5,4,7,4,6,9,7,5,4,5,5,2,7,7,3,6,9,9,0,9,1,3,9,5,4,7,2,8,0,9,9,6,5,9,2,4,9,8,9,9,0,8,5,4,3,0,7,9,1,1,8,6,4,5,7,9,4,3,7,5,3,1,1,6,0,0,3,8,1,2,9,3,3,3,9,3,5,8,5,9,6,3,9,8,5,3,4,9,2,0,8,6,3,5,2,5,4,4,3,7,9,9,9,5,9,1,2,4,5,4,0,0,4,1,2,3,1,7,9,3,1,4,8,7,1,1,1,5,0,8,1,8,8,4,9,2,6,6,7,5,4,4,7,1,3,1,5,4,1,4,7,3,6,0,8,7,6,6,1,7,9,1,6,5,4,8,2,8,1,8,4,0,6,8,4,5,3,1,4,2,2,2,9,4,0,1,0,5,7,2,5,3,4,3,9,0,8,0,8,6,4,5,5,9,8,3,4,5,6,6,8,0,7,8,0,7,3,6,7,8,4,6,3,6,0,3,0,7,5,6,3,4,5,2,1,5,7,6,3,4,8,9,7,9,8,9,3,7,1,3,1,1,2,7,1,4,1,0,2,9,6,5,5,4,0,3,1,1,1,2,2,8,1,3,1,1,6,9,7,5,2,5,4,8,7,7,4,9,3,9,0,1,8,9,5,6,7,9,6,2,1,0,9,3,5,9,4,4,4,2,6,8,0,3,4,5,7,2,0,1,4,2,0,6,1,9,8,7,6,1,1,2,8,3,8,6,1,9,1,2,2,5,4,3,2,5,2,8,2,2,7,5,7,6,7,6,9,9,7,3,9,8,6,2,6,9,5,9,3,3,7,0,9,8,5,1,2,7,6,5,7,5,6,9,5,6,7,6,7,3,4,5,0,9,4,9,2,6,8,8,1,7,2,1,8,8,7,1,5,7,6,5,6,3,6,7,6,3,4,6,3,1,3,9,4,7,6,1,0,9,2,0,9,0,6,2,5,0,4,8,8,3,2,8,5,6,9,0,0,2,7,8,7,7,0,2,3,9,6,0,8,0,6,6,1,6,9,7,9,1,6,4,0,5,9,2,8,1,5,4,3,2,1,9,9,1,8,3,5,6,9,8,0,4,7,8,8,7,9,8,7,4,0,5,9,8,1,8,1,8,0,5,2,3,9,9,6,2,1,5,7,5,4,7,1,7,3,3,6,8,8,3,7,7,9,2,1,7,0,9,1,7,2,8,5,5,4,3,2,4,8,8,2,3,0,4,9,3,3,6,6,0,7,0,0,8,9,8,6,6,4,5,9,4,9,8,2,5,1,8,4,2,7,0,7,0,0,4,2,1,6,7,0,6,0,5,6,4,0,1,7,5,9,2,9,4,9,6,3,9,5,8,0,0,2,8,0,9,6,7,8,8,4,5,6,8,0,5,8,4,3,8,8,3,4,9,3,3,6,5,4,9,9,3,0,4,3,0,6,7,4,7,5,8,7,5,1,0,8,0,1,4,8,8,3,3,3,1,8,4,4,3,8,5,7,9,3,9,5,5,0,4,5,0,7,8,2,2,9,1,6,1,6,5,7,5,8,7,5,7,6,6,0,8,2,1,0,3,0,2,2,7,4,9,8,2,6,7,1,0,8,1,8,0,5,1,0,0,1,3,1,8,9,2,8,9,1,2,7,0,2,3,6,1,1,5,0,2,1,6,2,5,9,3,1,9,7,2,8,7,3,5,7,4,3,3,1,1,9,3,4,8,8,4,6,2,6,4,3,8,7,7,1,3,4,4,6,9,4,1,3,2,0,7,2,4,1,2,9,9,1,4,1,3,5,1,9,4,1,5,4,6,0,3,0,8,1,7,6,9,4,9,1,8,2,4,9,5,9,6,9,3,3,2,5,0,1,8,4,8,1,6,0,4,9,1,3,9,4,5,0,6,7,1,7,4,6,5,0,8,1,0,0,1,2,3,5,2,9,8,9,6,4,6,4,5,5,1,2,2,3,3,7,1,3,9,6,8,8,3,6,3,4,4,0,0,6,7,4,2,8,7,8,7,8,6,8,1,4,3,6,5,0,1,5,3,4,0,9,0,1,6,8,3,9,3,9,1,1,4,4,4,1,5,7,3,8,5,7,1,8,9,0,9,3,1,0,3,8,3,1,9,2,6,2,5,4,4,9,0,2,5,1,5,1,8,9,2,7,7,9,7,2,2,6,7,7,9,0,7,2,8,3,6,2,0,0,6,7,3,4,7,3,0,8,8,5,8,2,7,6,2,5,1,8,2,6,6,3,7,2,3,6,7,5,8,1,9,4,5,6,4,6,7,7,7,7,3,9,9,4,8,3,5,5,7,1,7,4,5,6,0,3,5,5,3,4,1,4,5,6,4,8,9,6,8,0,1,9,5,6,6,8,6,9,4,6,2,5,9,9,6,4,4,5,5,8,0,9,2,3,5,5,6,8,9,4,2,7,9,2,8,8,2,1,1,4,3,7,5,4,5,3,6,3,5,5,3,9,8,5,0,0,1,1,0,7,9,2,5,8,1,0,6,0,6,5,6,5,9,7,1,0,1,9,9,3,1,1,7,0,4,3,1,8,7,3,8,2,3,8,7,8,2,3,6,6,4,5,0,7,4,8,3,4,0,7,1,8,6,0,5,0,8,5,1,3,3,2,7,4,9,1,6,5,9,5,1,1,1,6,2,1,5,3,6,2,4,4,6,1,1,1,8,7,1,9,9,4,7,2,3,4,5,9,7,6,9,5,3,4,6,8,2,0,8,4,9,8,6,8,4,6,7,4,7,7,8,2,6,7,1,2,1,0,6,0,5,1,9,8,2,2,9,4,6,0,7,0,0,5,8,5,3,2,9,4,1,6,7,2,0,7,3,6,8,1,9,8,0,8,8,7,0,6,1,9,8,7,4,5,0,8,6,9,8,6,2,7,9,3,5,1,9,2,5,8,8,5,1,2,2,2,1,6,9,7,8,4,8,9,0,2,3,8,7,9,6,9,7,2,6,2,4,6,6,7,8,9,4,2,9,7,3,7,1,3,5,5,9,8,4,1,7,0,6,9,6,3,4,7,0,7,4,4,5,8,9,1,1,3,9,1,3,3,8,3,0,0,5,7,2,3,3,4,7,1,7,5,5,7,0,3,8,5,1,7,0,5,9,0,2,0,8,7,5,3,6,4,6,9,3,0,1,6,8,9,9,9,1,2,0,0,9,5,2,9,4,5,8,4,0,5,7,6,5,5,4,0,2,2,3,7,7,8,6,8,0,6,7,8,4,6,0,5,1,4,1,8,9,6,9,9,5,8,4,8,4,0,1,0,8,6,9,4,0,8,6,9,3,6,0,8,1,4,6,8,0,4,6,0,2,1,2,5,4,5,1,6,1,4,7,4,3,1,5,4,4,5,5,1,1,3,3,5,7,4,2,7,0,1,3,5,9,6,8,2,2,2,0,0,8,1,3,8,9,3,2,1,1,1,3,9,6,1,1,1,7,7,7,1,4,4,5,0,1,3,7,4,7,0,9,7,7,1,2,9,1,7,9,8,3,3,6,5,2,3,1,9,2,9,3,8,7,5,7,1,4,7,6,9,2,5,8,4,6,9,8,1,2,0,4,2,1,9,8,4,9,7,6,3,0,4,8,8,3,2,2,9,5,5,7,2,3,2,7,6,8,2,3,4,4,6,4,6,1,5,2,7,8,4,9,1,4,2,9,2,9,1,6,9,4,1,2,6,1,4,8,4,9,9,3,4,5,5,5,4,0,2,7,9,5,7,7,1,0,9,9,2,9,4,9,1,3,1,2,4,6,3,2,4,6,7,9,1,5,2,3,2,6,4,4,5,8,5,9,9,0,5,8,5,9,1,0,9,7,9,7,6,8,6,6,9,9,6,6,3,0,8,4,9,9,3,3,2,0,7,9,7,8,2,9,2,7,9,9,0,2,8,4,0,4,9,0,3,9,4,6,5,6,6,9,1,3,5,5,6,4,4,6,1,2,2,4,4,2,2,0,4,1,6,3,4,7,0,7,0,3,3,6,5,7,7,8,3,9,9,9,5,2,3,7,6,7,9,4,0,8,8,3,5,3,7,6,5,8,1,9,5,9,2,7,4,9,5,2,4,1,8,7,6,6,2,8,6,5,3,4,6,2,2,5,2,5,3,9,3,7,2,4,2,5,7,3,3,2,4,3,1,7,9,3,5,6,3,0,0,0,8,5,9,9,6,3,0,0,6,1,2,1,4,0,2,0,1,5,8,0,4,5,4,0,8,8,1,5,4,6,5,9,7,6,8,4,2,2,5,9,0,5,0,0,3,5,3,1,8,7,6,2,0,4,3,1,3,7,6,4,9,8,5,0,9,6,6,5,7,3,2,2,0,0,1,7,6,6,9,2,0,4,2,8,0,6,5,5,3,0,0,7,4,6,7,9,8,3,9,6,1,6,3,9,6,3,4,5,8,4,9,0,1,8,4,0,8,8,8,4,2,6,8,1,3,7,3,0,9,6,5,3,8,3,8,8,1,9,5,5,3,7,7,2,5,8,7,7,0,5,5,7,9,2,9,2,5,9,7,1,6,9,9,2,9,6,2,4,8,8,6,3,6,0,7,6,6,0,4,3,2,3,7,3,9,6,5,7,0,8,5,3,5,8,3,5,9,7,4,5,0,8,7,1,8,2,3,5,0,6,8,4,8,5,7,1,0,3,2,6,6,8,3,7,9,8,0,6,2,9,0,0,4,5,8,5,5,9,4,8,0,7,1,3,7,5,2,4,4,4,6,0,3,0,3,6,2,9,9,8,5,5,1,2,0,9,2,2,9,7,3,4,9,4,5,7,2,2,9,9,9,0,5,4,5,6,0,4,7,5,7,0,3,2,8,0,0,1,9,0,6,9,2,6,8,8,5,9,8,1,5,1,4,2,5,3,6,0,5,6,5,1,1,7,1,2,4,3,1,0,4,6,4,5,9,0,0,1,2,5,4,1,5,9,4,8,2,8,7,5,8,9,3,5,2,2,6,7,0,6,6,9,6,6,1,3,9,7,9,1,1,4,4,3,5,1,8,5,9,0,6,1,8,2,6,9,2,3,5,5,7,2,5,4,0,0,5,9,7,5,1,5,7,3,5,8,4,1,0,7,8,4,7,2,1,9,6,5,3,2,2,4,1,4,4,7,5,1,9,3,2,7,2,9,4,3,0,5,5,8,3,4,2,8,2,0,9,0,2,1,6,3,8,8,4,2,6,1,0,0,6,0,2,4,2,2,1,4,2,0,1,5,6,1,8,5,5,8,7,4,3,7,7,7,6,7,6,0,8,8,7,9,0,1,9,6,1,2,8,0,7,5,3,5,8,1,0,3,2,7,7,3,2,3,8,7,7,5,7,6,4,3,2,5,5,0,2,9,6,7,3,0,3,2,0,8,0,0,5,1,8,2,4,1,8,1,7,6,3,2,1,5,3,8,5,2,4,9,9,7,1,9,1,5,9,7,8,0,4,4,8,8,8,6,8,4,4,0,3,8,3,8,2,4,5,5,2,0,3,5,9,6,5,2,6,3,5,0,6,0,5,2,2,0,9,6,2,8,7,9,3,6,1,6,2,2,8,5,2,6,3,7,9,5,9,3,1,4,9,2,9,5,4,8,9,9,9,3,2,7,2,7,6,4,3,5,2,4,1,4,3,1,9,8,8,8,7,6,7,6,6,0,2,5,7,7,9,4,5,0,0,5,8,9,7,6,0,1,3,5,7,0,6,7,8,9,4,6,1,3,3,6,6,1,0,6,4,4,4,6,3,2,6,2,9,3,0,3,4,7,3,6,0,9,8,3,4,6,9,7,0,0,7,7,1,1,5,8,3,8,4,9,0,5,6,6,4,0,9,0,9,3,9,7,4,2,1,5,7,6,5,9,9,9,2,7,0,5,8,2,8,2,0,9,9,7,1,3,5,1,8,7,7,8,5,4,3,2,3,5,4,8,2,2,6,8,7,8,0,9,7,1,4,0,9,4,9,0,0,4,6,2,9,0,7,0,1,4,7,5,6,5,3,8,2,3,9,9,8,7,4,0,8,1,9,5,7,5,6,0,0,9,3,7,4,6,9,9,3,3,7,6,1,9,8,1,3,3,5,4,2,0,2,4,3,9,8,4,5,2,4,5,0,6,3,5,1,9,9,5,6,1,4,1,6,8,1,7,0,0,5,2,2,2,2,7,4,2,6,0,1,5,7,1,8,9,7,6,3,7,7,0,3,4,6,2,7,3,1,1,3,3,9,6,5,6,5,8,6,6,2,1,1,3,7,5,3,6,7,2,1,7,2,5,1,0,8,4,2,6,4,1,4,3,2,8,7,0,7,9,9,6,5,0,4,0,3,9,6,7,8,4,9,5,4,9,0,4,8,4,7,6,8,4,5,9,1,1,2,6,8,8,2,8,8,5,7,9,4,4,8,9,0,2,7,2,1,9,5,2,6,4,8,9,4,7,3,1,3,9,7,2,1,6,8,1,8,8,7,7,7,3,7,2,5,0,8,1,6,4,6,6,1,0,7,8,2,8,3,3,2,3,7,7,5,8,2,1,1,2,0,3,9,6,8,8,9,5,8,6,9,8,9,5,3,6,8,6,4,4,2,6,6,2,6,8,7,4,0,1,8,2,9,3,1,2,1,4,6,6,1,8,5,4,7,1,7,2,5,9,9,0,4,9,4,5,9,9,3,0,4,5,1,4,6,2,3,5,6,8,8,3,2,1,4,6,9,2,0,4,5,8,4,0,6,1,9,7,3,0,0,7,6,5,2,6,5,4,3,7,1,9,9,7,0,7,9,9,3,0,3,2,3,3,9,6,0,2,2,5,4,4,2,0,5,8,8,8,8,9,1,6,6,5,0,1,0,7,8,3,3,9,1,8,7,4,8,7,4,1,8,7,5,0,5,4,3,4,5,0,8,1,7,0,4,7,1,6,6,0,5,4,1,4,9,0,6,3,4,3,8,9,3,4,7,0,9,2,1,8,2,9,9,2,0,0,4,9,7,1,1,0,7,0,6,0,3,4,6,7,4,3,6,6,4,1,0,1,1,8,6,9,9,0,6,4,8,4,7,2,4,3,9,8,2,9,4,2,7,2,9,5,0,3,4,1,8,5,5,6,6,2,0,4,6,1,4,9,8,5,2,5,1,2,1,3,0,9,2,3,3,4,2,6,1,7,8,7,1,2,3,9,9,9,7,2,1,1,1,5,9,6,1,4,2,5,2,4,9,0,4,3,1,5,1,8,2,1,0,8,0,2,8,8,8,6,5,4,4,0,3,6,0,7,0,9,6,4,0,1,5,4,2,0,5,7,4,0,5,7,1,6,2,0,1,0,8,3,5,7,4,0,9,5,5,7,5,8,9,6,5,9,8,8,3,7,8,8,8,9,1,7,6,3,8,1,5,0,0,3,6,3,7,8,9,5,3,2,0,4,6,9,8,5,8,2,3,1,9,7,3,2,6,2,3,7,6,5,7,8,9,1,2,6,6,5,2,2,9,1,2,0,5,9,7,7,8,9,3,9,0,4,7,7,1,8,4,1,7,6,8,0,4,2,3,8,0,9,4,0,3,1,7,3,9,9,8,2,1,0,7,9,0,3,0,1,5,0,7,4,6,2,9,8,2,9,9,6,9,1,2,2,3,7,5,2,0,2,7,7,8,5,6,8,4,8,2,2,5,4,9,3,8,1,7,3,0,1,0,2,3,8,3,6,8,6,4,6,5,6,1,3,4,7,7,1,7,8,7,0,8,4,8,4,5,6,0,9,3,3,1,7,2,6,8,0,9,8,4,2,9,8,4,7,3,6,0,8,4,9,7,4,4,6,0,9,9,3,7,1,9,2,0,2,3,9,1,3,7,7,6,4,4,3,2,3,6,6,0,8,4,5,4,5,8,1,9,0,8,1,1,5,7,4,1,7,8,5,1,6,4,1,1,6,2,7,5,3,6,3,6,0,4,4,6,8,7,9,8,2,1,7,3,4,7,9,7,8,5,6,6,8,8,8,2,6,6,3,8,4,1,4,4,3,2,6,6,0,2,5,4,6,7,7,8,4,3,9,0,4,0,6,1,8,0,6,7,7,4,0,7,8,5,7,8,1,5,4,2,7,1,5,9,2,3,7,4,8,5,6,7,7,3,1,1,5,5,7,3,3,8,6,1,2,3,5,3,2,5,6,6,3,6,7,2,7,5,1,4,1,3,8,7,6,6,2,2,1,2,2,3,3,0,0,1,6,8,6,6,0,6,5,2,4,6,7,3,0,3,5,2,0,8,7,7,0,6,0,2,4,3,3,6,5,6,2,8,8,2,6,7,9,0,7,0,9,3,4,3,2,9,0,1,8,5,3,0,6,8,4,5,6,0,0,0,5,4,6,3,9,0,6,0,2,1,1,3,1,5,7,4,0,5,2,2,4,5,4,6,4,7,5,9,2,4,4,2,5,7,4,7,0,7,1,8,8,8,9,9,6,8,4,7,9,4,8,8,9,9,2,8,8,9,2,2,4,8,1,2,3,9,8,2,9,4,8,7,5,6,1,4,6,2,2,2,5,3,0,5,8,4,7,2,2,7,6,0,6,7,9,5,7,2,2,2,9,7,1,6,2,9,5,4,6,1,4,7,2,9,0,6,6,4,5,6,8,3,2,0,0,0,8,7,5,6,3,8,5,8,9,8,6,4,5,0,7,7,3,7,1,4,2,0,4,9,7,8,5,0,9,6,5,3,0,4,5,3,0,0,1,1,2,3,9,9,0,6,5,9,9,7,2,0,4,1,2,2,4,4,8,2,1,9,5,6,1,5,0,9,1,9,8,3,7,3,5,9,4,1,3,1,3,2,4,9,3,4,5,9,7,2,2,5,1,4,3,0,1,6,4,1,7,3,2,0,1,1,4,8,7,8,2,3,1,1,7,6,6,2,6,4,9,3,7,5,1,3,4,0,0,7,3,0,8,1,0,9,1,9,6,5,7,9,1,6,5,7,8,3,7,2,2,0,2,4,0,8,5,1,2,8,4,1,2,1,2,1,0,4,3,6,1,4,9,0,5,5,4,9,2,3,5,5,9,3,8,8,6,2,6,8,1,9,4,7,8,9,3,7,8,2,0,3,6,8,6,2,2,6,0,5,1,0,6,4,2,8,8,3,5,8,8,2,6,9,0,0,0,1,8,8,6,3,5,9,5,2,6,7,1,6,6,5,8,7,0,9,5,6,3,7,2,7,1,7,2,3,4,1,2,2,9,0,0,7,0,4,7,4,4,1,1,6,8,6,1,9,0,6,7,7,5,3,4,3,1,0,8,1,6,2,4,1,9,7,5,1,7,2,6,0,9,3,3,0,6,1,5,1,3,9,3,7,1,7,8,1,8,4,2,9,0,7,2,6,1,2,4,0,9,3,7,1,0,6,5,1,7,5,6,3,7,1,1,7,7,9,1,7,3,1,3,6,3,9,3,3,0,2,7,5,1,3,0,4,0,0,2,6,3,9,2,0,1,3,4,6,4,8,8,8,0,2,2,8,4,7,6,9,6,8,3,9,0,3,8,9,4,6,7,8,3,0,5,6,6,4,6,6,1,9,8,0,4,9,9,2,7,6,6,8,3,9,1,0,9,8,0,3,7,6,4,8,9,3,1,2,2,4,8,4,8,5,7,9,7,4,9,1,5,8,5,9,1,0,5,8,8,2,0,8,8,1,4,2,2,0,5,7,6,0,3,3,8,1,8,3,9,9,9,6,3,6,2,2,7,8,3,3,2,7,1,2,1,4,0,2,6,6,9,4,9,5,2,5,1,3,5,3,7,7,7,0,2,4,7,6,1,1,0,4,4,2,3,8,8,7,8,4,2,3,0,2,9,5,4,2,4,4,5,2,0,2,1,4,9,4,0,0,3,0,4,8,8,5,4,7,1,4,2,8,1,5,3,6,1,5,9,9,0,5,1,1,4,2,9,3,0,2,4,3,0,8,4,1,6,3,7,5,6,6,6,4,3,9,2,6,0,6,1,4,1,0,6,4,5,0,2,1,6,2,3,8,3,5,5,4,3,1,8,7,9,8,3,9,3,2,2,6,6,9,4,8,6,7,6,7,5,5,1,4,6,5,7,7,2,4,9,6,2,4,8,8,4,6,4,1,5,6,6,4,2,3,6,7,8,5,7,9,8,0,9,8,9,0,1,9,6,1,7,6,2,4,9,2,8,9,0,2,5,3,8,5,0,5,7,1,5,4,5,1,9,7,3,7,2,5,5,1,5,7,7,4,0,1,4,6,0,0,8,2,8,6,7,4,9,7,4,7,5,6,0,9,9,9,4,3,4,5,9,4,6,4,3,3,8,0,3,2,6,3,7,0,5,0,0,9,5,2,2,7,3,0,2,4,7,5,0,0,5,1,9,5,5,6,4,8,8,8,5,4,2,5,1,0,2,3,0,6,0,7,4,2,8,2,4,5,3,8,9,5,5,6,0,9,3,0,9,0,9,5,4,3,6,7,4,4,0,2,2,9,4,6,6,9,8,1,1,7,4,5,4,9,7,7,0,1,6,5,2,3,6,1,5,5,3,9,1,7,6,4,2,0,4,0,9,3,5,1,9,7,2,9,5,9,4,9,8,7,9,2,7,0,5,4,4,7,4,5,2,2,8,8,7,0,3,7,8,5,1,5,6,8,4,5,3,8,6,1,0,2,5,7,4,4,4,0,7,7,2,3,6,4,9,9,0,5,2,3,3,0,2,9,8,8,2,9,4,7,6,1,3,9,3,0,7,1,9,0,6,5,4,7,4,8,3,0,9,6,2,8,9,4,6,6,0,9,9,7,1,9,4,9,5,5,9,3,9,6,4,5,1,0,1,7,5,5,6,3,6,9,4,6,6,1,8,2,0,6,2,0,9,5,0,0,4,5,4,2,0,4,5,1,2,3,5,6,6,2,5,5,8,9,6,8,8,4,6,1,6,7,9,0,1,4,6,3,6,8,7,4,6,2,5,3,0,0,5,4,1,3,2,5,1,5,2,4,5,3,2,5,3,5,2,9,4,6,5,4,0,6,4,3,6,0,8,3,9,4,6,9,4,7,4,8,7,6,6,9,4,2,1,1,3,0,5,0,0,2,3,7,1,7,7,1,6,4,6,0,1,4,4,6,5,8,8,6,7,3,8,2,6,2,6,6,7,7,5,8,9,1,6,7,3,0,8,6,0,6,4,2,0,8,5,2,7,8,2,5,6,8,0,4,7,0,3,7,5,8,6,8,6,5,6,2,4,2,4,2,4,3,6,8,3,2,0,3,8,3,9,2,8,3,7,4,5,9,1,0,7,4,2,3,7,9,9,9,1,2,5,1,7,9,1,3,9,7,5,2,4,8,4,2,9,5,5,7,1,1,4,1,0,4,6,4,2,3,3,2,7,0,4,6,6,0,5,6,0,7,3,3,2,1,8,7,2,8,3,8,4,7,6,1,2,0,4,5,2,4,8,3,9,0,1,8,1,4,9,6,6,8,8,1,4,0,0,5,2,3,7,2,1,0,3,7,1,5,9,8,6,4,4,9,7,7,8,3,2,5,9,7,1,7,7,4,3,3,6,0,6,5,9,4,4,6,9,6,3,7,8,0,1,8,6,2,2,9,2,8,1,7,0,9,6,3,0,6,7,2,7,0,6,9,6,4,7,8,2,2,6,3,1,7,6,4,7,6,1,4,9,4,0,1,7,3,6,8,4,9,3,4,7,3,7,3,3,8,9,9,1,1,3,7,7,3,3,9,6,4,0,5,2,6,0,0,1,1,9,0,9,0,9,8,5,4,9,7,9,5,4,6,2,5,7,0,1,7,1,0,8,5,0,5,9,7,4,1,6,1,9,3,5,3,8,8,9,4,8,5,2,5,3,4,8,3,9,7,3,7,4,6,0,6,6,4,8,5,4,9,6,1,3,1,9,7,5,4,9,0,2,4,3,1,1,3,6,6,9,5,2,6,4,2,1,9,0,6,9,5,1,9,3,2,8,4,6,6,4,1,8,6,6,9,2,7,3,3,7,0,4,1,8,2,7,7,9,9,7,1,4,8,2,2,6,9,6,2,5,8,7,0,7,4,1,3,7,4,8,5,5,2,8,0,8,8,8,3,4,4,5,3,0,2,7,3,4,2,9,8,9,3,1,3,9,2,6,0,9,0,5,3,6,6,2,2,9,4,4,4,9,2,1,7,4,2,1,0,1,8,1,7,7,2,3,7,9,8,0,4,1,8,9,9,8,1,0,5,7,4,6,6,5,2,4,9,1,1,9,9,6,4,8,7,4,8,4,0,5,4,3,0,3,9,6,7,6,6,2,7,3,1,5,7,2,5,6,7,9,3,2,1,3,5,6,1,2,0,1,9,2,5,1,1,2,5,6,4,4,7,2,2,6,8,6,8,2,1,3,0,8,5,4,0,9,8,6,9,9,7,3,2,6,4,9,4,4,9,0,0,8,8,6,0,8,7,6,7,0,1,8,5,8,7,7,6,5,0,7,1,0,3,7,3,2,6,4,7,7,1,7,3,3,1,3,3,0,2,5,5,2,7,3,8,7,8,8,9,4,6,3,2,6,9,9,1,8,0,9,5,3,8,0,9,4,0,0,5,4,2,2,0,5,1,8,4,8,6,4,6,2,3,5,8,3,8,5,7,2,6,2,4,3,2,1,7,9,1,3,2,5,8,2,3,3,4,7,1,6,1,0,9,8,8,3,4,9,6,0,8,5,2,3,3,3,2,8,1,8,2,5,4,7,7,3,8,6,6,3,4,5,3,0,9,2,3,3,0,3,5,0,4,9,9,9,5,3,2,3,1,2,1,3,0,6,1,5,0,9,9,5,7,0,9,4,7,2,6,9,3,4,8,4,5,4,3,9,1,3,1,9,9,3,9,5,5,5,3,1,8,7,9,2,4,3,1,8,7,5,3,7,5,5,7,3,8,3,8,0,5,6,4,4,9,1,3,6,7,9,3,3,8,9,9,2,5,9,7,1,2,5,6,4,7,6,8,1,8,7,0,8,3,7,3,4,2,7,3,8,8,6,5,4,8,5,3,5,1,9,9,6,1,4,8,0,6,2,3,6,7,5,2,0,1,8,0,6,0,5,6,6,3,9,9,5,9,6,9,8,7,7,1,7,2,1,8,9,1,7,5,5,6,0,5,7,8,3,3,2,1,9,5,5,6,6,1,7,9,1,6,2,9,6,1,6,2,1,4,4,2,8,9,1,0,7,1,5,6,9,9,6,6,5,9,7,5,2,0,2,1,1,4,4,5,5,5,4,1,8,9,1,7,8,8,6,2,2,8,8,6,5,7,8,2,6,0,4,4,4,9,0,3,7,6,2,3,1,1,7,5,7,9,7,5,0,8,2,0,2,3,5,2,6,9,0,7,8,5,6,6,4,2,7,4,8,2,1,2,1,5,2,1,5,7,5,7,0,7,0,2,4,2,1,9,1,7,2,5,5,1,8,5,8,6,1,0,3,1,7,9,3,8,1,9,3,6,8,3,6,7,2,2,2,2,6,8,3,3,1,2,2,3,0,4,6,1,1,8,7,6,8,3,9,9,6,3,6,3,6,6,0,8,2,0,5,8,8,6,0,0,9,9,6,3,8,7,1,6,7,2,1,3,5,7,2,4,3,5,1,0,9,3,6,1,9,8,7,6,5,8,9,4,0,2,7,4,3,7,0,9,3,2,5,1,4,1,3,1,4,6,7,9,4,7,0,9,5,9,4,6,6,8,1,4,2,4,7,0,9,8,2,3,8,7,9,4,1,8,2,5,9,5,8,5,8,0,6,3,2,4,5,6,6,9,2,6,2,9,8,1,8,2,6,9,5,3,1,9,4,9,2,1,0,5,0,5,9,1,9,7,5,9,7,9,1,4,4,0,1,9,6,3,0,5,5,1,9,3,6,6,8,1,9,9,3,1,3,6,6,2,5,7,5,7,0,9,9,5,0,1,4,8,7,3,8,8,6,2,0,3,7,4,9,7,1,8,0,5,4,0,0,4,0,3,1,5,4,7,0,1,0,5,2,4,7,8,0,2,1,5,4,9,5,9,6,1,4,9,1,6,5,2,4,8,5,5,9,5,0,1,2,2,1,9,9,7,6,5,8,6,4,2,2,7,7,7,3,2,9,2,2,9,2,6,4,2,9,2,2,8,0,7,6,6,5,5,6,3,7,4,8,7,9,2,6,1,7,7,8,6,6,2,1,9,1,0,0,9,7,4,1,5,7,3,4,0,3,0,5,1,4,0,5,2,6,2,1,3,8,8,7,2,6,2,6,8,9,5,0,3,7,8,6,4,8,5,1,2,1,1,2,4,7,5,0,2,8,2,8,9,0,8,1,6,9,0,7,5,8,2,9,2,5,2,3,6,0,3,8,4,4,3,6,9,1,3,8,6,1,0,9,2,7,1,7,5,9,9,4,5,0,0,0,9,2,7,8,6,4,1,8,8,9,9,0,5,6,3,8,3,1,6,8,3,3,9,3,9,2,5,9,7,1,1,2,3,4,8,6,7,2,5,5,4,7,2,8,6,1,1,1,9,0,2,9,2,1,7,2,6,3,0,2,7,7,7,8,6,7,7,3,3,2,3,6,0,7,3,4,8,3,6,7,0,9,0,8,4,5,8,9,9,1,1,0,2,7,3,8,8,2,4,4,6,8,9,1,6,7,8,7,6,0,7,3,2,8,8,9,8,7,7,1,6,3,0,4,5,3,3,6,6,0,1,6,4,0,8,3,4,8,2,4,8,2,4,4,3,4,9,2,6,6,2,2,5,4,0,0,3,7,8,8,2,1,6,2,9,6,2,0,3,2,6,1,1,4,6,6,0,6,7,9,4,4,4,4,4,5,1,8,6,2,6,2,3,7,5,9,9,0,3,2,5,7,8,3,3,9,3,8,7,5,0,6,2,3,7,4,7,5,9,3,6,9,4,4,8,4,4,1,4,2,2,7,2,0,3,8,3,4,0,7,8,4,0,2,1,5,1,8,9,4,6,7,2,4,8,3,5,5,9,3,2,4,6,1,8,6,2,5,9,1,2,9,0,5,0,4,8,8,9,0,7,0,8,0,4,3,0,9,7,7,5,0,2,0,1,7,6,6,8,2,3,1,2,6,9,9,7,6,5,4,6,9,7,2,7,6,1,0,5,0,4,7,2,2,1,2,5,3,7,2,0,2,6,2,9,1,1,2,4,5,4,4,1,0,0,7,3,0,5,8,5,2,5,6,2,9,7,4,9,5,8,6,6,4,4,9,8,4,4,3,9,9,0,2,3,5,9,3,9,2,7,1,1,5,0,3,1,8,7,9,9,7,2,9,0,3,6,9,9,5,5,3,4,7,7,7,0,2,5,4,4,8,8,2,1,0,2,6,2,9,9,8,1,7,2,2,1,0,6,1,6,3,8,1,0,4,7,2,3,0,4,2,3,1,0,2,5,5,7,9,5,2,7,1,7,7,7,3,4,4,0,1,8,6,8,9,3,4,7,6,9,6,4,4,2,2,6,2,2,9,9,9,5,8,6,0,1,1,7,1,7,1,0,6,3,3,9,9,4,5,6,6,7,9,2,1,5,2,9,7,9,1,9,0,4,7,6,9,9,7,1,2,6,8,2,4,7,2,8,8,6,3,7,1,2,5,5,7,6,3,6,9,0,0,5,0,1,5,5,9,1,1,0,9,3,2,4,1,9,0,8,5,0,3,6,3,1,9,9,8,8,7,1,6,9,7,0,6,1,9,8,3,1,9,6,3,9,9,2,5,2,2,0,4,9,4,9,5,3,9,6,9,6,7,7,0,0,3,2,3,6,0,6,8,4,1,8,6,4,2,9,7,6,4,9,4,3,0,0,6,7,6,8,5,4,0,3,8,3,3,2,7,5,6,3,2,2,9,9,8,2,3,7,2,5,2,4,9,1,9,0,8,5,0,6,8,9,4,8,8,7,8,5,1,4,1,6,1,7,1,8,8,1,9,5,1,1,2,5,5,8,3,7,9,7,2,7,8,4,6,8,8,9,2,9,0,7,3,9,0,8,9,9,6,9,8,3,2,6,0,7,9,5,3,5,0,1,5,9,4,1,1,0,6,5,2,3,3,8,5,8,2,3,1,2,0,0,1,8,0,7,2,9,1,6,2,7,5,0,4,7,3,5,7,2,1,1,2,8,4,2,7,5,4,4,5,6,4,9,8,2,4,3,8,0,4,5,4,9,5,1,2,5,9,1,3,1,0,7,8,1,9,7,9,7,6,6,4,4,2,0,2,4,0,9,8,1,3,4,7,9,4,2,1,0,3,4,2,0,0,9,3,3,2,5,2,2,3,9,2,4,5,3,3,6,0,3,3,5,5,4,3,5,6,7,2,9,8,4,0,0,2,4,0,6,4,2,8,9,7,0,0,0,9,3,3,9,9,0,2,8,1,8,9,1,7,4,9,4,4,9,3,4,2,7,0,6,0,8,2,6,5,9,2,8,9,6,6,7,2,4,9,6,1,8,4,8,4,2,3,2,8,1,3,7,0,6,9,8,9,5,0,4,3,4,7,2,9,0,6,3,3,9,7,2,6,7,9,6,0,1,6,6,2,2,5,3,2,6,5,3,8,6,0,0,0,9,9,7,8,2,7,6,3,4,8,5,9,5,8,5,4,3,8,0,0,4,7,3,2,0,1,3,8,9,0,4,2,5,5,9,9,8,6,2,8,1,4,5,3,9,5,4,0,4,6,1,1,4,0,0,0,1,9,5,6,6,6,1,2,8,5,0,9,9,1,5,6,2,1,4,1,8,2,5,8,7,6,7,1,6,1,6,2,2,9,8,3,7,7,5,4,6,2,6,2,4,9,0,2,9,0,2,1,1,1,4,7,9,4,8,3,3,3,0,8,5,0,9,4,5,8,8,5,6,4,9,5,7,0,6,8,2,5,4,5,0,9,9,9,0,1,8,4,3,8,6,6,9,6,5,9,8,1,1,9,7,4,8,2,6,7,0,6,2,0,6,2,7,2,5,2,9,4,8,6,1,9,6,5,6,9,1,5,9,6,8,6,6,9,1,8,7,1,4,5,3,1,3,2,0,6,0,4,3,5,3,8,7,8,6,2,5,9,8,3,6,9,8,1,0,2,1,0,4,9,7,9,2,7,6,1,4,1,2,2,0,5,4,6,2,9,9,3,9,5,3,3,8,9,0,0,3,7,8,5,5,7,8,5,5,7,8,6,5,6,1,8,8,0,7,7,6,2,4,3,3,8,7,7,2,2,4,9,4,3,7,2,1,5,7,2,2,4,5,8,3,4,3,9,4,5,0,4,8,4,2,9,0,2,5,4,1,5,5,4,5,0,6,5,7,6,6,5,1,4,8,8,7,6,6,4,3,6,7,0,4,9,0,4,4,2,0,9,4,5,4,4,2,2,0,3,5,9,4,5,0,0,5,1,5,1,3,8,0,6,8,4,0,1,7,9,5,3,4,7,1,4,0,4,6,0,4,0,6,3,9,7,3,1,6,5,0,0,2,4,1,6,0,7,4,2,0,5,4,0,0,3,8,0,8,4,4,7,7,3,7,7,5,4,5,7,9,5,2,3,4,2,4,9,1,7,7,7,1,0,1,9,0,1,5,3,5,0,4,8,7,1,5,0,1,7,0,3,9,9,2,7,5,8,0,5,0,7,6,5,1,9,0,8,1,7,8,6,8,5,2,9,9,2,7,8,9,4,3,1,3,8,4,9,4,9,4,0,1,2,7,0,4,4,3,6,0,5,3,7,3,8,6,7,4,1,2,3,3,9,5,5,0,3,6,5,6,6,6,2,9,2,0,9,8,2,1,1,4,0,9,3,3,2,7,7,0,6,0,1,0,2,9,3,8,6,9,2,7,8,0,7,4,0,2,8,8,2,8,0,4,0,3,7,8,9,4,6,0,0,7,0,9,7,5,0,1,5,5,7,4,7,4,8,5,5,9,1,0,1,9,9,1,0,6,5,0,3,6,3,6,2,2,3,7,9,9,5,1,9,9,8,2,8,6,7,8,3,1,8,1,2,3,3,6,5,5,9,7,0,0,9,7,8,8,2,5,4,6,8,3,5,3,9,5,1,3,8,1,0,4,0,6,4,8,5,9,8,6,6,5,7,4,9,9,0,4,6,9,6,6,6,2,4,8,4,8,0,6,4,0,1,4,9,8,0,4,1,6,5,8,2,7,7,4,3,6,6]"
                    },
                    {
                        "username": "ms681729",
                        "content": "this solution is working properly for all cases expect 9999999999 this case don\\'t know why help me.\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] arr, int k) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n       int sum=0;\\n        int prod=1;\\n        for(int i=arr.length-1;i>=0;i--){\\n            sum+=arr[i]*prod;\\n            prod=prod*10;\\n        }\\n        sum=sum+k;\\n\\n        while(sum!=0){\\n            list.add(sum%10);\\n            sum=sum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "ruchitakb7",
                        "content": "first it stucked at 3rd test then i changed data type to long int now it again stucked at 90 ..now what should i do?"
                    }
                ]
            },
            {
                "id": 1775242,
                "content": [
                    {
                        "username": "thisannie",
                        "content": "Back to back 3 easy problems?? HOW!?"
                    },
                    {
                        "username": "Umair9912",
                        "content": "not exactly easy tho"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "If you are not using LL then :\\n1. Use while loop till array_size > 0 || k > 0\\n2. Inside while :\\n             2.1.Use If to check weather size > 0\\n                    2.1.1Add last element of array into k\\n                   2.1.2 decrease array_size by 1. \\n              2.2.Add last element of K in your list\\n              2.3 remove last element of k\\n             \\n3. IF REQUIRED reverse your list and return \\n\\nHope This will be helpful ....."
                    },
                    {
                        "username": "aashrith_d4",
                        "content": "Easy to understand\\n"
                    },
                    {
                        "username": "simrannasrin",
                        "content": "Can anyone tell me why the code below is not working for edge cases like 9999999+1?  \\n\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        int j=0;\\n        for(int i=0; i<num.length; i++){\\n            j=j*10+num[i];\\n        }\\n\\n        int number=j+k;\\n        ArrayList<Integer> list= new ArrayList<>();\\n\\n        while(number>0){\\n            int digit=number%10;\\n            list.add(digit);\\n            number=number/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "masemune",
                        "content": "Every digit past 2^53 will start losing precision which can cause things like erroneous rounding. If you need to work with larger numbers then use `BigInt`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Adding elements from the left is must efficient. We can do that using linked list or other data structure. In python, we can use $$deque()$$  from $$collections$$. We don't need to import it in **leetcode**. Also we just need to  return this $$deque$$ and it will be accepted."
                    },
                    {
                        "username": "anand_083",
                        "content": "  this is brute force method it work properly but in 3rd case it can not give 0th index can anyone have guts to debug this solution  /\\n        int n=num.length-1;\\n       int base=1;\\n      for(int i=n;i>0;i--){\\n          base=base*10;// base mil gyi //\\n      }\\n        int sum=0;\\n// this loop give me 1000,100,10,0, as my question demand//\\n        for (int i = 0; i <n ; i++) {\\n            int temp=num[i]*base;  // 1*1000\\n            sum=sum+temp;           // 1000\\n            base=base/10;              // update base as 100\\n        }\\n        sum=sum+k+num[num.length-1];\\n// however it give sum properly include 3 rd case //\\n\\n// for printing //\\n        for (int i = n; i>=0 ; i--) {\\n            num[i]=sum%10;\\n            sum=sum/10;\\n        }\\n        return num;\\n// run this code in your local compiler  //// "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "why does this code not work for num = [9,9,9,9,9,9,9,9,9,9]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        int number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        int tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, tempnum % 10);\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@adityadewhy](/adityadewhy) nevermind, even long aint enough for the other test case ie [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "i am assuming the problem was with int data type(int too small to store that big a value)\\nhere\\'s the fix\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        long number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        long tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, (int)(tempnum % 10));\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "parth_chittora",
                        "content": "`class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       long value = num[0];\\n        List<Integer> list = new ArrayList<>();\\n        for(int i = 1;i<num.length;i++){\\n            value = value*10+num[i];\\n        }\\n        value = value+k;\\n        System.out.print(value);\\n        int dig;\\n        int i= 0;\\n        while(value>0){\\n            dig = (int)value%10;\\n            value = value/10;\\n            list.add(list.size()-i,dig);\\n            i++;\\n        }\\n        return list;\\n    }\\n} `\\nWhy is it not giving the ans for the test case 999999999"
                    },
                    {
                        "username": "takezo_shinmen",
                        "content": "AYOO guyz ,  whhats wrong eith this test case\\nnum =\\n[7,8,2,9,2,5,4,7,1,8,0,6,6,7,4,9,0,3,9,9,2,2,6,6,2,5,8,3,6,3,9,6,3,3,1,6,2,7,5,9,8,9,4,4,7,5,0,7,3,8,7,6,0,9,0,7,4,1,1,4,0,7,7,7,6,1,6,5,1,7,4,9,0,4,2,4,4,4,2,6,6,2,1,3,6,7,2,1,9,5,8,3,6,4,2,1,6,6,7,1,0,2,9,3,5,6,8,5,4,2,7,0,3,6,5,0,2,1,1,4,0,1,3,7,7,1,9,1,6,5,9,7,3,3,1,0,9,4,6,5,3,2,0,8,2,7,7,5,4,2,9,9,3,1,9,5,5,4,0,7,3,6,8,9,6,5,1,1,7,0,7,5,3,2,3,1,4,8,2,5,9,6,0,0,2,4,7,9,6,2,3,2,8,5,6,1,0,7,9,1,6,5,6,2,8,5,0,9,2,5,4,0,3,6,0,7,0,3,0,0,8,5,1,2,5,5,1,6,6,0,9,7,9,2,2,7,0,4,3,1,0,4,8,8,6,6,4,6,4,3,1,3,1,5,4,4,3,6,4,5,2,3,7,6,2,4,0,3,7,5,6,8,9,8,6,9,6,9,0,1,3,1,9,0,8,1,9,8,0,4,1,8,1,1,6,0,9,2,8,3,6,0,0,7,2,4,6,3,9,9,2,6,4,8,1,1,1,0,8,8,2,5,9,3,5,4,0,2,5,9,9,1,7,3,7,4,0,1,9,5,5,0,8,2,4,5,9,0,3,9,3,0,6,6,0,7,0,4,2,1,4,8,0,4,5,4,9,9,3,4,0,9,1,1,0,2,0,6,1,2,8,6,3,3,2,5,2,9,9,4,0,0,9,5,7,8,9,2,0,4,0,4,9,1,9,3,9,8,3,6,4,8,7,4,9,6,3,7,8,2,3,4,5,6,0,7,5,2,6,4,6,5,8,9,2,5,6,5,7,1,0,1,2,3,2,2,2,3,4,5,0,8,7,0,8,4,3,6,8,9,9,4,9,5,6,8,3,7,5,9,3,7,5,3,8,2,2,9,1,2,1,7,6,2,4,3,5,8,5,8,4,9,5,4,6,2,7,3,7,2,1,5,9,1,1,6,8,8,6,6,8,1,4,7,7,7,7,3,1,8,5,5,0,3,5,8,6,5,2,9,6,0,0,3,1,3,8,3,7,6,5,3,6,9,7,0,9,0,4,1,6,5,0,6,5,7,7,3,0,9,0,2,9,5,1,9,9,9,8,9,4,4,4,6,1,3,2,0,8,3,6,5,0,8,5,7,3,9,1,3,7,1,3,1,6,9,5,5,1,6,7,5,6,5,1,6,4,6,3,4,1,3,8,8,3,9,5,2,5,5,6,9,3,2,9,9,5,7,0,7,0,5,8,0,7,0,8,0,4,6,0,0,3,7,2,3,8,1,4,6,5,6,4,0,4,8,7,5,8,5,8,1,7,3,7,8,8,5,3,4,1,9,3,0,2,9,6,3,3,4,1,8,5,1,7,4,4,4,9,7,3,7,0,7,5,5,0,0,1,9,2,6,0,9,6,5,1,4,0,2,0,7,5,4,8,8,7,0,4,1,0,8,9,9,3,3,4,0,9,5,7,5,3,6,2,4,1,0,9,1,5,7,5,4,5,6,2,9,9,4,2,1,5,6,1,1,8,8,2,8,0,9,0,8,1,4,9,3,0,6,5,1,3,6,2,1,9,1,2,8,7,0,2,4,7,8,3,1,6,4,1,4,9,9,5,4,0,3,8,5,2,3,7,1,8,4,2,2,5,2,9,6,2,1,3,3,3,9,1,1,3,9,1,0,0,6,7,1,3,3,2,6,9,5,2,8,8,7,2,5,2,7,1,4,2,0,1,9,8,5,6,3,2,2,3,3,1,8,9,8,5,6,4,7,8,6,5,8,8,6,0,5,5,0,8,3,6,3,0,1,3,0,8,2,1,6,9,8,0,5,0,9,4,0,5,8,8,9,8,8,5,0,1,1,1,6,2,2,8,8,0,6,7,8,8,3,5,8,4,9,7,2,1,9,4,1,0,1,3,1,6,1,3,7,8,7,3,5,9,1,5,9,8,3,1,7,3,0,2,0,6,8,5,5,5,3,4,3,0,4,0,2,2,0,5,5,9,2,0,9,7,3,3,3,9,5,0,4,1,3,3,2,2,5,1,9,3,5,6,1,6,3,0,3,1,6,3,8,1,9,9,9,9,9,0,5,0,8,9,2,1,5,9,6,6,8,3,0,3,1,2,9,1,8,2,8,8,1,5,1,9,7,0,3,4,3,7,1,0,2,2,5,0,8,1,6,1,4,4,7,0,2,4,4,9,5,1,7,1,8,2,5,0,1,3,3,5,5,2,2,3,5,8,6,6,0,0,3,9,0,1,8,0,6,2,2,9,1,8,2,6,6,4,9,5,1,6,5,9,5,7,3,8,5,2,3,5,6,3,5,7,2,1,0,4,3,2,2,5,9,3,2,2,1,1,5,1,7,4,6,5,8,9,8,6,2,6,4,2,5,2,4,8,0,1,7,8,3,8,5,3,3,2,9,4,2,8,7,2,8,6,7,8,8,7,9,7,3,0,7,7,6,0,9,1,8,7,2,4,9,0,4,4,3,9,2,6,3,4,2,9,6,2,6,7,6,9,9,7,2,4,9,1,3,5,7,7,8,4,9,1,1,0,8,3,5,6,9,0,5,5,4,0,8,3,6,4,9,1,4,4,9,8,2,2,4,4,0,9,1,1,9,3,5,0,6,8,2,5,7,5,0,7,2,7,7,5,1,7,9,5,8,7,9,7,1,9,1,7,5,0,1,8,1,0,5,1,0,5,9,7,8,9,9,5,6,0,1,9,3,1,1,3,2,3,1,2,8,9,9,0,2,9,5,4,7,3,9,5,1,9,4,6,3,2,0,0,0,8,2,6,1,2,4,9,5,7,9,9,6,7,4,0,7,1,5,4,4,6,2,0,4,0,1,8,7,7,5,8,9,6,6,5,0,6,2,5,5,7,7,7,2,9,6,9,4,8,4,0,4,6,1,5,1,6,7,7,0,6,1,2,8,8,6,4,1,0,5,7,6,4,2,0,2,0,5,1,6,9,4,2,2,0,1,6,5,9,8,6,3,7,3,8,5,0,6,5,7,3,0,6,8,2,1,2,9,9,4,3,0,3,1,2,9,6,8,4,6,9,0,3,6,3,2,5,9,9,4,3,6,2,2,5,8,1,6,9,7,1,9,1,7,1,4,8,2,7,4,9,9,8,8,0,4,3,3,9,8,8,9,7,2,3,4,9,2,0,5,4,4,3,4,8,5,7,4,1,1,9,9,7,5,9,2,7,7,2,3,2,2,0,1,6,9,0,7,8,7,3,9,6,1,9,0,4,5,3,4,2,3,2,1,8,2,0,2,5,4,7,4,2,0,7,1,7,7,8,5,6,2,2,0,2,5,7,2,0,6,6,9,0,1,2,4,0,5,5,2,1,6,8,7,9,7,6,7,1,8,0,3,0,6,1,4,6,9,1,4,5,8,4,8,0,5,7,8,2,8,6,7,4,9,9,8,7,7,1,3,8,7,2,1,7,5,3,7,2,2,2,1,6,1,2,1,3,0,2,4,3,8,8,3,7,5,9,9,7,3,3,8,9,2,3,2,5,5,5,2,6,1,9,2,4,8,0,7,9,5,2,7,3,2,9,2,1,9,9,5,0,9,6,4,5,8,8,9,0,8,8,4,2,6,2,2,2,4,9,7,5,3,3,9,1,0,7,0,0,3,9,4,8,4,8,6,6,4,0,3,4,9,0,4,0,3,9,1,4,5,8,0,2,4,3,8,8,6,6,2,8,4,3,8,3,9,2,4,3,7,4,7,7,9,3,6,3,8,1,2,5,0,9,3,5,0,3,0,5,5,0,3,3,8,8,4,2,3,4,3,9,3,5,2,3,2,8,7,2,2,7,5,9,5,8,9,4,7,6,6,1,5,9,2,8,7,5,6,3,0,7,9,0,0,7,8,7,0,5,2,4,5,9,6,0,0,8,9,3,4,0,7,7,7,3,5,1,3,9,6,1,0,7,3,2,9,3,4,0,8,5,3,2,2,5,7,4,3,6,1,3,0,3,1,4,4,7,4,2,1,1,3,8,4,9,1,0,7,1,1,5,6,8,9,2,0,8,7,7,3,6,6,5,0,8,8,9,0,6,5,9,9,3,2,8,6,1,9,8,2,2,4,4,9,6,1,9,5,5,4,7,4,6,9,7,5,4,5,5,2,7,7,3,6,9,9,0,9,1,3,9,5,4,7,2,8,0,9,9,6,5,9,2,4,9,8,9,9,0,8,5,4,3,0,7,9,1,1,8,6,4,5,7,9,4,3,7,5,3,1,1,6,0,0,3,8,1,2,9,3,3,3,9,3,5,8,5,9,6,3,9,8,5,3,4,9,2,0,8,6,3,5,2,5,4,4,3,7,9,9,9,5,9,1,2,4,5,4,0,0,4,1,2,3,1,7,9,3,1,4,8,7,1,1,1,5,0,8,1,8,8,4,9,2,6,6,7,5,4,4,7,1,3,1,5,4,1,4,7,3,6,0,8,7,6,6,1,7,9,1,6,5,4,8,2,8,1,8,4,0,6,8,4,5,3,1,4,2,2,2,9,4,0,1,0,5,7,2,5,3,4,3,9,0,8,0,8,6,4,5,5,9,8,3,4,5,6,6,8,0,7,8,0,7,3,6,7,8,4,6,3,6,0,3,0,7,5,6,3,4,5,2,1,5,7,6,3,4,8,9,7,9,8,9,3,7,1,3,1,1,2,7,1,4,1,0,2,9,6,5,5,4,0,3,1,1,1,2,2,8,1,3,1,1,6,9,7,5,2,5,4,8,7,7,4,9,3,9,0,1,8,9,5,6,7,9,6,2,1,0,9,3,5,9,4,4,4,2,6,8,0,3,4,5,7,2,0,1,4,2,0,6,1,9,8,7,6,1,1,2,8,3,8,6,1,9,1,2,2,5,4,3,2,5,2,8,2,2,7,5,7,6,7,6,9,9,7,3,9,8,6,2,6,9,5,9,3,3,7,0,9,8,5,1,2,7,6,5,7,5,6,9,5,6,7,6,7,3,4,5,0,9,4,9,2,6,8,8,1,7,2,1,8,8,7,1,5,7,6,5,6,3,6,7,6,3,4,6,3,1,3,9,4,7,6,1,0,9,2,0,9,0,6,2,5,0,4,8,8,3,2,8,5,6,9,0,0,2,7,8,7,7,0,2,3,9,6,0,8,0,6,6,1,6,9,7,9,1,6,4,0,5,9,2,8,1,5,4,3,2,1,9,9,1,8,3,5,6,9,8,0,4,7,8,8,7,9,8,7,4,0,5,9,8,1,8,1,8,0,5,2,3,9,9,6,2,1,5,7,5,4,7,1,7,3,3,6,8,8,3,7,7,9,2,1,7,0,9,1,7,2,8,5,5,4,3,2,4,8,8,2,3,0,4,9,3,3,6,6,0,7,0,0,8,9,8,6,6,4,5,9,4,9,8,2,5,1,8,4,2,7,0,7,0,0,4,2,1,6,7,0,6,0,5,6,4,0,1,7,5,9,2,9,4,9,6,3,9,5,8,0,0,2,8,0,9,6,7,8,8,4,5,6,8,0,5,8,4,3,8,8,3,4,9,3,3,6,5,4,9,9,3,0,4,3,0,6,7,4,7,5,8,7,5,1,0,8,0,1,4,8,8,3,3,3,1,8,4,4,3,8,5,7,9,3,9,5,5,0,4,5,0,7,8,2,2,9,1,6,1,6,5,7,5,8,7,5,7,6,6,0,8,2,1,0,3,0,2,2,7,4,9,8,2,6,7,1,0,8,1,8,0,5,1,0,0,1,3,1,8,9,2,8,9,1,2,7,0,2,3,6,1,1,5,0,2,1,6,2,5,9,3,1,9,7,2,8,7,3,5,7,4,3,3,1,1,9,3,4,8,8,4,6,2,6,4,3,8,7,7,1,3,4,4,6,9,4,1,3,2,0,7,2,4,1,2,9,9,1,4,1,3,5,1,9,4,1,5,4,6,0,3,0,8,1,7,6,9,4,9,1,8,2,4,9,5,9,6,9,3,3,2,5,0,1,8,4,8,1,6,0,4,9,1,3,9,4,5,0,6,7,1,7,4,6,5,0,8,1,0,0,1,2,3,5,2,9,8,9,6,4,6,4,5,5,1,2,2,3,3,7,1,3,9,6,8,8,3,6,3,4,4,0,0,6,7,4,2,8,7,8,7,8,6,8,1,4,3,6,5,0,1,5,3,4,0,9,0,1,6,8,3,9,3,9,1,1,4,4,4,1,5,7,3,8,5,7,1,8,9,0,9,3,1,0,3,8,3,1,9,2,6,2,5,4,4,9,0,2,5,1,5,1,8,9,2,7,7,9,7,2,2,6,7,7,9,0,7,2,8,3,6,2,0,0,6,7,3,4,7,3,0,8,8,5,8,2,7,6,2,5,1,8,2,6,6,3,7,2,3,6,7,5,8,1,9,4,5,6,4,6,7,7,7,7,3,9,9,4,8,3,5,5,7,1,7,4,5,6,0,3,5,5,3,4,1,4,5,6,4,8,9,6,8,0,1,9,5,6,6,8,6,9,4,6,2,5,9,9,6,4,4,5,5,8,0,9,2,3,5,5,6,8,9,4,2,7,9,2,8,8,2,1,1,4,3,7,5,4,5,3,6,3,5,5,3,9,8,5,0,0,1,1,0,7,9,2,5,8,1,0,6,0,6,5,6,5,9,7,1,0,1,9,9,3,1,1,7,0,4,3,1,8,7,3,8,2,3,8,7,8,2,3,6,6,4,5,0,7,4,8,3,4,0,7,1,8,6,0,5,0,8,5,1,3,3,2,7,4,9,1,6,5,9,5,1,1,1,6,2,1,5,3,6,2,4,4,6,1,1,1,8,7,1,9,9,4,7,2,3,4,5,9,7,6,9,5,3,4,6,8,2,0,8,4,9,8,6,8,4,6,7,4,7,7,8,2,6,7,1,2,1,0,6,0,5,1,9,8,2,2,9,4,6,0,7,0,0,5,8,5,3,2,9,4,1,6,7,2,0,7,3,6,8,1,9,8,0,8,8,7,0,6,1,9,8,7,4,5,0,8,6,9,8,6,2,7,9,3,5,1,9,2,5,8,8,5,1,2,2,2,1,6,9,7,8,4,8,9,0,2,3,8,7,9,6,9,7,2,6,2,4,6,6,7,8,9,4,2,9,7,3,7,1,3,5,5,9,8,4,1,7,0,6,9,6,3,4,7,0,7,4,4,5,8,9,1,1,3,9,1,3,3,8,3,0,0,5,7,2,3,3,4,7,1,7,5,5,7,0,3,8,5,1,7,0,5,9,0,2,0,8,7,5,3,6,4,6,9,3,0,1,6,8,9,9,9,1,2,0,0,9,5,2,9,4,5,8,4,0,5,7,6,5,5,4,0,2,2,3,7,7,8,6,8,0,6,7,8,4,6,0,5,1,4,1,8,9,6,9,9,5,8,4,8,4,0,1,0,8,6,9,4,0,8,6,9,3,6,0,8,1,4,6,8,0,4,6,0,2,1,2,5,4,5,1,6,1,4,7,4,3,1,5,4,4,5,5,1,1,3,3,5,7,4,2,7,0,1,3,5,9,6,8,2,2,2,0,0,8,1,3,8,9,3,2,1,1,1,3,9,6,1,1,1,7,7,7,1,4,4,5,0,1,3,7,4,7,0,9,7,7,1,2,9,1,7,9,8,3,3,6,5,2,3,1,9,2,9,3,8,7,5,7,1,4,7,6,9,2,5,8,4,6,9,8,1,2,0,4,2,1,9,8,4,9,7,6,3,0,4,8,8,3,2,2,9,5,5,7,2,3,2,7,6,8,2,3,4,4,6,4,6,1,5,2,7,8,4,9,1,4,2,9,2,9,1,6,9,4,1,2,6,1,4,8,4,9,9,3,4,5,5,5,4,0,2,7,9,5,7,7,1,0,9,9,2,9,4,9,1,3,1,2,4,6,3,2,4,6,7,9,1,5,2,3,2,6,4,4,5,8,5,9,9,0,5,8,5,9,1,0,9,7,9,7,6,8,6,6,9,9,6,6,3,0,8,4,9,9,3,3,2,0,7,9,7,8,2,9,2,7,9,9,0,2,8,4,0,4,9,0,3,9,4,6,5,6,6,9,1,3,5,5,6,4,4,6,1,2,2,4,4,2,2,0,4,1,6,3,4,7,0,7,0,3,3,6,5,7,7,8,3,9,9,9,5,2,3,7,6,7,9,4,0,8,8,3,5,3,7,6,5,8,1,9,5,9,2,7,4,9,5,2,4,1,8,7,6,6,2,8,6,5,3,4,6,2,2,5,2,5,3,9,3,7,2,4,2,5,7,3,3,2,4,3,1,7,9,3,5,6,3,0,0,0,8,5,9,9,6,3,0,0,6,1,2,1,4,0,2,0,1,5,8,0,4,5,4,0,8,8,1,5,4,6,5,9,7,6,8,4,2,2,5,9,0,5,0,0,3,5,3,1,8,7,6,2,0,4,3,1,3,7,6,4,9,8,5,0,9,6,6,5,7,3,2,2,0,0,1,7,6,6,9,2,0,4,2,8,0,6,5,5,3,0,0,7,4,6,7,9,8,3,9,6,1,6,3,9,6,3,4,5,8,4,9,0,1,8,4,0,8,8,8,4,2,6,8,1,3,7,3,0,9,6,5,3,8,3,8,8,1,9,5,5,3,7,7,2,5,8,7,7,0,5,5,7,9,2,9,2,5,9,7,1,6,9,9,2,9,6,2,4,8,8,6,3,6,0,7,6,6,0,4,3,2,3,7,3,9,6,5,7,0,8,5,3,5,8,3,5,9,7,4,5,0,8,7,1,8,2,3,5,0,6,8,4,8,5,7,1,0,3,2,6,6,8,3,7,9,8,0,6,2,9,0,0,4,5,8,5,5,9,4,8,0,7,1,3,7,5,2,4,4,4,6,0,3,0,3,6,2,9,9,8,5,5,1,2,0,9,2,2,9,7,3,4,9,4,5,7,2,2,9,9,9,0,5,4,5,6,0,4,7,5,7,0,3,2,8,0,0,1,9,0,6,9,2,6,8,8,5,9,8,1,5,1,4,2,5,3,6,0,5,6,5,1,1,7,1,2,4,3,1,0,4,6,4,5,9,0,0,1,2,5,4,1,5,9,4,8,2,8,7,5,8,9,3,5,2,2,6,7,0,6,6,9,6,6,1,3,9,7,9,1,1,4,4,3,5,1,8,5,9,0,6,1,8,2,6,9,2,3,5,5,7,2,5,4,0,0,5,9,7,5,1,5,7,3,5,8,4,1,0,7,8,4,7,2,1,9,6,5,3,2,2,4,1,4,4,7,5,1,9,3,2,7,2,9,4,3,0,5,5,8,3,4,2,8,2,0,9,0,2,1,6,3,8,8,4,2,6,1,0,0,6,0,2,4,2,2,1,4,2,0,1,5,6,1,8,5,5,8,7,4,3,7,7,7,6,7,6,0,8,8,7,9,0,1,9,6,1,2,8,0,7,5,3,5,8,1,0,3,2,7,7,3,2,3,8,7,7,5,7,6,4,3,2,5,5,0,2,9,6,7,3,0,3,2,0,8,0,0,5,1,8,2,4,1,8,1,7,6,3,2,1,5,3,8,5,2,4,9,9,7,1,9,1,5,9,7,8,0,4,4,8,8,8,6,8,4,4,0,3,8,3,8,2,4,5,5,2,0,3,5,9,6,5,2,6,3,5,0,6,0,5,2,2,0,9,6,2,8,7,9,3,6,1,6,2,2,8,5,2,6,3,7,9,5,9,3,1,4,9,2,9,5,4,8,9,9,9,3,2,7,2,7,6,4,3,5,2,4,1,4,3,1,9,8,8,8,7,6,7,6,6,0,2,5,7,7,9,4,5,0,0,5,8,9,7,6,0,1,3,5,7,0,6,7,8,9,4,6,1,3,3,6,6,1,0,6,4,4,4,6,3,2,6,2,9,3,0,3,4,7,3,6,0,9,8,3,4,6,9,7,0,0,7,7,1,1,5,8,3,8,4,9,0,5,6,6,4,0,9,0,9,3,9,7,4,2,1,5,7,6,5,9,9,9,2,7,0,5,8,2,8,2,0,9,9,7,1,3,5,1,8,7,7,8,5,4,3,2,3,5,4,8,2,2,6,8,7,8,0,9,7,1,4,0,9,4,9,0,0,4,6,2,9,0,7,0,1,4,7,5,6,5,3,8,2,3,9,9,8,7,4,0,8,1,9,5,7,5,6,0,0,9,3,7,4,6,9,9,3,3,7,6,1,9,8,1,3,3,5,4,2,0,2,4,3,9,8,4,5,2,4,5,0,6,3,5,1,9,9,5,6,1,4,1,6,8,1,7,0,0,5,2,2,2,2,7,4,2,6,0,1,5,7,1,8,9,7,6,3,7,7,0,3,4,6,2,7,3,1,1,3,3,9,6,5,6,5,8,6,6,2,1,1,3,7,5,3,6,7,2,1,7,2,5,1,0,8,4,2,6,4,1,4,3,2,8,7,0,7,9,9,6,5,0,4,0,3,9,6,7,8,4,9,5,4,9,0,4,8,4,7,6,8,4,5,9,1,1,2,6,8,8,2,8,8,5,7,9,4,4,8,9,0,2,7,2,1,9,5,2,6,4,8,9,4,7,3,1,3,9,7,2,1,6,8,1,8,8,7,7,7,3,7,2,5,0,8,1,6,4,6,6,1,0,7,8,2,8,3,3,2,3,7,7,5,8,2,1,1,2,0,3,9,6,8,8,9,5,8,6,9,8,9,5,3,6,8,6,4,4,2,6,6,2,6,8,7,4,0,1,8,2,9,3,1,2,1,4,6,6,1,8,5,4,7,1,7,2,5,9,9,0,4,9,4,5,9,9,3,0,4,5,1,4,6,2,3,5,6,8,8,3,2,1,4,6,9,2,0,4,5,8,4,0,6,1,9,7,3,0,0,7,6,5,2,6,5,4,3,7,1,9,9,7,0,7,9,9,3,0,3,2,3,3,9,6,0,2,2,5,4,4,2,0,5,8,8,8,8,9,1,6,6,5,0,1,0,7,8,3,3,9,1,8,7,4,8,7,4,1,8,7,5,0,5,4,3,4,5,0,8,1,7,0,4,7,1,6,6,0,5,4,1,4,9,0,6,3,4,3,8,9,3,4,7,0,9,2,1,8,2,9,9,2,0,0,4,9,7,1,1,0,7,0,6,0,3,4,6,7,4,3,6,6,4,1,0,1,1,8,6,9,9,0,6,4,8,4,7,2,4,3,9,8,2,9,4,2,7,2,9,5,0,3,4,1,8,5,5,6,6,2,0,4,6,1,4,9,8,5,2,5,1,2,1,3,0,9,2,3,3,4,2,6,1,7,8,7,1,2,3,9,9,9,7,2,1,1,1,5,9,6,1,4,2,5,2,4,9,0,4,3,1,5,1,8,2,1,0,8,0,2,8,8,8,6,5,4,4,0,3,6,0,7,0,9,6,4,0,1,5,4,2,0,5,7,4,0,5,7,1,6,2,0,1,0,8,3,5,7,4,0,9,5,5,7,5,8,9,6,5,9,8,8,3,7,8,8,8,9,1,7,6,3,8,1,5,0,0,3,6,3,7,8,9,5,3,2,0,4,6,9,8,5,8,2,3,1,9,7,3,2,6,2,3,7,6,5,7,8,9,1,2,6,6,5,2,2,9,1,2,0,5,9,7,7,8,9,3,9,0,4,7,7,1,8,4,1,7,6,8,0,4,2,3,8,0,9,4,0,3,1,7,3,9,9,8,2,1,0,7,9,0,3,0,1,5,0,7,4,6,2,9,8,2,9,9,6,9,1,2,2,3,7,5,2,0,2,7,7,8,5,6,8,4,8,2,2,5,4,9,3,8,1,7,3,0,1,0,2,3,8,3,6,8,6,4,6,5,6,1,3,4,7,7,1,7,8,7,0,8,4,8,4,5,6,0,9,3,3,1,7,2,6,8,0,9,8,4,2,9,8,4,7,3,6,0,8,4,9,7,4,4,6,0,9,9,3,7,1,9,2,0,2,3,9,1,3,7,7,6,4,4,3,2,3,6,6,0,8,4,5,4,5,8,1,9,0,8,1,1,5,7,4,1,7,8,5,1,6,4,1,1,6,2,7,5,3,6,3,6,0,4,4,6,8,7,9,8,2,1,7,3,4,7,9,7,8,5,6,6,8,8,8,2,6,6,3,8,4,1,4,4,3,2,6,6,0,2,5,4,6,7,7,8,4,3,9,0,4,0,6,1,8,0,6,7,7,4,0,7,8,5,7,8,1,5,4,2,7,1,5,9,2,3,7,4,8,5,6,7,7,3,1,1,5,5,7,3,3,8,6,1,2,3,5,3,2,5,6,6,3,6,7,2,7,5,1,4,1,3,8,7,6,6,2,2,1,2,2,3,3,0,0,1,6,8,6,6,0,6,5,2,4,6,7,3,0,3,5,2,0,8,7,7,0,6,0,2,4,3,3,6,5,6,2,8,8,2,6,7,9,0,7,0,9,3,4,3,2,9,0,1,8,5,3,0,6,8,4,5,6,0,0,0,5,4,6,3,9,0,6,0,2,1,1,3,1,5,7,4,0,5,2,2,4,5,4,6,4,7,5,9,2,4,4,2,5,7,4,7,0,7,1,8,8,8,9,9,6,8,4,7,9,4,8,8,9,9,2,8,8,9,2,2,4,8,1,2,3,9,8,2,9,4,8,7,5,6,1,4,6,2,2,2,5,3,0,5,8,4,7,2,2,7,6,0,6,7,9,5,7,2,2,2,9,7,1,6,2,9,5,4,6,1,4,7,2,9,0,6,6,4,5,6,8,3,2,0,0,0,8,7,5,6,3,8,5,8,9,8,6,4,5,0,7,7,3,7,1,4,2,0,4,9,7,8,5,0,9,6,5,3,0,4,5,3,0,0,1,1,2,3,9,9,0,6,5,9,9,7,2,0,4,1,2,2,4,4,8,2,1,9,5,6,1,5,0,9,1,9,8,3,7,3,5,9,4,1,3,1,3,2,4,9,3,4,5,9,7,2,2,5,1,4,3,0,1,6,4,1,7,3,2,0,1,1,4,8,7,8,2,3,1,1,7,6,6,2,6,4,9,3,7,5,1,3,4,0,0,7,3,0,8,1,0,9,1,9,6,5,7,9,1,6,5,7,8,3,7,2,2,0,2,4,0,8,5,1,2,8,4,1,2,1,2,1,0,4,3,6,1,4,9,0,5,5,4,9,2,3,5,5,9,3,8,8,6,2,6,8,1,9,4,7,8,9,3,7,8,2,0,3,6,8,6,2,2,6,0,5,1,0,6,4,2,8,8,3,5,8,8,2,6,9,0,0,0,1,8,8,6,3,5,9,5,2,6,7,1,6,6,5,8,7,0,9,5,6,3,7,2,7,1,7,2,3,4,1,2,2,9,0,0,7,0,4,7,4,4,1,1,6,8,6,1,9,0,6,7,7,5,3,4,3,1,0,8,1,6,2,4,1,9,7,5,1,7,2,6,0,9,3,3,0,6,1,5,1,3,9,3,7,1,7,8,1,8,4,2,9,0,7,2,6,1,2,4,0,9,3,7,1,0,6,5,1,7,5,6,3,7,1,1,7,7,9,1,7,3,1,3,6,3,9,3,3,0,2,7,5,1,3,0,4,0,0,2,6,3,9,2,0,1,3,4,6,4,8,8,8,0,2,2,8,4,7,6,9,6,8,3,9,0,3,8,9,4,6,7,8,3,0,5,6,6,4,6,6,1,9,8,0,4,9,9,2,7,6,6,8,3,9,1,0,9,8,0,3,7,6,4,8,9,3,1,2,2,4,8,4,8,5,7,9,7,4,9,1,5,8,5,9,1,0,5,8,8,2,0,8,8,1,4,2,2,0,5,7,6,0,3,3,8,1,8,3,9,9,9,6,3,6,2,2,7,8,3,3,2,7,1,2,1,4,0,2,6,6,9,4,9,5,2,5,1,3,5,3,7,7,7,0,2,4,7,6,1,1,0,4,4,2,3,8,8,7,8,4,2,3,0,2,9,5,4,2,4,4,5,2,0,2,1,4,9,4,0,0,3,0,4,8,8,5,4,7,1,4,2,8,1,5,3,6,1,5,9,9,0,5,1,1,4,2,9,3,0,2,4,3,0,8,4,1,6,3,7,5,6,6,6,4,3,9,2,6,0,6,1,4,1,0,6,4,5,0,2,1,6,2,3,8,3,5,5,4,3,1,8,7,9,8,3,9,3,2,2,6,6,9,4,8,6,7,6,7,5,5,1,4,6,5,7,7,2,4,9,6,2,4,8,8,4,6,4,1,5,6,6,4,2,3,6,7,8,5,7,9,8,0,9,8,9,0,1,9,6,1,7,6,2,4,9,2,8,9,0,2,5,3,8,5,0,5,7,1,5,4,5,1,9,7,3,7,2,5,5,1,5,7,7,4,0,1,4,6,0,0,8,2,8,6,7,4,9,7,4,7,5,6,0,9,9,9,4,3,4,5,9,4,6,4,3,3,8,0,3,2,6,3,7,0,5,0,0,9,5,2,2,7,3,0,2,4,7,5,0,0,5,1,9,5,5,6,4,8,8,8,5,4,2,5,1,0,2,3,0,6,0,7,4,2,8,2,4,5,3,8,9,5,5,6,0,9,3,0,9,0,9,5,4,3,6,7,4,4,0,2,2,9,4,6,6,9,8,1,1,7,4,5,4,9,7,7,0,1,6,5,2,3,6,1,5,5,3,9,1,7,6,4,2,0,4,0,9,3,5,1,9,7,2,9,5,9,4,9,8,7,9,2,7,0,5,4,4,7,4,5,2,2,8,8,7,0,3,7,8,5,1,5,6,8,4,5,3,8,6,1,0,2,5,7,4,4,4,0,7,7,2,3,6,4,9,9,0,5,2,3,3,0,2,9,8,8,2,9,4,7,6,1,3,9,3,0,7,1,9,0,6,5,4,7,4,8,3,0,9,6,2,8,9,4,6,6,0,9,9,7,1,9,4,9,5,5,9,3,9,6,4,5,1,0,1,7,5,5,6,3,6,9,4,6,6,1,8,2,0,6,2,0,9,5,0,0,4,5,4,2,0,4,5,1,2,3,5,6,6,2,5,5,8,9,6,8,8,4,6,1,6,7,9,0,1,4,6,3,6,8,7,4,6,2,5,3,0,0,5,4,1,3,2,5,1,5,2,4,5,3,2,5,3,5,2,9,4,6,5,4,0,6,4,3,6,0,8,3,9,4,6,9,4,7,4,8,7,6,6,9,4,2,1,1,3,0,5,0,0,2,3,7,1,7,7,1,6,4,6,0,1,4,4,6,5,8,8,6,7,3,8,2,6,2,6,6,7,7,5,8,9,1,6,7,3,0,8,6,0,6,4,2,0,8,5,2,7,8,2,5,6,8,0,4,7,0,3,7,5,8,6,8,6,5,6,2,4,2,4,2,4,3,6,8,3,2,0,3,8,3,9,2,8,3,7,4,5,9,1,0,7,4,2,3,7,9,9,9,1,2,5,1,7,9,1,3,9,7,5,2,4,8,4,2,9,5,5,7,1,1,4,1,0,4,6,4,2,3,3,2,7,0,4,6,6,0,5,6,0,7,3,3,2,1,8,7,2,8,3,8,4,7,6,1,2,0,4,5,2,4,8,3,9,0,1,8,1,4,9,6,6,8,8,1,4,0,0,5,2,3,7,2,1,0,3,7,1,5,9,8,6,4,4,9,7,7,8,3,2,5,9,7,1,7,7,4,3,3,6,0,6,5,9,4,4,6,9,6,3,7,8,0,1,8,6,2,2,9,2,8,1,7,0,9,6,3,0,6,7,2,7,0,6,9,6,4,7,8,2,2,6,3,1,7,6,4,7,6,1,4,9,4,0,1,7,3,6,8,4,9,3,4,7,3,7,3,3,8,9,9,1,1,3,7,7,3,3,9,6,4,0,5,2,6,0,0,1,1,9,0,9,0,9,8,5,4,9,7,9,5,4,6,2,5,7,0,1,7,1,0,8,5,0,5,9,7,4,1,6,1,9,3,5,3,8,8,9,4,8,5,2,5,3,4,8,3,9,7,3,7,4,6,0,6,6,4,8,5,4,9,6,1,3,1,9,7,5,4,9,0,2,4,3,1,1,3,6,6,9,5,2,6,4,2,1,9,0,6,9,5,1,9,3,2,8,4,6,6,4,1,8,6,6,9,2,7,3,3,7,0,4,1,8,2,7,7,9,9,7,1,4,8,2,2,6,9,6,2,5,8,7,0,7,4,1,3,7,4,8,5,5,2,8,0,8,8,8,3,4,4,5,3,0,2,7,3,4,2,9,8,9,3,1,3,9,2,6,0,9,0,5,3,6,6,2,2,9,4,4,4,9,2,1,7,4,2,1,0,1,8,1,7,7,2,3,7,9,8,0,4,1,8,9,9,8,1,0,5,7,4,6,6,5,2,4,9,1,1,9,9,6,4,8,7,4,8,4,0,5,4,3,0,3,9,6,7,6,6,2,7,3,1,5,7,2,5,6,7,9,3,2,1,3,5,6,1,2,0,1,9,2,5,1,1,2,5,6,4,4,7,2,2,6,8,6,8,2,1,3,0,8,5,4,0,9,8,6,9,9,7,3,2,6,4,9,4,4,9,0,0,8,8,6,0,8,7,6,7,0,1,8,5,8,7,7,6,5,0,7,1,0,3,7,3,2,6,4,7,7,1,7,3,3,1,3,3,0,2,5,5,2,7,3,8,7,8,8,9,4,6,3,2,6,9,9,1,8,0,9,5,3,8,0,9,4,0,0,5,4,2,2,0,5,1,8,4,8,6,4,6,2,3,5,8,3,8,5,7,2,6,2,4,3,2,1,7,9,1,3,2,5,8,2,3,3,4,7,1,6,1,0,9,8,8,3,4,9,6,0,8,5,2,3,3,3,2,8,1,8,2,5,4,7,7,3,8,6,6,3,4,5,3,0,9,2,3,3,0,3,5,0,4,9,9,9,5,3,2,3,1,2,1,3,0,6,1,5,0,9,9,5,7,0,9,4,7,2,6,9,3,4,8,4,5,4,3,9,1,3,1,9,9,3,9,5,5,5,3,1,8,7,9,2,4,3,1,8,7,5,3,7,5,5,7,3,8,3,8,0,5,6,4,4,9,1,3,6,7,9,3,3,8,9,9,2,5,9,7,1,2,5,6,4,7,6,8,1,8,7,0,8,3,7,3,4,2,7,3,8,8,6,5,4,8,5,3,5,1,9,9,6,1,4,8,0,6,2,3,6,7,5,2,0,1,8,0,6,0,5,6,6,3,9,9,5,9,6,9,8,7,7,1,7,2,1,8,9,1,7,5,5,6,0,5,7,8,3,3,2,1,9,5,5,6,6,1,7,9,1,6,2,9,6,1,6,2,1,4,4,2,8,9,1,0,7,1,5,6,9,9,6,6,5,9,7,5,2,0,2,1,1,4,4,5,5,5,4,1,8,9,1,7,8,8,6,2,2,8,8,6,5,7,8,2,6,0,4,4,4,9,0,3,7,6,2,3,1,1,7,5,7,9,7,5,0,8,2,0,2,3,5,2,6,9,0,7,8,5,6,6,4,2,7,4,8,2,1,2,1,5,2,1,5,7,5,7,0,7,0,2,4,2,1,9,1,7,2,5,5,1,8,5,8,6,1,0,3,1,7,9,3,8,1,9,3,6,8,3,6,7,2,2,2,2,6,8,3,3,1,2,2,3,0,4,6,1,1,8,7,6,8,3,9,9,6,3,6,3,6,6,0,8,2,0,5,8,8,6,0,0,9,9,6,3,8,7,1,6,7,2,1,3,5,7,2,4,3,5,1,0,9,3,6,1,9,8,7,6,5,8,9,4,0,2,7,4,3,7,0,9,3,2,5,1,4,1,3,1,4,6,7,9,4,7,0,9,5,9,4,6,6,8,1,4,2,4,7,0,9,8,2,3,8,7,9,4,1,8,2,5,9,5,8,5,8,0,6,3,2,4,5,6,6,9,2,6,2,9,8,1,8,2,6,9,5,3,1,9,4,9,2,1,0,5,0,5,9,1,9,7,5,9,7,9,1,4,4,0,1,9,6,3,0,5,5,1,9,3,6,6,8,1,9,9,3,1,3,6,6,2,5,7,5,7,0,9,9,5,0,1,4,8,7,3,8,8,6,2,0,3,7,4,9,7,1,8,0,5,4,0,0,4,0,3,1,5,4,7,0,1,0,5,2,4,7,8,0,2,1,5,4,9,5,9,6,1,4,9,1,6,5,2,4,8,5,5,9,5,0,1,2,2,1,9,9,7,6,5,8,6,4,2,2,7,7,7,3,2,9,2,2,9,2,6,4,2,9,2,2,8,0,7,6,6,5,5,6,3,7,4,8,7,9,2,6,1,7,7,8,6,6,2,1,9,1,0,0,9,7,4,1,5,7,3,4,0,3,0,5,1,4,0,5,2,6,2,1,3,8,8,7,2,6,2,6,8,9,5,0,3,7,8,6,4,8,5,1,2,1,1,2,4,7,5,0,2,8,2,8,9,0,8,1,6,9,0,7,5,8,2,9,2,5,2,3,6,0,3,8,4,4,3,6,9,1,3,8,6,1,0,9,2,7,1,7,5,9,9,4,5,0,0,0,9,2,7,8,6,4,1,8,8,9,9,0,5,6,3,8,3,1,6,8,3,3,9,3,9,2,5,9,7,1,1,2,3,4,8,6,7,2,5,5,4,7,2,8,6,1,1,1,9,0,2,9,2,1,7,2,6,3,0,2,7,7,7,8,6,7,7,3,3,2,3,6,0,7,3,4,8,3,6,7,0,9,0,8,4,5,8,9,9,1,1,0,2,7,3,8,8,2,4,4,6,8,9,1,6,7,8,7,6,0,7,3,2,8,8,9,8,7,7,1,6,3,0,4,5,3,3,6,6,0,1,6,4,0,8,3,4,8,2,4,8,2,4,4,3,4,9,2,6,6,2,2,5,4,0,0,3,7,8,8,2,1,6,2,9,6,2,0,3,2,6,1,1,4,6,6,0,6,7,9,4,4,4,4,4,5,1,8,6,2,6,2,3,7,5,9,9,0,3,2,5,7,8,3,3,9,3,8,7,5,0,6,2,3,7,4,7,5,9,3,6,9,4,4,8,4,4,1,4,2,2,7,2,0,3,8,3,4,0,7,8,4,0,2,1,5,1,8,9,4,6,7,2,4,8,3,5,5,9,3,2,4,6,1,8,6,2,5,9,1,2,9,0,5,0,4,8,8,9,0,7,0,8,0,4,3,0,9,7,7,5,0,2,0,1,7,6,6,8,2,3,1,2,6,9,9,7,6,5,4,6,9,7,2,7,6,1,0,5,0,4,7,2,2,1,2,5,3,7,2,0,2,6,2,9,1,1,2,4,5,4,4,1,0,0,7,3,0,5,8,5,2,5,6,2,9,7,4,9,5,8,6,6,4,4,9,8,4,4,3,9,9,0,2,3,5,9,3,9,2,7,1,1,5,0,3,1,8,7,9,9,7,2,9,0,3,6,9,9,5,5,3,4,7,7,7,0,2,5,4,4,8,8,2,1,0,2,6,2,9,9,8,1,7,2,2,1,0,6,1,6,3,8,1,0,4,7,2,3,0,4,2,3,1,0,2,5,5,7,9,5,2,7,1,7,7,7,3,4,4,0,1,8,6,8,9,3,4,7,6,9,6,4,4,2,2,6,2,2,9,9,9,5,8,6,0,1,1,7,1,7,1,0,6,3,3,9,9,4,5,6,6,7,9,2,1,5,2,9,7,9,1,9,0,4,7,6,9,9,7,1,2,6,8,2,4,7,2,8,8,6,3,7,1,2,5,5,7,6,3,6,9,0,0,5,0,1,5,5,9,1,1,0,9,3,2,4,1,9,0,8,5,0,3,6,3,1,9,9,8,8,7,1,6,9,7,0,6,1,9,8,3,1,9,6,3,9,9,2,5,2,2,0,4,9,4,9,5,3,9,6,9,6,7,7,0,0,3,2,3,6,0,6,8,4,1,8,6,4,2,9,7,6,4,9,4,3,0,0,6,7,6,8,5,4,0,3,8,3,3,2,7,5,6,3,2,2,9,9,8,2,3,7,2,5,2,4,9,1,9,0,8,5,0,6,8,9,4,8,8,7,8,5,1,4,1,6,1,7,1,8,8,1,9,5,1,1,2,5,5,8,3,7,9,7,2,7,8,4,6,8,8,9,2,9,0,7,3,9,0,8,9,9,6,9,8,3,2,6,0,7,9,5,3,5,0,1,5,9,4,1,1,0,6,5,2,3,3,8,5,8,2,3,1,2,0,0,1,8,0,7,2,9,1,6,2,7,5,0,4,7,3,5,7,2,1,1,2,8,4,2,7,5,4,4,5,6,4,9,8,2,4,3,8,0,4,5,4,9,5,1,2,5,9,1,3,1,0,7,8,1,9,7,9,7,6,6,4,4,2,0,2,4,0,9,8,1,3,4,7,9,4,2,1,0,3,4,2,0,0,9,3,3,2,5,2,2,3,9,2,4,5,3,3,6,0,3,3,5,5,4,3,5,6,7,2,9,8,4,0,0,2,4,0,6,4,2,8,9,7,0,0,0,9,3,3,9,9,0,2,8,1,8,9,1,7,4,9,4,4,9,3,4,2,7,0,6,0,8,2,6,5,9,2,8,9,6,6,7,2,4,9,6,1,8,4,8,4,2,3,2,8,1,3,7,0,6,9,8,9,5,0,4,3,4,7,2,9,0,6,3,3,9,7,2,6,7,9,6,0,1,6,6,2,2,5,3,2,6,5,3,8,6,0,0,0,9,9,7,8,2,7,6,3,4,8,5,9,5,8,5,4,3,8,0,0,4,7,3,2,0,1,3,8,9,0,4,2,5,5,9,9,8,6,2,8,1,4,5,3,9,5,4,0,4,6,1,1,4,0,0,0,1,9,5,6,6,6,1,2,8,5,0,9,9,1,5,6,2,1,4,1,8,2,5,8,7,6,7,1,6,1,6,2,2,9,8,3,7,7,5,4,6,2,6,2,4,9,0,2,9,0,2,1,1,1,4,7,9,4,8,3,3,3,0,8,5,0,9,4,5,8,8,5,6,4,9,5,7,0,6,8,2,5,4,5,0,9,9,9,0,1,8,4,3,8,6,6,9,6,5,9,8,1,1,9,7,4,8,2,6,7,0,6,2,0,6,2,7,2,5,2,9,4,8,6,1,9,6,5,6,9,1,5,9,6,8,6,6,9,1,8,7,1,4,5,3,1,3,2,0,6,0,4,3,5,3,8,7,8,6,2,5,9,8,3,6,9,8,1,0,2,1,0,4,9,7,9,2,7,6,1,4,1,2,2,0,5,4,6,2,9,9,3,9,5,3,3,8,9,0,0,3,7,8,5,5,7,8,5,5,7,8,6,5,6,1,8,8,0,7,7,6,2,4,3,3,8,7,7,2,2,4,9,4,3,7,2,1,5,7,2,2,4,5,8,3,4,3,9,4,5,0,4,8,4,2,9,0,2,5,4,1,5,5,4,5,0,6,5,7,6,6,5,1,4,8,8,7,6,6,4,3,6,7,0,4,9,0,4,4,2,0,9,4,5,4,4,2,2,0,3,5,9,4,5,0,0,5,1,5,1,3,8,0,6,8,4,0,1,7,9,5,3,4,7,1,4,0,4,6,0,4,0,6,3,9,7,3,1,6,5,0,0,2,4,1,6,0,7,4,2,0,5,4,0,0,3,8,0,8,4,4,7,7,3,7,7,5,4,5,7,9,5,2,3,4,2,4,9,1,7,7,7,1,0,1,9,0,1,5,3,5,0,4,8,7,1,5,0,1,7,0,3,9,9,2,7,5,8,0,5,0,7,6,5,1,9,0,8,1,7,8,6,8,5,2,9,9,2,7,8,9,4,3,1,3,8,4,9,4,9,4,0,1,2,7,0,4,4,3,6,0,5,3,7,3,8,6,7,4,1,2,3,3,9,5,5,0,3,6,5,6,6,6,2,9,2,0,9,8,2,1,1,4,0,9,3,3,2,7,7,0,6,0,1,0,2,9,3,8,6,9,2,7,8,0,7,4,0,2,8,8,2,8,0,4,0,3,7,8,9,4,6,0,0,7,0,9,7,5,0,1,5,5,7,4,7,4,8,5,5,9,1,0,1,9,9,1,0,6,5,0,3,6,3,6,2,2,3,7,9,9,5,1,9,9,8,2,8,6,7,8,3,1,8,1,2,3,3,6,5,5,9,7,0,0,9,7,8,8,2,5,4,6,8,3,5,3,9,5,1,3,8,1,0,4,0,6,4,8,5,9,8,6,6,5,7,4,9,9,0,4,6,9,6,6,6,2,4,8,4,8,0,6,4,0,1,4,9,8,0,4,1,6,5,8,2,7,7,4,3,6,6]"
                    },
                    {
                        "username": "ms681729",
                        "content": "this solution is working properly for all cases expect 9999999999 this case don\\'t know why help me.\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] arr, int k) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n       int sum=0;\\n        int prod=1;\\n        for(int i=arr.length-1;i>=0;i--){\\n            sum+=arr[i]*prod;\\n            prod=prod*10;\\n        }\\n        sum=sum+k;\\n\\n        while(sum!=0){\\n            list.add(sum%10);\\n            sum=sum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "ruchitakb7",
                        "content": "first it stucked at 3rd test then i changed data type to long int now it again stucked at 90 ..now what should i do?"
                    }
                ]
            },
            {
                "id": 2033901,
                "content": [
                    {
                        "username": "thisannie",
                        "content": "Back to back 3 easy problems?? HOW!?"
                    },
                    {
                        "username": "Umair9912",
                        "content": "not exactly easy tho"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "If you are not using LL then :\\n1. Use while loop till array_size > 0 || k > 0\\n2. Inside while :\\n             2.1.Use If to check weather size > 0\\n                    2.1.1Add last element of array into k\\n                   2.1.2 decrease array_size by 1. \\n              2.2.Add last element of K in your list\\n              2.3 remove last element of k\\n             \\n3. IF REQUIRED reverse your list and return \\n\\nHope This will be helpful ....."
                    },
                    {
                        "username": "aashrith_d4",
                        "content": "Easy to understand\\n"
                    },
                    {
                        "username": "simrannasrin",
                        "content": "Can anyone tell me why the code below is not working for edge cases like 9999999+1?  \\n\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        int j=0;\\n        for(int i=0; i<num.length; i++){\\n            j=j*10+num[i];\\n        }\\n\\n        int number=j+k;\\n        ArrayList<Integer> list= new ArrayList<>();\\n\\n        while(number>0){\\n            int digit=number%10;\\n            list.add(digit);\\n            number=number/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "masemune",
                        "content": "Every digit past 2^53 will start losing precision which can cause things like erroneous rounding. If you need to work with larger numbers then use `BigInt`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Adding elements from the left is must efficient. We can do that using linked list or other data structure. In python, we can use $$deque()$$  from $$collections$$. We don't need to import it in **leetcode**. Also we just need to  return this $$deque$$ and it will be accepted."
                    },
                    {
                        "username": "anand_083",
                        "content": "  this is brute force method it work properly but in 3rd case it can not give 0th index can anyone have guts to debug this solution  /\\n        int n=num.length-1;\\n       int base=1;\\n      for(int i=n;i>0;i--){\\n          base=base*10;// base mil gyi //\\n      }\\n        int sum=0;\\n// this loop give me 1000,100,10,0, as my question demand//\\n        for (int i = 0; i <n ; i++) {\\n            int temp=num[i]*base;  // 1*1000\\n            sum=sum+temp;           // 1000\\n            base=base/10;              // update base as 100\\n        }\\n        sum=sum+k+num[num.length-1];\\n// however it give sum properly include 3 rd case //\\n\\n// for printing //\\n        for (int i = n; i>=0 ; i--) {\\n            num[i]=sum%10;\\n            sum=sum/10;\\n        }\\n        return num;\\n// run this code in your local compiler  //// "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "why does this code not work for num = [9,9,9,9,9,9,9,9,9,9]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        int number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        int tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, tempnum % 10);\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@adityadewhy](/adityadewhy) nevermind, even long aint enough for the other test case ie [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "i am assuming the problem was with int data type(int too small to store that big a value)\\nhere\\'s the fix\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        long number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        long tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, (int)(tempnum % 10));\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "parth_chittora",
                        "content": "`class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       long value = num[0];\\n        List<Integer> list = new ArrayList<>();\\n        for(int i = 1;i<num.length;i++){\\n            value = value*10+num[i];\\n        }\\n        value = value+k;\\n        System.out.print(value);\\n        int dig;\\n        int i= 0;\\n        while(value>0){\\n            dig = (int)value%10;\\n            value = value/10;\\n            list.add(list.size()-i,dig);\\n            i++;\\n        }\\n        return list;\\n    }\\n} `\\nWhy is it not giving the ans for the test case 999999999"
                    },
                    {
                        "username": "takezo_shinmen",
                        "content": "AYOO guyz ,  whhats wrong eith this test case\\nnum =\\n[7,8,2,9,2,5,4,7,1,8,0,6,6,7,4,9,0,3,9,9,2,2,6,6,2,5,8,3,6,3,9,6,3,3,1,6,2,7,5,9,8,9,4,4,7,5,0,7,3,8,7,6,0,9,0,7,4,1,1,4,0,7,7,7,6,1,6,5,1,7,4,9,0,4,2,4,4,4,2,6,6,2,1,3,6,7,2,1,9,5,8,3,6,4,2,1,6,6,7,1,0,2,9,3,5,6,8,5,4,2,7,0,3,6,5,0,2,1,1,4,0,1,3,7,7,1,9,1,6,5,9,7,3,3,1,0,9,4,6,5,3,2,0,8,2,7,7,5,4,2,9,9,3,1,9,5,5,4,0,7,3,6,8,9,6,5,1,1,7,0,7,5,3,2,3,1,4,8,2,5,9,6,0,0,2,4,7,9,6,2,3,2,8,5,6,1,0,7,9,1,6,5,6,2,8,5,0,9,2,5,4,0,3,6,0,7,0,3,0,0,8,5,1,2,5,5,1,6,6,0,9,7,9,2,2,7,0,4,3,1,0,4,8,8,6,6,4,6,4,3,1,3,1,5,4,4,3,6,4,5,2,3,7,6,2,4,0,3,7,5,6,8,9,8,6,9,6,9,0,1,3,1,9,0,8,1,9,8,0,4,1,8,1,1,6,0,9,2,8,3,6,0,0,7,2,4,6,3,9,9,2,6,4,8,1,1,1,0,8,8,2,5,9,3,5,4,0,2,5,9,9,1,7,3,7,4,0,1,9,5,5,0,8,2,4,5,9,0,3,9,3,0,6,6,0,7,0,4,2,1,4,8,0,4,5,4,9,9,3,4,0,9,1,1,0,2,0,6,1,2,8,6,3,3,2,5,2,9,9,4,0,0,9,5,7,8,9,2,0,4,0,4,9,1,9,3,9,8,3,6,4,8,7,4,9,6,3,7,8,2,3,4,5,6,0,7,5,2,6,4,6,5,8,9,2,5,6,5,7,1,0,1,2,3,2,2,2,3,4,5,0,8,7,0,8,4,3,6,8,9,9,4,9,5,6,8,3,7,5,9,3,7,5,3,8,2,2,9,1,2,1,7,6,2,4,3,5,8,5,8,4,9,5,4,6,2,7,3,7,2,1,5,9,1,1,6,8,8,6,6,8,1,4,7,7,7,7,3,1,8,5,5,0,3,5,8,6,5,2,9,6,0,0,3,1,3,8,3,7,6,5,3,6,9,7,0,9,0,4,1,6,5,0,6,5,7,7,3,0,9,0,2,9,5,1,9,9,9,8,9,4,4,4,6,1,3,2,0,8,3,6,5,0,8,5,7,3,9,1,3,7,1,3,1,6,9,5,5,1,6,7,5,6,5,1,6,4,6,3,4,1,3,8,8,3,9,5,2,5,5,6,9,3,2,9,9,5,7,0,7,0,5,8,0,7,0,8,0,4,6,0,0,3,7,2,3,8,1,4,6,5,6,4,0,4,8,7,5,8,5,8,1,7,3,7,8,8,5,3,4,1,9,3,0,2,9,6,3,3,4,1,8,5,1,7,4,4,4,9,7,3,7,0,7,5,5,0,0,1,9,2,6,0,9,6,5,1,4,0,2,0,7,5,4,8,8,7,0,4,1,0,8,9,9,3,3,4,0,9,5,7,5,3,6,2,4,1,0,9,1,5,7,5,4,5,6,2,9,9,4,2,1,5,6,1,1,8,8,2,8,0,9,0,8,1,4,9,3,0,6,5,1,3,6,2,1,9,1,2,8,7,0,2,4,7,8,3,1,6,4,1,4,9,9,5,4,0,3,8,5,2,3,7,1,8,4,2,2,5,2,9,6,2,1,3,3,3,9,1,1,3,9,1,0,0,6,7,1,3,3,2,6,9,5,2,8,8,7,2,5,2,7,1,4,2,0,1,9,8,5,6,3,2,2,3,3,1,8,9,8,5,6,4,7,8,6,5,8,8,6,0,5,5,0,8,3,6,3,0,1,3,0,8,2,1,6,9,8,0,5,0,9,4,0,5,8,8,9,8,8,5,0,1,1,1,6,2,2,8,8,0,6,7,8,8,3,5,8,4,9,7,2,1,9,4,1,0,1,3,1,6,1,3,7,8,7,3,5,9,1,5,9,8,3,1,7,3,0,2,0,6,8,5,5,5,3,4,3,0,4,0,2,2,0,5,5,9,2,0,9,7,3,3,3,9,5,0,4,1,3,3,2,2,5,1,9,3,5,6,1,6,3,0,3,1,6,3,8,1,9,9,9,9,9,0,5,0,8,9,2,1,5,9,6,6,8,3,0,3,1,2,9,1,8,2,8,8,1,5,1,9,7,0,3,4,3,7,1,0,2,2,5,0,8,1,6,1,4,4,7,0,2,4,4,9,5,1,7,1,8,2,5,0,1,3,3,5,5,2,2,3,5,8,6,6,0,0,3,9,0,1,8,0,6,2,2,9,1,8,2,6,6,4,9,5,1,6,5,9,5,7,3,8,5,2,3,5,6,3,5,7,2,1,0,4,3,2,2,5,9,3,2,2,1,1,5,1,7,4,6,5,8,9,8,6,2,6,4,2,5,2,4,8,0,1,7,8,3,8,5,3,3,2,9,4,2,8,7,2,8,6,7,8,8,7,9,7,3,0,7,7,6,0,9,1,8,7,2,4,9,0,4,4,3,9,2,6,3,4,2,9,6,2,6,7,6,9,9,7,2,4,9,1,3,5,7,7,8,4,9,1,1,0,8,3,5,6,9,0,5,5,4,0,8,3,6,4,9,1,4,4,9,8,2,2,4,4,0,9,1,1,9,3,5,0,6,8,2,5,7,5,0,7,2,7,7,5,1,7,9,5,8,7,9,7,1,9,1,7,5,0,1,8,1,0,5,1,0,5,9,7,8,9,9,5,6,0,1,9,3,1,1,3,2,3,1,2,8,9,9,0,2,9,5,4,7,3,9,5,1,9,4,6,3,2,0,0,0,8,2,6,1,2,4,9,5,7,9,9,6,7,4,0,7,1,5,4,4,6,2,0,4,0,1,8,7,7,5,8,9,6,6,5,0,6,2,5,5,7,7,7,2,9,6,9,4,8,4,0,4,6,1,5,1,6,7,7,0,6,1,2,8,8,6,4,1,0,5,7,6,4,2,0,2,0,5,1,6,9,4,2,2,0,1,6,5,9,8,6,3,7,3,8,5,0,6,5,7,3,0,6,8,2,1,2,9,9,4,3,0,3,1,2,9,6,8,4,6,9,0,3,6,3,2,5,9,9,4,3,6,2,2,5,8,1,6,9,7,1,9,1,7,1,4,8,2,7,4,9,9,8,8,0,4,3,3,9,8,8,9,7,2,3,4,9,2,0,5,4,4,3,4,8,5,7,4,1,1,9,9,7,5,9,2,7,7,2,3,2,2,0,1,6,9,0,7,8,7,3,9,6,1,9,0,4,5,3,4,2,3,2,1,8,2,0,2,5,4,7,4,2,0,7,1,7,7,8,5,6,2,2,0,2,5,7,2,0,6,6,9,0,1,2,4,0,5,5,2,1,6,8,7,9,7,6,7,1,8,0,3,0,6,1,4,6,9,1,4,5,8,4,8,0,5,7,8,2,8,6,7,4,9,9,8,7,7,1,3,8,7,2,1,7,5,3,7,2,2,2,1,6,1,2,1,3,0,2,4,3,8,8,3,7,5,9,9,7,3,3,8,9,2,3,2,5,5,5,2,6,1,9,2,4,8,0,7,9,5,2,7,3,2,9,2,1,9,9,5,0,9,6,4,5,8,8,9,0,8,8,4,2,6,2,2,2,4,9,7,5,3,3,9,1,0,7,0,0,3,9,4,8,4,8,6,6,4,0,3,4,9,0,4,0,3,9,1,4,5,8,0,2,4,3,8,8,6,6,2,8,4,3,8,3,9,2,4,3,7,4,7,7,9,3,6,3,8,1,2,5,0,9,3,5,0,3,0,5,5,0,3,3,8,8,4,2,3,4,3,9,3,5,2,3,2,8,7,2,2,7,5,9,5,8,9,4,7,6,6,1,5,9,2,8,7,5,6,3,0,7,9,0,0,7,8,7,0,5,2,4,5,9,6,0,0,8,9,3,4,0,7,7,7,3,5,1,3,9,6,1,0,7,3,2,9,3,4,0,8,5,3,2,2,5,7,4,3,6,1,3,0,3,1,4,4,7,4,2,1,1,3,8,4,9,1,0,7,1,1,5,6,8,9,2,0,8,7,7,3,6,6,5,0,8,8,9,0,6,5,9,9,3,2,8,6,1,9,8,2,2,4,4,9,6,1,9,5,5,4,7,4,6,9,7,5,4,5,5,2,7,7,3,6,9,9,0,9,1,3,9,5,4,7,2,8,0,9,9,6,5,9,2,4,9,8,9,9,0,8,5,4,3,0,7,9,1,1,8,6,4,5,7,9,4,3,7,5,3,1,1,6,0,0,3,8,1,2,9,3,3,3,9,3,5,8,5,9,6,3,9,8,5,3,4,9,2,0,8,6,3,5,2,5,4,4,3,7,9,9,9,5,9,1,2,4,5,4,0,0,4,1,2,3,1,7,9,3,1,4,8,7,1,1,1,5,0,8,1,8,8,4,9,2,6,6,7,5,4,4,7,1,3,1,5,4,1,4,7,3,6,0,8,7,6,6,1,7,9,1,6,5,4,8,2,8,1,8,4,0,6,8,4,5,3,1,4,2,2,2,9,4,0,1,0,5,7,2,5,3,4,3,9,0,8,0,8,6,4,5,5,9,8,3,4,5,6,6,8,0,7,8,0,7,3,6,7,8,4,6,3,6,0,3,0,7,5,6,3,4,5,2,1,5,7,6,3,4,8,9,7,9,8,9,3,7,1,3,1,1,2,7,1,4,1,0,2,9,6,5,5,4,0,3,1,1,1,2,2,8,1,3,1,1,6,9,7,5,2,5,4,8,7,7,4,9,3,9,0,1,8,9,5,6,7,9,6,2,1,0,9,3,5,9,4,4,4,2,6,8,0,3,4,5,7,2,0,1,4,2,0,6,1,9,8,7,6,1,1,2,8,3,8,6,1,9,1,2,2,5,4,3,2,5,2,8,2,2,7,5,7,6,7,6,9,9,7,3,9,8,6,2,6,9,5,9,3,3,7,0,9,8,5,1,2,7,6,5,7,5,6,9,5,6,7,6,7,3,4,5,0,9,4,9,2,6,8,8,1,7,2,1,8,8,7,1,5,7,6,5,6,3,6,7,6,3,4,6,3,1,3,9,4,7,6,1,0,9,2,0,9,0,6,2,5,0,4,8,8,3,2,8,5,6,9,0,0,2,7,8,7,7,0,2,3,9,6,0,8,0,6,6,1,6,9,7,9,1,6,4,0,5,9,2,8,1,5,4,3,2,1,9,9,1,8,3,5,6,9,8,0,4,7,8,8,7,9,8,7,4,0,5,9,8,1,8,1,8,0,5,2,3,9,9,6,2,1,5,7,5,4,7,1,7,3,3,6,8,8,3,7,7,9,2,1,7,0,9,1,7,2,8,5,5,4,3,2,4,8,8,2,3,0,4,9,3,3,6,6,0,7,0,0,8,9,8,6,6,4,5,9,4,9,8,2,5,1,8,4,2,7,0,7,0,0,4,2,1,6,7,0,6,0,5,6,4,0,1,7,5,9,2,9,4,9,6,3,9,5,8,0,0,2,8,0,9,6,7,8,8,4,5,6,8,0,5,8,4,3,8,8,3,4,9,3,3,6,5,4,9,9,3,0,4,3,0,6,7,4,7,5,8,7,5,1,0,8,0,1,4,8,8,3,3,3,1,8,4,4,3,8,5,7,9,3,9,5,5,0,4,5,0,7,8,2,2,9,1,6,1,6,5,7,5,8,7,5,7,6,6,0,8,2,1,0,3,0,2,2,7,4,9,8,2,6,7,1,0,8,1,8,0,5,1,0,0,1,3,1,8,9,2,8,9,1,2,7,0,2,3,6,1,1,5,0,2,1,6,2,5,9,3,1,9,7,2,8,7,3,5,7,4,3,3,1,1,9,3,4,8,8,4,6,2,6,4,3,8,7,7,1,3,4,4,6,9,4,1,3,2,0,7,2,4,1,2,9,9,1,4,1,3,5,1,9,4,1,5,4,6,0,3,0,8,1,7,6,9,4,9,1,8,2,4,9,5,9,6,9,3,3,2,5,0,1,8,4,8,1,6,0,4,9,1,3,9,4,5,0,6,7,1,7,4,6,5,0,8,1,0,0,1,2,3,5,2,9,8,9,6,4,6,4,5,5,1,2,2,3,3,7,1,3,9,6,8,8,3,6,3,4,4,0,0,6,7,4,2,8,7,8,7,8,6,8,1,4,3,6,5,0,1,5,3,4,0,9,0,1,6,8,3,9,3,9,1,1,4,4,4,1,5,7,3,8,5,7,1,8,9,0,9,3,1,0,3,8,3,1,9,2,6,2,5,4,4,9,0,2,5,1,5,1,8,9,2,7,7,9,7,2,2,6,7,7,9,0,7,2,8,3,6,2,0,0,6,7,3,4,7,3,0,8,8,5,8,2,7,6,2,5,1,8,2,6,6,3,7,2,3,6,7,5,8,1,9,4,5,6,4,6,7,7,7,7,3,9,9,4,8,3,5,5,7,1,7,4,5,6,0,3,5,5,3,4,1,4,5,6,4,8,9,6,8,0,1,9,5,6,6,8,6,9,4,6,2,5,9,9,6,4,4,5,5,8,0,9,2,3,5,5,6,8,9,4,2,7,9,2,8,8,2,1,1,4,3,7,5,4,5,3,6,3,5,5,3,9,8,5,0,0,1,1,0,7,9,2,5,8,1,0,6,0,6,5,6,5,9,7,1,0,1,9,9,3,1,1,7,0,4,3,1,8,7,3,8,2,3,8,7,8,2,3,6,6,4,5,0,7,4,8,3,4,0,7,1,8,6,0,5,0,8,5,1,3,3,2,7,4,9,1,6,5,9,5,1,1,1,6,2,1,5,3,6,2,4,4,6,1,1,1,8,7,1,9,9,4,7,2,3,4,5,9,7,6,9,5,3,4,6,8,2,0,8,4,9,8,6,8,4,6,7,4,7,7,8,2,6,7,1,2,1,0,6,0,5,1,9,8,2,2,9,4,6,0,7,0,0,5,8,5,3,2,9,4,1,6,7,2,0,7,3,6,8,1,9,8,0,8,8,7,0,6,1,9,8,7,4,5,0,8,6,9,8,6,2,7,9,3,5,1,9,2,5,8,8,5,1,2,2,2,1,6,9,7,8,4,8,9,0,2,3,8,7,9,6,9,7,2,6,2,4,6,6,7,8,9,4,2,9,7,3,7,1,3,5,5,9,8,4,1,7,0,6,9,6,3,4,7,0,7,4,4,5,8,9,1,1,3,9,1,3,3,8,3,0,0,5,7,2,3,3,4,7,1,7,5,5,7,0,3,8,5,1,7,0,5,9,0,2,0,8,7,5,3,6,4,6,9,3,0,1,6,8,9,9,9,1,2,0,0,9,5,2,9,4,5,8,4,0,5,7,6,5,5,4,0,2,2,3,7,7,8,6,8,0,6,7,8,4,6,0,5,1,4,1,8,9,6,9,9,5,8,4,8,4,0,1,0,8,6,9,4,0,8,6,9,3,6,0,8,1,4,6,8,0,4,6,0,2,1,2,5,4,5,1,6,1,4,7,4,3,1,5,4,4,5,5,1,1,3,3,5,7,4,2,7,0,1,3,5,9,6,8,2,2,2,0,0,8,1,3,8,9,3,2,1,1,1,3,9,6,1,1,1,7,7,7,1,4,4,5,0,1,3,7,4,7,0,9,7,7,1,2,9,1,7,9,8,3,3,6,5,2,3,1,9,2,9,3,8,7,5,7,1,4,7,6,9,2,5,8,4,6,9,8,1,2,0,4,2,1,9,8,4,9,7,6,3,0,4,8,8,3,2,2,9,5,5,7,2,3,2,7,6,8,2,3,4,4,6,4,6,1,5,2,7,8,4,9,1,4,2,9,2,9,1,6,9,4,1,2,6,1,4,8,4,9,9,3,4,5,5,5,4,0,2,7,9,5,7,7,1,0,9,9,2,9,4,9,1,3,1,2,4,6,3,2,4,6,7,9,1,5,2,3,2,6,4,4,5,8,5,9,9,0,5,8,5,9,1,0,9,7,9,7,6,8,6,6,9,9,6,6,3,0,8,4,9,9,3,3,2,0,7,9,7,8,2,9,2,7,9,9,0,2,8,4,0,4,9,0,3,9,4,6,5,6,6,9,1,3,5,5,6,4,4,6,1,2,2,4,4,2,2,0,4,1,6,3,4,7,0,7,0,3,3,6,5,7,7,8,3,9,9,9,5,2,3,7,6,7,9,4,0,8,8,3,5,3,7,6,5,8,1,9,5,9,2,7,4,9,5,2,4,1,8,7,6,6,2,8,6,5,3,4,6,2,2,5,2,5,3,9,3,7,2,4,2,5,7,3,3,2,4,3,1,7,9,3,5,6,3,0,0,0,8,5,9,9,6,3,0,0,6,1,2,1,4,0,2,0,1,5,8,0,4,5,4,0,8,8,1,5,4,6,5,9,7,6,8,4,2,2,5,9,0,5,0,0,3,5,3,1,8,7,6,2,0,4,3,1,3,7,6,4,9,8,5,0,9,6,6,5,7,3,2,2,0,0,1,7,6,6,9,2,0,4,2,8,0,6,5,5,3,0,0,7,4,6,7,9,8,3,9,6,1,6,3,9,6,3,4,5,8,4,9,0,1,8,4,0,8,8,8,4,2,6,8,1,3,7,3,0,9,6,5,3,8,3,8,8,1,9,5,5,3,7,7,2,5,8,7,7,0,5,5,7,9,2,9,2,5,9,7,1,6,9,9,2,9,6,2,4,8,8,6,3,6,0,7,6,6,0,4,3,2,3,7,3,9,6,5,7,0,8,5,3,5,8,3,5,9,7,4,5,0,8,7,1,8,2,3,5,0,6,8,4,8,5,7,1,0,3,2,6,6,8,3,7,9,8,0,6,2,9,0,0,4,5,8,5,5,9,4,8,0,7,1,3,7,5,2,4,4,4,6,0,3,0,3,6,2,9,9,8,5,5,1,2,0,9,2,2,9,7,3,4,9,4,5,7,2,2,9,9,9,0,5,4,5,6,0,4,7,5,7,0,3,2,8,0,0,1,9,0,6,9,2,6,8,8,5,9,8,1,5,1,4,2,5,3,6,0,5,6,5,1,1,7,1,2,4,3,1,0,4,6,4,5,9,0,0,1,2,5,4,1,5,9,4,8,2,8,7,5,8,9,3,5,2,2,6,7,0,6,6,9,6,6,1,3,9,7,9,1,1,4,4,3,5,1,8,5,9,0,6,1,8,2,6,9,2,3,5,5,7,2,5,4,0,0,5,9,7,5,1,5,7,3,5,8,4,1,0,7,8,4,7,2,1,9,6,5,3,2,2,4,1,4,4,7,5,1,9,3,2,7,2,9,4,3,0,5,5,8,3,4,2,8,2,0,9,0,2,1,6,3,8,8,4,2,6,1,0,0,6,0,2,4,2,2,1,4,2,0,1,5,6,1,8,5,5,8,7,4,3,7,7,7,6,7,6,0,8,8,7,9,0,1,9,6,1,2,8,0,7,5,3,5,8,1,0,3,2,7,7,3,2,3,8,7,7,5,7,6,4,3,2,5,5,0,2,9,6,7,3,0,3,2,0,8,0,0,5,1,8,2,4,1,8,1,7,6,3,2,1,5,3,8,5,2,4,9,9,7,1,9,1,5,9,7,8,0,4,4,8,8,8,6,8,4,4,0,3,8,3,8,2,4,5,5,2,0,3,5,9,6,5,2,6,3,5,0,6,0,5,2,2,0,9,6,2,8,7,9,3,6,1,6,2,2,8,5,2,6,3,7,9,5,9,3,1,4,9,2,9,5,4,8,9,9,9,3,2,7,2,7,6,4,3,5,2,4,1,4,3,1,9,8,8,8,7,6,7,6,6,0,2,5,7,7,9,4,5,0,0,5,8,9,7,6,0,1,3,5,7,0,6,7,8,9,4,6,1,3,3,6,6,1,0,6,4,4,4,6,3,2,6,2,9,3,0,3,4,7,3,6,0,9,8,3,4,6,9,7,0,0,7,7,1,1,5,8,3,8,4,9,0,5,6,6,4,0,9,0,9,3,9,7,4,2,1,5,7,6,5,9,9,9,2,7,0,5,8,2,8,2,0,9,9,7,1,3,5,1,8,7,7,8,5,4,3,2,3,5,4,8,2,2,6,8,7,8,0,9,7,1,4,0,9,4,9,0,0,4,6,2,9,0,7,0,1,4,7,5,6,5,3,8,2,3,9,9,8,7,4,0,8,1,9,5,7,5,6,0,0,9,3,7,4,6,9,9,3,3,7,6,1,9,8,1,3,3,5,4,2,0,2,4,3,9,8,4,5,2,4,5,0,6,3,5,1,9,9,5,6,1,4,1,6,8,1,7,0,0,5,2,2,2,2,7,4,2,6,0,1,5,7,1,8,9,7,6,3,7,7,0,3,4,6,2,7,3,1,1,3,3,9,6,5,6,5,8,6,6,2,1,1,3,7,5,3,6,7,2,1,7,2,5,1,0,8,4,2,6,4,1,4,3,2,8,7,0,7,9,9,6,5,0,4,0,3,9,6,7,8,4,9,5,4,9,0,4,8,4,7,6,8,4,5,9,1,1,2,6,8,8,2,8,8,5,7,9,4,4,8,9,0,2,7,2,1,9,5,2,6,4,8,9,4,7,3,1,3,9,7,2,1,6,8,1,8,8,7,7,7,3,7,2,5,0,8,1,6,4,6,6,1,0,7,8,2,8,3,3,2,3,7,7,5,8,2,1,1,2,0,3,9,6,8,8,9,5,8,6,9,8,9,5,3,6,8,6,4,4,2,6,6,2,6,8,7,4,0,1,8,2,9,3,1,2,1,4,6,6,1,8,5,4,7,1,7,2,5,9,9,0,4,9,4,5,9,9,3,0,4,5,1,4,6,2,3,5,6,8,8,3,2,1,4,6,9,2,0,4,5,8,4,0,6,1,9,7,3,0,0,7,6,5,2,6,5,4,3,7,1,9,9,7,0,7,9,9,3,0,3,2,3,3,9,6,0,2,2,5,4,4,2,0,5,8,8,8,8,9,1,6,6,5,0,1,0,7,8,3,3,9,1,8,7,4,8,7,4,1,8,7,5,0,5,4,3,4,5,0,8,1,7,0,4,7,1,6,6,0,5,4,1,4,9,0,6,3,4,3,8,9,3,4,7,0,9,2,1,8,2,9,9,2,0,0,4,9,7,1,1,0,7,0,6,0,3,4,6,7,4,3,6,6,4,1,0,1,1,8,6,9,9,0,6,4,8,4,7,2,4,3,9,8,2,9,4,2,7,2,9,5,0,3,4,1,8,5,5,6,6,2,0,4,6,1,4,9,8,5,2,5,1,2,1,3,0,9,2,3,3,4,2,6,1,7,8,7,1,2,3,9,9,9,7,2,1,1,1,5,9,6,1,4,2,5,2,4,9,0,4,3,1,5,1,8,2,1,0,8,0,2,8,8,8,6,5,4,4,0,3,6,0,7,0,9,6,4,0,1,5,4,2,0,5,7,4,0,5,7,1,6,2,0,1,0,8,3,5,7,4,0,9,5,5,7,5,8,9,6,5,9,8,8,3,7,8,8,8,9,1,7,6,3,8,1,5,0,0,3,6,3,7,8,9,5,3,2,0,4,6,9,8,5,8,2,3,1,9,7,3,2,6,2,3,7,6,5,7,8,9,1,2,6,6,5,2,2,9,1,2,0,5,9,7,7,8,9,3,9,0,4,7,7,1,8,4,1,7,6,8,0,4,2,3,8,0,9,4,0,3,1,7,3,9,9,8,2,1,0,7,9,0,3,0,1,5,0,7,4,6,2,9,8,2,9,9,6,9,1,2,2,3,7,5,2,0,2,7,7,8,5,6,8,4,8,2,2,5,4,9,3,8,1,7,3,0,1,0,2,3,8,3,6,8,6,4,6,5,6,1,3,4,7,7,1,7,8,7,0,8,4,8,4,5,6,0,9,3,3,1,7,2,6,8,0,9,8,4,2,9,8,4,7,3,6,0,8,4,9,7,4,4,6,0,9,9,3,7,1,9,2,0,2,3,9,1,3,7,7,6,4,4,3,2,3,6,6,0,8,4,5,4,5,8,1,9,0,8,1,1,5,7,4,1,7,8,5,1,6,4,1,1,6,2,7,5,3,6,3,6,0,4,4,6,8,7,9,8,2,1,7,3,4,7,9,7,8,5,6,6,8,8,8,2,6,6,3,8,4,1,4,4,3,2,6,6,0,2,5,4,6,7,7,8,4,3,9,0,4,0,6,1,8,0,6,7,7,4,0,7,8,5,7,8,1,5,4,2,7,1,5,9,2,3,7,4,8,5,6,7,7,3,1,1,5,5,7,3,3,8,6,1,2,3,5,3,2,5,6,6,3,6,7,2,7,5,1,4,1,3,8,7,6,6,2,2,1,2,2,3,3,0,0,1,6,8,6,6,0,6,5,2,4,6,7,3,0,3,5,2,0,8,7,7,0,6,0,2,4,3,3,6,5,6,2,8,8,2,6,7,9,0,7,0,9,3,4,3,2,9,0,1,8,5,3,0,6,8,4,5,6,0,0,0,5,4,6,3,9,0,6,0,2,1,1,3,1,5,7,4,0,5,2,2,4,5,4,6,4,7,5,9,2,4,4,2,5,7,4,7,0,7,1,8,8,8,9,9,6,8,4,7,9,4,8,8,9,9,2,8,8,9,2,2,4,8,1,2,3,9,8,2,9,4,8,7,5,6,1,4,6,2,2,2,5,3,0,5,8,4,7,2,2,7,6,0,6,7,9,5,7,2,2,2,9,7,1,6,2,9,5,4,6,1,4,7,2,9,0,6,6,4,5,6,8,3,2,0,0,0,8,7,5,6,3,8,5,8,9,8,6,4,5,0,7,7,3,7,1,4,2,0,4,9,7,8,5,0,9,6,5,3,0,4,5,3,0,0,1,1,2,3,9,9,0,6,5,9,9,7,2,0,4,1,2,2,4,4,8,2,1,9,5,6,1,5,0,9,1,9,8,3,7,3,5,9,4,1,3,1,3,2,4,9,3,4,5,9,7,2,2,5,1,4,3,0,1,6,4,1,7,3,2,0,1,1,4,8,7,8,2,3,1,1,7,6,6,2,6,4,9,3,7,5,1,3,4,0,0,7,3,0,8,1,0,9,1,9,6,5,7,9,1,6,5,7,8,3,7,2,2,0,2,4,0,8,5,1,2,8,4,1,2,1,2,1,0,4,3,6,1,4,9,0,5,5,4,9,2,3,5,5,9,3,8,8,6,2,6,8,1,9,4,7,8,9,3,7,8,2,0,3,6,8,6,2,2,6,0,5,1,0,6,4,2,8,8,3,5,8,8,2,6,9,0,0,0,1,8,8,6,3,5,9,5,2,6,7,1,6,6,5,8,7,0,9,5,6,3,7,2,7,1,7,2,3,4,1,2,2,9,0,0,7,0,4,7,4,4,1,1,6,8,6,1,9,0,6,7,7,5,3,4,3,1,0,8,1,6,2,4,1,9,7,5,1,7,2,6,0,9,3,3,0,6,1,5,1,3,9,3,7,1,7,8,1,8,4,2,9,0,7,2,6,1,2,4,0,9,3,7,1,0,6,5,1,7,5,6,3,7,1,1,7,7,9,1,7,3,1,3,6,3,9,3,3,0,2,7,5,1,3,0,4,0,0,2,6,3,9,2,0,1,3,4,6,4,8,8,8,0,2,2,8,4,7,6,9,6,8,3,9,0,3,8,9,4,6,7,8,3,0,5,6,6,4,6,6,1,9,8,0,4,9,9,2,7,6,6,8,3,9,1,0,9,8,0,3,7,6,4,8,9,3,1,2,2,4,8,4,8,5,7,9,7,4,9,1,5,8,5,9,1,0,5,8,8,2,0,8,8,1,4,2,2,0,5,7,6,0,3,3,8,1,8,3,9,9,9,6,3,6,2,2,7,8,3,3,2,7,1,2,1,4,0,2,6,6,9,4,9,5,2,5,1,3,5,3,7,7,7,0,2,4,7,6,1,1,0,4,4,2,3,8,8,7,8,4,2,3,0,2,9,5,4,2,4,4,5,2,0,2,1,4,9,4,0,0,3,0,4,8,8,5,4,7,1,4,2,8,1,5,3,6,1,5,9,9,0,5,1,1,4,2,9,3,0,2,4,3,0,8,4,1,6,3,7,5,6,6,6,4,3,9,2,6,0,6,1,4,1,0,6,4,5,0,2,1,6,2,3,8,3,5,5,4,3,1,8,7,9,8,3,9,3,2,2,6,6,9,4,8,6,7,6,7,5,5,1,4,6,5,7,7,2,4,9,6,2,4,8,8,4,6,4,1,5,6,6,4,2,3,6,7,8,5,7,9,8,0,9,8,9,0,1,9,6,1,7,6,2,4,9,2,8,9,0,2,5,3,8,5,0,5,7,1,5,4,5,1,9,7,3,7,2,5,5,1,5,7,7,4,0,1,4,6,0,0,8,2,8,6,7,4,9,7,4,7,5,6,0,9,9,9,4,3,4,5,9,4,6,4,3,3,8,0,3,2,6,3,7,0,5,0,0,9,5,2,2,7,3,0,2,4,7,5,0,0,5,1,9,5,5,6,4,8,8,8,5,4,2,5,1,0,2,3,0,6,0,7,4,2,8,2,4,5,3,8,9,5,5,6,0,9,3,0,9,0,9,5,4,3,6,7,4,4,0,2,2,9,4,6,6,9,8,1,1,7,4,5,4,9,7,7,0,1,6,5,2,3,6,1,5,5,3,9,1,7,6,4,2,0,4,0,9,3,5,1,9,7,2,9,5,9,4,9,8,7,9,2,7,0,5,4,4,7,4,5,2,2,8,8,7,0,3,7,8,5,1,5,6,8,4,5,3,8,6,1,0,2,5,7,4,4,4,0,7,7,2,3,6,4,9,9,0,5,2,3,3,0,2,9,8,8,2,9,4,7,6,1,3,9,3,0,7,1,9,0,6,5,4,7,4,8,3,0,9,6,2,8,9,4,6,6,0,9,9,7,1,9,4,9,5,5,9,3,9,6,4,5,1,0,1,7,5,5,6,3,6,9,4,6,6,1,8,2,0,6,2,0,9,5,0,0,4,5,4,2,0,4,5,1,2,3,5,6,6,2,5,5,8,9,6,8,8,4,6,1,6,7,9,0,1,4,6,3,6,8,7,4,6,2,5,3,0,0,5,4,1,3,2,5,1,5,2,4,5,3,2,5,3,5,2,9,4,6,5,4,0,6,4,3,6,0,8,3,9,4,6,9,4,7,4,8,7,6,6,9,4,2,1,1,3,0,5,0,0,2,3,7,1,7,7,1,6,4,6,0,1,4,4,6,5,8,8,6,7,3,8,2,6,2,6,6,7,7,5,8,9,1,6,7,3,0,8,6,0,6,4,2,0,8,5,2,7,8,2,5,6,8,0,4,7,0,3,7,5,8,6,8,6,5,6,2,4,2,4,2,4,3,6,8,3,2,0,3,8,3,9,2,8,3,7,4,5,9,1,0,7,4,2,3,7,9,9,9,1,2,5,1,7,9,1,3,9,7,5,2,4,8,4,2,9,5,5,7,1,1,4,1,0,4,6,4,2,3,3,2,7,0,4,6,6,0,5,6,0,7,3,3,2,1,8,7,2,8,3,8,4,7,6,1,2,0,4,5,2,4,8,3,9,0,1,8,1,4,9,6,6,8,8,1,4,0,0,5,2,3,7,2,1,0,3,7,1,5,9,8,6,4,4,9,7,7,8,3,2,5,9,7,1,7,7,4,3,3,6,0,6,5,9,4,4,6,9,6,3,7,8,0,1,8,6,2,2,9,2,8,1,7,0,9,6,3,0,6,7,2,7,0,6,9,6,4,7,8,2,2,6,3,1,7,6,4,7,6,1,4,9,4,0,1,7,3,6,8,4,9,3,4,7,3,7,3,3,8,9,9,1,1,3,7,7,3,3,9,6,4,0,5,2,6,0,0,1,1,9,0,9,0,9,8,5,4,9,7,9,5,4,6,2,5,7,0,1,7,1,0,8,5,0,5,9,7,4,1,6,1,9,3,5,3,8,8,9,4,8,5,2,5,3,4,8,3,9,7,3,7,4,6,0,6,6,4,8,5,4,9,6,1,3,1,9,7,5,4,9,0,2,4,3,1,1,3,6,6,9,5,2,6,4,2,1,9,0,6,9,5,1,9,3,2,8,4,6,6,4,1,8,6,6,9,2,7,3,3,7,0,4,1,8,2,7,7,9,9,7,1,4,8,2,2,6,9,6,2,5,8,7,0,7,4,1,3,7,4,8,5,5,2,8,0,8,8,8,3,4,4,5,3,0,2,7,3,4,2,9,8,9,3,1,3,9,2,6,0,9,0,5,3,6,6,2,2,9,4,4,4,9,2,1,7,4,2,1,0,1,8,1,7,7,2,3,7,9,8,0,4,1,8,9,9,8,1,0,5,7,4,6,6,5,2,4,9,1,1,9,9,6,4,8,7,4,8,4,0,5,4,3,0,3,9,6,7,6,6,2,7,3,1,5,7,2,5,6,7,9,3,2,1,3,5,6,1,2,0,1,9,2,5,1,1,2,5,6,4,4,7,2,2,6,8,6,8,2,1,3,0,8,5,4,0,9,8,6,9,9,7,3,2,6,4,9,4,4,9,0,0,8,8,6,0,8,7,6,7,0,1,8,5,8,7,7,6,5,0,7,1,0,3,7,3,2,6,4,7,7,1,7,3,3,1,3,3,0,2,5,5,2,7,3,8,7,8,8,9,4,6,3,2,6,9,9,1,8,0,9,5,3,8,0,9,4,0,0,5,4,2,2,0,5,1,8,4,8,6,4,6,2,3,5,8,3,8,5,7,2,6,2,4,3,2,1,7,9,1,3,2,5,8,2,3,3,4,7,1,6,1,0,9,8,8,3,4,9,6,0,8,5,2,3,3,3,2,8,1,8,2,5,4,7,7,3,8,6,6,3,4,5,3,0,9,2,3,3,0,3,5,0,4,9,9,9,5,3,2,3,1,2,1,3,0,6,1,5,0,9,9,5,7,0,9,4,7,2,6,9,3,4,8,4,5,4,3,9,1,3,1,9,9,3,9,5,5,5,3,1,8,7,9,2,4,3,1,8,7,5,3,7,5,5,7,3,8,3,8,0,5,6,4,4,9,1,3,6,7,9,3,3,8,9,9,2,5,9,7,1,2,5,6,4,7,6,8,1,8,7,0,8,3,7,3,4,2,7,3,8,8,6,5,4,8,5,3,5,1,9,9,6,1,4,8,0,6,2,3,6,7,5,2,0,1,8,0,6,0,5,6,6,3,9,9,5,9,6,9,8,7,7,1,7,2,1,8,9,1,7,5,5,6,0,5,7,8,3,3,2,1,9,5,5,6,6,1,7,9,1,6,2,9,6,1,6,2,1,4,4,2,8,9,1,0,7,1,5,6,9,9,6,6,5,9,7,5,2,0,2,1,1,4,4,5,5,5,4,1,8,9,1,7,8,8,6,2,2,8,8,6,5,7,8,2,6,0,4,4,4,9,0,3,7,6,2,3,1,1,7,5,7,9,7,5,0,8,2,0,2,3,5,2,6,9,0,7,8,5,6,6,4,2,7,4,8,2,1,2,1,5,2,1,5,7,5,7,0,7,0,2,4,2,1,9,1,7,2,5,5,1,8,5,8,6,1,0,3,1,7,9,3,8,1,9,3,6,8,3,6,7,2,2,2,2,6,8,3,3,1,2,2,3,0,4,6,1,1,8,7,6,8,3,9,9,6,3,6,3,6,6,0,8,2,0,5,8,8,6,0,0,9,9,6,3,8,7,1,6,7,2,1,3,5,7,2,4,3,5,1,0,9,3,6,1,9,8,7,6,5,8,9,4,0,2,7,4,3,7,0,9,3,2,5,1,4,1,3,1,4,6,7,9,4,7,0,9,5,9,4,6,6,8,1,4,2,4,7,0,9,8,2,3,8,7,9,4,1,8,2,5,9,5,8,5,8,0,6,3,2,4,5,6,6,9,2,6,2,9,8,1,8,2,6,9,5,3,1,9,4,9,2,1,0,5,0,5,9,1,9,7,5,9,7,9,1,4,4,0,1,9,6,3,0,5,5,1,9,3,6,6,8,1,9,9,3,1,3,6,6,2,5,7,5,7,0,9,9,5,0,1,4,8,7,3,8,8,6,2,0,3,7,4,9,7,1,8,0,5,4,0,0,4,0,3,1,5,4,7,0,1,0,5,2,4,7,8,0,2,1,5,4,9,5,9,6,1,4,9,1,6,5,2,4,8,5,5,9,5,0,1,2,2,1,9,9,7,6,5,8,6,4,2,2,7,7,7,3,2,9,2,2,9,2,6,4,2,9,2,2,8,0,7,6,6,5,5,6,3,7,4,8,7,9,2,6,1,7,7,8,6,6,2,1,9,1,0,0,9,7,4,1,5,7,3,4,0,3,0,5,1,4,0,5,2,6,2,1,3,8,8,7,2,6,2,6,8,9,5,0,3,7,8,6,4,8,5,1,2,1,1,2,4,7,5,0,2,8,2,8,9,0,8,1,6,9,0,7,5,8,2,9,2,5,2,3,6,0,3,8,4,4,3,6,9,1,3,8,6,1,0,9,2,7,1,7,5,9,9,4,5,0,0,0,9,2,7,8,6,4,1,8,8,9,9,0,5,6,3,8,3,1,6,8,3,3,9,3,9,2,5,9,7,1,1,2,3,4,8,6,7,2,5,5,4,7,2,8,6,1,1,1,9,0,2,9,2,1,7,2,6,3,0,2,7,7,7,8,6,7,7,3,3,2,3,6,0,7,3,4,8,3,6,7,0,9,0,8,4,5,8,9,9,1,1,0,2,7,3,8,8,2,4,4,6,8,9,1,6,7,8,7,6,0,7,3,2,8,8,9,8,7,7,1,6,3,0,4,5,3,3,6,6,0,1,6,4,0,8,3,4,8,2,4,8,2,4,4,3,4,9,2,6,6,2,2,5,4,0,0,3,7,8,8,2,1,6,2,9,6,2,0,3,2,6,1,1,4,6,6,0,6,7,9,4,4,4,4,4,5,1,8,6,2,6,2,3,7,5,9,9,0,3,2,5,7,8,3,3,9,3,8,7,5,0,6,2,3,7,4,7,5,9,3,6,9,4,4,8,4,4,1,4,2,2,7,2,0,3,8,3,4,0,7,8,4,0,2,1,5,1,8,9,4,6,7,2,4,8,3,5,5,9,3,2,4,6,1,8,6,2,5,9,1,2,9,0,5,0,4,8,8,9,0,7,0,8,0,4,3,0,9,7,7,5,0,2,0,1,7,6,6,8,2,3,1,2,6,9,9,7,6,5,4,6,9,7,2,7,6,1,0,5,0,4,7,2,2,1,2,5,3,7,2,0,2,6,2,9,1,1,2,4,5,4,4,1,0,0,7,3,0,5,8,5,2,5,6,2,9,7,4,9,5,8,6,6,4,4,9,8,4,4,3,9,9,0,2,3,5,9,3,9,2,7,1,1,5,0,3,1,8,7,9,9,7,2,9,0,3,6,9,9,5,5,3,4,7,7,7,0,2,5,4,4,8,8,2,1,0,2,6,2,9,9,8,1,7,2,2,1,0,6,1,6,3,8,1,0,4,7,2,3,0,4,2,3,1,0,2,5,5,7,9,5,2,7,1,7,7,7,3,4,4,0,1,8,6,8,9,3,4,7,6,9,6,4,4,2,2,6,2,2,9,9,9,5,8,6,0,1,1,7,1,7,1,0,6,3,3,9,9,4,5,6,6,7,9,2,1,5,2,9,7,9,1,9,0,4,7,6,9,9,7,1,2,6,8,2,4,7,2,8,8,6,3,7,1,2,5,5,7,6,3,6,9,0,0,5,0,1,5,5,9,1,1,0,9,3,2,4,1,9,0,8,5,0,3,6,3,1,9,9,8,8,7,1,6,9,7,0,6,1,9,8,3,1,9,6,3,9,9,2,5,2,2,0,4,9,4,9,5,3,9,6,9,6,7,7,0,0,3,2,3,6,0,6,8,4,1,8,6,4,2,9,7,6,4,9,4,3,0,0,6,7,6,8,5,4,0,3,8,3,3,2,7,5,6,3,2,2,9,9,8,2,3,7,2,5,2,4,9,1,9,0,8,5,0,6,8,9,4,8,8,7,8,5,1,4,1,6,1,7,1,8,8,1,9,5,1,1,2,5,5,8,3,7,9,7,2,7,8,4,6,8,8,9,2,9,0,7,3,9,0,8,9,9,6,9,8,3,2,6,0,7,9,5,3,5,0,1,5,9,4,1,1,0,6,5,2,3,3,8,5,8,2,3,1,2,0,0,1,8,0,7,2,9,1,6,2,7,5,0,4,7,3,5,7,2,1,1,2,8,4,2,7,5,4,4,5,6,4,9,8,2,4,3,8,0,4,5,4,9,5,1,2,5,9,1,3,1,0,7,8,1,9,7,9,7,6,6,4,4,2,0,2,4,0,9,8,1,3,4,7,9,4,2,1,0,3,4,2,0,0,9,3,3,2,5,2,2,3,9,2,4,5,3,3,6,0,3,3,5,5,4,3,5,6,7,2,9,8,4,0,0,2,4,0,6,4,2,8,9,7,0,0,0,9,3,3,9,9,0,2,8,1,8,9,1,7,4,9,4,4,9,3,4,2,7,0,6,0,8,2,6,5,9,2,8,9,6,6,7,2,4,9,6,1,8,4,8,4,2,3,2,8,1,3,7,0,6,9,8,9,5,0,4,3,4,7,2,9,0,6,3,3,9,7,2,6,7,9,6,0,1,6,6,2,2,5,3,2,6,5,3,8,6,0,0,0,9,9,7,8,2,7,6,3,4,8,5,9,5,8,5,4,3,8,0,0,4,7,3,2,0,1,3,8,9,0,4,2,5,5,9,9,8,6,2,8,1,4,5,3,9,5,4,0,4,6,1,1,4,0,0,0,1,9,5,6,6,6,1,2,8,5,0,9,9,1,5,6,2,1,4,1,8,2,5,8,7,6,7,1,6,1,6,2,2,9,8,3,7,7,5,4,6,2,6,2,4,9,0,2,9,0,2,1,1,1,4,7,9,4,8,3,3,3,0,8,5,0,9,4,5,8,8,5,6,4,9,5,7,0,6,8,2,5,4,5,0,9,9,9,0,1,8,4,3,8,6,6,9,6,5,9,8,1,1,9,7,4,8,2,6,7,0,6,2,0,6,2,7,2,5,2,9,4,8,6,1,9,6,5,6,9,1,5,9,6,8,6,6,9,1,8,7,1,4,5,3,1,3,2,0,6,0,4,3,5,3,8,7,8,6,2,5,9,8,3,6,9,8,1,0,2,1,0,4,9,7,9,2,7,6,1,4,1,2,2,0,5,4,6,2,9,9,3,9,5,3,3,8,9,0,0,3,7,8,5,5,7,8,5,5,7,8,6,5,6,1,8,8,0,7,7,6,2,4,3,3,8,7,7,2,2,4,9,4,3,7,2,1,5,7,2,2,4,5,8,3,4,3,9,4,5,0,4,8,4,2,9,0,2,5,4,1,5,5,4,5,0,6,5,7,6,6,5,1,4,8,8,7,6,6,4,3,6,7,0,4,9,0,4,4,2,0,9,4,5,4,4,2,2,0,3,5,9,4,5,0,0,5,1,5,1,3,8,0,6,8,4,0,1,7,9,5,3,4,7,1,4,0,4,6,0,4,0,6,3,9,7,3,1,6,5,0,0,2,4,1,6,0,7,4,2,0,5,4,0,0,3,8,0,8,4,4,7,7,3,7,7,5,4,5,7,9,5,2,3,4,2,4,9,1,7,7,7,1,0,1,9,0,1,5,3,5,0,4,8,7,1,5,0,1,7,0,3,9,9,2,7,5,8,0,5,0,7,6,5,1,9,0,8,1,7,8,6,8,5,2,9,9,2,7,8,9,4,3,1,3,8,4,9,4,9,4,0,1,2,7,0,4,4,3,6,0,5,3,7,3,8,6,7,4,1,2,3,3,9,5,5,0,3,6,5,6,6,6,2,9,2,0,9,8,2,1,1,4,0,9,3,3,2,7,7,0,6,0,1,0,2,9,3,8,6,9,2,7,8,0,7,4,0,2,8,8,2,8,0,4,0,3,7,8,9,4,6,0,0,7,0,9,7,5,0,1,5,5,7,4,7,4,8,5,5,9,1,0,1,9,9,1,0,6,5,0,3,6,3,6,2,2,3,7,9,9,5,1,9,9,8,2,8,6,7,8,3,1,8,1,2,3,3,6,5,5,9,7,0,0,9,7,8,8,2,5,4,6,8,3,5,3,9,5,1,3,8,1,0,4,0,6,4,8,5,9,8,6,6,5,7,4,9,9,0,4,6,9,6,6,6,2,4,8,4,8,0,6,4,0,1,4,9,8,0,4,1,6,5,8,2,7,7,4,3,6,6]"
                    },
                    {
                        "username": "ms681729",
                        "content": "this solution is working properly for all cases expect 9999999999 this case don\\'t know why help me.\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] arr, int k) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n       int sum=0;\\n        int prod=1;\\n        for(int i=arr.length-1;i>=0;i--){\\n            sum+=arr[i]*prod;\\n            prod=prod*10;\\n        }\\n        sum=sum+k;\\n\\n        while(sum!=0){\\n            list.add(sum%10);\\n            sum=sum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "ruchitakb7",
                        "content": "first it stucked at 3rd test then i changed data type to long int now it again stucked at 90 ..now what should i do?"
                    }
                ]
            },
            {
                "id": 1978200,
                "content": [
                    {
                        "username": "thisannie",
                        "content": "Back to back 3 easy problems?? HOW!?"
                    },
                    {
                        "username": "Umair9912",
                        "content": "not exactly easy tho"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "If you are not using LL then :\\n1. Use while loop till array_size > 0 || k > 0\\n2. Inside while :\\n             2.1.Use If to check weather size > 0\\n                    2.1.1Add last element of array into k\\n                   2.1.2 decrease array_size by 1. \\n              2.2.Add last element of K in your list\\n              2.3 remove last element of k\\n             \\n3. IF REQUIRED reverse your list and return \\n\\nHope This will be helpful ....."
                    },
                    {
                        "username": "aashrith_d4",
                        "content": "Easy to understand\\n"
                    },
                    {
                        "username": "simrannasrin",
                        "content": "Can anyone tell me why the code below is not working for edge cases like 9999999+1?  \\n\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        int j=0;\\n        for(int i=0; i<num.length; i++){\\n            j=j*10+num[i];\\n        }\\n\\n        int number=j+k;\\n        ArrayList<Integer> list= new ArrayList<>();\\n\\n        while(number>0){\\n            int digit=number%10;\\n            list.add(digit);\\n            number=number/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "masemune",
                        "content": "Every digit past 2^53 will start losing precision which can cause things like erroneous rounding. If you need to work with larger numbers then use `BigInt`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Adding elements from the left is must efficient. We can do that using linked list or other data structure. In python, we can use $$deque()$$  from $$collections$$. We don't need to import it in **leetcode**. Also we just need to  return this $$deque$$ and it will be accepted."
                    },
                    {
                        "username": "anand_083",
                        "content": "  this is brute force method it work properly but in 3rd case it can not give 0th index can anyone have guts to debug this solution  /\\n        int n=num.length-1;\\n       int base=1;\\n      for(int i=n;i>0;i--){\\n          base=base*10;// base mil gyi //\\n      }\\n        int sum=0;\\n// this loop give me 1000,100,10,0, as my question demand//\\n        for (int i = 0; i <n ; i++) {\\n            int temp=num[i]*base;  // 1*1000\\n            sum=sum+temp;           // 1000\\n            base=base/10;              // update base as 100\\n        }\\n        sum=sum+k+num[num.length-1];\\n// however it give sum properly include 3 rd case //\\n\\n// for printing //\\n        for (int i = n; i>=0 ; i--) {\\n            num[i]=sum%10;\\n            sum=sum/10;\\n        }\\n        return num;\\n// run this code in your local compiler  //// "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "why does this code not work for num = [9,9,9,9,9,9,9,9,9,9]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        int number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        int tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, tempnum % 10);\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@adityadewhy](/adityadewhy) nevermind, even long aint enough for the other test case ie [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "i am assuming the problem was with int data type(int too small to store that big a value)\\nhere\\'s the fix\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        long number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        long tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, (int)(tempnum % 10));\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "parth_chittora",
                        "content": "`class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       long value = num[0];\\n        List<Integer> list = new ArrayList<>();\\n        for(int i = 1;i<num.length;i++){\\n            value = value*10+num[i];\\n        }\\n        value = value+k;\\n        System.out.print(value);\\n        int dig;\\n        int i= 0;\\n        while(value>0){\\n            dig = (int)value%10;\\n            value = value/10;\\n            list.add(list.size()-i,dig);\\n            i++;\\n        }\\n        return list;\\n    }\\n} `\\nWhy is it not giving the ans for the test case 999999999"
                    },
                    {
                        "username": "takezo_shinmen",
                        "content": "AYOO guyz ,  whhats wrong eith this test case\\nnum =\\n[7,8,2,9,2,5,4,7,1,8,0,6,6,7,4,9,0,3,9,9,2,2,6,6,2,5,8,3,6,3,9,6,3,3,1,6,2,7,5,9,8,9,4,4,7,5,0,7,3,8,7,6,0,9,0,7,4,1,1,4,0,7,7,7,6,1,6,5,1,7,4,9,0,4,2,4,4,4,2,6,6,2,1,3,6,7,2,1,9,5,8,3,6,4,2,1,6,6,7,1,0,2,9,3,5,6,8,5,4,2,7,0,3,6,5,0,2,1,1,4,0,1,3,7,7,1,9,1,6,5,9,7,3,3,1,0,9,4,6,5,3,2,0,8,2,7,7,5,4,2,9,9,3,1,9,5,5,4,0,7,3,6,8,9,6,5,1,1,7,0,7,5,3,2,3,1,4,8,2,5,9,6,0,0,2,4,7,9,6,2,3,2,8,5,6,1,0,7,9,1,6,5,6,2,8,5,0,9,2,5,4,0,3,6,0,7,0,3,0,0,8,5,1,2,5,5,1,6,6,0,9,7,9,2,2,7,0,4,3,1,0,4,8,8,6,6,4,6,4,3,1,3,1,5,4,4,3,6,4,5,2,3,7,6,2,4,0,3,7,5,6,8,9,8,6,9,6,9,0,1,3,1,9,0,8,1,9,8,0,4,1,8,1,1,6,0,9,2,8,3,6,0,0,7,2,4,6,3,9,9,2,6,4,8,1,1,1,0,8,8,2,5,9,3,5,4,0,2,5,9,9,1,7,3,7,4,0,1,9,5,5,0,8,2,4,5,9,0,3,9,3,0,6,6,0,7,0,4,2,1,4,8,0,4,5,4,9,9,3,4,0,9,1,1,0,2,0,6,1,2,8,6,3,3,2,5,2,9,9,4,0,0,9,5,7,8,9,2,0,4,0,4,9,1,9,3,9,8,3,6,4,8,7,4,9,6,3,7,8,2,3,4,5,6,0,7,5,2,6,4,6,5,8,9,2,5,6,5,7,1,0,1,2,3,2,2,2,3,4,5,0,8,7,0,8,4,3,6,8,9,9,4,9,5,6,8,3,7,5,9,3,7,5,3,8,2,2,9,1,2,1,7,6,2,4,3,5,8,5,8,4,9,5,4,6,2,7,3,7,2,1,5,9,1,1,6,8,8,6,6,8,1,4,7,7,7,7,3,1,8,5,5,0,3,5,8,6,5,2,9,6,0,0,3,1,3,8,3,7,6,5,3,6,9,7,0,9,0,4,1,6,5,0,6,5,7,7,3,0,9,0,2,9,5,1,9,9,9,8,9,4,4,4,6,1,3,2,0,8,3,6,5,0,8,5,7,3,9,1,3,7,1,3,1,6,9,5,5,1,6,7,5,6,5,1,6,4,6,3,4,1,3,8,8,3,9,5,2,5,5,6,9,3,2,9,9,5,7,0,7,0,5,8,0,7,0,8,0,4,6,0,0,3,7,2,3,8,1,4,6,5,6,4,0,4,8,7,5,8,5,8,1,7,3,7,8,8,5,3,4,1,9,3,0,2,9,6,3,3,4,1,8,5,1,7,4,4,4,9,7,3,7,0,7,5,5,0,0,1,9,2,6,0,9,6,5,1,4,0,2,0,7,5,4,8,8,7,0,4,1,0,8,9,9,3,3,4,0,9,5,7,5,3,6,2,4,1,0,9,1,5,7,5,4,5,6,2,9,9,4,2,1,5,6,1,1,8,8,2,8,0,9,0,8,1,4,9,3,0,6,5,1,3,6,2,1,9,1,2,8,7,0,2,4,7,8,3,1,6,4,1,4,9,9,5,4,0,3,8,5,2,3,7,1,8,4,2,2,5,2,9,6,2,1,3,3,3,9,1,1,3,9,1,0,0,6,7,1,3,3,2,6,9,5,2,8,8,7,2,5,2,7,1,4,2,0,1,9,8,5,6,3,2,2,3,3,1,8,9,8,5,6,4,7,8,6,5,8,8,6,0,5,5,0,8,3,6,3,0,1,3,0,8,2,1,6,9,8,0,5,0,9,4,0,5,8,8,9,8,8,5,0,1,1,1,6,2,2,8,8,0,6,7,8,8,3,5,8,4,9,7,2,1,9,4,1,0,1,3,1,6,1,3,7,8,7,3,5,9,1,5,9,8,3,1,7,3,0,2,0,6,8,5,5,5,3,4,3,0,4,0,2,2,0,5,5,9,2,0,9,7,3,3,3,9,5,0,4,1,3,3,2,2,5,1,9,3,5,6,1,6,3,0,3,1,6,3,8,1,9,9,9,9,9,0,5,0,8,9,2,1,5,9,6,6,8,3,0,3,1,2,9,1,8,2,8,8,1,5,1,9,7,0,3,4,3,7,1,0,2,2,5,0,8,1,6,1,4,4,7,0,2,4,4,9,5,1,7,1,8,2,5,0,1,3,3,5,5,2,2,3,5,8,6,6,0,0,3,9,0,1,8,0,6,2,2,9,1,8,2,6,6,4,9,5,1,6,5,9,5,7,3,8,5,2,3,5,6,3,5,7,2,1,0,4,3,2,2,5,9,3,2,2,1,1,5,1,7,4,6,5,8,9,8,6,2,6,4,2,5,2,4,8,0,1,7,8,3,8,5,3,3,2,9,4,2,8,7,2,8,6,7,8,8,7,9,7,3,0,7,7,6,0,9,1,8,7,2,4,9,0,4,4,3,9,2,6,3,4,2,9,6,2,6,7,6,9,9,7,2,4,9,1,3,5,7,7,8,4,9,1,1,0,8,3,5,6,9,0,5,5,4,0,8,3,6,4,9,1,4,4,9,8,2,2,4,4,0,9,1,1,9,3,5,0,6,8,2,5,7,5,0,7,2,7,7,5,1,7,9,5,8,7,9,7,1,9,1,7,5,0,1,8,1,0,5,1,0,5,9,7,8,9,9,5,6,0,1,9,3,1,1,3,2,3,1,2,8,9,9,0,2,9,5,4,7,3,9,5,1,9,4,6,3,2,0,0,0,8,2,6,1,2,4,9,5,7,9,9,6,7,4,0,7,1,5,4,4,6,2,0,4,0,1,8,7,7,5,8,9,6,6,5,0,6,2,5,5,7,7,7,2,9,6,9,4,8,4,0,4,6,1,5,1,6,7,7,0,6,1,2,8,8,6,4,1,0,5,7,6,4,2,0,2,0,5,1,6,9,4,2,2,0,1,6,5,9,8,6,3,7,3,8,5,0,6,5,7,3,0,6,8,2,1,2,9,9,4,3,0,3,1,2,9,6,8,4,6,9,0,3,6,3,2,5,9,9,4,3,6,2,2,5,8,1,6,9,7,1,9,1,7,1,4,8,2,7,4,9,9,8,8,0,4,3,3,9,8,8,9,7,2,3,4,9,2,0,5,4,4,3,4,8,5,7,4,1,1,9,9,7,5,9,2,7,7,2,3,2,2,0,1,6,9,0,7,8,7,3,9,6,1,9,0,4,5,3,4,2,3,2,1,8,2,0,2,5,4,7,4,2,0,7,1,7,7,8,5,6,2,2,0,2,5,7,2,0,6,6,9,0,1,2,4,0,5,5,2,1,6,8,7,9,7,6,7,1,8,0,3,0,6,1,4,6,9,1,4,5,8,4,8,0,5,7,8,2,8,6,7,4,9,9,8,7,7,1,3,8,7,2,1,7,5,3,7,2,2,2,1,6,1,2,1,3,0,2,4,3,8,8,3,7,5,9,9,7,3,3,8,9,2,3,2,5,5,5,2,6,1,9,2,4,8,0,7,9,5,2,7,3,2,9,2,1,9,9,5,0,9,6,4,5,8,8,9,0,8,8,4,2,6,2,2,2,4,9,7,5,3,3,9,1,0,7,0,0,3,9,4,8,4,8,6,6,4,0,3,4,9,0,4,0,3,9,1,4,5,8,0,2,4,3,8,8,6,6,2,8,4,3,8,3,9,2,4,3,7,4,7,7,9,3,6,3,8,1,2,5,0,9,3,5,0,3,0,5,5,0,3,3,8,8,4,2,3,4,3,9,3,5,2,3,2,8,7,2,2,7,5,9,5,8,9,4,7,6,6,1,5,9,2,8,7,5,6,3,0,7,9,0,0,7,8,7,0,5,2,4,5,9,6,0,0,8,9,3,4,0,7,7,7,3,5,1,3,9,6,1,0,7,3,2,9,3,4,0,8,5,3,2,2,5,7,4,3,6,1,3,0,3,1,4,4,7,4,2,1,1,3,8,4,9,1,0,7,1,1,5,6,8,9,2,0,8,7,7,3,6,6,5,0,8,8,9,0,6,5,9,9,3,2,8,6,1,9,8,2,2,4,4,9,6,1,9,5,5,4,7,4,6,9,7,5,4,5,5,2,7,7,3,6,9,9,0,9,1,3,9,5,4,7,2,8,0,9,9,6,5,9,2,4,9,8,9,9,0,8,5,4,3,0,7,9,1,1,8,6,4,5,7,9,4,3,7,5,3,1,1,6,0,0,3,8,1,2,9,3,3,3,9,3,5,8,5,9,6,3,9,8,5,3,4,9,2,0,8,6,3,5,2,5,4,4,3,7,9,9,9,5,9,1,2,4,5,4,0,0,4,1,2,3,1,7,9,3,1,4,8,7,1,1,1,5,0,8,1,8,8,4,9,2,6,6,7,5,4,4,7,1,3,1,5,4,1,4,7,3,6,0,8,7,6,6,1,7,9,1,6,5,4,8,2,8,1,8,4,0,6,8,4,5,3,1,4,2,2,2,9,4,0,1,0,5,7,2,5,3,4,3,9,0,8,0,8,6,4,5,5,9,8,3,4,5,6,6,8,0,7,8,0,7,3,6,7,8,4,6,3,6,0,3,0,7,5,6,3,4,5,2,1,5,7,6,3,4,8,9,7,9,8,9,3,7,1,3,1,1,2,7,1,4,1,0,2,9,6,5,5,4,0,3,1,1,1,2,2,8,1,3,1,1,6,9,7,5,2,5,4,8,7,7,4,9,3,9,0,1,8,9,5,6,7,9,6,2,1,0,9,3,5,9,4,4,4,2,6,8,0,3,4,5,7,2,0,1,4,2,0,6,1,9,8,7,6,1,1,2,8,3,8,6,1,9,1,2,2,5,4,3,2,5,2,8,2,2,7,5,7,6,7,6,9,9,7,3,9,8,6,2,6,9,5,9,3,3,7,0,9,8,5,1,2,7,6,5,7,5,6,9,5,6,7,6,7,3,4,5,0,9,4,9,2,6,8,8,1,7,2,1,8,8,7,1,5,7,6,5,6,3,6,7,6,3,4,6,3,1,3,9,4,7,6,1,0,9,2,0,9,0,6,2,5,0,4,8,8,3,2,8,5,6,9,0,0,2,7,8,7,7,0,2,3,9,6,0,8,0,6,6,1,6,9,7,9,1,6,4,0,5,9,2,8,1,5,4,3,2,1,9,9,1,8,3,5,6,9,8,0,4,7,8,8,7,9,8,7,4,0,5,9,8,1,8,1,8,0,5,2,3,9,9,6,2,1,5,7,5,4,7,1,7,3,3,6,8,8,3,7,7,9,2,1,7,0,9,1,7,2,8,5,5,4,3,2,4,8,8,2,3,0,4,9,3,3,6,6,0,7,0,0,8,9,8,6,6,4,5,9,4,9,8,2,5,1,8,4,2,7,0,7,0,0,4,2,1,6,7,0,6,0,5,6,4,0,1,7,5,9,2,9,4,9,6,3,9,5,8,0,0,2,8,0,9,6,7,8,8,4,5,6,8,0,5,8,4,3,8,8,3,4,9,3,3,6,5,4,9,9,3,0,4,3,0,6,7,4,7,5,8,7,5,1,0,8,0,1,4,8,8,3,3,3,1,8,4,4,3,8,5,7,9,3,9,5,5,0,4,5,0,7,8,2,2,9,1,6,1,6,5,7,5,8,7,5,7,6,6,0,8,2,1,0,3,0,2,2,7,4,9,8,2,6,7,1,0,8,1,8,0,5,1,0,0,1,3,1,8,9,2,8,9,1,2,7,0,2,3,6,1,1,5,0,2,1,6,2,5,9,3,1,9,7,2,8,7,3,5,7,4,3,3,1,1,9,3,4,8,8,4,6,2,6,4,3,8,7,7,1,3,4,4,6,9,4,1,3,2,0,7,2,4,1,2,9,9,1,4,1,3,5,1,9,4,1,5,4,6,0,3,0,8,1,7,6,9,4,9,1,8,2,4,9,5,9,6,9,3,3,2,5,0,1,8,4,8,1,6,0,4,9,1,3,9,4,5,0,6,7,1,7,4,6,5,0,8,1,0,0,1,2,3,5,2,9,8,9,6,4,6,4,5,5,1,2,2,3,3,7,1,3,9,6,8,8,3,6,3,4,4,0,0,6,7,4,2,8,7,8,7,8,6,8,1,4,3,6,5,0,1,5,3,4,0,9,0,1,6,8,3,9,3,9,1,1,4,4,4,1,5,7,3,8,5,7,1,8,9,0,9,3,1,0,3,8,3,1,9,2,6,2,5,4,4,9,0,2,5,1,5,1,8,9,2,7,7,9,7,2,2,6,7,7,9,0,7,2,8,3,6,2,0,0,6,7,3,4,7,3,0,8,8,5,8,2,7,6,2,5,1,8,2,6,6,3,7,2,3,6,7,5,8,1,9,4,5,6,4,6,7,7,7,7,3,9,9,4,8,3,5,5,7,1,7,4,5,6,0,3,5,5,3,4,1,4,5,6,4,8,9,6,8,0,1,9,5,6,6,8,6,9,4,6,2,5,9,9,6,4,4,5,5,8,0,9,2,3,5,5,6,8,9,4,2,7,9,2,8,8,2,1,1,4,3,7,5,4,5,3,6,3,5,5,3,9,8,5,0,0,1,1,0,7,9,2,5,8,1,0,6,0,6,5,6,5,9,7,1,0,1,9,9,3,1,1,7,0,4,3,1,8,7,3,8,2,3,8,7,8,2,3,6,6,4,5,0,7,4,8,3,4,0,7,1,8,6,0,5,0,8,5,1,3,3,2,7,4,9,1,6,5,9,5,1,1,1,6,2,1,5,3,6,2,4,4,6,1,1,1,8,7,1,9,9,4,7,2,3,4,5,9,7,6,9,5,3,4,6,8,2,0,8,4,9,8,6,8,4,6,7,4,7,7,8,2,6,7,1,2,1,0,6,0,5,1,9,8,2,2,9,4,6,0,7,0,0,5,8,5,3,2,9,4,1,6,7,2,0,7,3,6,8,1,9,8,0,8,8,7,0,6,1,9,8,7,4,5,0,8,6,9,8,6,2,7,9,3,5,1,9,2,5,8,8,5,1,2,2,2,1,6,9,7,8,4,8,9,0,2,3,8,7,9,6,9,7,2,6,2,4,6,6,7,8,9,4,2,9,7,3,7,1,3,5,5,9,8,4,1,7,0,6,9,6,3,4,7,0,7,4,4,5,8,9,1,1,3,9,1,3,3,8,3,0,0,5,7,2,3,3,4,7,1,7,5,5,7,0,3,8,5,1,7,0,5,9,0,2,0,8,7,5,3,6,4,6,9,3,0,1,6,8,9,9,9,1,2,0,0,9,5,2,9,4,5,8,4,0,5,7,6,5,5,4,0,2,2,3,7,7,8,6,8,0,6,7,8,4,6,0,5,1,4,1,8,9,6,9,9,5,8,4,8,4,0,1,0,8,6,9,4,0,8,6,9,3,6,0,8,1,4,6,8,0,4,6,0,2,1,2,5,4,5,1,6,1,4,7,4,3,1,5,4,4,5,5,1,1,3,3,5,7,4,2,7,0,1,3,5,9,6,8,2,2,2,0,0,8,1,3,8,9,3,2,1,1,1,3,9,6,1,1,1,7,7,7,1,4,4,5,0,1,3,7,4,7,0,9,7,7,1,2,9,1,7,9,8,3,3,6,5,2,3,1,9,2,9,3,8,7,5,7,1,4,7,6,9,2,5,8,4,6,9,8,1,2,0,4,2,1,9,8,4,9,7,6,3,0,4,8,8,3,2,2,9,5,5,7,2,3,2,7,6,8,2,3,4,4,6,4,6,1,5,2,7,8,4,9,1,4,2,9,2,9,1,6,9,4,1,2,6,1,4,8,4,9,9,3,4,5,5,5,4,0,2,7,9,5,7,7,1,0,9,9,2,9,4,9,1,3,1,2,4,6,3,2,4,6,7,9,1,5,2,3,2,6,4,4,5,8,5,9,9,0,5,8,5,9,1,0,9,7,9,7,6,8,6,6,9,9,6,6,3,0,8,4,9,9,3,3,2,0,7,9,7,8,2,9,2,7,9,9,0,2,8,4,0,4,9,0,3,9,4,6,5,6,6,9,1,3,5,5,6,4,4,6,1,2,2,4,4,2,2,0,4,1,6,3,4,7,0,7,0,3,3,6,5,7,7,8,3,9,9,9,5,2,3,7,6,7,9,4,0,8,8,3,5,3,7,6,5,8,1,9,5,9,2,7,4,9,5,2,4,1,8,7,6,6,2,8,6,5,3,4,6,2,2,5,2,5,3,9,3,7,2,4,2,5,7,3,3,2,4,3,1,7,9,3,5,6,3,0,0,0,8,5,9,9,6,3,0,0,6,1,2,1,4,0,2,0,1,5,8,0,4,5,4,0,8,8,1,5,4,6,5,9,7,6,8,4,2,2,5,9,0,5,0,0,3,5,3,1,8,7,6,2,0,4,3,1,3,7,6,4,9,8,5,0,9,6,6,5,7,3,2,2,0,0,1,7,6,6,9,2,0,4,2,8,0,6,5,5,3,0,0,7,4,6,7,9,8,3,9,6,1,6,3,9,6,3,4,5,8,4,9,0,1,8,4,0,8,8,8,4,2,6,8,1,3,7,3,0,9,6,5,3,8,3,8,8,1,9,5,5,3,7,7,2,5,8,7,7,0,5,5,7,9,2,9,2,5,9,7,1,6,9,9,2,9,6,2,4,8,8,6,3,6,0,7,6,6,0,4,3,2,3,7,3,9,6,5,7,0,8,5,3,5,8,3,5,9,7,4,5,0,8,7,1,8,2,3,5,0,6,8,4,8,5,7,1,0,3,2,6,6,8,3,7,9,8,0,6,2,9,0,0,4,5,8,5,5,9,4,8,0,7,1,3,7,5,2,4,4,4,6,0,3,0,3,6,2,9,9,8,5,5,1,2,0,9,2,2,9,7,3,4,9,4,5,7,2,2,9,9,9,0,5,4,5,6,0,4,7,5,7,0,3,2,8,0,0,1,9,0,6,9,2,6,8,8,5,9,8,1,5,1,4,2,5,3,6,0,5,6,5,1,1,7,1,2,4,3,1,0,4,6,4,5,9,0,0,1,2,5,4,1,5,9,4,8,2,8,7,5,8,9,3,5,2,2,6,7,0,6,6,9,6,6,1,3,9,7,9,1,1,4,4,3,5,1,8,5,9,0,6,1,8,2,6,9,2,3,5,5,7,2,5,4,0,0,5,9,7,5,1,5,7,3,5,8,4,1,0,7,8,4,7,2,1,9,6,5,3,2,2,4,1,4,4,7,5,1,9,3,2,7,2,9,4,3,0,5,5,8,3,4,2,8,2,0,9,0,2,1,6,3,8,8,4,2,6,1,0,0,6,0,2,4,2,2,1,4,2,0,1,5,6,1,8,5,5,8,7,4,3,7,7,7,6,7,6,0,8,8,7,9,0,1,9,6,1,2,8,0,7,5,3,5,8,1,0,3,2,7,7,3,2,3,8,7,7,5,7,6,4,3,2,5,5,0,2,9,6,7,3,0,3,2,0,8,0,0,5,1,8,2,4,1,8,1,7,6,3,2,1,5,3,8,5,2,4,9,9,7,1,9,1,5,9,7,8,0,4,4,8,8,8,6,8,4,4,0,3,8,3,8,2,4,5,5,2,0,3,5,9,6,5,2,6,3,5,0,6,0,5,2,2,0,9,6,2,8,7,9,3,6,1,6,2,2,8,5,2,6,3,7,9,5,9,3,1,4,9,2,9,5,4,8,9,9,9,3,2,7,2,7,6,4,3,5,2,4,1,4,3,1,9,8,8,8,7,6,7,6,6,0,2,5,7,7,9,4,5,0,0,5,8,9,7,6,0,1,3,5,7,0,6,7,8,9,4,6,1,3,3,6,6,1,0,6,4,4,4,6,3,2,6,2,9,3,0,3,4,7,3,6,0,9,8,3,4,6,9,7,0,0,7,7,1,1,5,8,3,8,4,9,0,5,6,6,4,0,9,0,9,3,9,7,4,2,1,5,7,6,5,9,9,9,2,7,0,5,8,2,8,2,0,9,9,7,1,3,5,1,8,7,7,8,5,4,3,2,3,5,4,8,2,2,6,8,7,8,0,9,7,1,4,0,9,4,9,0,0,4,6,2,9,0,7,0,1,4,7,5,6,5,3,8,2,3,9,9,8,7,4,0,8,1,9,5,7,5,6,0,0,9,3,7,4,6,9,9,3,3,7,6,1,9,8,1,3,3,5,4,2,0,2,4,3,9,8,4,5,2,4,5,0,6,3,5,1,9,9,5,6,1,4,1,6,8,1,7,0,0,5,2,2,2,2,7,4,2,6,0,1,5,7,1,8,9,7,6,3,7,7,0,3,4,6,2,7,3,1,1,3,3,9,6,5,6,5,8,6,6,2,1,1,3,7,5,3,6,7,2,1,7,2,5,1,0,8,4,2,6,4,1,4,3,2,8,7,0,7,9,9,6,5,0,4,0,3,9,6,7,8,4,9,5,4,9,0,4,8,4,7,6,8,4,5,9,1,1,2,6,8,8,2,8,8,5,7,9,4,4,8,9,0,2,7,2,1,9,5,2,6,4,8,9,4,7,3,1,3,9,7,2,1,6,8,1,8,8,7,7,7,3,7,2,5,0,8,1,6,4,6,6,1,0,7,8,2,8,3,3,2,3,7,7,5,8,2,1,1,2,0,3,9,6,8,8,9,5,8,6,9,8,9,5,3,6,8,6,4,4,2,6,6,2,6,8,7,4,0,1,8,2,9,3,1,2,1,4,6,6,1,8,5,4,7,1,7,2,5,9,9,0,4,9,4,5,9,9,3,0,4,5,1,4,6,2,3,5,6,8,8,3,2,1,4,6,9,2,0,4,5,8,4,0,6,1,9,7,3,0,0,7,6,5,2,6,5,4,3,7,1,9,9,7,0,7,9,9,3,0,3,2,3,3,9,6,0,2,2,5,4,4,2,0,5,8,8,8,8,9,1,6,6,5,0,1,0,7,8,3,3,9,1,8,7,4,8,7,4,1,8,7,5,0,5,4,3,4,5,0,8,1,7,0,4,7,1,6,6,0,5,4,1,4,9,0,6,3,4,3,8,9,3,4,7,0,9,2,1,8,2,9,9,2,0,0,4,9,7,1,1,0,7,0,6,0,3,4,6,7,4,3,6,6,4,1,0,1,1,8,6,9,9,0,6,4,8,4,7,2,4,3,9,8,2,9,4,2,7,2,9,5,0,3,4,1,8,5,5,6,6,2,0,4,6,1,4,9,8,5,2,5,1,2,1,3,0,9,2,3,3,4,2,6,1,7,8,7,1,2,3,9,9,9,7,2,1,1,1,5,9,6,1,4,2,5,2,4,9,0,4,3,1,5,1,8,2,1,0,8,0,2,8,8,8,6,5,4,4,0,3,6,0,7,0,9,6,4,0,1,5,4,2,0,5,7,4,0,5,7,1,6,2,0,1,0,8,3,5,7,4,0,9,5,5,7,5,8,9,6,5,9,8,8,3,7,8,8,8,9,1,7,6,3,8,1,5,0,0,3,6,3,7,8,9,5,3,2,0,4,6,9,8,5,8,2,3,1,9,7,3,2,6,2,3,7,6,5,7,8,9,1,2,6,6,5,2,2,9,1,2,0,5,9,7,7,8,9,3,9,0,4,7,7,1,8,4,1,7,6,8,0,4,2,3,8,0,9,4,0,3,1,7,3,9,9,8,2,1,0,7,9,0,3,0,1,5,0,7,4,6,2,9,8,2,9,9,6,9,1,2,2,3,7,5,2,0,2,7,7,8,5,6,8,4,8,2,2,5,4,9,3,8,1,7,3,0,1,0,2,3,8,3,6,8,6,4,6,5,6,1,3,4,7,7,1,7,8,7,0,8,4,8,4,5,6,0,9,3,3,1,7,2,6,8,0,9,8,4,2,9,8,4,7,3,6,0,8,4,9,7,4,4,6,0,9,9,3,7,1,9,2,0,2,3,9,1,3,7,7,6,4,4,3,2,3,6,6,0,8,4,5,4,5,8,1,9,0,8,1,1,5,7,4,1,7,8,5,1,6,4,1,1,6,2,7,5,3,6,3,6,0,4,4,6,8,7,9,8,2,1,7,3,4,7,9,7,8,5,6,6,8,8,8,2,6,6,3,8,4,1,4,4,3,2,6,6,0,2,5,4,6,7,7,8,4,3,9,0,4,0,6,1,8,0,6,7,7,4,0,7,8,5,7,8,1,5,4,2,7,1,5,9,2,3,7,4,8,5,6,7,7,3,1,1,5,5,7,3,3,8,6,1,2,3,5,3,2,5,6,6,3,6,7,2,7,5,1,4,1,3,8,7,6,6,2,2,1,2,2,3,3,0,0,1,6,8,6,6,0,6,5,2,4,6,7,3,0,3,5,2,0,8,7,7,0,6,0,2,4,3,3,6,5,6,2,8,8,2,6,7,9,0,7,0,9,3,4,3,2,9,0,1,8,5,3,0,6,8,4,5,6,0,0,0,5,4,6,3,9,0,6,0,2,1,1,3,1,5,7,4,0,5,2,2,4,5,4,6,4,7,5,9,2,4,4,2,5,7,4,7,0,7,1,8,8,8,9,9,6,8,4,7,9,4,8,8,9,9,2,8,8,9,2,2,4,8,1,2,3,9,8,2,9,4,8,7,5,6,1,4,6,2,2,2,5,3,0,5,8,4,7,2,2,7,6,0,6,7,9,5,7,2,2,2,9,7,1,6,2,9,5,4,6,1,4,7,2,9,0,6,6,4,5,6,8,3,2,0,0,0,8,7,5,6,3,8,5,8,9,8,6,4,5,0,7,7,3,7,1,4,2,0,4,9,7,8,5,0,9,6,5,3,0,4,5,3,0,0,1,1,2,3,9,9,0,6,5,9,9,7,2,0,4,1,2,2,4,4,8,2,1,9,5,6,1,5,0,9,1,9,8,3,7,3,5,9,4,1,3,1,3,2,4,9,3,4,5,9,7,2,2,5,1,4,3,0,1,6,4,1,7,3,2,0,1,1,4,8,7,8,2,3,1,1,7,6,6,2,6,4,9,3,7,5,1,3,4,0,0,7,3,0,8,1,0,9,1,9,6,5,7,9,1,6,5,7,8,3,7,2,2,0,2,4,0,8,5,1,2,8,4,1,2,1,2,1,0,4,3,6,1,4,9,0,5,5,4,9,2,3,5,5,9,3,8,8,6,2,6,8,1,9,4,7,8,9,3,7,8,2,0,3,6,8,6,2,2,6,0,5,1,0,6,4,2,8,8,3,5,8,8,2,6,9,0,0,0,1,8,8,6,3,5,9,5,2,6,7,1,6,6,5,8,7,0,9,5,6,3,7,2,7,1,7,2,3,4,1,2,2,9,0,0,7,0,4,7,4,4,1,1,6,8,6,1,9,0,6,7,7,5,3,4,3,1,0,8,1,6,2,4,1,9,7,5,1,7,2,6,0,9,3,3,0,6,1,5,1,3,9,3,7,1,7,8,1,8,4,2,9,0,7,2,6,1,2,4,0,9,3,7,1,0,6,5,1,7,5,6,3,7,1,1,7,7,9,1,7,3,1,3,6,3,9,3,3,0,2,7,5,1,3,0,4,0,0,2,6,3,9,2,0,1,3,4,6,4,8,8,8,0,2,2,8,4,7,6,9,6,8,3,9,0,3,8,9,4,6,7,8,3,0,5,6,6,4,6,6,1,9,8,0,4,9,9,2,7,6,6,8,3,9,1,0,9,8,0,3,7,6,4,8,9,3,1,2,2,4,8,4,8,5,7,9,7,4,9,1,5,8,5,9,1,0,5,8,8,2,0,8,8,1,4,2,2,0,5,7,6,0,3,3,8,1,8,3,9,9,9,6,3,6,2,2,7,8,3,3,2,7,1,2,1,4,0,2,6,6,9,4,9,5,2,5,1,3,5,3,7,7,7,0,2,4,7,6,1,1,0,4,4,2,3,8,8,7,8,4,2,3,0,2,9,5,4,2,4,4,5,2,0,2,1,4,9,4,0,0,3,0,4,8,8,5,4,7,1,4,2,8,1,5,3,6,1,5,9,9,0,5,1,1,4,2,9,3,0,2,4,3,0,8,4,1,6,3,7,5,6,6,6,4,3,9,2,6,0,6,1,4,1,0,6,4,5,0,2,1,6,2,3,8,3,5,5,4,3,1,8,7,9,8,3,9,3,2,2,6,6,9,4,8,6,7,6,7,5,5,1,4,6,5,7,7,2,4,9,6,2,4,8,8,4,6,4,1,5,6,6,4,2,3,6,7,8,5,7,9,8,0,9,8,9,0,1,9,6,1,7,6,2,4,9,2,8,9,0,2,5,3,8,5,0,5,7,1,5,4,5,1,9,7,3,7,2,5,5,1,5,7,7,4,0,1,4,6,0,0,8,2,8,6,7,4,9,7,4,7,5,6,0,9,9,9,4,3,4,5,9,4,6,4,3,3,8,0,3,2,6,3,7,0,5,0,0,9,5,2,2,7,3,0,2,4,7,5,0,0,5,1,9,5,5,6,4,8,8,8,5,4,2,5,1,0,2,3,0,6,0,7,4,2,8,2,4,5,3,8,9,5,5,6,0,9,3,0,9,0,9,5,4,3,6,7,4,4,0,2,2,9,4,6,6,9,8,1,1,7,4,5,4,9,7,7,0,1,6,5,2,3,6,1,5,5,3,9,1,7,6,4,2,0,4,0,9,3,5,1,9,7,2,9,5,9,4,9,8,7,9,2,7,0,5,4,4,7,4,5,2,2,8,8,7,0,3,7,8,5,1,5,6,8,4,5,3,8,6,1,0,2,5,7,4,4,4,0,7,7,2,3,6,4,9,9,0,5,2,3,3,0,2,9,8,8,2,9,4,7,6,1,3,9,3,0,7,1,9,0,6,5,4,7,4,8,3,0,9,6,2,8,9,4,6,6,0,9,9,7,1,9,4,9,5,5,9,3,9,6,4,5,1,0,1,7,5,5,6,3,6,9,4,6,6,1,8,2,0,6,2,0,9,5,0,0,4,5,4,2,0,4,5,1,2,3,5,6,6,2,5,5,8,9,6,8,8,4,6,1,6,7,9,0,1,4,6,3,6,8,7,4,6,2,5,3,0,0,5,4,1,3,2,5,1,5,2,4,5,3,2,5,3,5,2,9,4,6,5,4,0,6,4,3,6,0,8,3,9,4,6,9,4,7,4,8,7,6,6,9,4,2,1,1,3,0,5,0,0,2,3,7,1,7,7,1,6,4,6,0,1,4,4,6,5,8,8,6,7,3,8,2,6,2,6,6,7,7,5,8,9,1,6,7,3,0,8,6,0,6,4,2,0,8,5,2,7,8,2,5,6,8,0,4,7,0,3,7,5,8,6,8,6,5,6,2,4,2,4,2,4,3,6,8,3,2,0,3,8,3,9,2,8,3,7,4,5,9,1,0,7,4,2,3,7,9,9,9,1,2,5,1,7,9,1,3,9,7,5,2,4,8,4,2,9,5,5,7,1,1,4,1,0,4,6,4,2,3,3,2,7,0,4,6,6,0,5,6,0,7,3,3,2,1,8,7,2,8,3,8,4,7,6,1,2,0,4,5,2,4,8,3,9,0,1,8,1,4,9,6,6,8,8,1,4,0,0,5,2,3,7,2,1,0,3,7,1,5,9,8,6,4,4,9,7,7,8,3,2,5,9,7,1,7,7,4,3,3,6,0,6,5,9,4,4,6,9,6,3,7,8,0,1,8,6,2,2,9,2,8,1,7,0,9,6,3,0,6,7,2,7,0,6,9,6,4,7,8,2,2,6,3,1,7,6,4,7,6,1,4,9,4,0,1,7,3,6,8,4,9,3,4,7,3,7,3,3,8,9,9,1,1,3,7,7,3,3,9,6,4,0,5,2,6,0,0,1,1,9,0,9,0,9,8,5,4,9,7,9,5,4,6,2,5,7,0,1,7,1,0,8,5,0,5,9,7,4,1,6,1,9,3,5,3,8,8,9,4,8,5,2,5,3,4,8,3,9,7,3,7,4,6,0,6,6,4,8,5,4,9,6,1,3,1,9,7,5,4,9,0,2,4,3,1,1,3,6,6,9,5,2,6,4,2,1,9,0,6,9,5,1,9,3,2,8,4,6,6,4,1,8,6,6,9,2,7,3,3,7,0,4,1,8,2,7,7,9,9,7,1,4,8,2,2,6,9,6,2,5,8,7,0,7,4,1,3,7,4,8,5,5,2,8,0,8,8,8,3,4,4,5,3,0,2,7,3,4,2,9,8,9,3,1,3,9,2,6,0,9,0,5,3,6,6,2,2,9,4,4,4,9,2,1,7,4,2,1,0,1,8,1,7,7,2,3,7,9,8,0,4,1,8,9,9,8,1,0,5,7,4,6,6,5,2,4,9,1,1,9,9,6,4,8,7,4,8,4,0,5,4,3,0,3,9,6,7,6,6,2,7,3,1,5,7,2,5,6,7,9,3,2,1,3,5,6,1,2,0,1,9,2,5,1,1,2,5,6,4,4,7,2,2,6,8,6,8,2,1,3,0,8,5,4,0,9,8,6,9,9,7,3,2,6,4,9,4,4,9,0,0,8,8,6,0,8,7,6,7,0,1,8,5,8,7,7,6,5,0,7,1,0,3,7,3,2,6,4,7,7,1,7,3,3,1,3,3,0,2,5,5,2,7,3,8,7,8,8,9,4,6,3,2,6,9,9,1,8,0,9,5,3,8,0,9,4,0,0,5,4,2,2,0,5,1,8,4,8,6,4,6,2,3,5,8,3,8,5,7,2,6,2,4,3,2,1,7,9,1,3,2,5,8,2,3,3,4,7,1,6,1,0,9,8,8,3,4,9,6,0,8,5,2,3,3,3,2,8,1,8,2,5,4,7,7,3,8,6,6,3,4,5,3,0,9,2,3,3,0,3,5,0,4,9,9,9,5,3,2,3,1,2,1,3,0,6,1,5,0,9,9,5,7,0,9,4,7,2,6,9,3,4,8,4,5,4,3,9,1,3,1,9,9,3,9,5,5,5,3,1,8,7,9,2,4,3,1,8,7,5,3,7,5,5,7,3,8,3,8,0,5,6,4,4,9,1,3,6,7,9,3,3,8,9,9,2,5,9,7,1,2,5,6,4,7,6,8,1,8,7,0,8,3,7,3,4,2,7,3,8,8,6,5,4,8,5,3,5,1,9,9,6,1,4,8,0,6,2,3,6,7,5,2,0,1,8,0,6,0,5,6,6,3,9,9,5,9,6,9,8,7,7,1,7,2,1,8,9,1,7,5,5,6,0,5,7,8,3,3,2,1,9,5,5,6,6,1,7,9,1,6,2,9,6,1,6,2,1,4,4,2,8,9,1,0,7,1,5,6,9,9,6,6,5,9,7,5,2,0,2,1,1,4,4,5,5,5,4,1,8,9,1,7,8,8,6,2,2,8,8,6,5,7,8,2,6,0,4,4,4,9,0,3,7,6,2,3,1,1,7,5,7,9,7,5,0,8,2,0,2,3,5,2,6,9,0,7,8,5,6,6,4,2,7,4,8,2,1,2,1,5,2,1,5,7,5,7,0,7,0,2,4,2,1,9,1,7,2,5,5,1,8,5,8,6,1,0,3,1,7,9,3,8,1,9,3,6,8,3,6,7,2,2,2,2,6,8,3,3,1,2,2,3,0,4,6,1,1,8,7,6,8,3,9,9,6,3,6,3,6,6,0,8,2,0,5,8,8,6,0,0,9,9,6,3,8,7,1,6,7,2,1,3,5,7,2,4,3,5,1,0,9,3,6,1,9,8,7,6,5,8,9,4,0,2,7,4,3,7,0,9,3,2,5,1,4,1,3,1,4,6,7,9,4,7,0,9,5,9,4,6,6,8,1,4,2,4,7,0,9,8,2,3,8,7,9,4,1,8,2,5,9,5,8,5,8,0,6,3,2,4,5,6,6,9,2,6,2,9,8,1,8,2,6,9,5,3,1,9,4,9,2,1,0,5,0,5,9,1,9,7,5,9,7,9,1,4,4,0,1,9,6,3,0,5,5,1,9,3,6,6,8,1,9,9,3,1,3,6,6,2,5,7,5,7,0,9,9,5,0,1,4,8,7,3,8,8,6,2,0,3,7,4,9,7,1,8,0,5,4,0,0,4,0,3,1,5,4,7,0,1,0,5,2,4,7,8,0,2,1,5,4,9,5,9,6,1,4,9,1,6,5,2,4,8,5,5,9,5,0,1,2,2,1,9,9,7,6,5,8,6,4,2,2,7,7,7,3,2,9,2,2,9,2,6,4,2,9,2,2,8,0,7,6,6,5,5,6,3,7,4,8,7,9,2,6,1,7,7,8,6,6,2,1,9,1,0,0,9,7,4,1,5,7,3,4,0,3,0,5,1,4,0,5,2,6,2,1,3,8,8,7,2,6,2,6,8,9,5,0,3,7,8,6,4,8,5,1,2,1,1,2,4,7,5,0,2,8,2,8,9,0,8,1,6,9,0,7,5,8,2,9,2,5,2,3,6,0,3,8,4,4,3,6,9,1,3,8,6,1,0,9,2,7,1,7,5,9,9,4,5,0,0,0,9,2,7,8,6,4,1,8,8,9,9,0,5,6,3,8,3,1,6,8,3,3,9,3,9,2,5,9,7,1,1,2,3,4,8,6,7,2,5,5,4,7,2,8,6,1,1,1,9,0,2,9,2,1,7,2,6,3,0,2,7,7,7,8,6,7,7,3,3,2,3,6,0,7,3,4,8,3,6,7,0,9,0,8,4,5,8,9,9,1,1,0,2,7,3,8,8,2,4,4,6,8,9,1,6,7,8,7,6,0,7,3,2,8,8,9,8,7,7,1,6,3,0,4,5,3,3,6,6,0,1,6,4,0,8,3,4,8,2,4,8,2,4,4,3,4,9,2,6,6,2,2,5,4,0,0,3,7,8,8,2,1,6,2,9,6,2,0,3,2,6,1,1,4,6,6,0,6,7,9,4,4,4,4,4,5,1,8,6,2,6,2,3,7,5,9,9,0,3,2,5,7,8,3,3,9,3,8,7,5,0,6,2,3,7,4,7,5,9,3,6,9,4,4,8,4,4,1,4,2,2,7,2,0,3,8,3,4,0,7,8,4,0,2,1,5,1,8,9,4,6,7,2,4,8,3,5,5,9,3,2,4,6,1,8,6,2,5,9,1,2,9,0,5,0,4,8,8,9,0,7,0,8,0,4,3,0,9,7,7,5,0,2,0,1,7,6,6,8,2,3,1,2,6,9,9,7,6,5,4,6,9,7,2,7,6,1,0,5,0,4,7,2,2,1,2,5,3,7,2,0,2,6,2,9,1,1,2,4,5,4,4,1,0,0,7,3,0,5,8,5,2,5,6,2,9,7,4,9,5,8,6,6,4,4,9,8,4,4,3,9,9,0,2,3,5,9,3,9,2,7,1,1,5,0,3,1,8,7,9,9,7,2,9,0,3,6,9,9,5,5,3,4,7,7,7,0,2,5,4,4,8,8,2,1,0,2,6,2,9,9,8,1,7,2,2,1,0,6,1,6,3,8,1,0,4,7,2,3,0,4,2,3,1,0,2,5,5,7,9,5,2,7,1,7,7,7,3,4,4,0,1,8,6,8,9,3,4,7,6,9,6,4,4,2,2,6,2,2,9,9,9,5,8,6,0,1,1,7,1,7,1,0,6,3,3,9,9,4,5,6,6,7,9,2,1,5,2,9,7,9,1,9,0,4,7,6,9,9,7,1,2,6,8,2,4,7,2,8,8,6,3,7,1,2,5,5,7,6,3,6,9,0,0,5,0,1,5,5,9,1,1,0,9,3,2,4,1,9,0,8,5,0,3,6,3,1,9,9,8,8,7,1,6,9,7,0,6,1,9,8,3,1,9,6,3,9,9,2,5,2,2,0,4,9,4,9,5,3,9,6,9,6,7,7,0,0,3,2,3,6,0,6,8,4,1,8,6,4,2,9,7,6,4,9,4,3,0,0,6,7,6,8,5,4,0,3,8,3,3,2,7,5,6,3,2,2,9,9,8,2,3,7,2,5,2,4,9,1,9,0,8,5,0,6,8,9,4,8,8,7,8,5,1,4,1,6,1,7,1,8,8,1,9,5,1,1,2,5,5,8,3,7,9,7,2,7,8,4,6,8,8,9,2,9,0,7,3,9,0,8,9,9,6,9,8,3,2,6,0,7,9,5,3,5,0,1,5,9,4,1,1,0,6,5,2,3,3,8,5,8,2,3,1,2,0,0,1,8,0,7,2,9,1,6,2,7,5,0,4,7,3,5,7,2,1,1,2,8,4,2,7,5,4,4,5,6,4,9,8,2,4,3,8,0,4,5,4,9,5,1,2,5,9,1,3,1,0,7,8,1,9,7,9,7,6,6,4,4,2,0,2,4,0,9,8,1,3,4,7,9,4,2,1,0,3,4,2,0,0,9,3,3,2,5,2,2,3,9,2,4,5,3,3,6,0,3,3,5,5,4,3,5,6,7,2,9,8,4,0,0,2,4,0,6,4,2,8,9,7,0,0,0,9,3,3,9,9,0,2,8,1,8,9,1,7,4,9,4,4,9,3,4,2,7,0,6,0,8,2,6,5,9,2,8,9,6,6,7,2,4,9,6,1,8,4,8,4,2,3,2,8,1,3,7,0,6,9,8,9,5,0,4,3,4,7,2,9,0,6,3,3,9,7,2,6,7,9,6,0,1,6,6,2,2,5,3,2,6,5,3,8,6,0,0,0,9,9,7,8,2,7,6,3,4,8,5,9,5,8,5,4,3,8,0,0,4,7,3,2,0,1,3,8,9,0,4,2,5,5,9,9,8,6,2,8,1,4,5,3,9,5,4,0,4,6,1,1,4,0,0,0,1,9,5,6,6,6,1,2,8,5,0,9,9,1,5,6,2,1,4,1,8,2,5,8,7,6,7,1,6,1,6,2,2,9,8,3,7,7,5,4,6,2,6,2,4,9,0,2,9,0,2,1,1,1,4,7,9,4,8,3,3,3,0,8,5,0,9,4,5,8,8,5,6,4,9,5,7,0,6,8,2,5,4,5,0,9,9,9,0,1,8,4,3,8,6,6,9,6,5,9,8,1,1,9,7,4,8,2,6,7,0,6,2,0,6,2,7,2,5,2,9,4,8,6,1,9,6,5,6,9,1,5,9,6,8,6,6,9,1,8,7,1,4,5,3,1,3,2,0,6,0,4,3,5,3,8,7,8,6,2,5,9,8,3,6,9,8,1,0,2,1,0,4,9,7,9,2,7,6,1,4,1,2,2,0,5,4,6,2,9,9,3,9,5,3,3,8,9,0,0,3,7,8,5,5,7,8,5,5,7,8,6,5,6,1,8,8,0,7,7,6,2,4,3,3,8,7,7,2,2,4,9,4,3,7,2,1,5,7,2,2,4,5,8,3,4,3,9,4,5,0,4,8,4,2,9,0,2,5,4,1,5,5,4,5,0,6,5,7,6,6,5,1,4,8,8,7,6,6,4,3,6,7,0,4,9,0,4,4,2,0,9,4,5,4,4,2,2,0,3,5,9,4,5,0,0,5,1,5,1,3,8,0,6,8,4,0,1,7,9,5,3,4,7,1,4,0,4,6,0,4,0,6,3,9,7,3,1,6,5,0,0,2,4,1,6,0,7,4,2,0,5,4,0,0,3,8,0,8,4,4,7,7,3,7,7,5,4,5,7,9,5,2,3,4,2,4,9,1,7,7,7,1,0,1,9,0,1,5,3,5,0,4,8,7,1,5,0,1,7,0,3,9,9,2,7,5,8,0,5,0,7,6,5,1,9,0,8,1,7,8,6,8,5,2,9,9,2,7,8,9,4,3,1,3,8,4,9,4,9,4,0,1,2,7,0,4,4,3,6,0,5,3,7,3,8,6,7,4,1,2,3,3,9,5,5,0,3,6,5,6,6,6,2,9,2,0,9,8,2,1,1,4,0,9,3,3,2,7,7,0,6,0,1,0,2,9,3,8,6,9,2,7,8,0,7,4,0,2,8,8,2,8,0,4,0,3,7,8,9,4,6,0,0,7,0,9,7,5,0,1,5,5,7,4,7,4,8,5,5,9,1,0,1,9,9,1,0,6,5,0,3,6,3,6,2,2,3,7,9,9,5,1,9,9,8,2,8,6,7,8,3,1,8,1,2,3,3,6,5,5,9,7,0,0,9,7,8,8,2,5,4,6,8,3,5,3,9,5,1,3,8,1,0,4,0,6,4,8,5,9,8,6,6,5,7,4,9,9,0,4,6,9,6,6,6,2,4,8,4,8,0,6,4,0,1,4,9,8,0,4,1,6,5,8,2,7,7,4,3,6,6]"
                    },
                    {
                        "username": "ms681729",
                        "content": "this solution is working properly for all cases expect 9999999999 this case don\\'t know why help me.\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] arr, int k) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n       int sum=0;\\n        int prod=1;\\n        for(int i=arr.length-1;i>=0;i--){\\n            sum+=arr[i]*prod;\\n            prod=prod*10;\\n        }\\n        sum=sum+k;\\n\\n        while(sum!=0){\\n            list.add(sum%10);\\n            sum=sum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "ruchitakb7",
                        "content": "first it stucked at 3rd test then i changed data type to long int now it again stucked at 90 ..now what should i do?"
                    }
                ]
            },
            {
                "id": 1929540,
                "content": [
                    {
                        "username": "thisannie",
                        "content": "Back to back 3 easy problems?? HOW!?"
                    },
                    {
                        "username": "Umair9912",
                        "content": "not exactly easy tho"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "If you are not using LL then :\\n1. Use while loop till array_size > 0 || k > 0\\n2. Inside while :\\n             2.1.Use If to check weather size > 0\\n                    2.1.1Add last element of array into k\\n                   2.1.2 decrease array_size by 1. \\n              2.2.Add last element of K in your list\\n              2.3 remove last element of k\\n             \\n3. IF REQUIRED reverse your list and return \\n\\nHope This will be helpful ....."
                    },
                    {
                        "username": "aashrith_d4",
                        "content": "Easy to understand\\n"
                    },
                    {
                        "username": "simrannasrin",
                        "content": "Can anyone tell me why the code below is not working for edge cases like 9999999+1?  \\n\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        int j=0;\\n        for(int i=0; i<num.length; i++){\\n            j=j*10+num[i];\\n        }\\n\\n        int number=j+k;\\n        ArrayList<Integer> list= new ArrayList<>();\\n\\n        while(number>0){\\n            int digit=number%10;\\n            list.add(digit);\\n            number=number/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "masemune",
                        "content": "Every digit past 2^53 will start losing precision which can cause things like erroneous rounding. If you need to work with larger numbers then use `BigInt`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Adding elements from the left is must efficient. We can do that using linked list or other data structure. In python, we can use $$deque()$$  from $$collections$$. We don't need to import it in **leetcode**. Also we just need to  return this $$deque$$ and it will be accepted."
                    },
                    {
                        "username": "anand_083",
                        "content": "  this is brute force method it work properly but in 3rd case it can not give 0th index can anyone have guts to debug this solution  /\\n        int n=num.length-1;\\n       int base=1;\\n      for(int i=n;i>0;i--){\\n          base=base*10;// base mil gyi //\\n      }\\n        int sum=0;\\n// this loop give me 1000,100,10,0, as my question demand//\\n        for (int i = 0; i <n ; i++) {\\n            int temp=num[i]*base;  // 1*1000\\n            sum=sum+temp;           // 1000\\n            base=base/10;              // update base as 100\\n        }\\n        sum=sum+k+num[num.length-1];\\n// however it give sum properly include 3 rd case //\\n\\n// for printing //\\n        for (int i = n; i>=0 ; i--) {\\n            num[i]=sum%10;\\n            sum=sum/10;\\n        }\\n        return num;\\n// run this code in your local compiler  //// "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "why does this code not work for num = [9,9,9,9,9,9,9,9,9,9]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        int number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        int tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, tempnum % 10);\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@adityadewhy](/adityadewhy) nevermind, even long aint enough for the other test case ie [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "i am assuming the problem was with int data type(int too small to store that big a value)\\nhere\\'s the fix\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        long number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        long tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, (int)(tempnum % 10));\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "parth_chittora",
                        "content": "`class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       long value = num[0];\\n        List<Integer> list = new ArrayList<>();\\n        for(int i = 1;i<num.length;i++){\\n            value = value*10+num[i];\\n        }\\n        value = value+k;\\n        System.out.print(value);\\n        int dig;\\n        int i= 0;\\n        while(value>0){\\n            dig = (int)value%10;\\n            value = value/10;\\n            list.add(list.size()-i,dig);\\n            i++;\\n        }\\n        return list;\\n    }\\n} `\\nWhy is it not giving the ans for the test case 999999999"
                    },
                    {
                        "username": "takezo_shinmen",
                        "content": "AYOO guyz ,  whhats wrong eith this test case\\nnum =\\n[7,8,2,9,2,5,4,7,1,8,0,6,6,7,4,9,0,3,9,9,2,2,6,6,2,5,8,3,6,3,9,6,3,3,1,6,2,7,5,9,8,9,4,4,7,5,0,7,3,8,7,6,0,9,0,7,4,1,1,4,0,7,7,7,6,1,6,5,1,7,4,9,0,4,2,4,4,4,2,6,6,2,1,3,6,7,2,1,9,5,8,3,6,4,2,1,6,6,7,1,0,2,9,3,5,6,8,5,4,2,7,0,3,6,5,0,2,1,1,4,0,1,3,7,7,1,9,1,6,5,9,7,3,3,1,0,9,4,6,5,3,2,0,8,2,7,7,5,4,2,9,9,3,1,9,5,5,4,0,7,3,6,8,9,6,5,1,1,7,0,7,5,3,2,3,1,4,8,2,5,9,6,0,0,2,4,7,9,6,2,3,2,8,5,6,1,0,7,9,1,6,5,6,2,8,5,0,9,2,5,4,0,3,6,0,7,0,3,0,0,8,5,1,2,5,5,1,6,6,0,9,7,9,2,2,7,0,4,3,1,0,4,8,8,6,6,4,6,4,3,1,3,1,5,4,4,3,6,4,5,2,3,7,6,2,4,0,3,7,5,6,8,9,8,6,9,6,9,0,1,3,1,9,0,8,1,9,8,0,4,1,8,1,1,6,0,9,2,8,3,6,0,0,7,2,4,6,3,9,9,2,6,4,8,1,1,1,0,8,8,2,5,9,3,5,4,0,2,5,9,9,1,7,3,7,4,0,1,9,5,5,0,8,2,4,5,9,0,3,9,3,0,6,6,0,7,0,4,2,1,4,8,0,4,5,4,9,9,3,4,0,9,1,1,0,2,0,6,1,2,8,6,3,3,2,5,2,9,9,4,0,0,9,5,7,8,9,2,0,4,0,4,9,1,9,3,9,8,3,6,4,8,7,4,9,6,3,7,8,2,3,4,5,6,0,7,5,2,6,4,6,5,8,9,2,5,6,5,7,1,0,1,2,3,2,2,2,3,4,5,0,8,7,0,8,4,3,6,8,9,9,4,9,5,6,8,3,7,5,9,3,7,5,3,8,2,2,9,1,2,1,7,6,2,4,3,5,8,5,8,4,9,5,4,6,2,7,3,7,2,1,5,9,1,1,6,8,8,6,6,8,1,4,7,7,7,7,3,1,8,5,5,0,3,5,8,6,5,2,9,6,0,0,3,1,3,8,3,7,6,5,3,6,9,7,0,9,0,4,1,6,5,0,6,5,7,7,3,0,9,0,2,9,5,1,9,9,9,8,9,4,4,4,6,1,3,2,0,8,3,6,5,0,8,5,7,3,9,1,3,7,1,3,1,6,9,5,5,1,6,7,5,6,5,1,6,4,6,3,4,1,3,8,8,3,9,5,2,5,5,6,9,3,2,9,9,5,7,0,7,0,5,8,0,7,0,8,0,4,6,0,0,3,7,2,3,8,1,4,6,5,6,4,0,4,8,7,5,8,5,8,1,7,3,7,8,8,5,3,4,1,9,3,0,2,9,6,3,3,4,1,8,5,1,7,4,4,4,9,7,3,7,0,7,5,5,0,0,1,9,2,6,0,9,6,5,1,4,0,2,0,7,5,4,8,8,7,0,4,1,0,8,9,9,3,3,4,0,9,5,7,5,3,6,2,4,1,0,9,1,5,7,5,4,5,6,2,9,9,4,2,1,5,6,1,1,8,8,2,8,0,9,0,8,1,4,9,3,0,6,5,1,3,6,2,1,9,1,2,8,7,0,2,4,7,8,3,1,6,4,1,4,9,9,5,4,0,3,8,5,2,3,7,1,8,4,2,2,5,2,9,6,2,1,3,3,3,9,1,1,3,9,1,0,0,6,7,1,3,3,2,6,9,5,2,8,8,7,2,5,2,7,1,4,2,0,1,9,8,5,6,3,2,2,3,3,1,8,9,8,5,6,4,7,8,6,5,8,8,6,0,5,5,0,8,3,6,3,0,1,3,0,8,2,1,6,9,8,0,5,0,9,4,0,5,8,8,9,8,8,5,0,1,1,1,6,2,2,8,8,0,6,7,8,8,3,5,8,4,9,7,2,1,9,4,1,0,1,3,1,6,1,3,7,8,7,3,5,9,1,5,9,8,3,1,7,3,0,2,0,6,8,5,5,5,3,4,3,0,4,0,2,2,0,5,5,9,2,0,9,7,3,3,3,9,5,0,4,1,3,3,2,2,5,1,9,3,5,6,1,6,3,0,3,1,6,3,8,1,9,9,9,9,9,0,5,0,8,9,2,1,5,9,6,6,8,3,0,3,1,2,9,1,8,2,8,8,1,5,1,9,7,0,3,4,3,7,1,0,2,2,5,0,8,1,6,1,4,4,7,0,2,4,4,9,5,1,7,1,8,2,5,0,1,3,3,5,5,2,2,3,5,8,6,6,0,0,3,9,0,1,8,0,6,2,2,9,1,8,2,6,6,4,9,5,1,6,5,9,5,7,3,8,5,2,3,5,6,3,5,7,2,1,0,4,3,2,2,5,9,3,2,2,1,1,5,1,7,4,6,5,8,9,8,6,2,6,4,2,5,2,4,8,0,1,7,8,3,8,5,3,3,2,9,4,2,8,7,2,8,6,7,8,8,7,9,7,3,0,7,7,6,0,9,1,8,7,2,4,9,0,4,4,3,9,2,6,3,4,2,9,6,2,6,7,6,9,9,7,2,4,9,1,3,5,7,7,8,4,9,1,1,0,8,3,5,6,9,0,5,5,4,0,8,3,6,4,9,1,4,4,9,8,2,2,4,4,0,9,1,1,9,3,5,0,6,8,2,5,7,5,0,7,2,7,7,5,1,7,9,5,8,7,9,7,1,9,1,7,5,0,1,8,1,0,5,1,0,5,9,7,8,9,9,5,6,0,1,9,3,1,1,3,2,3,1,2,8,9,9,0,2,9,5,4,7,3,9,5,1,9,4,6,3,2,0,0,0,8,2,6,1,2,4,9,5,7,9,9,6,7,4,0,7,1,5,4,4,6,2,0,4,0,1,8,7,7,5,8,9,6,6,5,0,6,2,5,5,7,7,7,2,9,6,9,4,8,4,0,4,6,1,5,1,6,7,7,0,6,1,2,8,8,6,4,1,0,5,7,6,4,2,0,2,0,5,1,6,9,4,2,2,0,1,6,5,9,8,6,3,7,3,8,5,0,6,5,7,3,0,6,8,2,1,2,9,9,4,3,0,3,1,2,9,6,8,4,6,9,0,3,6,3,2,5,9,9,4,3,6,2,2,5,8,1,6,9,7,1,9,1,7,1,4,8,2,7,4,9,9,8,8,0,4,3,3,9,8,8,9,7,2,3,4,9,2,0,5,4,4,3,4,8,5,7,4,1,1,9,9,7,5,9,2,7,7,2,3,2,2,0,1,6,9,0,7,8,7,3,9,6,1,9,0,4,5,3,4,2,3,2,1,8,2,0,2,5,4,7,4,2,0,7,1,7,7,8,5,6,2,2,0,2,5,7,2,0,6,6,9,0,1,2,4,0,5,5,2,1,6,8,7,9,7,6,7,1,8,0,3,0,6,1,4,6,9,1,4,5,8,4,8,0,5,7,8,2,8,6,7,4,9,9,8,7,7,1,3,8,7,2,1,7,5,3,7,2,2,2,1,6,1,2,1,3,0,2,4,3,8,8,3,7,5,9,9,7,3,3,8,9,2,3,2,5,5,5,2,6,1,9,2,4,8,0,7,9,5,2,7,3,2,9,2,1,9,9,5,0,9,6,4,5,8,8,9,0,8,8,4,2,6,2,2,2,4,9,7,5,3,3,9,1,0,7,0,0,3,9,4,8,4,8,6,6,4,0,3,4,9,0,4,0,3,9,1,4,5,8,0,2,4,3,8,8,6,6,2,8,4,3,8,3,9,2,4,3,7,4,7,7,9,3,6,3,8,1,2,5,0,9,3,5,0,3,0,5,5,0,3,3,8,8,4,2,3,4,3,9,3,5,2,3,2,8,7,2,2,7,5,9,5,8,9,4,7,6,6,1,5,9,2,8,7,5,6,3,0,7,9,0,0,7,8,7,0,5,2,4,5,9,6,0,0,8,9,3,4,0,7,7,7,3,5,1,3,9,6,1,0,7,3,2,9,3,4,0,8,5,3,2,2,5,7,4,3,6,1,3,0,3,1,4,4,7,4,2,1,1,3,8,4,9,1,0,7,1,1,5,6,8,9,2,0,8,7,7,3,6,6,5,0,8,8,9,0,6,5,9,9,3,2,8,6,1,9,8,2,2,4,4,9,6,1,9,5,5,4,7,4,6,9,7,5,4,5,5,2,7,7,3,6,9,9,0,9,1,3,9,5,4,7,2,8,0,9,9,6,5,9,2,4,9,8,9,9,0,8,5,4,3,0,7,9,1,1,8,6,4,5,7,9,4,3,7,5,3,1,1,6,0,0,3,8,1,2,9,3,3,3,9,3,5,8,5,9,6,3,9,8,5,3,4,9,2,0,8,6,3,5,2,5,4,4,3,7,9,9,9,5,9,1,2,4,5,4,0,0,4,1,2,3,1,7,9,3,1,4,8,7,1,1,1,5,0,8,1,8,8,4,9,2,6,6,7,5,4,4,7,1,3,1,5,4,1,4,7,3,6,0,8,7,6,6,1,7,9,1,6,5,4,8,2,8,1,8,4,0,6,8,4,5,3,1,4,2,2,2,9,4,0,1,0,5,7,2,5,3,4,3,9,0,8,0,8,6,4,5,5,9,8,3,4,5,6,6,8,0,7,8,0,7,3,6,7,8,4,6,3,6,0,3,0,7,5,6,3,4,5,2,1,5,7,6,3,4,8,9,7,9,8,9,3,7,1,3,1,1,2,7,1,4,1,0,2,9,6,5,5,4,0,3,1,1,1,2,2,8,1,3,1,1,6,9,7,5,2,5,4,8,7,7,4,9,3,9,0,1,8,9,5,6,7,9,6,2,1,0,9,3,5,9,4,4,4,2,6,8,0,3,4,5,7,2,0,1,4,2,0,6,1,9,8,7,6,1,1,2,8,3,8,6,1,9,1,2,2,5,4,3,2,5,2,8,2,2,7,5,7,6,7,6,9,9,7,3,9,8,6,2,6,9,5,9,3,3,7,0,9,8,5,1,2,7,6,5,7,5,6,9,5,6,7,6,7,3,4,5,0,9,4,9,2,6,8,8,1,7,2,1,8,8,7,1,5,7,6,5,6,3,6,7,6,3,4,6,3,1,3,9,4,7,6,1,0,9,2,0,9,0,6,2,5,0,4,8,8,3,2,8,5,6,9,0,0,2,7,8,7,7,0,2,3,9,6,0,8,0,6,6,1,6,9,7,9,1,6,4,0,5,9,2,8,1,5,4,3,2,1,9,9,1,8,3,5,6,9,8,0,4,7,8,8,7,9,8,7,4,0,5,9,8,1,8,1,8,0,5,2,3,9,9,6,2,1,5,7,5,4,7,1,7,3,3,6,8,8,3,7,7,9,2,1,7,0,9,1,7,2,8,5,5,4,3,2,4,8,8,2,3,0,4,9,3,3,6,6,0,7,0,0,8,9,8,6,6,4,5,9,4,9,8,2,5,1,8,4,2,7,0,7,0,0,4,2,1,6,7,0,6,0,5,6,4,0,1,7,5,9,2,9,4,9,6,3,9,5,8,0,0,2,8,0,9,6,7,8,8,4,5,6,8,0,5,8,4,3,8,8,3,4,9,3,3,6,5,4,9,9,3,0,4,3,0,6,7,4,7,5,8,7,5,1,0,8,0,1,4,8,8,3,3,3,1,8,4,4,3,8,5,7,9,3,9,5,5,0,4,5,0,7,8,2,2,9,1,6,1,6,5,7,5,8,7,5,7,6,6,0,8,2,1,0,3,0,2,2,7,4,9,8,2,6,7,1,0,8,1,8,0,5,1,0,0,1,3,1,8,9,2,8,9,1,2,7,0,2,3,6,1,1,5,0,2,1,6,2,5,9,3,1,9,7,2,8,7,3,5,7,4,3,3,1,1,9,3,4,8,8,4,6,2,6,4,3,8,7,7,1,3,4,4,6,9,4,1,3,2,0,7,2,4,1,2,9,9,1,4,1,3,5,1,9,4,1,5,4,6,0,3,0,8,1,7,6,9,4,9,1,8,2,4,9,5,9,6,9,3,3,2,5,0,1,8,4,8,1,6,0,4,9,1,3,9,4,5,0,6,7,1,7,4,6,5,0,8,1,0,0,1,2,3,5,2,9,8,9,6,4,6,4,5,5,1,2,2,3,3,7,1,3,9,6,8,8,3,6,3,4,4,0,0,6,7,4,2,8,7,8,7,8,6,8,1,4,3,6,5,0,1,5,3,4,0,9,0,1,6,8,3,9,3,9,1,1,4,4,4,1,5,7,3,8,5,7,1,8,9,0,9,3,1,0,3,8,3,1,9,2,6,2,5,4,4,9,0,2,5,1,5,1,8,9,2,7,7,9,7,2,2,6,7,7,9,0,7,2,8,3,6,2,0,0,6,7,3,4,7,3,0,8,8,5,8,2,7,6,2,5,1,8,2,6,6,3,7,2,3,6,7,5,8,1,9,4,5,6,4,6,7,7,7,7,3,9,9,4,8,3,5,5,7,1,7,4,5,6,0,3,5,5,3,4,1,4,5,6,4,8,9,6,8,0,1,9,5,6,6,8,6,9,4,6,2,5,9,9,6,4,4,5,5,8,0,9,2,3,5,5,6,8,9,4,2,7,9,2,8,8,2,1,1,4,3,7,5,4,5,3,6,3,5,5,3,9,8,5,0,0,1,1,0,7,9,2,5,8,1,0,6,0,6,5,6,5,9,7,1,0,1,9,9,3,1,1,7,0,4,3,1,8,7,3,8,2,3,8,7,8,2,3,6,6,4,5,0,7,4,8,3,4,0,7,1,8,6,0,5,0,8,5,1,3,3,2,7,4,9,1,6,5,9,5,1,1,1,6,2,1,5,3,6,2,4,4,6,1,1,1,8,7,1,9,9,4,7,2,3,4,5,9,7,6,9,5,3,4,6,8,2,0,8,4,9,8,6,8,4,6,7,4,7,7,8,2,6,7,1,2,1,0,6,0,5,1,9,8,2,2,9,4,6,0,7,0,0,5,8,5,3,2,9,4,1,6,7,2,0,7,3,6,8,1,9,8,0,8,8,7,0,6,1,9,8,7,4,5,0,8,6,9,8,6,2,7,9,3,5,1,9,2,5,8,8,5,1,2,2,2,1,6,9,7,8,4,8,9,0,2,3,8,7,9,6,9,7,2,6,2,4,6,6,7,8,9,4,2,9,7,3,7,1,3,5,5,9,8,4,1,7,0,6,9,6,3,4,7,0,7,4,4,5,8,9,1,1,3,9,1,3,3,8,3,0,0,5,7,2,3,3,4,7,1,7,5,5,7,0,3,8,5,1,7,0,5,9,0,2,0,8,7,5,3,6,4,6,9,3,0,1,6,8,9,9,9,1,2,0,0,9,5,2,9,4,5,8,4,0,5,7,6,5,5,4,0,2,2,3,7,7,8,6,8,0,6,7,8,4,6,0,5,1,4,1,8,9,6,9,9,5,8,4,8,4,0,1,0,8,6,9,4,0,8,6,9,3,6,0,8,1,4,6,8,0,4,6,0,2,1,2,5,4,5,1,6,1,4,7,4,3,1,5,4,4,5,5,1,1,3,3,5,7,4,2,7,0,1,3,5,9,6,8,2,2,2,0,0,8,1,3,8,9,3,2,1,1,1,3,9,6,1,1,1,7,7,7,1,4,4,5,0,1,3,7,4,7,0,9,7,7,1,2,9,1,7,9,8,3,3,6,5,2,3,1,9,2,9,3,8,7,5,7,1,4,7,6,9,2,5,8,4,6,9,8,1,2,0,4,2,1,9,8,4,9,7,6,3,0,4,8,8,3,2,2,9,5,5,7,2,3,2,7,6,8,2,3,4,4,6,4,6,1,5,2,7,8,4,9,1,4,2,9,2,9,1,6,9,4,1,2,6,1,4,8,4,9,9,3,4,5,5,5,4,0,2,7,9,5,7,7,1,0,9,9,2,9,4,9,1,3,1,2,4,6,3,2,4,6,7,9,1,5,2,3,2,6,4,4,5,8,5,9,9,0,5,8,5,9,1,0,9,7,9,7,6,8,6,6,9,9,6,6,3,0,8,4,9,9,3,3,2,0,7,9,7,8,2,9,2,7,9,9,0,2,8,4,0,4,9,0,3,9,4,6,5,6,6,9,1,3,5,5,6,4,4,6,1,2,2,4,4,2,2,0,4,1,6,3,4,7,0,7,0,3,3,6,5,7,7,8,3,9,9,9,5,2,3,7,6,7,9,4,0,8,8,3,5,3,7,6,5,8,1,9,5,9,2,7,4,9,5,2,4,1,8,7,6,6,2,8,6,5,3,4,6,2,2,5,2,5,3,9,3,7,2,4,2,5,7,3,3,2,4,3,1,7,9,3,5,6,3,0,0,0,8,5,9,9,6,3,0,0,6,1,2,1,4,0,2,0,1,5,8,0,4,5,4,0,8,8,1,5,4,6,5,9,7,6,8,4,2,2,5,9,0,5,0,0,3,5,3,1,8,7,6,2,0,4,3,1,3,7,6,4,9,8,5,0,9,6,6,5,7,3,2,2,0,0,1,7,6,6,9,2,0,4,2,8,0,6,5,5,3,0,0,7,4,6,7,9,8,3,9,6,1,6,3,9,6,3,4,5,8,4,9,0,1,8,4,0,8,8,8,4,2,6,8,1,3,7,3,0,9,6,5,3,8,3,8,8,1,9,5,5,3,7,7,2,5,8,7,7,0,5,5,7,9,2,9,2,5,9,7,1,6,9,9,2,9,6,2,4,8,8,6,3,6,0,7,6,6,0,4,3,2,3,7,3,9,6,5,7,0,8,5,3,5,8,3,5,9,7,4,5,0,8,7,1,8,2,3,5,0,6,8,4,8,5,7,1,0,3,2,6,6,8,3,7,9,8,0,6,2,9,0,0,4,5,8,5,5,9,4,8,0,7,1,3,7,5,2,4,4,4,6,0,3,0,3,6,2,9,9,8,5,5,1,2,0,9,2,2,9,7,3,4,9,4,5,7,2,2,9,9,9,0,5,4,5,6,0,4,7,5,7,0,3,2,8,0,0,1,9,0,6,9,2,6,8,8,5,9,8,1,5,1,4,2,5,3,6,0,5,6,5,1,1,7,1,2,4,3,1,0,4,6,4,5,9,0,0,1,2,5,4,1,5,9,4,8,2,8,7,5,8,9,3,5,2,2,6,7,0,6,6,9,6,6,1,3,9,7,9,1,1,4,4,3,5,1,8,5,9,0,6,1,8,2,6,9,2,3,5,5,7,2,5,4,0,0,5,9,7,5,1,5,7,3,5,8,4,1,0,7,8,4,7,2,1,9,6,5,3,2,2,4,1,4,4,7,5,1,9,3,2,7,2,9,4,3,0,5,5,8,3,4,2,8,2,0,9,0,2,1,6,3,8,8,4,2,6,1,0,0,6,0,2,4,2,2,1,4,2,0,1,5,6,1,8,5,5,8,7,4,3,7,7,7,6,7,6,0,8,8,7,9,0,1,9,6,1,2,8,0,7,5,3,5,8,1,0,3,2,7,7,3,2,3,8,7,7,5,7,6,4,3,2,5,5,0,2,9,6,7,3,0,3,2,0,8,0,0,5,1,8,2,4,1,8,1,7,6,3,2,1,5,3,8,5,2,4,9,9,7,1,9,1,5,9,7,8,0,4,4,8,8,8,6,8,4,4,0,3,8,3,8,2,4,5,5,2,0,3,5,9,6,5,2,6,3,5,0,6,0,5,2,2,0,9,6,2,8,7,9,3,6,1,6,2,2,8,5,2,6,3,7,9,5,9,3,1,4,9,2,9,5,4,8,9,9,9,3,2,7,2,7,6,4,3,5,2,4,1,4,3,1,9,8,8,8,7,6,7,6,6,0,2,5,7,7,9,4,5,0,0,5,8,9,7,6,0,1,3,5,7,0,6,7,8,9,4,6,1,3,3,6,6,1,0,6,4,4,4,6,3,2,6,2,9,3,0,3,4,7,3,6,0,9,8,3,4,6,9,7,0,0,7,7,1,1,5,8,3,8,4,9,0,5,6,6,4,0,9,0,9,3,9,7,4,2,1,5,7,6,5,9,9,9,2,7,0,5,8,2,8,2,0,9,9,7,1,3,5,1,8,7,7,8,5,4,3,2,3,5,4,8,2,2,6,8,7,8,0,9,7,1,4,0,9,4,9,0,0,4,6,2,9,0,7,0,1,4,7,5,6,5,3,8,2,3,9,9,8,7,4,0,8,1,9,5,7,5,6,0,0,9,3,7,4,6,9,9,3,3,7,6,1,9,8,1,3,3,5,4,2,0,2,4,3,9,8,4,5,2,4,5,0,6,3,5,1,9,9,5,6,1,4,1,6,8,1,7,0,0,5,2,2,2,2,7,4,2,6,0,1,5,7,1,8,9,7,6,3,7,7,0,3,4,6,2,7,3,1,1,3,3,9,6,5,6,5,8,6,6,2,1,1,3,7,5,3,6,7,2,1,7,2,5,1,0,8,4,2,6,4,1,4,3,2,8,7,0,7,9,9,6,5,0,4,0,3,9,6,7,8,4,9,5,4,9,0,4,8,4,7,6,8,4,5,9,1,1,2,6,8,8,2,8,8,5,7,9,4,4,8,9,0,2,7,2,1,9,5,2,6,4,8,9,4,7,3,1,3,9,7,2,1,6,8,1,8,8,7,7,7,3,7,2,5,0,8,1,6,4,6,6,1,0,7,8,2,8,3,3,2,3,7,7,5,8,2,1,1,2,0,3,9,6,8,8,9,5,8,6,9,8,9,5,3,6,8,6,4,4,2,6,6,2,6,8,7,4,0,1,8,2,9,3,1,2,1,4,6,6,1,8,5,4,7,1,7,2,5,9,9,0,4,9,4,5,9,9,3,0,4,5,1,4,6,2,3,5,6,8,8,3,2,1,4,6,9,2,0,4,5,8,4,0,6,1,9,7,3,0,0,7,6,5,2,6,5,4,3,7,1,9,9,7,0,7,9,9,3,0,3,2,3,3,9,6,0,2,2,5,4,4,2,0,5,8,8,8,8,9,1,6,6,5,0,1,0,7,8,3,3,9,1,8,7,4,8,7,4,1,8,7,5,0,5,4,3,4,5,0,8,1,7,0,4,7,1,6,6,0,5,4,1,4,9,0,6,3,4,3,8,9,3,4,7,0,9,2,1,8,2,9,9,2,0,0,4,9,7,1,1,0,7,0,6,0,3,4,6,7,4,3,6,6,4,1,0,1,1,8,6,9,9,0,6,4,8,4,7,2,4,3,9,8,2,9,4,2,7,2,9,5,0,3,4,1,8,5,5,6,6,2,0,4,6,1,4,9,8,5,2,5,1,2,1,3,0,9,2,3,3,4,2,6,1,7,8,7,1,2,3,9,9,9,7,2,1,1,1,5,9,6,1,4,2,5,2,4,9,0,4,3,1,5,1,8,2,1,0,8,0,2,8,8,8,6,5,4,4,0,3,6,0,7,0,9,6,4,0,1,5,4,2,0,5,7,4,0,5,7,1,6,2,0,1,0,8,3,5,7,4,0,9,5,5,7,5,8,9,6,5,9,8,8,3,7,8,8,8,9,1,7,6,3,8,1,5,0,0,3,6,3,7,8,9,5,3,2,0,4,6,9,8,5,8,2,3,1,9,7,3,2,6,2,3,7,6,5,7,8,9,1,2,6,6,5,2,2,9,1,2,0,5,9,7,7,8,9,3,9,0,4,7,7,1,8,4,1,7,6,8,0,4,2,3,8,0,9,4,0,3,1,7,3,9,9,8,2,1,0,7,9,0,3,0,1,5,0,7,4,6,2,9,8,2,9,9,6,9,1,2,2,3,7,5,2,0,2,7,7,8,5,6,8,4,8,2,2,5,4,9,3,8,1,7,3,0,1,0,2,3,8,3,6,8,6,4,6,5,6,1,3,4,7,7,1,7,8,7,0,8,4,8,4,5,6,0,9,3,3,1,7,2,6,8,0,9,8,4,2,9,8,4,7,3,6,0,8,4,9,7,4,4,6,0,9,9,3,7,1,9,2,0,2,3,9,1,3,7,7,6,4,4,3,2,3,6,6,0,8,4,5,4,5,8,1,9,0,8,1,1,5,7,4,1,7,8,5,1,6,4,1,1,6,2,7,5,3,6,3,6,0,4,4,6,8,7,9,8,2,1,7,3,4,7,9,7,8,5,6,6,8,8,8,2,6,6,3,8,4,1,4,4,3,2,6,6,0,2,5,4,6,7,7,8,4,3,9,0,4,0,6,1,8,0,6,7,7,4,0,7,8,5,7,8,1,5,4,2,7,1,5,9,2,3,7,4,8,5,6,7,7,3,1,1,5,5,7,3,3,8,6,1,2,3,5,3,2,5,6,6,3,6,7,2,7,5,1,4,1,3,8,7,6,6,2,2,1,2,2,3,3,0,0,1,6,8,6,6,0,6,5,2,4,6,7,3,0,3,5,2,0,8,7,7,0,6,0,2,4,3,3,6,5,6,2,8,8,2,6,7,9,0,7,0,9,3,4,3,2,9,0,1,8,5,3,0,6,8,4,5,6,0,0,0,5,4,6,3,9,0,6,0,2,1,1,3,1,5,7,4,0,5,2,2,4,5,4,6,4,7,5,9,2,4,4,2,5,7,4,7,0,7,1,8,8,8,9,9,6,8,4,7,9,4,8,8,9,9,2,8,8,9,2,2,4,8,1,2,3,9,8,2,9,4,8,7,5,6,1,4,6,2,2,2,5,3,0,5,8,4,7,2,2,7,6,0,6,7,9,5,7,2,2,2,9,7,1,6,2,9,5,4,6,1,4,7,2,9,0,6,6,4,5,6,8,3,2,0,0,0,8,7,5,6,3,8,5,8,9,8,6,4,5,0,7,7,3,7,1,4,2,0,4,9,7,8,5,0,9,6,5,3,0,4,5,3,0,0,1,1,2,3,9,9,0,6,5,9,9,7,2,0,4,1,2,2,4,4,8,2,1,9,5,6,1,5,0,9,1,9,8,3,7,3,5,9,4,1,3,1,3,2,4,9,3,4,5,9,7,2,2,5,1,4,3,0,1,6,4,1,7,3,2,0,1,1,4,8,7,8,2,3,1,1,7,6,6,2,6,4,9,3,7,5,1,3,4,0,0,7,3,0,8,1,0,9,1,9,6,5,7,9,1,6,5,7,8,3,7,2,2,0,2,4,0,8,5,1,2,8,4,1,2,1,2,1,0,4,3,6,1,4,9,0,5,5,4,9,2,3,5,5,9,3,8,8,6,2,6,8,1,9,4,7,8,9,3,7,8,2,0,3,6,8,6,2,2,6,0,5,1,0,6,4,2,8,8,3,5,8,8,2,6,9,0,0,0,1,8,8,6,3,5,9,5,2,6,7,1,6,6,5,8,7,0,9,5,6,3,7,2,7,1,7,2,3,4,1,2,2,9,0,0,7,0,4,7,4,4,1,1,6,8,6,1,9,0,6,7,7,5,3,4,3,1,0,8,1,6,2,4,1,9,7,5,1,7,2,6,0,9,3,3,0,6,1,5,1,3,9,3,7,1,7,8,1,8,4,2,9,0,7,2,6,1,2,4,0,9,3,7,1,0,6,5,1,7,5,6,3,7,1,1,7,7,9,1,7,3,1,3,6,3,9,3,3,0,2,7,5,1,3,0,4,0,0,2,6,3,9,2,0,1,3,4,6,4,8,8,8,0,2,2,8,4,7,6,9,6,8,3,9,0,3,8,9,4,6,7,8,3,0,5,6,6,4,6,6,1,9,8,0,4,9,9,2,7,6,6,8,3,9,1,0,9,8,0,3,7,6,4,8,9,3,1,2,2,4,8,4,8,5,7,9,7,4,9,1,5,8,5,9,1,0,5,8,8,2,0,8,8,1,4,2,2,0,5,7,6,0,3,3,8,1,8,3,9,9,9,6,3,6,2,2,7,8,3,3,2,7,1,2,1,4,0,2,6,6,9,4,9,5,2,5,1,3,5,3,7,7,7,0,2,4,7,6,1,1,0,4,4,2,3,8,8,7,8,4,2,3,0,2,9,5,4,2,4,4,5,2,0,2,1,4,9,4,0,0,3,0,4,8,8,5,4,7,1,4,2,8,1,5,3,6,1,5,9,9,0,5,1,1,4,2,9,3,0,2,4,3,0,8,4,1,6,3,7,5,6,6,6,4,3,9,2,6,0,6,1,4,1,0,6,4,5,0,2,1,6,2,3,8,3,5,5,4,3,1,8,7,9,8,3,9,3,2,2,6,6,9,4,8,6,7,6,7,5,5,1,4,6,5,7,7,2,4,9,6,2,4,8,8,4,6,4,1,5,6,6,4,2,3,6,7,8,5,7,9,8,0,9,8,9,0,1,9,6,1,7,6,2,4,9,2,8,9,0,2,5,3,8,5,0,5,7,1,5,4,5,1,9,7,3,7,2,5,5,1,5,7,7,4,0,1,4,6,0,0,8,2,8,6,7,4,9,7,4,7,5,6,0,9,9,9,4,3,4,5,9,4,6,4,3,3,8,0,3,2,6,3,7,0,5,0,0,9,5,2,2,7,3,0,2,4,7,5,0,0,5,1,9,5,5,6,4,8,8,8,5,4,2,5,1,0,2,3,0,6,0,7,4,2,8,2,4,5,3,8,9,5,5,6,0,9,3,0,9,0,9,5,4,3,6,7,4,4,0,2,2,9,4,6,6,9,8,1,1,7,4,5,4,9,7,7,0,1,6,5,2,3,6,1,5,5,3,9,1,7,6,4,2,0,4,0,9,3,5,1,9,7,2,9,5,9,4,9,8,7,9,2,7,0,5,4,4,7,4,5,2,2,8,8,7,0,3,7,8,5,1,5,6,8,4,5,3,8,6,1,0,2,5,7,4,4,4,0,7,7,2,3,6,4,9,9,0,5,2,3,3,0,2,9,8,8,2,9,4,7,6,1,3,9,3,0,7,1,9,0,6,5,4,7,4,8,3,0,9,6,2,8,9,4,6,6,0,9,9,7,1,9,4,9,5,5,9,3,9,6,4,5,1,0,1,7,5,5,6,3,6,9,4,6,6,1,8,2,0,6,2,0,9,5,0,0,4,5,4,2,0,4,5,1,2,3,5,6,6,2,5,5,8,9,6,8,8,4,6,1,6,7,9,0,1,4,6,3,6,8,7,4,6,2,5,3,0,0,5,4,1,3,2,5,1,5,2,4,5,3,2,5,3,5,2,9,4,6,5,4,0,6,4,3,6,0,8,3,9,4,6,9,4,7,4,8,7,6,6,9,4,2,1,1,3,0,5,0,0,2,3,7,1,7,7,1,6,4,6,0,1,4,4,6,5,8,8,6,7,3,8,2,6,2,6,6,7,7,5,8,9,1,6,7,3,0,8,6,0,6,4,2,0,8,5,2,7,8,2,5,6,8,0,4,7,0,3,7,5,8,6,8,6,5,6,2,4,2,4,2,4,3,6,8,3,2,0,3,8,3,9,2,8,3,7,4,5,9,1,0,7,4,2,3,7,9,9,9,1,2,5,1,7,9,1,3,9,7,5,2,4,8,4,2,9,5,5,7,1,1,4,1,0,4,6,4,2,3,3,2,7,0,4,6,6,0,5,6,0,7,3,3,2,1,8,7,2,8,3,8,4,7,6,1,2,0,4,5,2,4,8,3,9,0,1,8,1,4,9,6,6,8,8,1,4,0,0,5,2,3,7,2,1,0,3,7,1,5,9,8,6,4,4,9,7,7,8,3,2,5,9,7,1,7,7,4,3,3,6,0,6,5,9,4,4,6,9,6,3,7,8,0,1,8,6,2,2,9,2,8,1,7,0,9,6,3,0,6,7,2,7,0,6,9,6,4,7,8,2,2,6,3,1,7,6,4,7,6,1,4,9,4,0,1,7,3,6,8,4,9,3,4,7,3,7,3,3,8,9,9,1,1,3,7,7,3,3,9,6,4,0,5,2,6,0,0,1,1,9,0,9,0,9,8,5,4,9,7,9,5,4,6,2,5,7,0,1,7,1,0,8,5,0,5,9,7,4,1,6,1,9,3,5,3,8,8,9,4,8,5,2,5,3,4,8,3,9,7,3,7,4,6,0,6,6,4,8,5,4,9,6,1,3,1,9,7,5,4,9,0,2,4,3,1,1,3,6,6,9,5,2,6,4,2,1,9,0,6,9,5,1,9,3,2,8,4,6,6,4,1,8,6,6,9,2,7,3,3,7,0,4,1,8,2,7,7,9,9,7,1,4,8,2,2,6,9,6,2,5,8,7,0,7,4,1,3,7,4,8,5,5,2,8,0,8,8,8,3,4,4,5,3,0,2,7,3,4,2,9,8,9,3,1,3,9,2,6,0,9,0,5,3,6,6,2,2,9,4,4,4,9,2,1,7,4,2,1,0,1,8,1,7,7,2,3,7,9,8,0,4,1,8,9,9,8,1,0,5,7,4,6,6,5,2,4,9,1,1,9,9,6,4,8,7,4,8,4,0,5,4,3,0,3,9,6,7,6,6,2,7,3,1,5,7,2,5,6,7,9,3,2,1,3,5,6,1,2,0,1,9,2,5,1,1,2,5,6,4,4,7,2,2,6,8,6,8,2,1,3,0,8,5,4,0,9,8,6,9,9,7,3,2,6,4,9,4,4,9,0,0,8,8,6,0,8,7,6,7,0,1,8,5,8,7,7,6,5,0,7,1,0,3,7,3,2,6,4,7,7,1,7,3,3,1,3,3,0,2,5,5,2,7,3,8,7,8,8,9,4,6,3,2,6,9,9,1,8,0,9,5,3,8,0,9,4,0,0,5,4,2,2,0,5,1,8,4,8,6,4,6,2,3,5,8,3,8,5,7,2,6,2,4,3,2,1,7,9,1,3,2,5,8,2,3,3,4,7,1,6,1,0,9,8,8,3,4,9,6,0,8,5,2,3,3,3,2,8,1,8,2,5,4,7,7,3,8,6,6,3,4,5,3,0,9,2,3,3,0,3,5,0,4,9,9,9,5,3,2,3,1,2,1,3,0,6,1,5,0,9,9,5,7,0,9,4,7,2,6,9,3,4,8,4,5,4,3,9,1,3,1,9,9,3,9,5,5,5,3,1,8,7,9,2,4,3,1,8,7,5,3,7,5,5,7,3,8,3,8,0,5,6,4,4,9,1,3,6,7,9,3,3,8,9,9,2,5,9,7,1,2,5,6,4,7,6,8,1,8,7,0,8,3,7,3,4,2,7,3,8,8,6,5,4,8,5,3,5,1,9,9,6,1,4,8,0,6,2,3,6,7,5,2,0,1,8,0,6,0,5,6,6,3,9,9,5,9,6,9,8,7,7,1,7,2,1,8,9,1,7,5,5,6,0,5,7,8,3,3,2,1,9,5,5,6,6,1,7,9,1,6,2,9,6,1,6,2,1,4,4,2,8,9,1,0,7,1,5,6,9,9,6,6,5,9,7,5,2,0,2,1,1,4,4,5,5,5,4,1,8,9,1,7,8,8,6,2,2,8,8,6,5,7,8,2,6,0,4,4,4,9,0,3,7,6,2,3,1,1,7,5,7,9,7,5,0,8,2,0,2,3,5,2,6,9,0,7,8,5,6,6,4,2,7,4,8,2,1,2,1,5,2,1,5,7,5,7,0,7,0,2,4,2,1,9,1,7,2,5,5,1,8,5,8,6,1,0,3,1,7,9,3,8,1,9,3,6,8,3,6,7,2,2,2,2,6,8,3,3,1,2,2,3,0,4,6,1,1,8,7,6,8,3,9,9,6,3,6,3,6,6,0,8,2,0,5,8,8,6,0,0,9,9,6,3,8,7,1,6,7,2,1,3,5,7,2,4,3,5,1,0,9,3,6,1,9,8,7,6,5,8,9,4,0,2,7,4,3,7,0,9,3,2,5,1,4,1,3,1,4,6,7,9,4,7,0,9,5,9,4,6,6,8,1,4,2,4,7,0,9,8,2,3,8,7,9,4,1,8,2,5,9,5,8,5,8,0,6,3,2,4,5,6,6,9,2,6,2,9,8,1,8,2,6,9,5,3,1,9,4,9,2,1,0,5,0,5,9,1,9,7,5,9,7,9,1,4,4,0,1,9,6,3,0,5,5,1,9,3,6,6,8,1,9,9,3,1,3,6,6,2,5,7,5,7,0,9,9,5,0,1,4,8,7,3,8,8,6,2,0,3,7,4,9,7,1,8,0,5,4,0,0,4,0,3,1,5,4,7,0,1,0,5,2,4,7,8,0,2,1,5,4,9,5,9,6,1,4,9,1,6,5,2,4,8,5,5,9,5,0,1,2,2,1,9,9,7,6,5,8,6,4,2,2,7,7,7,3,2,9,2,2,9,2,6,4,2,9,2,2,8,0,7,6,6,5,5,6,3,7,4,8,7,9,2,6,1,7,7,8,6,6,2,1,9,1,0,0,9,7,4,1,5,7,3,4,0,3,0,5,1,4,0,5,2,6,2,1,3,8,8,7,2,6,2,6,8,9,5,0,3,7,8,6,4,8,5,1,2,1,1,2,4,7,5,0,2,8,2,8,9,0,8,1,6,9,0,7,5,8,2,9,2,5,2,3,6,0,3,8,4,4,3,6,9,1,3,8,6,1,0,9,2,7,1,7,5,9,9,4,5,0,0,0,9,2,7,8,6,4,1,8,8,9,9,0,5,6,3,8,3,1,6,8,3,3,9,3,9,2,5,9,7,1,1,2,3,4,8,6,7,2,5,5,4,7,2,8,6,1,1,1,9,0,2,9,2,1,7,2,6,3,0,2,7,7,7,8,6,7,7,3,3,2,3,6,0,7,3,4,8,3,6,7,0,9,0,8,4,5,8,9,9,1,1,0,2,7,3,8,8,2,4,4,6,8,9,1,6,7,8,7,6,0,7,3,2,8,8,9,8,7,7,1,6,3,0,4,5,3,3,6,6,0,1,6,4,0,8,3,4,8,2,4,8,2,4,4,3,4,9,2,6,6,2,2,5,4,0,0,3,7,8,8,2,1,6,2,9,6,2,0,3,2,6,1,1,4,6,6,0,6,7,9,4,4,4,4,4,5,1,8,6,2,6,2,3,7,5,9,9,0,3,2,5,7,8,3,3,9,3,8,7,5,0,6,2,3,7,4,7,5,9,3,6,9,4,4,8,4,4,1,4,2,2,7,2,0,3,8,3,4,0,7,8,4,0,2,1,5,1,8,9,4,6,7,2,4,8,3,5,5,9,3,2,4,6,1,8,6,2,5,9,1,2,9,0,5,0,4,8,8,9,0,7,0,8,0,4,3,0,9,7,7,5,0,2,0,1,7,6,6,8,2,3,1,2,6,9,9,7,6,5,4,6,9,7,2,7,6,1,0,5,0,4,7,2,2,1,2,5,3,7,2,0,2,6,2,9,1,1,2,4,5,4,4,1,0,0,7,3,0,5,8,5,2,5,6,2,9,7,4,9,5,8,6,6,4,4,9,8,4,4,3,9,9,0,2,3,5,9,3,9,2,7,1,1,5,0,3,1,8,7,9,9,7,2,9,0,3,6,9,9,5,5,3,4,7,7,7,0,2,5,4,4,8,8,2,1,0,2,6,2,9,9,8,1,7,2,2,1,0,6,1,6,3,8,1,0,4,7,2,3,0,4,2,3,1,0,2,5,5,7,9,5,2,7,1,7,7,7,3,4,4,0,1,8,6,8,9,3,4,7,6,9,6,4,4,2,2,6,2,2,9,9,9,5,8,6,0,1,1,7,1,7,1,0,6,3,3,9,9,4,5,6,6,7,9,2,1,5,2,9,7,9,1,9,0,4,7,6,9,9,7,1,2,6,8,2,4,7,2,8,8,6,3,7,1,2,5,5,7,6,3,6,9,0,0,5,0,1,5,5,9,1,1,0,9,3,2,4,1,9,0,8,5,0,3,6,3,1,9,9,8,8,7,1,6,9,7,0,6,1,9,8,3,1,9,6,3,9,9,2,5,2,2,0,4,9,4,9,5,3,9,6,9,6,7,7,0,0,3,2,3,6,0,6,8,4,1,8,6,4,2,9,7,6,4,9,4,3,0,0,6,7,6,8,5,4,0,3,8,3,3,2,7,5,6,3,2,2,9,9,8,2,3,7,2,5,2,4,9,1,9,0,8,5,0,6,8,9,4,8,8,7,8,5,1,4,1,6,1,7,1,8,8,1,9,5,1,1,2,5,5,8,3,7,9,7,2,7,8,4,6,8,8,9,2,9,0,7,3,9,0,8,9,9,6,9,8,3,2,6,0,7,9,5,3,5,0,1,5,9,4,1,1,0,6,5,2,3,3,8,5,8,2,3,1,2,0,0,1,8,0,7,2,9,1,6,2,7,5,0,4,7,3,5,7,2,1,1,2,8,4,2,7,5,4,4,5,6,4,9,8,2,4,3,8,0,4,5,4,9,5,1,2,5,9,1,3,1,0,7,8,1,9,7,9,7,6,6,4,4,2,0,2,4,0,9,8,1,3,4,7,9,4,2,1,0,3,4,2,0,0,9,3,3,2,5,2,2,3,9,2,4,5,3,3,6,0,3,3,5,5,4,3,5,6,7,2,9,8,4,0,0,2,4,0,6,4,2,8,9,7,0,0,0,9,3,3,9,9,0,2,8,1,8,9,1,7,4,9,4,4,9,3,4,2,7,0,6,0,8,2,6,5,9,2,8,9,6,6,7,2,4,9,6,1,8,4,8,4,2,3,2,8,1,3,7,0,6,9,8,9,5,0,4,3,4,7,2,9,0,6,3,3,9,7,2,6,7,9,6,0,1,6,6,2,2,5,3,2,6,5,3,8,6,0,0,0,9,9,7,8,2,7,6,3,4,8,5,9,5,8,5,4,3,8,0,0,4,7,3,2,0,1,3,8,9,0,4,2,5,5,9,9,8,6,2,8,1,4,5,3,9,5,4,0,4,6,1,1,4,0,0,0,1,9,5,6,6,6,1,2,8,5,0,9,9,1,5,6,2,1,4,1,8,2,5,8,7,6,7,1,6,1,6,2,2,9,8,3,7,7,5,4,6,2,6,2,4,9,0,2,9,0,2,1,1,1,4,7,9,4,8,3,3,3,0,8,5,0,9,4,5,8,8,5,6,4,9,5,7,0,6,8,2,5,4,5,0,9,9,9,0,1,8,4,3,8,6,6,9,6,5,9,8,1,1,9,7,4,8,2,6,7,0,6,2,0,6,2,7,2,5,2,9,4,8,6,1,9,6,5,6,9,1,5,9,6,8,6,6,9,1,8,7,1,4,5,3,1,3,2,0,6,0,4,3,5,3,8,7,8,6,2,5,9,8,3,6,9,8,1,0,2,1,0,4,9,7,9,2,7,6,1,4,1,2,2,0,5,4,6,2,9,9,3,9,5,3,3,8,9,0,0,3,7,8,5,5,7,8,5,5,7,8,6,5,6,1,8,8,0,7,7,6,2,4,3,3,8,7,7,2,2,4,9,4,3,7,2,1,5,7,2,2,4,5,8,3,4,3,9,4,5,0,4,8,4,2,9,0,2,5,4,1,5,5,4,5,0,6,5,7,6,6,5,1,4,8,8,7,6,6,4,3,6,7,0,4,9,0,4,4,2,0,9,4,5,4,4,2,2,0,3,5,9,4,5,0,0,5,1,5,1,3,8,0,6,8,4,0,1,7,9,5,3,4,7,1,4,0,4,6,0,4,0,6,3,9,7,3,1,6,5,0,0,2,4,1,6,0,7,4,2,0,5,4,0,0,3,8,0,8,4,4,7,7,3,7,7,5,4,5,7,9,5,2,3,4,2,4,9,1,7,7,7,1,0,1,9,0,1,5,3,5,0,4,8,7,1,5,0,1,7,0,3,9,9,2,7,5,8,0,5,0,7,6,5,1,9,0,8,1,7,8,6,8,5,2,9,9,2,7,8,9,4,3,1,3,8,4,9,4,9,4,0,1,2,7,0,4,4,3,6,0,5,3,7,3,8,6,7,4,1,2,3,3,9,5,5,0,3,6,5,6,6,6,2,9,2,0,9,8,2,1,1,4,0,9,3,3,2,7,7,0,6,0,1,0,2,9,3,8,6,9,2,7,8,0,7,4,0,2,8,8,2,8,0,4,0,3,7,8,9,4,6,0,0,7,0,9,7,5,0,1,5,5,7,4,7,4,8,5,5,9,1,0,1,9,9,1,0,6,5,0,3,6,3,6,2,2,3,7,9,9,5,1,9,9,8,2,8,6,7,8,3,1,8,1,2,3,3,6,5,5,9,7,0,0,9,7,8,8,2,5,4,6,8,3,5,3,9,5,1,3,8,1,0,4,0,6,4,8,5,9,8,6,6,5,7,4,9,9,0,4,6,9,6,6,6,2,4,8,4,8,0,6,4,0,1,4,9,8,0,4,1,6,5,8,2,7,7,4,3,6,6]"
                    },
                    {
                        "username": "ms681729",
                        "content": "this solution is working properly for all cases expect 9999999999 this case don\\'t know why help me.\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] arr, int k) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n       int sum=0;\\n        int prod=1;\\n        for(int i=arr.length-1;i>=0;i--){\\n            sum+=arr[i]*prod;\\n            prod=prod*10;\\n        }\\n        sum=sum+k;\\n\\n        while(sum!=0){\\n            list.add(sum%10);\\n            sum=sum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "ruchitakb7",
                        "content": "first it stucked at 3rd test then i changed data type to long int now it again stucked at 90 ..now what should i do?"
                    }
                ]
            },
            {
                "id": 1929149,
                "content": [
                    {
                        "username": "thisannie",
                        "content": "Back to back 3 easy problems?? HOW!?"
                    },
                    {
                        "username": "Umair9912",
                        "content": "not exactly easy tho"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "If you are not using LL then :\\n1. Use while loop till array_size > 0 || k > 0\\n2. Inside while :\\n             2.1.Use If to check weather size > 0\\n                    2.1.1Add last element of array into k\\n                   2.1.2 decrease array_size by 1. \\n              2.2.Add last element of K in your list\\n              2.3 remove last element of k\\n             \\n3. IF REQUIRED reverse your list and return \\n\\nHope This will be helpful ....."
                    },
                    {
                        "username": "aashrith_d4",
                        "content": "Easy to understand\\n"
                    },
                    {
                        "username": "simrannasrin",
                        "content": "Can anyone tell me why the code below is not working for edge cases like 9999999+1?  \\n\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        int j=0;\\n        for(int i=0; i<num.length; i++){\\n            j=j*10+num[i];\\n        }\\n\\n        int number=j+k;\\n        ArrayList<Integer> list= new ArrayList<>();\\n\\n        while(number>0){\\n            int digit=number%10;\\n            list.add(digit);\\n            number=number/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "masemune",
                        "content": "Every digit past 2^53 will start losing precision which can cause things like erroneous rounding. If you need to work with larger numbers then use `BigInt`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Adding elements from the left is must efficient. We can do that using linked list or other data structure. In python, we can use $$deque()$$  from $$collections$$. We don't need to import it in **leetcode**. Also we just need to  return this $$deque$$ and it will be accepted."
                    },
                    {
                        "username": "anand_083",
                        "content": "  this is brute force method it work properly but in 3rd case it can not give 0th index can anyone have guts to debug this solution  /\\n        int n=num.length-1;\\n       int base=1;\\n      for(int i=n;i>0;i--){\\n          base=base*10;// base mil gyi //\\n      }\\n        int sum=0;\\n// this loop give me 1000,100,10,0, as my question demand//\\n        for (int i = 0; i <n ; i++) {\\n            int temp=num[i]*base;  // 1*1000\\n            sum=sum+temp;           // 1000\\n            base=base/10;              // update base as 100\\n        }\\n        sum=sum+k+num[num.length-1];\\n// however it give sum properly include 3 rd case //\\n\\n// for printing //\\n        for (int i = n; i>=0 ; i--) {\\n            num[i]=sum%10;\\n            sum=sum/10;\\n        }\\n        return num;\\n// run this code in your local compiler  //// "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "why does this code not work for num = [9,9,9,9,9,9,9,9,9,9]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        int number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        int tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, tempnum % 10);\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@adityadewhy](/adityadewhy) nevermind, even long aint enough for the other test case ie [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "i am assuming the problem was with int data type(int too small to store that big a value)\\nhere\\'s the fix\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        long number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        long tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, (int)(tempnum % 10));\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "parth_chittora",
                        "content": "`class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       long value = num[0];\\n        List<Integer> list = new ArrayList<>();\\n        for(int i = 1;i<num.length;i++){\\n            value = value*10+num[i];\\n        }\\n        value = value+k;\\n        System.out.print(value);\\n        int dig;\\n        int i= 0;\\n        while(value>0){\\n            dig = (int)value%10;\\n            value = value/10;\\n            list.add(list.size()-i,dig);\\n            i++;\\n        }\\n        return list;\\n    }\\n} `\\nWhy is it not giving the ans for the test case 999999999"
                    },
                    {
                        "username": "takezo_shinmen",
                        "content": "AYOO guyz ,  whhats wrong eith this test case\\nnum =\\n[7,8,2,9,2,5,4,7,1,8,0,6,6,7,4,9,0,3,9,9,2,2,6,6,2,5,8,3,6,3,9,6,3,3,1,6,2,7,5,9,8,9,4,4,7,5,0,7,3,8,7,6,0,9,0,7,4,1,1,4,0,7,7,7,6,1,6,5,1,7,4,9,0,4,2,4,4,4,2,6,6,2,1,3,6,7,2,1,9,5,8,3,6,4,2,1,6,6,7,1,0,2,9,3,5,6,8,5,4,2,7,0,3,6,5,0,2,1,1,4,0,1,3,7,7,1,9,1,6,5,9,7,3,3,1,0,9,4,6,5,3,2,0,8,2,7,7,5,4,2,9,9,3,1,9,5,5,4,0,7,3,6,8,9,6,5,1,1,7,0,7,5,3,2,3,1,4,8,2,5,9,6,0,0,2,4,7,9,6,2,3,2,8,5,6,1,0,7,9,1,6,5,6,2,8,5,0,9,2,5,4,0,3,6,0,7,0,3,0,0,8,5,1,2,5,5,1,6,6,0,9,7,9,2,2,7,0,4,3,1,0,4,8,8,6,6,4,6,4,3,1,3,1,5,4,4,3,6,4,5,2,3,7,6,2,4,0,3,7,5,6,8,9,8,6,9,6,9,0,1,3,1,9,0,8,1,9,8,0,4,1,8,1,1,6,0,9,2,8,3,6,0,0,7,2,4,6,3,9,9,2,6,4,8,1,1,1,0,8,8,2,5,9,3,5,4,0,2,5,9,9,1,7,3,7,4,0,1,9,5,5,0,8,2,4,5,9,0,3,9,3,0,6,6,0,7,0,4,2,1,4,8,0,4,5,4,9,9,3,4,0,9,1,1,0,2,0,6,1,2,8,6,3,3,2,5,2,9,9,4,0,0,9,5,7,8,9,2,0,4,0,4,9,1,9,3,9,8,3,6,4,8,7,4,9,6,3,7,8,2,3,4,5,6,0,7,5,2,6,4,6,5,8,9,2,5,6,5,7,1,0,1,2,3,2,2,2,3,4,5,0,8,7,0,8,4,3,6,8,9,9,4,9,5,6,8,3,7,5,9,3,7,5,3,8,2,2,9,1,2,1,7,6,2,4,3,5,8,5,8,4,9,5,4,6,2,7,3,7,2,1,5,9,1,1,6,8,8,6,6,8,1,4,7,7,7,7,3,1,8,5,5,0,3,5,8,6,5,2,9,6,0,0,3,1,3,8,3,7,6,5,3,6,9,7,0,9,0,4,1,6,5,0,6,5,7,7,3,0,9,0,2,9,5,1,9,9,9,8,9,4,4,4,6,1,3,2,0,8,3,6,5,0,8,5,7,3,9,1,3,7,1,3,1,6,9,5,5,1,6,7,5,6,5,1,6,4,6,3,4,1,3,8,8,3,9,5,2,5,5,6,9,3,2,9,9,5,7,0,7,0,5,8,0,7,0,8,0,4,6,0,0,3,7,2,3,8,1,4,6,5,6,4,0,4,8,7,5,8,5,8,1,7,3,7,8,8,5,3,4,1,9,3,0,2,9,6,3,3,4,1,8,5,1,7,4,4,4,9,7,3,7,0,7,5,5,0,0,1,9,2,6,0,9,6,5,1,4,0,2,0,7,5,4,8,8,7,0,4,1,0,8,9,9,3,3,4,0,9,5,7,5,3,6,2,4,1,0,9,1,5,7,5,4,5,6,2,9,9,4,2,1,5,6,1,1,8,8,2,8,0,9,0,8,1,4,9,3,0,6,5,1,3,6,2,1,9,1,2,8,7,0,2,4,7,8,3,1,6,4,1,4,9,9,5,4,0,3,8,5,2,3,7,1,8,4,2,2,5,2,9,6,2,1,3,3,3,9,1,1,3,9,1,0,0,6,7,1,3,3,2,6,9,5,2,8,8,7,2,5,2,7,1,4,2,0,1,9,8,5,6,3,2,2,3,3,1,8,9,8,5,6,4,7,8,6,5,8,8,6,0,5,5,0,8,3,6,3,0,1,3,0,8,2,1,6,9,8,0,5,0,9,4,0,5,8,8,9,8,8,5,0,1,1,1,6,2,2,8,8,0,6,7,8,8,3,5,8,4,9,7,2,1,9,4,1,0,1,3,1,6,1,3,7,8,7,3,5,9,1,5,9,8,3,1,7,3,0,2,0,6,8,5,5,5,3,4,3,0,4,0,2,2,0,5,5,9,2,0,9,7,3,3,3,9,5,0,4,1,3,3,2,2,5,1,9,3,5,6,1,6,3,0,3,1,6,3,8,1,9,9,9,9,9,0,5,0,8,9,2,1,5,9,6,6,8,3,0,3,1,2,9,1,8,2,8,8,1,5,1,9,7,0,3,4,3,7,1,0,2,2,5,0,8,1,6,1,4,4,7,0,2,4,4,9,5,1,7,1,8,2,5,0,1,3,3,5,5,2,2,3,5,8,6,6,0,0,3,9,0,1,8,0,6,2,2,9,1,8,2,6,6,4,9,5,1,6,5,9,5,7,3,8,5,2,3,5,6,3,5,7,2,1,0,4,3,2,2,5,9,3,2,2,1,1,5,1,7,4,6,5,8,9,8,6,2,6,4,2,5,2,4,8,0,1,7,8,3,8,5,3,3,2,9,4,2,8,7,2,8,6,7,8,8,7,9,7,3,0,7,7,6,0,9,1,8,7,2,4,9,0,4,4,3,9,2,6,3,4,2,9,6,2,6,7,6,9,9,7,2,4,9,1,3,5,7,7,8,4,9,1,1,0,8,3,5,6,9,0,5,5,4,0,8,3,6,4,9,1,4,4,9,8,2,2,4,4,0,9,1,1,9,3,5,0,6,8,2,5,7,5,0,7,2,7,7,5,1,7,9,5,8,7,9,7,1,9,1,7,5,0,1,8,1,0,5,1,0,5,9,7,8,9,9,5,6,0,1,9,3,1,1,3,2,3,1,2,8,9,9,0,2,9,5,4,7,3,9,5,1,9,4,6,3,2,0,0,0,8,2,6,1,2,4,9,5,7,9,9,6,7,4,0,7,1,5,4,4,6,2,0,4,0,1,8,7,7,5,8,9,6,6,5,0,6,2,5,5,7,7,7,2,9,6,9,4,8,4,0,4,6,1,5,1,6,7,7,0,6,1,2,8,8,6,4,1,0,5,7,6,4,2,0,2,0,5,1,6,9,4,2,2,0,1,6,5,9,8,6,3,7,3,8,5,0,6,5,7,3,0,6,8,2,1,2,9,9,4,3,0,3,1,2,9,6,8,4,6,9,0,3,6,3,2,5,9,9,4,3,6,2,2,5,8,1,6,9,7,1,9,1,7,1,4,8,2,7,4,9,9,8,8,0,4,3,3,9,8,8,9,7,2,3,4,9,2,0,5,4,4,3,4,8,5,7,4,1,1,9,9,7,5,9,2,7,7,2,3,2,2,0,1,6,9,0,7,8,7,3,9,6,1,9,0,4,5,3,4,2,3,2,1,8,2,0,2,5,4,7,4,2,0,7,1,7,7,8,5,6,2,2,0,2,5,7,2,0,6,6,9,0,1,2,4,0,5,5,2,1,6,8,7,9,7,6,7,1,8,0,3,0,6,1,4,6,9,1,4,5,8,4,8,0,5,7,8,2,8,6,7,4,9,9,8,7,7,1,3,8,7,2,1,7,5,3,7,2,2,2,1,6,1,2,1,3,0,2,4,3,8,8,3,7,5,9,9,7,3,3,8,9,2,3,2,5,5,5,2,6,1,9,2,4,8,0,7,9,5,2,7,3,2,9,2,1,9,9,5,0,9,6,4,5,8,8,9,0,8,8,4,2,6,2,2,2,4,9,7,5,3,3,9,1,0,7,0,0,3,9,4,8,4,8,6,6,4,0,3,4,9,0,4,0,3,9,1,4,5,8,0,2,4,3,8,8,6,6,2,8,4,3,8,3,9,2,4,3,7,4,7,7,9,3,6,3,8,1,2,5,0,9,3,5,0,3,0,5,5,0,3,3,8,8,4,2,3,4,3,9,3,5,2,3,2,8,7,2,2,7,5,9,5,8,9,4,7,6,6,1,5,9,2,8,7,5,6,3,0,7,9,0,0,7,8,7,0,5,2,4,5,9,6,0,0,8,9,3,4,0,7,7,7,3,5,1,3,9,6,1,0,7,3,2,9,3,4,0,8,5,3,2,2,5,7,4,3,6,1,3,0,3,1,4,4,7,4,2,1,1,3,8,4,9,1,0,7,1,1,5,6,8,9,2,0,8,7,7,3,6,6,5,0,8,8,9,0,6,5,9,9,3,2,8,6,1,9,8,2,2,4,4,9,6,1,9,5,5,4,7,4,6,9,7,5,4,5,5,2,7,7,3,6,9,9,0,9,1,3,9,5,4,7,2,8,0,9,9,6,5,9,2,4,9,8,9,9,0,8,5,4,3,0,7,9,1,1,8,6,4,5,7,9,4,3,7,5,3,1,1,6,0,0,3,8,1,2,9,3,3,3,9,3,5,8,5,9,6,3,9,8,5,3,4,9,2,0,8,6,3,5,2,5,4,4,3,7,9,9,9,5,9,1,2,4,5,4,0,0,4,1,2,3,1,7,9,3,1,4,8,7,1,1,1,5,0,8,1,8,8,4,9,2,6,6,7,5,4,4,7,1,3,1,5,4,1,4,7,3,6,0,8,7,6,6,1,7,9,1,6,5,4,8,2,8,1,8,4,0,6,8,4,5,3,1,4,2,2,2,9,4,0,1,0,5,7,2,5,3,4,3,9,0,8,0,8,6,4,5,5,9,8,3,4,5,6,6,8,0,7,8,0,7,3,6,7,8,4,6,3,6,0,3,0,7,5,6,3,4,5,2,1,5,7,6,3,4,8,9,7,9,8,9,3,7,1,3,1,1,2,7,1,4,1,0,2,9,6,5,5,4,0,3,1,1,1,2,2,8,1,3,1,1,6,9,7,5,2,5,4,8,7,7,4,9,3,9,0,1,8,9,5,6,7,9,6,2,1,0,9,3,5,9,4,4,4,2,6,8,0,3,4,5,7,2,0,1,4,2,0,6,1,9,8,7,6,1,1,2,8,3,8,6,1,9,1,2,2,5,4,3,2,5,2,8,2,2,7,5,7,6,7,6,9,9,7,3,9,8,6,2,6,9,5,9,3,3,7,0,9,8,5,1,2,7,6,5,7,5,6,9,5,6,7,6,7,3,4,5,0,9,4,9,2,6,8,8,1,7,2,1,8,8,7,1,5,7,6,5,6,3,6,7,6,3,4,6,3,1,3,9,4,7,6,1,0,9,2,0,9,0,6,2,5,0,4,8,8,3,2,8,5,6,9,0,0,2,7,8,7,7,0,2,3,9,6,0,8,0,6,6,1,6,9,7,9,1,6,4,0,5,9,2,8,1,5,4,3,2,1,9,9,1,8,3,5,6,9,8,0,4,7,8,8,7,9,8,7,4,0,5,9,8,1,8,1,8,0,5,2,3,9,9,6,2,1,5,7,5,4,7,1,7,3,3,6,8,8,3,7,7,9,2,1,7,0,9,1,7,2,8,5,5,4,3,2,4,8,8,2,3,0,4,9,3,3,6,6,0,7,0,0,8,9,8,6,6,4,5,9,4,9,8,2,5,1,8,4,2,7,0,7,0,0,4,2,1,6,7,0,6,0,5,6,4,0,1,7,5,9,2,9,4,9,6,3,9,5,8,0,0,2,8,0,9,6,7,8,8,4,5,6,8,0,5,8,4,3,8,8,3,4,9,3,3,6,5,4,9,9,3,0,4,3,0,6,7,4,7,5,8,7,5,1,0,8,0,1,4,8,8,3,3,3,1,8,4,4,3,8,5,7,9,3,9,5,5,0,4,5,0,7,8,2,2,9,1,6,1,6,5,7,5,8,7,5,7,6,6,0,8,2,1,0,3,0,2,2,7,4,9,8,2,6,7,1,0,8,1,8,0,5,1,0,0,1,3,1,8,9,2,8,9,1,2,7,0,2,3,6,1,1,5,0,2,1,6,2,5,9,3,1,9,7,2,8,7,3,5,7,4,3,3,1,1,9,3,4,8,8,4,6,2,6,4,3,8,7,7,1,3,4,4,6,9,4,1,3,2,0,7,2,4,1,2,9,9,1,4,1,3,5,1,9,4,1,5,4,6,0,3,0,8,1,7,6,9,4,9,1,8,2,4,9,5,9,6,9,3,3,2,5,0,1,8,4,8,1,6,0,4,9,1,3,9,4,5,0,6,7,1,7,4,6,5,0,8,1,0,0,1,2,3,5,2,9,8,9,6,4,6,4,5,5,1,2,2,3,3,7,1,3,9,6,8,8,3,6,3,4,4,0,0,6,7,4,2,8,7,8,7,8,6,8,1,4,3,6,5,0,1,5,3,4,0,9,0,1,6,8,3,9,3,9,1,1,4,4,4,1,5,7,3,8,5,7,1,8,9,0,9,3,1,0,3,8,3,1,9,2,6,2,5,4,4,9,0,2,5,1,5,1,8,9,2,7,7,9,7,2,2,6,7,7,9,0,7,2,8,3,6,2,0,0,6,7,3,4,7,3,0,8,8,5,8,2,7,6,2,5,1,8,2,6,6,3,7,2,3,6,7,5,8,1,9,4,5,6,4,6,7,7,7,7,3,9,9,4,8,3,5,5,7,1,7,4,5,6,0,3,5,5,3,4,1,4,5,6,4,8,9,6,8,0,1,9,5,6,6,8,6,9,4,6,2,5,9,9,6,4,4,5,5,8,0,9,2,3,5,5,6,8,9,4,2,7,9,2,8,8,2,1,1,4,3,7,5,4,5,3,6,3,5,5,3,9,8,5,0,0,1,1,0,7,9,2,5,8,1,0,6,0,6,5,6,5,9,7,1,0,1,9,9,3,1,1,7,0,4,3,1,8,7,3,8,2,3,8,7,8,2,3,6,6,4,5,0,7,4,8,3,4,0,7,1,8,6,0,5,0,8,5,1,3,3,2,7,4,9,1,6,5,9,5,1,1,1,6,2,1,5,3,6,2,4,4,6,1,1,1,8,7,1,9,9,4,7,2,3,4,5,9,7,6,9,5,3,4,6,8,2,0,8,4,9,8,6,8,4,6,7,4,7,7,8,2,6,7,1,2,1,0,6,0,5,1,9,8,2,2,9,4,6,0,7,0,0,5,8,5,3,2,9,4,1,6,7,2,0,7,3,6,8,1,9,8,0,8,8,7,0,6,1,9,8,7,4,5,0,8,6,9,8,6,2,7,9,3,5,1,9,2,5,8,8,5,1,2,2,2,1,6,9,7,8,4,8,9,0,2,3,8,7,9,6,9,7,2,6,2,4,6,6,7,8,9,4,2,9,7,3,7,1,3,5,5,9,8,4,1,7,0,6,9,6,3,4,7,0,7,4,4,5,8,9,1,1,3,9,1,3,3,8,3,0,0,5,7,2,3,3,4,7,1,7,5,5,7,0,3,8,5,1,7,0,5,9,0,2,0,8,7,5,3,6,4,6,9,3,0,1,6,8,9,9,9,1,2,0,0,9,5,2,9,4,5,8,4,0,5,7,6,5,5,4,0,2,2,3,7,7,8,6,8,0,6,7,8,4,6,0,5,1,4,1,8,9,6,9,9,5,8,4,8,4,0,1,0,8,6,9,4,0,8,6,9,3,6,0,8,1,4,6,8,0,4,6,0,2,1,2,5,4,5,1,6,1,4,7,4,3,1,5,4,4,5,5,1,1,3,3,5,7,4,2,7,0,1,3,5,9,6,8,2,2,2,0,0,8,1,3,8,9,3,2,1,1,1,3,9,6,1,1,1,7,7,7,1,4,4,5,0,1,3,7,4,7,0,9,7,7,1,2,9,1,7,9,8,3,3,6,5,2,3,1,9,2,9,3,8,7,5,7,1,4,7,6,9,2,5,8,4,6,9,8,1,2,0,4,2,1,9,8,4,9,7,6,3,0,4,8,8,3,2,2,9,5,5,7,2,3,2,7,6,8,2,3,4,4,6,4,6,1,5,2,7,8,4,9,1,4,2,9,2,9,1,6,9,4,1,2,6,1,4,8,4,9,9,3,4,5,5,5,4,0,2,7,9,5,7,7,1,0,9,9,2,9,4,9,1,3,1,2,4,6,3,2,4,6,7,9,1,5,2,3,2,6,4,4,5,8,5,9,9,0,5,8,5,9,1,0,9,7,9,7,6,8,6,6,9,9,6,6,3,0,8,4,9,9,3,3,2,0,7,9,7,8,2,9,2,7,9,9,0,2,8,4,0,4,9,0,3,9,4,6,5,6,6,9,1,3,5,5,6,4,4,6,1,2,2,4,4,2,2,0,4,1,6,3,4,7,0,7,0,3,3,6,5,7,7,8,3,9,9,9,5,2,3,7,6,7,9,4,0,8,8,3,5,3,7,6,5,8,1,9,5,9,2,7,4,9,5,2,4,1,8,7,6,6,2,8,6,5,3,4,6,2,2,5,2,5,3,9,3,7,2,4,2,5,7,3,3,2,4,3,1,7,9,3,5,6,3,0,0,0,8,5,9,9,6,3,0,0,6,1,2,1,4,0,2,0,1,5,8,0,4,5,4,0,8,8,1,5,4,6,5,9,7,6,8,4,2,2,5,9,0,5,0,0,3,5,3,1,8,7,6,2,0,4,3,1,3,7,6,4,9,8,5,0,9,6,6,5,7,3,2,2,0,0,1,7,6,6,9,2,0,4,2,8,0,6,5,5,3,0,0,7,4,6,7,9,8,3,9,6,1,6,3,9,6,3,4,5,8,4,9,0,1,8,4,0,8,8,8,4,2,6,8,1,3,7,3,0,9,6,5,3,8,3,8,8,1,9,5,5,3,7,7,2,5,8,7,7,0,5,5,7,9,2,9,2,5,9,7,1,6,9,9,2,9,6,2,4,8,8,6,3,6,0,7,6,6,0,4,3,2,3,7,3,9,6,5,7,0,8,5,3,5,8,3,5,9,7,4,5,0,8,7,1,8,2,3,5,0,6,8,4,8,5,7,1,0,3,2,6,6,8,3,7,9,8,0,6,2,9,0,0,4,5,8,5,5,9,4,8,0,7,1,3,7,5,2,4,4,4,6,0,3,0,3,6,2,9,9,8,5,5,1,2,0,9,2,2,9,7,3,4,9,4,5,7,2,2,9,9,9,0,5,4,5,6,0,4,7,5,7,0,3,2,8,0,0,1,9,0,6,9,2,6,8,8,5,9,8,1,5,1,4,2,5,3,6,0,5,6,5,1,1,7,1,2,4,3,1,0,4,6,4,5,9,0,0,1,2,5,4,1,5,9,4,8,2,8,7,5,8,9,3,5,2,2,6,7,0,6,6,9,6,6,1,3,9,7,9,1,1,4,4,3,5,1,8,5,9,0,6,1,8,2,6,9,2,3,5,5,7,2,5,4,0,0,5,9,7,5,1,5,7,3,5,8,4,1,0,7,8,4,7,2,1,9,6,5,3,2,2,4,1,4,4,7,5,1,9,3,2,7,2,9,4,3,0,5,5,8,3,4,2,8,2,0,9,0,2,1,6,3,8,8,4,2,6,1,0,0,6,0,2,4,2,2,1,4,2,0,1,5,6,1,8,5,5,8,7,4,3,7,7,7,6,7,6,0,8,8,7,9,0,1,9,6,1,2,8,0,7,5,3,5,8,1,0,3,2,7,7,3,2,3,8,7,7,5,7,6,4,3,2,5,5,0,2,9,6,7,3,0,3,2,0,8,0,0,5,1,8,2,4,1,8,1,7,6,3,2,1,5,3,8,5,2,4,9,9,7,1,9,1,5,9,7,8,0,4,4,8,8,8,6,8,4,4,0,3,8,3,8,2,4,5,5,2,0,3,5,9,6,5,2,6,3,5,0,6,0,5,2,2,0,9,6,2,8,7,9,3,6,1,6,2,2,8,5,2,6,3,7,9,5,9,3,1,4,9,2,9,5,4,8,9,9,9,3,2,7,2,7,6,4,3,5,2,4,1,4,3,1,9,8,8,8,7,6,7,6,6,0,2,5,7,7,9,4,5,0,0,5,8,9,7,6,0,1,3,5,7,0,6,7,8,9,4,6,1,3,3,6,6,1,0,6,4,4,4,6,3,2,6,2,9,3,0,3,4,7,3,6,0,9,8,3,4,6,9,7,0,0,7,7,1,1,5,8,3,8,4,9,0,5,6,6,4,0,9,0,9,3,9,7,4,2,1,5,7,6,5,9,9,9,2,7,0,5,8,2,8,2,0,9,9,7,1,3,5,1,8,7,7,8,5,4,3,2,3,5,4,8,2,2,6,8,7,8,0,9,7,1,4,0,9,4,9,0,0,4,6,2,9,0,7,0,1,4,7,5,6,5,3,8,2,3,9,9,8,7,4,0,8,1,9,5,7,5,6,0,0,9,3,7,4,6,9,9,3,3,7,6,1,9,8,1,3,3,5,4,2,0,2,4,3,9,8,4,5,2,4,5,0,6,3,5,1,9,9,5,6,1,4,1,6,8,1,7,0,0,5,2,2,2,2,7,4,2,6,0,1,5,7,1,8,9,7,6,3,7,7,0,3,4,6,2,7,3,1,1,3,3,9,6,5,6,5,8,6,6,2,1,1,3,7,5,3,6,7,2,1,7,2,5,1,0,8,4,2,6,4,1,4,3,2,8,7,0,7,9,9,6,5,0,4,0,3,9,6,7,8,4,9,5,4,9,0,4,8,4,7,6,8,4,5,9,1,1,2,6,8,8,2,8,8,5,7,9,4,4,8,9,0,2,7,2,1,9,5,2,6,4,8,9,4,7,3,1,3,9,7,2,1,6,8,1,8,8,7,7,7,3,7,2,5,0,8,1,6,4,6,6,1,0,7,8,2,8,3,3,2,3,7,7,5,8,2,1,1,2,0,3,9,6,8,8,9,5,8,6,9,8,9,5,3,6,8,6,4,4,2,6,6,2,6,8,7,4,0,1,8,2,9,3,1,2,1,4,6,6,1,8,5,4,7,1,7,2,5,9,9,0,4,9,4,5,9,9,3,0,4,5,1,4,6,2,3,5,6,8,8,3,2,1,4,6,9,2,0,4,5,8,4,0,6,1,9,7,3,0,0,7,6,5,2,6,5,4,3,7,1,9,9,7,0,7,9,9,3,0,3,2,3,3,9,6,0,2,2,5,4,4,2,0,5,8,8,8,8,9,1,6,6,5,0,1,0,7,8,3,3,9,1,8,7,4,8,7,4,1,8,7,5,0,5,4,3,4,5,0,8,1,7,0,4,7,1,6,6,0,5,4,1,4,9,0,6,3,4,3,8,9,3,4,7,0,9,2,1,8,2,9,9,2,0,0,4,9,7,1,1,0,7,0,6,0,3,4,6,7,4,3,6,6,4,1,0,1,1,8,6,9,9,0,6,4,8,4,7,2,4,3,9,8,2,9,4,2,7,2,9,5,0,3,4,1,8,5,5,6,6,2,0,4,6,1,4,9,8,5,2,5,1,2,1,3,0,9,2,3,3,4,2,6,1,7,8,7,1,2,3,9,9,9,7,2,1,1,1,5,9,6,1,4,2,5,2,4,9,0,4,3,1,5,1,8,2,1,0,8,0,2,8,8,8,6,5,4,4,0,3,6,0,7,0,9,6,4,0,1,5,4,2,0,5,7,4,0,5,7,1,6,2,0,1,0,8,3,5,7,4,0,9,5,5,7,5,8,9,6,5,9,8,8,3,7,8,8,8,9,1,7,6,3,8,1,5,0,0,3,6,3,7,8,9,5,3,2,0,4,6,9,8,5,8,2,3,1,9,7,3,2,6,2,3,7,6,5,7,8,9,1,2,6,6,5,2,2,9,1,2,0,5,9,7,7,8,9,3,9,0,4,7,7,1,8,4,1,7,6,8,0,4,2,3,8,0,9,4,0,3,1,7,3,9,9,8,2,1,0,7,9,0,3,0,1,5,0,7,4,6,2,9,8,2,9,9,6,9,1,2,2,3,7,5,2,0,2,7,7,8,5,6,8,4,8,2,2,5,4,9,3,8,1,7,3,0,1,0,2,3,8,3,6,8,6,4,6,5,6,1,3,4,7,7,1,7,8,7,0,8,4,8,4,5,6,0,9,3,3,1,7,2,6,8,0,9,8,4,2,9,8,4,7,3,6,0,8,4,9,7,4,4,6,0,9,9,3,7,1,9,2,0,2,3,9,1,3,7,7,6,4,4,3,2,3,6,6,0,8,4,5,4,5,8,1,9,0,8,1,1,5,7,4,1,7,8,5,1,6,4,1,1,6,2,7,5,3,6,3,6,0,4,4,6,8,7,9,8,2,1,7,3,4,7,9,7,8,5,6,6,8,8,8,2,6,6,3,8,4,1,4,4,3,2,6,6,0,2,5,4,6,7,7,8,4,3,9,0,4,0,6,1,8,0,6,7,7,4,0,7,8,5,7,8,1,5,4,2,7,1,5,9,2,3,7,4,8,5,6,7,7,3,1,1,5,5,7,3,3,8,6,1,2,3,5,3,2,5,6,6,3,6,7,2,7,5,1,4,1,3,8,7,6,6,2,2,1,2,2,3,3,0,0,1,6,8,6,6,0,6,5,2,4,6,7,3,0,3,5,2,0,8,7,7,0,6,0,2,4,3,3,6,5,6,2,8,8,2,6,7,9,0,7,0,9,3,4,3,2,9,0,1,8,5,3,0,6,8,4,5,6,0,0,0,5,4,6,3,9,0,6,0,2,1,1,3,1,5,7,4,0,5,2,2,4,5,4,6,4,7,5,9,2,4,4,2,5,7,4,7,0,7,1,8,8,8,9,9,6,8,4,7,9,4,8,8,9,9,2,8,8,9,2,2,4,8,1,2,3,9,8,2,9,4,8,7,5,6,1,4,6,2,2,2,5,3,0,5,8,4,7,2,2,7,6,0,6,7,9,5,7,2,2,2,9,7,1,6,2,9,5,4,6,1,4,7,2,9,0,6,6,4,5,6,8,3,2,0,0,0,8,7,5,6,3,8,5,8,9,8,6,4,5,0,7,7,3,7,1,4,2,0,4,9,7,8,5,0,9,6,5,3,0,4,5,3,0,0,1,1,2,3,9,9,0,6,5,9,9,7,2,0,4,1,2,2,4,4,8,2,1,9,5,6,1,5,0,9,1,9,8,3,7,3,5,9,4,1,3,1,3,2,4,9,3,4,5,9,7,2,2,5,1,4,3,0,1,6,4,1,7,3,2,0,1,1,4,8,7,8,2,3,1,1,7,6,6,2,6,4,9,3,7,5,1,3,4,0,0,7,3,0,8,1,0,9,1,9,6,5,7,9,1,6,5,7,8,3,7,2,2,0,2,4,0,8,5,1,2,8,4,1,2,1,2,1,0,4,3,6,1,4,9,0,5,5,4,9,2,3,5,5,9,3,8,8,6,2,6,8,1,9,4,7,8,9,3,7,8,2,0,3,6,8,6,2,2,6,0,5,1,0,6,4,2,8,8,3,5,8,8,2,6,9,0,0,0,1,8,8,6,3,5,9,5,2,6,7,1,6,6,5,8,7,0,9,5,6,3,7,2,7,1,7,2,3,4,1,2,2,9,0,0,7,0,4,7,4,4,1,1,6,8,6,1,9,0,6,7,7,5,3,4,3,1,0,8,1,6,2,4,1,9,7,5,1,7,2,6,0,9,3,3,0,6,1,5,1,3,9,3,7,1,7,8,1,8,4,2,9,0,7,2,6,1,2,4,0,9,3,7,1,0,6,5,1,7,5,6,3,7,1,1,7,7,9,1,7,3,1,3,6,3,9,3,3,0,2,7,5,1,3,0,4,0,0,2,6,3,9,2,0,1,3,4,6,4,8,8,8,0,2,2,8,4,7,6,9,6,8,3,9,0,3,8,9,4,6,7,8,3,0,5,6,6,4,6,6,1,9,8,0,4,9,9,2,7,6,6,8,3,9,1,0,9,8,0,3,7,6,4,8,9,3,1,2,2,4,8,4,8,5,7,9,7,4,9,1,5,8,5,9,1,0,5,8,8,2,0,8,8,1,4,2,2,0,5,7,6,0,3,3,8,1,8,3,9,9,9,6,3,6,2,2,7,8,3,3,2,7,1,2,1,4,0,2,6,6,9,4,9,5,2,5,1,3,5,3,7,7,7,0,2,4,7,6,1,1,0,4,4,2,3,8,8,7,8,4,2,3,0,2,9,5,4,2,4,4,5,2,0,2,1,4,9,4,0,0,3,0,4,8,8,5,4,7,1,4,2,8,1,5,3,6,1,5,9,9,0,5,1,1,4,2,9,3,0,2,4,3,0,8,4,1,6,3,7,5,6,6,6,4,3,9,2,6,0,6,1,4,1,0,6,4,5,0,2,1,6,2,3,8,3,5,5,4,3,1,8,7,9,8,3,9,3,2,2,6,6,9,4,8,6,7,6,7,5,5,1,4,6,5,7,7,2,4,9,6,2,4,8,8,4,6,4,1,5,6,6,4,2,3,6,7,8,5,7,9,8,0,9,8,9,0,1,9,6,1,7,6,2,4,9,2,8,9,0,2,5,3,8,5,0,5,7,1,5,4,5,1,9,7,3,7,2,5,5,1,5,7,7,4,0,1,4,6,0,0,8,2,8,6,7,4,9,7,4,7,5,6,0,9,9,9,4,3,4,5,9,4,6,4,3,3,8,0,3,2,6,3,7,0,5,0,0,9,5,2,2,7,3,0,2,4,7,5,0,0,5,1,9,5,5,6,4,8,8,8,5,4,2,5,1,0,2,3,0,6,0,7,4,2,8,2,4,5,3,8,9,5,5,6,0,9,3,0,9,0,9,5,4,3,6,7,4,4,0,2,2,9,4,6,6,9,8,1,1,7,4,5,4,9,7,7,0,1,6,5,2,3,6,1,5,5,3,9,1,7,6,4,2,0,4,0,9,3,5,1,9,7,2,9,5,9,4,9,8,7,9,2,7,0,5,4,4,7,4,5,2,2,8,8,7,0,3,7,8,5,1,5,6,8,4,5,3,8,6,1,0,2,5,7,4,4,4,0,7,7,2,3,6,4,9,9,0,5,2,3,3,0,2,9,8,8,2,9,4,7,6,1,3,9,3,0,7,1,9,0,6,5,4,7,4,8,3,0,9,6,2,8,9,4,6,6,0,9,9,7,1,9,4,9,5,5,9,3,9,6,4,5,1,0,1,7,5,5,6,3,6,9,4,6,6,1,8,2,0,6,2,0,9,5,0,0,4,5,4,2,0,4,5,1,2,3,5,6,6,2,5,5,8,9,6,8,8,4,6,1,6,7,9,0,1,4,6,3,6,8,7,4,6,2,5,3,0,0,5,4,1,3,2,5,1,5,2,4,5,3,2,5,3,5,2,9,4,6,5,4,0,6,4,3,6,0,8,3,9,4,6,9,4,7,4,8,7,6,6,9,4,2,1,1,3,0,5,0,0,2,3,7,1,7,7,1,6,4,6,0,1,4,4,6,5,8,8,6,7,3,8,2,6,2,6,6,7,7,5,8,9,1,6,7,3,0,8,6,0,6,4,2,0,8,5,2,7,8,2,5,6,8,0,4,7,0,3,7,5,8,6,8,6,5,6,2,4,2,4,2,4,3,6,8,3,2,0,3,8,3,9,2,8,3,7,4,5,9,1,0,7,4,2,3,7,9,9,9,1,2,5,1,7,9,1,3,9,7,5,2,4,8,4,2,9,5,5,7,1,1,4,1,0,4,6,4,2,3,3,2,7,0,4,6,6,0,5,6,0,7,3,3,2,1,8,7,2,8,3,8,4,7,6,1,2,0,4,5,2,4,8,3,9,0,1,8,1,4,9,6,6,8,8,1,4,0,0,5,2,3,7,2,1,0,3,7,1,5,9,8,6,4,4,9,7,7,8,3,2,5,9,7,1,7,7,4,3,3,6,0,6,5,9,4,4,6,9,6,3,7,8,0,1,8,6,2,2,9,2,8,1,7,0,9,6,3,0,6,7,2,7,0,6,9,6,4,7,8,2,2,6,3,1,7,6,4,7,6,1,4,9,4,0,1,7,3,6,8,4,9,3,4,7,3,7,3,3,8,9,9,1,1,3,7,7,3,3,9,6,4,0,5,2,6,0,0,1,1,9,0,9,0,9,8,5,4,9,7,9,5,4,6,2,5,7,0,1,7,1,0,8,5,0,5,9,7,4,1,6,1,9,3,5,3,8,8,9,4,8,5,2,5,3,4,8,3,9,7,3,7,4,6,0,6,6,4,8,5,4,9,6,1,3,1,9,7,5,4,9,0,2,4,3,1,1,3,6,6,9,5,2,6,4,2,1,9,0,6,9,5,1,9,3,2,8,4,6,6,4,1,8,6,6,9,2,7,3,3,7,0,4,1,8,2,7,7,9,9,7,1,4,8,2,2,6,9,6,2,5,8,7,0,7,4,1,3,7,4,8,5,5,2,8,0,8,8,8,3,4,4,5,3,0,2,7,3,4,2,9,8,9,3,1,3,9,2,6,0,9,0,5,3,6,6,2,2,9,4,4,4,9,2,1,7,4,2,1,0,1,8,1,7,7,2,3,7,9,8,0,4,1,8,9,9,8,1,0,5,7,4,6,6,5,2,4,9,1,1,9,9,6,4,8,7,4,8,4,0,5,4,3,0,3,9,6,7,6,6,2,7,3,1,5,7,2,5,6,7,9,3,2,1,3,5,6,1,2,0,1,9,2,5,1,1,2,5,6,4,4,7,2,2,6,8,6,8,2,1,3,0,8,5,4,0,9,8,6,9,9,7,3,2,6,4,9,4,4,9,0,0,8,8,6,0,8,7,6,7,0,1,8,5,8,7,7,6,5,0,7,1,0,3,7,3,2,6,4,7,7,1,7,3,3,1,3,3,0,2,5,5,2,7,3,8,7,8,8,9,4,6,3,2,6,9,9,1,8,0,9,5,3,8,0,9,4,0,0,5,4,2,2,0,5,1,8,4,8,6,4,6,2,3,5,8,3,8,5,7,2,6,2,4,3,2,1,7,9,1,3,2,5,8,2,3,3,4,7,1,6,1,0,9,8,8,3,4,9,6,0,8,5,2,3,3,3,2,8,1,8,2,5,4,7,7,3,8,6,6,3,4,5,3,0,9,2,3,3,0,3,5,0,4,9,9,9,5,3,2,3,1,2,1,3,0,6,1,5,0,9,9,5,7,0,9,4,7,2,6,9,3,4,8,4,5,4,3,9,1,3,1,9,9,3,9,5,5,5,3,1,8,7,9,2,4,3,1,8,7,5,3,7,5,5,7,3,8,3,8,0,5,6,4,4,9,1,3,6,7,9,3,3,8,9,9,2,5,9,7,1,2,5,6,4,7,6,8,1,8,7,0,8,3,7,3,4,2,7,3,8,8,6,5,4,8,5,3,5,1,9,9,6,1,4,8,0,6,2,3,6,7,5,2,0,1,8,0,6,0,5,6,6,3,9,9,5,9,6,9,8,7,7,1,7,2,1,8,9,1,7,5,5,6,0,5,7,8,3,3,2,1,9,5,5,6,6,1,7,9,1,6,2,9,6,1,6,2,1,4,4,2,8,9,1,0,7,1,5,6,9,9,6,6,5,9,7,5,2,0,2,1,1,4,4,5,5,5,4,1,8,9,1,7,8,8,6,2,2,8,8,6,5,7,8,2,6,0,4,4,4,9,0,3,7,6,2,3,1,1,7,5,7,9,7,5,0,8,2,0,2,3,5,2,6,9,0,7,8,5,6,6,4,2,7,4,8,2,1,2,1,5,2,1,5,7,5,7,0,7,0,2,4,2,1,9,1,7,2,5,5,1,8,5,8,6,1,0,3,1,7,9,3,8,1,9,3,6,8,3,6,7,2,2,2,2,6,8,3,3,1,2,2,3,0,4,6,1,1,8,7,6,8,3,9,9,6,3,6,3,6,6,0,8,2,0,5,8,8,6,0,0,9,9,6,3,8,7,1,6,7,2,1,3,5,7,2,4,3,5,1,0,9,3,6,1,9,8,7,6,5,8,9,4,0,2,7,4,3,7,0,9,3,2,5,1,4,1,3,1,4,6,7,9,4,7,0,9,5,9,4,6,6,8,1,4,2,4,7,0,9,8,2,3,8,7,9,4,1,8,2,5,9,5,8,5,8,0,6,3,2,4,5,6,6,9,2,6,2,9,8,1,8,2,6,9,5,3,1,9,4,9,2,1,0,5,0,5,9,1,9,7,5,9,7,9,1,4,4,0,1,9,6,3,0,5,5,1,9,3,6,6,8,1,9,9,3,1,3,6,6,2,5,7,5,7,0,9,9,5,0,1,4,8,7,3,8,8,6,2,0,3,7,4,9,7,1,8,0,5,4,0,0,4,0,3,1,5,4,7,0,1,0,5,2,4,7,8,0,2,1,5,4,9,5,9,6,1,4,9,1,6,5,2,4,8,5,5,9,5,0,1,2,2,1,9,9,7,6,5,8,6,4,2,2,7,7,7,3,2,9,2,2,9,2,6,4,2,9,2,2,8,0,7,6,6,5,5,6,3,7,4,8,7,9,2,6,1,7,7,8,6,6,2,1,9,1,0,0,9,7,4,1,5,7,3,4,0,3,0,5,1,4,0,5,2,6,2,1,3,8,8,7,2,6,2,6,8,9,5,0,3,7,8,6,4,8,5,1,2,1,1,2,4,7,5,0,2,8,2,8,9,0,8,1,6,9,0,7,5,8,2,9,2,5,2,3,6,0,3,8,4,4,3,6,9,1,3,8,6,1,0,9,2,7,1,7,5,9,9,4,5,0,0,0,9,2,7,8,6,4,1,8,8,9,9,0,5,6,3,8,3,1,6,8,3,3,9,3,9,2,5,9,7,1,1,2,3,4,8,6,7,2,5,5,4,7,2,8,6,1,1,1,9,0,2,9,2,1,7,2,6,3,0,2,7,7,7,8,6,7,7,3,3,2,3,6,0,7,3,4,8,3,6,7,0,9,0,8,4,5,8,9,9,1,1,0,2,7,3,8,8,2,4,4,6,8,9,1,6,7,8,7,6,0,7,3,2,8,8,9,8,7,7,1,6,3,0,4,5,3,3,6,6,0,1,6,4,0,8,3,4,8,2,4,8,2,4,4,3,4,9,2,6,6,2,2,5,4,0,0,3,7,8,8,2,1,6,2,9,6,2,0,3,2,6,1,1,4,6,6,0,6,7,9,4,4,4,4,4,5,1,8,6,2,6,2,3,7,5,9,9,0,3,2,5,7,8,3,3,9,3,8,7,5,0,6,2,3,7,4,7,5,9,3,6,9,4,4,8,4,4,1,4,2,2,7,2,0,3,8,3,4,0,7,8,4,0,2,1,5,1,8,9,4,6,7,2,4,8,3,5,5,9,3,2,4,6,1,8,6,2,5,9,1,2,9,0,5,0,4,8,8,9,0,7,0,8,0,4,3,0,9,7,7,5,0,2,0,1,7,6,6,8,2,3,1,2,6,9,9,7,6,5,4,6,9,7,2,7,6,1,0,5,0,4,7,2,2,1,2,5,3,7,2,0,2,6,2,9,1,1,2,4,5,4,4,1,0,0,7,3,0,5,8,5,2,5,6,2,9,7,4,9,5,8,6,6,4,4,9,8,4,4,3,9,9,0,2,3,5,9,3,9,2,7,1,1,5,0,3,1,8,7,9,9,7,2,9,0,3,6,9,9,5,5,3,4,7,7,7,0,2,5,4,4,8,8,2,1,0,2,6,2,9,9,8,1,7,2,2,1,0,6,1,6,3,8,1,0,4,7,2,3,0,4,2,3,1,0,2,5,5,7,9,5,2,7,1,7,7,7,3,4,4,0,1,8,6,8,9,3,4,7,6,9,6,4,4,2,2,6,2,2,9,9,9,5,8,6,0,1,1,7,1,7,1,0,6,3,3,9,9,4,5,6,6,7,9,2,1,5,2,9,7,9,1,9,0,4,7,6,9,9,7,1,2,6,8,2,4,7,2,8,8,6,3,7,1,2,5,5,7,6,3,6,9,0,0,5,0,1,5,5,9,1,1,0,9,3,2,4,1,9,0,8,5,0,3,6,3,1,9,9,8,8,7,1,6,9,7,0,6,1,9,8,3,1,9,6,3,9,9,2,5,2,2,0,4,9,4,9,5,3,9,6,9,6,7,7,0,0,3,2,3,6,0,6,8,4,1,8,6,4,2,9,7,6,4,9,4,3,0,0,6,7,6,8,5,4,0,3,8,3,3,2,7,5,6,3,2,2,9,9,8,2,3,7,2,5,2,4,9,1,9,0,8,5,0,6,8,9,4,8,8,7,8,5,1,4,1,6,1,7,1,8,8,1,9,5,1,1,2,5,5,8,3,7,9,7,2,7,8,4,6,8,8,9,2,9,0,7,3,9,0,8,9,9,6,9,8,3,2,6,0,7,9,5,3,5,0,1,5,9,4,1,1,0,6,5,2,3,3,8,5,8,2,3,1,2,0,0,1,8,0,7,2,9,1,6,2,7,5,0,4,7,3,5,7,2,1,1,2,8,4,2,7,5,4,4,5,6,4,9,8,2,4,3,8,0,4,5,4,9,5,1,2,5,9,1,3,1,0,7,8,1,9,7,9,7,6,6,4,4,2,0,2,4,0,9,8,1,3,4,7,9,4,2,1,0,3,4,2,0,0,9,3,3,2,5,2,2,3,9,2,4,5,3,3,6,0,3,3,5,5,4,3,5,6,7,2,9,8,4,0,0,2,4,0,6,4,2,8,9,7,0,0,0,9,3,3,9,9,0,2,8,1,8,9,1,7,4,9,4,4,9,3,4,2,7,0,6,0,8,2,6,5,9,2,8,9,6,6,7,2,4,9,6,1,8,4,8,4,2,3,2,8,1,3,7,0,6,9,8,9,5,0,4,3,4,7,2,9,0,6,3,3,9,7,2,6,7,9,6,0,1,6,6,2,2,5,3,2,6,5,3,8,6,0,0,0,9,9,7,8,2,7,6,3,4,8,5,9,5,8,5,4,3,8,0,0,4,7,3,2,0,1,3,8,9,0,4,2,5,5,9,9,8,6,2,8,1,4,5,3,9,5,4,0,4,6,1,1,4,0,0,0,1,9,5,6,6,6,1,2,8,5,0,9,9,1,5,6,2,1,4,1,8,2,5,8,7,6,7,1,6,1,6,2,2,9,8,3,7,7,5,4,6,2,6,2,4,9,0,2,9,0,2,1,1,1,4,7,9,4,8,3,3,3,0,8,5,0,9,4,5,8,8,5,6,4,9,5,7,0,6,8,2,5,4,5,0,9,9,9,0,1,8,4,3,8,6,6,9,6,5,9,8,1,1,9,7,4,8,2,6,7,0,6,2,0,6,2,7,2,5,2,9,4,8,6,1,9,6,5,6,9,1,5,9,6,8,6,6,9,1,8,7,1,4,5,3,1,3,2,0,6,0,4,3,5,3,8,7,8,6,2,5,9,8,3,6,9,8,1,0,2,1,0,4,9,7,9,2,7,6,1,4,1,2,2,0,5,4,6,2,9,9,3,9,5,3,3,8,9,0,0,3,7,8,5,5,7,8,5,5,7,8,6,5,6,1,8,8,0,7,7,6,2,4,3,3,8,7,7,2,2,4,9,4,3,7,2,1,5,7,2,2,4,5,8,3,4,3,9,4,5,0,4,8,4,2,9,0,2,5,4,1,5,5,4,5,0,6,5,7,6,6,5,1,4,8,8,7,6,6,4,3,6,7,0,4,9,0,4,4,2,0,9,4,5,4,4,2,2,0,3,5,9,4,5,0,0,5,1,5,1,3,8,0,6,8,4,0,1,7,9,5,3,4,7,1,4,0,4,6,0,4,0,6,3,9,7,3,1,6,5,0,0,2,4,1,6,0,7,4,2,0,5,4,0,0,3,8,0,8,4,4,7,7,3,7,7,5,4,5,7,9,5,2,3,4,2,4,9,1,7,7,7,1,0,1,9,0,1,5,3,5,0,4,8,7,1,5,0,1,7,0,3,9,9,2,7,5,8,0,5,0,7,6,5,1,9,0,8,1,7,8,6,8,5,2,9,9,2,7,8,9,4,3,1,3,8,4,9,4,9,4,0,1,2,7,0,4,4,3,6,0,5,3,7,3,8,6,7,4,1,2,3,3,9,5,5,0,3,6,5,6,6,6,2,9,2,0,9,8,2,1,1,4,0,9,3,3,2,7,7,0,6,0,1,0,2,9,3,8,6,9,2,7,8,0,7,4,0,2,8,8,2,8,0,4,0,3,7,8,9,4,6,0,0,7,0,9,7,5,0,1,5,5,7,4,7,4,8,5,5,9,1,0,1,9,9,1,0,6,5,0,3,6,3,6,2,2,3,7,9,9,5,1,9,9,8,2,8,6,7,8,3,1,8,1,2,3,3,6,5,5,9,7,0,0,9,7,8,8,2,5,4,6,8,3,5,3,9,5,1,3,8,1,0,4,0,6,4,8,5,9,8,6,6,5,7,4,9,9,0,4,6,9,6,6,6,2,4,8,4,8,0,6,4,0,1,4,9,8,0,4,1,6,5,8,2,7,7,4,3,6,6]"
                    },
                    {
                        "username": "ms681729",
                        "content": "this solution is working properly for all cases expect 9999999999 this case don\\'t know why help me.\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] arr, int k) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n       int sum=0;\\n        int prod=1;\\n        for(int i=arr.length-1;i>=0;i--){\\n            sum+=arr[i]*prod;\\n            prod=prod*10;\\n        }\\n        sum=sum+k;\\n\\n        while(sum!=0){\\n            list.add(sum%10);\\n            sum=sum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "ruchitakb7",
                        "content": "first it stucked at 3rd test then i changed data type to long int now it again stucked at 90 ..now what should i do?"
                    }
                ]
            },
            {
                "id": 1917431,
                "content": [
                    {
                        "username": "thisannie",
                        "content": "Back to back 3 easy problems?? HOW!?"
                    },
                    {
                        "username": "Umair9912",
                        "content": "not exactly easy tho"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "If you are not using LL then :\\n1. Use while loop till array_size > 0 || k > 0\\n2. Inside while :\\n             2.1.Use If to check weather size > 0\\n                    2.1.1Add last element of array into k\\n                   2.1.2 decrease array_size by 1. \\n              2.2.Add last element of K in your list\\n              2.3 remove last element of k\\n             \\n3. IF REQUIRED reverse your list and return \\n\\nHope This will be helpful ....."
                    },
                    {
                        "username": "aashrith_d4",
                        "content": "Easy to understand\\n"
                    },
                    {
                        "username": "simrannasrin",
                        "content": "Can anyone tell me why the code below is not working for edge cases like 9999999+1?  \\n\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        int j=0;\\n        for(int i=0; i<num.length; i++){\\n            j=j*10+num[i];\\n        }\\n\\n        int number=j+k;\\n        ArrayList<Integer> list= new ArrayList<>();\\n\\n        while(number>0){\\n            int digit=number%10;\\n            list.add(digit);\\n            number=number/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "masemune",
                        "content": "Every digit past 2^53 will start losing precision which can cause things like erroneous rounding. If you need to work with larger numbers then use `BigInt`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Adding elements from the left is must efficient. We can do that using linked list or other data structure. In python, we can use $$deque()$$  from $$collections$$. We don't need to import it in **leetcode**. Also we just need to  return this $$deque$$ and it will be accepted."
                    },
                    {
                        "username": "anand_083",
                        "content": "  this is brute force method it work properly but in 3rd case it can not give 0th index can anyone have guts to debug this solution  /\\n        int n=num.length-1;\\n       int base=1;\\n      for(int i=n;i>0;i--){\\n          base=base*10;// base mil gyi //\\n      }\\n        int sum=0;\\n// this loop give me 1000,100,10,0, as my question demand//\\n        for (int i = 0; i <n ; i++) {\\n            int temp=num[i]*base;  // 1*1000\\n            sum=sum+temp;           // 1000\\n            base=base/10;              // update base as 100\\n        }\\n        sum=sum+k+num[num.length-1];\\n// however it give sum properly include 3 rd case //\\n\\n// for printing //\\n        for (int i = n; i>=0 ; i--) {\\n            num[i]=sum%10;\\n            sum=sum/10;\\n        }\\n        return num;\\n// run this code in your local compiler  //// "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "why does this code not work for num = [9,9,9,9,9,9,9,9,9,9]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        int number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        int tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, tempnum % 10);\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@adityadewhy](/adityadewhy) nevermind, even long aint enough for the other test case ie [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "i am assuming the problem was with int data type(int too small to store that big a value)\\nhere\\'s the fix\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        long number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        long tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, (int)(tempnum % 10));\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "parth_chittora",
                        "content": "`class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       long value = num[0];\\n        List<Integer> list = new ArrayList<>();\\n        for(int i = 1;i<num.length;i++){\\n            value = value*10+num[i];\\n        }\\n        value = value+k;\\n        System.out.print(value);\\n        int dig;\\n        int i= 0;\\n        while(value>0){\\n            dig = (int)value%10;\\n            value = value/10;\\n            list.add(list.size()-i,dig);\\n            i++;\\n        }\\n        return list;\\n    }\\n} `\\nWhy is it not giving the ans for the test case 999999999"
                    },
                    {
                        "username": "takezo_shinmen",
                        "content": "AYOO guyz ,  whhats wrong eith this test case\\nnum =\\n[7,8,2,9,2,5,4,7,1,8,0,6,6,7,4,9,0,3,9,9,2,2,6,6,2,5,8,3,6,3,9,6,3,3,1,6,2,7,5,9,8,9,4,4,7,5,0,7,3,8,7,6,0,9,0,7,4,1,1,4,0,7,7,7,6,1,6,5,1,7,4,9,0,4,2,4,4,4,2,6,6,2,1,3,6,7,2,1,9,5,8,3,6,4,2,1,6,6,7,1,0,2,9,3,5,6,8,5,4,2,7,0,3,6,5,0,2,1,1,4,0,1,3,7,7,1,9,1,6,5,9,7,3,3,1,0,9,4,6,5,3,2,0,8,2,7,7,5,4,2,9,9,3,1,9,5,5,4,0,7,3,6,8,9,6,5,1,1,7,0,7,5,3,2,3,1,4,8,2,5,9,6,0,0,2,4,7,9,6,2,3,2,8,5,6,1,0,7,9,1,6,5,6,2,8,5,0,9,2,5,4,0,3,6,0,7,0,3,0,0,8,5,1,2,5,5,1,6,6,0,9,7,9,2,2,7,0,4,3,1,0,4,8,8,6,6,4,6,4,3,1,3,1,5,4,4,3,6,4,5,2,3,7,6,2,4,0,3,7,5,6,8,9,8,6,9,6,9,0,1,3,1,9,0,8,1,9,8,0,4,1,8,1,1,6,0,9,2,8,3,6,0,0,7,2,4,6,3,9,9,2,6,4,8,1,1,1,0,8,8,2,5,9,3,5,4,0,2,5,9,9,1,7,3,7,4,0,1,9,5,5,0,8,2,4,5,9,0,3,9,3,0,6,6,0,7,0,4,2,1,4,8,0,4,5,4,9,9,3,4,0,9,1,1,0,2,0,6,1,2,8,6,3,3,2,5,2,9,9,4,0,0,9,5,7,8,9,2,0,4,0,4,9,1,9,3,9,8,3,6,4,8,7,4,9,6,3,7,8,2,3,4,5,6,0,7,5,2,6,4,6,5,8,9,2,5,6,5,7,1,0,1,2,3,2,2,2,3,4,5,0,8,7,0,8,4,3,6,8,9,9,4,9,5,6,8,3,7,5,9,3,7,5,3,8,2,2,9,1,2,1,7,6,2,4,3,5,8,5,8,4,9,5,4,6,2,7,3,7,2,1,5,9,1,1,6,8,8,6,6,8,1,4,7,7,7,7,3,1,8,5,5,0,3,5,8,6,5,2,9,6,0,0,3,1,3,8,3,7,6,5,3,6,9,7,0,9,0,4,1,6,5,0,6,5,7,7,3,0,9,0,2,9,5,1,9,9,9,8,9,4,4,4,6,1,3,2,0,8,3,6,5,0,8,5,7,3,9,1,3,7,1,3,1,6,9,5,5,1,6,7,5,6,5,1,6,4,6,3,4,1,3,8,8,3,9,5,2,5,5,6,9,3,2,9,9,5,7,0,7,0,5,8,0,7,0,8,0,4,6,0,0,3,7,2,3,8,1,4,6,5,6,4,0,4,8,7,5,8,5,8,1,7,3,7,8,8,5,3,4,1,9,3,0,2,9,6,3,3,4,1,8,5,1,7,4,4,4,9,7,3,7,0,7,5,5,0,0,1,9,2,6,0,9,6,5,1,4,0,2,0,7,5,4,8,8,7,0,4,1,0,8,9,9,3,3,4,0,9,5,7,5,3,6,2,4,1,0,9,1,5,7,5,4,5,6,2,9,9,4,2,1,5,6,1,1,8,8,2,8,0,9,0,8,1,4,9,3,0,6,5,1,3,6,2,1,9,1,2,8,7,0,2,4,7,8,3,1,6,4,1,4,9,9,5,4,0,3,8,5,2,3,7,1,8,4,2,2,5,2,9,6,2,1,3,3,3,9,1,1,3,9,1,0,0,6,7,1,3,3,2,6,9,5,2,8,8,7,2,5,2,7,1,4,2,0,1,9,8,5,6,3,2,2,3,3,1,8,9,8,5,6,4,7,8,6,5,8,8,6,0,5,5,0,8,3,6,3,0,1,3,0,8,2,1,6,9,8,0,5,0,9,4,0,5,8,8,9,8,8,5,0,1,1,1,6,2,2,8,8,0,6,7,8,8,3,5,8,4,9,7,2,1,9,4,1,0,1,3,1,6,1,3,7,8,7,3,5,9,1,5,9,8,3,1,7,3,0,2,0,6,8,5,5,5,3,4,3,0,4,0,2,2,0,5,5,9,2,0,9,7,3,3,3,9,5,0,4,1,3,3,2,2,5,1,9,3,5,6,1,6,3,0,3,1,6,3,8,1,9,9,9,9,9,0,5,0,8,9,2,1,5,9,6,6,8,3,0,3,1,2,9,1,8,2,8,8,1,5,1,9,7,0,3,4,3,7,1,0,2,2,5,0,8,1,6,1,4,4,7,0,2,4,4,9,5,1,7,1,8,2,5,0,1,3,3,5,5,2,2,3,5,8,6,6,0,0,3,9,0,1,8,0,6,2,2,9,1,8,2,6,6,4,9,5,1,6,5,9,5,7,3,8,5,2,3,5,6,3,5,7,2,1,0,4,3,2,2,5,9,3,2,2,1,1,5,1,7,4,6,5,8,9,8,6,2,6,4,2,5,2,4,8,0,1,7,8,3,8,5,3,3,2,9,4,2,8,7,2,8,6,7,8,8,7,9,7,3,0,7,7,6,0,9,1,8,7,2,4,9,0,4,4,3,9,2,6,3,4,2,9,6,2,6,7,6,9,9,7,2,4,9,1,3,5,7,7,8,4,9,1,1,0,8,3,5,6,9,0,5,5,4,0,8,3,6,4,9,1,4,4,9,8,2,2,4,4,0,9,1,1,9,3,5,0,6,8,2,5,7,5,0,7,2,7,7,5,1,7,9,5,8,7,9,7,1,9,1,7,5,0,1,8,1,0,5,1,0,5,9,7,8,9,9,5,6,0,1,9,3,1,1,3,2,3,1,2,8,9,9,0,2,9,5,4,7,3,9,5,1,9,4,6,3,2,0,0,0,8,2,6,1,2,4,9,5,7,9,9,6,7,4,0,7,1,5,4,4,6,2,0,4,0,1,8,7,7,5,8,9,6,6,5,0,6,2,5,5,7,7,7,2,9,6,9,4,8,4,0,4,6,1,5,1,6,7,7,0,6,1,2,8,8,6,4,1,0,5,7,6,4,2,0,2,0,5,1,6,9,4,2,2,0,1,6,5,9,8,6,3,7,3,8,5,0,6,5,7,3,0,6,8,2,1,2,9,9,4,3,0,3,1,2,9,6,8,4,6,9,0,3,6,3,2,5,9,9,4,3,6,2,2,5,8,1,6,9,7,1,9,1,7,1,4,8,2,7,4,9,9,8,8,0,4,3,3,9,8,8,9,7,2,3,4,9,2,0,5,4,4,3,4,8,5,7,4,1,1,9,9,7,5,9,2,7,7,2,3,2,2,0,1,6,9,0,7,8,7,3,9,6,1,9,0,4,5,3,4,2,3,2,1,8,2,0,2,5,4,7,4,2,0,7,1,7,7,8,5,6,2,2,0,2,5,7,2,0,6,6,9,0,1,2,4,0,5,5,2,1,6,8,7,9,7,6,7,1,8,0,3,0,6,1,4,6,9,1,4,5,8,4,8,0,5,7,8,2,8,6,7,4,9,9,8,7,7,1,3,8,7,2,1,7,5,3,7,2,2,2,1,6,1,2,1,3,0,2,4,3,8,8,3,7,5,9,9,7,3,3,8,9,2,3,2,5,5,5,2,6,1,9,2,4,8,0,7,9,5,2,7,3,2,9,2,1,9,9,5,0,9,6,4,5,8,8,9,0,8,8,4,2,6,2,2,2,4,9,7,5,3,3,9,1,0,7,0,0,3,9,4,8,4,8,6,6,4,0,3,4,9,0,4,0,3,9,1,4,5,8,0,2,4,3,8,8,6,6,2,8,4,3,8,3,9,2,4,3,7,4,7,7,9,3,6,3,8,1,2,5,0,9,3,5,0,3,0,5,5,0,3,3,8,8,4,2,3,4,3,9,3,5,2,3,2,8,7,2,2,7,5,9,5,8,9,4,7,6,6,1,5,9,2,8,7,5,6,3,0,7,9,0,0,7,8,7,0,5,2,4,5,9,6,0,0,8,9,3,4,0,7,7,7,3,5,1,3,9,6,1,0,7,3,2,9,3,4,0,8,5,3,2,2,5,7,4,3,6,1,3,0,3,1,4,4,7,4,2,1,1,3,8,4,9,1,0,7,1,1,5,6,8,9,2,0,8,7,7,3,6,6,5,0,8,8,9,0,6,5,9,9,3,2,8,6,1,9,8,2,2,4,4,9,6,1,9,5,5,4,7,4,6,9,7,5,4,5,5,2,7,7,3,6,9,9,0,9,1,3,9,5,4,7,2,8,0,9,9,6,5,9,2,4,9,8,9,9,0,8,5,4,3,0,7,9,1,1,8,6,4,5,7,9,4,3,7,5,3,1,1,6,0,0,3,8,1,2,9,3,3,3,9,3,5,8,5,9,6,3,9,8,5,3,4,9,2,0,8,6,3,5,2,5,4,4,3,7,9,9,9,5,9,1,2,4,5,4,0,0,4,1,2,3,1,7,9,3,1,4,8,7,1,1,1,5,0,8,1,8,8,4,9,2,6,6,7,5,4,4,7,1,3,1,5,4,1,4,7,3,6,0,8,7,6,6,1,7,9,1,6,5,4,8,2,8,1,8,4,0,6,8,4,5,3,1,4,2,2,2,9,4,0,1,0,5,7,2,5,3,4,3,9,0,8,0,8,6,4,5,5,9,8,3,4,5,6,6,8,0,7,8,0,7,3,6,7,8,4,6,3,6,0,3,0,7,5,6,3,4,5,2,1,5,7,6,3,4,8,9,7,9,8,9,3,7,1,3,1,1,2,7,1,4,1,0,2,9,6,5,5,4,0,3,1,1,1,2,2,8,1,3,1,1,6,9,7,5,2,5,4,8,7,7,4,9,3,9,0,1,8,9,5,6,7,9,6,2,1,0,9,3,5,9,4,4,4,2,6,8,0,3,4,5,7,2,0,1,4,2,0,6,1,9,8,7,6,1,1,2,8,3,8,6,1,9,1,2,2,5,4,3,2,5,2,8,2,2,7,5,7,6,7,6,9,9,7,3,9,8,6,2,6,9,5,9,3,3,7,0,9,8,5,1,2,7,6,5,7,5,6,9,5,6,7,6,7,3,4,5,0,9,4,9,2,6,8,8,1,7,2,1,8,8,7,1,5,7,6,5,6,3,6,7,6,3,4,6,3,1,3,9,4,7,6,1,0,9,2,0,9,0,6,2,5,0,4,8,8,3,2,8,5,6,9,0,0,2,7,8,7,7,0,2,3,9,6,0,8,0,6,6,1,6,9,7,9,1,6,4,0,5,9,2,8,1,5,4,3,2,1,9,9,1,8,3,5,6,9,8,0,4,7,8,8,7,9,8,7,4,0,5,9,8,1,8,1,8,0,5,2,3,9,9,6,2,1,5,7,5,4,7,1,7,3,3,6,8,8,3,7,7,9,2,1,7,0,9,1,7,2,8,5,5,4,3,2,4,8,8,2,3,0,4,9,3,3,6,6,0,7,0,0,8,9,8,6,6,4,5,9,4,9,8,2,5,1,8,4,2,7,0,7,0,0,4,2,1,6,7,0,6,0,5,6,4,0,1,7,5,9,2,9,4,9,6,3,9,5,8,0,0,2,8,0,9,6,7,8,8,4,5,6,8,0,5,8,4,3,8,8,3,4,9,3,3,6,5,4,9,9,3,0,4,3,0,6,7,4,7,5,8,7,5,1,0,8,0,1,4,8,8,3,3,3,1,8,4,4,3,8,5,7,9,3,9,5,5,0,4,5,0,7,8,2,2,9,1,6,1,6,5,7,5,8,7,5,7,6,6,0,8,2,1,0,3,0,2,2,7,4,9,8,2,6,7,1,0,8,1,8,0,5,1,0,0,1,3,1,8,9,2,8,9,1,2,7,0,2,3,6,1,1,5,0,2,1,6,2,5,9,3,1,9,7,2,8,7,3,5,7,4,3,3,1,1,9,3,4,8,8,4,6,2,6,4,3,8,7,7,1,3,4,4,6,9,4,1,3,2,0,7,2,4,1,2,9,9,1,4,1,3,5,1,9,4,1,5,4,6,0,3,0,8,1,7,6,9,4,9,1,8,2,4,9,5,9,6,9,3,3,2,5,0,1,8,4,8,1,6,0,4,9,1,3,9,4,5,0,6,7,1,7,4,6,5,0,8,1,0,0,1,2,3,5,2,9,8,9,6,4,6,4,5,5,1,2,2,3,3,7,1,3,9,6,8,8,3,6,3,4,4,0,0,6,7,4,2,8,7,8,7,8,6,8,1,4,3,6,5,0,1,5,3,4,0,9,0,1,6,8,3,9,3,9,1,1,4,4,4,1,5,7,3,8,5,7,1,8,9,0,9,3,1,0,3,8,3,1,9,2,6,2,5,4,4,9,0,2,5,1,5,1,8,9,2,7,7,9,7,2,2,6,7,7,9,0,7,2,8,3,6,2,0,0,6,7,3,4,7,3,0,8,8,5,8,2,7,6,2,5,1,8,2,6,6,3,7,2,3,6,7,5,8,1,9,4,5,6,4,6,7,7,7,7,3,9,9,4,8,3,5,5,7,1,7,4,5,6,0,3,5,5,3,4,1,4,5,6,4,8,9,6,8,0,1,9,5,6,6,8,6,9,4,6,2,5,9,9,6,4,4,5,5,8,0,9,2,3,5,5,6,8,9,4,2,7,9,2,8,8,2,1,1,4,3,7,5,4,5,3,6,3,5,5,3,9,8,5,0,0,1,1,0,7,9,2,5,8,1,0,6,0,6,5,6,5,9,7,1,0,1,9,9,3,1,1,7,0,4,3,1,8,7,3,8,2,3,8,7,8,2,3,6,6,4,5,0,7,4,8,3,4,0,7,1,8,6,0,5,0,8,5,1,3,3,2,7,4,9,1,6,5,9,5,1,1,1,6,2,1,5,3,6,2,4,4,6,1,1,1,8,7,1,9,9,4,7,2,3,4,5,9,7,6,9,5,3,4,6,8,2,0,8,4,9,8,6,8,4,6,7,4,7,7,8,2,6,7,1,2,1,0,6,0,5,1,9,8,2,2,9,4,6,0,7,0,0,5,8,5,3,2,9,4,1,6,7,2,0,7,3,6,8,1,9,8,0,8,8,7,0,6,1,9,8,7,4,5,0,8,6,9,8,6,2,7,9,3,5,1,9,2,5,8,8,5,1,2,2,2,1,6,9,7,8,4,8,9,0,2,3,8,7,9,6,9,7,2,6,2,4,6,6,7,8,9,4,2,9,7,3,7,1,3,5,5,9,8,4,1,7,0,6,9,6,3,4,7,0,7,4,4,5,8,9,1,1,3,9,1,3,3,8,3,0,0,5,7,2,3,3,4,7,1,7,5,5,7,0,3,8,5,1,7,0,5,9,0,2,0,8,7,5,3,6,4,6,9,3,0,1,6,8,9,9,9,1,2,0,0,9,5,2,9,4,5,8,4,0,5,7,6,5,5,4,0,2,2,3,7,7,8,6,8,0,6,7,8,4,6,0,5,1,4,1,8,9,6,9,9,5,8,4,8,4,0,1,0,8,6,9,4,0,8,6,9,3,6,0,8,1,4,6,8,0,4,6,0,2,1,2,5,4,5,1,6,1,4,7,4,3,1,5,4,4,5,5,1,1,3,3,5,7,4,2,7,0,1,3,5,9,6,8,2,2,2,0,0,8,1,3,8,9,3,2,1,1,1,3,9,6,1,1,1,7,7,7,1,4,4,5,0,1,3,7,4,7,0,9,7,7,1,2,9,1,7,9,8,3,3,6,5,2,3,1,9,2,9,3,8,7,5,7,1,4,7,6,9,2,5,8,4,6,9,8,1,2,0,4,2,1,9,8,4,9,7,6,3,0,4,8,8,3,2,2,9,5,5,7,2,3,2,7,6,8,2,3,4,4,6,4,6,1,5,2,7,8,4,9,1,4,2,9,2,9,1,6,9,4,1,2,6,1,4,8,4,9,9,3,4,5,5,5,4,0,2,7,9,5,7,7,1,0,9,9,2,9,4,9,1,3,1,2,4,6,3,2,4,6,7,9,1,5,2,3,2,6,4,4,5,8,5,9,9,0,5,8,5,9,1,0,9,7,9,7,6,8,6,6,9,9,6,6,3,0,8,4,9,9,3,3,2,0,7,9,7,8,2,9,2,7,9,9,0,2,8,4,0,4,9,0,3,9,4,6,5,6,6,9,1,3,5,5,6,4,4,6,1,2,2,4,4,2,2,0,4,1,6,3,4,7,0,7,0,3,3,6,5,7,7,8,3,9,9,9,5,2,3,7,6,7,9,4,0,8,8,3,5,3,7,6,5,8,1,9,5,9,2,7,4,9,5,2,4,1,8,7,6,6,2,8,6,5,3,4,6,2,2,5,2,5,3,9,3,7,2,4,2,5,7,3,3,2,4,3,1,7,9,3,5,6,3,0,0,0,8,5,9,9,6,3,0,0,6,1,2,1,4,0,2,0,1,5,8,0,4,5,4,0,8,8,1,5,4,6,5,9,7,6,8,4,2,2,5,9,0,5,0,0,3,5,3,1,8,7,6,2,0,4,3,1,3,7,6,4,9,8,5,0,9,6,6,5,7,3,2,2,0,0,1,7,6,6,9,2,0,4,2,8,0,6,5,5,3,0,0,7,4,6,7,9,8,3,9,6,1,6,3,9,6,3,4,5,8,4,9,0,1,8,4,0,8,8,8,4,2,6,8,1,3,7,3,0,9,6,5,3,8,3,8,8,1,9,5,5,3,7,7,2,5,8,7,7,0,5,5,7,9,2,9,2,5,9,7,1,6,9,9,2,9,6,2,4,8,8,6,3,6,0,7,6,6,0,4,3,2,3,7,3,9,6,5,7,0,8,5,3,5,8,3,5,9,7,4,5,0,8,7,1,8,2,3,5,0,6,8,4,8,5,7,1,0,3,2,6,6,8,3,7,9,8,0,6,2,9,0,0,4,5,8,5,5,9,4,8,0,7,1,3,7,5,2,4,4,4,6,0,3,0,3,6,2,9,9,8,5,5,1,2,0,9,2,2,9,7,3,4,9,4,5,7,2,2,9,9,9,0,5,4,5,6,0,4,7,5,7,0,3,2,8,0,0,1,9,0,6,9,2,6,8,8,5,9,8,1,5,1,4,2,5,3,6,0,5,6,5,1,1,7,1,2,4,3,1,0,4,6,4,5,9,0,0,1,2,5,4,1,5,9,4,8,2,8,7,5,8,9,3,5,2,2,6,7,0,6,6,9,6,6,1,3,9,7,9,1,1,4,4,3,5,1,8,5,9,0,6,1,8,2,6,9,2,3,5,5,7,2,5,4,0,0,5,9,7,5,1,5,7,3,5,8,4,1,0,7,8,4,7,2,1,9,6,5,3,2,2,4,1,4,4,7,5,1,9,3,2,7,2,9,4,3,0,5,5,8,3,4,2,8,2,0,9,0,2,1,6,3,8,8,4,2,6,1,0,0,6,0,2,4,2,2,1,4,2,0,1,5,6,1,8,5,5,8,7,4,3,7,7,7,6,7,6,0,8,8,7,9,0,1,9,6,1,2,8,0,7,5,3,5,8,1,0,3,2,7,7,3,2,3,8,7,7,5,7,6,4,3,2,5,5,0,2,9,6,7,3,0,3,2,0,8,0,0,5,1,8,2,4,1,8,1,7,6,3,2,1,5,3,8,5,2,4,9,9,7,1,9,1,5,9,7,8,0,4,4,8,8,8,6,8,4,4,0,3,8,3,8,2,4,5,5,2,0,3,5,9,6,5,2,6,3,5,0,6,0,5,2,2,0,9,6,2,8,7,9,3,6,1,6,2,2,8,5,2,6,3,7,9,5,9,3,1,4,9,2,9,5,4,8,9,9,9,3,2,7,2,7,6,4,3,5,2,4,1,4,3,1,9,8,8,8,7,6,7,6,6,0,2,5,7,7,9,4,5,0,0,5,8,9,7,6,0,1,3,5,7,0,6,7,8,9,4,6,1,3,3,6,6,1,0,6,4,4,4,6,3,2,6,2,9,3,0,3,4,7,3,6,0,9,8,3,4,6,9,7,0,0,7,7,1,1,5,8,3,8,4,9,0,5,6,6,4,0,9,0,9,3,9,7,4,2,1,5,7,6,5,9,9,9,2,7,0,5,8,2,8,2,0,9,9,7,1,3,5,1,8,7,7,8,5,4,3,2,3,5,4,8,2,2,6,8,7,8,0,9,7,1,4,0,9,4,9,0,0,4,6,2,9,0,7,0,1,4,7,5,6,5,3,8,2,3,9,9,8,7,4,0,8,1,9,5,7,5,6,0,0,9,3,7,4,6,9,9,3,3,7,6,1,9,8,1,3,3,5,4,2,0,2,4,3,9,8,4,5,2,4,5,0,6,3,5,1,9,9,5,6,1,4,1,6,8,1,7,0,0,5,2,2,2,2,7,4,2,6,0,1,5,7,1,8,9,7,6,3,7,7,0,3,4,6,2,7,3,1,1,3,3,9,6,5,6,5,8,6,6,2,1,1,3,7,5,3,6,7,2,1,7,2,5,1,0,8,4,2,6,4,1,4,3,2,8,7,0,7,9,9,6,5,0,4,0,3,9,6,7,8,4,9,5,4,9,0,4,8,4,7,6,8,4,5,9,1,1,2,6,8,8,2,8,8,5,7,9,4,4,8,9,0,2,7,2,1,9,5,2,6,4,8,9,4,7,3,1,3,9,7,2,1,6,8,1,8,8,7,7,7,3,7,2,5,0,8,1,6,4,6,6,1,0,7,8,2,8,3,3,2,3,7,7,5,8,2,1,1,2,0,3,9,6,8,8,9,5,8,6,9,8,9,5,3,6,8,6,4,4,2,6,6,2,6,8,7,4,0,1,8,2,9,3,1,2,1,4,6,6,1,8,5,4,7,1,7,2,5,9,9,0,4,9,4,5,9,9,3,0,4,5,1,4,6,2,3,5,6,8,8,3,2,1,4,6,9,2,0,4,5,8,4,0,6,1,9,7,3,0,0,7,6,5,2,6,5,4,3,7,1,9,9,7,0,7,9,9,3,0,3,2,3,3,9,6,0,2,2,5,4,4,2,0,5,8,8,8,8,9,1,6,6,5,0,1,0,7,8,3,3,9,1,8,7,4,8,7,4,1,8,7,5,0,5,4,3,4,5,0,8,1,7,0,4,7,1,6,6,0,5,4,1,4,9,0,6,3,4,3,8,9,3,4,7,0,9,2,1,8,2,9,9,2,0,0,4,9,7,1,1,0,7,0,6,0,3,4,6,7,4,3,6,6,4,1,0,1,1,8,6,9,9,0,6,4,8,4,7,2,4,3,9,8,2,9,4,2,7,2,9,5,0,3,4,1,8,5,5,6,6,2,0,4,6,1,4,9,8,5,2,5,1,2,1,3,0,9,2,3,3,4,2,6,1,7,8,7,1,2,3,9,9,9,7,2,1,1,1,5,9,6,1,4,2,5,2,4,9,0,4,3,1,5,1,8,2,1,0,8,0,2,8,8,8,6,5,4,4,0,3,6,0,7,0,9,6,4,0,1,5,4,2,0,5,7,4,0,5,7,1,6,2,0,1,0,8,3,5,7,4,0,9,5,5,7,5,8,9,6,5,9,8,8,3,7,8,8,8,9,1,7,6,3,8,1,5,0,0,3,6,3,7,8,9,5,3,2,0,4,6,9,8,5,8,2,3,1,9,7,3,2,6,2,3,7,6,5,7,8,9,1,2,6,6,5,2,2,9,1,2,0,5,9,7,7,8,9,3,9,0,4,7,7,1,8,4,1,7,6,8,0,4,2,3,8,0,9,4,0,3,1,7,3,9,9,8,2,1,0,7,9,0,3,0,1,5,0,7,4,6,2,9,8,2,9,9,6,9,1,2,2,3,7,5,2,0,2,7,7,8,5,6,8,4,8,2,2,5,4,9,3,8,1,7,3,0,1,0,2,3,8,3,6,8,6,4,6,5,6,1,3,4,7,7,1,7,8,7,0,8,4,8,4,5,6,0,9,3,3,1,7,2,6,8,0,9,8,4,2,9,8,4,7,3,6,0,8,4,9,7,4,4,6,0,9,9,3,7,1,9,2,0,2,3,9,1,3,7,7,6,4,4,3,2,3,6,6,0,8,4,5,4,5,8,1,9,0,8,1,1,5,7,4,1,7,8,5,1,6,4,1,1,6,2,7,5,3,6,3,6,0,4,4,6,8,7,9,8,2,1,7,3,4,7,9,7,8,5,6,6,8,8,8,2,6,6,3,8,4,1,4,4,3,2,6,6,0,2,5,4,6,7,7,8,4,3,9,0,4,0,6,1,8,0,6,7,7,4,0,7,8,5,7,8,1,5,4,2,7,1,5,9,2,3,7,4,8,5,6,7,7,3,1,1,5,5,7,3,3,8,6,1,2,3,5,3,2,5,6,6,3,6,7,2,7,5,1,4,1,3,8,7,6,6,2,2,1,2,2,3,3,0,0,1,6,8,6,6,0,6,5,2,4,6,7,3,0,3,5,2,0,8,7,7,0,6,0,2,4,3,3,6,5,6,2,8,8,2,6,7,9,0,7,0,9,3,4,3,2,9,0,1,8,5,3,0,6,8,4,5,6,0,0,0,5,4,6,3,9,0,6,0,2,1,1,3,1,5,7,4,0,5,2,2,4,5,4,6,4,7,5,9,2,4,4,2,5,7,4,7,0,7,1,8,8,8,9,9,6,8,4,7,9,4,8,8,9,9,2,8,8,9,2,2,4,8,1,2,3,9,8,2,9,4,8,7,5,6,1,4,6,2,2,2,5,3,0,5,8,4,7,2,2,7,6,0,6,7,9,5,7,2,2,2,9,7,1,6,2,9,5,4,6,1,4,7,2,9,0,6,6,4,5,6,8,3,2,0,0,0,8,7,5,6,3,8,5,8,9,8,6,4,5,0,7,7,3,7,1,4,2,0,4,9,7,8,5,0,9,6,5,3,0,4,5,3,0,0,1,1,2,3,9,9,0,6,5,9,9,7,2,0,4,1,2,2,4,4,8,2,1,9,5,6,1,5,0,9,1,9,8,3,7,3,5,9,4,1,3,1,3,2,4,9,3,4,5,9,7,2,2,5,1,4,3,0,1,6,4,1,7,3,2,0,1,1,4,8,7,8,2,3,1,1,7,6,6,2,6,4,9,3,7,5,1,3,4,0,0,7,3,0,8,1,0,9,1,9,6,5,7,9,1,6,5,7,8,3,7,2,2,0,2,4,0,8,5,1,2,8,4,1,2,1,2,1,0,4,3,6,1,4,9,0,5,5,4,9,2,3,5,5,9,3,8,8,6,2,6,8,1,9,4,7,8,9,3,7,8,2,0,3,6,8,6,2,2,6,0,5,1,0,6,4,2,8,8,3,5,8,8,2,6,9,0,0,0,1,8,8,6,3,5,9,5,2,6,7,1,6,6,5,8,7,0,9,5,6,3,7,2,7,1,7,2,3,4,1,2,2,9,0,0,7,0,4,7,4,4,1,1,6,8,6,1,9,0,6,7,7,5,3,4,3,1,0,8,1,6,2,4,1,9,7,5,1,7,2,6,0,9,3,3,0,6,1,5,1,3,9,3,7,1,7,8,1,8,4,2,9,0,7,2,6,1,2,4,0,9,3,7,1,0,6,5,1,7,5,6,3,7,1,1,7,7,9,1,7,3,1,3,6,3,9,3,3,0,2,7,5,1,3,0,4,0,0,2,6,3,9,2,0,1,3,4,6,4,8,8,8,0,2,2,8,4,7,6,9,6,8,3,9,0,3,8,9,4,6,7,8,3,0,5,6,6,4,6,6,1,9,8,0,4,9,9,2,7,6,6,8,3,9,1,0,9,8,0,3,7,6,4,8,9,3,1,2,2,4,8,4,8,5,7,9,7,4,9,1,5,8,5,9,1,0,5,8,8,2,0,8,8,1,4,2,2,0,5,7,6,0,3,3,8,1,8,3,9,9,9,6,3,6,2,2,7,8,3,3,2,7,1,2,1,4,0,2,6,6,9,4,9,5,2,5,1,3,5,3,7,7,7,0,2,4,7,6,1,1,0,4,4,2,3,8,8,7,8,4,2,3,0,2,9,5,4,2,4,4,5,2,0,2,1,4,9,4,0,0,3,0,4,8,8,5,4,7,1,4,2,8,1,5,3,6,1,5,9,9,0,5,1,1,4,2,9,3,0,2,4,3,0,8,4,1,6,3,7,5,6,6,6,4,3,9,2,6,0,6,1,4,1,0,6,4,5,0,2,1,6,2,3,8,3,5,5,4,3,1,8,7,9,8,3,9,3,2,2,6,6,9,4,8,6,7,6,7,5,5,1,4,6,5,7,7,2,4,9,6,2,4,8,8,4,6,4,1,5,6,6,4,2,3,6,7,8,5,7,9,8,0,9,8,9,0,1,9,6,1,7,6,2,4,9,2,8,9,0,2,5,3,8,5,0,5,7,1,5,4,5,1,9,7,3,7,2,5,5,1,5,7,7,4,0,1,4,6,0,0,8,2,8,6,7,4,9,7,4,7,5,6,0,9,9,9,4,3,4,5,9,4,6,4,3,3,8,0,3,2,6,3,7,0,5,0,0,9,5,2,2,7,3,0,2,4,7,5,0,0,5,1,9,5,5,6,4,8,8,8,5,4,2,5,1,0,2,3,0,6,0,7,4,2,8,2,4,5,3,8,9,5,5,6,0,9,3,0,9,0,9,5,4,3,6,7,4,4,0,2,2,9,4,6,6,9,8,1,1,7,4,5,4,9,7,7,0,1,6,5,2,3,6,1,5,5,3,9,1,7,6,4,2,0,4,0,9,3,5,1,9,7,2,9,5,9,4,9,8,7,9,2,7,0,5,4,4,7,4,5,2,2,8,8,7,0,3,7,8,5,1,5,6,8,4,5,3,8,6,1,0,2,5,7,4,4,4,0,7,7,2,3,6,4,9,9,0,5,2,3,3,0,2,9,8,8,2,9,4,7,6,1,3,9,3,0,7,1,9,0,6,5,4,7,4,8,3,0,9,6,2,8,9,4,6,6,0,9,9,7,1,9,4,9,5,5,9,3,9,6,4,5,1,0,1,7,5,5,6,3,6,9,4,6,6,1,8,2,0,6,2,0,9,5,0,0,4,5,4,2,0,4,5,1,2,3,5,6,6,2,5,5,8,9,6,8,8,4,6,1,6,7,9,0,1,4,6,3,6,8,7,4,6,2,5,3,0,0,5,4,1,3,2,5,1,5,2,4,5,3,2,5,3,5,2,9,4,6,5,4,0,6,4,3,6,0,8,3,9,4,6,9,4,7,4,8,7,6,6,9,4,2,1,1,3,0,5,0,0,2,3,7,1,7,7,1,6,4,6,0,1,4,4,6,5,8,8,6,7,3,8,2,6,2,6,6,7,7,5,8,9,1,6,7,3,0,8,6,0,6,4,2,0,8,5,2,7,8,2,5,6,8,0,4,7,0,3,7,5,8,6,8,6,5,6,2,4,2,4,2,4,3,6,8,3,2,0,3,8,3,9,2,8,3,7,4,5,9,1,0,7,4,2,3,7,9,9,9,1,2,5,1,7,9,1,3,9,7,5,2,4,8,4,2,9,5,5,7,1,1,4,1,0,4,6,4,2,3,3,2,7,0,4,6,6,0,5,6,0,7,3,3,2,1,8,7,2,8,3,8,4,7,6,1,2,0,4,5,2,4,8,3,9,0,1,8,1,4,9,6,6,8,8,1,4,0,0,5,2,3,7,2,1,0,3,7,1,5,9,8,6,4,4,9,7,7,8,3,2,5,9,7,1,7,7,4,3,3,6,0,6,5,9,4,4,6,9,6,3,7,8,0,1,8,6,2,2,9,2,8,1,7,0,9,6,3,0,6,7,2,7,0,6,9,6,4,7,8,2,2,6,3,1,7,6,4,7,6,1,4,9,4,0,1,7,3,6,8,4,9,3,4,7,3,7,3,3,8,9,9,1,1,3,7,7,3,3,9,6,4,0,5,2,6,0,0,1,1,9,0,9,0,9,8,5,4,9,7,9,5,4,6,2,5,7,0,1,7,1,0,8,5,0,5,9,7,4,1,6,1,9,3,5,3,8,8,9,4,8,5,2,5,3,4,8,3,9,7,3,7,4,6,0,6,6,4,8,5,4,9,6,1,3,1,9,7,5,4,9,0,2,4,3,1,1,3,6,6,9,5,2,6,4,2,1,9,0,6,9,5,1,9,3,2,8,4,6,6,4,1,8,6,6,9,2,7,3,3,7,0,4,1,8,2,7,7,9,9,7,1,4,8,2,2,6,9,6,2,5,8,7,0,7,4,1,3,7,4,8,5,5,2,8,0,8,8,8,3,4,4,5,3,0,2,7,3,4,2,9,8,9,3,1,3,9,2,6,0,9,0,5,3,6,6,2,2,9,4,4,4,9,2,1,7,4,2,1,0,1,8,1,7,7,2,3,7,9,8,0,4,1,8,9,9,8,1,0,5,7,4,6,6,5,2,4,9,1,1,9,9,6,4,8,7,4,8,4,0,5,4,3,0,3,9,6,7,6,6,2,7,3,1,5,7,2,5,6,7,9,3,2,1,3,5,6,1,2,0,1,9,2,5,1,1,2,5,6,4,4,7,2,2,6,8,6,8,2,1,3,0,8,5,4,0,9,8,6,9,9,7,3,2,6,4,9,4,4,9,0,0,8,8,6,0,8,7,6,7,0,1,8,5,8,7,7,6,5,0,7,1,0,3,7,3,2,6,4,7,7,1,7,3,3,1,3,3,0,2,5,5,2,7,3,8,7,8,8,9,4,6,3,2,6,9,9,1,8,0,9,5,3,8,0,9,4,0,0,5,4,2,2,0,5,1,8,4,8,6,4,6,2,3,5,8,3,8,5,7,2,6,2,4,3,2,1,7,9,1,3,2,5,8,2,3,3,4,7,1,6,1,0,9,8,8,3,4,9,6,0,8,5,2,3,3,3,2,8,1,8,2,5,4,7,7,3,8,6,6,3,4,5,3,0,9,2,3,3,0,3,5,0,4,9,9,9,5,3,2,3,1,2,1,3,0,6,1,5,0,9,9,5,7,0,9,4,7,2,6,9,3,4,8,4,5,4,3,9,1,3,1,9,9,3,9,5,5,5,3,1,8,7,9,2,4,3,1,8,7,5,3,7,5,5,7,3,8,3,8,0,5,6,4,4,9,1,3,6,7,9,3,3,8,9,9,2,5,9,7,1,2,5,6,4,7,6,8,1,8,7,0,8,3,7,3,4,2,7,3,8,8,6,5,4,8,5,3,5,1,9,9,6,1,4,8,0,6,2,3,6,7,5,2,0,1,8,0,6,0,5,6,6,3,9,9,5,9,6,9,8,7,7,1,7,2,1,8,9,1,7,5,5,6,0,5,7,8,3,3,2,1,9,5,5,6,6,1,7,9,1,6,2,9,6,1,6,2,1,4,4,2,8,9,1,0,7,1,5,6,9,9,6,6,5,9,7,5,2,0,2,1,1,4,4,5,5,5,4,1,8,9,1,7,8,8,6,2,2,8,8,6,5,7,8,2,6,0,4,4,4,9,0,3,7,6,2,3,1,1,7,5,7,9,7,5,0,8,2,0,2,3,5,2,6,9,0,7,8,5,6,6,4,2,7,4,8,2,1,2,1,5,2,1,5,7,5,7,0,7,0,2,4,2,1,9,1,7,2,5,5,1,8,5,8,6,1,0,3,1,7,9,3,8,1,9,3,6,8,3,6,7,2,2,2,2,6,8,3,3,1,2,2,3,0,4,6,1,1,8,7,6,8,3,9,9,6,3,6,3,6,6,0,8,2,0,5,8,8,6,0,0,9,9,6,3,8,7,1,6,7,2,1,3,5,7,2,4,3,5,1,0,9,3,6,1,9,8,7,6,5,8,9,4,0,2,7,4,3,7,0,9,3,2,5,1,4,1,3,1,4,6,7,9,4,7,0,9,5,9,4,6,6,8,1,4,2,4,7,0,9,8,2,3,8,7,9,4,1,8,2,5,9,5,8,5,8,0,6,3,2,4,5,6,6,9,2,6,2,9,8,1,8,2,6,9,5,3,1,9,4,9,2,1,0,5,0,5,9,1,9,7,5,9,7,9,1,4,4,0,1,9,6,3,0,5,5,1,9,3,6,6,8,1,9,9,3,1,3,6,6,2,5,7,5,7,0,9,9,5,0,1,4,8,7,3,8,8,6,2,0,3,7,4,9,7,1,8,0,5,4,0,0,4,0,3,1,5,4,7,0,1,0,5,2,4,7,8,0,2,1,5,4,9,5,9,6,1,4,9,1,6,5,2,4,8,5,5,9,5,0,1,2,2,1,9,9,7,6,5,8,6,4,2,2,7,7,7,3,2,9,2,2,9,2,6,4,2,9,2,2,8,0,7,6,6,5,5,6,3,7,4,8,7,9,2,6,1,7,7,8,6,6,2,1,9,1,0,0,9,7,4,1,5,7,3,4,0,3,0,5,1,4,0,5,2,6,2,1,3,8,8,7,2,6,2,6,8,9,5,0,3,7,8,6,4,8,5,1,2,1,1,2,4,7,5,0,2,8,2,8,9,0,8,1,6,9,0,7,5,8,2,9,2,5,2,3,6,0,3,8,4,4,3,6,9,1,3,8,6,1,0,9,2,7,1,7,5,9,9,4,5,0,0,0,9,2,7,8,6,4,1,8,8,9,9,0,5,6,3,8,3,1,6,8,3,3,9,3,9,2,5,9,7,1,1,2,3,4,8,6,7,2,5,5,4,7,2,8,6,1,1,1,9,0,2,9,2,1,7,2,6,3,0,2,7,7,7,8,6,7,7,3,3,2,3,6,0,7,3,4,8,3,6,7,0,9,0,8,4,5,8,9,9,1,1,0,2,7,3,8,8,2,4,4,6,8,9,1,6,7,8,7,6,0,7,3,2,8,8,9,8,7,7,1,6,3,0,4,5,3,3,6,6,0,1,6,4,0,8,3,4,8,2,4,8,2,4,4,3,4,9,2,6,6,2,2,5,4,0,0,3,7,8,8,2,1,6,2,9,6,2,0,3,2,6,1,1,4,6,6,0,6,7,9,4,4,4,4,4,5,1,8,6,2,6,2,3,7,5,9,9,0,3,2,5,7,8,3,3,9,3,8,7,5,0,6,2,3,7,4,7,5,9,3,6,9,4,4,8,4,4,1,4,2,2,7,2,0,3,8,3,4,0,7,8,4,0,2,1,5,1,8,9,4,6,7,2,4,8,3,5,5,9,3,2,4,6,1,8,6,2,5,9,1,2,9,0,5,0,4,8,8,9,0,7,0,8,0,4,3,0,9,7,7,5,0,2,0,1,7,6,6,8,2,3,1,2,6,9,9,7,6,5,4,6,9,7,2,7,6,1,0,5,0,4,7,2,2,1,2,5,3,7,2,0,2,6,2,9,1,1,2,4,5,4,4,1,0,0,7,3,0,5,8,5,2,5,6,2,9,7,4,9,5,8,6,6,4,4,9,8,4,4,3,9,9,0,2,3,5,9,3,9,2,7,1,1,5,0,3,1,8,7,9,9,7,2,9,0,3,6,9,9,5,5,3,4,7,7,7,0,2,5,4,4,8,8,2,1,0,2,6,2,9,9,8,1,7,2,2,1,0,6,1,6,3,8,1,0,4,7,2,3,0,4,2,3,1,0,2,5,5,7,9,5,2,7,1,7,7,7,3,4,4,0,1,8,6,8,9,3,4,7,6,9,6,4,4,2,2,6,2,2,9,9,9,5,8,6,0,1,1,7,1,7,1,0,6,3,3,9,9,4,5,6,6,7,9,2,1,5,2,9,7,9,1,9,0,4,7,6,9,9,7,1,2,6,8,2,4,7,2,8,8,6,3,7,1,2,5,5,7,6,3,6,9,0,0,5,0,1,5,5,9,1,1,0,9,3,2,4,1,9,0,8,5,0,3,6,3,1,9,9,8,8,7,1,6,9,7,0,6,1,9,8,3,1,9,6,3,9,9,2,5,2,2,0,4,9,4,9,5,3,9,6,9,6,7,7,0,0,3,2,3,6,0,6,8,4,1,8,6,4,2,9,7,6,4,9,4,3,0,0,6,7,6,8,5,4,0,3,8,3,3,2,7,5,6,3,2,2,9,9,8,2,3,7,2,5,2,4,9,1,9,0,8,5,0,6,8,9,4,8,8,7,8,5,1,4,1,6,1,7,1,8,8,1,9,5,1,1,2,5,5,8,3,7,9,7,2,7,8,4,6,8,8,9,2,9,0,7,3,9,0,8,9,9,6,9,8,3,2,6,0,7,9,5,3,5,0,1,5,9,4,1,1,0,6,5,2,3,3,8,5,8,2,3,1,2,0,0,1,8,0,7,2,9,1,6,2,7,5,0,4,7,3,5,7,2,1,1,2,8,4,2,7,5,4,4,5,6,4,9,8,2,4,3,8,0,4,5,4,9,5,1,2,5,9,1,3,1,0,7,8,1,9,7,9,7,6,6,4,4,2,0,2,4,0,9,8,1,3,4,7,9,4,2,1,0,3,4,2,0,0,9,3,3,2,5,2,2,3,9,2,4,5,3,3,6,0,3,3,5,5,4,3,5,6,7,2,9,8,4,0,0,2,4,0,6,4,2,8,9,7,0,0,0,9,3,3,9,9,0,2,8,1,8,9,1,7,4,9,4,4,9,3,4,2,7,0,6,0,8,2,6,5,9,2,8,9,6,6,7,2,4,9,6,1,8,4,8,4,2,3,2,8,1,3,7,0,6,9,8,9,5,0,4,3,4,7,2,9,0,6,3,3,9,7,2,6,7,9,6,0,1,6,6,2,2,5,3,2,6,5,3,8,6,0,0,0,9,9,7,8,2,7,6,3,4,8,5,9,5,8,5,4,3,8,0,0,4,7,3,2,0,1,3,8,9,0,4,2,5,5,9,9,8,6,2,8,1,4,5,3,9,5,4,0,4,6,1,1,4,0,0,0,1,9,5,6,6,6,1,2,8,5,0,9,9,1,5,6,2,1,4,1,8,2,5,8,7,6,7,1,6,1,6,2,2,9,8,3,7,7,5,4,6,2,6,2,4,9,0,2,9,0,2,1,1,1,4,7,9,4,8,3,3,3,0,8,5,0,9,4,5,8,8,5,6,4,9,5,7,0,6,8,2,5,4,5,0,9,9,9,0,1,8,4,3,8,6,6,9,6,5,9,8,1,1,9,7,4,8,2,6,7,0,6,2,0,6,2,7,2,5,2,9,4,8,6,1,9,6,5,6,9,1,5,9,6,8,6,6,9,1,8,7,1,4,5,3,1,3,2,0,6,0,4,3,5,3,8,7,8,6,2,5,9,8,3,6,9,8,1,0,2,1,0,4,9,7,9,2,7,6,1,4,1,2,2,0,5,4,6,2,9,9,3,9,5,3,3,8,9,0,0,3,7,8,5,5,7,8,5,5,7,8,6,5,6,1,8,8,0,7,7,6,2,4,3,3,8,7,7,2,2,4,9,4,3,7,2,1,5,7,2,2,4,5,8,3,4,3,9,4,5,0,4,8,4,2,9,0,2,5,4,1,5,5,4,5,0,6,5,7,6,6,5,1,4,8,8,7,6,6,4,3,6,7,0,4,9,0,4,4,2,0,9,4,5,4,4,2,2,0,3,5,9,4,5,0,0,5,1,5,1,3,8,0,6,8,4,0,1,7,9,5,3,4,7,1,4,0,4,6,0,4,0,6,3,9,7,3,1,6,5,0,0,2,4,1,6,0,7,4,2,0,5,4,0,0,3,8,0,8,4,4,7,7,3,7,7,5,4,5,7,9,5,2,3,4,2,4,9,1,7,7,7,1,0,1,9,0,1,5,3,5,0,4,8,7,1,5,0,1,7,0,3,9,9,2,7,5,8,0,5,0,7,6,5,1,9,0,8,1,7,8,6,8,5,2,9,9,2,7,8,9,4,3,1,3,8,4,9,4,9,4,0,1,2,7,0,4,4,3,6,0,5,3,7,3,8,6,7,4,1,2,3,3,9,5,5,0,3,6,5,6,6,6,2,9,2,0,9,8,2,1,1,4,0,9,3,3,2,7,7,0,6,0,1,0,2,9,3,8,6,9,2,7,8,0,7,4,0,2,8,8,2,8,0,4,0,3,7,8,9,4,6,0,0,7,0,9,7,5,0,1,5,5,7,4,7,4,8,5,5,9,1,0,1,9,9,1,0,6,5,0,3,6,3,6,2,2,3,7,9,9,5,1,9,9,8,2,8,6,7,8,3,1,8,1,2,3,3,6,5,5,9,7,0,0,9,7,8,8,2,5,4,6,8,3,5,3,9,5,1,3,8,1,0,4,0,6,4,8,5,9,8,6,6,5,7,4,9,9,0,4,6,9,6,6,6,2,4,8,4,8,0,6,4,0,1,4,9,8,0,4,1,6,5,8,2,7,7,4,3,6,6]"
                    },
                    {
                        "username": "ms681729",
                        "content": "this solution is working properly for all cases expect 9999999999 this case don\\'t know why help me.\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] arr, int k) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n       int sum=0;\\n        int prod=1;\\n        for(int i=arr.length-1;i>=0;i--){\\n            sum+=arr[i]*prod;\\n            prod=prod*10;\\n        }\\n        sum=sum+k;\\n\\n        while(sum!=0){\\n            list.add(sum%10);\\n            sum=sum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "ruchitakb7",
                        "content": "first it stucked at 3rd test then i changed data type to long int now it again stucked at 90 ..now what should i do?"
                    }
                ]
            },
            {
                "id": 1914051,
                "content": [
                    {
                        "username": "thisannie",
                        "content": "Back to back 3 easy problems?? HOW!?"
                    },
                    {
                        "username": "Umair9912",
                        "content": "not exactly easy tho"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "If you are not using LL then :\\n1. Use while loop till array_size > 0 || k > 0\\n2. Inside while :\\n             2.1.Use If to check weather size > 0\\n                    2.1.1Add last element of array into k\\n                   2.1.2 decrease array_size by 1. \\n              2.2.Add last element of K in your list\\n              2.3 remove last element of k\\n             \\n3. IF REQUIRED reverse your list and return \\n\\nHope This will be helpful ....."
                    },
                    {
                        "username": "aashrith_d4",
                        "content": "Easy to understand\\n"
                    },
                    {
                        "username": "simrannasrin",
                        "content": "Can anyone tell me why the code below is not working for edge cases like 9999999+1?  \\n\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        int j=0;\\n        for(int i=0; i<num.length; i++){\\n            j=j*10+num[i];\\n        }\\n\\n        int number=j+k;\\n        ArrayList<Integer> list= new ArrayList<>();\\n\\n        while(number>0){\\n            int digit=number%10;\\n            list.add(digit);\\n            number=number/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "masemune",
                        "content": "Every digit past 2^53 will start losing precision which can cause things like erroneous rounding. If you need to work with larger numbers then use `BigInt`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Adding elements from the left is must efficient. We can do that using linked list or other data structure. In python, we can use $$deque()$$  from $$collections$$. We don't need to import it in **leetcode**. Also we just need to  return this $$deque$$ and it will be accepted."
                    },
                    {
                        "username": "anand_083",
                        "content": "  this is brute force method it work properly but in 3rd case it can not give 0th index can anyone have guts to debug this solution  /\\n        int n=num.length-1;\\n       int base=1;\\n      for(int i=n;i>0;i--){\\n          base=base*10;// base mil gyi //\\n      }\\n        int sum=0;\\n// this loop give me 1000,100,10,0, as my question demand//\\n        for (int i = 0; i <n ; i++) {\\n            int temp=num[i]*base;  // 1*1000\\n            sum=sum+temp;           // 1000\\n            base=base/10;              // update base as 100\\n        }\\n        sum=sum+k+num[num.length-1];\\n// however it give sum properly include 3 rd case //\\n\\n// for printing //\\n        for (int i = n; i>=0 ; i--) {\\n            num[i]=sum%10;\\n            sum=sum/10;\\n        }\\n        return num;\\n// run this code in your local compiler  //// "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "why does this code not work for num = [9,9,9,9,9,9,9,9,9,9]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        int number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        int tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, tempnum % 10);\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@adityadewhy](/adityadewhy) nevermind, even long aint enough for the other test case ie [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "i am assuming the problem was with int data type(int too small to store that big a value)\\nhere\\'s the fix\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        long number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        long tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, (int)(tempnum % 10));\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "parth_chittora",
                        "content": "`class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       long value = num[0];\\n        List<Integer> list = new ArrayList<>();\\n        for(int i = 1;i<num.length;i++){\\n            value = value*10+num[i];\\n        }\\n        value = value+k;\\n        System.out.print(value);\\n        int dig;\\n        int i= 0;\\n        while(value>0){\\n            dig = (int)value%10;\\n            value = value/10;\\n            list.add(list.size()-i,dig);\\n            i++;\\n        }\\n        return list;\\n    }\\n} `\\nWhy is it not giving the ans for the test case 999999999"
                    },
                    {
                        "username": "takezo_shinmen",
                        "content": "AYOO guyz ,  whhats wrong eith this test case\\nnum =\\n[7,8,2,9,2,5,4,7,1,8,0,6,6,7,4,9,0,3,9,9,2,2,6,6,2,5,8,3,6,3,9,6,3,3,1,6,2,7,5,9,8,9,4,4,7,5,0,7,3,8,7,6,0,9,0,7,4,1,1,4,0,7,7,7,6,1,6,5,1,7,4,9,0,4,2,4,4,4,2,6,6,2,1,3,6,7,2,1,9,5,8,3,6,4,2,1,6,6,7,1,0,2,9,3,5,6,8,5,4,2,7,0,3,6,5,0,2,1,1,4,0,1,3,7,7,1,9,1,6,5,9,7,3,3,1,0,9,4,6,5,3,2,0,8,2,7,7,5,4,2,9,9,3,1,9,5,5,4,0,7,3,6,8,9,6,5,1,1,7,0,7,5,3,2,3,1,4,8,2,5,9,6,0,0,2,4,7,9,6,2,3,2,8,5,6,1,0,7,9,1,6,5,6,2,8,5,0,9,2,5,4,0,3,6,0,7,0,3,0,0,8,5,1,2,5,5,1,6,6,0,9,7,9,2,2,7,0,4,3,1,0,4,8,8,6,6,4,6,4,3,1,3,1,5,4,4,3,6,4,5,2,3,7,6,2,4,0,3,7,5,6,8,9,8,6,9,6,9,0,1,3,1,9,0,8,1,9,8,0,4,1,8,1,1,6,0,9,2,8,3,6,0,0,7,2,4,6,3,9,9,2,6,4,8,1,1,1,0,8,8,2,5,9,3,5,4,0,2,5,9,9,1,7,3,7,4,0,1,9,5,5,0,8,2,4,5,9,0,3,9,3,0,6,6,0,7,0,4,2,1,4,8,0,4,5,4,9,9,3,4,0,9,1,1,0,2,0,6,1,2,8,6,3,3,2,5,2,9,9,4,0,0,9,5,7,8,9,2,0,4,0,4,9,1,9,3,9,8,3,6,4,8,7,4,9,6,3,7,8,2,3,4,5,6,0,7,5,2,6,4,6,5,8,9,2,5,6,5,7,1,0,1,2,3,2,2,2,3,4,5,0,8,7,0,8,4,3,6,8,9,9,4,9,5,6,8,3,7,5,9,3,7,5,3,8,2,2,9,1,2,1,7,6,2,4,3,5,8,5,8,4,9,5,4,6,2,7,3,7,2,1,5,9,1,1,6,8,8,6,6,8,1,4,7,7,7,7,3,1,8,5,5,0,3,5,8,6,5,2,9,6,0,0,3,1,3,8,3,7,6,5,3,6,9,7,0,9,0,4,1,6,5,0,6,5,7,7,3,0,9,0,2,9,5,1,9,9,9,8,9,4,4,4,6,1,3,2,0,8,3,6,5,0,8,5,7,3,9,1,3,7,1,3,1,6,9,5,5,1,6,7,5,6,5,1,6,4,6,3,4,1,3,8,8,3,9,5,2,5,5,6,9,3,2,9,9,5,7,0,7,0,5,8,0,7,0,8,0,4,6,0,0,3,7,2,3,8,1,4,6,5,6,4,0,4,8,7,5,8,5,8,1,7,3,7,8,8,5,3,4,1,9,3,0,2,9,6,3,3,4,1,8,5,1,7,4,4,4,9,7,3,7,0,7,5,5,0,0,1,9,2,6,0,9,6,5,1,4,0,2,0,7,5,4,8,8,7,0,4,1,0,8,9,9,3,3,4,0,9,5,7,5,3,6,2,4,1,0,9,1,5,7,5,4,5,6,2,9,9,4,2,1,5,6,1,1,8,8,2,8,0,9,0,8,1,4,9,3,0,6,5,1,3,6,2,1,9,1,2,8,7,0,2,4,7,8,3,1,6,4,1,4,9,9,5,4,0,3,8,5,2,3,7,1,8,4,2,2,5,2,9,6,2,1,3,3,3,9,1,1,3,9,1,0,0,6,7,1,3,3,2,6,9,5,2,8,8,7,2,5,2,7,1,4,2,0,1,9,8,5,6,3,2,2,3,3,1,8,9,8,5,6,4,7,8,6,5,8,8,6,0,5,5,0,8,3,6,3,0,1,3,0,8,2,1,6,9,8,0,5,0,9,4,0,5,8,8,9,8,8,5,0,1,1,1,6,2,2,8,8,0,6,7,8,8,3,5,8,4,9,7,2,1,9,4,1,0,1,3,1,6,1,3,7,8,7,3,5,9,1,5,9,8,3,1,7,3,0,2,0,6,8,5,5,5,3,4,3,0,4,0,2,2,0,5,5,9,2,0,9,7,3,3,3,9,5,0,4,1,3,3,2,2,5,1,9,3,5,6,1,6,3,0,3,1,6,3,8,1,9,9,9,9,9,0,5,0,8,9,2,1,5,9,6,6,8,3,0,3,1,2,9,1,8,2,8,8,1,5,1,9,7,0,3,4,3,7,1,0,2,2,5,0,8,1,6,1,4,4,7,0,2,4,4,9,5,1,7,1,8,2,5,0,1,3,3,5,5,2,2,3,5,8,6,6,0,0,3,9,0,1,8,0,6,2,2,9,1,8,2,6,6,4,9,5,1,6,5,9,5,7,3,8,5,2,3,5,6,3,5,7,2,1,0,4,3,2,2,5,9,3,2,2,1,1,5,1,7,4,6,5,8,9,8,6,2,6,4,2,5,2,4,8,0,1,7,8,3,8,5,3,3,2,9,4,2,8,7,2,8,6,7,8,8,7,9,7,3,0,7,7,6,0,9,1,8,7,2,4,9,0,4,4,3,9,2,6,3,4,2,9,6,2,6,7,6,9,9,7,2,4,9,1,3,5,7,7,8,4,9,1,1,0,8,3,5,6,9,0,5,5,4,0,8,3,6,4,9,1,4,4,9,8,2,2,4,4,0,9,1,1,9,3,5,0,6,8,2,5,7,5,0,7,2,7,7,5,1,7,9,5,8,7,9,7,1,9,1,7,5,0,1,8,1,0,5,1,0,5,9,7,8,9,9,5,6,0,1,9,3,1,1,3,2,3,1,2,8,9,9,0,2,9,5,4,7,3,9,5,1,9,4,6,3,2,0,0,0,8,2,6,1,2,4,9,5,7,9,9,6,7,4,0,7,1,5,4,4,6,2,0,4,0,1,8,7,7,5,8,9,6,6,5,0,6,2,5,5,7,7,7,2,9,6,9,4,8,4,0,4,6,1,5,1,6,7,7,0,6,1,2,8,8,6,4,1,0,5,7,6,4,2,0,2,0,5,1,6,9,4,2,2,0,1,6,5,9,8,6,3,7,3,8,5,0,6,5,7,3,0,6,8,2,1,2,9,9,4,3,0,3,1,2,9,6,8,4,6,9,0,3,6,3,2,5,9,9,4,3,6,2,2,5,8,1,6,9,7,1,9,1,7,1,4,8,2,7,4,9,9,8,8,0,4,3,3,9,8,8,9,7,2,3,4,9,2,0,5,4,4,3,4,8,5,7,4,1,1,9,9,7,5,9,2,7,7,2,3,2,2,0,1,6,9,0,7,8,7,3,9,6,1,9,0,4,5,3,4,2,3,2,1,8,2,0,2,5,4,7,4,2,0,7,1,7,7,8,5,6,2,2,0,2,5,7,2,0,6,6,9,0,1,2,4,0,5,5,2,1,6,8,7,9,7,6,7,1,8,0,3,0,6,1,4,6,9,1,4,5,8,4,8,0,5,7,8,2,8,6,7,4,9,9,8,7,7,1,3,8,7,2,1,7,5,3,7,2,2,2,1,6,1,2,1,3,0,2,4,3,8,8,3,7,5,9,9,7,3,3,8,9,2,3,2,5,5,5,2,6,1,9,2,4,8,0,7,9,5,2,7,3,2,9,2,1,9,9,5,0,9,6,4,5,8,8,9,0,8,8,4,2,6,2,2,2,4,9,7,5,3,3,9,1,0,7,0,0,3,9,4,8,4,8,6,6,4,0,3,4,9,0,4,0,3,9,1,4,5,8,0,2,4,3,8,8,6,6,2,8,4,3,8,3,9,2,4,3,7,4,7,7,9,3,6,3,8,1,2,5,0,9,3,5,0,3,0,5,5,0,3,3,8,8,4,2,3,4,3,9,3,5,2,3,2,8,7,2,2,7,5,9,5,8,9,4,7,6,6,1,5,9,2,8,7,5,6,3,0,7,9,0,0,7,8,7,0,5,2,4,5,9,6,0,0,8,9,3,4,0,7,7,7,3,5,1,3,9,6,1,0,7,3,2,9,3,4,0,8,5,3,2,2,5,7,4,3,6,1,3,0,3,1,4,4,7,4,2,1,1,3,8,4,9,1,0,7,1,1,5,6,8,9,2,0,8,7,7,3,6,6,5,0,8,8,9,0,6,5,9,9,3,2,8,6,1,9,8,2,2,4,4,9,6,1,9,5,5,4,7,4,6,9,7,5,4,5,5,2,7,7,3,6,9,9,0,9,1,3,9,5,4,7,2,8,0,9,9,6,5,9,2,4,9,8,9,9,0,8,5,4,3,0,7,9,1,1,8,6,4,5,7,9,4,3,7,5,3,1,1,6,0,0,3,8,1,2,9,3,3,3,9,3,5,8,5,9,6,3,9,8,5,3,4,9,2,0,8,6,3,5,2,5,4,4,3,7,9,9,9,5,9,1,2,4,5,4,0,0,4,1,2,3,1,7,9,3,1,4,8,7,1,1,1,5,0,8,1,8,8,4,9,2,6,6,7,5,4,4,7,1,3,1,5,4,1,4,7,3,6,0,8,7,6,6,1,7,9,1,6,5,4,8,2,8,1,8,4,0,6,8,4,5,3,1,4,2,2,2,9,4,0,1,0,5,7,2,5,3,4,3,9,0,8,0,8,6,4,5,5,9,8,3,4,5,6,6,8,0,7,8,0,7,3,6,7,8,4,6,3,6,0,3,0,7,5,6,3,4,5,2,1,5,7,6,3,4,8,9,7,9,8,9,3,7,1,3,1,1,2,7,1,4,1,0,2,9,6,5,5,4,0,3,1,1,1,2,2,8,1,3,1,1,6,9,7,5,2,5,4,8,7,7,4,9,3,9,0,1,8,9,5,6,7,9,6,2,1,0,9,3,5,9,4,4,4,2,6,8,0,3,4,5,7,2,0,1,4,2,0,6,1,9,8,7,6,1,1,2,8,3,8,6,1,9,1,2,2,5,4,3,2,5,2,8,2,2,7,5,7,6,7,6,9,9,7,3,9,8,6,2,6,9,5,9,3,3,7,0,9,8,5,1,2,7,6,5,7,5,6,9,5,6,7,6,7,3,4,5,0,9,4,9,2,6,8,8,1,7,2,1,8,8,7,1,5,7,6,5,6,3,6,7,6,3,4,6,3,1,3,9,4,7,6,1,0,9,2,0,9,0,6,2,5,0,4,8,8,3,2,8,5,6,9,0,0,2,7,8,7,7,0,2,3,9,6,0,8,0,6,6,1,6,9,7,9,1,6,4,0,5,9,2,8,1,5,4,3,2,1,9,9,1,8,3,5,6,9,8,0,4,7,8,8,7,9,8,7,4,0,5,9,8,1,8,1,8,0,5,2,3,9,9,6,2,1,5,7,5,4,7,1,7,3,3,6,8,8,3,7,7,9,2,1,7,0,9,1,7,2,8,5,5,4,3,2,4,8,8,2,3,0,4,9,3,3,6,6,0,7,0,0,8,9,8,6,6,4,5,9,4,9,8,2,5,1,8,4,2,7,0,7,0,0,4,2,1,6,7,0,6,0,5,6,4,0,1,7,5,9,2,9,4,9,6,3,9,5,8,0,0,2,8,0,9,6,7,8,8,4,5,6,8,0,5,8,4,3,8,8,3,4,9,3,3,6,5,4,9,9,3,0,4,3,0,6,7,4,7,5,8,7,5,1,0,8,0,1,4,8,8,3,3,3,1,8,4,4,3,8,5,7,9,3,9,5,5,0,4,5,0,7,8,2,2,9,1,6,1,6,5,7,5,8,7,5,7,6,6,0,8,2,1,0,3,0,2,2,7,4,9,8,2,6,7,1,0,8,1,8,0,5,1,0,0,1,3,1,8,9,2,8,9,1,2,7,0,2,3,6,1,1,5,0,2,1,6,2,5,9,3,1,9,7,2,8,7,3,5,7,4,3,3,1,1,9,3,4,8,8,4,6,2,6,4,3,8,7,7,1,3,4,4,6,9,4,1,3,2,0,7,2,4,1,2,9,9,1,4,1,3,5,1,9,4,1,5,4,6,0,3,0,8,1,7,6,9,4,9,1,8,2,4,9,5,9,6,9,3,3,2,5,0,1,8,4,8,1,6,0,4,9,1,3,9,4,5,0,6,7,1,7,4,6,5,0,8,1,0,0,1,2,3,5,2,9,8,9,6,4,6,4,5,5,1,2,2,3,3,7,1,3,9,6,8,8,3,6,3,4,4,0,0,6,7,4,2,8,7,8,7,8,6,8,1,4,3,6,5,0,1,5,3,4,0,9,0,1,6,8,3,9,3,9,1,1,4,4,4,1,5,7,3,8,5,7,1,8,9,0,9,3,1,0,3,8,3,1,9,2,6,2,5,4,4,9,0,2,5,1,5,1,8,9,2,7,7,9,7,2,2,6,7,7,9,0,7,2,8,3,6,2,0,0,6,7,3,4,7,3,0,8,8,5,8,2,7,6,2,5,1,8,2,6,6,3,7,2,3,6,7,5,8,1,9,4,5,6,4,6,7,7,7,7,3,9,9,4,8,3,5,5,7,1,7,4,5,6,0,3,5,5,3,4,1,4,5,6,4,8,9,6,8,0,1,9,5,6,6,8,6,9,4,6,2,5,9,9,6,4,4,5,5,8,0,9,2,3,5,5,6,8,9,4,2,7,9,2,8,8,2,1,1,4,3,7,5,4,5,3,6,3,5,5,3,9,8,5,0,0,1,1,0,7,9,2,5,8,1,0,6,0,6,5,6,5,9,7,1,0,1,9,9,3,1,1,7,0,4,3,1,8,7,3,8,2,3,8,7,8,2,3,6,6,4,5,0,7,4,8,3,4,0,7,1,8,6,0,5,0,8,5,1,3,3,2,7,4,9,1,6,5,9,5,1,1,1,6,2,1,5,3,6,2,4,4,6,1,1,1,8,7,1,9,9,4,7,2,3,4,5,9,7,6,9,5,3,4,6,8,2,0,8,4,9,8,6,8,4,6,7,4,7,7,8,2,6,7,1,2,1,0,6,0,5,1,9,8,2,2,9,4,6,0,7,0,0,5,8,5,3,2,9,4,1,6,7,2,0,7,3,6,8,1,9,8,0,8,8,7,0,6,1,9,8,7,4,5,0,8,6,9,8,6,2,7,9,3,5,1,9,2,5,8,8,5,1,2,2,2,1,6,9,7,8,4,8,9,0,2,3,8,7,9,6,9,7,2,6,2,4,6,6,7,8,9,4,2,9,7,3,7,1,3,5,5,9,8,4,1,7,0,6,9,6,3,4,7,0,7,4,4,5,8,9,1,1,3,9,1,3,3,8,3,0,0,5,7,2,3,3,4,7,1,7,5,5,7,0,3,8,5,1,7,0,5,9,0,2,0,8,7,5,3,6,4,6,9,3,0,1,6,8,9,9,9,1,2,0,0,9,5,2,9,4,5,8,4,0,5,7,6,5,5,4,0,2,2,3,7,7,8,6,8,0,6,7,8,4,6,0,5,1,4,1,8,9,6,9,9,5,8,4,8,4,0,1,0,8,6,9,4,0,8,6,9,3,6,0,8,1,4,6,8,0,4,6,0,2,1,2,5,4,5,1,6,1,4,7,4,3,1,5,4,4,5,5,1,1,3,3,5,7,4,2,7,0,1,3,5,9,6,8,2,2,2,0,0,8,1,3,8,9,3,2,1,1,1,3,9,6,1,1,1,7,7,7,1,4,4,5,0,1,3,7,4,7,0,9,7,7,1,2,9,1,7,9,8,3,3,6,5,2,3,1,9,2,9,3,8,7,5,7,1,4,7,6,9,2,5,8,4,6,9,8,1,2,0,4,2,1,9,8,4,9,7,6,3,0,4,8,8,3,2,2,9,5,5,7,2,3,2,7,6,8,2,3,4,4,6,4,6,1,5,2,7,8,4,9,1,4,2,9,2,9,1,6,9,4,1,2,6,1,4,8,4,9,9,3,4,5,5,5,4,0,2,7,9,5,7,7,1,0,9,9,2,9,4,9,1,3,1,2,4,6,3,2,4,6,7,9,1,5,2,3,2,6,4,4,5,8,5,9,9,0,5,8,5,9,1,0,9,7,9,7,6,8,6,6,9,9,6,6,3,0,8,4,9,9,3,3,2,0,7,9,7,8,2,9,2,7,9,9,0,2,8,4,0,4,9,0,3,9,4,6,5,6,6,9,1,3,5,5,6,4,4,6,1,2,2,4,4,2,2,0,4,1,6,3,4,7,0,7,0,3,3,6,5,7,7,8,3,9,9,9,5,2,3,7,6,7,9,4,0,8,8,3,5,3,7,6,5,8,1,9,5,9,2,7,4,9,5,2,4,1,8,7,6,6,2,8,6,5,3,4,6,2,2,5,2,5,3,9,3,7,2,4,2,5,7,3,3,2,4,3,1,7,9,3,5,6,3,0,0,0,8,5,9,9,6,3,0,0,6,1,2,1,4,0,2,0,1,5,8,0,4,5,4,0,8,8,1,5,4,6,5,9,7,6,8,4,2,2,5,9,0,5,0,0,3,5,3,1,8,7,6,2,0,4,3,1,3,7,6,4,9,8,5,0,9,6,6,5,7,3,2,2,0,0,1,7,6,6,9,2,0,4,2,8,0,6,5,5,3,0,0,7,4,6,7,9,8,3,9,6,1,6,3,9,6,3,4,5,8,4,9,0,1,8,4,0,8,8,8,4,2,6,8,1,3,7,3,0,9,6,5,3,8,3,8,8,1,9,5,5,3,7,7,2,5,8,7,7,0,5,5,7,9,2,9,2,5,9,7,1,6,9,9,2,9,6,2,4,8,8,6,3,6,0,7,6,6,0,4,3,2,3,7,3,9,6,5,7,0,8,5,3,5,8,3,5,9,7,4,5,0,8,7,1,8,2,3,5,0,6,8,4,8,5,7,1,0,3,2,6,6,8,3,7,9,8,0,6,2,9,0,0,4,5,8,5,5,9,4,8,0,7,1,3,7,5,2,4,4,4,6,0,3,0,3,6,2,9,9,8,5,5,1,2,0,9,2,2,9,7,3,4,9,4,5,7,2,2,9,9,9,0,5,4,5,6,0,4,7,5,7,0,3,2,8,0,0,1,9,0,6,9,2,6,8,8,5,9,8,1,5,1,4,2,5,3,6,0,5,6,5,1,1,7,1,2,4,3,1,0,4,6,4,5,9,0,0,1,2,5,4,1,5,9,4,8,2,8,7,5,8,9,3,5,2,2,6,7,0,6,6,9,6,6,1,3,9,7,9,1,1,4,4,3,5,1,8,5,9,0,6,1,8,2,6,9,2,3,5,5,7,2,5,4,0,0,5,9,7,5,1,5,7,3,5,8,4,1,0,7,8,4,7,2,1,9,6,5,3,2,2,4,1,4,4,7,5,1,9,3,2,7,2,9,4,3,0,5,5,8,3,4,2,8,2,0,9,0,2,1,6,3,8,8,4,2,6,1,0,0,6,0,2,4,2,2,1,4,2,0,1,5,6,1,8,5,5,8,7,4,3,7,7,7,6,7,6,0,8,8,7,9,0,1,9,6,1,2,8,0,7,5,3,5,8,1,0,3,2,7,7,3,2,3,8,7,7,5,7,6,4,3,2,5,5,0,2,9,6,7,3,0,3,2,0,8,0,0,5,1,8,2,4,1,8,1,7,6,3,2,1,5,3,8,5,2,4,9,9,7,1,9,1,5,9,7,8,0,4,4,8,8,8,6,8,4,4,0,3,8,3,8,2,4,5,5,2,0,3,5,9,6,5,2,6,3,5,0,6,0,5,2,2,0,9,6,2,8,7,9,3,6,1,6,2,2,8,5,2,6,3,7,9,5,9,3,1,4,9,2,9,5,4,8,9,9,9,3,2,7,2,7,6,4,3,5,2,4,1,4,3,1,9,8,8,8,7,6,7,6,6,0,2,5,7,7,9,4,5,0,0,5,8,9,7,6,0,1,3,5,7,0,6,7,8,9,4,6,1,3,3,6,6,1,0,6,4,4,4,6,3,2,6,2,9,3,0,3,4,7,3,6,0,9,8,3,4,6,9,7,0,0,7,7,1,1,5,8,3,8,4,9,0,5,6,6,4,0,9,0,9,3,9,7,4,2,1,5,7,6,5,9,9,9,2,7,0,5,8,2,8,2,0,9,9,7,1,3,5,1,8,7,7,8,5,4,3,2,3,5,4,8,2,2,6,8,7,8,0,9,7,1,4,0,9,4,9,0,0,4,6,2,9,0,7,0,1,4,7,5,6,5,3,8,2,3,9,9,8,7,4,0,8,1,9,5,7,5,6,0,0,9,3,7,4,6,9,9,3,3,7,6,1,9,8,1,3,3,5,4,2,0,2,4,3,9,8,4,5,2,4,5,0,6,3,5,1,9,9,5,6,1,4,1,6,8,1,7,0,0,5,2,2,2,2,7,4,2,6,0,1,5,7,1,8,9,7,6,3,7,7,0,3,4,6,2,7,3,1,1,3,3,9,6,5,6,5,8,6,6,2,1,1,3,7,5,3,6,7,2,1,7,2,5,1,0,8,4,2,6,4,1,4,3,2,8,7,0,7,9,9,6,5,0,4,0,3,9,6,7,8,4,9,5,4,9,0,4,8,4,7,6,8,4,5,9,1,1,2,6,8,8,2,8,8,5,7,9,4,4,8,9,0,2,7,2,1,9,5,2,6,4,8,9,4,7,3,1,3,9,7,2,1,6,8,1,8,8,7,7,7,3,7,2,5,0,8,1,6,4,6,6,1,0,7,8,2,8,3,3,2,3,7,7,5,8,2,1,1,2,0,3,9,6,8,8,9,5,8,6,9,8,9,5,3,6,8,6,4,4,2,6,6,2,6,8,7,4,0,1,8,2,9,3,1,2,1,4,6,6,1,8,5,4,7,1,7,2,5,9,9,0,4,9,4,5,9,9,3,0,4,5,1,4,6,2,3,5,6,8,8,3,2,1,4,6,9,2,0,4,5,8,4,0,6,1,9,7,3,0,0,7,6,5,2,6,5,4,3,7,1,9,9,7,0,7,9,9,3,0,3,2,3,3,9,6,0,2,2,5,4,4,2,0,5,8,8,8,8,9,1,6,6,5,0,1,0,7,8,3,3,9,1,8,7,4,8,7,4,1,8,7,5,0,5,4,3,4,5,0,8,1,7,0,4,7,1,6,6,0,5,4,1,4,9,0,6,3,4,3,8,9,3,4,7,0,9,2,1,8,2,9,9,2,0,0,4,9,7,1,1,0,7,0,6,0,3,4,6,7,4,3,6,6,4,1,0,1,1,8,6,9,9,0,6,4,8,4,7,2,4,3,9,8,2,9,4,2,7,2,9,5,0,3,4,1,8,5,5,6,6,2,0,4,6,1,4,9,8,5,2,5,1,2,1,3,0,9,2,3,3,4,2,6,1,7,8,7,1,2,3,9,9,9,7,2,1,1,1,5,9,6,1,4,2,5,2,4,9,0,4,3,1,5,1,8,2,1,0,8,0,2,8,8,8,6,5,4,4,0,3,6,0,7,0,9,6,4,0,1,5,4,2,0,5,7,4,0,5,7,1,6,2,0,1,0,8,3,5,7,4,0,9,5,5,7,5,8,9,6,5,9,8,8,3,7,8,8,8,9,1,7,6,3,8,1,5,0,0,3,6,3,7,8,9,5,3,2,0,4,6,9,8,5,8,2,3,1,9,7,3,2,6,2,3,7,6,5,7,8,9,1,2,6,6,5,2,2,9,1,2,0,5,9,7,7,8,9,3,9,0,4,7,7,1,8,4,1,7,6,8,0,4,2,3,8,0,9,4,0,3,1,7,3,9,9,8,2,1,0,7,9,0,3,0,1,5,0,7,4,6,2,9,8,2,9,9,6,9,1,2,2,3,7,5,2,0,2,7,7,8,5,6,8,4,8,2,2,5,4,9,3,8,1,7,3,0,1,0,2,3,8,3,6,8,6,4,6,5,6,1,3,4,7,7,1,7,8,7,0,8,4,8,4,5,6,0,9,3,3,1,7,2,6,8,0,9,8,4,2,9,8,4,7,3,6,0,8,4,9,7,4,4,6,0,9,9,3,7,1,9,2,0,2,3,9,1,3,7,7,6,4,4,3,2,3,6,6,0,8,4,5,4,5,8,1,9,0,8,1,1,5,7,4,1,7,8,5,1,6,4,1,1,6,2,7,5,3,6,3,6,0,4,4,6,8,7,9,8,2,1,7,3,4,7,9,7,8,5,6,6,8,8,8,2,6,6,3,8,4,1,4,4,3,2,6,6,0,2,5,4,6,7,7,8,4,3,9,0,4,0,6,1,8,0,6,7,7,4,0,7,8,5,7,8,1,5,4,2,7,1,5,9,2,3,7,4,8,5,6,7,7,3,1,1,5,5,7,3,3,8,6,1,2,3,5,3,2,5,6,6,3,6,7,2,7,5,1,4,1,3,8,7,6,6,2,2,1,2,2,3,3,0,0,1,6,8,6,6,0,6,5,2,4,6,7,3,0,3,5,2,0,8,7,7,0,6,0,2,4,3,3,6,5,6,2,8,8,2,6,7,9,0,7,0,9,3,4,3,2,9,0,1,8,5,3,0,6,8,4,5,6,0,0,0,5,4,6,3,9,0,6,0,2,1,1,3,1,5,7,4,0,5,2,2,4,5,4,6,4,7,5,9,2,4,4,2,5,7,4,7,0,7,1,8,8,8,9,9,6,8,4,7,9,4,8,8,9,9,2,8,8,9,2,2,4,8,1,2,3,9,8,2,9,4,8,7,5,6,1,4,6,2,2,2,5,3,0,5,8,4,7,2,2,7,6,0,6,7,9,5,7,2,2,2,9,7,1,6,2,9,5,4,6,1,4,7,2,9,0,6,6,4,5,6,8,3,2,0,0,0,8,7,5,6,3,8,5,8,9,8,6,4,5,0,7,7,3,7,1,4,2,0,4,9,7,8,5,0,9,6,5,3,0,4,5,3,0,0,1,1,2,3,9,9,0,6,5,9,9,7,2,0,4,1,2,2,4,4,8,2,1,9,5,6,1,5,0,9,1,9,8,3,7,3,5,9,4,1,3,1,3,2,4,9,3,4,5,9,7,2,2,5,1,4,3,0,1,6,4,1,7,3,2,0,1,1,4,8,7,8,2,3,1,1,7,6,6,2,6,4,9,3,7,5,1,3,4,0,0,7,3,0,8,1,0,9,1,9,6,5,7,9,1,6,5,7,8,3,7,2,2,0,2,4,0,8,5,1,2,8,4,1,2,1,2,1,0,4,3,6,1,4,9,0,5,5,4,9,2,3,5,5,9,3,8,8,6,2,6,8,1,9,4,7,8,9,3,7,8,2,0,3,6,8,6,2,2,6,0,5,1,0,6,4,2,8,8,3,5,8,8,2,6,9,0,0,0,1,8,8,6,3,5,9,5,2,6,7,1,6,6,5,8,7,0,9,5,6,3,7,2,7,1,7,2,3,4,1,2,2,9,0,0,7,0,4,7,4,4,1,1,6,8,6,1,9,0,6,7,7,5,3,4,3,1,0,8,1,6,2,4,1,9,7,5,1,7,2,6,0,9,3,3,0,6,1,5,1,3,9,3,7,1,7,8,1,8,4,2,9,0,7,2,6,1,2,4,0,9,3,7,1,0,6,5,1,7,5,6,3,7,1,1,7,7,9,1,7,3,1,3,6,3,9,3,3,0,2,7,5,1,3,0,4,0,0,2,6,3,9,2,0,1,3,4,6,4,8,8,8,0,2,2,8,4,7,6,9,6,8,3,9,0,3,8,9,4,6,7,8,3,0,5,6,6,4,6,6,1,9,8,0,4,9,9,2,7,6,6,8,3,9,1,0,9,8,0,3,7,6,4,8,9,3,1,2,2,4,8,4,8,5,7,9,7,4,9,1,5,8,5,9,1,0,5,8,8,2,0,8,8,1,4,2,2,0,5,7,6,0,3,3,8,1,8,3,9,9,9,6,3,6,2,2,7,8,3,3,2,7,1,2,1,4,0,2,6,6,9,4,9,5,2,5,1,3,5,3,7,7,7,0,2,4,7,6,1,1,0,4,4,2,3,8,8,7,8,4,2,3,0,2,9,5,4,2,4,4,5,2,0,2,1,4,9,4,0,0,3,0,4,8,8,5,4,7,1,4,2,8,1,5,3,6,1,5,9,9,0,5,1,1,4,2,9,3,0,2,4,3,0,8,4,1,6,3,7,5,6,6,6,4,3,9,2,6,0,6,1,4,1,0,6,4,5,0,2,1,6,2,3,8,3,5,5,4,3,1,8,7,9,8,3,9,3,2,2,6,6,9,4,8,6,7,6,7,5,5,1,4,6,5,7,7,2,4,9,6,2,4,8,8,4,6,4,1,5,6,6,4,2,3,6,7,8,5,7,9,8,0,9,8,9,0,1,9,6,1,7,6,2,4,9,2,8,9,0,2,5,3,8,5,0,5,7,1,5,4,5,1,9,7,3,7,2,5,5,1,5,7,7,4,0,1,4,6,0,0,8,2,8,6,7,4,9,7,4,7,5,6,0,9,9,9,4,3,4,5,9,4,6,4,3,3,8,0,3,2,6,3,7,0,5,0,0,9,5,2,2,7,3,0,2,4,7,5,0,0,5,1,9,5,5,6,4,8,8,8,5,4,2,5,1,0,2,3,0,6,0,7,4,2,8,2,4,5,3,8,9,5,5,6,0,9,3,0,9,0,9,5,4,3,6,7,4,4,0,2,2,9,4,6,6,9,8,1,1,7,4,5,4,9,7,7,0,1,6,5,2,3,6,1,5,5,3,9,1,7,6,4,2,0,4,0,9,3,5,1,9,7,2,9,5,9,4,9,8,7,9,2,7,0,5,4,4,7,4,5,2,2,8,8,7,0,3,7,8,5,1,5,6,8,4,5,3,8,6,1,0,2,5,7,4,4,4,0,7,7,2,3,6,4,9,9,0,5,2,3,3,0,2,9,8,8,2,9,4,7,6,1,3,9,3,0,7,1,9,0,6,5,4,7,4,8,3,0,9,6,2,8,9,4,6,6,0,9,9,7,1,9,4,9,5,5,9,3,9,6,4,5,1,0,1,7,5,5,6,3,6,9,4,6,6,1,8,2,0,6,2,0,9,5,0,0,4,5,4,2,0,4,5,1,2,3,5,6,6,2,5,5,8,9,6,8,8,4,6,1,6,7,9,0,1,4,6,3,6,8,7,4,6,2,5,3,0,0,5,4,1,3,2,5,1,5,2,4,5,3,2,5,3,5,2,9,4,6,5,4,0,6,4,3,6,0,8,3,9,4,6,9,4,7,4,8,7,6,6,9,4,2,1,1,3,0,5,0,0,2,3,7,1,7,7,1,6,4,6,0,1,4,4,6,5,8,8,6,7,3,8,2,6,2,6,6,7,7,5,8,9,1,6,7,3,0,8,6,0,6,4,2,0,8,5,2,7,8,2,5,6,8,0,4,7,0,3,7,5,8,6,8,6,5,6,2,4,2,4,2,4,3,6,8,3,2,0,3,8,3,9,2,8,3,7,4,5,9,1,0,7,4,2,3,7,9,9,9,1,2,5,1,7,9,1,3,9,7,5,2,4,8,4,2,9,5,5,7,1,1,4,1,0,4,6,4,2,3,3,2,7,0,4,6,6,0,5,6,0,7,3,3,2,1,8,7,2,8,3,8,4,7,6,1,2,0,4,5,2,4,8,3,9,0,1,8,1,4,9,6,6,8,8,1,4,0,0,5,2,3,7,2,1,0,3,7,1,5,9,8,6,4,4,9,7,7,8,3,2,5,9,7,1,7,7,4,3,3,6,0,6,5,9,4,4,6,9,6,3,7,8,0,1,8,6,2,2,9,2,8,1,7,0,9,6,3,0,6,7,2,7,0,6,9,6,4,7,8,2,2,6,3,1,7,6,4,7,6,1,4,9,4,0,1,7,3,6,8,4,9,3,4,7,3,7,3,3,8,9,9,1,1,3,7,7,3,3,9,6,4,0,5,2,6,0,0,1,1,9,0,9,0,9,8,5,4,9,7,9,5,4,6,2,5,7,0,1,7,1,0,8,5,0,5,9,7,4,1,6,1,9,3,5,3,8,8,9,4,8,5,2,5,3,4,8,3,9,7,3,7,4,6,0,6,6,4,8,5,4,9,6,1,3,1,9,7,5,4,9,0,2,4,3,1,1,3,6,6,9,5,2,6,4,2,1,9,0,6,9,5,1,9,3,2,8,4,6,6,4,1,8,6,6,9,2,7,3,3,7,0,4,1,8,2,7,7,9,9,7,1,4,8,2,2,6,9,6,2,5,8,7,0,7,4,1,3,7,4,8,5,5,2,8,0,8,8,8,3,4,4,5,3,0,2,7,3,4,2,9,8,9,3,1,3,9,2,6,0,9,0,5,3,6,6,2,2,9,4,4,4,9,2,1,7,4,2,1,0,1,8,1,7,7,2,3,7,9,8,0,4,1,8,9,9,8,1,0,5,7,4,6,6,5,2,4,9,1,1,9,9,6,4,8,7,4,8,4,0,5,4,3,0,3,9,6,7,6,6,2,7,3,1,5,7,2,5,6,7,9,3,2,1,3,5,6,1,2,0,1,9,2,5,1,1,2,5,6,4,4,7,2,2,6,8,6,8,2,1,3,0,8,5,4,0,9,8,6,9,9,7,3,2,6,4,9,4,4,9,0,0,8,8,6,0,8,7,6,7,0,1,8,5,8,7,7,6,5,0,7,1,0,3,7,3,2,6,4,7,7,1,7,3,3,1,3,3,0,2,5,5,2,7,3,8,7,8,8,9,4,6,3,2,6,9,9,1,8,0,9,5,3,8,0,9,4,0,0,5,4,2,2,0,5,1,8,4,8,6,4,6,2,3,5,8,3,8,5,7,2,6,2,4,3,2,1,7,9,1,3,2,5,8,2,3,3,4,7,1,6,1,0,9,8,8,3,4,9,6,0,8,5,2,3,3,3,2,8,1,8,2,5,4,7,7,3,8,6,6,3,4,5,3,0,9,2,3,3,0,3,5,0,4,9,9,9,5,3,2,3,1,2,1,3,0,6,1,5,0,9,9,5,7,0,9,4,7,2,6,9,3,4,8,4,5,4,3,9,1,3,1,9,9,3,9,5,5,5,3,1,8,7,9,2,4,3,1,8,7,5,3,7,5,5,7,3,8,3,8,0,5,6,4,4,9,1,3,6,7,9,3,3,8,9,9,2,5,9,7,1,2,5,6,4,7,6,8,1,8,7,0,8,3,7,3,4,2,7,3,8,8,6,5,4,8,5,3,5,1,9,9,6,1,4,8,0,6,2,3,6,7,5,2,0,1,8,0,6,0,5,6,6,3,9,9,5,9,6,9,8,7,7,1,7,2,1,8,9,1,7,5,5,6,0,5,7,8,3,3,2,1,9,5,5,6,6,1,7,9,1,6,2,9,6,1,6,2,1,4,4,2,8,9,1,0,7,1,5,6,9,9,6,6,5,9,7,5,2,0,2,1,1,4,4,5,5,5,4,1,8,9,1,7,8,8,6,2,2,8,8,6,5,7,8,2,6,0,4,4,4,9,0,3,7,6,2,3,1,1,7,5,7,9,7,5,0,8,2,0,2,3,5,2,6,9,0,7,8,5,6,6,4,2,7,4,8,2,1,2,1,5,2,1,5,7,5,7,0,7,0,2,4,2,1,9,1,7,2,5,5,1,8,5,8,6,1,0,3,1,7,9,3,8,1,9,3,6,8,3,6,7,2,2,2,2,6,8,3,3,1,2,2,3,0,4,6,1,1,8,7,6,8,3,9,9,6,3,6,3,6,6,0,8,2,0,5,8,8,6,0,0,9,9,6,3,8,7,1,6,7,2,1,3,5,7,2,4,3,5,1,0,9,3,6,1,9,8,7,6,5,8,9,4,0,2,7,4,3,7,0,9,3,2,5,1,4,1,3,1,4,6,7,9,4,7,0,9,5,9,4,6,6,8,1,4,2,4,7,0,9,8,2,3,8,7,9,4,1,8,2,5,9,5,8,5,8,0,6,3,2,4,5,6,6,9,2,6,2,9,8,1,8,2,6,9,5,3,1,9,4,9,2,1,0,5,0,5,9,1,9,7,5,9,7,9,1,4,4,0,1,9,6,3,0,5,5,1,9,3,6,6,8,1,9,9,3,1,3,6,6,2,5,7,5,7,0,9,9,5,0,1,4,8,7,3,8,8,6,2,0,3,7,4,9,7,1,8,0,5,4,0,0,4,0,3,1,5,4,7,0,1,0,5,2,4,7,8,0,2,1,5,4,9,5,9,6,1,4,9,1,6,5,2,4,8,5,5,9,5,0,1,2,2,1,9,9,7,6,5,8,6,4,2,2,7,7,7,3,2,9,2,2,9,2,6,4,2,9,2,2,8,0,7,6,6,5,5,6,3,7,4,8,7,9,2,6,1,7,7,8,6,6,2,1,9,1,0,0,9,7,4,1,5,7,3,4,0,3,0,5,1,4,0,5,2,6,2,1,3,8,8,7,2,6,2,6,8,9,5,0,3,7,8,6,4,8,5,1,2,1,1,2,4,7,5,0,2,8,2,8,9,0,8,1,6,9,0,7,5,8,2,9,2,5,2,3,6,0,3,8,4,4,3,6,9,1,3,8,6,1,0,9,2,7,1,7,5,9,9,4,5,0,0,0,9,2,7,8,6,4,1,8,8,9,9,0,5,6,3,8,3,1,6,8,3,3,9,3,9,2,5,9,7,1,1,2,3,4,8,6,7,2,5,5,4,7,2,8,6,1,1,1,9,0,2,9,2,1,7,2,6,3,0,2,7,7,7,8,6,7,7,3,3,2,3,6,0,7,3,4,8,3,6,7,0,9,0,8,4,5,8,9,9,1,1,0,2,7,3,8,8,2,4,4,6,8,9,1,6,7,8,7,6,0,7,3,2,8,8,9,8,7,7,1,6,3,0,4,5,3,3,6,6,0,1,6,4,0,8,3,4,8,2,4,8,2,4,4,3,4,9,2,6,6,2,2,5,4,0,0,3,7,8,8,2,1,6,2,9,6,2,0,3,2,6,1,1,4,6,6,0,6,7,9,4,4,4,4,4,5,1,8,6,2,6,2,3,7,5,9,9,0,3,2,5,7,8,3,3,9,3,8,7,5,0,6,2,3,7,4,7,5,9,3,6,9,4,4,8,4,4,1,4,2,2,7,2,0,3,8,3,4,0,7,8,4,0,2,1,5,1,8,9,4,6,7,2,4,8,3,5,5,9,3,2,4,6,1,8,6,2,5,9,1,2,9,0,5,0,4,8,8,9,0,7,0,8,0,4,3,0,9,7,7,5,0,2,0,1,7,6,6,8,2,3,1,2,6,9,9,7,6,5,4,6,9,7,2,7,6,1,0,5,0,4,7,2,2,1,2,5,3,7,2,0,2,6,2,9,1,1,2,4,5,4,4,1,0,0,7,3,0,5,8,5,2,5,6,2,9,7,4,9,5,8,6,6,4,4,9,8,4,4,3,9,9,0,2,3,5,9,3,9,2,7,1,1,5,0,3,1,8,7,9,9,7,2,9,0,3,6,9,9,5,5,3,4,7,7,7,0,2,5,4,4,8,8,2,1,0,2,6,2,9,9,8,1,7,2,2,1,0,6,1,6,3,8,1,0,4,7,2,3,0,4,2,3,1,0,2,5,5,7,9,5,2,7,1,7,7,7,3,4,4,0,1,8,6,8,9,3,4,7,6,9,6,4,4,2,2,6,2,2,9,9,9,5,8,6,0,1,1,7,1,7,1,0,6,3,3,9,9,4,5,6,6,7,9,2,1,5,2,9,7,9,1,9,0,4,7,6,9,9,7,1,2,6,8,2,4,7,2,8,8,6,3,7,1,2,5,5,7,6,3,6,9,0,0,5,0,1,5,5,9,1,1,0,9,3,2,4,1,9,0,8,5,0,3,6,3,1,9,9,8,8,7,1,6,9,7,0,6,1,9,8,3,1,9,6,3,9,9,2,5,2,2,0,4,9,4,9,5,3,9,6,9,6,7,7,0,0,3,2,3,6,0,6,8,4,1,8,6,4,2,9,7,6,4,9,4,3,0,0,6,7,6,8,5,4,0,3,8,3,3,2,7,5,6,3,2,2,9,9,8,2,3,7,2,5,2,4,9,1,9,0,8,5,0,6,8,9,4,8,8,7,8,5,1,4,1,6,1,7,1,8,8,1,9,5,1,1,2,5,5,8,3,7,9,7,2,7,8,4,6,8,8,9,2,9,0,7,3,9,0,8,9,9,6,9,8,3,2,6,0,7,9,5,3,5,0,1,5,9,4,1,1,0,6,5,2,3,3,8,5,8,2,3,1,2,0,0,1,8,0,7,2,9,1,6,2,7,5,0,4,7,3,5,7,2,1,1,2,8,4,2,7,5,4,4,5,6,4,9,8,2,4,3,8,0,4,5,4,9,5,1,2,5,9,1,3,1,0,7,8,1,9,7,9,7,6,6,4,4,2,0,2,4,0,9,8,1,3,4,7,9,4,2,1,0,3,4,2,0,0,9,3,3,2,5,2,2,3,9,2,4,5,3,3,6,0,3,3,5,5,4,3,5,6,7,2,9,8,4,0,0,2,4,0,6,4,2,8,9,7,0,0,0,9,3,3,9,9,0,2,8,1,8,9,1,7,4,9,4,4,9,3,4,2,7,0,6,0,8,2,6,5,9,2,8,9,6,6,7,2,4,9,6,1,8,4,8,4,2,3,2,8,1,3,7,0,6,9,8,9,5,0,4,3,4,7,2,9,0,6,3,3,9,7,2,6,7,9,6,0,1,6,6,2,2,5,3,2,6,5,3,8,6,0,0,0,9,9,7,8,2,7,6,3,4,8,5,9,5,8,5,4,3,8,0,0,4,7,3,2,0,1,3,8,9,0,4,2,5,5,9,9,8,6,2,8,1,4,5,3,9,5,4,0,4,6,1,1,4,0,0,0,1,9,5,6,6,6,1,2,8,5,0,9,9,1,5,6,2,1,4,1,8,2,5,8,7,6,7,1,6,1,6,2,2,9,8,3,7,7,5,4,6,2,6,2,4,9,0,2,9,0,2,1,1,1,4,7,9,4,8,3,3,3,0,8,5,0,9,4,5,8,8,5,6,4,9,5,7,0,6,8,2,5,4,5,0,9,9,9,0,1,8,4,3,8,6,6,9,6,5,9,8,1,1,9,7,4,8,2,6,7,0,6,2,0,6,2,7,2,5,2,9,4,8,6,1,9,6,5,6,9,1,5,9,6,8,6,6,9,1,8,7,1,4,5,3,1,3,2,0,6,0,4,3,5,3,8,7,8,6,2,5,9,8,3,6,9,8,1,0,2,1,0,4,9,7,9,2,7,6,1,4,1,2,2,0,5,4,6,2,9,9,3,9,5,3,3,8,9,0,0,3,7,8,5,5,7,8,5,5,7,8,6,5,6,1,8,8,0,7,7,6,2,4,3,3,8,7,7,2,2,4,9,4,3,7,2,1,5,7,2,2,4,5,8,3,4,3,9,4,5,0,4,8,4,2,9,0,2,5,4,1,5,5,4,5,0,6,5,7,6,6,5,1,4,8,8,7,6,6,4,3,6,7,0,4,9,0,4,4,2,0,9,4,5,4,4,2,2,0,3,5,9,4,5,0,0,5,1,5,1,3,8,0,6,8,4,0,1,7,9,5,3,4,7,1,4,0,4,6,0,4,0,6,3,9,7,3,1,6,5,0,0,2,4,1,6,0,7,4,2,0,5,4,0,0,3,8,0,8,4,4,7,7,3,7,7,5,4,5,7,9,5,2,3,4,2,4,9,1,7,7,7,1,0,1,9,0,1,5,3,5,0,4,8,7,1,5,0,1,7,0,3,9,9,2,7,5,8,0,5,0,7,6,5,1,9,0,8,1,7,8,6,8,5,2,9,9,2,7,8,9,4,3,1,3,8,4,9,4,9,4,0,1,2,7,0,4,4,3,6,0,5,3,7,3,8,6,7,4,1,2,3,3,9,5,5,0,3,6,5,6,6,6,2,9,2,0,9,8,2,1,1,4,0,9,3,3,2,7,7,0,6,0,1,0,2,9,3,8,6,9,2,7,8,0,7,4,0,2,8,8,2,8,0,4,0,3,7,8,9,4,6,0,0,7,0,9,7,5,0,1,5,5,7,4,7,4,8,5,5,9,1,0,1,9,9,1,0,6,5,0,3,6,3,6,2,2,3,7,9,9,5,1,9,9,8,2,8,6,7,8,3,1,8,1,2,3,3,6,5,5,9,7,0,0,9,7,8,8,2,5,4,6,8,3,5,3,9,5,1,3,8,1,0,4,0,6,4,8,5,9,8,6,6,5,7,4,9,9,0,4,6,9,6,6,6,2,4,8,4,8,0,6,4,0,1,4,9,8,0,4,1,6,5,8,2,7,7,4,3,6,6]"
                    },
                    {
                        "username": "ms681729",
                        "content": "this solution is working properly for all cases expect 9999999999 this case don\\'t know why help me.\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] arr, int k) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n       int sum=0;\\n        int prod=1;\\n        for(int i=arr.length-1;i>=0;i--){\\n            sum+=arr[i]*prod;\\n            prod=prod*10;\\n        }\\n        sum=sum+k;\\n\\n        while(sum!=0){\\n            list.add(sum%10);\\n            sum=sum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "ruchitakb7",
                        "content": "first it stucked at 3rd test then i changed data type to long int now it again stucked at 90 ..now what should i do?"
                    }
                ]
            },
            {
                "id": 1859302,
                "content": [
                    {
                        "username": "thisannie",
                        "content": "Back to back 3 easy problems?? HOW!?"
                    },
                    {
                        "username": "Umair9912",
                        "content": "not exactly easy tho"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "If you are not using LL then :\\n1. Use while loop till array_size > 0 || k > 0\\n2. Inside while :\\n             2.1.Use If to check weather size > 0\\n                    2.1.1Add last element of array into k\\n                   2.1.2 decrease array_size by 1. \\n              2.2.Add last element of K in your list\\n              2.3 remove last element of k\\n             \\n3. IF REQUIRED reverse your list and return \\n\\nHope This will be helpful ....."
                    },
                    {
                        "username": "aashrith_d4",
                        "content": "Easy to understand\\n"
                    },
                    {
                        "username": "simrannasrin",
                        "content": "Can anyone tell me why the code below is not working for edge cases like 9999999+1?  \\n\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        int j=0;\\n        for(int i=0; i<num.length; i++){\\n            j=j*10+num[i];\\n        }\\n\\n        int number=j+k;\\n        ArrayList<Integer> list= new ArrayList<>();\\n\\n        while(number>0){\\n            int digit=number%10;\\n            list.add(digit);\\n            number=number/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "masemune",
                        "content": "Every digit past 2^53 will start losing precision which can cause things like erroneous rounding. If you need to work with larger numbers then use `BigInt`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Adding elements from the left is must efficient. We can do that using linked list or other data structure. In python, we can use $$deque()$$  from $$collections$$. We don't need to import it in **leetcode**. Also we just need to  return this $$deque$$ and it will be accepted."
                    },
                    {
                        "username": "anand_083",
                        "content": "  this is brute force method it work properly but in 3rd case it can not give 0th index can anyone have guts to debug this solution  /\\n        int n=num.length-1;\\n       int base=1;\\n      for(int i=n;i>0;i--){\\n          base=base*10;// base mil gyi //\\n      }\\n        int sum=0;\\n// this loop give me 1000,100,10,0, as my question demand//\\n        for (int i = 0; i <n ; i++) {\\n            int temp=num[i]*base;  // 1*1000\\n            sum=sum+temp;           // 1000\\n            base=base/10;              // update base as 100\\n        }\\n        sum=sum+k+num[num.length-1];\\n// however it give sum properly include 3 rd case //\\n\\n// for printing //\\n        for (int i = n; i>=0 ; i--) {\\n            num[i]=sum%10;\\n            sum=sum/10;\\n        }\\n        return num;\\n// run this code in your local compiler  //// "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "why does this code not work for num = [9,9,9,9,9,9,9,9,9,9]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        int number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        int tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, tempnum % 10);\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@adityadewhy](/adityadewhy) nevermind, even long aint enough for the other test case ie [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "i am assuming the problem was with int data type(int too small to store that big a value)\\nhere\\'s the fix\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        long number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        long tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, (int)(tempnum % 10));\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "parth_chittora",
                        "content": "`class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       long value = num[0];\\n        List<Integer> list = new ArrayList<>();\\n        for(int i = 1;i<num.length;i++){\\n            value = value*10+num[i];\\n        }\\n        value = value+k;\\n        System.out.print(value);\\n        int dig;\\n        int i= 0;\\n        while(value>0){\\n            dig = (int)value%10;\\n            value = value/10;\\n            list.add(list.size()-i,dig);\\n            i++;\\n        }\\n        return list;\\n    }\\n} `\\nWhy is it not giving the ans for the test case 999999999"
                    },
                    {
                        "username": "takezo_shinmen",
                        "content": "AYOO guyz ,  whhats wrong eith this test case\\nnum =\\n[7,8,2,9,2,5,4,7,1,8,0,6,6,7,4,9,0,3,9,9,2,2,6,6,2,5,8,3,6,3,9,6,3,3,1,6,2,7,5,9,8,9,4,4,7,5,0,7,3,8,7,6,0,9,0,7,4,1,1,4,0,7,7,7,6,1,6,5,1,7,4,9,0,4,2,4,4,4,2,6,6,2,1,3,6,7,2,1,9,5,8,3,6,4,2,1,6,6,7,1,0,2,9,3,5,6,8,5,4,2,7,0,3,6,5,0,2,1,1,4,0,1,3,7,7,1,9,1,6,5,9,7,3,3,1,0,9,4,6,5,3,2,0,8,2,7,7,5,4,2,9,9,3,1,9,5,5,4,0,7,3,6,8,9,6,5,1,1,7,0,7,5,3,2,3,1,4,8,2,5,9,6,0,0,2,4,7,9,6,2,3,2,8,5,6,1,0,7,9,1,6,5,6,2,8,5,0,9,2,5,4,0,3,6,0,7,0,3,0,0,8,5,1,2,5,5,1,6,6,0,9,7,9,2,2,7,0,4,3,1,0,4,8,8,6,6,4,6,4,3,1,3,1,5,4,4,3,6,4,5,2,3,7,6,2,4,0,3,7,5,6,8,9,8,6,9,6,9,0,1,3,1,9,0,8,1,9,8,0,4,1,8,1,1,6,0,9,2,8,3,6,0,0,7,2,4,6,3,9,9,2,6,4,8,1,1,1,0,8,8,2,5,9,3,5,4,0,2,5,9,9,1,7,3,7,4,0,1,9,5,5,0,8,2,4,5,9,0,3,9,3,0,6,6,0,7,0,4,2,1,4,8,0,4,5,4,9,9,3,4,0,9,1,1,0,2,0,6,1,2,8,6,3,3,2,5,2,9,9,4,0,0,9,5,7,8,9,2,0,4,0,4,9,1,9,3,9,8,3,6,4,8,7,4,9,6,3,7,8,2,3,4,5,6,0,7,5,2,6,4,6,5,8,9,2,5,6,5,7,1,0,1,2,3,2,2,2,3,4,5,0,8,7,0,8,4,3,6,8,9,9,4,9,5,6,8,3,7,5,9,3,7,5,3,8,2,2,9,1,2,1,7,6,2,4,3,5,8,5,8,4,9,5,4,6,2,7,3,7,2,1,5,9,1,1,6,8,8,6,6,8,1,4,7,7,7,7,3,1,8,5,5,0,3,5,8,6,5,2,9,6,0,0,3,1,3,8,3,7,6,5,3,6,9,7,0,9,0,4,1,6,5,0,6,5,7,7,3,0,9,0,2,9,5,1,9,9,9,8,9,4,4,4,6,1,3,2,0,8,3,6,5,0,8,5,7,3,9,1,3,7,1,3,1,6,9,5,5,1,6,7,5,6,5,1,6,4,6,3,4,1,3,8,8,3,9,5,2,5,5,6,9,3,2,9,9,5,7,0,7,0,5,8,0,7,0,8,0,4,6,0,0,3,7,2,3,8,1,4,6,5,6,4,0,4,8,7,5,8,5,8,1,7,3,7,8,8,5,3,4,1,9,3,0,2,9,6,3,3,4,1,8,5,1,7,4,4,4,9,7,3,7,0,7,5,5,0,0,1,9,2,6,0,9,6,5,1,4,0,2,0,7,5,4,8,8,7,0,4,1,0,8,9,9,3,3,4,0,9,5,7,5,3,6,2,4,1,0,9,1,5,7,5,4,5,6,2,9,9,4,2,1,5,6,1,1,8,8,2,8,0,9,0,8,1,4,9,3,0,6,5,1,3,6,2,1,9,1,2,8,7,0,2,4,7,8,3,1,6,4,1,4,9,9,5,4,0,3,8,5,2,3,7,1,8,4,2,2,5,2,9,6,2,1,3,3,3,9,1,1,3,9,1,0,0,6,7,1,3,3,2,6,9,5,2,8,8,7,2,5,2,7,1,4,2,0,1,9,8,5,6,3,2,2,3,3,1,8,9,8,5,6,4,7,8,6,5,8,8,6,0,5,5,0,8,3,6,3,0,1,3,0,8,2,1,6,9,8,0,5,0,9,4,0,5,8,8,9,8,8,5,0,1,1,1,6,2,2,8,8,0,6,7,8,8,3,5,8,4,9,7,2,1,9,4,1,0,1,3,1,6,1,3,7,8,7,3,5,9,1,5,9,8,3,1,7,3,0,2,0,6,8,5,5,5,3,4,3,0,4,0,2,2,0,5,5,9,2,0,9,7,3,3,3,9,5,0,4,1,3,3,2,2,5,1,9,3,5,6,1,6,3,0,3,1,6,3,8,1,9,9,9,9,9,0,5,0,8,9,2,1,5,9,6,6,8,3,0,3,1,2,9,1,8,2,8,8,1,5,1,9,7,0,3,4,3,7,1,0,2,2,5,0,8,1,6,1,4,4,7,0,2,4,4,9,5,1,7,1,8,2,5,0,1,3,3,5,5,2,2,3,5,8,6,6,0,0,3,9,0,1,8,0,6,2,2,9,1,8,2,6,6,4,9,5,1,6,5,9,5,7,3,8,5,2,3,5,6,3,5,7,2,1,0,4,3,2,2,5,9,3,2,2,1,1,5,1,7,4,6,5,8,9,8,6,2,6,4,2,5,2,4,8,0,1,7,8,3,8,5,3,3,2,9,4,2,8,7,2,8,6,7,8,8,7,9,7,3,0,7,7,6,0,9,1,8,7,2,4,9,0,4,4,3,9,2,6,3,4,2,9,6,2,6,7,6,9,9,7,2,4,9,1,3,5,7,7,8,4,9,1,1,0,8,3,5,6,9,0,5,5,4,0,8,3,6,4,9,1,4,4,9,8,2,2,4,4,0,9,1,1,9,3,5,0,6,8,2,5,7,5,0,7,2,7,7,5,1,7,9,5,8,7,9,7,1,9,1,7,5,0,1,8,1,0,5,1,0,5,9,7,8,9,9,5,6,0,1,9,3,1,1,3,2,3,1,2,8,9,9,0,2,9,5,4,7,3,9,5,1,9,4,6,3,2,0,0,0,8,2,6,1,2,4,9,5,7,9,9,6,7,4,0,7,1,5,4,4,6,2,0,4,0,1,8,7,7,5,8,9,6,6,5,0,6,2,5,5,7,7,7,2,9,6,9,4,8,4,0,4,6,1,5,1,6,7,7,0,6,1,2,8,8,6,4,1,0,5,7,6,4,2,0,2,0,5,1,6,9,4,2,2,0,1,6,5,9,8,6,3,7,3,8,5,0,6,5,7,3,0,6,8,2,1,2,9,9,4,3,0,3,1,2,9,6,8,4,6,9,0,3,6,3,2,5,9,9,4,3,6,2,2,5,8,1,6,9,7,1,9,1,7,1,4,8,2,7,4,9,9,8,8,0,4,3,3,9,8,8,9,7,2,3,4,9,2,0,5,4,4,3,4,8,5,7,4,1,1,9,9,7,5,9,2,7,7,2,3,2,2,0,1,6,9,0,7,8,7,3,9,6,1,9,0,4,5,3,4,2,3,2,1,8,2,0,2,5,4,7,4,2,0,7,1,7,7,8,5,6,2,2,0,2,5,7,2,0,6,6,9,0,1,2,4,0,5,5,2,1,6,8,7,9,7,6,7,1,8,0,3,0,6,1,4,6,9,1,4,5,8,4,8,0,5,7,8,2,8,6,7,4,9,9,8,7,7,1,3,8,7,2,1,7,5,3,7,2,2,2,1,6,1,2,1,3,0,2,4,3,8,8,3,7,5,9,9,7,3,3,8,9,2,3,2,5,5,5,2,6,1,9,2,4,8,0,7,9,5,2,7,3,2,9,2,1,9,9,5,0,9,6,4,5,8,8,9,0,8,8,4,2,6,2,2,2,4,9,7,5,3,3,9,1,0,7,0,0,3,9,4,8,4,8,6,6,4,0,3,4,9,0,4,0,3,9,1,4,5,8,0,2,4,3,8,8,6,6,2,8,4,3,8,3,9,2,4,3,7,4,7,7,9,3,6,3,8,1,2,5,0,9,3,5,0,3,0,5,5,0,3,3,8,8,4,2,3,4,3,9,3,5,2,3,2,8,7,2,2,7,5,9,5,8,9,4,7,6,6,1,5,9,2,8,7,5,6,3,0,7,9,0,0,7,8,7,0,5,2,4,5,9,6,0,0,8,9,3,4,0,7,7,7,3,5,1,3,9,6,1,0,7,3,2,9,3,4,0,8,5,3,2,2,5,7,4,3,6,1,3,0,3,1,4,4,7,4,2,1,1,3,8,4,9,1,0,7,1,1,5,6,8,9,2,0,8,7,7,3,6,6,5,0,8,8,9,0,6,5,9,9,3,2,8,6,1,9,8,2,2,4,4,9,6,1,9,5,5,4,7,4,6,9,7,5,4,5,5,2,7,7,3,6,9,9,0,9,1,3,9,5,4,7,2,8,0,9,9,6,5,9,2,4,9,8,9,9,0,8,5,4,3,0,7,9,1,1,8,6,4,5,7,9,4,3,7,5,3,1,1,6,0,0,3,8,1,2,9,3,3,3,9,3,5,8,5,9,6,3,9,8,5,3,4,9,2,0,8,6,3,5,2,5,4,4,3,7,9,9,9,5,9,1,2,4,5,4,0,0,4,1,2,3,1,7,9,3,1,4,8,7,1,1,1,5,0,8,1,8,8,4,9,2,6,6,7,5,4,4,7,1,3,1,5,4,1,4,7,3,6,0,8,7,6,6,1,7,9,1,6,5,4,8,2,8,1,8,4,0,6,8,4,5,3,1,4,2,2,2,9,4,0,1,0,5,7,2,5,3,4,3,9,0,8,0,8,6,4,5,5,9,8,3,4,5,6,6,8,0,7,8,0,7,3,6,7,8,4,6,3,6,0,3,0,7,5,6,3,4,5,2,1,5,7,6,3,4,8,9,7,9,8,9,3,7,1,3,1,1,2,7,1,4,1,0,2,9,6,5,5,4,0,3,1,1,1,2,2,8,1,3,1,1,6,9,7,5,2,5,4,8,7,7,4,9,3,9,0,1,8,9,5,6,7,9,6,2,1,0,9,3,5,9,4,4,4,2,6,8,0,3,4,5,7,2,0,1,4,2,0,6,1,9,8,7,6,1,1,2,8,3,8,6,1,9,1,2,2,5,4,3,2,5,2,8,2,2,7,5,7,6,7,6,9,9,7,3,9,8,6,2,6,9,5,9,3,3,7,0,9,8,5,1,2,7,6,5,7,5,6,9,5,6,7,6,7,3,4,5,0,9,4,9,2,6,8,8,1,7,2,1,8,8,7,1,5,7,6,5,6,3,6,7,6,3,4,6,3,1,3,9,4,7,6,1,0,9,2,0,9,0,6,2,5,0,4,8,8,3,2,8,5,6,9,0,0,2,7,8,7,7,0,2,3,9,6,0,8,0,6,6,1,6,9,7,9,1,6,4,0,5,9,2,8,1,5,4,3,2,1,9,9,1,8,3,5,6,9,8,0,4,7,8,8,7,9,8,7,4,0,5,9,8,1,8,1,8,0,5,2,3,9,9,6,2,1,5,7,5,4,7,1,7,3,3,6,8,8,3,7,7,9,2,1,7,0,9,1,7,2,8,5,5,4,3,2,4,8,8,2,3,0,4,9,3,3,6,6,0,7,0,0,8,9,8,6,6,4,5,9,4,9,8,2,5,1,8,4,2,7,0,7,0,0,4,2,1,6,7,0,6,0,5,6,4,0,1,7,5,9,2,9,4,9,6,3,9,5,8,0,0,2,8,0,9,6,7,8,8,4,5,6,8,0,5,8,4,3,8,8,3,4,9,3,3,6,5,4,9,9,3,0,4,3,0,6,7,4,7,5,8,7,5,1,0,8,0,1,4,8,8,3,3,3,1,8,4,4,3,8,5,7,9,3,9,5,5,0,4,5,0,7,8,2,2,9,1,6,1,6,5,7,5,8,7,5,7,6,6,0,8,2,1,0,3,0,2,2,7,4,9,8,2,6,7,1,0,8,1,8,0,5,1,0,0,1,3,1,8,9,2,8,9,1,2,7,0,2,3,6,1,1,5,0,2,1,6,2,5,9,3,1,9,7,2,8,7,3,5,7,4,3,3,1,1,9,3,4,8,8,4,6,2,6,4,3,8,7,7,1,3,4,4,6,9,4,1,3,2,0,7,2,4,1,2,9,9,1,4,1,3,5,1,9,4,1,5,4,6,0,3,0,8,1,7,6,9,4,9,1,8,2,4,9,5,9,6,9,3,3,2,5,0,1,8,4,8,1,6,0,4,9,1,3,9,4,5,0,6,7,1,7,4,6,5,0,8,1,0,0,1,2,3,5,2,9,8,9,6,4,6,4,5,5,1,2,2,3,3,7,1,3,9,6,8,8,3,6,3,4,4,0,0,6,7,4,2,8,7,8,7,8,6,8,1,4,3,6,5,0,1,5,3,4,0,9,0,1,6,8,3,9,3,9,1,1,4,4,4,1,5,7,3,8,5,7,1,8,9,0,9,3,1,0,3,8,3,1,9,2,6,2,5,4,4,9,0,2,5,1,5,1,8,9,2,7,7,9,7,2,2,6,7,7,9,0,7,2,8,3,6,2,0,0,6,7,3,4,7,3,0,8,8,5,8,2,7,6,2,5,1,8,2,6,6,3,7,2,3,6,7,5,8,1,9,4,5,6,4,6,7,7,7,7,3,9,9,4,8,3,5,5,7,1,7,4,5,6,0,3,5,5,3,4,1,4,5,6,4,8,9,6,8,0,1,9,5,6,6,8,6,9,4,6,2,5,9,9,6,4,4,5,5,8,0,9,2,3,5,5,6,8,9,4,2,7,9,2,8,8,2,1,1,4,3,7,5,4,5,3,6,3,5,5,3,9,8,5,0,0,1,1,0,7,9,2,5,8,1,0,6,0,6,5,6,5,9,7,1,0,1,9,9,3,1,1,7,0,4,3,1,8,7,3,8,2,3,8,7,8,2,3,6,6,4,5,0,7,4,8,3,4,0,7,1,8,6,0,5,0,8,5,1,3,3,2,7,4,9,1,6,5,9,5,1,1,1,6,2,1,5,3,6,2,4,4,6,1,1,1,8,7,1,9,9,4,7,2,3,4,5,9,7,6,9,5,3,4,6,8,2,0,8,4,9,8,6,8,4,6,7,4,7,7,8,2,6,7,1,2,1,0,6,0,5,1,9,8,2,2,9,4,6,0,7,0,0,5,8,5,3,2,9,4,1,6,7,2,0,7,3,6,8,1,9,8,0,8,8,7,0,6,1,9,8,7,4,5,0,8,6,9,8,6,2,7,9,3,5,1,9,2,5,8,8,5,1,2,2,2,1,6,9,7,8,4,8,9,0,2,3,8,7,9,6,9,7,2,6,2,4,6,6,7,8,9,4,2,9,7,3,7,1,3,5,5,9,8,4,1,7,0,6,9,6,3,4,7,0,7,4,4,5,8,9,1,1,3,9,1,3,3,8,3,0,0,5,7,2,3,3,4,7,1,7,5,5,7,0,3,8,5,1,7,0,5,9,0,2,0,8,7,5,3,6,4,6,9,3,0,1,6,8,9,9,9,1,2,0,0,9,5,2,9,4,5,8,4,0,5,7,6,5,5,4,0,2,2,3,7,7,8,6,8,0,6,7,8,4,6,0,5,1,4,1,8,9,6,9,9,5,8,4,8,4,0,1,0,8,6,9,4,0,8,6,9,3,6,0,8,1,4,6,8,0,4,6,0,2,1,2,5,4,5,1,6,1,4,7,4,3,1,5,4,4,5,5,1,1,3,3,5,7,4,2,7,0,1,3,5,9,6,8,2,2,2,0,0,8,1,3,8,9,3,2,1,1,1,3,9,6,1,1,1,7,7,7,1,4,4,5,0,1,3,7,4,7,0,9,7,7,1,2,9,1,7,9,8,3,3,6,5,2,3,1,9,2,9,3,8,7,5,7,1,4,7,6,9,2,5,8,4,6,9,8,1,2,0,4,2,1,9,8,4,9,7,6,3,0,4,8,8,3,2,2,9,5,5,7,2,3,2,7,6,8,2,3,4,4,6,4,6,1,5,2,7,8,4,9,1,4,2,9,2,9,1,6,9,4,1,2,6,1,4,8,4,9,9,3,4,5,5,5,4,0,2,7,9,5,7,7,1,0,9,9,2,9,4,9,1,3,1,2,4,6,3,2,4,6,7,9,1,5,2,3,2,6,4,4,5,8,5,9,9,0,5,8,5,9,1,0,9,7,9,7,6,8,6,6,9,9,6,6,3,0,8,4,9,9,3,3,2,0,7,9,7,8,2,9,2,7,9,9,0,2,8,4,0,4,9,0,3,9,4,6,5,6,6,9,1,3,5,5,6,4,4,6,1,2,2,4,4,2,2,0,4,1,6,3,4,7,0,7,0,3,3,6,5,7,7,8,3,9,9,9,5,2,3,7,6,7,9,4,0,8,8,3,5,3,7,6,5,8,1,9,5,9,2,7,4,9,5,2,4,1,8,7,6,6,2,8,6,5,3,4,6,2,2,5,2,5,3,9,3,7,2,4,2,5,7,3,3,2,4,3,1,7,9,3,5,6,3,0,0,0,8,5,9,9,6,3,0,0,6,1,2,1,4,0,2,0,1,5,8,0,4,5,4,0,8,8,1,5,4,6,5,9,7,6,8,4,2,2,5,9,0,5,0,0,3,5,3,1,8,7,6,2,0,4,3,1,3,7,6,4,9,8,5,0,9,6,6,5,7,3,2,2,0,0,1,7,6,6,9,2,0,4,2,8,0,6,5,5,3,0,0,7,4,6,7,9,8,3,9,6,1,6,3,9,6,3,4,5,8,4,9,0,1,8,4,0,8,8,8,4,2,6,8,1,3,7,3,0,9,6,5,3,8,3,8,8,1,9,5,5,3,7,7,2,5,8,7,7,0,5,5,7,9,2,9,2,5,9,7,1,6,9,9,2,9,6,2,4,8,8,6,3,6,0,7,6,6,0,4,3,2,3,7,3,9,6,5,7,0,8,5,3,5,8,3,5,9,7,4,5,0,8,7,1,8,2,3,5,0,6,8,4,8,5,7,1,0,3,2,6,6,8,3,7,9,8,0,6,2,9,0,0,4,5,8,5,5,9,4,8,0,7,1,3,7,5,2,4,4,4,6,0,3,0,3,6,2,9,9,8,5,5,1,2,0,9,2,2,9,7,3,4,9,4,5,7,2,2,9,9,9,0,5,4,5,6,0,4,7,5,7,0,3,2,8,0,0,1,9,0,6,9,2,6,8,8,5,9,8,1,5,1,4,2,5,3,6,0,5,6,5,1,1,7,1,2,4,3,1,0,4,6,4,5,9,0,0,1,2,5,4,1,5,9,4,8,2,8,7,5,8,9,3,5,2,2,6,7,0,6,6,9,6,6,1,3,9,7,9,1,1,4,4,3,5,1,8,5,9,0,6,1,8,2,6,9,2,3,5,5,7,2,5,4,0,0,5,9,7,5,1,5,7,3,5,8,4,1,0,7,8,4,7,2,1,9,6,5,3,2,2,4,1,4,4,7,5,1,9,3,2,7,2,9,4,3,0,5,5,8,3,4,2,8,2,0,9,0,2,1,6,3,8,8,4,2,6,1,0,0,6,0,2,4,2,2,1,4,2,0,1,5,6,1,8,5,5,8,7,4,3,7,7,7,6,7,6,0,8,8,7,9,0,1,9,6,1,2,8,0,7,5,3,5,8,1,0,3,2,7,7,3,2,3,8,7,7,5,7,6,4,3,2,5,5,0,2,9,6,7,3,0,3,2,0,8,0,0,5,1,8,2,4,1,8,1,7,6,3,2,1,5,3,8,5,2,4,9,9,7,1,9,1,5,9,7,8,0,4,4,8,8,8,6,8,4,4,0,3,8,3,8,2,4,5,5,2,0,3,5,9,6,5,2,6,3,5,0,6,0,5,2,2,0,9,6,2,8,7,9,3,6,1,6,2,2,8,5,2,6,3,7,9,5,9,3,1,4,9,2,9,5,4,8,9,9,9,3,2,7,2,7,6,4,3,5,2,4,1,4,3,1,9,8,8,8,7,6,7,6,6,0,2,5,7,7,9,4,5,0,0,5,8,9,7,6,0,1,3,5,7,0,6,7,8,9,4,6,1,3,3,6,6,1,0,6,4,4,4,6,3,2,6,2,9,3,0,3,4,7,3,6,0,9,8,3,4,6,9,7,0,0,7,7,1,1,5,8,3,8,4,9,0,5,6,6,4,0,9,0,9,3,9,7,4,2,1,5,7,6,5,9,9,9,2,7,0,5,8,2,8,2,0,9,9,7,1,3,5,1,8,7,7,8,5,4,3,2,3,5,4,8,2,2,6,8,7,8,0,9,7,1,4,0,9,4,9,0,0,4,6,2,9,0,7,0,1,4,7,5,6,5,3,8,2,3,9,9,8,7,4,0,8,1,9,5,7,5,6,0,0,9,3,7,4,6,9,9,3,3,7,6,1,9,8,1,3,3,5,4,2,0,2,4,3,9,8,4,5,2,4,5,0,6,3,5,1,9,9,5,6,1,4,1,6,8,1,7,0,0,5,2,2,2,2,7,4,2,6,0,1,5,7,1,8,9,7,6,3,7,7,0,3,4,6,2,7,3,1,1,3,3,9,6,5,6,5,8,6,6,2,1,1,3,7,5,3,6,7,2,1,7,2,5,1,0,8,4,2,6,4,1,4,3,2,8,7,0,7,9,9,6,5,0,4,0,3,9,6,7,8,4,9,5,4,9,0,4,8,4,7,6,8,4,5,9,1,1,2,6,8,8,2,8,8,5,7,9,4,4,8,9,0,2,7,2,1,9,5,2,6,4,8,9,4,7,3,1,3,9,7,2,1,6,8,1,8,8,7,7,7,3,7,2,5,0,8,1,6,4,6,6,1,0,7,8,2,8,3,3,2,3,7,7,5,8,2,1,1,2,0,3,9,6,8,8,9,5,8,6,9,8,9,5,3,6,8,6,4,4,2,6,6,2,6,8,7,4,0,1,8,2,9,3,1,2,1,4,6,6,1,8,5,4,7,1,7,2,5,9,9,0,4,9,4,5,9,9,3,0,4,5,1,4,6,2,3,5,6,8,8,3,2,1,4,6,9,2,0,4,5,8,4,0,6,1,9,7,3,0,0,7,6,5,2,6,5,4,3,7,1,9,9,7,0,7,9,9,3,0,3,2,3,3,9,6,0,2,2,5,4,4,2,0,5,8,8,8,8,9,1,6,6,5,0,1,0,7,8,3,3,9,1,8,7,4,8,7,4,1,8,7,5,0,5,4,3,4,5,0,8,1,7,0,4,7,1,6,6,0,5,4,1,4,9,0,6,3,4,3,8,9,3,4,7,0,9,2,1,8,2,9,9,2,0,0,4,9,7,1,1,0,7,0,6,0,3,4,6,7,4,3,6,6,4,1,0,1,1,8,6,9,9,0,6,4,8,4,7,2,4,3,9,8,2,9,4,2,7,2,9,5,0,3,4,1,8,5,5,6,6,2,0,4,6,1,4,9,8,5,2,5,1,2,1,3,0,9,2,3,3,4,2,6,1,7,8,7,1,2,3,9,9,9,7,2,1,1,1,5,9,6,1,4,2,5,2,4,9,0,4,3,1,5,1,8,2,1,0,8,0,2,8,8,8,6,5,4,4,0,3,6,0,7,0,9,6,4,0,1,5,4,2,0,5,7,4,0,5,7,1,6,2,0,1,0,8,3,5,7,4,0,9,5,5,7,5,8,9,6,5,9,8,8,3,7,8,8,8,9,1,7,6,3,8,1,5,0,0,3,6,3,7,8,9,5,3,2,0,4,6,9,8,5,8,2,3,1,9,7,3,2,6,2,3,7,6,5,7,8,9,1,2,6,6,5,2,2,9,1,2,0,5,9,7,7,8,9,3,9,0,4,7,7,1,8,4,1,7,6,8,0,4,2,3,8,0,9,4,0,3,1,7,3,9,9,8,2,1,0,7,9,0,3,0,1,5,0,7,4,6,2,9,8,2,9,9,6,9,1,2,2,3,7,5,2,0,2,7,7,8,5,6,8,4,8,2,2,5,4,9,3,8,1,7,3,0,1,0,2,3,8,3,6,8,6,4,6,5,6,1,3,4,7,7,1,7,8,7,0,8,4,8,4,5,6,0,9,3,3,1,7,2,6,8,0,9,8,4,2,9,8,4,7,3,6,0,8,4,9,7,4,4,6,0,9,9,3,7,1,9,2,0,2,3,9,1,3,7,7,6,4,4,3,2,3,6,6,0,8,4,5,4,5,8,1,9,0,8,1,1,5,7,4,1,7,8,5,1,6,4,1,1,6,2,7,5,3,6,3,6,0,4,4,6,8,7,9,8,2,1,7,3,4,7,9,7,8,5,6,6,8,8,8,2,6,6,3,8,4,1,4,4,3,2,6,6,0,2,5,4,6,7,7,8,4,3,9,0,4,0,6,1,8,0,6,7,7,4,0,7,8,5,7,8,1,5,4,2,7,1,5,9,2,3,7,4,8,5,6,7,7,3,1,1,5,5,7,3,3,8,6,1,2,3,5,3,2,5,6,6,3,6,7,2,7,5,1,4,1,3,8,7,6,6,2,2,1,2,2,3,3,0,0,1,6,8,6,6,0,6,5,2,4,6,7,3,0,3,5,2,0,8,7,7,0,6,0,2,4,3,3,6,5,6,2,8,8,2,6,7,9,0,7,0,9,3,4,3,2,9,0,1,8,5,3,0,6,8,4,5,6,0,0,0,5,4,6,3,9,0,6,0,2,1,1,3,1,5,7,4,0,5,2,2,4,5,4,6,4,7,5,9,2,4,4,2,5,7,4,7,0,7,1,8,8,8,9,9,6,8,4,7,9,4,8,8,9,9,2,8,8,9,2,2,4,8,1,2,3,9,8,2,9,4,8,7,5,6,1,4,6,2,2,2,5,3,0,5,8,4,7,2,2,7,6,0,6,7,9,5,7,2,2,2,9,7,1,6,2,9,5,4,6,1,4,7,2,9,0,6,6,4,5,6,8,3,2,0,0,0,8,7,5,6,3,8,5,8,9,8,6,4,5,0,7,7,3,7,1,4,2,0,4,9,7,8,5,0,9,6,5,3,0,4,5,3,0,0,1,1,2,3,9,9,0,6,5,9,9,7,2,0,4,1,2,2,4,4,8,2,1,9,5,6,1,5,0,9,1,9,8,3,7,3,5,9,4,1,3,1,3,2,4,9,3,4,5,9,7,2,2,5,1,4,3,0,1,6,4,1,7,3,2,0,1,1,4,8,7,8,2,3,1,1,7,6,6,2,6,4,9,3,7,5,1,3,4,0,0,7,3,0,8,1,0,9,1,9,6,5,7,9,1,6,5,7,8,3,7,2,2,0,2,4,0,8,5,1,2,8,4,1,2,1,2,1,0,4,3,6,1,4,9,0,5,5,4,9,2,3,5,5,9,3,8,8,6,2,6,8,1,9,4,7,8,9,3,7,8,2,0,3,6,8,6,2,2,6,0,5,1,0,6,4,2,8,8,3,5,8,8,2,6,9,0,0,0,1,8,8,6,3,5,9,5,2,6,7,1,6,6,5,8,7,0,9,5,6,3,7,2,7,1,7,2,3,4,1,2,2,9,0,0,7,0,4,7,4,4,1,1,6,8,6,1,9,0,6,7,7,5,3,4,3,1,0,8,1,6,2,4,1,9,7,5,1,7,2,6,0,9,3,3,0,6,1,5,1,3,9,3,7,1,7,8,1,8,4,2,9,0,7,2,6,1,2,4,0,9,3,7,1,0,6,5,1,7,5,6,3,7,1,1,7,7,9,1,7,3,1,3,6,3,9,3,3,0,2,7,5,1,3,0,4,0,0,2,6,3,9,2,0,1,3,4,6,4,8,8,8,0,2,2,8,4,7,6,9,6,8,3,9,0,3,8,9,4,6,7,8,3,0,5,6,6,4,6,6,1,9,8,0,4,9,9,2,7,6,6,8,3,9,1,0,9,8,0,3,7,6,4,8,9,3,1,2,2,4,8,4,8,5,7,9,7,4,9,1,5,8,5,9,1,0,5,8,8,2,0,8,8,1,4,2,2,0,5,7,6,0,3,3,8,1,8,3,9,9,9,6,3,6,2,2,7,8,3,3,2,7,1,2,1,4,0,2,6,6,9,4,9,5,2,5,1,3,5,3,7,7,7,0,2,4,7,6,1,1,0,4,4,2,3,8,8,7,8,4,2,3,0,2,9,5,4,2,4,4,5,2,0,2,1,4,9,4,0,0,3,0,4,8,8,5,4,7,1,4,2,8,1,5,3,6,1,5,9,9,0,5,1,1,4,2,9,3,0,2,4,3,0,8,4,1,6,3,7,5,6,6,6,4,3,9,2,6,0,6,1,4,1,0,6,4,5,0,2,1,6,2,3,8,3,5,5,4,3,1,8,7,9,8,3,9,3,2,2,6,6,9,4,8,6,7,6,7,5,5,1,4,6,5,7,7,2,4,9,6,2,4,8,8,4,6,4,1,5,6,6,4,2,3,6,7,8,5,7,9,8,0,9,8,9,0,1,9,6,1,7,6,2,4,9,2,8,9,0,2,5,3,8,5,0,5,7,1,5,4,5,1,9,7,3,7,2,5,5,1,5,7,7,4,0,1,4,6,0,0,8,2,8,6,7,4,9,7,4,7,5,6,0,9,9,9,4,3,4,5,9,4,6,4,3,3,8,0,3,2,6,3,7,0,5,0,0,9,5,2,2,7,3,0,2,4,7,5,0,0,5,1,9,5,5,6,4,8,8,8,5,4,2,5,1,0,2,3,0,6,0,7,4,2,8,2,4,5,3,8,9,5,5,6,0,9,3,0,9,0,9,5,4,3,6,7,4,4,0,2,2,9,4,6,6,9,8,1,1,7,4,5,4,9,7,7,0,1,6,5,2,3,6,1,5,5,3,9,1,7,6,4,2,0,4,0,9,3,5,1,9,7,2,9,5,9,4,9,8,7,9,2,7,0,5,4,4,7,4,5,2,2,8,8,7,0,3,7,8,5,1,5,6,8,4,5,3,8,6,1,0,2,5,7,4,4,4,0,7,7,2,3,6,4,9,9,0,5,2,3,3,0,2,9,8,8,2,9,4,7,6,1,3,9,3,0,7,1,9,0,6,5,4,7,4,8,3,0,9,6,2,8,9,4,6,6,0,9,9,7,1,9,4,9,5,5,9,3,9,6,4,5,1,0,1,7,5,5,6,3,6,9,4,6,6,1,8,2,0,6,2,0,9,5,0,0,4,5,4,2,0,4,5,1,2,3,5,6,6,2,5,5,8,9,6,8,8,4,6,1,6,7,9,0,1,4,6,3,6,8,7,4,6,2,5,3,0,0,5,4,1,3,2,5,1,5,2,4,5,3,2,5,3,5,2,9,4,6,5,4,0,6,4,3,6,0,8,3,9,4,6,9,4,7,4,8,7,6,6,9,4,2,1,1,3,0,5,0,0,2,3,7,1,7,7,1,6,4,6,0,1,4,4,6,5,8,8,6,7,3,8,2,6,2,6,6,7,7,5,8,9,1,6,7,3,0,8,6,0,6,4,2,0,8,5,2,7,8,2,5,6,8,0,4,7,0,3,7,5,8,6,8,6,5,6,2,4,2,4,2,4,3,6,8,3,2,0,3,8,3,9,2,8,3,7,4,5,9,1,0,7,4,2,3,7,9,9,9,1,2,5,1,7,9,1,3,9,7,5,2,4,8,4,2,9,5,5,7,1,1,4,1,0,4,6,4,2,3,3,2,7,0,4,6,6,0,5,6,0,7,3,3,2,1,8,7,2,8,3,8,4,7,6,1,2,0,4,5,2,4,8,3,9,0,1,8,1,4,9,6,6,8,8,1,4,0,0,5,2,3,7,2,1,0,3,7,1,5,9,8,6,4,4,9,7,7,8,3,2,5,9,7,1,7,7,4,3,3,6,0,6,5,9,4,4,6,9,6,3,7,8,0,1,8,6,2,2,9,2,8,1,7,0,9,6,3,0,6,7,2,7,0,6,9,6,4,7,8,2,2,6,3,1,7,6,4,7,6,1,4,9,4,0,1,7,3,6,8,4,9,3,4,7,3,7,3,3,8,9,9,1,1,3,7,7,3,3,9,6,4,0,5,2,6,0,0,1,1,9,0,9,0,9,8,5,4,9,7,9,5,4,6,2,5,7,0,1,7,1,0,8,5,0,5,9,7,4,1,6,1,9,3,5,3,8,8,9,4,8,5,2,5,3,4,8,3,9,7,3,7,4,6,0,6,6,4,8,5,4,9,6,1,3,1,9,7,5,4,9,0,2,4,3,1,1,3,6,6,9,5,2,6,4,2,1,9,0,6,9,5,1,9,3,2,8,4,6,6,4,1,8,6,6,9,2,7,3,3,7,0,4,1,8,2,7,7,9,9,7,1,4,8,2,2,6,9,6,2,5,8,7,0,7,4,1,3,7,4,8,5,5,2,8,0,8,8,8,3,4,4,5,3,0,2,7,3,4,2,9,8,9,3,1,3,9,2,6,0,9,0,5,3,6,6,2,2,9,4,4,4,9,2,1,7,4,2,1,0,1,8,1,7,7,2,3,7,9,8,0,4,1,8,9,9,8,1,0,5,7,4,6,6,5,2,4,9,1,1,9,9,6,4,8,7,4,8,4,0,5,4,3,0,3,9,6,7,6,6,2,7,3,1,5,7,2,5,6,7,9,3,2,1,3,5,6,1,2,0,1,9,2,5,1,1,2,5,6,4,4,7,2,2,6,8,6,8,2,1,3,0,8,5,4,0,9,8,6,9,9,7,3,2,6,4,9,4,4,9,0,0,8,8,6,0,8,7,6,7,0,1,8,5,8,7,7,6,5,0,7,1,0,3,7,3,2,6,4,7,7,1,7,3,3,1,3,3,0,2,5,5,2,7,3,8,7,8,8,9,4,6,3,2,6,9,9,1,8,0,9,5,3,8,0,9,4,0,0,5,4,2,2,0,5,1,8,4,8,6,4,6,2,3,5,8,3,8,5,7,2,6,2,4,3,2,1,7,9,1,3,2,5,8,2,3,3,4,7,1,6,1,0,9,8,8,3,4,9,6,0,8,5,2,3,3,3,2,8,1,8,2,5,4,7,7,3,8,6,6,3,4,5,3,0,9,2,3,3,0,3,5,0,4,9,9,9,5,3,2,3,1,2,1,3,0,6,1,5,0,9,9,5,7,0,9,4,7,2,6,9,3,4,8,4,5,4,3,9,1,3,1,9,9,3,9,5,5,5,3,1,8,7,9,2,4,3,1,8,7,5,3,7,5,5,7,3,8,3,8,0,5,6,4,4,9,1,3,6,7,9,3,3,8,9,9,2,5,9,7,1,2,5,6,4,7,6,8,1,8,7,0,8,3,7,3,4,2,7,3,8,8,6,5,4,8,5,3,5,1,9,9,6,1,4,8,0,6,2,3,6,7,5,2,0,1,8,0,6,0,5,6,6,3,9,9,5,9,6,9,8,7,7,1,7,2,1,8,9,1,7,5,5,6,0,5,7,8,3,3,2,1,9,5,5,6,6,1,7,9,1,6,2,9,6,1,6,2,1,4,4,2,8,9,1,0,7,1,5,6,9,9,6,6,5,9,7,5,2,0,2,1,1,4,4,5,5,5,4,1,8,9,1,7,8,8,6,2,2,8,8,6,5,7,8,2,6,0,4,4,4,9,0,3,7,6,2,3,1,1,7,5,7,9,7,5,0,8,2,0,2,3,5,2,6,9,0,7,8,5,6,6,4,2,7,4,8,2,1,2,1,5,2,1,5,7,5,7,0,7,0,2,4,2,1,9,1,7,2,5,5,1,8,5,8,6,1,0,3,1,7,9,3,8,1,9,3,6,8,3,6,7,2,2,2,2,6,8,3,3,1,2,2,3,0,4,6,1,1,8,7,6,8,3,9,9,6,3,6,3,6,6,0,8,2,0,5,8,8,6,0,0,9,9,6,3,8,7,1,6,7,2,1,3,5,7,2,4,3,5,1,0,9,3,6,1,9,8,7,6,5,8,9,4,0,2,7,4,3,7,0,9,3,2,5,1,4,1,3,1,4,6,7,9,4,7,0,9,5,9,4,6,6,8,1,4,2,4,7,0,9,8,2,3,8,7,9,4,1,8,2,5,9,5,8,5,8,0,6,3,2,4,5,6,6,9,2,6,2,9,8,1,8,2,6,9,5,3,1,9,4,9,2,1,0,5,0,5,9,1,9,7,5,9,7,9,1,4,4,0,1,9,6,3,0,5,5,1,9,3,6,6,8,1,9,9,3,1,3,6,6,2,5,7,5,7,0,9,9,5,0,1,4,8,7,3,8,8,6,2,0,3,7,4,9,7,1,8,0,5,4,0,0,4,0,3,1,5,4,7,0,1,0,5,2,4,7,8,0,2,1,5,4,9,5,9,6,1,4,9,1,6,5,2,4,8,5,5,9,5,0,1,2,2,1,9,9,7,6,5,8,6,4,2,2,7,7,7,3,2,9,2,2,9,2,6,4,2,9,2,2,8,0,7,6,6,5,5,6,3,7,4,8,7,9,2,6,1,7,7,8,6,6,2,1,9,1,0,0,9,7,4,1,5,7,3,4,0,3,0,5,1,4,0,5,2,6,2,1,3,8,8,7,2,6,2,6,8,9,5,0,3,7,8,6,4,8,5,1,2,1,1,2,4,7,5,0,2,8,2,8,9,0,8,1,6,9,0,7,5,8,2,9,2,5,2,3,6,0,3,8,4,4,3,6,9,1,3,8,6,1,0,9,2,7,1,7,5,9,9,4,5,0,0,0,9,2,7,8,6,4,1,8,8,9,9,0,5,6,3,8,3,1,6,8,3,3,9,3,9,2,5,9,7,1,1,2,3,4,8,6,7,2,5,5,4,7,2,8,6,1,1,1,9,0,2,9,2,1,7,2,6,3,0,2,7,7,7,8,6,7,7,3,3,2,3,6,0,7,3,4,8,3,6,7,0,9,0,8,4,5,8,9,9,1,1,0,2,7,3,8,8,2,4,4,6,8,9,1,6,7,8,7,6,0,7,3,2,8,8,9,8,7,7,1,6,3,0,4,5,3,3,6,6,0,1,6,4,0,8,3,4,8,2,4,8,2,4,4,3,4,9,2,6,6,2,2,5,4,0,0,3,7,8,8,2,1,6,2,9,6,2,0,3,2,6,1,1,4,6,6,0,6,7,9,4,4,4,4,4,5,1,8,6,2,6,2,3,7,5,9,9,0,3,2,5,7,8,3,3,9,3,8,7,5,0,6,2,3,7,4,7,5,9,3,6,9,4,4,8,4,4,1,4,2,2,7,2,0,3,8,3,4,0,7,8,4,0,2,1,5,1,8,9,4,6,7,2,4,8,3,5,5,9,3,2,4,6,1,8,6,2,5,9,1,2,9,0,5,0,4,8,8,9,0,7,0,8,0,4,3,0,9,7,7,5,0,2,0,1,7,6,6,8,2,3,1,2,6,9,9,7,6,5,4,6,9,7,2,7,6,1,0,5,0,4,7,2,2,1,2,5,3,7,2,0,2,6,2,9,1,1,2,4,5,4,4,1,0,0,7,3,0,5,8,5,2,5,6,2,9,7,4,9,5,8,6,6,4,4,9,8,4,4,3,9,9,0,2,3,5,9,3,9,2,7,1,1,5,0,3,1,8,7,9,9,7,2,9,0,3,6,9,9,5,5,3,4,7,7,7,0,2,5,4,4,8,8,2,1,0,2,6,2,9,9,8,1,7,2,2,1,0,6,1,6,3,8,1,0,4,7,2,3,0,4,2,3,1,0,2,5,5,7,9,5,2,7,1,7,7,7,3,4,4,0,1,8,6,8,9,3,4,7,6,9,6,4,4,2,2,6,2,2,9,9,9,5,8,6,0,1,1,7,1,7,1,0,6,3,3,9,9,4,5,6,6,7,9,2,1,5,2,9,7,9,1,9,0,4,7,6,9,9,7,1,2,6,8,2,4,7,2,8,8,6,3,7,1,2,5,5,7,6,3,6,9,0,0,5,0,1,5,5,9,1,1,0,9,3,2,4,1,9,0,8,5,0,3,6,3,1,9,9,8,8,7,1,6,9,7,0,6,1,9,8,3,1,9,6,3,9,9,2,5,2,2,0,4,9,4,9,5,3,9,6,9,6,7,7,0,0,3,2,3,6,0,6,8,4,1,8,6,4,2,9,7,6,4,9,4,3,0,0,6,7,6,8,5,4,0,3,8,3,3,2,7,5,6,3,2,2,9,9,8,2,3,7,2,5,2,4,9,1,9,0,8,5,0,6,8,9,4,8,8,7,8,5,1,4,1,6,1,7,1,8,8,1,9,5,1,1,2,5,5,8,3,7,9,7,2,7,8,4,6,8,8,9,2,9,0,7,3,9,0,8,9,9,6,9,8,3,2,6,0,7,9,5,3,5,0,1,5,9,4,1,1,0,6,5,2,3,3,8,5,8,2,3,1,2,0,0,1,8,0,7,2,9,1,6,2,7,5,0,4,7,3,5,7,2,1,1,2,8,4,2,7,5,4,4,5,6,4,9,8,2,4,3,8,0,4,5,4,9,5,1,2,5,9,1,3,1,0,7,8,1,9,7,9,7,6,6,4,4,2,0,2,4,0,9,8,1,3,4,7,9,4,2,1,0,3,4,2,0,0,9,3,3,2,5,2,2,3,9,2,4,5,3,3,6,0,3,3,5,5,4,3,5,6,7,2,9,8,4,0,0,2,4,0,6,4,2,8,9,7,0,0,0,9,3,3,9,9,0,2,8,1,8,9,1,7,4,9,4,4,9,3,4,2,7,0,6,0,8,2,6,5,9,2,8,9,6,6,7,2,4,9,6,1,8,4,8,4,2,3,2,8,1,3,7,0,6,9,8,9,5,0,4,3,4,7,2,9,0,6,3,3,9,7,2,6,7,9,6,0,1,6,6,2,2,5,3,2,6,5,3,8,6,0,0,0,9,9,7,8,2,7,6,3,4,8,5,9,5,8,5,4,3,8,0,0,4,7,3,2,0,1,3,8,9,0,4,2,5,5,9,9,8,6,2,8,1,4,5,3,9,5,4,0,4,6,1,1,4,0,0,0,1,9,5,6,6,6,1,2,8,5,0,9,9,1,5,6,2,1,4,1,8,2,5,8,7,6,7,1,6,1,6,2,2,9,8,3,7,7,5,4,6,2,6,2,4,9,0,2,9,0,2,1,1,1,4,7,9,4,8,3,3,3,0,8,5,0,9,4,5,8,8,5,6,4,9,5,7,0,6,8,2,5,4,5,0,9,9,9,0,1,8,4,3,8,6,6,9,6,5,9,8,1,1,9,7,4,8,2,6,7,0,6,2,0,6,2,7,2,5,2,9,4,8,6,1,9,6,5,6,9,1,5,9,6,8,6,6,9,1,8,7,1,4,5,3,1,3,2,0,6,0,4,3,5,3,8,7,8,6,2,5,9,8,3,6,9,8,1,0,2,1,0,4,9,7,9,2,7,6,1,4,1,2,2,0,5,4,6,2,9,9,3,9,5,3,3,8,9,0,0,3,7,8,5,5,7,8,5,5,7,8,6,5,6,1,8,8,0,7,7,6,2,4,3,3,8,7,7,2,2,4,9,4,3,7,2,1,5,7,2,2,4,5,8,3,4,3,9,4,5,0,4,8,4,2,9,0,2,5,4,1,5,5,4,5,0,6,5,7,6,6,5,1,4,8,8,7,6,6,4,3,6,7,0,4,9,0,4,4,2,0,9,4,5,4,4,2,2,0,3,5,9,4,5,0,0,5,1,5,1,3,8,0,6,8,4,0,1,7,9,5,3,4,7,1,4,0,4,6,0,4,0,6,3,9,7,3,1,6,5,0,0,2,4,1,6,0,7,4,2,0,5,4,0,0,3,8,0,8,4,4,7,7,3,7,7,5,4,5,7,9,5,2,3,4,2,4,9,1,7,7,7,1,0,1,9,0,1,5,3,5,0,4,8,7,1,5,0,1,7,0,3,9,9,2,7,5,8,0,5,0,7,6,5,1,9,0,8,1,7,8,6,8,5,2,9,9,2,7,8,9,4,3,1,3,8,4,9,4,9,4,0,1,2,7,0,4,4,3,6,0,5,3,7,3,8,6,7,4,1,2,3,3,9,5,5,0,3,6,5,6,6,6,2,9,2,0,9,8,2,1,1,4,0,9,3,3,2,7,7,0,6,0,1,0,2,9,3,8,6,9,2,7,8,0,7,4,0,2,8,8,2,8,0,4,0,3,7,8,9,4,6,0,0,7,0,9,7,5,0,1,5,5,7,4,7,4,8,5,5,9,1,0,1,9,9,1,0,6,5,0,3,6,3,6,2,2,3,7,9,9,5,1,9,9,8,2,8,6,7,8,3,1,8,1,2,3,3,6,5,5,9,7,0,0,9,7,8,8,2,5,4,6,8,3,5,3,9,5,1,3,8,1,0,4,0,6,4,8,5,9,8,6,6,5,7,4,9,9,0,4,6,9,6,6,6,2,4,8,4,8,0,6,4,0,1,4,9,8,0,4,1,6,5,8,2,7,7,4,3,6,6]"
                    },
                    {
                        "username": "ms681729",
                        "content": "this solution is working properly for all cases expect 9999999999 this case don\\'t know why help me.\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] arr, int k) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n       int sum=0;\\n        int prod=1;\\n        for(int i=arr.length-1;i>=0;i--){\\n            sum+=arr[i]*prod;\\n            prod=prod*10;\\n        }\\n        sum=sum+k;\\n\\n        while(sum!=0){\\n            list.add(sum%10);\\n            sum=sum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "ruchitakb7",
                        "content": "first it stucked at 3rd test then i changed data type to long int now it again stucked at 90 ..now what should i do?"
                    }
                ]
            },
            {
                "id": 1824080,
                "content": [
                    {
                        "username": "thisannie",
                        "content": "Back to back 3 easy problems?? HOW!?"
                    },
                    {
                        "username": "Umair9912",
                        "content": "not exactly easy tho"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "If you are not using LL then :\\n1. Use while loop till array_size > 0 || k > 0\\n2. Inside while :\\n             2.1.Use If to check weather size > 0\\n                    2.1.1Add last element of array into k\\n                   2.1.2 decrease array_size by 1. \\n              2.2.Add last element of K in your list\\n              2.3 remove last element of k\\n             \\n3. IF REQUIRED reverse your list and return \\n\\nHope This will be helpful ....."
                    },
                    {
                        "username": "aashrith_d4",
                        "content": "Easy to understand\\n"
                    },
                    {
                        "username": "simrannasrin",
                        "content": "Can anyone tell me why the code below is not working for edge cases like 9999999+1?  \\n\\npublic List<Integer> addToArrayForm(int[] num, int k) {\\n        int j=0;\\n        for(int i=0; i<num.length; i++){\\n            j=j*10+num[i];\\n        }\\n\\n        int number=j+k;\\n        ArrayList<Integer> list= new ArrayList<>();\\n\\n        while(number>0){\\n            int digit=number%10;\\n            list.add(digit);\\n            number=number/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "masemune",
                        "content": "Every digit past 2^53 will start losing precision which can cause things like erroneous rounding. If you need to work with larger numbers then use `BigInt`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "Adding elements from the left is must efficient. We can do that using linked list or other data structure. In python, we can use $$deque()$$  from $$collections$$. We don't need to import it in **leetcode**. Also we just need to  return this $$deque$$ and it will be accepted."
                    },
                    {
                        "username": "anand_083",
                        "content": "  this is brute force method it work properly but in 3rd case it can not give 0th index can anyone have guts to debug this solution  /\\n        int n=num.length-1;\\n       int base=1;\\n      for(int i=n;i>0;i--){\\n          base=base*10;// base mil gyi //\\n      }\\n        int sum=0;\\n// this loop give me 1000,100,10,0, as my question demand//\\n        for (int i = 0; i <n ; i++) {\\n            int temp=num[i]*base;  // 1*1000\\n            sum=sum+temp;           // 1000\\n            base=base/10;              // update base as 100\\n        }\\n        sum=sum+k+num[num.length-1];\\n// however it give sum properly include 3 rd case //\\n\\n// for printing //\\n        for (int i = n; i>=0 ; i--) {\\n            num[i]=sum%10;\\n            sum=sum/10;\\n        }\\n        return num;\\n// run this code in your local compiler  //// "
                    },
                    {
                        "username": "adityadewhy",
                        "content": "why does this code not work for num = [9,9,9,9,9,9,9,9,9,9]\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        int number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        int tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, tempnum % 10);\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "[@adityadewhy](/adityadewhy) nevermind, even long aint enough for the other test case ie [1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]"
                    },
                    {
                        "username": "adityadewhy",
                        "content": "i am assuming the problem was with int data type(int too small to store that big a value)\\nhere\\'s the fix\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> ans = new ArrayList<>();\\n\\n        long number = 0;\\n        for(int i = 0 ; i < num.length ; i++){\\n            number += num[i]*(Math.pow(10,num.length-1-i));\\n        }\\n        number += k;\\n\\n        long tempnum = number;\\n        while(tempnum > 0){\\n            ans.add(0, (int)(tempnum % 10));\\n            tempnum = tempnum/10;\\n        }\\n        return ans;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "parth_chittora",
                        "content": "`class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n       long value = num[0];\\n        List<Integer> list = new ArrayList<>();\\n        for(int i = 1;i<num.length;i++){\\n            value = value*10+num[i];\\n        }\\n        value = value+k;\\n        System.out.print(value);\\n        int dig;\\n        int i= 0;\\n        while(value>0){\\n            dig = (int)value%10;\\n            value = value/10;\\n            list.add(list.size()-i,dig);\\n            i++;\\n        }\\n        return list;\\n    }\\n} `\\nWhy is it not giving the ans for the test case 999999999"
                    },
                    {
                        "username": "takezo_shinmen",
                        "content": "AYOO guyz ,  whhats wrong eith this test case\\nnum =\\n[7,8,2,9,2,5,4,7,1,8,0,6,6,7,4,9,0,3,9,9,2,2,6,6,2,5,8,3,6,3,9,6,3,3,1,6,2,7,5,9,8,9,4,4,7,5,0,7,3,8,7,6,0,9,0,7,4,1,1,4,0,7,7,7,6,1,6,5,1,7,4,9,0,4,2,4,4,4,2,6,6,2,1,3,6,7,2,1,9,5,8,3,6,4,2,1,6,6,7,1,0,2,9,3,5,6,8,5,4,2,7,0,3,6,5,0,2,1,1,4,0,1,3,7,7,1,9,1,6,5,9,7,3,3,1,0,9,4,6,5,3,2,0,8,2,7,7,5,4,2,9,9,3,1,9,5,5,4,0,7,3,6,8,9,6,5,1,1,7,0,7,5,3,2,3,1,4,8,2,5,9,6,0,0,2,4,7,9,6,2,3,2,8,5,6,1,0,7,9,1,6,5,6,2,8,5,0,9,2,5,4,0,3,6,0,7,0,3,0,0,8,5,1,2,5,5,1,6,6,0,9,7,9,2,2,7,0,4,3,1,0,4,8,8,6,6,4,6,4,3,1,3,1,5,4,4,3,6,4,5,2,3,7,6,2,4,0,3,7,5,6,8,9,8,6,9,6,9,0,1,3,1,9,0,8,1,9,8,0,4,1,8,1,1,6,0,9,2,8,3,6,0,0,7,2,4,6,3,9,9,2,6,4,8,1,1,1,0,8,8,2,5,9,3,5,4,0,2,5,9,9,1,7,3,7,4,0,1,9,5,5,0,8,2,4,5,9,0,3,9,3,0,6,6,0,7,0,4,2,1,4,8,0,4,5,4,9,9,3,4,0,9,1,1,0,2,0,6,1,2,8,6,3,3,2,5,2,9,9,4,0,0,9,5,7,8,9,2,0,4,0,4,9,1,9,3,9,8,3,6,4,8,7,4,9,6,3,7,8,2,3,4,5,6,0,7,5,2,6,4,6,5,8,9,2,5,6,5,7,1,0,1,2,3,2,2,2,3,4,5,0,8,7,0,8,4,3,6,8,9,9,4,9,5,6,8,3,7,5,9,3,7,5,3,8,2,2,9,1,2,1,7,6,2,4,3,5,8,5,8,4,9,5,4,6,2,7,3,7,2,1,5,9,1,1,6,8,8,6,6,8,1,4,7,7,7,7,3,1,8,5,5,0,3,5,8,6,5,2,9,6,0,0,3,1,3,8,3,7,6,5,3,6,9,7,0,9,0,4,1,6,5,0,6,5,7,7,3,0,9,0,2,9,5,1,9,9,9,8,9,4,4,4,6,1,3,2,0,8,3,6,5,0,8,5,7,3,9,1,3,7,1,3,1,6,9,5,5,1,6,7,5,6,5,1,6,4,6,3,4,1,3,8,8,3,9,5,2,5,5,6,9,3,2,9,9,5,7,0,7,0,5,8,0,7,0,8,0,4,6,0,0,3,7,2,3,8,1,4,6,5,6,4,0,4,8,7,5,8,5,8,1,7,3,7,8,8,5,3,4,1,9,3,0,2,9,6,3,3,4,1,8,5,1,7,4,4,4,9,7,3,7,0,7,5,5,0,0,1,9,2,6,0,9,6,5,1,4,0,2,0,7,5,4,8,8,7,0,4,1,0,8,9,9,3,3,4,0,9,5,7,5,3,6,2,4,1,0,9,1,5,7,5,4,5,6,2,9,9,4,2,1,5,6,1,1,8,8,2,8,0,9,0,8,1,4,9,3,0,6,5,1,3,6,2,1,9,1,2,8,7,0,2,4,7,8,3,1,6,4,1,4,9,9,5,4,0,3,8,5,2,3,7,1,8,4,2,2,5,2,9,6,2,1,3,3,3,9,1,1,3,9,1,0,0,6,7,1,3,3,2,6,9,5,2,8,8,7,2,5,2,7,1,4,2,0,1,9,8,5,6,3,2,2,3,3,1,8,9,8,5,6,4,7,8,6,5,8,8,6,0,5,5,0,8,3,6,3,0,1,3,0,8,2,1,6,9,8,0,5,0,9,4,0,5,8,8,9,8,8,5,0,1,1,1,6,2,2,8,8,0,6,7,8,8,3,5,8,4,9,7,2,1,9,4,1,0,1,3,1,6,1,3,7,8,7,3,5,9,1,5,9,8,3,1,7,3,0,2,0,6,8,5,5,5,3,4,3,0,4,0,2,2,0,5,5,9,2,0,9,7,3,3,3,9,5,0,4,1,3,3,2,2,5,1,9,3,5,6,1,6,3,0,3,1,6,3,8,1,9,9,9,9,9,0,5,0,8,9,2,1,5,9,6,6,8,3,0,3,1,2,9,1,8,2,8,8,1,5,1,9,7,0,3,4,3,7,1,0,2,2,5,0,8,1,6,1,4,4,7,0,2,4,4,9,5,1,7,1,8,2,5,0,1,3,3,5,5,2,2,3,5,8,6,6,0,0,3,9,0,1,8,0,6,2,2,9,1,8,2,6,6,4,9,5,1,6,5,9,5,7,3,8,5,2,3,5,6,3,5,7,2,1,0,4,3,2,2,5,9,3,2,2,1,1,5,1,7,4,6,5,8,9,8,6,2,6,4,2,5,2,4,8,0,1,7,8,3,8,5,3,3,2,9,4,2,8,7,2,8,6,7,8,8,7,9,7,3,0,7,7,6,0,9,1,8,7,2,4,9,0,4,4,3,9,2,6,3,4,2,9,6,2,6,7,6,9,9,7,2,4,9,1,3,5,7,7,8,4,9,1,1,0,8,3,5,6,9,0,5,5,4,0,8,3,6,4,9,1,4,4,9,8,2,2,4,4,0,9,1,1,9,3,5,0,6,8,2,5,7,5,0,7,2,7,7,5,1,7,9,5,8,7,9,7,1,9,1,7,5,0,1,8,1,0,5,1,0,5,9,7,8,9,9,5,6,0,1,9,3,1,1,3,2,3,1,2,8,9,9,0,2,9,5,4,7,3,9,5,1,9,4,6,3,2,0,0,0,8,2,6,1,2,4,9,5,7,9,9,6,7,4,0,7,1,5,4,4,6,2,0,4,0,1,8,7,7,5,8,9,6,6,5,0,6,2,5,5,7,7,7,2,9,6,9,4,8,4,0,4,6,1,5,1,6,7,7,0,6,1,2,8,8,6,4,1,0,5,7,6,4,2,0,2,0,5,1,6,9,4,2,2,0,1,6,5,9,8,6,3,7,3,8,5,0,6,5,7,3,0,6,8,2,1,2,9,9,4,3,0,3,1,2,9,6,8,4,6,9,0,3,6,3,2,5,9,9,4,3,6,2,2,5,8,1,6,9,7,1,9,1,7,1,4,8,2,7,4,9,9,8,8,0,4,3,3,9,8,8,9,7,2,3,4,9,2,0,5,4,4,3,4,8,5,7,4,1,1,9,9,7,5,9,2,7,7,2,3,2,2,0,1,6,9,0,7,8,7,3,9,6,1,9,0,4,5,3,4,2,3,2,1,8,2,0,2,5,4,7,4,2,0,7,1,7,7,8,5,6,2,2,0,2,5,7,2,0,6,6,9,0,1,2,4,0,5,5,2,1,6,8,7,9,7,6,7,1,8,0,3,0,6,1,4,6,9,1,4,5,8,4,8,0,5,7,8,2,8,6,7,4,9,9,8,7,7,1,3,8,7,2,1,7,5,3,7,2,2,2,1,6,1,2,1,3,0,2,4,3,8,8,3,7,5,9,9,7,3,3,8,9,2,3,2,5,5,5,2,6,1,9,2,4,8,0,7,9,5,2,7,3,2,9,2,1,9,9,5,0,9,6,4,5,8,8,9,0,8,8,4,2,6,2,2,2,4,9,7,5,3,3,9,1,0,7,0,0,3,9,4,8,4,8,6,6,4,0,3,4,9,0,4,0,3,9,1,4,5,8,0,2,4,3,8,8,6,6,2,8,4,3,8,3,9,2,4,3,7,4,7,7,9,3,6,3,8,1,2,5,0,9,3,5,0,3,0,5,5,0,3,3,8,8,4,2,3,4,3,9,3,5,2,3,2,8,7,2,2,7,5,9,5,8,9,4,7,6,6,1,5,9,2,8,7,5,6,3,0,7,9,0,0,7,8,7,0,5,2,4,5,9,6,0,0,8,9,3,4,0,7,7,7,3,5,1,3,9,6,1,0,7,3,2,9,3,4,0,8,5,3,2,2,5,7,4,3,6,1,3,0,3,1,4,4,7,4,2,1,1,3,8,4,9,1,0,7,1,1,5,6,8,9,2,0,8,7,7,3,6,6,5,0,8,8,9,0,6,5,9,9,3,2,8,6,1,9,8,2,2,4,4,9,6,1,9,5,5,4,7,4,6,9,7,5,4,5,5,2,7,7,3,6,9,9,0,9,1,3,9,5,4,7,2,8,0,9,9,6,5,9,2,4,9,8,9,9,0,8,5,4,3,0,7,9,1,1,8,6,4,5,7,9,4,3,7,5,3,1,1,6,0,0,3,8,1,2,9,3,3,3,9,3,5,8,5,9,6,3,9,8,5,3,4,9,2,0,8,6,3,5,2,5,4,4,3,7,9,9,9,5,9,1,2,4,5,4,0,0,4,1,2,3,1,7,9,3,1,4,8,7,1,1,1,5,0,8,1,8,8,4,9,2,6,6,7,5,4,4,7,1,3,1,5,4,1,4,7,3,6,0,8,7,6,6,1,7,9,1,6,5,4,8,2,8,1,8,4,0,6,8,4,5,3,1,4,2,2,2,9,4,0,1,0,5,7,2,5,3,4,3,9,0,8,0,8,6,4,5,5,9,8,3,4,5,6,6,8,0,7,8,0,7,3,6,7,8,4,6,3,6,0,3,0,7,5,6,3,4,5,2,1,5,7,6,3,4,8,9,7,9,8,9,3,7,1,3,1,1,2,7,1,4,1,0,2,9,6,5,5,4,0,3,1,1,1,2,2,8,1,3,1,1,6,9,7,5,2,5,4,8,7,7,4,9,3,9,0,1,8,9,5,6,7,9,6,2,1,0,9,3,5,9,4,4,4,2,6,8,0,3,4,5,7,2,0,1,4,2,0,6,1,9,8,7,6,1,1,2,8,3,8,6,1,9,1,2,2,5,4,3,2,5,2,8,2,2,7,5,7,6,7,6,9,9,7,3,9,8,6,2,6,9,5,9,3,3,7,0,9,8,5,1,2,7,6,5,7,5,6,9,5,6,7,6,7,3,4,5,0,9,4,9,2,6,8,8,1,7,2,1,8,8,7,1,5,7,6,5,6,3,6,7,6,3,4,6,3,1,3,9,4,7,6,1,0,9,2,0,9,0,6,2,5,0,4,8,8,3,2,8,5,6,9,0,0,2,7,8,7,7,0,2,3,9,6,0,8,0,6,6,1,6,9,7,9,1,6,4,0,5,9,2,8,1,5,4,3,2,1,9,9,1,8,3,5,6,9,8,0,4,7,8,8,7,9,8,7,4,0,5,9,8,1,8,1,8,0,5,2,3,9,9,6,2,1,5,7,5,4,7,1,7,3,3,6,8,8,3,7,7,9,2,1,7,0,9,1,7,2,8,5,5,4,3,2,4,8,8,2,3,0,4,9,3,3,6,6,0,7,0,0,8,9,8,6,6,4,5,9,4,9,8,2,5,1,8,4,2,7,0,7,0,0,4,2,1,6,7,0,6,0,5,6,4,0,1,7,5,9,2,9,4,9,6,3,9,5,8,0,0,2,8,0,9,6,7,8,8,4,5,6,8,0,5,8,4,3,8,8,3,4,9,3,3,6,5,4,9,9,3,0,4,3,0,6,7,4,7,5,8,7,5,1,0,8,0,1,4,8,8,3,3,3,1,8,4,4,3,8,5,7,9,3,9,5,5,0,4,5,0,7,8,2,2,9,1,6,1,6,5,7,5,8,7,5,7,6,6,0,8,2,1,0,3,0,2,2,7,4,9,8,2,6,7,1,0,8,1,8,0,5,1,0,0,1,3,1,8,9,2,8,9,1,2,7,0,2,3,6,1,1,5,0,2,1,6,2,5,9,3,1,9,7,2,8,7,3,5,7,4,3,3,1,1,9,3,4,8,8,4,6,2,6,4,3,8,7,7,1,3,4,4,6,9,4,1,3,2,0,7,2,4,1,2,9,9,1,4,1,3,5,1,9,4,1,5,4,6,0,3,0,8,1,7,6,9,4,9,1,8,2,4,9,5,9,6,9,3,3,2,5,0,1,8,4,8,1,6,0,4,9,1,3,9,4,5,0,6,7,1,7,4,6,5,0,8,1,0,0,1,2,3,5,2,9,8,9,6,4,6,4,5,5,1,2,2,3,3,7,1,3,9,6,8,8,3,6,3,4,4,0,0,6,7,4,2,8,7,8,7,8,6,8,1,4,3,6,5,0,1,5,3,4,0,9,0,1,6,8,3,9,3,9,1,1,4,4,4,1,5,7,3,8,5,7,1,8,9,0,9,3,1,0,3,8,3,1,9,2,6,2,5,4,4,9,0,2,5,1,5,1,8,9,2,7,7,9,7,2,2,6,7,7,9,0,7,2,8,3,6,2,0,0,6,7,3,4,7,3,0,8,8,5,8,2,7,6,2,5,1,8,2,6,6,3,7,2,3,6,7,5,8,1,9,4,5,6,4,6,7,7,7,7,3,9,9,4,8,3,5,5,7,1,7,4,5,6,0,3,5,5,3,4,1,4,5,6,4,8,9,6,8,0,1,9,5,6,6,8,6,9,4,6,2,5,9,9,6,4,4,5,5,8,0,9,2,3,5,5,6,8,9,4,2,7,9,2,8,8,2,1,1,4,3,7,5,4,5,3,6,3,5,5,3,9,8,5,0,0,1,1,0,7,9,2,5,8,1,0,6,0,6,5,6,5,9,7,1,0,1,9,9,3,1,1,7,0,4,3,1,8,7,3,8,2,3,8,7,8,2,3,6,6,4,5,0,7,4,8,3,4,0,7,1,8,6,0,5,0,8,5,1,3,3,2,7,4,9,1,6,5,9,5,1,1,1,6,2,1,5,3,6,2,4,4,6,1,1,1,8,7,1,9,9,4,7,2,3,4,5,9,7,6,9,5,3,4,6,8,2,0,8,4,9,8,6,8,4,6,7,4,7,7,8,2,6,7,1,2,1,0,6,0,5,1,9,8,2,2,9,4,6,0,7,0,0,5,8,5,3,2,9,4,1,6,7,2,0,7,3,6,8,1,9,8,0,8,8,7,0,6,1,9,8,7,4,5,0,8,6,9,8,6,2,7,9,3,5,1,9,2,5,8,8,5,1,2,2,2,1,6,9,7,8,4,8,9,0,2,3,8,7,9,6,9,7,2,6,2,4,6,6,7,8,9,4,2,9,7,3,7,1,3,5,5,9,8,4,1,7,0,6,9,6,3,4,7,0,7,4,4,5,8,9,1,1,3,9,1,3,3,8,3,0,0,5,7,2,3,3,4,7,1,7,5,5,7,0,3,8,5,1,7,0,5,9,0,2,0,8,7,5,3,6,4,6,9,3,0,1,6,8,9,9,9,1,2,0,0,9,5,2,9,4,5,8,4,0,5,7,6,5,5,4,0,2,2,3,7,7,8,6,8,0,6,7,8,4,6,0,5,1,4,1,8,9,6,9,9,5,8,4,8,4,0,1,0,8,6,9,4,0,8,6,9,3,6,0,8,1,4,6,8,0,4,6,0,2,1,2,5,4,5,1,6,1,4,7,4,3,1,5,4,4,5,5,1,1,3,3,5,7,4,2,7,0,1,3,5,9,6,8,2,2,2,0,0,8,1,3,8,9,3,2,1,1,1,3,9,6,1,1,1,7,7,7,1,4,4,5,0,1,3,7,4,7,0,9,7,7,1,2,9,1,7,9,8,3,3,6,5,2,3,1,9,2,9,3,8,7,5,7,1,4,7,6,9,2,5,8,4,6,9,8,1,2,0,4,2,1,9,8,4,9,7,6,3,0,4,8,8,3,2,2,9,5,5,7,2,3,2,7,6,8,2,3,4,4,6,4,6,1,5,2,7,8,4,9,1,4,2,9,2,9,1,6,9,4,1,2,6,1,4,8,4,9,9,3,4,5,5,5,4,0,2,7,9,5,7,7,1,0,9,9,2,9,4,9,1,3,1,2,4,6,3,2,4,6,7,9,1,5,2,3,2,6,4,4,5,8,5,9,9,0,5,8,5,9,1,0,9,7,9,7,6,8,6,6,9,9,6,6,3,0,8,4,9,9,3,3,2,0,7,9,7,8,2,9,2,7,9,9,0,2,8,4,0,4,9,0,3,9,4,6,5,6,6,9,1,3,5,5,6,4,4,6,1,2,2,4,4,2,2,0,4,1,6,3,4,7,0,7,0,3,3,6,5,7,7,8,3,9,9,9,5,2,3,7,6,7,9,4,0,8,8,3,5,3,7,6,5,8,1,9,5,9,2,7,4,9,5,2,4,1,8,7,6,6,2,8,6,5,3,4,6,2,2,5,2,5,3,9,3,7,2,4,2,5,7,3,3,2,4,3,1,7,9,3,5,6,3,0,0,0,8,5,9,9,6,3,0,0,6,1,2,1,4,0,2,0,1,5,8,0,4,5,4,0,8,8,1,5,4,6,5,9,7,6,8,4,2,2,5,9,0,5,0,0,3,5,3,1,8,7,6,2,0,4,3,1,3,7,6,4,9,8,5,0,9,6,6,5,7,3,2,2,0,0,1,7,6,6,9,2,0,4,2,8,0,6,5,5,3,0,0,7,4,6,7,9,8,3,9,6,1,6,3,9,6,3,4,5,8,4,9,0,1,8,4,0,8,8,8,4,2,6,8,1,3,7,3,0,9,6,5,3,8,3,8,8,1,9,5,5,3,7,7,2,5,8,7,7,0,5,5,7,9,2,9,2,5,9,7,1,6,9,9,2,9,6,2,4,8,8,6,3,6,0,7,6,6,0,4,3,2,3,7,3,9,6,5,7,0,8,5,3,5,8,3,5,9,7,4,5,0,8,7,1,8,2,3,5,0,6,8,4,8,5,7,1,0,3,2,6,6,8,3,7,9,8,0,6,2,9,0,0,4,5,8,5,5,9,4,8,0,7,1,3,7,5,2,4,4,4,6,0,3,0,3,6,2,9,9,8,5,5,1,2,0,9,2,2,9,7,3,4,9,4,5,7,2,2,9,9,9,0,5,4,5,6,0,4,7,5,7,0,3,2,8,0,0,1,9,0,6,9,2,6,8,8,5,9,8,1,5,1,4,2,5,3,6,0,5,6,5,1,1,7,1,2,4,3,1,0,4,6,4,5,9,0,0,1,2,5,4,1,5,9,4,8,2,8,7,5,8,9,3,5,2,2,6,7,0,6,6,9,6,6,1,3,9,7,9,1,1,4,4,3,5,1,8,5,9,0,6,1,8,2,6,9,2,3,5,5,7,2,5,4,0,0,5,9,7,5,1,5,7,3,5,8,4,1,0,7,8,4,7,2,1,9,6,5,3,2,2,4,1,4,4,7,5,1,9,3,2,7,2,9,4,3,0,5,5,8,3,4,2,8,2,0,9,0,2,1,6,3,8,8,4,2,6,1,0,0,6,0,2,4,2,2,1,4,2,0,1,5,6,1,8,5,5,8,7,4,3,7,7,7,6,7,6,0,8,8,7,9,0,1,9,6,1,2,8,0,7,5,3,5,8,1,0,3,2,7,7,3,2,3,8,7,7,5,7,6,4,3,2,5,5,0,2,9,6,7,3,0,3,2,0,8,0,0,5,1,8,2,4,1,8,1,7,6,3,2,1,5,3,8,5,2,4,9,9,7,1,9,1,5,9,7,8,0,4,4,8,8,8,6,8,4,4,0,3,8,3,8,2,4,5,5,2,0,3,5,9,6,5,2,6,3,5,0,6,0,5,2,2,0,9,6,2,8,7,9,3,6,1,6,2,2,8,5,2,6,3,7,9,5,9,3,1,4,9,2,9,5,4,8,9,9,9,3,2,7,2,7,6,4,3,5,2,4,1,4,3,1,9,8,8,8,7,6,7,6,6,0,2,5,7,7,9,4,5,0,0,5,8,9,7,6,0,1,3,5,7,0,6,7,8,9,4,6,1,3,3,6,6,1,0,6,4,4,4,6,3,2,6,2,9,3,0,3,4,7,3,6,0,9,8,3,4,6,9,7,0,0,7,7,1,1,5,8,3,8,4,9,0,5,6,6,4,0,9,0,9,3,9,7,4,2,1,5,7,6,5,9,9,9,2,7,0,5,8,2,8,2,0,9,9,7,1,3,5,1,8,7,7,8,5,4,3,2,3,5,4,8,2,2,6,8,7,8,0,9,7,1,4,0,9,4,9,0,0,4,6,2,9,0,7,0,1,4,7,5,6,5,3,8,2,3,9,9,8,7,4,0,8,1,9,5,7,5,6,0,0,9,3,7,4,6,9,9,3,3,7,6,1,9,8,1,3,3,5,4,2,0,2,4,3,9,8,4,5,2,4,5,0,6,3,5,1,9,9,5,6,1,4,1,6,8,1,7,0,0,5,2,2,2,2,7,4,2,6,0,1,5,7,1,8,9,7,6,3,7,7,0,3,4,6,2,7,3,1,1,3,3,9,6,5,6,5,8,6,6,2,1,1,3,7,5,3,6,7,2,1,7,2,5,1,0,8,4,2,6,4,1,4,3,2,8,7,0,7,9,9,6,5,0,4,0,3,9,6,7,8,4,9,5,4,9,0,4,8,4,7,6,8,4,5,9,1,1,2,6,8,8,2,8,8,5,7,9,4,4,8,9,0,2,7,2,1,9,5,2,6,4,8,9,4,7,3,1,3,9,7,2,1,6,8,1,8,8,7,7,7,3,7,2,5,0,8,1,6,4,6,6,1,0,7,8,2,8,3,3,2,3,7,7,5,8,2,1,1,2,0,3,9,6,8,8,9,5,8,6,9,8,9,5,3,6,8,6,4,4,2,6,6,2,6,8,7,4,0,1,8,2,9,3,1,2,1,4,6,6,1,8,5,4,7,1,7,2,5,9,9,0,4,9,4,5,9,9,3,0,4,5,1,4,6,2,3,5,6,8,8,3,2,1,4,6,9,2,0,4,5,8,4,0,6,1,9,7,3,0,0,7,6,5,2,6,5,4,3,7,1,9,9,7,0,7,9,9,3,0,3,2,3,3,9,6,0,2,2,5,4,4,2,0,5,8,8,8,8,9,1,6,6,5,0,1,0,7,8,3,3,9,1,8,7,4,8,7,4,1,8,7,5,0,5,4,3,4,5,0,8,1,7,0,4,7,1,6,6,0,5,4,1,4,9,0,6,3,4,3,8,9,3,4,7,0,9,2,1,8,2,9,9,2,0,0,4,9,7,1,1,0,7,0,6,0,3,4,6,7,4,3,6,6,4,1,0,1,1,8,6,9,9,0,6,4,8,4,7,2,4,3,9,8,2,9,4,2,7,2,9,5,0,3,4,1,8,5,5,6,6,2,0,4,6,1,4,9,8,5,2,5,1,2,1,3,0,9,2,3,3,4,2,6,1,7,8,7,1,2,3,9,9,9,7,2,1,1,1,5,9,6,1,4,2,5,2,4,9,0,4,3,1,5,1,8,2,1,0,8,0,2,8,8,8,6,5,4,4,0,3,6,0,7,0,9,6,4,0,1,5,4,2,0,5,7,4,0,5,7,1,6,2,0,1,0,8,3,5,7,4,0,9,5,5,7,5,8,9,6,5,9,8,8,3,7,8,8,8,9,1,7,6,3,8,1,5,0,0,3,6,3,7,8,9,5,3,2,0,4,6,9,8,5,8,2,3,1,9,7,3,2,6,2,3,7,6,5,7,8,9,1,2,6,6,5,2,2,9,1,2,0,5,9,7,7,8,9,3,9,0,4,7,7,1,8,4,1,7,6,8,0,4,2,3,8,0,9,4,0,3,1,7,3,9,9,8,2,1,0,7,9,0,3,0,1,5,0,7,4,6,2,9,8,2,9,9,6,9,1,2,2,3,7,5,2,0,2,7,7,8,5,6,8,4,8,2,2,5,4,9,3,8,1,7,3,0,1,0,2,3,8,3,6,8,6,4,6,5,6,1,3,4,7,7,1,7,8,7,0,8,4,8,4,5,6,0,9,3,3,1,7,2,6,8,0,9,8,4,2,9,8,4,7,3,6,0,8,4,9,7,4,4,6,0,9,9,3,7,1,9,2,0,2,3,9,1,3,7,7,6,4,4,3,2,3,6,6,0,8,4,5,4,5,8,1,9,0,8,1,1,5,7,4,1,7,8,5,1,6,4,1,1,6,2,7,5,3,6,3,6,0,4,4,6,8,7,9,8,2,1,7,3,4,7,9,7,8,5,6,6,8,8,8,2,6,6,3,8,4,1,4,4,3,2,6,6,0,2,5,4,6,7,7,8,4,3,9,0,4,0,6,1,8,0,6,7,7,4,0,7,8,5,7,8,1,5,4,2,7,1,5,9,2,3,7,4,8,5,6,7,7,3,1,1,5,5,7,3,3,8,6,1,2,3,5,3,2,5,6,6,3,6,7,2,7,5,1,4,1,3,8,7,6,6,2,2,1,2,2,3,3,0,0,1,6,8,6,6,0,6,5,2,4,6,7,3,0,3,5,2,0,8,7,7,0,6,0,2,4,3,3,6,5,6,2,8,8,2,6,7,9,0,7,0,9,3,4,3,2,9,0,1,8,5,3,0,6,8,4,5,6,0,0,0,5,4,6,3,9,0,6,0,2,1,1,3,1,5,7,4,0,5,2,2,4,5,4,6,4,7,5,9,2,4,4,2,5,7,4,7,0,7,1,8,8,8,9,9,6,8,4,7,9,4,8,8,9,9,2,8,8,9,2,2,4,8,1,2,3,9,8,2,9,4,8,7,5,6,1,4,6,2,2,2,5,3,0,5,8,4,7,2,2,7,6,0,6,7,9,5,7,2,2,2,9,7,1,6,2,9,5,4,6,1,4,7,2,9,0,6,6,4,5,6,8,3,2,0,0,0,8,7,5,6,3,8,5,8,9,8,6,4,5,0,7,7,3,7,1,4,2,0,4,9,7,8,5,0,9,6,5,3,0,4,5,3,0,0,1,1,2,3,9,9,0,6,5,9,9,7,2,0,4,1,2,2,4,4,8,2,1,9,5,6,1,5,0,9,1,9,8,3,7,3,5,9,4,1,3,1,3,2,4,9,3,4,5,9,7,2,2,5,1,4,3,0,1,6,4,1,7,3,2,0,1,1,4,8,7,8,2,3,1,1,7,6,6,2,6,4,9,3,7,5,1,3,4,0,0,7,3,0,8,1,0,9,1,9,6,5,7,9,1,6,5,7,8,3,7,2,2,0,2,4,0,8,5,1,2,8,4,1,2,1,2,1,0,4,3,6,1,4,9,0,5,5,4,9,2,3,5,5,9,3,8,8,6,2,6,8,1,9,4,7,8,9,3,7,8,2,0,3,6,8,6,2,2,6,0,5,1,0,6,4,2,8,8,3,5,8,8,2,6,9,0,0,0,1,8,8,6,3,5,9,5,2,6,7,1,6,6,5,8,7,0,9,5,6,3,7,2,7,1,7,2,3,4,1,2,2,9,0,0,7,0,4,7,4,4,1,1,6,8,6,1,9,0,6,7,7,5,3,4,3,1,0,8,1,6,2,4,1,9,7,5,1,7,2,6,0,9,3,3,0,6,1,5,1,3,9,3,7,1,7,8,1,8,4,2,9,0,7,2,6,1,2,4,0,9,3,7,1,0,6,5,1,7,5,6,3,7,1,1,7,7,9,1,7,3,1,3,6,3,9,3,3,0,2,7,5,1,3,0,4,0,0,2,6,3,9,2,0,1,3,4,6,4,8,8,8,0,2,2,8,4,7,6,9,6,8,3,9,0,3,8,9,4,6,7,8,3,0,5,6,6,4,6,6,1,9,8,0,4,9,9,2,7,6,6,8,3,9,1,0,9,8,0,3,7,6,4,8,9,3,1,2,2,4,8,4,8,5,7,9,7,4,9,1,5,8,5,9,1,0,5,8,8,2,0,8,8,1,4,2,2,0,5,7,6,0,3,3,8,1,8,3,9,9,9,6,3,6,2,2,7,8,3,3,2,7,1,2,1,4,0,2,6,6,9,4,9,5,2,5,1,3,5,3,7,7,7,0,2,4,7,6,1,1,0,4,4,2,3,8,8,7,8,4,2,3,0,2,9,5,4,2,4,4,5,2,0,2,1,4,9,4,0,0,3,0,4,8,8,5,4,7,1,4,2,8,1,5,3,6,1,5,9,9,0,5,1,1,4,2,9,3,0,2,4,3,0,8,4,1,6,3,7,5,6,6,6,4,3,9,2,6,0,6,1,4,1,0,6,4,5,0,2,1,6,2,3,8,3,5,5,4,3,1,8,7,9,8,3,9,3,2,2,6,6,9,4,8,6,7,6,7,5,5,1,4,6,5,7,7,2,4,9,6,2,4,8,8,4,6,4,1,5,6,6,4,2,3,6,7,8,5,7,9,8,0,9,8,9,0,1,9,6,1,7,6,2,4,9,2,8,9,0,2,5,3,8,5,0,5,7,1,5,4,5,1,9,7,3,7,2,5,5,1,5,7,7,4,0,1,4,6,0,0,8,2,8,6,7,4,9,7,4,7,5,6,0,9,9,9,4,3,4,5,9,4,6,4,3,3,8,0,3,2,6,3,7,0,5,0,0,9,5,2,2,7,3,0,2,4,7,5,0,0,5,1,9,5,5,6,4,8,8,8,5,4,2,5,1,0,2,3,0,6,0,7,4,2,8,2,4,5,3,8,9,5,5,6,0,9,3,0,9,0,9,5,4,3,6,7,4,4,0,2,2,9,4,6,6,9,8,1,1,7,4,5,4,9,7,7,0,1,6,5,2,3,6,1,5,5,3,9,1,7,6,4,2,0,4,0,9,3,5,1,9,7,2,9,5,9,4,9,8,7,9,2,7,0,5,4,4,7,4,5,2,2,8,8,7,0,3,7,8,5,1,5,6,8,4,5,3,8,6,1,0,2,5,7,4,4,4,0,7,7,2,3,6,4,9,9,0,5,2,3,3,0,2,9,8,8,2,9,4,7,6,1,3,9,3,0,7,1,9,0,6,5,4,7,4,8,3,0,9,6,2,8,9,4,6,6,0,9,9,7,1,9,4,9,5,5,9,3,9,6,4,5,1,0,1,7,5,5,6,3,6,9,4,6,6,1,8,2,0,6,2,0,9,5,0,0,4,5,4,2,0,4,5,1,2,3,5,6,6,2,5,5,8,9,6,8,8,4,6,1,6,7,9,0,1,4,6,3,6,8,7,4,6,2,5,3,0,0,5,4,1,3,2,5,1,5,2,4,5,3,2,5,3,5,2,9,4,6,5,4,0,6,4,3,6,0,8,3,9,4,6,9,4,7,4,8,7,6,6,9,4,2,1,1,3,0,5,0,0,2,3,7,1,7,7,1,6,4,6,0,1,4,4,6,5,8,8,6,7,3,8,2,6,2,6,6,7,7,5,8,9,1,6,7,3,0,8,6,0,6,4,2,0,8,5,2,7,8,2,5,6,8,0,4,7,0,3,7,5,8,6,8,6,5,6,2,4,2,4,2,4,3,6,8,3,2,0,3,8,3,9,2,8,3,7,4,5,9,1,0,7,4,2,3,7,9,9,9,1,2,5,1,7,9,1,3,9,7,5,2,4,8,4,2,9,5,5,7,1,1,4,1,0,4,6,4,2,3,3,2,7,0,4,6,6,0,5,6,0,7,3,3,2,1,8,7,2,8,3,8,4,7,6,1,2,0,4,5,2,4,8,3,9,0,1,8,1,4,9,6,6,8,8,1,4,0,0,5,2,3,7,2,1,0,3,7,1,5,9,8,6,4,4,9,7,7,8,3,2,5,9,7,1,7,7,4,3,3,6,0,6,5,9,4,4,6,9,6,3,7,8,0,1,8,6,2,2,9,2,8,1,7,0,9,6,3,0,6,7,2,7,0,6,9,6,4,7,8,2,2,6,3,1,7,6,4,7,6,1,4,9,4,0,1,7,3,6,8,4,9,3,4,7,3,7,3,3,8,9,9,1,1,3,7,7,3,3,9,6,4,0,5,2,6,0,0,1,1,9,0,9,0,9,8,5,4,9,7,9,5,4,6,2,5,7,0,1,7,1,0,8,5,0,5,9,7,4,1,6,1,9,3,5,3,8,8,9,4,8,5,2,5,3,4,8,3,9,7,3,7,4,6,0,6,6,4,8,5,4,9,6,1,3,1,9,7,5,4,9,0,2,4,3,1,1,3,6,6,9,5,2,6,4,2,1,9,0,6,9,5,1,9,3,2,8,4,6,6,4,1,8,6,6,9,2,7,3,3,7,0,4,1,8,2,7,7,9,9,7,1,4,8,2,2,6,9,6,2,5,8,7,0,7,4,1,3,7,4,8,5,5,2,8,0,8,8,8,3,4,4,5,3,0,2,7,3,4,2,9,8,9,3,1,3,9,2,6,0,9,0,5,3,6,6,2,2,9,4,4,4,9,2,1,7,4,2,1,0,1,8,1,7,7,2,3,7,9,8,0,4,1,8,9,9,8,1,0,5,7,4,6,6,5,2,4,9,1,1,9,9,6,4,8,7,4,8,4,0,5,4,3,0,3,9,6,7,6,6,2,7,3,1,5,7,2,5,6,7,9,3,2,1,3,5,6,1,2,0,1,9,2,5,1,1,2,5,6,4,4,7,2,2,6,8,6,8,2,1,3,0,8,5,4,0,9,8,6,9,9,7,3,2,6,4,9,4,4,9,0,0,8,8,6,0,8,7,6,7,0,1,8,5,8,7,7,6,5,0,7,1,0,3,7,3,2,6,4,7,7,1,7,3,3,1,3,3,0,2,5,5,2,7,3,8,7,8,8,9,4,6,3,2,6,9,9,1,8,0,9,5,3,8,0,9,4,0,0,5,4,2,2,0,5,1,8,4,8,6,4,6,2,3,5,8,3,8,5,7,2,6,2,4,3,2,1,7,9,1,3,2,5,8,2,3,3,4,7,1,6,1,0,9,8,8,3,4,9,6,0,8,5,2,3,3,3,2,8,1,8,2,5,4,7,7,3,8,6,6,3,4,5,3,0,9,2,3,3,0,3,5,0,4,9,9,9,5,3,2,3,1,2,1,3,0,6,1,5,0,9,9,5,7,0,9,4,7,2,6,9,3,4,8,4,5,4,3,9,1,3,1,9,9,3,9,5,5,5,3,1,8,7,9,2,4,3,1,8,7,5,3,7,5,5,7,3,8,3,8,0,5,6,4,4,9,1,3,6,7,9,3,3,8,9,9,2,5,9,7,1,2,5,6,4,7,6,8,1,8,7,0,8,3,7,3,4,2,7,3,8,8,6,5,4,8,5,3,5,1,9,9,6,1,4,8,0,6,2,3,6,7,5,2,0,1,8,0,6,0,5,6,6,3,9,9,5,9,6,9,8,7,7,1,7,2,1,8,9,1,7,5,5,6,0,5,7,8,3,3,2,1,9,5,5,6,6,1,7,9,1,6,2,9,6,1,6,2,1,4,4,2,8,9,1,0,7,1,5,6,9,9,6,6,5,9,7,5,2,0,2,1,1,4,4,5,5,5,4,1,8,9,1,7,8,8,6,2,2,8,8,6,5,7,8,2,6,0,4,4,4,9,0,3,7,6,2,3,1,1,7,5,7,9,7,5,0,8,2,0,2,3,5,2,6,9,0,7,8,5,6,6,4,2,7,4,8,2,1,2,1,5,2,1,5,7,5,7,0,7,0,2,4,2,1,9,1,7,2,5,5,1,8,5,8,6,1,0,3,1,7,9,3,8,1,9,3,6,8,3,6,7,2,2,2,2,6,8,3,3,1,2,2,3,0,4,6,1,1,8,7,6,8,3,9,9,6,3,6,3,6,6,0,8,2,0,5,8,8,6,0,0,9,9,6,3,8,7,1,6,7,2,1,3,5,7,2,4,3,5,1,0,9,3,6,1,9,8,7,6,5,8,9,4,0,2,7,4,3,7,0,9,3,2,5,1,4,1,3,1,4,6,7,9,4,7,0,9,5,9,4,6,6,8,1,4,2,4,7,0,9,8,2,3,8,7,9,4,1,8,2,5,9,5,8,5,8,0,6,3,2,4,5,6,6,9,2,6,2,9,8,1,8,2,6,9,5,3,1,9,4,9,2,1,0,5,0,5,9,1,9,7,5,9,7,9,1,4,4,0,1,9,6,3,0,5,5,1,9,3,6,6,8,1,9,9,3,1,3,6,6,2,5,7,5,7,0,9,9,5,0,1,4,8,7,3,8,8,6,2,0,3,7,4,9,7,1,8,0,5,4,0,0,4,0,3,1,5,4,7,0,1,0,5,2,4,7,8,0,2,1,5,4,9,5,9,6,1,4,9,1,6,5,2,4,8,5,5,9,5,0,1,2,2,1,9,9,7,6,5,8,6,4,2,2,7,7,7,3,2,9,2,2,9,2,6,4,2,9,2,2,8,0,7,6,6,5,5,6,3,7,4,8,7,9,2,6,1,7,7,8,6,6,2,1,9,1,0,0,9,7,4,1,5,7,3,4,0,3,0,5,1,4,0,5,2,6,2,1,3,8,8,7,2,6,2,6,8,9,5,0,3,7,8,6,4,8,5,1,2,1,1,2,4,7,5,0,2,8,2,8,9,0,8,1,6,9,0,7,5,8,2,9,2,5,2,3,6,0,3,8,4,4,3,6,9,1,3,8,6,1,0,9,2,7,1,7,5,9,9,4,5,0,0,0,9,2,7,8,6,4,1,8,8,9,9,0,5,6,3,8,3,1,6,8,3,3,9,3,9,2,5,9,7,1,1,2,3,4,8,6,7,2,5,5,4,7,2,8,6,1,1,1,9,0,2,9,2,1,7,2,6,3,0,2,7,7,7,8,6,7,7,3,3,2,3,6,0,7,3,4,8,3,6,7,0,9,0,8,4,5,8,9,9,1,1,0,2,7,3,8,8,2,4,4,6,8,9,1,6,7,8,7,6,0,7,3,2,8,8,9,8,7,7,1,6,3,0,4,5,3,3,6,6,0,1,6,4,0,8,3,4,8,2,4,8,2,4,4,3,4,9,2,6,6,2,2,5,4,0,0,3,7,8,8,2,1,6,2,9,6,2,0,3,2,6,1,1,4,6,6,0,6,7,9,4,4,4,4,4,5,1,8,6,2,6,2,3,7,5,9,9,0,3,2,5,7,8,3,3,9,3,8,7,5,0,6,2,3,7,4,7,5,9,3,6,9,4,4,8,4,4,1,4,2,2,7,2,0,3,8,3,4,0,7,8,4,0,2,1,5,1,8,9,4,6,7,2,4,8,3,5,5,9,3,2,4,6,1,8,6,2,5,9,1,2,9,0,5,0,4,8,8,9,0,7,0,8,0,4,3,0,9,7,7,5,0,2,0,1,7,6,6,8,2,3,1,2,6,9,9,7,6,5,4,6,9,7,2,7,6,1,0,5,0,4,7,2,2,1,2,5,3,7,2,0,2,6,2,9,1,1,2,4,5,4,4,1,0,0,7,3,0,5,8,5,2,5,6,2,9,7,4,9,5,8,6,6,4,4,9,8,4,4,3,9,9,0,2,3,5,9,3,9,2,7,1,1,5,0,3,1,8,7,9,9,7,2,9,0,3,6,9,9,5,5,3,4,7,7,7,0,2,5,4,4,8,8,2,1,0,2,6,2,9,9,8,1,7,2,2,1,0,6,1,6,3,8,1,0,4,7,2,3,0,4,2,3,1,0,2,5,5,7,9,5,2,7,1,7,7,7,3,4,4,0,1,8,6,8,9,3,4,7,6,9,6,4,4,2,2,6,2,2,9,9,9,5,8,6,0,1,1,7,1,7,1,0,6,3,3,9,9,4,5,6,6,7,9,2,1,5,2,9,7,9,1,9,0,4,7,6,9,9,7,1,2,6,8,2,4,7,2,8,8,6,3,7,1,2,5,5,7,6,3,6,9,0,0,5,0,1,5,5,9,1,1,0,9,3,2,4,1,9,0,8,5,0,3,6,3,1,9,9,8,8,7,1,6,9,7,0,6,1,9,8,3,1,9,6,3,9,9,2,5,2,2,0,4,9,4,9,5,3,9,6,9,6,7,7,0,0,3,2,3,6,0,6,8,4,1,8,6,4,2,9,7,6,4,9,4,3,0,0,6,7,6,8,5,4,0,3,8,3,3,2,7,5,6,3,2,2,9,9,8,2,3,7,2,5,2,4,9,1,9,0,8,5,0,6,8,9,4,8,8,7,8,5,1,4,1,6,1,7,1,8,8,1,9,5,1,1,2,5,5,8,3,7,9,7,2,7,8,4,6,8,8,9,2,9,0,7,3,9,0,8,9,9,6,9,8,3,2,6,0,7,9,5,3,5,0,1,5,9,4,1,1,0,6,5,2,3,3,8,5,8,2,3,1,2,0,0,1,8,0,7,2,9,1,6,2,7,5,0,4,7,3,5,7,2,1,1,2,8,4,2,7,5,4,4,5,6,4,9,8,2,4,3,8,0,4,5,4,9,5,1,2,5,9,1,3,1,0,7,8,1,9,7,9,7,6,6,4,4,2,0,2,4,0,9,8,1,3,4,7,9,4,2,1,0,3,4,2,0,0,9,3,3,2,5,2,2,3,9,2,4,5,3,3,6,0,3,3,5,5,4,3,5,6,7,2,9,8,4,0,0,2,4,0,6,4,2,8,9,7,0,0,0,9,3,3,9,9,0,2,8,1,8,9,1,7,4,9,4,4,9,3,4,2,7,0,6,0,8,2,6,5,9,2,8,9,6,6,7,2,4,9,6,1,8,4,8,4,2,3,2,8,1,3,7,0,6,9,8,9,5,0,4,3,4,7,2,9,0,6,3,3,9,7,2,6,7,9,6,0,1,6,6,2,2,5,3,2,6,5,3,8,6,0,0,0,9,9,7,8,2,7,6,3,4,8,5,9,5,8,5,4,3,8,0,0,4,7,3,2,0,1,3,8,9,0,4,2,5,5,9,9,8,6,2,8,1,4,5,3,9,5,4,0,4,6,1,1,4,0,0,0,1,9,5,6,6,6,1,2,8,5,0,9,9,1,5,6,2,1,4,1,8,2,5,8,7,6,7,1,6,1,6,2,2,9,8,3,7,7,5,4,6,2,6,2,4,9,0,2,9,0,2,1,1,1,4,7,9,4,8,3,3,3,0,8,5,0,9,4,5,8,8,5,6,4,9,5,7,0,6,8,2,5,4,5,0,9,9,9,0,1,8,4,3,8,6,6,9,6,5,9,8,1,1,9,7,4,8,2,6,7,0,6,2,0,6,2,7,2,5,2,9,4,8,6,1,9,6,5,6,9,1,5,9,6,8,6,6,9,1,8,7,1,4,5,3,1,3,2,0,6,0,4,3,5,3,8,7,8,6,2,5,9,8,3,6,9,8,1,0,2,1,0,4,9,7,9,2,7,6,1,4,1,2,2,0,5,4,6,2,9,9,3,9,5,3,3,8,9,0,0,3,7,8,5,5,7,8,5,5,7,8,6,5,6,1,8,8,0,7,7,6,2,4,3,3,8,7,7,2,2,4,9,4,3,7,2,1,5,7,2,2,4,5,8,3,4,3,9,4,5,0,4,8,4,2,9,0,2,5,4,1,5,5,4,5,0,6,5,7,6,6,5,1,4,8,8,7,6,6,4,3,6,7,0,4,9,0,4,4,2,0,9,4,5,4,4,2,2,0,3,5,9,4,5,0,0,5,1,5,1,3,8,0,6,8,4,0,1,7,9,5,3,4,7,1,4,0,4,6,0,4,0,6,3,9,7,3,1,6,5,0,0,2,4,1,6,0,7,4,2,0,5,4,0,0,3,8,0,8,4,4,7,7,3,7,7,5,4,5,7,9,5,2,3,4,2,4,9,1,7,7,7,1,0,1,9,0,1,5,3,5,0,4,8,7,1,5,0,1,7,0,3,9,9,2,7,5,8,0,5,0,7,6,5,1,9,0,8,1,7,8,6,8,5,2,9,9,2,7,8,9,4,3,1,3,8,4,9,4,9,4,0,1,2,7,0,4,4,3,6,0,5,3,7,3,8,6,7,4,1,2,3,3,9,5,5,0,3,6,5,6,6,6,2,9,2,0,9,8,2,1,1,4,0,9,3,3,2,7,7,0,6,0,1,0,2,9,3,8,6,9,2,7,8,0,7,4,0,2,8,8,2,8,0,4,0,3,7,8,9,4,6,0,0,7,0,9,7,5,0,1,5,5,7,4,7,4,8,5,5,9,1,0,1,9,9,1,0,6,5,0,3,6,3,6,2,2,3,7,9,9,5,1,9,9,8,2,8,6,7,8,3,1,8,1,2,3,3,6,5,5,9,7,0,0,9,7,8,8,2,5,4,6,8,3,5,3,9,5,1,3,8,1,0,4,0,6,4,8,5,9,8,6,6,5,7,4,9,9,0,4,6,9,6,6,6,2,4,8,4,8,0,6,4,0,1,4,9,8,0,4,1,6,5,8,2,7,7,4,3,6,6]"
                    },
                    {
                        "username": "ms681729",
                        "content": "this solution is working properly for all cases expect 9999999999 this case don\\'t know why help me.\\n\\n\\n\\n\\n\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] arr, int k) {\\n        ArrayList<Integer> list=new ArrayList<>();\\n       int sum=0;\\n        int prod=1;\\n        for(int i=arr.length-1;i>=0;i--){\\n            sum+=arr[i]*prod;\\n            prod=prod*10;\\n        }\\n        sum=sum+k;\\n\\n        while(sum!=0){\\n            list.add(sum%10);\\n            sum=sum/10;\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}\\n\\n\\n"
                    },
                    {
                        "username": "ruchitakb7",
                        "content": "first it stucked at 3rd test then i changed data type to long int now it again stucked at 90 ..now what should i do?"
                    }
                ]
            },
            {
                "id": 1805225,
                "content": [
                    {
                        "username": "Yash_kumbhawat",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) {\\n        list.add(0, (num[i] + k) % 10);\\n        k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n        list.add(0, k % 10);\\n        k /= 10;\\n    }\\n    return list;\\n    }\\n}"
                    },
                    {
                        "username": "heg816",
                        "content": "Because num can represent a number as large as (10**10000) - 1, it is wiser to consider k as if it were a vector<int>/List/your language's version of the list ADT (even if your implementation doesn't actually create a new list ADT to store k). After you start thinking along those lines, the problem is a lot more like \"add strings\" or \"add two numbers\".  "
                    },
                    {
                        "username": "naturehermit",
                        "content": "What i dont get is,\\n1. If the input is constrained why is the input being supplied for over 10^4 and why a correct answer is expected.\\n2. Why the expectation of list is a list of integer, why it cant be long, big integer etc etc\\n3. Why is TestSuite based on certain expectations that different to how the question is posed and how the constraints are defined.\\n"
                    },
                    {
                        "username": "dixit70",
                        "content": "Looks like easy but solving it needs a lot of thinking."
                    },
                    {
                        "username": "vpk3105",
                        "content": "I think this is a medium level problem"
                    },
                    {
                        "username": "ram_2117",
                        "content": "Can anyone please tell what is wrong with the following answer?\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n         int m = num.size();\\n        int number=0,n=0,l=1;\\n        vector<int> ans;\\n        for(int i=m-1;i>=0;i--)\\n        {\\n            number=number +num[i] * pow(10,n);\\n            n++;            \\n        }\\n        number =number +k;\\n        int s=0;\\n        while(number>0)\\n        {\\n         s=number% 10;\\n         number =number/10;\\n         l++;\\n         ans.insert(ans.begin(),s);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Yongbi",
                        "content": "If _number_ is a very big, like `82773929293988383832920292838383...` then int is does not suit for a $10^4$ length number. Then, the division by 10 take a rounding error for the next loop.\\nIn Python, I replace /10 by floor division //10.\\nMaybe it will be helpful!"
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time take for solving any question?\\nbecause I  am spent lots of time on every particular which is so unprofessional and sometimes doubt occurs in my mind like maybe coding is not for me.\\nplease tell me a solution to how I am dealing with all these questions. "
                    },
                    {
                        "username": "Yongbi",
                        "content": "Just keep going, continue to learn and pratique more. \nSometimes it only takes me a few minutes for a difficult task like treenode, but it also takes a few hours for array DP and Trie. Maybe, the approach is not reasonable, as well as not enough knowledge to solve the considered problem. In this case,\n1. It is better to read hints (learn).\n2. If you read the hint and still can't solve it, look it up in the solution, and upgrade it yourself (pratique).\n3. Find and solve similar problems (pratique more).\n\nGoodluck. "
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time give to any particular question?"
                    },
                    {
                        "username": "00__rizwan__00",
                        "content": "genreally 30-40 min on one question. if you are not able make any logic then live it try again next day ."
                    },
                    {
                        "username": "190032122",
                        "content": "using map and nested for loop in python3"
                    },
                    {
                        "username": "hdtv0199",
                        "content": "What\\'s wrong with this: \\nvar addToArrayForm = function(num, k) {\\n    if(num.length >= 1 && num.length <= 10^4 && k >= 1 && k <=10^4){\\n        for(let i=0; i<num.length-1; i++){\\n            if(num[i] < 0 || num[i] > 9) return -1\\n            if(num[i] === 0) num.filter(number => number !== num[i])\\n        }\\n        return Number(num.join(\\'\\')) + k\\n    }\\n};\\n\\naddToArrayForm([4,5,5], 181)"
                    }
                ]
            },
            {
                "id": 1803704,
                "content": [
                    {
                        "username": "Yash_kumbhawat",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) {\\n        list.add(0, (num[i] + k) % 10);\\n        k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n        list.add(0, k % 10);\\n        k /= 10;\\n    }\\n    return list;\\n    }\\n}"
                    },
                    {
                        "username": "heg816",
                        "content": "Because num can represent a number as large as (10**10000) - 1, it is wiser to consider k as if it were a vector<int>/List/your language's version of the list ADT (even if your implementation doesn't actually create a new list ADT to store k). After you start thinking along those lines, the problem is a lot more like \"add strings\" or \"add two numbers\".  "
                    },
                    {
                        "username": "naturehermit",
                        "content": "What i dont get is,\\n1. If the input is constrained why is the input being supplied for over 10^4 and why a correct answer is expected.\\n2. Why the expectation of list is a list of integer, why it cant be long, big integer etc etc\\n3. Why is TestSuite based on certain expectations that different to how the question is posed and how the constraints are defined.\\n"
                    },
                    {
                        "username": "dixit70",
                        "content": "Looks like easy but solving it needs a lot of thinking."
                    },
                    {
                        "username": "vpk3105",
                        "content": "I think this is a medium level problem"
                    },
                    {
                        "username": "ram_2117",
                        "content": "Can anyone please tell what is wrong with the following answer?\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n         int m = num.size();\\n        int number=0,n=0,l=1;\\n        vector<int> ans;\\n        for(int i=m-1;i>=0;i--)\\n        {\\n            number=number +num[i] * pow(10,n);\\n            n++;            \\n        }\\n        number =number +k;\\n        int s=0;\\n        while(number>0)\\n        {\\n         s=number% 10;\\n         number =number/10;\\n         l++;\\n         ans.insert(ans.begin(),s);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Yongbi",
                        "content": "If _number_ is a very big, like `82773929293988383832920292838383...` then int is does not suit for a $10^4$ length number. Then, the division by 10 take a rounding error for the next loop.\\nIn Python, I replace /10 by floor division //10.\\nMaybe it will be helpful!"
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time take for solving any question?\\nbecause I  am spent lots of time on every particular which is so unprofessional and sometimes doubt occurs in my mind like maybe coding is not for me.\\nplease tell me a solution to how I am dealing with all these questions. "
                    },
                    {
                        "username": "Yongbi",
                        "content": "Just keep going, continue to learn and pratique more. \nSometimes it only takes me a few minutes for a difficult task like treenode, but it also takes a few hours for array DP and Trie. Maybe, the approach is not reasonable, as well as not enough knowledge to solve the considered problem. In this case,\n1. It is better to read hints (learn).\n2. If you read the hint and still can't solve it, look it up in the solution, and upgrade it yourself (pratique).\n3. Find and solve similar problems (pratique more).\n\nGoodluck. "
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time give to any particular question?"
                    },
                    {
                        "username": "00__rizwan__00",
                        "content": "genreally 30-40 min on one question. if you are not able make any logic then live it try again next day ."
                    },
                    {
                        "username": "190032122",
                        "content": "using map and nested for loop in python3"
                    },
                    {
                        "username": "hdtv0199",
                        "content": "What\\'s wrong with this: \\nvar addToArrayForm = function(num, k) {\\n    if(num.length >= 1 && num.length <= 10^4 && k >= 1 && k <=10^4){\\n        for(let i=0; i<num.length-1; i++){\\n            if(num[i] < 0 || num[i] > 9) return -1\\n            if(num[i] === 0) num.filter(number => number !== num[i])\\n        }\\n        return Number(num.join(\\'\\')) + k\\n    }\\n};\\n\\naddToArrayForm([4,5,5], 181)"
                    }
                ]
            },
            {
                "id": 1803443,
                "content": [
                    {
                        "username": "Yash_kumbhawat",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) {\\n        list.add(0, (num[i] + k) % 10);\\n        k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n        list.add(0, k % 10);\\n        k /= 10;\\n    }\\n    return list;\\n    }\\n}"
                    },
                    {
                        "username": "heg816",
                        "content": "Because num can represent a number as large as (10**10000) - 1, it is wiser to consider k as if it were a vector<int>/List/your language's version of the list ADT (even if your implementation doesn't actually create a new list ADT to store k). After you start thinking along those lines, the problem is a lot more like \"add strings\" or \"add two numbers\".  "
                    },
                    {
                        "username": "naturehermit",
                        "content": "What i dont get is,\\n1. If the input is constrained why is the input being supplied for over 10^4 and why a correct answer is expected.\\n2. Why the expectation of list is a list of integer, why it cant be long, big integer etc etc\\n3. Why is TestSuite based on certain expectations that different to how the question is posed and how the constraints are defined.\\n"
                    },
                    {
                        "username": "dixit70",
                        "content": "Looks like easy but solving it needs a lot of thinking."
                    },
                    {
                        "username": "vpk3105",
                        "content": "I think this is a medium level problem"
                    },
                    {
                        "username": "ram_2117",
                        "content": "Can anyone please tell what is wrong with the following answer?\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n         int m = num.size();\\n        int number=0,n=0,l=1;\\n        vector<int> ans;\\n        for(int i=m-1;i>=0;i--)\\n        {\\n            number=number +num[i] * pow(10,n);\\n            n++;            \\n        }\\n        number =number +k;\\n        int s=0;\\n        while(number>0)\\n        {\\n         s=number% 10;\\n         number =number/10;\\n         l++;\\n         ans.insert(ans.begin(),s);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Yongbi",
                        "content": "If _number_ is a very big, like `82773929293988383832920292838383...` then int is does not suit for a $10^4$ length number. Then, the division by 10 take a rounding error for the next loop.\\nIn Python, I replace /10 by floor division //10.\\nMaybe it will be helpful!"
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time take for solving any question?\\nbecause I  am spent lots of time on every particular which is so unprofessional and sometimes doubt occurs in my mind like maybe coding is not for me.\\nplease tell me a solution to how I am dealing with all these questions. "
                    },
                    {
                        "username": "Yongbi",
                        "content": "Just keep going, continue to learn and pratique more. \nSometimes it only takes me a few minutes for a difficult task like treenode, but it also takes a few hours for array DP and Trie. Maybe, the approach is not reasonable, as well as not enough knowledge to solve the considered problem. In this case,\n1. It is better to read hints (learn).\n2. If you read the hint and still can't solve it, look it up in the solution, and upgrade it yourself (pratique).\n3. Find and solve similar problems (pratique more).\n\nGoodluck. "
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time give to any particular question?"
                    },
                    {
                        "username": "00__rizwan__00",
                        "content": "genreally 30-40 min on one question. if you are not able make any logic then live it try again next day ."
                    },
                    {
                        "username": "190032122",
                        "content": "using map and nested for loop in python3"
                    },
                    {
                        "username": "hdtv0199",
                        "content": "What\\'s wrong with this: \\nvar addToArrayForm = function(num, k) {\\n    if(num.length >= 1 && num.length <= 10^4 && k >= 1 && k <=10^4){\\n        for(let i=0; i<num.length-1; i++){\\n            if(num[i] < 0 || num[i] > 9) return -1\\n            if(num[i] === 0) num.filter(number => number !== num[i])\\n        }\\n        return Number(num.join(\\'\\')) + k\\n    }\\n};\\n\\naddToArrayForm([4,5,5], 181)"
                    }
                ]
            },
            {
                "id": 1803434,
                "content": [
                    {
                        "username": "Yash_kumbhawat",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) {\\n        list.add(0, (num[i] + k) % 10);\\n        k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n        list.add(0, k % 10);\\n        k /= 10;\\n    }\\n    return list;\\n    }\\n}"
                    },
                    {
                        "username": "heg816",
                        "content": "Because num can represent a number as large as (10**10000) - 1, it is wiser to consider k as if it were a vector<int>/List/your language's version of the list ADT (even if your implementation doesn't actually create a new list ADT to store k). After you start thinking along those lines, the problem is a lot more like \"add strings\" or \"add two numbers\".  "
                    },
                    {
                        "username": "naturehermit",
                        "content": "What i dont get is,\\n1. If the input is constrained why is the input being supplied for over 10^4 and why a correct answer is expected.\\n2. Why the expectation of list is a list of integer, why it cant be long, big integer etc etc\\n3. Why is TestSuite based on certain expectations that different to how the question is posed and how the constraints are defined.\\n"
                    },
                    {
                        "username": "dixit70",
                        "content": "Looks like easy but solving it needs a lot of thinking."
                    },
                    {
                        "username": "vpk3105",
                        "content": "I think this is a medium level problem"
                    },
                    {
                        "username": "ram_2117",
                        "content": "Can anyone please tell what is wrong with the following answer?\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n         int m = num.size();\\n        int number=0,n=0,l=1;\\n        vector<int> ans;\\n        for(int i=m-1;i>=0;i--)\\n        {\\n            number=number +num[i] * pow(10,n);\\n            n++;            \\n        }\\n        number =number +k;\\n        int s=0;\\n        while(number>0)\\n        {\\n         s=number% 10;\\n         number =number/10;\\n         l++;\\n         ans.insert(ans.begin(),s);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Yongbi",
                        "content": "If _number_ is a very big, like `82773929293988383832920292838383...` then int is does not suit for a $10^4$ length number. Then, the division by 10 take a rounding error for the next loop.\\nIn Python, I replace /10 by floor division //10.\\nMaybe it will be helpful!"
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time take for solving any question?\\nbecause I  am spent lots of time on every particular which is so unprofessional and sometimes doubt occurs in my mind like maybe coding is not for me.\\nplease tell me a solution to how I am dealing with all these questions. "
                    },
                    {
                        "username": "Yongbi",
                        "content": "Just keep going, continue to learn and pratique more. \nSometimes it only takes me a few minutes for a difficult task like treenode, but it also takes a few hours for array DP and Trie. Maybe, the approach is not reasonable, as well as not enough knowledge to solve the considered problem. In this case,\n1. It is better to read hints (learn).\n2. If you read the hint and still can't solve it, look it up in the solution, and upgrade it yourself (pratique).\n3. Find and solve similar problems (pratique more).\n\nGoodluck. "
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time give to any particular question?"
                    },
                    {
                        "username": "00__rizwan__00",
                        "content": "genreally 30-40 min on one question. if you are not able make any logic then live it try again next day ."
                    },
                    {
                        "username": "190032122",
                        "content": "using map and nested for loop in python3"
                    },
                    {
                        "username": "hdtv0199",
                        "content": "What\\'s wrong with this: \\nvar addToArrayForm = function(num, k) {\\n    if(num.length >= 1 && num.length <= 10^4 && k >= 1 && k <=10^4){\\n        for(let i=0; i<num.length-1; i++){\\n            if(num[i] < 0 || num[i] > 9) return -1\\n            if(num[i] === 0) num.filter(number => number !== num[i])\\n        }\\n        return Number(num.join(\\'\\')) + k\\n    }\\n};\\n\\naddToArrayForm([4,5,5], 181)"
                    }
                ]
            },
            {
                "id": 1803348,
                "content": [
                    {
                        "username": "Yash_kumbhawat",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) {\\n        list.add(0, (num[i] + k) % 10);\\n        k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n        list.add(0, k % 10);\\n        k /= 10;\\n    }\\n    return list;\\n    }\\n}"
                    },
                    {
                        "username": "heg816",
                        "content": "Because num can represent a number as large as (10**10000) - 1, it is wiser to consider k as if it were a vector<int>/List/your language's version of the list ADT (even if your implementation doesn't actually create a new list ADT to store k). After you start thinking along those lines, the problem is a lot more like \"add strings\" or \"add two numbers\".  "
                    },
                    {
                        "username": "naturehermit",
                        "content": "What i dont get is,\\n1. If the input is constrained why is the input being supplied for over 10^4 and why a correct answer is expected.\\n2. Why the expectation of list is a list of integer, why it cant be long, big integer etc etc\\n3. Why is TestSuite based on certain expectations that different to how the question is posed and how the constraints are defined.\\n"
                    },
                    {
                        "username": "dixit70",
                        "content": "Looks like easy but solving it needs a lot of thinking."
                    },
                    {
                        "username": "vpk3105",
                        "content": "I think this is a medium level problem"
                    },
                    {
                        "username": "ram_2117",
                        "content": "Can anyone please tell what is wrong with the following answer?\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n         int m = num.size();\\n        int number=0,n=0,l=1;\\n        vector<int> ans;\\n        for(int i=m-1;i>=0;i--)\\n        {\\n            number=number +num[i] * pow(10,n);\\n            n++;            \\n        }\\n        number =number +k;\\n        int s=0;\\n        while(number>0)\\n        {\\n         s=number% 10;\\n         number =number/10;\\n         l++;\\n         ans.insert(ans.begin(),s);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Yongbi",
                        "content": "If _number_ is a very big, like `82773929293988383832920292838383...` then int is does not suit for a $10^4$ length number. Then, the division by 10 take a rounding error for the next loop.\\nIn Python, I replace /10 by floor division //10.\\nMaybe it will be helpful!"
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time take for solving any question?\\nbecause I  am spent lots of time on every particular which is so unprofessional and sometimes doubt occurs in my mind like maybe coding is not for me.\\nplease tell me a solution to how I am dealing with all these questions. "
                    },
                    {
                        "username": "Yongbi",
                        "content": "Just keep going, continue to learn and pratique more. \nSometimes it only takes me a few minutes for a difficult task like treenode, but it also takes a few hours for array DP and Trie. Maybe, the approach is not reasonable, as well as not enough knowledge to solve the considered problem. In this case,\n1. It is better to read hints (learn).\n2. If you read the hint and still can't solve it, look it up in the solution, and upgrade it yourself (pratique).\n3. Find and solve similar problems (pratique more).\n\nGoodluck. "
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time give to any particular question?"
                    },
                    {
                        "username": "00__rizwan__00",
                        "content": "genreally 30-40 min on one question. if you are not able make any logic then live it try again next day ."
                    },
                    {
                        "username": "190032122",
                        "content": "using map and nested for loop in python3"
                    },
                    {
                        "username": "hdtv0199",
                        "content": "What\\'s wrong with this: \\nvar addToArrayForm = function(num, k) {\\n    if(num.length >= 1 && num.length <= 10^4 && k >= 1 && k <=10^4){\\n        for(let i=0; i<num.length-1; i++){\\n            if(num[i] < 0 || num[i] > 9) return -1\\n            if(num[i] === 0) num.filter(number => number !== num[i])\\n        }\\n        return Number(num.join(\\'\\')) + k\\n    }\\n};\\n\\naddToArrayForm([4,5,5], 181)"
                    }
                ]
            },
            {
                "id": 1803250,
                "content": [
                    {
                        "username": "Yash_kumbhawat",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) {\\n        list.add(0, (num[i] + k) % 10);\\n        k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n        list.add(0, k % 10);\\n        k /= 10;\\n    }\\n    return list;\\n    }\\n}"
                    },
                    {
                        "username": "heg816",
                        "content": "Because num can represent a number as large as (10**10000) - 1, it is wiser to consider k as if it were a vector<int>/List/your language's version of the list ADT (even if your implementation doesn't actually create a new list ADT to store k). After you start thinking along those lines, the problem is a lot more like \"add strings\" or \"add two numbers\".  "
                    },
                    {
                        "username": "naturehermit",
                        "content": "What i dont get is,\\n1. If the input is constrained why is the input being supplied for over 10^4 and why a correct answer is expected.\\n2. Why the expectation of list is a list of integer, why it cant be long, big integer etc etc\\n3. Why is TestSuite based on certain expectations that different to how the question is posed and how the constraints are defined.\\n"
                    },
                    {
                        "username": "dixit70",
                        "content": "Looks like easy but solving it needs a lot of thinking."
                    },
                    {
                        "username": "vpk3105",
                        "content": "I think this is a medium level problem"
                    },
                    {
                        "username": "ram_2117",
                        "content": "Can anyone please tell what is wrong with the following answer?\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n         int m = num.size();\\n        int number=0,n=0,l=1;\\n        vector<int> ans;\\n        for(int i=m-1;i>=0;i--)\\n        {\\n            number=number +num[i] * pow(10,n);\\n            n++;            \\n        }\\n        number =number +k;\\n        int s=0;\\n        while(number>0)\\n        {\\n         s=number% 10;\\n         number =number/10;\\n         l++;\\n         ans.insert(ans.begin(),s);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Yongbi",
                        "content": "If _number_ is a very big, like `82773929293988383832920292838383...` then int is does not suit for a $10^4$ length number. Then, the division by 10 take a rounding error for the next loop.\\nIn Python, I replace /10 by floor division //10.\\nMaybe it will be helpful!"
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time take for solving any question?\\nbecause I  am spent lots of time on every particular which is so unprofessional and sometimes doubt occurs in my mind like maybe coding is not for me.\\nplease tell me a solution to how I am dealing with all these questions. "
                    },
                    {
                        "username": "Yongbi",
                        "content": "Just keep going, continue to learn and pratique more. \nSometimes it only takes me a few minutes for a difficult task like treenode, but it also takes a few hours for array DP and Trie. Maybe, the approach is not reasonable, as well as not enough knowledge to solve the considered problem. In this case,\n1. It is better to read hints (learn).\n2. If you read the hint and still can't solve it, look it up in the solution, and upgrade it yourself (pratique).\n3. Find and solve similar problems (pratique more).\n\nGoodluck. "
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time give to any particular question?"
                    },
                    {
                        "username": "00__rizwan__00",
                        "content": "genreally 30-40 min on one question. if you are not able make any logic then live it try again next day ."
                    },
                    {
                        "username": "190032122",
                        "content": "using map and nested for loop in python3"
                    },
                    {
                        "username": "hdtv0199",
                        "content": "What\\'s wrong with this: \\nvar addToArrayForm = function(num, k) {\\n    if(num.length >= 1 && num.length <= 10^4 && k >= 1 && k <=10^4){\\n        for(let i=0; i<num.length-1; i++){\\n            if(num[i] < 0 || num[i] > 9) return -1\\n            if(num[i] === 0) num.filter(number => number !== num[i])\\n        }\\n        return Number(num.join(\\'\\')) + k\\n    }\\n};\\n\\naddToArrayForm([4,5,5], 181)"
                    }
                ]
            },
            {
                "id": 1803235,
                "content": [
                    {
                        "username": "Yash_kumbhawat",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) {\\n        list.add(0, (num[i] + k) % 10);\\n        k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n        list.add(0, k % 10);\\n        k /= 10;\\n    }\\n    return list;\\n    }\\n}"
                    },
                    {
                        "username": "heg816",
                        "content": "Because num can represent a number as large as (10**10000) - 1, it is wiser to consider k as if it were a vector<int>/List/your language's version of the list ADT (even if your implementation doesn't actually create a new list ADT to store k). After you start thinking along those lines, the problem is a lot more like \"add strings\" or \"add two numbers\".  "
                    },
                    {
                        "username": "naturehermit",
                        "content": "What i dont get is,\\n1. If the input is constrained why is the input being supplied for over 10^4 and why a correct answer is expected.\\n2. Why the expectation of list is a list of integer, why it cant be long, big integer etc etc\\n3. Why is TestSuite based on certain expectations that different to how the question is posed and how the constraints are defined.\\n"
                    },
                    {
                        "username": "dixit70",
                        "content": "Looks like easy but solving it needs a lot of thinking."
                    },
                    {
                        "username": "vpk3105",
                        "content": "I think this is a medium level problem"
                    },
                    {
                        "username": "ram_2117",
                        "content": "Can anyone please tell what is wrong with the following answer?\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n         int m = num.size();\\n        int number=0,n=0,l=1;\\n        vector<int> ans;\\n        for(int i=m-1;i>=0;i--)\\n        {\\n            number=number +num[i] * pow(10,n);\\n            n++;            \\n        }\\n        number =number +k;\\n        int s=0;\\n        while(number>0)\\n        {\\n         s=number% 10;\\n         number =number/10;\\n         l++;\\n         ans.insert(ans.begin(),s);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Yongbi",
                        "content": "If _number_ is a very big, like `82773929293988383832920292838383...` then int is does not suit for a $10^4$ length number. Then, the division by 10 take a rounding error for the next loop.\\nIn Python, I replace /10 by floor division //10.\\nMaybe it will be helpful!"
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time take for solving any question?\\nbecause I  am spent lots of time on every particular which is so unprofessional and sometimes doubt occurs in my mind like maybe coding is not for me.\\nplease tell me a solution to how I am dealing with all these questions. "
                    },
                    {
                        "username": "Yongbi",
                        "content": "Just keep going, continue to learn and pratique more. \nSometimes it only takes me a few minutes for a difficult task like treenode, but it also takes a few hours for array DP and Trie. Maybe, the approach is not reasonable, as well as not enough knowledge to solve the considered problem. In this case,\n1. It is better to read hints (learn).\n2. If you read the hint and still can't solve it, look it up in the solution, and upgrade it yourself (pratique).\n3. Find and solve similar problems (pratique more).\n\nGoodluck. "
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time give to any particular question?"
                    },
                    {
                        "username": "00__rizwan__00",
                        "content": "genreally 30-40 min on one question. if you are not able make any logic then live it try again next day ."
                    },
                    {
                        "username": "190032122",
                        "content": "using map and nested for loop in python3"
                    },
                    {
                        "username": "hdtv0199",
                        "content": "What\\'s wrong with this: \\nvar addToArrayForm = function(num, k) {\\n    if(num.length >= 1 && num.length <= 10^4 && k >= 1 && k <=10^4){\\n        for(let i=0; i<num.length-1; i++){\\n            if(num[i] < 0 || num[i] > 9) return -1\\n            if(num[i] === 0) num.filter(number => number !== num[i])\\n        }\\n        return Number(num.join(\\'\\')) + k\\n    }\\n};\\n\\naddToArrayForm([4,5,5], 181)"
                    }
                ]
            },
            {
                "id": 1803225,
                "content": [
                    {
                        "username": "Yash_kumbhawat",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) {\\n        list.add(0, (num[i] + k) % 10);\\n        k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n        list.add(0, k % 10);\\n        k /= 10;\\n    }\\n    return list;\\n    }\\n}"
                    },
                    {
                        "username": "heg816",
                        "content": "Because num can represent a number as large as (10**10000) - 1, it is wiser to consider k as if it were a vector<int>/List/your language's version of the list ADT (even if your implementation doesn't actually create a new list ADT to store k). After you start thinking along those lines, the problem is a lot more like \"add strings\" or \"add two numbers\".  "
                    },
                    {
                        "username": "naturehermit",
                        "content": "What i dont get is,\\n1. If the input is constrained why is the input being supplied for over 10^4 and why a correct answer is expected.\\n2. Why the expectation of list is a list of integer, why it cant be long, big integer etc etc\\n3. Why is TestSuite based on certain expectations that different to how the question is posed and how the constraints are defined.\\n"
                    },
                    {
                        "username": "dixit70",
                        "content": "Looks like easy but solving it needs a lot of thinking."
                    },
                    {
                        "username": "vpk3105",
                        "content": "I think this is a medium level problem"
                    },
                    {
                        "username": "ram_2117",
                        "content": "Can anyone please tell what is wrong with the following answer?\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n         int m = num.size();\\n        int number=0,n=0,l=1;\\n        vector<int> ans;\\n        for(int i=m-1;i>=0;i--)\\n        {\\n            number=number +num[i] * pow(10,n);\\n            n++;            \\n        }\\n        number =number +k;\\n        int s=0;\\n        while(number>0)\\n        {\\n         s=number% 10;\\n         number =number/10;\\n         l++;\\n         ans.insert(ans.begin(),s);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Yongbi",
                        "content": "If _number_ is a very big, like `82773929293988383832920292838383...` then int is does not suit for a $10^4$ length number. Then, the division by 10 take a rounding error for the next loop.\\nIn Python, I replace /10 by floor division //10.\\nMaybe it will be helpful!"
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time take for solving any question?\\nbecause I  am spent lots of time on every particular which is so unprofessional and sometimes doubt occurs in my mind like maybe coding is not for me.\\nplease tell me a solution to how I am dealing with all these questions. "
                    },
                    {
                        "username": "Yongbi",
                        "content": "Just keep going, continue to learn and pratique more. \nSometimes it only takes me a few minutes for a difficult task like treenode, but it also takes a few hours for array DP and Trie. Maybe, the approach is not reasonable, as well as not enough knowledge to solve the considered problem. In this case,\n1. It is better to read hints (learn).\n2. If you read the hint and still can't solve it, look it up in the solution, and upgrade it yourself (pratique).\n3. Find and solve similar problems (pratique more).\n\nGoodluck. "
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time give to any particular question?"
                    },
                    {
                        "username": "00__rizwan__00",
                        "content": "genreally 30-40 min on one question. if you are not able make any logic then live it try again next day ."
                    },
                    {
                        "username": "190032122",
                        "content": "using map and nested for loop in python3"
                    },
                    {
                        "username": "hdtv0199",
                        "content": "What\\'s wrong with this: \\nvar addToArrayForm = function(num, k) {\\n    if(num.length >= 1 && num.length <= 10^4 && k >= 1 && k <=10^4){\\n        for(let i=0; i<num.length-1; i++){\\n            if(num[i] < 0 || num[i] > 9) return -1\\n            if(num[i] === 0) num.filter(number => number !== num[i])\\n        }\\n        return Number(num.join(\\'\\')) + k\\n    }\\n};\\n\\naddToArrayForm([4,5,5], 181)"
                    }
                ]
            },
            {
                "id": 1802647,
                "content": [
                    {
                        "username": "Yash_kumbhawat",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) {\\n        list.add(0, (num[i] + k) % 10);\\n        k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n        list.add(0, k % 10);\\n        k /= 10;\\n    }\\n    return list;\\n    }\\n}"
                    },
                    {
                        "username": "heg816",
                        "content": "Because num can represent a number as large as (10**10000) - 1, it is wiser to consider k as if it were a vector<int>/List/your language's version of the list ADT (even if your implementation doesn't actually create a new list ADT to store k). After you start thinking along those lines, the problem is a lot more like \"add strings\" or \"add two numbers\".  "
                    },
                    {
                        "username": "naturehermit",
                        "content": "What i dont get is,\\n1. If the input is constrained why is the input being supplied for over 10^4 and why a correct answer is expected.\\n2. Why the expectation of list is a list of integer, why it cant be long, big integer etc etc\\n3. Why is TestSuite based on certain expectations that different to how the question is posed and how the constraints are defined.\\n"
                    },
                    {
                        "username": "dixit70",
                        "content": "Looks like easy but solving it needs a lot of thinking."
                    },
                    {
                        "username": "vpk3105",
                        "content": "I think this is a medium level problem"
                    },
                    {
                        "username": "ram_2117",
                        "content": "Can anyone please tell what is wrong with the following answer?\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n         int m = num.size();\\n        int number=0,n=0,l=1;\\n        vector<int> ans;\\n        for(int i=m-1;i>=0;i--)\\n        {\\n            number=number +num[i] * pow(10,n);\\n            n++;            \\n        }\\n        number =number +k;\\n        int s=0;\\n        while(number>0)\\n        {\\n         s=number% 10;\\n         number =number/10;\\n         l++;\\n         ans.insert(ans.begin(),s);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Yongbi",
                        "content": "If _number_ is a very big, like `82773929293988383832920292838383...` then int is does not suit for a $10^4$ length number. Then, the division by 10 take a rounding error for the next loop.\\nIn Python, I replace /10 by floor division //10.\\nMaybe it will be helpful!"
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time take for solving any question?\\nbecause I  am spent lots of time on every particular which is so unprofessional and sometimes doubt occurs in my mind like maybe coding is not for me.\\nplease tell me a solution to how I am dealing with all these questions. "
                    },
                    {
                        "username": "Yongbi",
                        "content": "Just keep going, continue to learn and pratique more. \nSometimes it only takes me a few minutes for a difficult task like treenode, but it also takes a few hours for array DP and Trie. Maybe, the approach is not reasonable, as well as not enough knowledge to solve the considered problem. In this case,\n1. It is better to read hints (learn).\n2. If you read the hint and still can't solve it, look it up in the solution, and upgrade it yourself (pratique).\n3. Find and solve similar problems (pratique more).\n\nGoodluck. "
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time give to any particular question?"
                    },
                    {
                        "username": "00__rizwan__00",
                        "content": "genreally 30-40 min on one question. if you are not able make any logic then live it try again next day ."
                    },
                    {
                        "username": "190032122",
                        "content": "using map and nested for loop in python3"
                    },
                    {
                        "username": "hdtv0199",
                        "content": "What\\'s wrong with this: \\nvar addToArrayForm = function(num, k) {\\n    if(num.length >= 1 && num.length <= 10^4 && k >= 1 && k <=10^4){\\n        for(let i=0; i<num.length-1; i++){\\n            if(num[i] < 0 || num[i] > 9) return -1\\n            if(num[i] === 0) num.filter(number => number !== num[i])\\n        }\\n        return Number(num.join(\\'\\')) + k\\n    }\\n};\\n\\naddToArrayForm([4,5,5], 181)"
                    }
                ]
            },
            {
                "id": 1802556,
                "content": [
                    {
                        "username": "Yash_kumbhawat",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List<Integer> list = new LinkedList<>();\\n        for (int i = num.length - 1; i >= 0; --i) {\\n        list.add(0, (num[i] + k) % 10);\\n        k = (num[i] + k) / 10;\\n    }\\n    while (k > 0) {\\n        list.add(0, k % 10);\\n        k /= 10;\\n    }\\n    return list;\\n    }\\n}"
                    },
                    {
                        "username": "heg816",
                        "content": "Because num can represent a number as large as (10**10000) - 1, it is wiser to consider k as if it were a vector<int>/List/your language's version of the list ADT (even if your implementation doesn't actually create a new list ADT to store k). After you start thinking along those lines, the problem is a lot more like \"add strings\" or \"add two numbers\".  "
                    },
                    {
                        "username": "naturehermit",
                        "content": "What i dont get is,\\n1. If the input is constrained why is the input being supplied for over 10^4 and why a correct answer is expected.\\n2. Why the expectation of list is a list of integer, why it cant be long, big integer etc etc\\n3. Why is TestSuite based on certain expectations that different to how the question is posed and how the constraints are defined.\\n"
                    },
                    {
                        "username": "dixit70",
                        "content": "Looks like easy but solving it needs a lot of thinking."
                    },
                    {
                        "username": "vpk3105",
                        "content": "I think this is a medium level problem"
                    },
                    {
                        "username": "ram_2117",
                        "content": "Can anyone please tell what is wrong with the following answer?\\n\\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n         int m = num.size();\\n        int number=0,n=0,l=1;\\n        vector<int> ans;\\n        for(int i=m-1;i>=0;i--)\\n        {\\n            number=number +num[i] * pow(10,n);\\n            n++;            \\n        }\\n        number =number +k;\\n        int s=0;\\n        while(number>0)\\n        {\\n         s=number% 10;\\n         number =number/10;\\n         l++;\\n         ans.insert(ans.begin(),s);\\n        }\\n        return ans;\\n    }\\n};"
                    },
                    {
                        "username": "Yongbi",
                        "content": "If _number_ is a very big, like `82773929293988383832920292838383...` then int is does not suit for a $10^4$ length number. Then, the division by 10 take a rounding error for the next loop.\\nIn Python, I replace /10 by floor division //10.\\nMaybe it will be helpful!"
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time take for solving any question?\\nbecause I  am spent lots of time on every particular which is so unprofessional and sometimes doubt occurs in my mind like maybe coding is not for me.\\nplease tell me a solution to how I am dealing with all these questions. "
                    },
                    {
                        "username": "Yongbi",
                        "content": "Just keep going, continue to learn and pratique more. \nSometimes it only takes me a few minutes for a difficult task like treenode, but it also takes a few hours for array DP and Trie. Maybe, the approach is not reasonable, as well as not enough knowledge to solve the considered problem. In this case,\n1. It is better to read hints (learn).\n2. If you read the hint and still can't solve it, look it up in the solution, and upgrade it yourself (pratique).\n3. Find and solve similar problems (pratique more).\n\nGoodluck. "
                    },
                    {
                        "username": "gaurmanisha747",
                        "content": "how much time give to any particular question?"
                    },
                    {
                        "username": "00__rizwan__00",
                        "content": "genreally 30-40 min on one question. if you are not able make any logic then live it try again next day ."
                    },
                    {
                        "username": "190032122",
                        "content": "using map and nested for loop in python3"
                    },
                    {
                        "username": "hdtv0199",
                        "content": "What\\'s wrong with this: \\nvar addToArrayForm = function(num, k) {\\n    if(num.length >= 1 && num.length <= 10^4 && k >= 1 && k <=10^4){\\n        for(let i=0; i<num.length-1; i++){\\n            if(num[i] < 0 || num[i] > 9) return -1\\n            if(num[i] === 0) num.filter(number => number !== num[i])\\n        }\\n        return Number(num.join(\\'\\')) + k\\n    }\\n};\\n\\naddToArrayForm([4,5,5], 181)"
                    }
                ]
            },
            {
                "id": 1802526,
                "content": [
                    {
                        "username": "BrandonDH",
                        "content": "I can\\'t solve for numbers with more than 20 characters. Anyone else run into that too?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "In python3 I try Floor division (//) for a large integer number instead of divide (/). \\n\\ne.g. 12630717197566440579/10"
                    },
                    {
                        "username": "ntsagar",
                        "content": "Way can we not use just like this.\n\nreturn String((Number(num.join(\"\")) + Number(k))).split(\"\").map(i => Number(i));\n\n\n\n\nI don't know way it fail in some cases.\nnum=[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\nk=516\n\n--- \nnum = [3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\nk=670\n"
                    },
                    {
                        "username": "george-botros",
                        "content": "Why is an ArrayList so much slower than a LinkedList in a Java solution?"
                    },
                    {
                        "username": "phanee16",
                        "content": "```class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        string = \"\"\n        result = []\n        for i in num:\n            string+=str(i)\n        ans = int(string)+k\n        for i in str(ans):\n            result.append(int(i))\n        return result\n```"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "This problem is fine but trivial in some languages"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 67"
                    },
                    {
                        "username": "HangyeomLee",
                        "content": "Why this is not working?\n\nMy code is down below.\n\n `your inline code...\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n\n    // Convert the num array to a bigint\n    var num_int = BigInt(num.join(''));\n\n    // Add k to num_int\n    var sum = BigInt(num_int + k);\n\n    // Convert the sum to an array of digits\n    var res = String(sum);\n\n    return res;\n};\nyour inline code...`/**\n\n\nand the error message says like this:\nLine 16 in solution.js\n    var sum = BigInt(num_int + k);\n                             ^\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n    Line 16: Char 30 in solution.js (addToArrayForm)\n    Line 35: Char 19 in solution.js (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 24: Char 26 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "srija222",
                        "content": "Guys i did the below code but it is not passing certain test cases can you solve it?\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List arr=new ArrayList<>();\\n        int tot=0,n=num.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            tot=tot*10+num[i];\\n        }\\n         sum=tot+k;\\n        while(sum>0){\\n         int rem=sum%10;\\n        sum=sum/10;\\n        arr.add(rem);\\n        }\\n       Collections.reverse(arr);\\n        return arr;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "- Problem for large numbers with division, for example:\n12630717197566440579/10\n-> change to floor division:  sum//=10\n\n\"Be careful when doing division. By default, the quotient is turned into float, but float does not support such large numbers. If you get an error message saying float does not support such large numbers, then it means the quotient is too large to be stored in float you’ll have to use floor division (//).\""
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Nice and easy problem to get your brain warmed up for the day."
                    },
                    {
                        "username": "kartikdewnani56",
                        "content": "can someone tell me whats the point of int *returnSize in c for this function?"
                    }
                ]
            },
            {
                "id": 1802448,
                "content": [
                    {
                        "username": "BrandonDH",
                        "content": "I can\\'t solve for numbers with more than 20 characters. Anyone else run into that too?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "In python3 I try Floor division (//) for a large integer number instead of divide (/). \\n\\ne.g. 12630717197566440579/10"
                    },
                    {
                        "username": "ntsagar",
                        "content": "Way can we not use just like this.\n\nreturn String((Number(num.join(\"\")) + Number(k))).split(\"\").map(i => Number(i));\n\n\n\n\nI don't know way it fail in some cases.\nnum=[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\nk=516\n\n--- \nnum = [3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\nk=670\n"
                    },
                    {
                        "username": "george-botros",
                        "content": "Why is an ArrayList so much slower than a LinkedList in a Java solution?"
                    },
                    {
                        "username": "phanee16",
                        "content": "```class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        string = \"\"\n        result = []\n        for i in num:\n            string+=str(i)\n        ans = int(string)+k\n        for i in str(ans):\n            result.append(int(i))\n        return result\n```"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "This problem is fine but trivial in some languages"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 67"
                    },
                    {
                        "username": "HangyeomLee",
                        "content": "Why this is not working?\n\nMy code is down below.\n\n `your inline code...\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n\n    // Convert the num array to a bigint\n    var num_int = BigInt(num.join(''));\n\n    // Add k to num_int\n    var sum = BigInt(num_int + k);\n\n    // Convert the sum to an array of digits\n    var res = String(sum);\n\n    return res;\n};\nyour inline code...`/**\n\n\nand the error message says like this:\nLine 16 in solution.js\n    var sum = BigInt(num_int + k);\n                             ^\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n    Line 16: Char 30 in solution.js (addToArrayForm)\n    Line 35: Char 19 in solution.js (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 24: Char 26 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "srija222",
                        "content": "Guys i did the below code but it is not passing certain test cases can you solve it?\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List arr=new ArrayList<>();\\n        int tot=0,n=num.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            tot=tot*10+num[i];\\n        }\\n         sum=tot+k;\\n        while(sum>0){\\n         int rem=sum%10;\\n        sum=sum/10;\\n        arr.add(rem);\\n        }\\n       Collections.reverse(arr);\\n        return arr;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "- Problem for large numbers with division, for example:\n12630717197566440579/10\n-> change to floor division:  sum//=10\n\n\"Be careful when doing division. By default, the quotient is turned into float, but float does not support such large numbers. If you get an error message saying float does not support such large numbers, then it means the quotient is too large to be stored in float you’ll have to use floor division (//).\""
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Nice and easy problem to get your brain warmed up for the day."
                    },
                    {
                        "username": "kartikdewnani56",
                        "content": "can someone tell me whats the point of int *returnSize in c for this function?"
                    }
                ]
            },
            {
                "id": 1802430,
                "content": [
                    {
                        "username": "BrandonDH",
                        "content": "I can\\'t solve for numbers with more than 20 characters. Anyone else run into that too?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "In python3 I try Floor division (//) for a large integer number instead of divide (/). \\n\\ne.g. 12630717197566440579/10"
                    },
                    {
                        "username": "ntsagar",
                        "content": "Way can we not use just like this.\n\nreturn String((Number(num.join(\"\")) + Number(k))).split(\"\").map(i => Number(i));\n\n\n\n\nI don't know way it fail in some cases.\nnum=[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\nk=516\n\n--- \nnum = [3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\nk=670\n"
                    },
                    {
                        "username": "george-botros",
                        "content": "Why is an ArrayList so much slower than a LinkedList in a Java solution?"
                    },
                    {
                        "username": "phanee16",
                        "content": "```class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        string = \"\"\n        result = []\n        for i in num:\n            string+=str(i)\n        ans = int(string)+k\n        for i in str(ans):\n            result.append(int(i))\n        return result\n```"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "This problem is fine but trivial in some languages"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 67"
                    },
                    {
                        "username": "HangyeomLee",
                        "content": "Why this is not working?\n\nMy code is down below.\n\n `your inline code...\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n\n    // Convert the num array to a bigint\n    var num_int = BigInt(num.join(''));\n\n    // Add k to num_int\n    var sum = BigInt(num_int + k);\n\n    // Convert the sum to an array of digits\n    var res = String(sum);\n\n    return res;\n};\nyour inline code...`/**\n\n\nand the error message says like this:\nLine 16 in solution.js\n    var sum = BigInt(num_int + k);\n                             ^\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n    Line 16: Char 30 in solution.js (addToArrayForm)\n    Line 35: Char 19 in solution.js (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 24: Char 26 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "srija222",
                        "content": "Guys i did the below code but it is not passing certain test cases can you solve it?\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List arr=new ArrayList<>();\\n        int tot=0,n=num.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            tot=tot*10+num[i];\\n        }\\n         sum=tot+k;\\n        while(sum>0){\\n         int rem=sum%10;\\n        sum=sum/10;\\n        arr.add(rem);\\n        }\\n       Collections.reverse(arr);\\n        return arr;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "- Problem for large numbers with division, for example:\n12630717197566440579/10\n-> change to floor division:  sum//=10\n\n\"Be careful when doing division. By default, the quotient is turned into float, but float does not support such large numbers. If you get an error message saying float does not support such large numbers, then it means the quotient is too large to be stored in float you’ll have to use floor division (//).\""
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Nice and easy problem to get your brain warmed up for the day."
                    },
                    {
                        "username": "kartikdewnani56",
                        "content": "can someone tell me whats the point of int *returnSize in c for this function?"
                    }
                ]
            },
            {
                "id": 1802394,
                "content": [
                    {
                        "username": "BrandonDH",
                        "content": "I can\\'t solve for numbers with more than 20 characters. Anyone else run into that too?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "In python3 I try Floor division (//) for a large integer number instead of divide (/). \\n\\ne.g. 12630717197566440579/10"
                    },
                    {
                        "username": "ntsagar",
                        "content": "Way can we not use just like this.\n\nreturn String((Number(num.join(\"\")) + Number(k))).split(\"\").map(i => Number(i));\n\n\n\n\nI don't know way it fail in some cases.\nnum=[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\nk=516\n\n--- \nnum = [3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\nk=670\n"
                    },
                    {
                        "username": "george-botros",
                        "content": "Why is an ArrayList so much slower than a LinkedList in a Java solution?"
                    },
                    {
                        "username": "phanee16",
                        "content": "```class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        string = \"\"\n        result = []\n        for i in num:\n            string+=str(i)\n        ans = int(string)+k\n        for i in str(ans):\n            result.append(int(i))\n        return result\n```"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "This problem is fine but trivial in some languages"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 67"
                    },
                    {
                        "username": "HangyeomLee",
                        "content": "Why this is not working?\n\nMy code is down below.\n\n `your inline code...\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n\n    // Convert the num array to a bigint\n    var num_int = BigInt(num.join(''));\n\n    // Add k to num_int\n    var sum = BigInt(num_int + k);\n\n    // Convert the sum to an array of digits\n    var res = String(sum);\n\n    return res;\n};\nyour inline code...`/**\n\n\nand the error message says like this:\nLine 16 in solution.js\n    var sum = BigInt(num_int + k);\n                             ^\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n    Line 16: Char 30 in solution.js (addToArrayForm)\n    Line 35: Char 19 in solution.js (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 24: Char 26 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "srija222",
                        "content": "Guys i did the below code but it is not passing certain test cases can you solve it?\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List arr=new ArrayList<>();\\n        int tot=0,n=num.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            tot=tot*10+num[i];\\n        }\\n         sum=tot+k;\\n        while(sum>0){\\n         int rem=sum%10;\\n        sum=sum/10;\\n        arr.add(rem);\\n        }\\n       Collections.reverse(arr);\\n        return arr;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "- Problem for large numbers with division, for example:\n12630717197566440579/10\n-> change to floor division:  sum//=10\n\n\"Be careful when doing division. By default, the quotient is turned into float, but float does not support such large numbers. If you get an error message saying float does not support such large numbers, then it means the quotient is too large to be stored in float you’ll have to use floor division (//).\""
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Nice and easy problem to get your brain warmed up for the day."
                    },
                    {
                        "username": "kartikdewnani56",
                        "content": "can someone tell me whats the point of int *returnSize in c for this function?"
                    }
                ]
            },
            {
                "id": 1802392,
                "content": [
                    {
                        "username": "BrandonDH",
                        "content": "I can\\'t solve for numbers with more than 20 characters. Anyone else run into that too?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "In python3 I try Floor division (//) for a large integer number instead of divide (/). \\n\\ne.g. 12630717197566440579/10"
                    },
                    {
                        "username": "ntsagar",
                        "content": "Way can we not use just like this.\n\nreturn String((Number(num.join(\"\")) + Number(k))).split(\"\").map(i => Number(i));\n\n\n\n\nI don't know way it fail in some cases.\nnum=[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\nk=516\n\n--- \nnum = [3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\nk=670\n"
                    },
                    {
                        "username": "george-botros",
                        "content": "Why is an ArrayList so much slower than a LinkedList in a Java solution?"
                    },
                    {
                        "username": "phanee16",
                        "content": "```class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        string = \"\"\n        result = []\n        for i in num:\n            string+=str(i)\n        ans = int(string)+k\n        for i in str(ans):\n            result.append(int(i))\n        return result\n```"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "This problem is fine but trivial in some languages"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 67"
                    },
                    {
                        "username": "HangyeomLee",
                        "content": "Why this is not working?\n\nMy code is down below.\n\n `your inline code...\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n\n    // Convert the num array to a bigint\n    var num_int = BigInt(num.join(''));\n\n    // Add k to num_int\n    var sum = BigInt(num_int + k);\n\n    // Convert the sum to an array of digits\n    var res = String(sum);\n\n    return res;\n};\nyour inline code...`/**\n\n\nand the error message says like this:\nLine 16 in solution.js\n    var sum = BigInt(num_int + k);\n                             ^\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n    Line 16: Char 30 in solution.js (addToArrayForm)\n    Line 35: Char 19 in solution.js (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 24: Char 26 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "srija222",
                        "content": "Guys i did the below code but it is not passing certain test cases can you solve it?\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List arr=new ArrayList<>();\\n        int tot=0,n=num.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            tot=tot*10+num[i];\\n        }\\n         sum=tot+k;\\n        while(sum>0){\\n         int rem=sum%10;\\n        sum=sum/10;\\n        arr.add(rem);\\n        }\\n       Collections.reverse(arr);\\n        return arr;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "- Problem for large numbers with division, for example:\n12630717197566440579/10\n-> change to floor division:  sum//=10\n\n\"Be careful when doing division. By default, the quotient is turned into float, but float does not support such large numbers. If you get an error message saying float does not support such large numbers, then it means the quotient is too large to be stored in float you’ll have to use floor division (//).\""
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Nice and easy problem to get your brain warmed up for the day."
                    },
                    {
                        "username": "kartikdewnani56",
                        "content": "can someone tell me whats the point of int *returnSize in c for this function?"
                    }
                ]
            },
            {
                "id": 1802297,
                "content": [
                    {
                        "username": "BrandonDH",
                        "content": "I can\\'t solve for numbers with more than 20 characters. Anyone else run into that too?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "In python3 I try Floor division (//) for a large integer number instead of divide (/). \\n\\ne.g. 12630717197566440579/10"
                    },
                    {
                        "username": "ntsagar",
                        "content": "Way can we not use just like this.\n\nreturn String((Number(num.join(\"\")) + Number(k))).split(\"\").map(i => Number(i));\n\n\n\n\nI don't know way it fail in some cases.\nnum=[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\nk=516\n\n--- \nnum = [3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\nk=670\n"
                    },
                    {
                        "username": "george-botros",
                        "content": "Why is an ArrayList so much slower than a LinkedList in a Java solution?"
                    },
                    {
                        "username": "phanee16",
                        "content": "```class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        string = \"\"\n        result = []\n        for i in num:\n            string+=str(i)\n        ans = int(string)+k\n        for i in str(ans):\n            result.append(int(i))\n        return result\n```"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "This problem is fine but trivial in some languages"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 67"
                    },
                    {
                        "username": "HangyeomLee",
                        "content": "Why this is not working?\n\nMy code is down below.\n\n `your inline code...\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n\n    // Convert the num array to a bigint\n    var num_int = BigInt(num.join(''));\n\n    // Add k to num_int\n    var sum = BigInt(num_int + k);\n\n    // Convert the sum to an array of digits\n    var res = String(sum);\n\n    return res;\n};\nyour inline code...`/**\n\n\nand the error message says like this:\nLine 16 in solution.js\n    var sum = BigInt(num_int + k);\n                             ^\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n    Line 16: Char 30 in solution.js (addToArrayForm)\n    Line 35: Char 19 in solution.js (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 24: Char 26 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "srija222",
                        "content": "Guys i did the below code but it is not passing certain test cases can you solve it?\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List arr=new ArrayList<>();\\n        int tot=0,n=num.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            tot=tot*10+num[i];\\n        }\\n         sum=tot+k;\\n        while(sum>0){\\n         int rem=sum%10;\\n        sum=sum/10;\\n        arr.add(rem);\\n        }\\n       Collections.reverse(arr);\\n        return arr;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "- Problem for large numbers with division, for example:\n12630717197566440579/10\n-> change to floor division:  sum//=10\n\n\"Be careful when doing division. By default, the quotient is turned into float, but float does not support such large numbers. If you get an error message saying float does not support such large numbers, then it means the quotient is too large to be stored in float you’ll have to use floor division (//).\""
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Nice and easy problem to get your brain warmed up for the day."
                    },
                    {
                        "username": "kartikdewnani56",
                        "content": "can someone tell me whats the point of int *returnSize in c for this function?"
                    }
                ]
            },
            {
                "id": 1802252,
                "content": [
                    {
                        "username": "BrandonDH",
                        "content": "I can\\'t solve for numbers with more than 20 characters. Anyone else run into that too?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "In python3 I try Floor division (//) for a large integer number instead of divide (/). \\n\\ne.g. 12630717197566440579/10"
                    },
                    {
                        "username": "ntsagar",
                        "content": "Way can we not use just like this.\n\nreturn String((Number(num.join(\"\")) + Number(k))).split(\"\").map(i => Number(i));\n\n\n\n\nI don't know way it fail in some cases.\nnum=[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\nk=516\n\n--- \nnum = [3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\nk=670\n"
                    },
                    {
                        "username": "george-botros",
                        "content": "Why is an ArrayList so much slower than a LinkedList in a Java solution?"
                    },
                    {
                        "username": "phanee16",
                        "content": "```class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        string = \"\"\n        result = []\n        for i in num:\n            string+=str(i)\n        ans = int(string)+k\n        for i in str(ans):\n            result.append(int(i))\n        return result\n```"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "This problem is fine but trivial in some languages"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 67"
                    },
                    {
                        "username": "HangyeomLee",
                        "content": "Why this is not working?\n\nMy code is down below.\n\n `your inline code...\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n\n    // Convert the num array to a bigint\n    var num_int = BigInt(num.join(''));\n\n    // Add k to num_int\n    var sum = BigInt(num_int + k);\n\n    // Convert the sum to an array of digits\n    var res = String(sum);\n\n    return res;\n};\nyour inline code...`/**\n\n\nand the error message says like this:\nLine 16 in solution.js\n    var sum = BigInt(num_int + k);\n                             ^\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n    Line 16: Char 30 in solution.js (addToArrayForm)\n    Line 35: Char 19 in solution.js (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 24: Char 26 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "srija222",
                        "content": "Guys i did the below code but it is not passing certain test cases can you solve it?\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List arr=new ArrayList<>();\\n        int tot=0,n=num.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            tot=tot*10+num[i];\\n        }\\n         sum=tot+k;\\n        while(sum>0){\\n         int rem=sum%10;\\n        sum=sum/10;\\n        arr.add(rem);\\n        }\\n       Collections.reverse(arr);\\n        return arr;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "- Problem for large numbers with division, for example:\n12630717197566440579/10\n-> change to floor division:  sum//=10\n\n\"Be careful when doing division. By default, the quotient is turned into float, but float does not support such large numbers. If you get an error message saying float does not support such large numbers, then it means the quotient is too large to be stored in float you’ll have to use floor division (//).\""
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Nice and easy problem to get your brain warmed up for the day."
                    },
                    {
                        "username": "kartikdewnani56",
                        "content": "can someone tell me whats the point of int *returnSize in c for this function?"
                    }
                ]
            },
            {
                "id": 1802242,
                "content": [
                    {
                        "username": "BrandonDH",
                        "content": "I can\\'t solve for numbers with more than 20 characters. Anyone else run into that too?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "In python3 I try Floor division (//) for a large integer number instead of divide (/). \\n\\ne.g. 12630717197566440579/10"
                    },
                    {
                        "username": "ntsagar",
                        "content": "Way can we not use just like this.\n\nreturn String((Number(num.join(\"\")) + Number(k))).split(\"\").map(i => Number(i));\n\n\n\n\nI don't know way it fail in some cases.\nnum=[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\nk=516\n\n--- \nnum = [3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\nk=670\n"
                    },
                    {
                        "username": "george-botros",
                        "content": "Why is an ArrayList so much slower than a LinkedList in a Java solution?"
                    },
                    {
                        "username": "phanee16",
                        "content": "```class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        string = \"\"\n        result = []\n        for i in num:\n            string+=str(i)\n        ans = int(string)+k\n        for i in str(ans):\n            result.append(int(i))\n        return result\n```"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "This problem is fine but trivial in some languages"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 67"
                    },
                    {
                        "username": "HangyeomLee",
                        "content": "Why this is not working?\n\nMy code is down below.\n\n `your inline code...\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n\n    // Convert the num array to a bigint\n    var num_int = BigInt(num.join(''));\n\n    // Add k to num_int\n    var sum = BigInt(num_int + k);\n\n    // Convert the sum to an array of digits\n    var res = String(sum);\n\n    return res;\n};\nyour inline code...`/**\n\n\nand the error message says like this:\nLine 16 in solution.js\n    var sum = BigInt(num_int + k);\n                             ^\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n    Line 16: Char 30 in solution.js (addToArrayForm)\n    Line 35: Char 19 in solution.js (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 24: Char 26 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "srija222",
                        "content": "Guys i did the below code but it is not passing certain test cases can you solve it?\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List arr=new ArrayList<>();\\n        int tot=0,n=num.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            tot=tot*10+num[i];\\n        }\\n         sum=tot+k;\\n        while(sum>0){\\n         int rem=sum%10;\\n        sum=sum/10;\\n        arr.add(rem);\\n        }\\n       Collections.reverse(arr);\\n        return arr;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "- Problem for large numbers with division, for example:\n12630717197566440579/10\n-> change to floor division:  sum//=10\n\n\"Be careful when doing division. By default, the quotient is turned into float, but float does not support such large numbers. If you get an error message saying float does not support such large numbers, then it means the quotient is too large to be stored in float you’ll have to use floor division (//).\""
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Nice and easy problem to get your brain warmed up for the day."
                    },
                    {
                        "username": "kartikdewnani56",
                        "content": "can someone tell me whats the point of int *returnSize in c for this function?"
                    }
                ]
            },
            {
                "id": 1802224,
                "content": [
                    {
                        "username": "BrandonDH",
                        "content": "I can\\'t solve for numbers with more than 20 characters. Anyone else run into that too?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "In python3 I try Floor division (//) for a large integer number instead of divide (/). \\n\\ne.g. 12630717197566440579/10"
                    },
                    {
                        "username": "ntsagar",
                        "content": "Way can we not use just like this.\n\nreturn String((Number(num.join(\"\")) + Number(k))).split(\"\").map(i => Number(i));\n\n\n\n\nI don't know way it fail in some cases.\nnum=[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\nk=516\n\n--- \nnum = [3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\nk=670\n"
                    },
                    {
                        "username": "george-botros",
                        "content": "Why is an ArrayList so much slower than a LinkedList in a Java solution?"
                    },
                    {
                        "username": "phanee16",
                        "content": "```class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        string = \"\"\n        result = []\n        for i in num:\n            string+=str(i)\n        ans = int(string)+k\n        for i in str(ans):\n            result.append(int(i))\n        return result\n```"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "This problem is fine but trivial in some languages"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 67"
                    },
                    {
                        "username": "HangyeomLee",
                        "content": "Why this is not working?\n\nMy code is down below.\n\n `your inline code...\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n\n    // Convert the num array to a bigint\n    var num_int = BigInt(num.join(''));\n\n    // Add k to num_int\n    var sum = BigInt(num_int + k);\n\n    // Convert the sum to an array of digits\n    var res = String(sum);\n\n    return res;\n};\nyour inline code...`/**\n\n\nand the error message says like this:\nLine 16 in solution.js\n    var sum = BigInt(num_int + k);\n                             ^\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n    Line 16: Char 30 in solution.js (addToArrayForm)\n    Line 35: Char 19 in solution.js (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 24: Char 26 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "srija222",
                        "content": "Guys i did the below code but it is not passing certain test cases can you solve it?\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List arr=new ArrayList<>();\\n        int tot=0,n=num.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            tot=tot*10+num[i];\\n        }\\n         sum=tot+k;\\n        while(sum>0){\\n         int rem=sum%10;\\n        sum=sum/10;\\n        arr.add(rem);\\n        }\\n       Collections.reverse(arr);\\n        return arr;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "- Problem for large numbers with division, for example:\n12630717197566440579/10\n-> change to floor division:  sum//=10\n\n\"Be careful when doing division. By default, the quotient is turned into float, but float does not support such large numbers. If you get an error message saying float does not support such large numbers, then it means the quotient is too large to be stored in float you’ll have to use floor division (//).\""
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Nice and easy problem to get your brain warmed up for the day."
                    },
                    {
                        "username": "kartikdewnani56",
                        "content": "can someone tell me whats the point of int *returnSize in c for this function?"
                    }
                ]
            },
            {
                "id": 1802212,
                "content": [
                    {
                        "username": "BrandonDH",
                        "content": "I can\\'t solve for numbers with more than 20 characters. Anyone else run into that too?"
                    },
                    {
                        "username": "Yongbi",
                        "content": "In python3 I try Floor division (//) for a large integer number instead of divide (/). \\n\\ne.g. 12630717197566440579/10"
                    },
                    {
                        "username": "ntsagar",
                        "content": "Way can we not use just like this.\n\nreturn String((Number(num.join(\"\")) + Number(k))).split(\"\").map(i => Number(i));\n\n\n\n\nI don't know way it fail in some cases.\nnum=[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\nk=516\n\n--- \nnum = [3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\nk=670\n"
                    },
                    {
                        "username": "george-botros",
                        "content": "Why is an ArrayList so much slower than a LinkedList in a Java solution?"
                    },
                    {
                        "username": "phanee16",
                        "content": "```class Solution:\n    def addToArrayForm(self, num: List[int], k: int) -> List[int]:\n        string = \"\"\n        result = []\n        for i in num:\n            string+=str(i)\n        ans = int(string)+k\n        for i in str(ans):\n            result.append(int(i))\n        return result\n```"
                    },
                    {
                        "username": "TheCreature00",
                        "content": "This problem is fine but trivial in some languages"
                    },
                    {
                        "username": "space_invader",
                        "content": "The same as 67"
                    },
                    {
                        "username": "HangyeomLee",
                        "content": "Why this is not working?\n\nMy code is down below.\n\n `your inline code...\n * @param {number[]} num\n * @param {number} k\n * @return {number[]}\n */\nvar addToArrayForm = function(num, k) {\n\n    // Convert the num array to a bigint\n    var num_int = BigInt(num.join(''));\n\n    // Add k to num_int\n    var sum = BigInt(num_int + k);\n\n    // Convert the sum to an array of digits\n    var res = String(sum);\n\n    return res;\n};\nyour inline code...`/**\n\n\nand the error message says like this:\nLine 16 in solution.js\n    var sum = BigInt(num_int + k);\n                             ^\nTypeError: Cannot mix BigInt and other types, use explicit conversions\n    Line 16: Char 30 in solution.js (addToArrayForm)\n    Line 35: Char 19 in solution.js (Object.<anonymous>)\n    Line 16: Char 8 in runner.js (Object.runner)\n    Line 24: Char 26 in solution.js (Object.<anonymous>)\n    at Module._compile (node:internal/modules/cjs/loader:1101:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1153:10)\n    at Module.load (node:internal/modules/cjs/loader:981:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:822:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47"
                    },
                    {
                        "username": "srija222",
                        "content": "Guys i did the below code but it is not passing certain test cases can you solve it?\\n\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        List arr=new ArrayList<>();\\n        int tot=0,n=num.length;\\n        int sum=0;\\n        for(int i=0;i<n;i++){\\n            tot=tot*10+num[i];\\n        }\\n         sum=tot+k;\\n        while(sum>0){\\n         int rem=sum%10;\\n        sum=sum/10;\\n        arr.add(rem);\\n        }\\n       Collections.reverse(arr);\\n        return arr;\\n    }\\n}"
                    },
                    {
                        "username": "Yongbi",
                        "content": "- Problem for large numbers with division, for example:\n12630717197566440579/10\n-> change to floor division:  sum//=10\n\n\"Be careful when doing division. By default, the quotient is turned into float, but float does not support such large numbers. If you get an error message saying float does not support such large numbers, then it means the quotient is too large to be stored in float you’ll have to use floor division (//).\""
                    },
                    {
                        "username": "danielMleetcode",
                        "content": "Nice and easy problem to get your brain warmed up for the day."
                    },
                    {
                        "username": "kartikdewnani56",
                        "content": "can someone tell me whats the point of int *returnSize in c for this function?"
                    }
                ]
            },
            {
                "id": 1802197,
                "content": [
                    {
                        "username": "rksaxena169",
                        "content": "Its failing at [9,9,9,9,9,9,9,9,9,9] any idea?\\n\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        int arrayToInt = 0;\\n\\n        for(int number: num) arrayToInt = (arrayToInt * 10) + number;\\n        return convertIntToArray(arrayToInt + k);\\n    }\\n\\n    public static List<Integer> convertIntToArray(int sum) {\\n        int modulo = 0;\\n        List<Integer> list = new ArrayList<Integer>();\\n\\n        while(sum != 0) {\\n            modulo = sum % 10;\\n            sum = sum / 10;\\n            list.add(modulo);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Problem for large numbers with division, and int -> bigint\n-> change to floor division: sum//=10\n\n\"Be careful when doing division for such large numbers...\""
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Too many easy problems ..... can\\'t believe\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "nor1999",
                        "content": "Protip: in java use LinkedList instead of ArrayList, it allowed me to reduce execution time from 50 ms to 5ms"
                    },
                    {
                        "username": "shrusky",
                        "content": "My code is giving runtime error for the case\\nnum =\\n[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nk =\\n516\\n\\nCode below is:\\n `class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n     string str;\\n     int n=num.size();\\nlong long int number;\\n\\n     for(int i=0;i<n;i++)\\n     {\\n         str+=to_string(num[i]);///converting vector into string\\n     }\\n\\n\\n    stringstream shru(str);///converting string into number\\n    shru>>number;\\n    number+=k;\\n    \\n    cout<<number;\\n    str=to_string(number);\\n  \\nint len=str.length();\\nnum.resize(len);\\nint last;\\nfor(int i=len-1;i>=0;i--)\\n{\\n    \\n    last=number%10;\\n    num[i]=last;\\n    number=number/10;\\n\\n\\n}\\n\\n    return num;\\n    }\\n};`"
                    },
                    {
                        "username": "fabiecatinella",
                        "content": "Taking a computer architecture course makes the last 3 lc daily questions just repeats of circuits and how they add like the ripple carry adder etc.   "
                    },
                    {
                        "username": "ielectron",
                        "content": "how to do this in c using sorting\\n"
                    },
                    {
                        "username": "tanayas13",
                        "content": "can someone tell why the solution is not working even when i'm using unsigned long long for storing the given array :(\n ``` class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n     vector<int> v;\n     string r=\"\";\n     for(auto i:num)\n     {\n         r+=to_string(i);\n     }\n     \n     unsigned long long int  number=stoull(r);\n     cout<<number;\n      unsigned long long int res=number+k;\n    //  unsigned long long  res=ans;\n     cout<<res;\n     \n     while(res>0)\n     {\n         int i=res%10;\n         res=res/10;\n         v.push_back(i);\n     }\n     reverse(v.begin(),v.end());\n     return v;\n\n        \n    }\n}; ```"
                    },
                    {
                        "username": "heg816",
                        "content": "num can represent a number larger than the limits of the unsigned long long type. an unsigned long long can have at max 20 digits, while num can have 10,000."
                    },
                    {
                        "username": "anuragdeshmukh9090",
                        "content": "damn, input is overflowing!!!!!!😒"
                    },
                    {
                        "username": "ak_giri20",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k)\\n     {\\n        string s1;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            s1+=num[i];\\n            \\n        }\\n        int x=stoi(s1);\\n        int sum=x+k;\\n        string s2=to_string(sum);\\n        vector<int> result;\\n        for(int i=0;i<s2.length();i++){\\n            result.push_back(s2[i]);\\n        }\\n\\n        //for (auto it = result.begin(); it != result.end(); it++)\\n        //cout << *it << \" \";\\n        return result;\\n        }\\n        \\n        \\n};\\n\\nwhats wrong in this code?\\n"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "For Java, using LinkedList instead of ArrayList work wonders."
                    }
                ]
            },
            {
                "id": 1802194,
                "content": [
                    {
                        "username": "rksaxena169",
                        "content": "Its failing at [9,9,9,9,9,9,9,9,9,9] any idea?\\n\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        int arrayToInt = 0;\\n\\n        for(int number: num) arrayToInt = (arrayToInt * 10) + number;\\n        return convertIntToArray(arrayToInt + k);\\n    }\\n\\n    public static List<Integer> convertIntToArray(int sum) {\\n        int modulo = 0;\\n        List<Integer> list = new ArrayList<Integer>();\\n\\n        while(sum != 0) {\\n            modulo = sum % 10;\\n            sum = sum / 10;\\n            list.add(modulo);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Problem for large numbers with division, and int -> bigint\n-> change to floor division: sum//=10\n\n\"Be careful when doing division for such large numbers...\""
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Too many easy problems ..... can\\'t believe\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "nor1999",
                        "content": "Protip: in java use LinkedList instead of ArrayList, it allowed me to reduce execution time from 50 ms to 5ms"
                    },
                    {
                        "username": "shrusky",
                        "content": "My code is giving runtime error for the case\\nnum =\\n[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nk =\\n516\\n\\nCode below is:\\n `class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n     string str;\\n     int n=num.size();\\nlong long int number;\\n\\n     for(int i=0;i<n;i++)\\n     {\\n         str+=to_string(num[i]);///converting vector into string\\n     }\\n\\n\\n    stringstream shru(str);///converting string into number\\n    shru>>number;\\n    number+=k;\\n    \\n    cout<<number;\\n    str=to_string(number);\\n  \\nint len=str.length();\\nnum.resize(len);\\nint last;\\nfor(int i=len-1;i>=0;i--)\\n{\\n    \\n    last=number%10;\\n    num[i]=last;\\n    number=number/10;\\n\\n\\n}\\n\\n    return num;\\n    }\\n};`"
                    },
                    {
                        "username": "fabiecatinella",
                        "content": "Taking a computer architecture course makes the last 3 lc daily questions just repeats of circuits and how they add like the ripple carry adder etc.   "
                    },
                    {
                        "username": "ielectron",
                        "content": "how to do this in c using sorting\\n"
                    },
                    {
                        "username": "tanayas13",
                        "content": "can someone tell why the solution is not working even when i'm using unsigned long long for storing the given array :(\n ``` class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n     vector<int> v;\n     string r=\"\";\n     for(auto i:num)\n     {\n         r+=to_string(i);\n     }\n     \n     unsigned long long int  number=stoull(r);\n     cout<<number;\n      unsigned long long int res=number+k;\n    //  unsigned long long  res=ans;\n     cout<<res;\n     \n     while(res>0)\n     {\n         int i=res%10;\n         res=res/10;\n         v.push_back(i);\n     }\n     reverse(v.begin(),v.end());\n     return v;\n\n        \n    }\n}; ```"
                    },
                    {
                        "username": "heg816",
                        "content": "num can represent a number larger than the limits of the unsigned long long type. an unsigned long long can have at max 20 digits, while num can have 10,000."
                    },
                    {
                        "username": "anuragdeshmukh9090",
                        "content": "damn, input is overflowing!!!!!!😒"
                    },
                    {
                        "username": "ak_giri20",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k)\\n     {\\n        string s1;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            s1+=num[i];\\n            \\n        }\\n        int x=stoi(s1);\\n        int sum=x+k;\\n        string s2=to_string(sum);\\n        vector<int> result;\\n        for(int i=0;i<s2.length();i++){\\n            result.push_back(s2[i]);\\n        }\\n\\n        //for (auto it = result.begin(); it != result.end(); it++)\\n        //cout << *it << \" \";\\n        return result;\\n        }\\n        \\n        \\n};\\n\\nwhats wrong in this code?\\n"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "For Java, using LinkedList instead of ArrayList work wonders."
                    }
                ]
            },
            {
                "id": 1802161,
                "content": [
                    {
                        "username": "rksaxena169",
                        "content": "Its failing at [9,9,9,9,9,9,9,9,9,9] any idea?\\n\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        int arrayToInt = 0;\\n\\n        for(int number: num) arrayToInt = (arrayToInt * 10) + number;\\n        return convertIntToArray(arrayToInt + k);\\n    }\\n\\n    public static List<Integer> convertIntToArray(int sum) {\\n        int modulo = 0;\\n        List<Integer> list = new ArrayList<Integer>();\\n\\n        while(sum != 0) {\\n            modulo = sum % 10;\\n            sum = sum / 10;\\n            list.add(modulo);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Problem for large numbers with division, and int -> bigint\n-> change to floor division: sum//=10\n\n\"Be careful when doing division for such large numbers...\""
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Too many easy problems ..... can\\'t believe\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "nor1999",
                        "content": "Protip: in java use LinkedList instead of ArrayList, it allowed me to reduce execution time from 50 ms to 5ms"
                    },
                    {
                        "username": "shrusky",
                        "content": "My code is giving runtime error for the case\\nnum =\\n[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nk =\\n516\\n\\nCode below is:\\n `class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n     string str;\\n     int n=num.size();\\nlong long int number;\\n\\n     for(int i=0;i<n;i++)\\n     {\\n         str+=to_string(num[i]);///converting vector into string\\n     }\\n\\n\\n    stringstream shru(str);///converting string into number\\n    shru>>number;\\n    number+=k;\\n    \\n    cout<<number;\\n    str=to_string(number);\\n  \\nint len=str.length();\\nnum.resize(len);\\nint last;\\nfor(int i=len-1;i>=0;i--)\\n{\\n    \\n    last=number%10;\\n    num[i]=last;\\n    number=number/10;\\n\\n\\n}\\n\\n    return num;\\n    }\\n};`"
                    },
                    {
                        "username": "fabiecatinella",
                        "content": "Taking a computer architecture course makes the last 3 lc daily questions just repeats of circuits and how they add like the ripple carry adder etc.   "
                    },
                    {
                        "username": "ielectron",
                        "content": "how to do this in c using sorting\\n"
                    },
                    {
                        "username": "tanayas13",
                        "content": "can someone tell why the solution is not working even when i'm using unsigned long long for storing the given array :(\n ``` class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n     vector<int> v;\n     string r=\"\";\n     for(auto i:num)\n     {\n         r+=to_string(i);\n     }\n     \n     unsigned long long int  number=stoull(r);\n     cout<<number;\n      unsigned long long int res=number+k;\n    //  unsigned long long  res=ans;\n     cout<<res;\n     \n     while(res>0)\n     {\n         int i=res%10;\n         res=res/10;\n         v.push_back(i);\n     }\n     reverse(v.begin(),v.end());\n     return v;\n\n        \n    }\n}; ```"
                    },
                    {
                        "username": "heg816",
                        "content": "num can represent a number larger than the limits of the unsigned long long type. an unsigned long long can have at max 20 digits, while num can have 10,000."
                    },
                    {
                        "username": "anuragdeshmukh9090",
                        "content": "damn, input is overflowing!!!!!!😒"
                    },
                    {
                        "username": "ak_giri20",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k)\\n     {\\n        string s1;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            s1+=num[i];\\n            \\n        }\\n        int x=stoi(s1);\\n        int sum=x+k;\\n        string s2=to_string(sum);\\n        vector<int> result;\\n        for(int i=0;i<s2.length();i++){\\n            result.push_back(s2[i]);\\n        }\\n\\n        //for (auto it = result.begin(); it != result.end(); it++)\\n        //cout << *it << \" \";\\n        return result;\\n        }\\n        \\n        \\n};\\n\\nwhats wrong in this code?\\n"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "For Java, using LinkedList instead of ArrayList work wonders."
                    }
                ]
            },
            {
                "id": 1802154,
                "content": [
                    {
                        "username": "rksaxena169",
                        "content": "Its failing at [9,9,9,9,9,9,9,9,9,9] any idea?\\n\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        int arrayToInt = 0;\\n\\n        for(int number: num) arrayToInt = (arrayToInt * 10) + number;\\n        return convertIntToArray(arrayToInt + k);\\n    }\\n\\n    public static List<Integer> convertIntToArray(int sum) {\\n        int modulo = 0;\\n        List<Integer> list = new ArrayList<Integer>();\\n\\n        while(sum != 0) {\\n            modulo = sum % 10;\\n            sum = sum / 10;\\n            list.add(modulo);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Problem for large numbers with division, and int -> bigint\n-> change to floor division: sum//=10\n\n\"Be careful when doing division for such large numbers...\""
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Too many easy problems ..... can\\'t believe\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "nor1999",
                        "content": "Protip: in java use LinkedList instead of ArrayList, it allowed me to reduce execution time from 50 ms to 5ms"
                    },
                    {
                        "username": "shrusky",
                        "content": "My code is giving runtime error for the case\\nnum =\\n[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nk =\\n516\\n\\nCode below is:\\n `class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n     string str;\\n     int n=num.size();\\nlong long int number;\\n\\n     for(int i=0;i<n;i++)\\n     {\\n         str+=to_string(num[i]);///converting vector into string\\n     }\\n\\n\\n    stringstream shru(str);///converting string into number\\n    shru>>number;\\n    number+=k;\\n    \\n    cout<<number;\\n    str=to_string(number);\\n  \\nint len=str.length();\\nnum.resize(len);\\nint last;\\nfor(int i=len-1;i>=0;i--)\\n{\\n    \\n    last=number%10;\\n    num[i]=last;\\n    number=number/10;\\n\\n\\n}\\n\\n    return num;\\n    }\\n};`"
                    },
                    {
                        "username": "fabiecatinella",
                        "content": "Taking a computer architecture course makes the last 3 lc daily questions just repeats of circuits and how they add like the ripple carry adder etc.   "
                    },
                    {
                        "username": "ielectron",
                        "content": "how to do this in c using sorting\\n"
                    },
                    {
                        "username": "tanayas13",
                        "content": "can someone tell why the solution is not working even when i'm using unsigned long long for storing the given array :(\n ``` class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n     vector<int> v;\n     string r=\"\";\n     for(auto i:num)\n     {\n         r+=to_string(i);\n     }\n     \n     unsigned long long int  number=stoull(r);\n     cout<<number;\n      unsigned long long int res=number+k;\n    //  unsigned long long  res=ans;\n     cout<<res;\n     \n     while(res>0)\n     {\n         int i=res%10;\n         res=res/10;\n         v.push_back(i);\n     }\n     reverse(v.begin(),v.end());\n     return v;\n\n        \n    }\n}; ```"
                    },
                    {
                        "username": "heg816",
                        "content": "num can represent a number larger than the limits of the unsigned long long type. an unsigned long long can have at max 20 digits, while num can have 10,000."
                    },
                    {
                        "username": "anuragdeshmukh9090",
                        "content": "damn, input is overflowing!!!!!!😒"
                    },
                    {
                        "username": "ak_giri20",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k)\\n     {\\n        string s1;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            s1+=num[i];\\n            \\n        }\\n        int x=stoi(s1);\\n        int sum=x+k;\\n        string s2=to_string(sum);\\n        vector<int> result;\\n        for(int i=0;i<s2.length();i++){\\n            result.push_back(s2[i]);\\n        }\\n\\n        //for (auto it = result.begin(); it != result.end(); it++)\\n        //cout << *it << \" \";\\n        return result;\\n        }\\n        \\n        \\n};\\n\\nwhats wrong in this code?\\n"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "For Java, using LinkedList instead of ArrayList work wonders."
                    }
                ]
            },
            {
                "id": 1802129,
                "content": [
                    {
                        "username": "rksaxena169",
                        "content": "Its failing at [9,9,9,9,9,9,9,9,9,9] any idea?\\n\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        int arrayToInt = 0;\\n\\n        for(int number: num) arrayToInt = (arrayToInt * 10) + number;\\n        return convertIntToArray(arrayToInt + k);\\n    }\\n\\n    public static List<Integer> convertIntToArray(int sum) {\\n        int modulo = 0;\\n        List<Integer> list = new ArrayList<Integer>();\\n\\n        while(sum != 0) {\\n            modulo = sum % 10;\\n            sum = sum / 10;\\n            list.add(modulo);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Problem for large numbers with division, and int -> bigint\n-> change to floor division: sum//=10\n\n\"Be careful when doing division for such large numbers...\""
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Too many easy problems ..... can\\'t believe\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "nor1999",
                        "content": "Protip: in java use LinkedList instead of ArrayList, it allowed me to reduce execution time from 50 ms to 5ms"
                    },
                    {
                        "username": "shrusky",
                        "content": "My code is giving runtime error for the case\\nnum =\\n[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nk =\\n516\\n\\nCode below is:\\n `class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n     string str;\\n     int n=num.size();\\nlong long int number;\\n\\n     for(int i=0;i<n;i++)\\n     {\\n         str+=to_string(num[i]);///converting vector into string\\n     }\\n\\n\\n    stringstream shru(str);///converting string into number\\n    shru>>number;\\n    number+=k;\\n    \\n    cout<<number;\\n    str=to_string(number);\\n  \\nint len=str.length();\\nnum.resize(len);\\nint last;\\nfor(int i=len-1;i>=0;i--)\\n{\\n    \\n    last=number%10;\\n    num[i]=last;\\n    number=number/10;\\n\\n\\n}\\n\\n    return num;\\n    }\\n};`"
                    },
                    {
                        "username": "fabiecatinella",
                        "content": "Taking a computer architecture course makes the last 3 lc daily questions just repeats of circuits and how they add like the ripple carry adder etc.   "
                    },
                    {
                        "username": "ielectron",
                        "content": "how to do this in c using sorting\\n"
                    },
                    {
                        "username": "tanayas13",
                        "content": "can someone tell why the solution is not working even when i'm using unsigned long long for storing the given array :(\n ``` class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n     vector<int> v;\n     string r=\"\";\n     for(auto i:num)\n     {\n         r+=to_string(i);\n     }\n     \n     unsigned long long int  number=stoull(r);\n     cout<<number;\n      unsigned long long int res=number+k;\n    //  unsigned long long  res=ans;\n     cout<<res;\n     \n     while(res>0)\n     {\n         int i=res%10;\n         res=res/10;\n         v.push_back(i);\n     }\n     reverse(v.begin(),v.end());\n     return v;\n\n        \n    }\n}; ```"
                    },
                    {
                        "username": "heg816",
                        "content": "num can represent a number larger than the limits of the unsigned long long type. an unsigned long long can have at max 20 digits, while num can have 10,000."
                    },
                    {
                        "username": "anuragdeshmukh9090",
                        "content": "damn, input is overflowing!!!!!!😒"
                    },
                    {
                        "username": "ak_giri20",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k)\\n     {\\n        string s1;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            s1+=num[i];\\n            \\n        }\\n        int x=stoi(s1);\\n        int sum=x+k;\\n        string s2=to_string(sum);\\n        vector<int> result;\\n        for(int i=0;i<s2.length();i++){\\n            result.push_back(s2[i]);\\n        }\\n\\n        //for (auto it = result.begin(); it != result.end(); it++)\\n        //cout << *it << \" \";\\n        return result;\\n        }\\n        \\n        \\n};\\n\\nwhats wrong in this code?\\n"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "For Java, using LinkedList instead of ArrayList work wonders."
                    }
                ]
            },
            {
                "id": 1802107,
                "content": [
                    {
                        "username": "rksaxena169",
                        "content": "Its failing at [9,9,9,9,9,9,9,9,9,9] any idea?\\n\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        int arrayToInt = 0;\\n\\n        for(int number: num) arrayToInt = (arrayToInt * 10) + number;\\n        return convertIntToArray(arrayToInt + k);\\n    }\\n\\n    public static List<Integer> convertIntToArray(int sum) {\\n        int modulo = 0;\\n        List<Integer> list = new ArrayList<Integer>();\\n\\n        while(sum != 0) {\\n            modulo = sum % 10;\\n            sum = sum / 10;\\n            list.add(modulo);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Problem for large numbers with division, and int -> bigint\n-> change to floor division: sum//=10\n\n\"Be careful when doing division for such large numbers...\""
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Too many easy problems ..... can\\'t believe\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "nor1999",
                        "content": "Protip: in java use LinkedList instead of ArrayList, it allowed me to reduce execution time from 50 ms to 5ms"
                    },
                    {
                        "username": "shrusky",
                        "content": "My code is giving runtime error for the case\\nnum =\\n[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nk =\\n516\\n\\nCode below is:\\n `class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n     string str;\\n     int n=num.size();\\nlong long int number;\\n\\n     for(int i=0;i<n;i++)\\n     {\\n         str+=to_string(num[i]);///converting vector into string\\n     }\\n\\n\\n    stringstream shru(str);///converting string into number\\n    shru>>number;\\n    number+=k;\\n    \\n    cout<<number;\\n    str=to_string(number);\\n  \\nint len=str.length();\\nnum.resize(len);\\nint last;\\nfor(int i=len-1;i>=0;i--)\\n{\\n    \\n    last=number%10;\\n    num[i]=last;\\n    number=number/10;\\n\\n\\n}\\n\\n    return num;\\n    }\\n};`"
                    },
                    {
                        "username": "fabiecatinella",
                        "content": "Taking a computer architecture course makes the last 3 lc daily questions just repeats of circuits and how they add like the ripple carry adder etc.   "
                    },
                    {
                        "username": "ielectron",
                        "content": "how to do this in c using sorting\\n"
                    },
                    {
                        "username": "tanayas13",
                        "content": "can someone tell why the solution is not working even when i'm using unsigned long long for storing the given array :(\n ``` class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n     vector<int> v;\n     string r=\"\";\n     for(auto i:num)\n     {\n         r+=to_string(i);\n     }\n     \n     unsigned long long int  number=stoull(r);\n     cout<<number;\n      unsigned long long int res=number+k;\n    //  unsigned long long  res=ans;\n     cout<<res;\n     \n     while(res>0)\n     {\n         int i=res%10;\n         res=res/10;\n         v.push_back(i);\n     }\n     reverse(v.begin(),v.end());\n     return v;\n\n        \n    }\n}; ```"
                    },
                    {
                        "username": "heg816",
                        "content": "num can represent a number larger than the limits of the unsigned long long type. an unsigned long long can have at max 20 digits, while num can have 10,000."
                    },
                    {
                        "username": "anuragdeshmukh9090",
                        "content": "damn, input is overflowing!!!!!!😒"
                    },
                    {
                        "username": "ak_giri20",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k)\\n     {\\n        string s1;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            s1+=num[i];\\n            \\n        }\\n        int x=stoi(s1);\\n        int sum=x+k;\\n        string s2=to_string(sum);\\n        vector<int> result;\\n        for(int i=0;i<s2.length();i++){\\n            result.push_back(s2[i]);\\n        }\\n\\n        //for (auto it = result.begin(); it != result.end(); it++)\\n        //cout << *it << \" \";\\n        return result;\\n        }\\n        \\n        \\n};\\n\\nwhats wrong in this code?\\n"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "For Java, using LinkedList instead of ArrayList work wonders."
                    }
                ]
            },
            {
                "id": 1802097,
                "content": [
                    {
                        "username": "rksaxena169",
                        "content": "Its failing at [9,9,9,9,9,9,9,9,9,9] any idea?\\n\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        int arrayToInt = 0;\\n\\n        for(int number: num) arrayToInt = (arrayToInt * 10) + number;\\n        return convertIntToArray(arrayToInt + k);\\n    }\\n\\n    public static List<Integer> convertIntToArray(int sum) {\\n        int modulo = 0;\\n        List<Integer> list = new ArrayList<Integer>();\\n\\n        while(sum != 0) {\\n            modulo = sum % 10;\\n            sum = sum / 10;\\n            list.add(modulo);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Problem for large numbers with division, and int -> bigint\n-> change to floor division: sum//=10\n\n\"Be careful when doing division for such large numbers...\""
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Too many easy problems ..... can\\'t believe\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "nor1999",
                        "content": "Protip: in java use LinkedList instead of ArrayList, it allowed me to reduce execution time from 50 ms to 5ms"
                    },
                    {
                        "username": "shrusky",
                        "content": "My code is giving runtime error for the case\\nnum =\\n[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nk =\\n516\\n\\nCode below is:\\n `class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n     string str;\\n     int n=num.size();\\nlong long int number;\\n\\n     for(int i=0;i<n;i++)\\n     {\\n         str+=to_string(num[i]);///converting vector into string\\n     }\\n\\n\\n    stringstream shru(str);///converting string into number\\n    shru>>number;\\n    number+=k;\\n    \\n    cout<<number;\\n    str=to_string(number);\\n  \\nint len=str.length();\\nnum.resize(len);\\nint last;\\nfor(int i=len-1;i>=0;i--)\\n{\\n    \\n    last=number%10;\\n    num[i]=last;\\n    number=number/10;\\n\\n\\n}\\n\\n    return num;\\n    }\\n};`"
                    },
                    {
                        "username": "fabiecatinella",
                        "content": "Taking a computer architecture course makes the last 3 lc daily questions just repeats of circuits and how they add like the ripple carry adder etc.   "
                    },
                    {
                        "username": "ielectron",
                        "content": "how to do this in c using sorting\\n"
                    },
                    {
                        "username": "tanayas13",
                        "content": "can someone tell why the solution is not working even when i'm using unsigned long long for storing the given array :(\n ``` class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n     vector<int> v;\n     string r=\"\";\n     for(auto i:num)\n     {\n         r+=to_string(i);\n     }\n     \n     unsigned long long int  number=stoull(r);\n     cout<<number;\n      unsigned long long int res=number+k;\n    //  unsigned long long  res=ans;\n     cout<<res;\n     \n     while(res>0)\n     {\n         int i=res%10;\n         res=res/10;\n         v.push_back(i);\n     }\n     reverse(v.begin(),v.end());\n     return v;\n\n        \n    }\n}; ```"
                    },
                    {
                        "username": "heg816",
                        "content": "num can represent a number larger than the limits of the unsigned long long type. an unsigned long long can have at max 20 digits, while num can have 10,000."
                    },
                    {
                        "username": "anuragdeshmukh9090",
                        "content": "damn, input is overflowing!!!!!!😒"
                    },
                    {
                        "username": "ak_giri20",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k)\\n     {\\n        string s1;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            s1+=num[i];\\n            \\n        }\\n        int x=stoi(s1);\\n        int sum=x+k;\\n        string s2=to_string(sum);\\n        vector<int> result;\\n        for(int i=0;i<s2.length();i++){\\n            result.push_back(s2[i]);\\n        }\\n\\n        //for (auto it = result.begin(); it != result.end(); it++)\\n        //cout << *it << \" \";\\n        return result;\\n        }\\n        \\n        \\n};\\n\\nwhats wrong in this code?\\n"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "For Java, using LinkedList instead of ArrayList work wonders."
                    }
                ]
            },
            {
                "id": 1802084,
                "content": [
                    {
                        "username": "rksaxena169",
                        "content": "Its failing at [9,9,9,9,9,9,9,9,9,9] any idea?\\n\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        int arrayToInt = 0;\\n\\n        for(int number: num) arrayToInt = (arrayToInt * 10) + number;\\n        return convertIntToArray(arrayToInt + k);\\n    }\\n\\n    public static List<Integer> convertIntToArray(int sum) {\\n        int modulo = 0;\\n        List<Integer> list = new ArrayList<Integer>();\\n\\n        while(sum != 0) {\\n            modulo = sum % 10;\\n            sum = sum / 10;\\n            list.add(modulo);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Problem for large numbers with division, and int -> bigint\n-> change to floor division: sum//=10\n\n\"Be careful when doing division for such large numbers...\""
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Too many easy problems ..... can\\'t believe\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "nor1999",
                        "content": "Protip: in java use LinkedList instead of ArrayList, it allowed me to reduce execution time from 50 ms to 5ms"
                    },
                    {
                        "username": "shrusky",
                        "content": "My code is giving runtime error for the case\\nnum =\\n[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nk =\\n516\\n\\nCode below is:\\n `class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n     string str;\\n     int n=num.size();\\nlong long int number;\\n\\n     for(int i=0;i<n;i++)\\n     {\\n         str+=to_string(num[i]);///converting vector into string\\n     }\\n\\n\\n    stringstream shru(str);///converting string into number\\n    shru>>number;\\n    number+=k;\\n    \\n    cout<<number;\\n    str=to_string(number);\\n  \\nint len=str.length();\\nnum.resize(len);\\nint last;\\nfor(int i=len-1;i>=0;i--)\\n{\\n    \\n    last=number%10;\\n    num[i]=last;\\n    number=number/10;\\n\\n\\n}\\n\\n    return num;\\n    }\\n};`"
                    },
                    {
                        "username": "fabiecatinella",
                        "content": "Taking a computer architecture course makes the last 3 lc daily questions just repeats of circuits and how they add like the ripple carry adder etc.   "
                    },
                    {
                        "username": "ielectron",
                        "content": "how to do this in c using sorting\\n"
                    },
                    {
                        "username": "tanayas13",
                        "content": "can someone tell why the solution is not working even when i'm using unsigned long long for storing the given array :(\n ``` class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n     vector<int> v;\n     string r=\"\";\n     for(auto i:num)\n     {\n         r+=to_string(i);\n     }\n     \n     unsigned long long int  number=stoull(r);\n     cout<<number;\n      unsigned long long int res=number+k;\n    //  unsigned long long  res=ans;\n     cout<<res;\n     \n     while(res>0)\n     {\n         int i=res%10;\n         res=res/10;\n         v.push_back(i);\n     }\n     reverse(v.begin(),v.end());\n     return v;\n\n        \n    }\n}; ```"
                    },
                    {
                        "username": "heg816",
                        "content": "num can represent a number larger than the limits of the unsigned long long type. an unsigned long long can have at max 20 digits, while num can have 10,000."
                    },
                    {
                        "username": "anuragdeshmukh9090",
                        "content": "damn, input is overflowing!!!!!!😒"
                    },
                    {
                        "username": "ak_giri20",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k)\\n     {\\n        string s1;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            s1+=num[i];\\n            \\n        }\\n        int x=stoi(s1);\\n        int sum=x+k;\\n        string s2=to_string(sum);\\n        vector<int> result;\\n        for(int i=0;i<s2.length();i++){\\n            result.push_back(s2[i]);\\n        }\\n\\n        //for (auto it = result.begin(); it != result.end(); it++)\\n        //cout << *it << \" \";\\n        return result;\\n        }\\n        \\n        \\n};\\n\\nwhats wrong in this code?\\n"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "For Java, using LinkedList instead of ArrayList work wonders."
                    }
                ]
            },
            {
                "id": 1802078,
                "content": [
                    {
                        "username": "rksaxena169",
                        "content": "Its failing at [9,9,9,9,9,9,9,9,9,9] any idea?\\n\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        int arrayToInt = 0;\\n\\n        for(int number: num) arrayToInt = (arrayToInt * 10) + number;\\n        return convertIntToArray(arrayToInt + k);\\n    }\\n\\n    public static List<Integer> convertIntToArray(int sum) {\\n        int modulo = 0;\\n        List<Integer> list = new ArrayList<Integer>();\\n\\n        while(sum != 0) {\\n            modulo = sum % 10;\\n            sum = sum / 10;\\n            list.add(modulo);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Problem for large numbers with division, and int -> bigint\n-> change to floor division: sum//=10\n\n\"Be careful when doing division for such large numbers...\""
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Too many easy problems ..... can\\'t believe\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "nor1999",
                        "content": "Protip: in java use LinkedList instead of ArrayList, it allowed me to reduce execution time from 50 ms to 5ms"
                    },
                    {
                        "username": "shrusky",
                        "content": "My code is giving runtime error for the case\\nnum =\\n[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nk =\\n516\\n\\nCode below is:\\n `class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n     string str;\\n     int n=num.size();\\nlong long int number;\\n\\n     for(int i=0;i<n;i++)\\n     {\\n         str+=to_string(num[i]);///converting vector into string\\n     }\\n\\n\\n    stringstream shru(str);///converting string into number\\n    shru>>number;\\n    number+=k;\\n    \\n    cout<<number;\\n    str=to_string(number);\\n  \\nint len=str.length();\\nnum.resize(len);\\nint last;\\nfor(int i=len-1;i>=0;i--)\\n{\\n    \\n    last=number%10;\\n    num[i]=last;\\n    number=number/10;\\n\\n\\n}\\n\\n    return num;\\n    }\\n};`"
                    },
                    {
                        "username": "fabiecatinella",
                        "content": "Taking a computer architecture course makes the last 3 lc daily questions just repeats of circuits and how they add like the ripple carry adder etc.   "
                    },
                    {
                        "username": "ielectron",
                        "content": "how to do this in c using sorting\\n"
                    },
                    {
                        "username": "tanayas13",
                        "content": "can someone tell why the solution is not working even when i'm using unsigned long long for storing the given array :(\n ``` class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n     vector<int> v;\n     string r=\"\";\n     for(auto i:num)\n     {\n         r+=to_string(i);\n     }\n     \n     unsigned long long int  number=stoull(r);\n     cout<<number;\n      unsigned long long int res=number+k;\n    //  unsigned long long  res=ans;\n     cout<<res;\n     \n     while(res>0)\n     {\n         int i=res%10;\n         res=res/10;\n         v.push_back(i);\n     }\n     reverse(v.begin(),v.end());\n     return v;\n\n        \n    }\n}; ```"
                    },
                    {
                        "username": "heg816",
                        "content": "num can represent a number larger than the limits of the unsigned long long type. an unsigned long long can have at max 20 digits, while num can have 10,000."
                    },
                    {
                        "username": "anuragdeshmukh9090",
                        "content": "damn, input is overflowing!!!!!!😒"
                    },
                    {
                        "username": "ak_giri20",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k)\\n     {\\n        string s1;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            s1+=num[i];\\n            \\n        }\\n        int x=stoi(s1);\\n        int sum=x+k;\\n        string s2=to_string(sum);\\n        vector<int> result;\\n        for(int i=0;i<s2.length();i++){\\n            result.push_back(s2[i]);\\n        }\\n\\n        //for (auto it = result.begin(); it != result.end(); it++)\\n        //cout << *it << \" \";\\n        return result;\\n        }\\n        \\n        \\n};\\n\\nwhats wrong in this code?\\n"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "For Java, using LinkedList instead of ArrayList work wonders."
                    }
                ]
            },
            {
                "id": 1802031,
                "content": [
                    {
                        "username": "rksaxena169",
                        "content": "Its failing at [9,9,9,9,9,9,9,9,9,9] any idea?\\n\\n public List<Integer> addToArrayForm(int[] num, int k) {\\n        int arrayToInt = 0;\\n\\n        for(int number: num) arrayToInt = (arrayToInt * 10) + number;\\n        return convertIntToArray(arrayToInt + k);\\n    }\\n\\n    public static List<Integer> convertIntToArray(int sum) {\\n        int modulo = 0;\\n        List<Integer> list = new ArrayList<Integer>();\\n\\n        while(sum != 0) {\\n            modulo = sum % 10;\\n            sum = sum / 10;\\n            list.add(modulo);\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }"
                    },
                    {
                        "username": "Yongbi",
                        "content": "Problem for large numbers with division, and int -> bigint\n-> change to floor division: sum//=10\n\n\"Be careful when doing division for such large numbers...\""
                    },
                    {
                        "username": "VikasSoni10",
                        "content": "Too many easy problems ..... can\\'t believe\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F\\uD83E\\uDD26\\u200D\\u2642\\uFE0F"
                    },
                    {
                        "username": "nor1999",
                        "content": "Protip: in java use LinkedList instead of ArrayList, it allowed me to reduce execution time from 50 ms to 5ms"
                    },
                    {
                        "username": "shrusky",
                        "content": "My code is giving runtime error for the case\\nnum =\\n[1,2,6,3,0,7,1,7,1,9,7,5,6,6,4,4,0,0,6,3]\\nk =\\n516\\n\\nCode below is:\\n `class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n\\n     string str;\\n     int n=num.size();\\nlong long int number;\\n\\n     for(int i=0;i<n;i++)\\n     {\\n         str+=to_string(num[i]);///converting vector into string\\n     }\\n\\n\\n    stringstream shru(str);///converting string into number\\n    shru>>number;\\n    number+=k;\\n    \\n    cout<<number;\\n    str=to_string(number);\\n  \\nint len=str.length();\\nnum.resize(len);\\nint last;\\nfor(int i=len-1;i>=0;i--)\\n{\\n    \\n    last=number%10;\\n    num[i]=last;\\n    number=number/10;\\n\\n\\n}\\n\\n    return num;\\n    }\\n};`"
                    },
                    {
                        "username": "fabiecatinella",
                        "content": "Taking a computer architecture course makes the last 3 lc daily questions just repeats of circuits and how they add like the ripple carry adder etc.   "
                    },
                    {
                        "username": "ielectron",
                        "content": "how to do this in c using sorting\\n"
                    },
                    {
                        "username": "tanayas13",
                        "content": "can someone tell why the solution is not working even when i'm using unsigned long long for storing the given array :(\n ``` class Solution {\npublic:\n    vector<int> addToArrayForm(vector<int>& num, int k) {\n     vector<int> v;\n     string r=\"\";\n     for(auto i:num)\n     {\n         r+=to_string(i);\n     }\n     \n     unsigned long long int  number=stoull(r);\n     cout<<number;\n      unsigned long long int res=number+k;\n    //  unsigned long long  res=ans;\n     cout<<res;\n     \n     while(res>0)\n     {\n         int i=res%10;\n         res=res/10;\n         v.push_back(i);\n     }\n     reverse(v.begin(),v.end());\n     return v;\n\n        \n    }\n}; ```"
                    },
                    {
                        "username": "heg816",
                        "content": "num can represent a number larger than the limits of the unsigned long long type. an unsigned long long can have at max 20 digits, while num can have 10,000."
                    },
                    {
                        "username": "anuragdeshmukh9090",
                        "content": "damn, input is overflowing!!!!!!😒"
                    },
                    {
                        "username": "ak_giri20",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k)\\n     {\\n        string s1;\\n        for(int i=0;i<num.size();i++)\\n        {\\n            s1+=num[i];\\n            \\n        }\\n        int x=stoi(s1);\\n        int sum=x+k;\\n        string s2=to_string(sum);\\n        vector<int> result;\\n        for(int i=0;i<s2.length();i++){\\n            result.push_back(s2[i]);\\n        }\\n\\n        //for (auto it = result.begin(); it != result.end(); it++)\\n        //cout << *it << \" \";\\n        return result;\\n        }\\n        \\n        \\n};\\n\\nwhats wrong in this code?\\n"
                    },
                    {
                        "username": "Ashwin_Acharya",
                        "content": "For Java, using LinkedList instead of ArrayList work wonders."
                    }
                ]
            },
            {
                "id": 1802020,
                "content": [
                    {
                        "username": "Yongbi",
                        "content": "From 13-15 February challenges on leetcode like: \n`\"we are _simpler_ than your girlfriends\"`"
                    },
                    {
                        "username": "nihalhunmai",
                        "content": "sheesh"
                    },
                    {
                        "username": "vaxbhav",
                        "content": "`class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v;\\n        stack<int>st;  \\n        int size=num.size();\\n        int n=0;\\n        int power=size-1;\\n        for(int i=0; i<size; i++)\\n        {\\n            n=n+(num[i]*pow(10, power));\\n            power--;\\n        }\\n        n=n+k;\\n        int a=0;\\n        while(n>0)\\n        {\\n            a=n%10;\\n            st.push(a);\\n            n=n/10;\\n        }\\n        while(!st.empty())\\n        {\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        return v;\\n    }  \\n};`\\n\\nThis code is passing the given test cases but gives runtime error when I submit. Please Check for any errors. I think this is correct approach. Any correction is appreciated."
                    },
                    {
                        "username": "heg816",
                        "content": "num can be very large, meaning that when it tries to find pow(10, size - 1), it may exceed the limits of primitive types (including double)."
                    },
                    {
                        "username": "sasukesharma",
                        "content": "we can use yesterday\\'s idea as change the given k to an array and do array addition"
                    },
                    {
                        "username": "VISHAL_SUJAY_KUMAR",
                        "content": "It should be updated to medium question.\\nToo much of corner cases that needed to be taken care."
                    },
                    {
                        "username": "kentnousagi",
                        "content": "Not smart enough so this is HELLA ANNOYING to me "
                    },
                    {
                        "username": "mohit__agarwal",
                        "content": "Add the numbers like we did we in our schools. We just have to think how to break k in digits and then add it to the elements of the vector from the reverse order.\\nWe have to run a loop till array is complete and till carry and k is not equal to zero.\\nAdd the digits of k to the last element of the array and maintain a carry."
                    },
                    {
                        "username": "PayalMaheshwari",
                        "content": "Can somebody help me figure out the problem with my solution?\nclass Solution \n{\n    public List<Integer> addToArrayForm(int[] num, int k) \n    {\n        int n = num.length;\n        long sum = 0, p = n-1;\n        for(int i=0; i<n; i++)\n        {\n            sum += num[i]*Math.pow(10, p);\n            p--;\n        }\n        sum = sum + k;\n        List<Integer> list = new ArrayList<Integer>();\n        while(sum!=0)\n        {\n            int r = (int)sum%10;\n            list.add(r);\n            sum /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\nIt isn't working for the test case where the input is: num = [9,9,9,9,9,9,9,9,9,9] and k = 1\nOutput coming is: [1,0,0,0,0,0,0,0,0,0,8]"
                    },
                    {
                        "username": "pi2labs",
                        "content": "Python experts: can someone please let me know the TC of this one liner ? \n My understanding is O(M.N) where join takes O(n) operation and O(m) times to map string to int and vice versa. \n\n `return map(int, list(str(int(''.join(map(str, num))) + k)))`"
                    },
                    {
                        "username": "Aditya_Patil11",
                        "content": "why this giving error\\n\\nterminate called after throwing an instance of \\'std::out_of_range\\'\\n  what():  stoi\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>ans;\\n        string str=\"\";\\n       for(int i=0;i<num.size();i++){\\n           str+=to_string(num[i]);\\n\\n       }\\n       long n1=stoi(str);\\n      long fn=(n1+k);\\n      long y=fn;\\n      while(y>0){\\n          ans.push_back(y%10);\\n          y/=10;\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801995,
                "content": [
                    {
                        "username": "Yongbi",
                        "content": "From 13-15 February challenges on leetcode like: \n`\"we are _simpler_ than your girlfriends\"`"
                    },
                    {
                        "username": "nihalhunmai",
                        "content": "sheesh"
                    },
                    {
                        "username": "vaxbhav",
                        "content": "`class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v;\\n        stack<int>st;  \\n        int size=num.size();\\n        int n=0;\\n        int power=size-1;\\n        for(int i=0; i<size; i++)\\n        {\\n            n=n+(num[i]*pow(10, power));\\n            power--;\\n        }\\n        n=n+k;\\n        int a=0;\\n        while(n>0)\\n        {\\n            a=n%10;\\n            st.push(a);\\n            n=n/10;\\n        }\\n        while(!st.empty())\\n        {\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        return v;\\n    }  \\n};`\\n\\nThis code is passing the given test cases but gives runtime error when I submit. Please Check for any errors. I think this is correct approach. Any correction is appreciated."
                    },
                    {
                        "username": "heg816",
                        "content": "num can be very large, meaning that when it tries to find pow(10, size - 1), it may exceed the limits of primitive types (including double)."
                    },
                    {
                        "username": "sasukesharma",
                        "content": "we can use yesterday\\'s idea as change the given k to an array and do array addition"
                    },
                    {
                        "username": "VISHAL_SUJAY_KUMAR",
                        "content": "It should be updated to medium question.\\nToo much of corner cases that needed to be taken care."
                    },
                    {
                        "username": "kentnousagi",
                        "content": "Not smart enough so this is HELLA ANNOYING to me "
                    },
                    {
                        "username": "mohit__agarwal",
                        "content": "Add the numbers like we did we in our schools. We just have to think how to break k in digits and then add it to the elements of the vector from the reverse order.\\nWe have to run a loop till array is complete and till carry and k is not equal to zero.\\nAdd the digits of k to the last element of the array and maintain a carry."
                    },
                    {
                        "username": "PayalMaheshwari",
                        "content": "Can somebody help me figure out the problem with my solution?\nclass Solution \n{\n    public List<Integer> addToArrayForm(int[] num, int k) \n    {\n        int n = num.length;\n        long sum = 0, p = n-1;\n        for(int i=0; i<n; i++)\n        {\n            sum += num[i]*Math.pow(10, p);\n            p--;\n        }\n        sum = sum + k;\n        List<Integer> list = new ArrayList<Integer>();\n        while(sum!=0)\n        {\n            int r = (int)sum%10;\n            list.add(r);\n            sum /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\nIt isn't working for the test case where the input is: num = [9,9,9,9,9,9,9,9,9,9] and k = 1\nOutput coming is: [1,0,0,0,0,0,0,0,0,0,8]"
                    },
                    {
                        "username": "pi2labs",
                        "content": "Python experts: can someone please let me know the TC of this one liner ? \n My understanding is O(M.N) where join takes O(n) operation and O(m) times to map string to int and vice versa. \n\n `return map(int, list(str(int(''.join(map(str, num))) + k)))`"
                    },
                    {
                        "username": "Aditya_Patil11",
                        "content": "why this giving error\\n\\nterminate called after throwing an instance of \\'std::out_of_range\\'\\n  what():  stoi\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>ans;\\n        string str=\"\";\\n       for(int i=0;i<num.size();i++){\\n           str+=to_string(num[i]);\\n\\n       }\\n       long n1=stoi(str);\\n      long fn=(n1+k);\\n      long y=fn;\\n      while(y>0){\\n          ans.push_back(y%10);\\n          y/=10;\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801979,
                "content": [
                    {
                        "username": "Yongbi",
                        "content": "From 13-15 February challenges on leetcode like: \n`\"we are _simpler_ than your girlfriends\"`"
                    },
                    {
                        "username": "nihalhunmai",
                        "content": "sheesh"
                    },
                    {
                        "username": "vaxbhav",
                        "content": "`class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v;\\n        stack<int>st;  \\n        int size=num.size();\\n        int n=0;\\n        int power=size-1;\\n        for(int i=0; i<size; i++)\\n        {\\n            n=n+(num[i]*pow(10, power));\\n            power--;\\n        }\\n        n=n+k;\\n        int a=0;\\n        while(n>0)\\n        {\\n            a=n%10;\\n            st.push(a);\\n            n=n/10;\\n        }\\n        while(!st.empty())\\n        {\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        return v;\\n    }  \\n};`\\n\\nThis code is passing the given test cases but gives runtime error when I submit. Please Check for any errors. I think this is correct approach. Any correction is appreciated."
                    },
                    {
                        "username": "heg816",
                        "content": "num can be very large, meaning that when it tries to find pow(10, size - 1), it may exceed the limits of primitive types (including double)."
                    },
                    {
                        "username": "sasukesharma",
                        "content": "we can use yesterday\\'s idea as change the given k to an array and do array addition"
                    },
                    {
                        "username": "VISHAL_SUJAY_KUMAR",
                        "content": "It should be updated to medium question.\\nToo much of corner cases that needed to be taken care."
                    },
                    {
                        "username": "kentnousagi",
                        "content": "Not smart enough so this is HELLA ANNOYING to me "
                    },
                    {
                        "username": "mohit__agarwal",
                        "content": "Add the numbers like we did we in our schools. We just have to think how to break k in digits and then add it to the elements of the vector from the reverse order.\\nWe have to run a loop till array is complete and till carry and k is not equal to zero.\\nAdd the digits of k to the last element of the array and maintain a carry."
                    },
                    {
                        "username": "PayalMaheshwari",
                        "content": "Can somebody help me figure out the problem with my solution?\nclass Solution \n{\n    public List<Integer> addToArrayForm(int[] num, int k) \n    {\n        int n = num.length;\n        long sum = 0, p = n-1;\n        for(int i=0; i<n; i++)\n        {\n            sum += num[i]*Math.pow(10, p);\n            p--;\n        }\n        sum = sum + k;\n        List<Integer> list = new ArrayList<Integer>();\n        while(sum!=0)\n        {\n            int r = (int)sum%10;\n            list.add(r);\n            sum /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\nIt isn't working for the test case where the input is: num = [9,9,9,9,9,9,9,9,9,9] and k = 1\nOutput coming is: [1,0,0,0,0,0,0,0,0,0,8]"
                    },
                    {
                        "username": "pi2labs",
                        "content": "Python experts: can someone please let me know the TC of this one liner ? \n My understanding is O(M.N) where join takes O(n) operation and O(m) times to map string to int and vice versa. \n\n `return map(int, list(str(int(''.join(map(str, num))) + k)))`"
                    },
                    {
                        "username": "Aditya_Patil11",
                        "content": "why this giving error\\n\\nterminate called after throwing an instance of \\'std::out_of_range\\'\\n  what():  stoi\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>ans;\\n        string str=\"\";\\n       for(int i=0;i<num.size();i++){\\n           str+=to_string(num[i]);\\n\\n       }\\n       long n1=stoi(str);\\n      long fn=(n1+k);\\n      long y=fn;\\n      while(y>0){\\n          ans.push_back(y%10);\\n          y/=10;\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801911,
                "content": [
                    {
                        "username": "Yongbi",
                        "content": "From 13-15 February challenges on leetcode like: \n`\"we are _simpler_ than your girlfriends\"`"
                    },
                    {
                        "username": "nihalhunmai",
                        "content": "sheesh"
                    },
                    {
                        "username": "vaxbhav",
                        "content": "`class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v;\\n        stack<int>st;  \\n        int size=num.size();\\n        int n=0;\\n        int power=size-1;\\n        for(int i=0; i<size; i++)\\n        {\\n            n=n+(num[i]*pow(10, power));\\n            power--;\\n        }\\n        n=n+k;\\n        int a=0;\\n        while(n>0)\\n        {\\n            a=n%10;\\n            st.push(a);\\n            n=n/10;\\n        }\\n        while(!st.empty())\\n        {\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        return v;\\n    }  \\n};`\\n\\nThis code is passing the given test cases but gives runtime error when I submit. Please Check for any errors. I think this is correct approach. Any correction is appreciated."
                    },
                    {
                        "username": "heg816",
                        "content": "num can be very large, meaning that when it tries to find pow(10, size - 1), it may exceed the limits of primitive types (including double)."
                    },
                    {
                        "username": "sasukesharma",
                        "content": "we can use yesterday\\'s idea as change the given k to an array and do array addition"
                    },
                    {
                        "username": "VISHAL_SUJAY_KUMAR",
                        "content": "It should be updated to medium question.\\nToo much of corner cases that needed to be taken care."
                    },
                    {
                        "username": "kentnousagi",
                        "content": "Not smart enough so this is HELLA ANNOYING to me "
                    },
                    {
                        "username": "mohit__agarwal",
                        "content": "Add the numbers like we did we in our schools. We just have to think how to break k in digits and then add it to the elements of the vector from the reverse order.\\nWe have to run a loop till array is complete and till carry and k is not equal to zero.\\nAdd the digits of k to the last element of the array and maintain a carry."
                    },
                    {
                        "username": "PayalMaheshwari",
                        "content": "Can somebody help me figure out the problem with my solution?\nclass Solution \n{\n    public List<Integer> addToArrayForm(int[] num, int k) \n    {\n        int n = num.length;\n        long sum = 0, p = n-1;\n        for(int i=0; i<n; i++)\n        {\n            sum += num[i]*Math.pow(10, p);\n            p--;\n        }\n        sum = sum + k;\n        List<Integer> list = new ArrayList<Integer>();\n        while(sum!=0)\n        {\n            int r = (int)sum%10;\n            list.add(r);\n            sum /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\nIt isn't working for the test case where the input is: num = [9,9,9,9,9,9,9,9,9,9] and k = 1\nOutput coming is: [1,0,0,0,0,0,0,0,0,0,8]"
                    },
                    {
                        "username": "pi2labs",
                        "content": "Python experts: can someone please let me know the TC of this one liner ? \n My understanding is O(M.N) where join takes O(n) operation and O(m) times to map string to int and vice versa. \n\n `return map(int, list(str(int(''.join(map(str, num))) + k)))`"
                    },
                    {
                        "username": "Aditya_Patil11",
                        "content": "why this giving error\\n\\nterminate called after throwing an instance of \\'std::out_of_range\\'\\n  what():  stoi\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>ans;\\n        string str=\"\";\\n       for(int i=0;i<num.size();i++){\\n           str+=to_string(num[i]);\\n\\n       }\\n       long n1=stoi(str);\\n      long fn=(n1+k);\\n      long y=fn;\\n      while(y>0){\\n          ans.push_back(y%10);\\n          y/=10;\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801897,
                "content": [
                    {
                        "username": "Yongbi",
                        "content": "From 13-15 February challenges on leetcode like: \n`\"we are _simpler_ than your girlfriends\"`"
                    },
                    {
                        "username": "nihalhunmai",
                        "content": "sheesh"
                    },
                    {
                        "username": "vaxbhav",
                        "content": "`class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v;\\n        stack<int>st;  \\n        int size=num.size();\\n        int n=0;\\n        int power=size-1;\\n        for(int i=0; i<size; i++)\\n        {\\n            n=n+(num[i]*pow(10, power));\\n            power--;\\n        }\\n        n=n+k;\\n        int a=0;\\n        while(n>0)\\n        {\\n            a=n%10;\\n            st.push(a);\\n            n=n/10;\\n        }\\n        while(!st.empty())\\n        {\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        return v;\\n    }  \\n};`\\n\\nThis code is passing the given test cases but gives runtime error when I submit. Please Check for any errors. I think this is correct approach. Any correction is appreciated."
                    },
                    {
                        "username": "heg816",
                        "content": "num can be very large, meaning that when it tries to find pow(10, size - 1), it may exceed the limits of primitive types (including double)."
                    },
                    {
                        "username": "sasukesharma",
                        "content": "we can use yesterday\\'s idea as change the given k to an array and do array addition"
                    },
                    {
                        "username": "VISHAL_SUJAY_KUMAR",
                        "content": "It should be updated to medium question.\\nToo much of corner cases that needed to be taken care."
                    },
                    {
                        "username": "kentnousagi",
                        "content": "Not smart enough so this is HELLA ANNOYING to me "
                    },
                    {
                        "username": "mohit__agarwal",
                        "content": "Add the numbers like we did we in our schools. We just have to think how to break k in digits and then add it to the elements of the vector from the reverse order.\\nWe have to run a loop till array is complete and till carry and k is not equal to zero.\\nAdd the digits of k to the last element of the array and maintain a carry."
                    },
                    {
                        "username": "PayalMaheshwari",
                        "content": "Can somebody help me figure out the problem with my solution?\nclass Solution \n{\n    public List<Integer> addToArrayForm(int[] num, int k) \n    {\n        int n = num.length;\n        long sum = 0, p = n-1;\n        for(int i=0; i<n; i++)\n        {\n            sum += num[i]*Math.pow(10, p);\n            p--;\n        }\n        sum = sum + k;\n        List<Integer> list = new ArrayList<Integer>();\n        while(sum!=0)\n        {\n            int r = (int)sum%10;\n            list.add(r);\n            sum /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\nIt isn't working for the test case where the input is: num = [9,9,9,9,9,9,9,9,9,9] and k = 1\nOutput coming is: [1,0,0,0,0,0,0,0,0,0,8]"
                    },
                    {
                        "username": "pi2labs",
                        "content": "Python experts: can someone please let me know the TC of this one liner ? \n My understanding is O(M.N) where join takes O(n) operation and O(m) times to map string to int and vice versa. \n\n `return map(int, list(str(int(''.join(map(str, num))) + k)))`"
                    },
                    {
                        "username": "Aditya_Patil11",
                        "content": "why this giving error\\n\\nterminate called after throwing an instance of \\'std::out_of_range\\'\\n  what():  stoi\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>ans;\\n        string str=\"\";\\n       for(int i=0;i<num.size();i++){\\n           str+=to_string(num[i]);\\n\\n       }\\n       long n1=stoi(str);\\n      long fn=(n1+k);\\n      long y=fn;\\n      while(y>0){\\n          ans.push_back(y%10);\\n          y/=10;\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801888,
                "content": [
                    {
                        "username": "Yongbi",
                        "content": "From 13-15 February challenges on leetcode like: \n`\"we are _simpler_ than your girlfriends\"`"
                    },
                    {
                        "username": "nihalhunmai",
                        "content": "sheesh"
                    },
                    {
                        "username": "vaxbhav",
                        "content": "`class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v;\\n        stack<int>st;  \\n        int size=num.size();\\n        int n=0;\\n        int power=size-1;\\n        for(int i=0; i<size; i++)\\n        {\\n            n=n+(num[i]*pow(10, power));\\n            power--;\\n        }\\n        n=n+k;\\n        int a=0;\\n        while(n>0)\\n        {\\n            a=n%10;\\n            st.push(a);\\n            n=n/10;\\n        }\\n        while(!st.empty())\\n        {\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        return v;\\n    }  \\n};`\\n\\nThis code is passing the given test cases but gives runtime error when I submit. Please Check for any errors. I think this is correct approach. Any correction is appreciated."
                    },
                    {
                        "username": "heg816",
                        "content": "num can be very large, meaning that when it tries to find pow(10, size - 1), it may exceed the limits of primitive types (including double)."
                    },
                    {
                        "username": "sasukesharma",
                        "content": "we can use yesterday\\'s idea as change the given k to an array and do array addition"
                    },
                    {
                        "username": "VISHAL_SUJAY_KUMAR",
                        "content": "It should be updated to medium question.\\nToo much of corner cases that needed to be taken care."
                    },
                    {
                        "username": "kentnousagi",
                        "content": "Not smart enough so this is HELLA ANNOYING to me "
                    },
                    {
                        "username": "mohit__agarwal",
                        "content": "Add the numbers like we did we in our schools. We just have to think how to break k in digits and then add it to the elements of the vector from the reverse order.\\nWe have to run a loop till array is complete and till carry and k is not equal to zero.\\nAdd the digits of k to the last element of the array and maintain a carry."
                    },
                    {
                        "username": "PayalMaheshwari",
                        "content": "Can somebody help me figure out the problem with my solution?\nclass Solution \n{\n    public List<Integer> addToArrayForm(int[] num, int k) \n    {\n        int n = num.length;\n        long sum = 0, p = n-1;\n        for(int i=0; i<n; i++)\n        {\n            sum += num[i]*Math.pow(10, p);\n            p--;\n        }\n        sum = sum + k;\n        List<Integer> list = new ArrayList<Integer>();\n        while(sum!=0)\n        {\n            int r = (int)sum%10;\n            list.add(r);\n            sum /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\nIt isn't working for the test case where the input is: num = [9,9,9,9,9,9,9,9,9,9] and k = 1\nOutput coming is: [1,0,0,0,0,0,0,0,0,0,8]"
                    },
                    {
                        "username": "pi2labs",
                        "content": "Python experts: can someone please let me know the TC of this one liner ? \n My understanding is O(M.N) where join takes O(n) operation and O(m) times to map string to int and vice versa. \n\n `return map(int, list(str(int(''.join(map(str, num))) + k)))`"
                    },
                    {
                        "username": "Aditya_Patil11",
                        "content": "why this giving error\\n\\nterminate called after throwing an instance of \\'std::out_of_range\\'\\n  what():  stoi\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>ans;\\n        string str=\"\";\\n       for(int i=0;i<num.size();i++){\\n           str+=to_string(num[i]);\\n\\n       }\\n       long n1=stoi(str);\\n      long fn=(n1+k);\\n      long y=fn;\\n      while(y>0){\\n          ans.push_back(y%10);\\n          y/=10;\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801878,
                "content": [
                    {
                        "username": "Yongbi",
                        "content": "From 13-15 February challenges on leetcode like: \n`\"we are _simpler_ than your girlfriends\"`"
                    },
                    {
                        "username": "nihalhunmai",
                        "content": "sheesh"
                    },
                    {
                        "username": "vaxbhav",
                        "content": "`class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v;\\n        stack<int>st;  \\n        int size=num.size();\\n        int n=0;\\n        int power=size-1;\\n        for(int i=0; i<size; i++)\\n        {\\n            n=n+(num[i]*pow(10, power));\\n            power--;\\n        }\\n        n=n+k;\\n        int a=0;\\n        while(n>0)\\n        {\\n            a=n%10;\\n            st.push(a);\\n            n=n/10;\\n        }\\n        while(!st.empty())\\n        {\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        return v;\\n    }  \\n};`\\n\\nThis code is passing the given test cases but gives runtime error when I submit. Please Check for any errors. I think this is correct approach. Any correction is appreciated."
                    },
                    {
                        "username": "heg816",
                        "content": "num can be very large, meaning that when it tries to find pow(10, size - 1), it may exceed the limits of primitive types (including double)."
                    },
                    {
                        "username": "sasukesharma",
                        "content": "we can use yesterday\\'s idea as change the given k to an array and do array addition"
                    },
                    {
                        "username": "VISHAL_SUJAY_KUMAR",
                        "content": "It should be updated to medium question.\\nToo much of corner cases that needed to be taken care."
                    },
                    {
                        "username": "kentnousagi",
                        "content": "Not smart enough so this is HELLA ANNOYING to me "
                    },
                    {
                        "username": "mohit__agarwal",
                        "content": "Add the numbers like we did we in our schools. We just have to think how to break k in digits and then add it to the elements of the vector from the reverse order.\\nWe have to run a loop till array is complete and till carry and k is not equal to zero.\\nAdd the digits of k to the last element of the array and maintain a carry."
                    },
                    {
                        "username": "PayalMaheshwari",
                        "content": "Can somebody help me figure out the problem with my solution?\nclass Solution \n{\n    public List<Integer> addToArrayForm(int[] num, int k) \n    {\n        int n = num.length;\n        long sum = 0, p = n-1;\n        for(int i=0; i<n; i++)\n        {\n            sum += num[i]*Math.pow(10, p);\n            p--;\n        }\n        sum = sum + k;\n        List<Integer> list = new ArrayList<Integer>();\n        while(sum!=0)\n        {\n            int r = (int)sum%10;\n            list.add(r);\n            sum /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\nIt isn't working for the test case where the input is: num = [9,9,9,9,9,9,9,9,9,9] and k = 1\nOutput coming is: [1,0,0,0,0,0,0,0,0,0,8]"
                    },
                    {
                        "username": "pi2labs",
                        "content": "Python experts: can someone please let me know the TC of this one liner ? \n My understanding is O(M.N) where join takes O(n) operation and O(m) times to map string to int and vice versa. \n\n `return map(int, list(str(int(''.join(map(str, num))) + k)))`"
                    },
                    {
                        "username": "Aditya_Patil11",
                        "content": "why this giving error\\n\\nterminate called after throwing an instance of \\'std::out_of_range\\'\\n  what():  stoi\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>ans;\\n        string str=\"\";\\n       for(int i=0;i<num.size();i++){\\n           str+=to_string(num[i]);\\n\\n       }\\n       long n1=stoi(str);\\n      long fn=(n1+k);\\n      long y=fn;\\n      while(y>0){\\n          ans.push_back(y%10);\\n          y/=10;\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801863,
                "content": [
                    {
                        "username": "Yongbi",
                        "content": "From 13-15 February challenges on leetcode like: \n`\"we are _simpler_ than your girlfriends\"`"
                    },
                    {
                        "username": "nihalhunmai",
                        "content": "sheesh"
                    },
                    {
                        "username": "vaxbhav",
                        "content": "`class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v;\\n        stack<int>st;  \\n        int size=num.size();\\n        int n=0;\\n        int power=size-1;\\n        for(int i=0; i<size; i++)\\n        {\\n            n=n+(num[i]*pow(10, power));\\n            power--;\\n        }\\n        n=n+k;\\n        int a=0;\\n        while(n>0)\\n        {\\n            a=n%10;\\n            st.push(a);\\n            n=n/10;\\n        }\\n        while(!st.empty())\\n        {\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        return v;\\n    }  \\n};`\\n\\nThis code is passing the given test cases but gives runtime error when I submit. Please Check for any errors. I think this is correct approach. Any correction is appreciated."
                    },
                    {
                        "username": "heg816",
                        "content": "num can be very large, meaning that when it tries to find pow(10, size - 1), it may exceed the limits of primitive types (including double)."
                    },
                    {
                        "username": "sasukesharma",
                        "content": "we can use yesterday\\'s idea as change the given k to an array and do array addition"
                    },
                    {
                        "username": "VISHAL_SUJAY_KUMAR",
                        "content": "It should be updated to medium question.\\nToo much of corner cases that needed to be taken care."
                    },
                    {
                        "username": "kentnousagi",
                        "content": "Not smart enough so this is HELLA ANNOYING to me "
                    },
                    {
                        "username": "mohit__agarwal",
                        "content": "Add the numbers like we did we in our schools. We just have to think how to break k in digits and then add it to the elements of the vector from the reverse order.\\nWe have to run a loop till array is complete and till carry and k is not equal to zero.\\nAdd the digits of k to the last element of the array and maintain a carry."
                    },
                    {
                        "username": "PayalMaheshwari",
                        "content": "Can somebody help me figure out the problem with my solution?\nclass Solution \n{\n    public List<Integer> addToArrayForm(int[] num, int k) \n    {\n        int n = num.length;\n        long sum = 0, p = n-1;\n        for(int i=0; i<n; i++)\n        {\n            sum += num[i]*Math.pow(10, p);\n            p--;\n        }\n        sum = sum + k;\n        List<Integer> list = new ArrayList<Integer>();\n        while(sum!=0)\n        {\n            int r = (int)sum%10;\n            list.add(r);\n            sum /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\nIt isn't working for the test case where the input is: num = [9,9,9,9,9,9,9,9,9,9] and k = 1\nOutput coming is: [1,0,0,0,0,0,0,0,0,0,8]"
                    },
                    {
                        "username": "pi2labs",
                        "content": "Python experts: can someone please let me know the TC of this one liner ? \n My understanding is O(M.N) where join takes O(n) operation and O(m) times to map string to int and vice versa. \n\n `return map(int, list(str(int(''.join(map(str, num))) + k)))`"
                    },
                    {
                        "username": "Aditya_Patil11",
                        "content": "why this giving error\\n\\nterminate called after throwing an instance of \\'std::out_of_range\\'\\n  what():  stoi\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>ans;\\n        string str=\"\";\\n       for(int i=0;i<num.size();i++){\\n           str+=to_string(num[i]);\\n\\n       }\\n       long n1=stoi(str);\\n      long fn=(n1+k);\\n      long y=fn;\\n      while(y>0){\\n          ans.push_back(y%10);\\n          y/=10;\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801846,
                "content": [
                    {
                        "username": "Yongbi",
                        "content": "From 13-15 February challenges on leetcode like: \n`\"we are _simpler_ than your girlfriends\"`"
                    },
                    {
                        "username": "nihalhunmai",
                        "content": "sheesh"
                    },
                    {
                        "username": "vaxbhav",
                        "content": "`class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v;\\n        stack<int>st;  \\n        int size=num.size();\\n        int n=0;\\n        int power=size-1;\\n        for(int i=0; i<size; i++)\\n        {\\n            n=n+(num[i]*pow(10, power));\\n            power--;\\n        }\\n        n=n+k;\\n        int a=0;\\n        while(n>0)\\n        {\\n            a=n%10;\\n            st.push(a);\\n            n=n/10;\\n        }\\n        while(!st.empty())\\n        {\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        return v;\\n    }  \\n};`\\n\\nThis code is passing the given test cases but gives runtime error when I submit. Please Check for any errors. I think this is correct approach. Any correction is appreciated."
                    },
                    {
                        "username": "heg816",
                        "content": "num can be very large, meaning that when it tries to find pow(10, size - 1), it may exceed the limits of primitive types (including double)."
                    },
                    {
                        "username": "sasukesharma",
                        "content": "we can use yesterday\\'s idea as change the given k to an array and do array addition"
                    },
                    {
                        "username": "VISHAL_SUJAY_KUMAR",
                        "content": "It should be updated to medium question.\\nToo much of corner cases that needed to be taken care."
                    },
                    {
                        "username": "kentnousagi",
                        "content": "Not smart enough so this is HELLA ANNOYING to me "
                    },
                    {
                        "username": "mohit__agarwal",
                        "content": "Add the numbers like we did we in our schools. We just have to think how to break k in digits and then add it to the elements of the vector from the reverse order.\\nWe have to run a loop till array is complete and till carry and k is not equal to zero.\\nAdd the digits of k to the last element of the array and maintain a carry."
                    },
                    {
                        "username": "PayalMaheshwari",
                        "content": "Can somebody help me figure out the problem with my solution?\nclass Solution \n{\n    public List<Integer> addToArrayForm(int[] num, int k) \n    {\n        int n = num.length;\n        long sum = 0, p = n-1;\n        for(int i=0; i<n; i++)\n        {\n            sum += num[i]*Math.pow(10, p);\n            p--;\n        }\n        sum = sum + k;\n        List<Integer> list = new ArrayList<Integer>();\n        while(sum!=0)\n        {\n            int r = (int)sum%10;\n            list.add(r);\n            sum /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\nIt isn't working for the test case where the input is: num = [9,9,9,9,9,9,9,9,9,9] and k = 1\nOutput coming is: [1,0,0,0,0,0,0,0,0,0,8]"
                    },
                    {
                        "username": "pi2labs",
                        "content": "Python experts: can someone please let me know the TC of this one liner ? \n My understanding is O(M.N) where join takes O(n) operation and O(m) times to map string to int and vice versa. \n\n `return map(int, list(str(int(''.join(map(str, num))) + k)))`"
                    },
                    {
                        "username": "Aditya_Patil11",
                        "content": "why this giving error\\n\\nterminate called after throwing an instance of \\'std::out_of_range\\'\\n  what():  stoi\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>ans;\\n        string str=\"\";\\n       for(int i=0;i<num.size();i++){\\n           str+=to_string(num[i]);\\n\\n       }\\n       long n1=stoi(str);\\n      long fn=(n1+k);\\n      long y=fn;\\n      while(y>0){\\n          ans.push_back(y%10);\\n          y/=10;\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801840,
                "content": [
                    {
                        "username": "Yongbi",
                        "content": "From 13-15 February challenges on leetcode like: \n`\"we are _simpler_ than your girlfriends\"`"
                    },
                    {
                        "username": "nihalhunmai",
                        "content": "sheesh"
                    },
                    {
                        "username": "vaxbhav",
                        "content": "`class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>v;\\n        stack<int>st;  \\n        int size=num.size();\\n        int n=0;\\n        int power=size-1;\\n        for(int i=0; i<size; i++)\\n        {\\n            n=n+(num[i]*pow(10, power));\\n            power--;\\n        }\\n        n=n+k;\\n        int a=0;\\n        while(n>0)\\n        {\\n            a=n%10;\\n            st.push(a);\\n            n=n/10;\\n        }\\n        while(!st.empty())\\n        {\\n            v.push_back(st.top());\\n            st.pop();\\n        }\\n        return v;\\n    }  \\n};`\\n\\nThis code is passing the given test cases but gives runtime error when I submit. Please Check for any errors. I think this is correct approach. Any correction is appreciated."
                    },
                    {
                        "username": "heg816",
                        "content": "num can be very large, meaning that when it tries to find pow(10, size - 1), it may exceed the limits of primitive types (including double)."
                    },
                    {
                        "username": "sasukesharma",
                        "content": "we can use yesterday\\'s idea as change the given k to an array and do array addition"
                    },
                    {
                        "username": "VISHAL_SUJAY_KUMAR",
                        "content": "It should be updated to medium question.\\nToo much of corner cases that needed to be taken care."
                    },
                    {
                        "username": "kentnousagi",
                        "content": "Not smart enough so this is HELLA ANNOYING to me "
                    },
                    {
                        "username": "mohit__agarwal",
                        "content": "Add the numbers like we did we in our schools. We just have to think how to break k in digits and then add it to the elements of the vector from the reverse order.\\nWe have to run a loop till array is complete and till carry and k is not equal to zero.\\nAdd the digits of k to the last element of the array and maintain a carry."
                    },
                    {
                        "username": "PayalMaheshwari",
                        "content": "Can somebody help me figure out the problem with my solution?\nclass Solution \n{\n    public List<Integer> addToArrayForm(int[] num, int k) \n    {\n        int n = num.length;\n        long sum = 0, p = n-1;\n        for(int i=0; i<n; i++)\n        {\n            sum += num[i]*Math.pow(10, p);\n            p--;\n        }\n        sum = sum + k;\n        List<Integer> list = new ArrayList<Integer>();\n        while(sum!=0)\n        {\n            int r = (int)sum%10;\n            list.add(r);\n            sum /= 10;\n        }\n        Collections.reverse(list);\n        return list;\n    }\n}\n\nIt isn't working for the test case where the input is: num = [9,9,9,9,9,9,9,9,9,9] and k = 1\nOutput coming is: [1,0,0,0,0,0,0,0,0,0,8]"
                    },
                    {
                        "username": "pi2labs",
                        "content": "Python experts: can someone please let me know the TC of this one liner ? \n My understanding is O(M.N) where join takes O(n) operation and O(m) times to map string to int and vice versa. \n\n `return map(int, list(str(int(''.join(map(str, num))) + k)))`"
                    },
                    {
                        "username": "Aditya_Patil11",
                        "content": "why this giving error\\n\\nterminate called after throwing an instance of \\'std::out_of_range\\'\\n  what():  stoi\\n\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int>ans;\\n        string str=\"\";\\n       for(int i=0;i<num.size();i++){\\n           str+=to_string(num[i]);\\n\\n       }\\n       long n1=stoi(str);\\n      long fn=(n1+k);\\n      long y=fn;\\n      while(y>0){\\n          ans.push_back(y%10);\\n          y/=10;\\n      }\\n      reverse(ans.begin(),ans.end());\\n      return ans;\\n\\n    }\\n};"
                    }
                ]
            },
            {
                "id": 1801839,
                "content": [
                    {
                        "username": "wpopielarski",
                        "content": "cool easy problem! converting array to int timeouts :) so you have to add positions using arrays only with carrying. Easy but not trivial!\n\nrecaping: \nconvertirng num to int, adding with k and converting result to array timeouts -> not this way\n\nconverting k to array and adding arrays by positions (num array and converted k, remember about carrying) is accepted "
                    },
                    {
                        "username": "Adarsh_28",
                        "content": "long long int number=num[j]*pow(10,i);\\nThis is going out of range when I\\'m trying to form a number from a given vector what should I do to resolve it:("
                    },
                    {
                        "username": "priyanshu_3108",
                        "content": " `class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList();\\n        for(int i = num.length - 1; i>= 0 || k>0; i-- ){\\n            if(i >= 0){\\n                list.add((num[i] + k) %10);\\n                k = (num[i] + k) / 10;\\n            }else{\\n                list.add(k%10);\\n                k = k/10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}`"
                    },
                    {
                        "username": "JeevanjotSingh01",
                        "content": "Hey, i was using C language, at test case 82 the test case was exceeding the range of c i.e 4 billion, any suggestion what should i do?"
                    },
                    {
                        "username": "heg816",
                        "content": "Try hanlding k like a vector<int> instead of num like an unsigned long long. "
                    },
                    {
                        "username": "GULFAIZ",
                        "content": "what\\'s wrong in my approach---- \\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n     vector<int>m;\\n     int t=0;\\n     vector<int>ans;\\n     for(int i=0;i<num.size();i++){\\n         m.push_back(num[i]);\\n}   t=m;\\n  t=t+k;\\nwhile(t!=0){\\n    ans.push_back(t%10);\\n    t/10;\\n}\\nreturn reverse(ans.begin(),ans.end());\\n    }\\n};\\nand error is showing for t=m is incompatible type \\nif apprsaoch is write than plz help me to resolve the error ..."
                    },
                    {
                        "username": "sh2020",
                        "content": "var addToArrayForm = function (num, k) {\\n let newNum = BigInt(num.join(\\'\\'));\\n  newNum += BigInt(k);\\n  return newNum.toString().split(\\'\\');\\n};"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "lol, I think the output needs number values ​​in array[1,2,3,4]\n but this problem also accepted string value in array['1','2','3','4'] \nso confusing 😖"
                    },
                    {
                        "username": "UVSinghK",
                        "content": "\\uD83D\\uDE16 Hate these problems"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "There are test cases where the answer cannot be represented into long long format. It\\'s annoying to convert them into vector and then perform the addition."
                    },
                    {
                        "username": "Sarthakberi",
                        "content": "can anyone tell me why it failed\\n\\ntest cases\\n\\nnum=[3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\\nk=670\\n\\ncode \\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        string beri;\\n        unsigned  long long int  a=0;\\n        for(auto i:num){\\n            a=a*10+i;\\n        }\\n        a=a+k;\\n        vector<int> gini;\\n        while(a){\\n            gini.push_back(a%10);\\n            a=a/10;\\n        }\\n        reverse(gini.begin(),gini.end());\\n        return gini;\\n\\n    }\\n\\n// the problem is annoying T _ T\\n"
                    },
                    {
                        "username": "heg816",
                        "content": "It looks like it should throw an overflow error since 38,030,270,764,991,766,164 > 18,446,744,073,709,551,616 (ULLONG_MAX)"
                    }
                ]
            },
            {
                "id": 1801828,
                "content": [
                    {
                        "username": "wpopielarski",
                        "content": "cool easy problem! converting array to int timeouts :) so you have to add positions using arrays only with carrying. Easy but not trivial!\n\nrecaping: \nconvertirng num to int, adding with k and converting result to array timeouts -> not this way\n\nconverting k to array and adding arrays by positions (num array and converted k, remember about carrying) is accepted "
                    },
                    {
                        "username": "Adarsh_28",
                        "content": "long long int number=num[j]*pow(10,i);\\nThis is going out of range when I\\'m trying to form a number from a given vector what should I do to resolve it:("
                    },
                    {
                        "username": "priyanshu_3108",
                        "content": " `class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList();\\n        for(int i = num.length - 1; i>= 0 || k>0; i-- ){\\n            if(i >= 0){\\n                list.add((num[i] + k) %10);\\n                k = (num[i] + k) / 10;\\n            }else{\\n                list.add(k%10);\\n                k = k/10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}`"
                    },
                    {
                        "username": "JeevanjotSingh01",
                        "content": "Hey, i was using C language, at test case 82 the test case was exceeding the range of c i.e 4 billion, any suggestion what should i do?"
                    },
                    {
                        "username": "heg816",
                        "content": "Try hanlding k like a vector<int> instead of num like an unsigned long long. "
                    },
                    {
                        "username": "GULFAIZ",
                        "content": "what\\'s wrong in my approach---- \\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n     vector<int>m;\\n     int t=0;\\n     vector<int>ans;\\n     for(int i=0;i<num.size();i++){\\n         m.push_back(num[i]);\\n}   t=m;\\n  t=t+k;\\nwhile(t!=0){\\n    ans.push_back(t%10);\\n    t/10;\\n}\\nreturn reverse(ans.begin(),ans.end());\\n    }\\n};\\nand error is showing for t=m is incompatible type \\nif apprsaoch is write than plz help me to resolve the error ..."
                    },
                    {
                        "username": "sh2020",
                        "content": "var addToArrayForm = function (num, k) {\\n let newNum = BigInt(num.join(\\'\\'));\\n  newNum += BigInt(k);\\n  return newNum.toString().split(\\'\\');\\n};"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "lol, I think the output needs number values ​​in array[1,2,3,4]\n but this problem also accepted string value in array['1','2','3','4'] \nso confusing 😖"
                    },
                    {
                        "username": "UVSinghK",
                        "content": "\\uD83D\\uDE16 Hate these problems"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "There are test cases where the answer cannot be represented into long long format. It\\'s annoying to convert them into vector and then perform the addition."
                    },
                    {
                        "username": "Sarthakberi",
                        "content": "can anyone tell me why it failed\\n\\ntest cases\\n\\nnum=[3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\\nk=670\\n\\ncode \\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        string beri;\\n        unsigned  long long int  a=0;\\n        for(auto i:num){\\n            a=a*10+i;\\n        }\\n        a=a+k;\\n        vector<int> gini;\\n        while(a){\\n            gini.push_back(a%10);\\n            a=a/10;\\n        }\\n        reverse(gini.begin(),gini.end());\\n        return gini;\\n\\n    }\\n\\n// the problem is annoying T _ T\\n"
                    },
                    {
                        "username": "heg816",
                        "content": "It looks like it should throw an overflow error since 38,030,270,764,991,766,164 > 18,446,744,073,709,551,616 (ULLONG_MAX)"
                    }
                ]
            },
            {
                "id": 1801813,
                "content": [
                    {
                        "username": "wpopielarski",
                        "content": "cool easy problem! converting array to int timeouts :) so you have to add positions using arrays only with carrying. Easy but not trivial!\n\nrecaping: \nconvertirng num to int, adding with k and converting result to array timeouts -> not this way\n\nconverting k to array and adding arrays by positions (num array and converted k, remember about carrying) is accepted "
                    },
                    {
                        "username": "Adarsh_28",
                        "content": "long long int number=num[j]*pow(10,i);\\nThis is going out of range when I\\'m trying to form a number from a given vector what should I do to resolve it:("
                    },
                    {
                        "username": "priyanshu_3108",
                        "content": " `class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList();\\n        for(int i = num.length - 1; i>= 0 || k>0; i-- ){\\n            if(i >= 0){\\n                list.add((num[i] + k) %10);\\n                k = (num[i] + k) / 10;\\n            }else{\\n                list.add(k%10);\\n                k = k/10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}`"
                    },
                    {
                        "username": "JeevanjotSingh01",
                        "content": "Hey, i was using C language, at test case 82 the test case was exceeding the range of c i.e 4 billion, any suggestion what should i do?"
                    },
                    {
                        "username": "heg816",
                        "content": "Try hanlding k like a vector<int> instead of num like an unsigned long long. "
                    },
                    {
                        "username": "GULFAIZ",
                        "content": "what\\'s wrong in my approach---- \\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n     vector<int>m;\\n     int t=0;\\n     vector<int>ans;\\n     for(int i=0;i<num.size();i++){\\n         m.push_back(num[i]);\\n}   t=m;\\n  t=t+k;\\nwhile(t!=0){\\n    ans.push_back(t%10);\\n    t/10;\\n}\\nreturn reverse(ans.begin(),ans.end());\\n    }\\n};\\nand error is showing for t=m is incompatible type \\nif apprsaoch is write than plz help me to resolve the error ..."
                    },
                    {
                        "username": "sh2020",
                        "content": "var addToArrayForm = function (num, k) {\\n let newNum = BigInt(num.join(\\'\\'));\\n  newNum += BigInt(k);\\n  return newNum.toString().split(\\'\\');\\n};"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "lol, I think the output needs number values ​​in array[1,2,3,4]\n but this problem also accepted string value in array['1','2','3','4'] \nso confusing 😖"
                    },
                    {
                        "username": "UVSinghK",
                        "content": "\\uD83D\\uDE16 Hate these problems"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "There are test cases where the answer cannot be represented into long long format. It\\'s annoying to convert them into vector and then perform the addition."
                    },
                    {
                        "username": "Sarthakberi",
                        "content": "can anyone tell me why it failed\\n\\ntest cases\\n\\nnum=[3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\\nk=670\\n\\ncode \\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        string beri;\\n        unsigned  long long int  a=0;\\n        for(auto i:num){\\n            a=a*10+i;\\n        }\\n        a=a+k;\\n        vector<int> gini;\\n        while(a){\\n            gini.push_back(a%10);\\n            a=a/10;\\n        }\\n        reverse(gini.begin(),gini.end());\\n        return gini;\\n\\n    }\\n\\n// the problem is annoying T _ T\\n"
                    },
                    {
                        "username": "heg816",
                        "content": "It looks like it should throw an overflow error since 38,030,270,764,991,766,164 > 18,446,744,073,709,551,616 (ULLONG_MAX)"
                    }
                ]
            },
            {
                "id": 1801800,
                "content": [
                    {
                        "username": "wpopielarski",
                        "content": "cool easy problem! converting array to int timeouts :) so you have to add positions using arrays only with carrying. Easy but not trivial!\n\nrecaping: \nconvertirng num to int, adding with k and converting result to array timeouts -> not this way\n\nconverting k to array and adding arrays by positions (num array and converted k, remember about carrying) is accepted "
                    },
                    {
                        "username": "Adarsh_28",
                        "content": "long long int number=num[j]*pow(10,i);\\nThis is going out of range when I\\'m trying to form a number from a given vector what should I do to resolve it:("
                    },
                    {
                        "username": "priyanshu_3108",
                        "content": " `class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList();\\n        for(int i = num.length - 1; i>= 0 || k>0; i-- ){\\n            if(i >= 0){\\n                list.add((num[i] + k) %10);\\n                k = (num[i] + k) / 10;\\n            }else{\\n                list.add(k%10);\\n                k = k/10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}`"
                    },
                    {
                        "username": "JeevanjotSingh01",
                        "content": "Hey, i was using C language, at test case 82 the test case was exceeding the range of c i.e 4 billion, any suggestion what should i do?"
                    },
                    {
                        "username": "heg816",
                        "content": "Try hanlding k like a vector<int> instead of num like an unsigned long long. "
                    },
                    {
                        "username": "GULFAIZ",
                        "content": "what\\'s wrong in my approach---- \\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n     vector<int>m;\\n     int t=0;\\n     vector<int>ans;\\n     for(int i=0;i<num.size();i++){\\n         m.push_back(num[i]);\\n}   t=m;\\n  t=t+k;\\nwhile(t!=0){\\n    ans.push_back(t%10);\\n    t/10;\\n}\\nreturn reverse(ans.begin(),ans.end());\\n    }\\n};\\nand error is showing for t=m is incompatible type \\nif apprsaoch is write than plz help me to resolve the error ..."
                    },
                    {
                        "username": "sh2020",
                        "content": "var addToArrayForm = function (num, k) {\\n let newNum = BigInt(num.join(\\'\\'));\\n  newNum += BigInt(k);\\n  return newNum.toString().split(\\'\\');\\n};"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "lol, I think the output needs number values ​​in array[1,2,3,4]\n but this problem also accepted string value in array['1','2','3','4'] \nso confusing 😖"
                    },
                    {
                        "username": "UVSinghK",
                        "content": "\\uD83D\\uDE16 Hate these problems"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "There are test cases where the answer cannot be represented into long long format. It\\'s annoying to convert them into vector and then perform the addition."
                    },
                    {
                        "username": "Sarthakberi",
                        "content": "can anyone tell me why it failed\\n\\ntest cases\\n\\nnum=[3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\\nk=670\\n\\ncode \\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        string beri;\\n        unsigned  long long int  a=0;\\n        for(auto i:num){\\n            a=a*10+i;\\n        }\\n        a=a+k;\\n        vector<int> gini;\\n        while(a){\\n            gini.push_back(a%10);\\n            a=a/10;\\n        }\\n        reverse(gini.begin(),gini.end());\\n        return gini;\\n\\n    }\\n\\n// the problem is annoying T _ T\\n"
                    },
                    {
                        "username": "heg816",
                        "content": "It looks like it should throw an overflow error since 38,030,270,764,991,766,164 > 18,446,744,073,709,551,616 (ULLONG_MAX)"
                    }
                ]
            },
            {
                "id": 1801754,
                "content": [
                    {
                        "username": "wpopielarski",
                        "content": "cool easy problem! converting array to int timeouts :) so you have to add positions using arrays only with carrying. Easy but not trivial!\n\nrecaping: \nconvertirng num to int, adding with k and converting result to array timeouts -> not this way\n\nconverting k to array and adding arrays by positions (num array and converted k, remember about carrying) is accepted "
                    },
                    {
                        "username": "Adarsh_28",
                        "content": "long long int number=num[j]*pow(10,i);\\nThis is going out of range when I\\'m trying to form a number from a given vector what should I do to resolve it:("
                    },
                    {
                        "username": "priyanshu_3108",
                        "content": " `class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList();\\n        for(int i = num.length - 1; i>= 0 || k>0; i-- ){\\n            if(i >= 0){\\n                list.add((num[i] + k) %10);\\n                k = (num[i] + k) / 10;\\n            }else{\\n                list.add(k%10);\\n                k = k/10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}`"
                    },
                    {
                        "username": "JeevanjotSingh01",
                        "content": "Hey, i was using C language, at test case 82 the test case was exceeding the range of c i.e 4 billion, any suggestion what should i do?"
                    },
                    {
                        "username": "heg816",
                        "content": "Try hanlding k like a vector<int> instead of num like an unsigned long long. "
                    },
                    {
                        "username": "GULFAIZ",
                        "content": "what\\'s wrong in my approach---- \\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n     vector<int>m;\\n     int t=0;\\n     vector<int>ans;\\n     for(int i=0;i<num.size();i++){\\n         m.push_back(num[i]);\\n}   t=m;\\n  t=t+k;\\nwhile(t!=0){\\n    ans.push_back(t%10);\\n    t/10;\\n}\\nreturn reverse(ans.begin(),ans.end());\\n    }\\n};\\nand error is showing for t=m is incompatible type \\nif apprsaoch is write than plz help me to resolve the error ..."
                    },
                    {
                        "username": "sh2020",
                        "content": "var addToArrayForm = function (num, k) {\\n let newNum = BigInt(num.join(\\'\\'));\\n  newNum += BigInt(k);\\n  return newNum.toString().split(\\'\\');\\n};"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "lol, I think the output needs number values ​​in array[1,2,3,4]\n but this problem also accepted string value in array['1','2','3','4'] \nso confusing 😖"
                    },
                    {
                        "username": "UVSinghK",
                        "content": "\\uD83D\\uDE16 Hate these problems"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "There are test cases where the answer cannot be represented into long long format. It\\'s annoying to convert them into vector and then perform the addition."
                    },
                    {
                        "username": "Sarthakberi",
                        "content": "can anyone tell me why it failed\\n\\ntest cases\\n\\nnum=[3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\\nk=670\\n\\ncode \\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        string beri;\\n        unsigned  long long int  a=0;\\n        for(auto i:num){\\n            a=a*10+i;\\n        }\\n        a=a+k;\\n        vector<int> gini;\\n        while(a){\\n            gini.push_back(a%10);\\n            a=a/10;\\n        }\\n        reverse(gini.begin(),gini.end());\\n        return gini;\\n\\n    }\\n\\n// the problem is annoying T _ T\\n"
                    },
                    {
                        "username": "heg816",
                        "content": "It looks like it should throw an overflow error since 38,030,270,764,991,766,164 > 18,446,744,073,709,551,616 (ULLONG_MAX)"
                    }
                ]
            },
            {
                "id": 1801713,
                "content": [
                    {
                        "username": "wpopielarski",
                        "content": "cool easy problem! converting array to int timeouts :) so you have to add positions using arrays only with carrying. Easy but not trivial!\n\nrecaping: \nconvertirng num to int, adding with k and converting result to array timeouts -> not this way\n\nconverting k to array and adding arrays by positions (num array and converted k, remember about carrying) is accepted "
                    },
                    {
                        "username": "Adarsh_28",
                        "content": "long long int number=num[j]*pow(10,i);\\nThis is going out of range when I\\'m trying to form a number from a given vector what should I do to resolve it:("
                    },
                    {
                        "username": "priyanshu_3108",
                        "content": " `class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList();\\n        for(int i = num.length - 1; i>= 0 || k>0; i-- ){\\n            if(i >= 0){\\n                list.add((num[i] + k) %10);\\n                k = (num[i] + k) / 10;\\n            }else{\\n                list.add(k%10);\\n                k = k/10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}`"
                    },
                    {
                        "username": "JeevanjotSingh01",
                        "content": "Hey, i was using C language, at test case 82 the test case was exceeding the range of c i.e 4 billion, any suggestion what should i do?"
                    },
                    {
                        "username": "heg816",
                        "content": "Try hanlding k like a vector<int> instead of num like an unsigned long long. "
                    },
                    {
                        "username": "GULFAIZ",
                        "content": "what\\'s wrong in my approach---- \\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n     vector<int>m;\\n     int t=0;\\n     vector<int>ans;\\n     for(int i=0;i<num.size();i++){\\n         m.push_back(num[i]);\\n}   t=m;\\n  t=t+k;\\nwhile(t!=0){\\n    ans.push_back(t%10);\\n    t/10;\\n}\\nreturn reverse(ans.begin(),ans.end());\\n    }\\n};\\nand error is showing for t=m is incompatible type \\nif apprsaoch is write than plz help me to resolve the error ..."
                    },
                    {
                        "username": "sh2020",
                        "content": "var addToArrayForm = function (num, k) {\\n let newNum = BigInt(num.join(\\'\\'));\\n  newNum += BigInt(k);\\n  return newNum.toString().split(\\'\\');\\n};"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "lol, I think the output needs number values ​​in array[1,2,3,4]\n but this problem also accepted string value in array['1','2','3','4'] \nso confusing 😖"
                    },
                    {
                        "username": "UVSinghK",
                        "content": "\\uD83D\\uDE16 Hate these problems"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "There are test cases where the answer cannot be represented into long long format. It\\'s annoying to convert them into vector and then perform the addition."
                    },
                    {
                        "username": "Sarthakberi",
                        "content": "can anyone tell me why it failed\\n\\ntest cases\\n\\nnum=[3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\\nk=670\\n\\ncode \\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        string beri;\\n        unsigned  long long int  a=0;\\n        for(auto i:num){\\n            a=a*10+i;\\n        }\\n        a=a+k;\\n        vector<int> gini;\\n        while(a){\\n            gini.push_back(a%10);\\n            a=a/10;\\n        }\\n        reverse(gini.begin(),gini.end());\\n        return gini;\\n\\n    }\\n\\n// the problem is annoying T _ T\\n"
                    },
                    {
                        "username": "heg816",
                        "content": "It looks like it should throw an overflow error since 38,030,270,764,991,766,164 > 18,446,744,073,709,551,616 (ULLONG_MAX)"
                    }
                ]
            },
            {
                "id": 1801688,
                "content": [
                    {
                        "username": "wpopielarski",
                        "content": "cool easy problem! converting array to int timeouts :) so you have to add positions using arrays only with carrying. Easy but not trivial!\n\nrecaping: \nconvertirng num to int, adding with k and converting result to array timeouts -> not this way\n\nconverting k to array and adding arrays by positions (num array and converted k, remember about carrying) is accepted "
                    },
                    {
                        "username": "Adarsh_28",
                        "content": "long long int number=num[j]*pow(10,i);\\nThis is going out of range when I\\'m trying to form a number from a given vector what should I do to resolve it:("
                    },
                    {
                        "username": "priyanshu_3108",
                        "content": " `class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList();\\n        for(int i = num.length - 1; i>= 0 || k>0; i-- ){\\n            if(i >= 0){\\n                list.add((num[i] + k) %10);\\n                k = (num[i] + k) / 10;\\n            }else{\\n                list.add(k%10);\\n                k = k/10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}`"
                    },
                    {
                        "username": "JeevanjotSingh01",
                        "content": "Hey, i was using C language, at test case 82 the test case was exceeding the range of c i.e 4 billion, any suggestion what should i do?"
                    },
                    {
                        "username": "heg816",
                        "content": "Try hanlding k like a vector<int> instead of num like an unsigned long long. "
                    },
                    {
                        "username": "GULFAIZ",
                        "content": "what\\'s wrong in my approach---- \\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n     vector<int>m;\\n     int t=0;\\n     vector<int>ans;\\n     for(int i=0;i<num.size();i++){\\n         m.push_back(num[i]);\\n}   t=m;\\n  t=t+k;\\nwhile(t!=0){\\n    ans.push_back(t%10);\\n    t/10;\\n}\\nreturn reverse(ans.begin(),ans.end());\\n    }\\n};\\nand error is showing for t=m is incompatible type \\nif apprsaoch is write than plz help me to resolve the error ..."
                    },
                    {
                        "username": "sh2020",
                        "content": "var addToArrayForm = function (num, k) {\\n let newNum = BigInt(num.join(\\'\\'));\\n  newNum += BigInt(k);\\n  return newNum.toString().split(\\'\\');\\n};"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "lol, I think the output needs number values ​​in array[1,2,3,4]\n but this problem also accepted string value in array['1','2','3','4'] \nso confusing 😖"
                    },
                    {
                        "username": "UVSinghK",
                        "content": "\\uD83D\\uDE16 Hate these problems"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "There are test cases where the answer cannot be represented into long long format. It\\'s annoying to convert them into vector and then perform the addition."
                    },
                    {
                        "username": "Sarthakberi",
                        "content": "can anyone tell me why it failed\\n\\ntest cases\\n\\nnum=[3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\\nk=670\\n\\ncode \\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        string beri;\\n        unsigned  long long int  a=0;\\n        for(auto i:num){\\n            a=a*10+i;\\n        }\\n        a=a+k;\\n        vector<int> gini;\\n        while(a){\\n            gini.push_back(a%10);\\n            a=a/10;\\n        }\\n        reverse(gini.begin(),gini.end());\\n        return gini;\\n\\n    }\\n\\n// the problem is annoying T _ T\\n"
                    },
                    {
                        "username": "heg816",
                        "content": "It looks like it should throw an overflow error since 38,030,270,764,991,766,164 > 18,446,744,073,709,551,616 (ULLONG_MAX)"
                    }
                ]
            },
            {
                "id": 1801671,
                "content": [
                    {
                        "username": "wpopielarski",
                        "content": "cool easy problem! converting array to int timeouts :) so you have to add positions using arrays only with carrying. Easy but not trivial!\n\nrecaping: \nconvertirng num to int, adding with k and converting result to array timeouts -> not this way\n\nconverting k to array and adding arrays by positions (num array and converted k, remember about carrying) is accepted "
                    },
                    {
                        "username": "Adarsh_28",
                        "content": "long long int number=num[j]*pow(10,i);\\nThis is going out of range when I\\'m trying to form a number from a given vector what should I do to resolve it:("
                    },
                    {
                        "username": "priyanshu_3108",
                        "content": " `class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList();\\n        for(int i = num.length - 1; i>= 0 || k>0; i-- ){\\n            if(i >= 0){\\n                list.add((num[i] + k) %10);\\n                k = (num[i] + k) / 10;\\n            }else{\\n                list.add(k%10);\\n                k = k/10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}`"
                    },
                    {
                        "username": "JeevanjotSingh01",
                        "content": "Hey, i was using C language, at test case 82 the test case was exceeding the range of c i.e 4 billion, any suggestion what should i do?"
                    },
                    {
                        "username": "heg816",
                        "content": "Try hanlding k like a vector<int> instead of num like an unsigned long long. "
                    },
                    {
                        "username": "GULFAIZ",
                        "content": "what\\'s wrong in my approach---- \\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n     vector<int>m;\\n     int t=0;\\n     vector<int>ans;\\n     for(int i=0;i<num.size();i++){\\n         m.push_back(num[i]);\\n}   t=m;\\n  t=t+k;\\nwhile(t!=0){\\n    ans.push_back(t%10);\\n    t/10;\\n}\\nreturn reverse(ans.begin(),ans.end());\\n    }\\n};\\nand error is showing for t=m is incompatible type \\nif apprsaoch is write than plz help me to resolve the error ..."
                    },
                    {
                        "username": "sh2020",
                        "content": "var addToArrayForm = function (num, k) {\\n let newNum = BigInt(num.join(\\'\\'));\\n  newNum += BigInt(k);\\n  return newNum.toString().split(\\'\\');\\n};"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "lol, I think the output needs number values ​​in array[1,2,3,4]\n but this problem also accepted string value in array['1','2','3','4'] \nso confusing 😖"
                    },
                    {
                        "username": "UVSinghK",
                        "content": "\\uD83D\\uDE16 Hate these problems"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "There are test cases where the answer cannot be represented into long long format. It\\'s annoying to convert them into vector and then perform the addition."
                    },
                    {
                        "username": "Sarthakberi",
                        "content": "can anyone tell me why it failed\\n\\ntest cases\\n\\nnum=[3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\\nk=670\\n\\ncode \\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        string beri;\\n        unsigned  long long int  a=0;\\n        for(auto i:num){\\n            a=a*10+i;\\n        }\\n        a=a+k;\\n        vector<int> gini;\\n        while(a){\\n            gini.push_back(a%10);\\n            a=a/10;\\n        }\\n        reverse(gini.begin(),gini.end());\\n        return gini;\\n\\n    }\\n\\n// the problem is annoying T _ T\\n"
                    },
                    {
                        "username": "heg816",
                        "content": "It looks like it should throw an overflow error since 38,030,270,764,991,766,164 > 18,446,744,073,709,551,616 (ULLONG_MAX)"
                    }
                ]
            },
            {
                "id": 1801660,
                "content": [
                    {
                        "username": "wpopielarski",
                        "content": "cool easy problem! converting array to int timeouts :) so you have to add positions using arrays only with carrying. Easy but not trivial!\n\nrecaping: \nconvertirng num to int, adding with k and converting result to array timeouts -> not this way\n\nconverting k to array and adding arrays by positions (num array and converted k, remember about carrying) is accepted "
                    },
                    {
                        "username": "Adarsh_28",
                        "content": "long long int number=num[j]*pow(10,i);\\nThis is going out of range when I\\'m trying to form a number from a given vector what should I do to resolve it:("
                    },
                    {
                        "username": "priyanshu_3108",
                        "content": " `class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList();\\n        for(int i = num.length - 1; i>= 0 || k>0; i-- ){\\n            if(i >= 0){\\n                list.add((num[i] + k) %10);\\n                k = (num[i] + k) / 10;\\n            }else{\\n                list.add(k%10);\\n                k = k/10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}`"
                    },
                    {
                        "username": "JeevanjotSingh01",
                        "content": "Hey, i was using C language, at test case 82 the test case was exceeding the range of c i.e 4 billion, any suggestion what should i do?"
                    },
                    {
                        "username": "heg816",
                        "content": "Try hanlding k like a vector<int> instead of num like an unsigned long long. "
                    },
                    {
                        "username": "GULFAIZ",
                        "content": "what\\'s wrong in my approach---- \\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n     vector<int>m;\\n     int t=0;\\n     vector<int>ans;\\n     for(int i=0;i<num.size();i++){\\n         m.push_back(num[i]);\\n}   t=m;\\n  t=t+k;\\nwhile(t!=0){\\n    ans.push_back(t%10);\\n    t/10;\\n}\\nreturn reverse(ans.begin(),ans.end());\\n    }\\n};\\nand error is showing for t=m is incompatible type \\nif apprsaoch is write than plz help me to resolve the error ..."
                    },
                    {
                        "username": "sh2020",
                        "content": "var addToArrayForm = function (num, k) {\\n let newNum = BigInt(num.join(\\'\\'));\\n  newNum += BigInt(k);\\n  return newNum.toString().split(\\'\\');\\n};"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "lol, I think the output needs number values ​​in array[1,2,3,4]\n but this problem also accepted string value in array['1','2','3','4'] \nso confusing 😖"
                    },
                    {
                        "username": "UVSinghK",
                        "content": "\\uD83D\\uDE16 Hate these problems"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "There are test cases where the answer cannot be represented into long long format. It\\'s annoying to convert them into vector and then perform the addition."
                    },
                    {
                        "username": "Sarthakberi",
                        "content": "can anyone tell me why it failed\\n\\ntest cases\\n\\nnum=[3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\\nk=670\\n\\ncode \\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        string beri;\\n        unsigned  long long int  a=0;\\n        for(auto i:num){\\n            a=a*10+i;\\n        }\\n        a=a+k;\\n        vector<int> gini;\\n        while(a){\\n            gini.push_back(a%10);\\n            a=a/10;\\n        }\\n        reverse(gini.begin(),gini.end());\\n        return gini;\\n\\n    }\\n\\n// the problem is annoying T _ T\\n"
                    },
                    {
                        "username": "heg816",
                        "content": "It looks like it should throw an overflow error since 38,030,270,764,991,766,164 > 18,446,744,073,709,551,616 (ULLONG_MAX)"
                    }
                ]
            },
            {
                "id": 1801658,
                "content": [
                    {
                        "username": "wpopielarski",
                        "content": "cool easy problem! converting array to int timeouts :) so you have to add positions using arrays only with carrying. Easy but not trivial!\n\nrecaping: \nconvertirng num to int, adding with k and converting result to array timeouts -> not this way\n\nconverting k to array and adding arrays by positions (num array and converted k, remember about carrying) is accepted "
                    },
                    {
                        "username": "Adarsh_28",
                        "content": "long long int number=num[j]*pow(10,i);\\nThis is going out of range when I\\'m trying to form a number from a given vector what should I do to resolve it:("
                    },
                    {
                        "username": "priyanshu_3108",
                        "content": " `class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        ArrayList<Integer> list = new ArrayList();\\n        for(int i = num.length - 1; i>= 0 || k>0; i-- ){\\n            if(i >= 0){\\n                list.add((num[i] + k) %10);\\n                k = (num[i] + k) / 10;\\n            }else{\\n                list.add(k%10);\\n                k = k/10;\\n            }\\n        }\\n        Collections.reverse(list);\\n        return list;\\n    }\\n}`"
                    },
                    {
                        "username": "JeevanjotSingh01",
                        "content": "Hey, i was using C language, at test case 82 the test case was exceeding the range of c i.e 4 billion, any suggestion what should i do?"
                    },
                    {
                        "username": "heg816",
                        "content": "Try hanlding k like a vector<int> instead of num like an unsigned long long. "
                    },
                    {
                        "username": "GULFAIZ",
                        "content": "what\\'s wrong in my approach---- \\nclass Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n     vector<int>m;\\n     int t=0;\\n     vector<int>ans;\\n     for(int i=0;i<num.size();i++){\\n         m.push_back(num[i]);\\n}   t=m;\\n  t=t+k;\\nwhile(t!=0){\\n    ans.push_back(t%10);\\n    t/10;\\n}\\nreturn reverse(ans.begin(),ans.end());\\n    }\\n};\\nand error is showing for t=m is incompatible type \\nif apprsaoch is write than plz help me to resolve the error ..."
                    },
                    {
                        "username": "sh2020",
                        "content": "var addToArrayForm = function (num, k) {\\n let newNum = BigInt(num.join(\\'\\'));\\n  newNum += BigInt(k);\\n  return newNum.toString().split(\\'\\');\\n};"
                    },
                    {
                        "username": "RendraAndriansyah",
                        "content": "lol, I think the output needs number values ​​in array[1,2,3,4]\n but this problem also accepted string value in array['1','2','3','4'] \nso confusing 😖"
                    },
                    {
                        "username": "UVSinghK",
                        "content": "\\uD83D\\uDE16 Hate these problems"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "There are test cases where the answer cannot be represented into long long format. It\\'s annoying to convert them into vector and then perform the addition."
                    },
                    {
                        "username": "Sarthakberi",
                        "content": "can anyone tell me why it failed\\n\\ntest cases\\n\\nnum=[3,8,0,3,0,2,7,0,7,6,4,9,9,1,7,6,6,1,6,4]\\nk=670\\n\\ncode \\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        string beri;\\n        unsigned  long long int  a=0;\\n        for(auto i:num){\\n            a=a*10+i;\\n        }\\n        a=a+k;\\n        vector<int> gini;\\n        while(a){\\n            gini.push_back(a%10);\\n            a=a/10;\\n        }\\n        reverse(gini.begin(),gini.end());\\n        return gini;\\n\\n    }\\n\\n// the problem is annoying T _ T\\n"
                    },
                    {
                        "username": "heg816",
                        "content": "It looks like it should throw an overflow error since 38,030,270,764,991,766,164 > 18,446,744,073,709,551,616 (ULLONG_MAX)"
                    }
                ]
            },
            {
                "id": 1801648,
                "content": [
                    {
                        "username": "Shivnilay_1516",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        for(int i=nums.size() -1;i>=0;i--){\\n            nums[i]+=k;\\n            k=nums[i]/10;\\n            nums[i]=nums[i]%10;\\n        }\\n        while(k>0){\\n            nums.insert(nums.begin(),k%10);\\n            k/=10;\\n        }\\n        return nums;\\n    }\\n};"
                    },
                    {
                        "username": "subham46",
                        "content": "what\\'s wrong with this solution?\\n\\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> v;\\n        int ans = 0;\\n        for(int i=0;i<num.size();i++){\\n            ans = ans*10 + num[i];\\n        }\\n        int res = ans + k;\\n        int r;\\n\\n        while(res>0){\\n            r = res % 10;\\n            v.push_back(r);\\n            res = res/10;\\n        }\\n        reverse(v.begin(), v.end());\\n\\n        return v;\\n    }"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "length of num is 10^4, i.e. a very very big number. If you convert it to integer, it will cause overflow."
                    },
                    {
                        "username": "varunjpmch",
                        "content": "num = \\'\\'.join([str(elem) for elem in list_str]) why this code is not working?"
                    },
                    {
                        "username": "shivkatira",
                        "content": "For python use list comprehension ;)"
                    },
                    {
                        "username": "dumb_me",
                        "content": "double it and give it to next day too \\uD83D\\uDE2D\\uD83D\\uDE2D\\n"
                    },
                    {
                        "username": "bhaveshgarg2000",
                        "content": "Something big is brewing back to back 3 Easy Problem😳"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "Feels like a medium question"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "enjoy EASY tagged problems while they last"
                    },
                    {
                        "username": "khushimattu",
                        "content": "Why am i getting runtime error in this? The error is coming in Integer.parseInt with number format exception\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s = Arrays.toString(num);\\n        int n=Integer.parseInt(s);\\n        int res=n+k;\\n        List<Integer> lis=new ArrayList<Integer>();\\n        while(res>0){\\n            lis.add(res%10);\\n            res=res/10;\\n            \\n        }\\n        Collections.reverse(lis);\\n        return lis;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "khushimattu",
                        "content": "[@Sajal1](/Sajal1) okay thankyou!"
                    },
                    {
                        "username": "Sajal1",
                        "content": "num array length is 1 to 4000 elements and int can store a max length of 10 digits only.....\\nconverting it into string will not help.\\nI hope that\\'s the reason it is giving error.\\n\\nthink of a approach using carryforward. "
                    },
                    {
                        "username": "halfengineer",
                        "content": "same concept as yesterday\\'s"
                    }
                ]
            },
            {
                "id": 1801642,
                "content": [
                    {
                        "username": "Shivnilay_1516",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        for(int i=nums.size() -1;i>=0;i--){\\n            nums[i]+=k;\\n            k=nums[i]/10;\\n            nums[i]=nums[i]%10;\\n        }\\n        while(k>0){\\n            nums.insert(nums.begin(),k%10);\\n            k/=10;\\n        }\\n        return nums;\\n    }\\n};"
                    },
                    {
                        "username": "subham46",
                        "content": "what\\'s wrong with this solution?\\n\\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> v;\\n        int ans = 0;\\n        for(int i=0;i<num.size();i++){\\n            ans = ans*10 + num[i];\\n        }\\n        int res = ans + k;\\n        int r;\\n\\n        while(res>0){\\n            r = res % 10;\\n            v.push_back(r);\\n            res = res/10;\\n        }\\n        reverse(v.begin(), v.end());\\n\\n        return v;\\n    }"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "length of num is 10^4, i.e. a very very big number. If you convert it to integer, it will cause overflow."
                    },
                    {
                        "username": "varunjpmch",
                        "content": "num = \\'\\'.join([str(elem) for elem in list_str]) why this code is not working?"
                    },
                    {
                        "username": "shivkatira",
                        "content": "For python use list comprehension ;)"
                    },
                    {
                        "username": "dumb_me",
                        "content": "double it and give it to next day too \\uD83D\\uDE2D\\uD83D\\uDE2D\\n"
                    },
                    {
                        "username": "bhaveshgarg2000",
                        "content": "Something big is brewing back to back 3 Easy Problem😳"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "Feels like a medium question"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "enjoy EASY tagged problems while they last"
                    },
                    {
                        "username": "khushimattu",
                        "content": "Why am i getting runtime error in this? The error is coming in Integer.parseInt with number format exception\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s = Arrays.toString(num);\\n        int n=Integer.parseInt(s);\\n        int res=n+k;\\n        List<Integer> lis=new ArrayList<Integer>();\\n        while(res>0){\\n            lis.add(res%10);\\n            res=res/10;\\n            \\n        }\\n        Collections.reverse(lis);\\n        return lis;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "khushimattu",
                        "content": "[@Sajal1](/Sajal1) okay thankyou!"
                    },
                    {
                        "username": "Sajal1",
                        "content": "num array length is 1 to 4000 elements and int can store a max length of 10 digits only.....\\nconverting it into string will not help.\\nI hope that\\'s the reason it is giving error.\\n\\nthink of a approach using carryforward. "
                    },
                    {
                        "username": "halfengineer",
                        "content": "same concept as yesterday\\'s"
                    }
                ]
            },
            {
                "id": 1801640,
                "content": [
                    {
                        "username": "Shivnilay_1516",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        for(int i=nums.size() -1;i>=0;i--){\\n            nums[i]+=k;\\n            k=nums[i]/10;\\n            nums[i]=nums[i]%10;\\n        }\\n        while(k>0){\\n            nums.insert(nums.begin(),k%10);\\n            k/=10;\\n        }\\n        return nums;\\n    }\\n};"
                    },
                    {
                        "username": "subham46",
                        "content": "what\\'s wrong with this solution?\\n\\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> v;\\n        int ans = 0;\\n        for(int i=0;i<num.size();i++){\\n            ans = ans*10 + num[i];\\n        }\\n        int res = ans + k;\\n        int r;\\n\\n        while(res>0){\\n            r = res % 10;\\n            v.push_back(r);\\n            res = res/10;\\n        }\\n        reverse(v.begin(), v.end());\\n\\n        return v;\\n    }"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "length of num is 10^4, i.e. a very very big number. If you convert it to integer, it will cause overflow."
                    },
                    {
                        "username": "varunjpmch",
                        "content": "num = \\'\\'.join([str(elem) for elem in list_str]) why this code is not working?"
                    },
                    {
                        "username": "shivkatira",
                        "content": "For python use list comprehension ;)"
                    },
                    {
                        "username": "dumb_me",
                        "content": "double it and give it to next day too \\uD83D\\uDE2D\\uD83D\\uDE2D\\n"
                    },
                    {
                        "username": "bhaveshgarg2000",
                        "content": "Something big is brewing back to back 3 Easy Problem😳"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "Feels like a medium question"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "enjoy EASY tagged problems while they last"
                    },
                    {
                        "username": "khushimattu",
                        "content": "Why am i getting runtime error in this? The error is coming in Integer.parseInt with number format exception\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s = Arrays.toString(num);\\n        int n=Integer.parseInt(s);\\n        int res=n+k;\\n        List<Integer> lis=new ArrayList<Integer>();\\n        while(res>0){\\n            lis.add(res%10);\\n            res=res/10;\\n            \\n        }\\n        Collections.reverse(lis);\\n        return lis;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "khushimattu",
                        "content": "[@Sajal1](/Sajal1) okay thankyou!"
                    },
                    {
                        "username": "Sajal1",
                        "content": "num array length is 1 to 4000 elements and int can store a max length of 10 digits only.....\\nconverting it into string will not help.\\nI hope that\\'s the reason it is giving error.\\n\\nthink of a approach using carryforward. "
                    },
                    {
                        "username": "halfengineer",
                        "content": "same concept as yesterday\\'s"
                    }
                ]
            },
            {
                "id": 1801613,
                "content": [
                    {
                        "username": "Shivnilay_1516",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        for(int i=nums.size() -1;i>=0;i--){\\n            nums[i]+=k;\\n            k=nums[i]/10;\\n            nums[i]=nums[i]%10;\\n        }\\n        while(k>0){\\n            nums.insert(nums.begin(),k%10);\\n            k/=10;\\n        }\\n        return nums;\\n    }\\n};"
                    },
                    {
                        "username": "subham46",
                        "content": "what\\'s wrong with this solution?\\n\\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> v;\\n        int ans = 0;\\n        for(int i=0;i<num.size();i++){\\n            ans = ans*10 + num[i];\\n        }\\n        int res = ans + k;\\n        int r;\\n\\n        while(res>0){\\n            r = res % 10;\\n            v.push_back(r);\\n            res = res/10;\\n        }\\n        reverse(v.begin(), v.end());\\n\\n        return v;\\n    }"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "length of num is 10^4, i.e. a very very big number. If you convert it to integer, it will cause overflow."
                    },
                    {
                        "username": "varunjpmch",
                        "content": "num = \\'\\'.join([str(elem) for elem in list_str]) why this code is not working?"
                    },
                    {
                        "username": "shivkatira",
                        "content": "For python use list comprehension ;)"
                    },
                    {
                        "username": "dumb_me",
                        "content": "double it and give it to next day too \\uD83D\\uDE2D\\uD83D\\uDE2D\\n"
                    },
                    {
                        "username": "bhaveshgarg2000",
                        "content": "Something big is brewing back to back 3 Easy Problem😳"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "Feels like a medium question"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "enjoy EASY tagged problems while they last"
                    },
                    {
                        "username": "khushimattu",
                        "content": "Why am i getting runtime error in this? The error is coming in Integer.parseInt with number format exception\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s = Arrays.toString(num);\\n        int n=Integer.parseInt(s);\\n        int res=n+k;\\n        List<Integer> lis=new ArrayList<Integer>();\\n        while(res>0){\\n            lis.add(res%10);\\n            res=res/10;\\n            \\n        }\\n        Collections.reverse(lis);\\n        return lis;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "khushimattu",
                        "content": "[@Sajal1](/Sajal1) okay thankyou!"
                    },
                    {
                        "username": "Sajal1",
                        "content": "num array length is 1 to 4000 elements and int can store a max length of 10 digits only.....\\nconverting it into string will not help.\\nI hope that\\'s the reason it is giving error.\\n\\nthink of a approach using carryforward. "
                    },
                    {
                        "username": "halfengineer",
                        "content": "same concept as yesterday\\'s"
                    }
                ]
            },
            {
                "id": 1801605,
                "content": [
                    {
                        "username": "Shivnilay_1516",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        for(int i=nums.size() -1;i>=0;i--){\\n            nums[i]+=k;\\n            k=nums[i]/10;\\n            nums[i]=nums[i]%10;\\n        }\\n        while(k>0){\\n            nums.insert(nums.begin(),k%10);\\n            k/=10;\\n        }\\n        return nums;\\n    }\\n};"
                    },
                    {
                        "username": "subham46",
                        "content": "what\\'s wrong with this solution?\\n\\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> v;\\n        int ans = 0;\\n        for(int i=0;i<num.size();i++){\\n            ans = ans*10 + num[i];\\n        }\\n        int res = ans + k;\\n        int r;\\n\\n        while(res>0){\\n            r = res % 10;\\n            v.push_back(r);\\n            res = res/10;\\n        }\\n        reverse(v.begin(), v.end());\\n\\n        return v;\\n    }"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "length of num is 10^4, i.e. a very very big number. If you convert it to integer, it will cause overflow."
                    },
                    {
                        "username": "varunjpmch",
                        "content": "num = \\'\\'.join([str(elem) for elem in list_str]) why this code is not working?"
                    },
                    {
                        "username": "shivkatira",
                        "content": "For python use list comprehension ;)"
                    },
                    {
                        "username": "dumb_me",
                        "content": "double it and give it to next day too \\uD83D\\uDE2D\\uD83D\\uDE2D\\n"
                    },
                    {
                        "username": "bhaveshgarg2000",
                        "content": "Something big is brewing back to back 3 Easy Problem😳"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "Feels like a medium question"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "enjoy EASY tagged problems while they last"
                    },
                    {
                        "username": "khushimattu",
                        "content": "Why am i getting runtime error in this? The error is coming in Integer.parseInt with number format exception\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s = Arrays.toString(num);\\n        int n=Integer.parseInt(s);\\n        int res=n+k;\\n        List<Integer> lis=new ArrayList<Integer>();\\n        while(res>0){\\n            lis.add(res%10);\\n            res=res/10;\\n            \\n        }\\n        Collections.reverse(lis);\\n        return lis;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "khushimattu",
                        "content": "[@Sajal1](/Sajal1) okay thankyou!"
                    },
                    {
                        "username": "Sajal1",
                        "content": "num array length is 1 to 4000 elements and int can store a max length of 10 digits only.....\\nconverting it into string will not help.\\nI hope that\\'s the reason it is giving error.\\n\\nthink of a approach using carryforward. "
                    },
                    {
                        "username": "halfengineer",
                        "content": "same concept as yesterday\\'s"
                    }
                ]
            },
            {
                "id": 1801596,
                "content": [
                    {
                        "username": "Shivnilay_1516",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        for(int i=nums.size() -1;i>=0;i--){\\n            nums[i]+=k;\\n            k=nums[i]/10;\\n            nums[i]=nums[i]%10;\\n        }\\n        while(k>0){\\n            nums.insert(nums.begin(),k%10);\\n            k/=10;\\n        }\\n        return nums;\\n    }\\n};"
                    },
                    {
                        "username": "subham46",
                        "content": "what\\'s wrong with this solution?\\n\\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> v;\\n        int ans = 0;\\n        for(int i=0;i<num.size();i++){\\n            ans = ans*10 + num[i];\\n        }\\n        int res = ans + k;\\n        int r;\\n\\n        while(res>0){\\n            r = res % 10;\\n            v.push_back(r);\\n            res = res/10;\\n        }\\n        reverse(v.begin(), v.end());\\n\\n        return v;\\n    }"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "length of num is 10^4, i.e. a very very big number. If you convert it to integer, it will cause overflow."
                    },
                    {
                        "username": "varunjpmch",
                        "content": "num = \\'\\'.join([str(elem) for elem in list_str]) why this code is not working?"
                    },
                    {
                        "username": "shivkatira",
                        "content": "For python use list comprehension ;)"
                    },
                    {
                        "username": "dumb_me",
                        "content": "double it and give it to next day too \\uD83D\\uDE2D\\uD83D\\uDE2D\\n"
                    },
                    {
                        "username": "bhaveshgarg2000",
                        "content": "Something big is brewing back to back 3 Easy Problem😳"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "Feels like a medium question"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "enjoy EASY tagged problems while they last"
                    },
                    {
                        "username": "khushimattu",
                        "content": "Why am i getting runtime error in this? The error is coming in Integer.parseInt with number format exception\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s = Arrays.toString(num);\\n        int n=Integer.parseInt(s);\\n        int res=n+k;\\n        List<Integer> lis=new ArrayList<Integer>();\\n        while(res>0){\\n            lis.add(res%10);\\n            res=res/10;\\n            \\n        }\\n        Collections.reverse(lis);\\n        return lis;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "khushimattu",
                        "content": "[@Sajal1](/Sajal1) okay thankyou!"
                    },
                    {
                        "username": "Sajal1",
                        "content": "num array length is 1 to 4000 elements and int can store a max length of 10 digits only.....\\nconverting it into string will not help.\\nI hope that\\'s the reason it is giving error.\\n\\nthink of a approach using carryforward. "
                    },
                    {
                        "username": "halfengineer",
                        "content": "same concept as yesterday\\'s"
                    }
                ]
            },
            {
                "id": 1801593,
                "content": [
                    {
                        "username": "Shivnilay_1516",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        for(int i=nums.size() -1;i>=0;i--){\\n            nums[i]+=k;\\n            k=nums[i]/10;\\n            nums[i]=nums[i]%10;\\n        }\\n        while(k>0){\\n            nums.insert(nums.begin(),k%10);\\n            k/=10;\\n        }\\n        return nums;\\n    }\\n};"
                    },
                    {
                        "username": "subham46",
                        "content": "what\\'s wrong with this solution?\\n\\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> v;\\n        int ans = 0;\\n        for(int i=0;i<num.size();i++){\\n            ans = ans*10 + num[i];\\n        }\\n        int res = ans + k;\\n        int r;\\n\\n        while(res>0){\\n            r = res % 10;\\n            v.push_back(r);\\n            res = res/10;\\n        }\\n        reverse(v.begin(), v.end());\\n\\n        return v;\\n    }"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "length of num is 10^4, i.e. a very very big number. If you convert it to integer, it will cause overflow."
                    },
                    {
                        "username": "varunjpmch",
                        "content": "num = \\'\\'.join([str(elem) for elem in list_str]) why this code is not working?"
                    },
                    {
                        "username": "shivkatira",
                        "content": "For python use list comprehension ;)"
                    },
                    {
                        "username": "dumb_me",
                        "content": "double it and give it to next day too \\uD83D\\uDE2D\\uD83D\\uDE2D\\n"
                    },
                    {
                        "username": "bhaveshgarg2000",
                        "content": "Something big is brewing back to back 3 Easy Problem😳"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "Feels like a medium question"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "enjoy EASY tagged problems while they last"
                    },
                    {
                        "username": "khushimattu",
                        "content": "Why am i getting runtime error in this? The error is coming in Integer.parseInt with number format exception\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s = Arrays.toString(num);\\n        int n=Integer.parseInt(s);\\n        int res=n+k;\\n        List<Integer> lis=new ArrayList<Integer>();\\n        while(res>0){\\n            lis.add(res%10);\\n            res=res/10;\\n            \\n        }\\n        Collections.reverse(lis);\\n        return lis;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "khushimattu",
                        "content": "[@Sajal1](/Sajal1) okay thankyou!"
                    },
                    {
                        "username": "Sajal1",
                        "content": "num array length is 1 to 4000 elements and int can store a max length of 10 digits only.....\\nconverting it into string will not help.\\nI hope that\\'s the reason it is giving error.\\n\\nthink of a approach using carryforward. "
                    },
                    {
                        "username": "halfengineer",
                        "content": "same concept as yesterday\\'s"
                    }
                ]
            },
            {
                "id": 1801586,
                "content": [
                    {
                        "username": "Shivnilay_1516",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        for(int i=nums.size() -1;i>=0;i--){\\n            nums[i]+=k;\\n            k=nums[i]/10;\\n            nums[i]=nums[i]%10;\\n        }\\n        while(k>0){\\n            nums.insert(nums.begin(),k%10);\\n            k/=10;\\n        }\\n        return nums;\\n    }\\n};"
                    },
                    {
                        "username": "subham46",
                        "content": "what\\'s wrong with this solution?\\n\\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> v;\\n        int ans = 0;\\n        for(int i=0;i<num.size();i++){\\n            ans = ans*10 + num[i];\\n        }\\n        int res = ans + k;\\n        int r;\\n\\n        while(res>0){\\n            r = res % 10;\\n            v.push_back(r);\\n            res = res/10;\\n        }\\n        reverse(v.begin(), v.end());\\n\\n        return v;\\n    }"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "length of num is 10^4, i.e. a very very big number. If you convert it to integer, it will cause overflow."
                    },
                    {
                        "username": "varunjpmch",
                        "content": "num = \\'\\'.join([str(elem) for elem in list_str]) why this code is not working?"
                    },
                    {
                        "username": "shivkatira",
                        "content": "For python use list comprehension ;)"
                    },
                    {
                        "username": "dumb_me",
                        "content": "double it and give it to next day too \\uD83D\\uDE2D\\uD83D\\uDE2D\\n"
                    },
                    {
                        "username": "bhaveshgarg2000",
                        "content": "Something big is brewing back to back 3 Easy Problem😳"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "Feels like a medium question"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "enjoy EASY tagged problems while they last"
                    },
                    {
                        "username": "khushimattu",
                        "content": "Why am i getting runtime error in this? The error is coming in Integer.parseInt with number format exception\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s = Arrays.toString(num);\\n        int n=Integer.parseInt(s);\\n        int res=n+k;\\n        List<Integer> lis=new ArrayList<Integer>();\\n        while(res>0){\\n            lis.add(res%10);\\n            res=res/10;\\n            \\n        }\\n        Collections.reverse(lis);\\n        return lis;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "khushimattu",
                        "content": "[@Sajal1](/Sajal1) okay thankyou!"
                    },
                    {
                        "username": "Sajal1",
                        "content": "num array length is 1 to 4000 elements and int can store a max length of 10 digits only.....\\nconverting it into string will not help.\\nI hope that\\'s the reason it is giving error.\\n\\nthink of a approach using carryforward. "
                    },
                    {
                        "username": "halfengineer",
                        "content": "same concept as yesterday\\'s"
                    }
                ]
            },
            {
                "id": 1801580,
                "content": [
                    {
                        "username": "Shivnilay_1516",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        for(int i=nums.size() -1;i>=0;i--){\\n            nums[i]+=k;\\n            k=nums[i]/10;\\n            nums[i]=nums[i]%10;\\n        }\\n        while(k>0){\\n            nums.insert(nums.begin(),k%10);\\n            k/=10;\\n        }\\n        return nums;\\n    }\\n};"
                    },
                    {
                        "username": "subham46",
                        "content": "what\\'s wrong with this solution?\\n\\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> v;\\n        int ans = 0;\\n        for(int i=0;i<num.size();i++){\\n            ans = ans*10 + num[i];\\n        }\\n        int res = ans + k;\\n        int r;\\n\\n        while(res>0){\\n            r = res % 10;\\n            v.push_back(r);\\n            res = res/10;\\n        }\\n        reverse(v.begin(), v.end());\\n\\n        return v;\\n    }"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "length of num is 10^4, i.e. a very very big number. If you convert it to integer, it will cause overflow."
                    },
                    {
                        "username": "varunjpmch",
                        "content": "num = \\'\\'.join([str(elem) for elem in list_str]) why this code is not working?"
                    },
                    {
                        "username": "shivkatira",
                        "content": "For python use list comprehension ;)"
                    },
                    {
                        "username": "dumb_me",
                        "content": "double it and give it to next day too \\uD83D\\uDE2D\\uD83D\\uDE2D\\n"
                    },
                    {
                        "username": "bhaveshgarg2000",
                        "content": "Something big is brewing back to back 3 Easy Problem😳"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "Feels like a medium question"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "enjoy EASY tagged problems while they last"
                    },
                    {
                        "username": "khushimattu",
                        "content": "Why am i getting runtime error in this? The error is coming in Integer.parseInt with number format exception\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s = Arrays.toString(num);\\n        int n=Integer.parseInt(s);\\n        int res=n+k;\\n        List<Integer> lis=new ArrayList<Integer>();\\n        while(res>0){\\n            lis.add(res%10);\\n            res=res/10;\\n            \\n        }\\n        Collections.reverse(lis);\\n        return lis;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "khushimattu",
                        "content": "[@Sajal1](/Sajal1) okay thankyou!"
                    },
                    {
                        "username": "Sajal1",
                        "content": "num array length is 1 to 4000 elements and int can store a max length of 10 digits only.....\\nconverting it into string will not help.\\nI hope that\\'s the reason it is giving error.\\n\\nthink of a approach using carryforward. "
                    },
                    {
                        "username": "halfengineer",
                        "content": "same concept as yesterday\\'s"
                    }
                ]
            },
            {
                "id": 1801571,
                "content": [
                    {
                        "username": "Shivnilay_1516",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& nums, int k) {\\n        for(int i=nums.size() -1;i>=0;i--){\\n            nums[i]+=k;\\n            k=nums[i]/10;\\n            nums[i]=nums[i]%10;\\n        }\\n        while(k>0){\\n            nums.insert(nums.begin(),k%10);\\n            k/=10;\\n        }\\n        return nums;\\n    }\\n};"
                    },
                    {
                        "username": "subham46",
                        "content": "what\\'s wrong with this solution?\\n\\nvector<int> addToArrayForm(vector<int>& num, int k) {\\n        vector<int> v;\\n        int ans = 0;\\n        for(int i=0;i<num.size();i++){\\n            ans = ans*10 + num[i];\\n        }\\n        int res = ans + k;\\n        int r;\\n\\n        while(res>0){\\n            r = res % 10;\\n            v.push_back(r);\\n            res = res/10;\\n        }\\n        reverse(v.begin(), v.end());\\n\\n        return v;\\n    }"
                    },
                    {
                        "username": "me-oniichan",
                        "content": "length of num is 10^4, i.e. a very very big number. If you convert it to integer, it will cause overflow."
                    },
                    {
                        "username": "varunjpmch",
                        "content": "num = \\'\\'.join([str(elem) for elem in list_str]) why this code is not working?"
                    },
                    {
                        "username": "shivkatira",
                        "content": "For python use list comprehension ;)"
                    },
                    {
                        "username": "dumb_me",
                        "content": "double it and give it to next day too \\uD83D\\uDE2D\\uD83D\\uDE2D\\n"
                    },
                    {
                        "username": "bhaveshgarg2000",
                        "content": "Something big is brewing back to back 3 Easy Problem😳"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "Feels like a medium question"
                    },
                    {
                        "username": "sasukesharma",
                        "content": "enjoy EASY tagged problems while they last"
                    },
                    {
                        "username": "khushimattu",
                        "content": "Why am i getting runtime error in this? The error is coming in Integer.parseInt with number format exception\\n```\\nclass Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        String s = Arrays.toString(num);\\n        int n=Integer.parseInt(s);\\n        int res=n+k;\\n        List<Integer> lis=new ArrayList<Integer>();\\n        while(res>0){\\n            lis.add(res%10);\\n            res=res/10;\\n            \\n        }\\n        Collections.reverse(lis);\\n        return lis;\\n    }\\n}\\n```"
                    },
                    {
                        "username": "khushimattu",
                        "content": "[@Sajal1](/Sajal1) okay thankyou!"
                    },
                    {
                        "username": "Sajal1",
                        "content": "num array length is 1 to 4000 elements and int can store a max length of 10 digits only.....\\nconverting it into string will not help.\\nI hope that\\'s the reason it is giving error.\\n\\nthink of a approach using carryforward. "
                    },
                    {
                        "username": "halfengineer",
                        "content": "same concept as yesterday\\'s"
                    }
                ]
            },
            {
                "id": 1801549,
                "content": [
                    {
                        "username": "Ashwin_Acharya",
                        "content": "This problem is very much similar to yesterday\\'s daily."
                    },
                    {
                        "username": "Karan_Hadiyal",
                        "content": "Tips : use LinkedList class and traverse array backwards. K might be greater than num (i.e., log10(k)+1 > num.length), keep that point in mind, after all carry can still be non zero."
                    },
                    {
                        "username": "thisannie",
                        "content": "is this the calm before big storm?"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "not so easy though \\uD83E\\uDEE5"
                    },
                    {
                        "username": "naresh-khatri",
                        "content": "Am I dreaming? \\uD83E\\uDD79"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "similar to yesterday"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "looks like leetcode\\'s valentine is not over yet"
                    },
                    {
                        "username": "amanchandna",
                        "content": "# Edge case \\nnum length can be greater than k length\\nk length can be greater than num length.\\nDon\\'t jump to solution directly : [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solutions/3187111/java-easy-solution-beats-100-used-stack/)"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "Easy days of leetcode :) Something big to come!!"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "stand at last index of num vector and start adding k to it, once you add k, put sum%k in new ans vector, and then divide sum by 10 to eliminate the last digit which we have just included in the list. After looping over the num vector , you may check if sum>0, i.e if still we have some digit left, so while num>0, simply add it to ans and divide by 10 again.\\n\\nNow simply return the reversed list\\nThats all! quite simple na!! :)"
                    }
                ]
            },
            {
                "id": 1801540,
                "content": [
                    {
                        "username": "Ashwin_Acharya",
                        "content": "This problem is very much similar to yesterday\\'s daily."
                    },
                    {
                        "username": "Karan_Hadiyal",
                        "content": "Tips : use LinkedList class and traverse array backwards. K might be greater than num (i.e., log10(k)+1 > num.length), keep that point in mind, after all carry can still be non zero."
                    },
                    {
                        "username": "thisannie",
                        "content": "is this the calm before big storm?"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "not so easy though \\uD83E\\uDEE5"
                    },
                    {
                        "username": "naresh-khatri",
                        "content": "Am I dreaming? \\uD83E\\uDD79"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "similar to yesterday"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "looks like leetcode\\'s valentine is not over yet"
                    },
                    {
                        "username": "amanchandna",
                        "content": "# Edge case \\nnum length can be greater than k length\\nk length can be greater than num length.\\nDon\\'t jump to solution directly : [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solutions/3187111/java-easy-solution-beats-100-used-stack/)"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "Easy days of leetcode :) Something big to come!!"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "stand at last index of num vector and start adding k to it, once you add k, put sum%k in new ans vector, and then divide sum by 10 to eliminate the last digit which we have just included in the list. After looping over the num vector , you may check if sum>0, i.e if still we have some digit left, so while num>0, simply add it to ans and divide by 10 again.\\n\\nNow simply return the reversed list\\nThats all! quite simple na!! :)"
                    }
                ]
            },
            {
                "id": 1801521,
                "content": [
                    {
                        "username": "Ashwin_Acharya",
                        "content": "This problem is very much similar to yesterday\\'s daily."
                    },
                    {
                        "username": "Karan_Hadiyal",
                        "content": "Tips : use LinkedList class and traverse array backwards. K might be greater than num (i.e., log10(k)+1 > num.length), keep that point in mind, after all carry can still be non zero."
                    },
                    {
                        "username": "thisannie",
                        "content": "is this the calm before big storm?"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "not so easy though \\uD83E\\uDEE5"
                    },
                    {
                        "username": "naresh-khatri",
                        "content": "Am I dreaming? \\uD83E\\uDD79"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "similar to yesterday"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "looks like leetcode\\'s valentine is not over yet"
                    },
                    {
                        "username": "amanchandna",
                        "content": "# Edge case \\nnum length can be greater than k length\\nk length can be greater than num length.\\nDon\\'t jump to solution directly : [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solutions/3187111/java-easy-solution-beats-100-used-stack/)"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "Easy days of leetcode :) Something big to come!!"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "stand at last index of num vector and start adding k to it, once you add k, put sum%k in new ans vector, and then divide sum by 10 to eliminate the last digit which we have just included in the list. After looping over the num vector , you may check if sum>0, i.e if still we have some digit left, so while num>0, simply add it to ans and divide by 10 again.\\n\\nNow simply return the reversed list\\nThats all! quite simple na!! :)"
                    }
                ]
            },
            {
                "id": 1801496,
                "content": [
                    {
                        "username": "Ashwin_Acharya",
                        "content": "This problem is very much similar to yesterday\\'s daily."
                    },
                    {
                        "username": "Karan_Hadiyal",
                        "content": "Tips : use LinkedList class and traverse array backwards. K might be greater than num (i.e., log10(k)+1 > num.length), keep that point in mind, after all carry can still be non zero."
                    },
                    {
                        "username": "thisannie",
                        "content": "is this the calm before big storm?"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "not so easy though \\uD83E\\uDEE5"
                    },
                    {
                        "username": "naresh-khatri",
                        "content": "Am I dreaming? \\uD83E\\uDD79"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "similar to yesterday"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "looks like leetcode\\'s valentine is not over yet"
                    },
                    {
                        "username": "amanchandna",
                        "content": "# Edge case \\nnum length can be greater than k length\\nk length can be greater than num length.\\nDon\\'t jump to solution directly : [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solutions/3187111/java-easy-solution-beats-100-used-stack/)"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "Easy days of leetcode :) Something big to come!!"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "stand at last index of num vector and start adding k to it, once you add k, put sum%k in new ans vector, and then divide sum by 10 to eliminate the last digit which we have just included in the list. After looping over the num vector , you may check if sum>0, i.e if still we have some digit left, so while num>0, simply add it to ans and divide by 10 again.\\n\\nNow simply return the reversed list\\nThats all! quite simple na!! :)"
                    }
                ]
            },
            {
                "id": 1801491,
                "content": [
                    {
                        "username": "Ashwin_Acharya",
                        "content": "This problem is very much similar to yesterday\\'s daily."
                    },
                    {
                        "username": "Karan_Hadiyal",
                        "content": "Tips : use LinkedList class and traverse array backwards. K might be greater than num (i.e., log10(k)+1 > num.length), keep that point in mind, after all carry can still be non zero."
                    },
                    {
                        "username": "thisannie",
                        "content": "is this the calm before big storm?"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "not so easy though \\uD83E\\uDEE5"
                    },
                    {
                        "username": "naresh-khatri",
                        "content": "Am I dreaming? \\uD83E\\uDD79"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "similar to yesterday"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "looks like leetcode\\'s valentine is not over yet"
                    },
                    {
                        "username": "amanchandna",
                        "content": "# Edge case \\nnum length can be greater than k length\\nk length can be greater than num length.\\nDon\\'t jump to solution directly : [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solutions/3187111/java-easy-solution-beats-100-used-stack/)"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "Easy days of leetcode :) Something big to come!!"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "stand at last index of num vector and start adding k to it, once you add k, put sum%k in new ans vector, and then divide sum by 10 to eliminate the last digit which we have just included in the list. After looping over the num vector , you may check if sum>0, i.e if still we have some digit left, so while num>0, simply add it to ans and divide by 10 again.\\n\\nNow simply return the reversed list\\nThats all! quite simple na!! :)"
                    }
                ]
            },
            {
                "id": 1801471,
                "content": [
                    {
                        "username": "Ashwin_Acharya",
                        "content": "This problem is very much similar to yesterday\\'s daily."
                    },
                    {
                        "username": "Karan_Hadiyal",
                        "content": "Tips : use LinkedList class and traverse array backwards. K might be greater than num (i.e., log10(k)+1 > num.length), keep that point in mind, after all carry can still be non zero."
                    },
                    {
                        "username": "thisannie",
                        "content": "is this the calm before big storm?"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "not so easy though \\uD83E\\uDEE5"
                    },
                    {
                        "username": "naresh-khatri",
                        "content": "Am I dreaming? \\uD83E\\uDD79"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "similar to yesterday"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "looks like leetcode\\'s valentine is not over yet"
                    },
                    {
                        "username": "amanchandna",
                        "content": "# Edge case \\nnum length can be greater than k length\\nk length can be greater than num length.\\nDon\\'t jump to solution directly : [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solutions/3187111/java-easy-solution-beats-100-used-stack/)"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "Easy days of leetcode :) Something big to come!!"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "stand at last index of num vector and start adding k to it, once you add k, put sum%k in new ans vector, and then divide sum by 10 to eliminate the last digit which we have just included in the list. After looping over the num vector , you may check if sum>0, i.e if still we have some digit left, so while num>0, simply add it to ans and divide by 10 again.\\n\\nNow simply return the reversed list\\nThats all! quite simple na!! :)"
                    }
                ]
            },
            {
                "id": 1801464,
                "content": [
                    {
                        "username": "Ashwin_Acharya",
                        "content": "This problem is very much similar to yesterday\\'s daily."
                    },
                    {
                        "username": "Karan_Hadiyal",
                        "content": "Tips : use LinkedList class and traverse array backwards. K might be greater than num (i.e., log10(k)+1 > num.length), keep that point in mind, after all carry can still be non zero."
                    },
                    {
                        "username": "thisannie",
                        "content": "is this the calm before big storm?"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "not so easy though \\uD83E\\uDEE5"
                    },
                    {
                        "username": "naresh-khatri",
                        "content": "Am I dreaming? \\uD83E\\uDD79"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "similar to yesterday"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "looks like leetcode\\'s valentine is not over yet"
                    },
                    {
                        "username": "amanchandna",
                        "content": "# Edge case \\nnum length can be greater than k length\\nk length can be greater than num length.\\nDon\\'t jump to solution directly : [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solutions/3187111/java-easy-solution-beats-100-used-stack/)"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "Easy days of leetcode :) Something big to come!!"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "stand at last index of num vector and start adding k to it, once you add k, put sum%k in new ans vector, and then divide sum by 10 to eliminate the last digit which we have just included in the list. After looping over the num vector , you may check if sum>0, i.e if still we have some digit left, so while num>0, simply add it to ans and divide by 10 again.\\n\\nNow simply return the reversed list\\nThats all! quite simple na!! :)"
                    }
                ]
            },
            {
                "id": 1801455,
                "content": [
                    {
                        "username": "Ashwin_Acharya",
                        "content": "This problem is very much similar to yesterday\\'s daily."
                    },
                    {
                        "username": "Karan_Hadiyal",
                        "content": "Tips : use LinkedList class and traverse array backwards. K might be greater than num (i.e., log10(k)+1 > num.length), keep that point in mind, after all carry can still be non zero."
                    },
                    {
                        "username": "thisannie",
                        "content": "is this the calm before big storm?"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "not so easy though \\uD83E\\uDEE5"
                    },
                    {
                        "username": "naresh-khatri",
                        "content": "Am I dreaming? \\uD83E\\uDD79"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "similar to yesterday"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "looks like leetcode\\'s valentine is not over yet"
                    },
                    {
                        "username": "amanchandna",
                        "content": "# Edge case \\nnum length can be greater than k length\\nk length can be greater than num length.\\nDon\\'t jump to solution directly : [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solutions/3187111/java-easy-solution-beats-100-used-stack/)"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "Easy days of leetcode :) Something big to come!!"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "stand at last index of num vector and start adding k to it, once you add k, put sum%k in new ans vector, and then divide sum by 10 to eliminate the last digit which we have just included in the list. After looping over the num vector , you may check if sum>0, i.e if still we have some digit left, so while num>0, simply add it to ans and divide by 10 again.\\n\\nNow simply return the reversed list\\nThats all! quite simple na!! :)"
                    }
                ]
            },
            {
                "id": 1801448,
                "content": [
                    {
                        "username": "Ashwin_Acharya",
                        "content": "This problem is very much similar to yesterday\\'s daily."
                    },
                    {
                        "username": "Karan_Hadiyal",
                        "content": "Tips : use LinkedList class and traverse array backwards. K might be greater than num (i.e., log10(k)+1 > num.length), keep that point in mind, after all carry can still be non zero."
                    },
                    {
                        "username": "thisannie",
                        "content": "is this the calm before big storm?"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "not so easy though \\uD83E\\uDEE5"
                    },
                    {
                        "username": "naresh-khatri",
                        "content": "Am I dreaming? \\uD83E\\uDD79"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "similar to yesterday"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "looks like leetcode\\'s valentine is not over yet"
                    },
                    {
                        "username": "amanchandna",
                        "content": "# Edge case \\nnum length can be greater than k length\\nk length can be greater than num length.\\nDon\\'t jump to solution directly : [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solutions/3187111/java-easy-solution-beats-100-used-stack/)"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "Easy days of leetcode :) Something big to come!!"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "stand at last index of num vector and start adding k to it, once you add k, put sum%k in new ans vector, and then divide sum by 10 to eliminate the last digit which we have just included in the list. After looping over the num vector , you may check if sum>0, i.e if still we have some digit left, so while num>0, simply add it to ans and divide by 10 again.\\n\\nNow simply return the reversed list\\nThats all! quite simple na!! :)"
                    }
                ]
            },
            {
                "id": 1801446,
                "content": [
                    {
                        "username": "Ashwin_Acharya",
                        "content": "This problem is very much similar to yesterday\\'s daily."
                    },
                    {
                        "username": "Karan_Hadiyal",
                        "content": "Tips : use LinkedList class and traverse array backwards. K might be greater than num (i.e., log10(k)+1 > num.length), keep that point in mind, after all carry can still be non zero."
                    },
                    {
                        "username": "thisannie",
                        "content": "is this the calm before big storm?"
                    },
                    {
                        "username": "mkprajapati1614",
                        "content": "not so easy though \\uD83E\\uDEE5"
                    },
                    {
                        "username": "naresh-khatri",
                        "content": "Am I dreaming? \\uD83E\\uDD79"
                    },
                    {
                        "username": "JiayingGao",
                        "content": "similar to yesterday"
                    },
                    {
                        "username": "leeten__1500",
                        "content": "looks like leetcode\\'s valentine is not over yet"
                    },
                    {
                        "username": "amanchandna",
                        "content": "# Edge case \\nnum length can be greater than k length\\nk length can be greater than num length.\\nDon\\'t jump to solution directly : [solution](https://leetcode.com/problems/add-to-array-form-of-integer/solutions/3187111/java-easy-solution-beats-100-used-stack/)"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "Easy days of leetcode :) Something big to come!!"
                    },
                    {
                        "username": "rushi_4123",
                        "content": "stand at last index of num vector and start adding k to it, once you add k, put sum%k in new ans vector, and then divide sum by 10 to eliminate the last digit which we have just included in the list. After looping over the num vector , you may check if sum>0, i.e if still we have some digit left, so while num>0, simply add it to ans and divide by 10 again.\\n\\nNow simply return the reversed list\\nThats all! quite simple na!! :)"
                    }
                ]
            },
            {
                "id": 1801441,
                "content": [
                    {
                        "username": "anil1807",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        Integer j=0;\\n        for(int i=0;i<num.length;i++){\\n            j=j*10+num[i];\\n        }\\n        Integer x=j+k;\\n        List<Integer> list=new ArrayList<Integer>(); \\n        while(x!=0){\\n            list.add(0,x%10);\\n            x=x/10;\\n        }\\n\\n        return list;\\n    }\\n}\\n\\nwhy isnt this solution correct?\\n"
                    },
                    {
                        "username": "joleyasarthak",
                        "content": "Integer only supports till 10^9, but vector has 10^4 numbers, that means you are trying to store a number which is 10^10^4, in int. Try directly adding in the array"
                    },
                    {
                        "username": "CoolBud",
                        "content": "This problem has so many edge cases. : ("
                    },
                    {
                        "username": "CoolBud",
                        "content": "Easy questions for three straight days. WOW"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Prepare for a very hard question tomorrow guys"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "Tomorrow challenge will be easy for sure (Copium) "
                    },
                    {
                        "username": "jssyc13",
                        "content": "Three good mornings in a row huh...\\nCheck out my easy solution :D"
                    },
                    {
                        "username": "user8228j",
                        "content": "who else did this question with their girlfriend on Valentines? haha, just me?"
                    },
                    {
                        "username": "justenjoythejourneyagain",
                        "content": "not me"
                    },
                    {
                        "username": "scor32k",
                        "content": "not me"
                    },
                    {
                        "username": "udatyadeb",
                        "content": "Do not use any variable to store the whole number. Start adding each digit from the \\'k\\' variable from its 1\\'s place position directly with the last value of the array and continue the process until either no value of \\'k\\' remains or whole array is traversed and enter the sum in the new List. Do the same process for either of the condition for itself that is \\'k\\' remains but array traversal finished or vice-versa. Add a 1 at the end if after all this process we see there still is a carry. Now we have got the List we require but in reverse form. Just reverse the new List and return the List.\\n\\nHope that this will help."
                    },
                    {
                        "username": "rafiul29",
                        "content": "\\n# Js Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let newA=[]\\n    let add = BigInt(num.join(\"\"))+BigInt(k)\\n    let strArr= String(add).split(\"\")\\n    return strArr.map((item,i)=>Number(item))\\n};\\n```"
                    },
                    {
                        "username": "jhaeeshani",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int x = num.size();\\n        int m = x-1;\\n       vector<int> arr;\\n        int sum = 0;\\n        int d;\\n        int e;\\n    for(int i = 0;i<x; i++){\\n        sum = sum*10 + num[i];\\n }\\n d = sum+k;\\n while(d>0){\\n     e = d%10;\\n    arr.push_back(e);\\n     d  = d/10;\\n\\n }\\n     reverse(arr.begin(), arr.end());\\n\\n \\n return arr;\\n\\n\\n        }\\n        \\n    \\n};\\ncould anyone help me with an optimal solution as I am getting a runtime error.\\nThanks in  advance!!\\n"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "value of d goes beyond integer range"
                    }
                ]
            },
            {
                "id": 1801437,
                "content": [
                    {
                        "username": "anil1807",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        Integer j=0;\\n        for(int i=0;i<num.length;i++){\\n            j=j*10+num[i];\\n        }\\n        Integer x=j+k;\\n        List<Integer> list=new ArrayList<Integer>(); \\n        while(x!=0){\\n            list.add(0,x%10);\\n            x=x/10;\\n        }\\n\\n        return list;\\n    }\\n}\\n\\nwhy isnt this solution correct?\\n"
                    },
                    {
                        "username": "joleyasarthak",
                        "content": "Integer only supports till 10^9, but vector has 10^4 numbers, that means you are trying to store a number which is 10^10^4, in int. Try directly adding in the array"
                    },
                    {
                        "username": "CoolBud",
                        "content": "This problem has so many edge cases. : ("
                    },
                    {
                        "username": "CoolBud",
                        "content": "Easy questions for three straight days. WOW"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Prepare for a very hard question tomorrow guys"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "Tomorrow challenge will be easy for sure (Copium) "
                    },
                    {
                        "username": "jssyc13",
                        "content": "Three good mornings in a row huh...\\nCheck out my easy solution :D"
                    },
                    {
                        "username": "user8228j",
                        "content": "who else did this question with their girlfriend on Valentines? haha, just me?"
                    },
                    {
                        "username": "justenjoythejourneyagain",
                        "content": "not me"
                    },
                    {
                        "username": "scor32k",
                        "content": "not me"
                    },
                    {
                        "username": "udatyadeb",
                        "content": "Do not use any variable to store the whole number. Start adding each digit from the \\'k\\' variable from its 1\\'s place position directly with the last value of the array and continue the process until either no value of \\'k\\' remains or whole array is traversed and enter the sum in the new List. Do the same process for either of the condition for itself that is \\'k\\' remains but array traversal finished or vice-versa. Add a 1 at the end if after all this process we see there still is a carry. Now we have got the List we require but in reverse form. Just reverse the new List and return the List.\\n\\nHope that this will help."
                    },
                    {
                        "username": "rafiul29",
                        "content": "\\n# Js Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let newA=[]\\n    let add = BigInt(num.join(\"\"))+BigInt(k)\\n    let strArr= String(add).split(\"\")\\n    return strArr.map((item,i)=>Number(item))\\n};\\n```"
                    },
                    {
                        "username": "jhaeeshani",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int x = num.size();\\n        int m = x-1;\\n       vector<int> arr;\\n        int sum = 0;\\n        int d;\\n        int e;\\n    for(int i = 0;i<x; i++){\\n        sum = sum*10 + num[i];\\n }\\n d = sum+k;\\n while(d>0){\\n     e = d%10;\\n    arr.push_back(e);\\n     d  = d/10;\\n\\n }\\n     reverse(arr.begin(), arr.end());\\n\\n \\n return arr;\\n\\n\\n        }\\n        \\n    \\n};\\ncould anyone help me with an optimal solution as I am getting a runtime error.\\nThanks in  advance!!\\n"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "value of d goes beyond integer range"
                    }
                ]
            },
            {
                "id": 1801435,
                "content": [
                    {
                        "username": "anil1807",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        Integer j=0;\\n        for(int i=0;i<num.length;i++){\\n            j=j*10+num[i];\\n        }\\n        Integer x=j+k;\\n        List<Integer> list=new ArrayList<Integer>(); \\n        while(x!=0){\\n            list.add(0,x%10);\\n            x=x/10;\\n        }\\n\\n        return list;\\n    }\\n}\\n\\nwhy isnt this solution correct?\\n"
                    },
                    {
                        "username": "joleyasarthak",
                        "content": "Integer only supports till 10^9, but vector has 10^4 numbers, that means you are trying to store a number which is 10^10^4, in int. Try directly adding in the array"
                    },
                    {
                        "username": "CoolBud",
                        "content": "This problem has so many edge cases. : ("
                    },
                    {
                        "username": "CoolBud",
                        "content": "Easy questions for three straight days. WOW"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Prepare for a very hard question tomorrow guys"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "Tomorrow challenge will be easy for sure (Copium) "
                    },
                    {
                        "username": "jssyc13",
                        "content": "Three good mornings in a row huh...\\nCheck out my easy solution :D"
                    },
                    {
                        "username": "user8228j",
                        "content": "who else did this question with their girlfriend on Valentines? haha, just me?"
                    },
                    {
                        "username": "justenjoythejourneyagain",
                        "content": "not me"
                    },
                    {
                        "username": "scor32k",
                        "content": "not me"
                    },
                    {
                        "username": "udatyadeb",
                        "content": "Do not use any variable to store the whole number. Start adding each digit from the \\'k\\' variable from its 1\\'s place position directly with the last value of the array and continue the process until either no value of \\'k\\' remains or whole array is traversed and enter the sum in the new List. Do the same process for either of the condition for itself that is \\'k\\' remains but array traversal finished or vice-versa. Add a 1 at the end if after all this process we see there still is a carry. Now we have got the List we require but in reverse form. Just reverse the new List and return the List.\\n\\nHope that this will help."
                    },
                    {
                        "username": "rafiul29",
                        "content": "\\n# Js Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let newA=[]\\n    let add = BigInt(num.join(\"\"))+BigInt(k)\\n    let strArr= String(add).split(\"\")\\n    return strArr.map((item,i)=>Number(item))\\n};\\n```"
                    },
                    {
                        "username": "jhaeeshani",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int x = num.size();\\n        int m = x-1;\\n       vector<int> arr;\\n        int sum = 0;\\n        int d;\\n        int e;\\n    for(int i = 0;i<x; i++){\\n        sum = sum*10 + num[i];\\n }\\n d = sum+k;\\n while(d>0){\\n     e = d%10;\\n    arr.push_back(e);\\n     d  = d/10;\\n\\n }\\n     reverse(arr.begin(), arr.end());\\n\\n \\n return arr;\\n\\n\\n        }\\n        \\n    \\n};\\ncould anyone help me with an optimal solution as I am getting a runtime error.\\nThanks in  advance!!\\n"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "value of d goes beyond integer range"
                    }
                ]
            },
            {
                "id": 1801429,
                "content": [
                    {
                        "username": "anil1807",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        Integer j=0;\\n        for(int i=0;i<num.length;i++){\\n            j=j*10+num[i];\\n        }\\n        Integer x=j+k;\\n        List<Integer> list=new ArrayList<Integer>(); \\n        while(x!=0){\\n            list.add(0,x%10);\\n            x=x/10;\\n        }\\n\\n        return list;\\n    }\\n}\\n\\nwhy isnt this solution correct?\\n"
                    },
                    {
                        "username": "joleyasarthak",
                        "content": "Integer only supports till 10^9, but vector has 10^4 numbers, that means you are trying to store a number which is 10^10^4, in int. Try directly adding in the array"
                    },
                    {
                        "username": "CoolBud",
                        "content": "This problem has so many edge cases. : ("
                    },
                    {
                        "username": "CoolBud",
                        "content": "Easy questions for three straight days. WOW"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Prepare for a very hard question tomorrow guys"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "Tomorrow challenge will be easy for sure (Copium) "
                    },
                    {
                        "username": "jssyc13",
                        "content": "Three good mornings in a row huh...\\nCheck out my easy solution :D"
                    },
                    {
                        "username": "user8228j",
                        "content": "who else did this question with their girlfriend on Valentines? haha, just me?"
                    },
                    {
                        "username": "justenjoythejourneyagain",
                        "content": "not me"
                    },
                    {
                        "username": "scor32k",
                        "content": "not me"
                    },
                    {
                        "username": "udatyadeb",
                        "content": "Do not use any variable to store the whole number. Start adding each digit from the \\'k\\' variable from its 1\\'s place position directly with the last value of the array and continue the process until either no value of \\'k\\' remains or whole array is traversed and enter the sum in the new List. Do the same process for either of the condition for itself that is \\'k\\' remains but array traversal finished or vice-versa. Add a 1 at the end if after all this process we see there still is a carry. Now we have got the List we require but in reverse form. Just reverse the new List and return the List.\\n\\nHope that this will help."
                    },
                    {
                        "username": "rafiul29",
                        "content": "\\n# Js Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let newA=[]\\n    let add = BigInt(num.join(\"\"))+BigInt(k)\\n    let strArr= String(add).split(\"\")\\n    return strArr.map((item,i)=>Number(item))\\n};\\n```"
                    },
                    {
                        "username": "jhaeeshani",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int x = num.size();\\n        int m = x-1;\\n       vector<int> arr;\\n        int sum = 0;\\n        int d;\\n        int e;\\n    for(int i = 0;i<x; i++){\\n        sum = sum*10 + num[i];\\n }\\n d = sum+k;\\n while(d>0){\\n     e = d%10;\\n    arr.push_back(e);\\n     d  = d/10;\\n\\n }\\n     reverse(arr.begin(), arr.end());\\n\\n \\n return arr;\\n\\n\\n        }\\n        \\n    \\n};\\ncould anyone help me with an optimal solution as I am getting a runtime error.\\nThanks in  advance!!\\n"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "value of d goes beyond integer range"
                    }
                ]
            },
            {
                "id": 1801382,
                "content": [
                    {
                        "username": "anil1807",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        Integer j=0;\\n        for(int i=0;i<num.length;i++){\\n            j=j*10+num[i];\\n        }\\n        Integer x=j+k;\\n        List<Integer> list=new ArrayList<Integer>(); \\n        while(x!=0){\\n            list.add(0,x%10);\\n            x=x/10;\\n        }\\n\\n        return list;\\n    }\\n}\\n\\nwhy isnt this solution correct?\\n"
                    },
                    {
                        "username": "joleyasarthak",
                        "content": "Integer only supports till 10^9, but vector has 10^4 numbers, that means you are trying to store a number which is 10^10^4, in int. Try directly adding in the array"
                    },
                    {
                        "username": "CoolBud",
                        "content": "This problem has so many edge cases. : ("
                    },
                    {
                        "username": "CoolBud",
                        "content": "Easy questions for three straight days. WOW"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Prepare for a very hard question tomorrow guys"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "Tomorrow challenge will be easy for sure (Copium) "
                    },
                    {
                        "username": "jssyc13",
                        "content": "Three good mornings in a row huh...\\nCheck out my easy solution :D"
                    },
                    {
                        "username": "user8228j",
                        "content": "who else did this question with their girlfriend on Valentines? haha, just me?"
                    },
                    {
                        "username": "justenjoythejourneyagain",
                        "content": "not me"
                    },
                    {
                        "username": "scor32k",
                        "content": "not me"
                    },
                    {
                        "username": "udatyadeb",
                        "content": "Do not use any variable to store the whole number. Start adding each digit from the \\'k\\' variable from its 1\\'s place position directly with the last value of the array and continue the process until either no value of \\'k\\' remains or whole array is traversed and enter the sum in the new List. Do the same process for either of the condition for itself that is \\'k\\' remains but array traversal finished or vice-versa. Add a 1 at the end if after all this process we see there still is a carry. Now we have got the List we require but in reverse form. Just reverse the new List and return the List.\\n\\nHope that this will help."
                    },
                    {
                        "username": "rafiul29",
                        "content": "\\n# Js Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let newA=[]\\n    let add = BigInt(num.join(\"\"))+BigInt(k)\\n    let strArr= String(add).split(\"\")\\n    return strArr.map((item,i)=>Number(item))\\n};\\n```"
                    },
                    {
                        "username": "jhaeeshani",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int x = num.size();\\n        int m = x-1;\\n       vector<int> arr;\\n        int sum = 0;\\n        int d;\\n        int e;\\n    for(int i = 0;i<x; i++){\\n        sum = sum*10 + num[i];\\n }\\n d = sum+k;\\n while(d>0){\\n     e = d%10;\\n    arr.push_back(e);\\n     d  = d/10;\\n\\n }\\n     reverse(arr.begin(), arr.end());\\n\\n \\n return arr;\\n\\n\\n        }\\n        \\n    \\n};\\ncould anyone help me with an optimal solution as I am getting a runtime error.\\nThanks in  advance!!\\n"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "value of d goes beyond integer range"
                    }
                ]
            },
            {
                "id": 1801380,
                "content": [
                    {
                        "username": "anil1807",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        Integer j=0;\\n        for(int i=0;i<num.length;i++){\\n            j=j*10+num[i];\\n        }\\n        Integer x=j+k;\\n        List<Integer> list=new ArrayList<Integer>(); \\n        while(x!=0){\\n            list.add(0,x%10);\\n            x=x/10;\\n        }\\n\\n        return list;\\n    }\\n}\\n\\nwhy isnt this solution correct?\\n"
                    },
                    {
                        "username": "joleyasarthak",
                        "content": "Integer only supports till 10^9, but vector has 10^4 numbers, that means you are trying to store a number which is 10^10^4, in int. Try directly adding in the array"
                    },
                    {
                        "username": "CoolBud",
                        "content": "This problem has so many edge cases. : ("
                    },
                    {
                        "username": "CoolBud",
                        "content": "Easy questions for three straight days. WOW"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Prepare for a very hard question tomorrow guys"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "Tomorrow challenge will be easy for sure (Copium) "
                    },
                    {
                        "username": "jssyc13",
                        "content": "Three good mornings in a row huh...\\nCheck out my easy solution :D"
                    },
                    {
                        "username": "user8228j",
                        "content": "who else did this question with their girlfriend on Valentines? haha, just me?"
                    },
                    {
                        "username": "justenjoythejourneyagain",
                        "content": "not me"
                    },
                    {
                        "username": "scor32k",
                        "content": "not me"
                    },
                    {
                        "username": "udatyadeb",
                        "content": "Do not use any variable to store the whole number. Start adding each digit from the \\'k\\' variable from its 1\\'s place position directly with the last value of the array and continue the process until either no value of \\'k\\' remains or whole array is traversed and enter the sum in the new List. Do the same process for either of the condition for itself that is \\'k\\' remains but array traversal finished or vice-versa. Add a 1 at the end if after all this process we see there still is a carry. Now we have got the List we require but in reverse form. Just reverse the new List and return the List.\\n\\nHope that this will help."
                    },
                    {
                        "username": "rafiul29",
                        "content": "\\n# Js Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let newA=[]\\n    let add = BigInt(num.join(\"\"))+BigInt(k)\\n    let strArr= String(add).split(\"\")\\n    return strArr.map((item,i)=>Number(item))\\n};\\n```"
                    },
                    {
                        "username": "jhaeeshani",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int x = num.size();\\n        int m = x-1;\\n       vector<int> arr;\\n        int sum = 0;\\n        int d;\\n        int e;\\n    for(int i = 0;i<x; i++){\\n        sum = sum*10 + num[i];\\n }\\n d = sum+k;\\n while(d>0){\\n     e = d%10;\\n    arr.push_back(e);\\n     d  = d/10;\\n\\n }\\n     reverse(arr.begin(), arr.end());\\n\\n \\n return arr;\\n\\n\\n        }\\n        \\n    \\n};\\ncould anyone help me with an optimal solution as I am getting a runtime error.\\nThanks in  advance!!\\n"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "value of d goes beyond integer range"
                    }
                ]
            },
            {
                "id": 1801370,
                "content": [
                    {
                        "username": "anil1807",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        Integer j=0;\\n        for(int i=0;i<num.length;i++){\\n            j=j*10+num[i];\\n        }\\n        Integer x=j+k;\\n        List<Integer> list=new ArrayList<Integer>(); \\n        while(x!=0){\\n            list.add(0,x%10);\\n            x=x/10;\\n        }\\n\\n        return list;\\n    }\\n}\\n\\nwhy isnt this solution correct?\\n"
                    },
                    {
                        "username": "joleyasarthak",
                        "content": "Integer only supports till 10^9, but vector has 10^4 numbers, that means you are trying to store a number which is 10^10^4, in int. Try directly adding in the array"
                    },
                    {
                        "username": "CoolBud",
                        "content": "This problem has so many edge cases. : ("
                    },
                    {
                        "username": "CoolBud",
                        "content": "Easy questions for three straight days. WOW"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Prepare for a very hard question tomorrow guys"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "Tomorrow challenge will be easy for sure (Copium) "
                    },
                    {
                        "username": "jssyc13",
                        "content": "Three good mornings in a row huh...\\nCheck out my easy solution :D"
                    },
                    {
                        "username": "user8228j",
                        "content": "who else did this question with their girlfriend on Valentines? haha, just me?"
                    },
                    {
                        "username": "justenjoythejourneyagain",
                        "content": "not me"
                    },
                    {
                        "username": "scor32k",
                        "content": "not me"
                    },
                    {
                        "username": "udatyadeb",
                        "content": "Do not use any variable to store the whole number. Start adding each digit from the \\'k\\' variable from its 1\\'s place position directly with the last value of the array and continue the process until either no value of \\'k\\' remains or whole array is traversed and enter the sum in the new List. Do the same process for either of the condition for itself that is \\'k\\' remains but array traversal finished or vice-versa. Add a 1 at the end if after all this process we see there still is a carry. Now we have got the List we require but in reverse form. Just reverse the new List and return the List.\\n\\nHope that this will help."
                    },
                    {
                        "username": "rafiul29",
                        "content": "\\n# Js Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let newA=[]\\n    let add = BigInt(num.join(\"\"))+BigInt(k)\\n    let strArr= String(add).split(\"\")\\n    return strArr.map((item,i)=>Number(item))\\n};\\n```"
                    },
                    {
                        "username": "jhaeeshani",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int x = num.size();\\n        int m = x-1;\\n       vector<int> arr;\\n        int sum = 0;\\n        int d;\\n        int e;\\n    for(int i = 0;i<x; i++){\\n        sum = sum*10 + num[i];\\n }\\n d = sum+k;\\n while(d>0){\\n     e = d%10;\\n    arr.push_back(e);\\n     d  = d/10;\\n\\n }\\n     reverse(arr.begin(), arr.end());\\n\\n \\n return arr;\\n\\n\\n        }\\n        \\n    \\n};\\ncould anyone help me with an optimal solution as I am getting a runtime error.\\nThanks in  advance!!\\n"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "value of d goes beyond integer range"
                    }
                ]
            },
            {
                "id": 1796272,
                "content": [
                    {
                        "username": "anil1807",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        Integer j=0;\\n        for(int i=0;i<num.length;i++){\\n            j=j*10+num[i];\\n        }\\n        Integer x=j+k;\\n        List<Integer> list=new ArrayList<Integer>(); \\n        while(x!=0){\\n            list.add(0,x%10);\\n            x=x/10;\\n        }\\n\\n        return list;\\n    }\\n}\\n\\nwhy isnt this solution correct?\\n"
                    },
                    {
                        "username": "joleyasarthak",
                        "content": "Integer only supports till 10^9, but vector has 10^4 numbers, that means you are trying to store a number which is 10^10^4, in int. Try directly adding in the array"
                    },
                    {
                        "username": "CoolBud",
                        "content": "This problem has so many edge cases. : ("
                    },
                    {
                        "username": "CoolBud",
                        "content": "Easy questions for three straight days. WOW"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Prepare for a very hard question tomorrow guys"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "Tomorrow challenge will be easy for sure (Copium) "
                    },
                    {
                        "username": "jssyc13",
                        "content": "Three good mornings in a row huh...\\nCheck out my easy solution :D"
                    },
                    {
                        "username": "user8228j",
                        "content": "who else did this question with their girlfriend on Valentines? haha, just me?"
                    },
                    {
                        "username": "justenjoythejourneyagain",
                        "content": "not me"
                    },
                    {
                        "username": "scor32k",
                        "content": "not me"
                    },
                    {
                        "username": "udatyadeb",
                        "content": "Do not use any variable to store the whole number. Start adding each digit from the \\'k\\' variable from its 1\\'s place position directly with the last value of the array and continue the process until either no value of \\'k\\' remains or whole array is traversed and enter the sum in the new List. Do the same process for either of the condition for itself that is \\'k\\' remains but array traversal finished or vice-versa. Add a 1 at the end if after all this process we see there still is a carry. Now we have got the List we require but in reverse form. Just reverse the new List and return the List.\\n\\nHope that this will help."
                    },
                    {
                        "username": "rafiul29",
                        "content": "\\n# Js Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let newA=[]\\n    let add = BigInt(num.join(\"\"))+BigInt(k)\\n    let strArr= String(add).split(\"\")\\n    return strArr.map((item,i)=>Number(item))\\n};\\n```"
                    },
                    {
                        "username": "jhaeeshani",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int x = num.size();\\n        int m = x-1;\\n       vector<int> arr;\\n        int sum = 0;\\n        int d;\\n        int e;\\n    for(int i = 0;i<x; i++){\\n        sum = sum*10 + num[i];\\n }\\n d = sum+k;\\n while(d>0){\\n     e = d%10;\\n    arr.push_back(e);\\n     d  = d/10;\\n\\n }\\n     reverse(arr.begin(), arr.end());\\n\\n \\n return arr;\\n\\n\\n        }\\n        \\n    \\n};\\ncould anyone help me with an optimal solution as I am getting a runtime error.\\nThanks in  advance!!\\n"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "value of d goes beyond integer range"
                    }
                ]
            },
            {
                "id": 1792180,
                "content": [
                    {
                        "username": "anil1807",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        Integer j=0;\\n        for(int i=0;i<num.length;i++){\\n            j=j*10+num[i];\\n        }\\n        Integer x=j+k;\\n        List<Integer> list=new ArrayList<Integer>(); \\n        while(x!=0){\\n            list.add(0,x%10);\\n            x=x/10;\\n        }\\n\\n        return list;\\n    }\\n}\\n\\nwhy isnt this solution correct?\\n"
                    },
                    {
                        "username": "joleyasarthak",
                        "content": "Integer only supports till 10^9, but vector has 10^4 numbers, that means you are trying to store a number which is 10^10^4, in int. Try directly adding in the array"
                    },
                    {
                        "username": "CoolBud",
                        "content": "This problem has so many edge cases. : ("
                    },
                    {
                        "username": "CoolBud",
                        "content": "Easy questions for three straight days. WOW"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Prepare for a very hard question tomorrow guys"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "Tomorrow challenge will be easy for sure (Copium) "
                    },
                    {
                        "username": "jssyc13",
                        "content": "Three good mornings in a row huh...\\nCheck out my easy solution :D"
                    },
                    {
                        "username": "user8228j",
                        "content": "who else did this question with their girlfriend on Valentines? haha, just me?"
                    },
                    {
                        "username": "justenjoythejourneyagain",
                        "content": "not me"
                    },
                    {
                        "username": "scor32k",
                        "content": "not me"
                    },
                    {
                        "username": "udatyadeb",
                        "content": "Do not use any variable to store the whole number. Start adding each digit from the \\'k\\' variable from its 1\\'s place position directly with the last value of the array and continue the process until either no value of \\'k\\' remains or whole array is traversed and enter the sum in the new List. Do the same process for either of the condition for itself that is \\'k\\' remains but array traversal finished or vice-versa. Add a 1 at the end if after all this process we see there still is a carry. Now we have got the List we require but in reverse form. Just reverse the new List and return the List.\\n\\nHope that this will help."
                    },
                    {
                        "username": "rafiul29",
                        "content": "\\n# Js Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let newA=[]\\n    let add = BigInt(num.join(\"\"))+BigInt(k)\\n    let strArr= String(add).split(\"\")\\n    return strArr.map((item,i)=>Number(item))\\n};\\n```"
                    },
                    {
                        "username": "jhaeeshani",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int x = num.size();\\n        int m = x-1;\\n       vector<int> arr;\\n        int sum = 0;\\n        int d;\\n        int e;\\n    for(int i = 0;i<x; i++){\\n        sum = sum*10 + num[i];\\n }\\n d = sum+k;\\n while(d>0){\\n     e = d%10;\\n    arr.push_back(e);\\n     d  = d/10;\\n\\n }\\n     reverse(arr.begin(), arr.end());\\n\\n \\n return arr;\\n\\n\\n        }\\n        \\n    \\n};\\ncould anyone help me with an optimal solution as I am getting a runtime error.\\nThanks in  advance!!\\n"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "value of d goes beyond integer range"
                    }
                ]
            },
            {
                "id": 1776924,
                "content": [
                    {
                        "username": "anil1807",
                        "content": "class Solution {\\n    public List<Integer> addToArrayForm(int[] num, int k) {\\n        Integer j=0;\\n        for(int i=0;i<num.length;i++){\\n            j=j*10+num[i];\\n        }\\n        Integer x=j+k;\\n        List<Integer> list=new ArrayList<Integer>(); \\n        while(x!=0){\\n            list.add(0,x%10);\\n            x=x/10;\\n        }\\n\\n        return list;\\n    }\\n}\\n\\nwhy isnt this solution correct?\\n"
                    },
                    {
                        "username": "joleyasarthak",
                        "content": "Integer only supports till 10^9, but vector has 10^4 numbers, that means you are trying to store a number which is 10^10^4, in int. Try directly adding in the array"
                    },
                    {
                        "username": "CoolBud",
                        "content": "This problem has so many edge cases. : ("
                    },
                    {
                        "username": "CoolBud",
                        "content": "Easy questions for three straight days. WOW"
                    },
                    {
                        "username": "dev-null0",
                        "content": "Prepare for a very hard question tomorrow guys"
                    },
                    {
                        "username": "justsolveitlmao",
                        "content": "Tomorrow challenge will be easy for sure (Copium) "
                    },
                    {
                        "username": "jssyc13",
                        "content": "Three good mornings in a row huh...\\nCheck out my easy solution :D"
                    },
                    {
                        "username": "user8228j",
                        "content": "who else did this question with their girlfriend on Valentines? haha, just me?"
                    },
                    {
                        "username": "justenjoythejourneyagain",
                        "content": "not me"
                    },
                    {
                        "username": "scor32k",
                        "content": "not me"
                    },
                    {
                        "username": "udatyadeb",
                        "content": "Do not use any variable to store the whole number. Start adding each digit from the \\'k\\' variable from its 1\\'s place position directly with the last value of the array and continue the process until either no value of \\'k\\' remains or whole array is traversed and enter the sum in the new List. Do the same process for either of the condition for itself that is \\'k\\' remains but array traversal finished or vice-versa. Add a 1 at the end if after all this process we see there still is a carry. Now we have got the List we require but in reverse form. Just reverse the new List and return the List.\\n\\nHope that this will help."
                    },
                    {
                        "username": "rafiul29",
                        "content": "\\n# Js Code\\n```\\n/**\\n * @param {number[]} num\\n * @param {number} k\\n * @return {number[]}\\n */\\nvar addToArrayForm = function(num, k) {\\n    let newA=[]\\n    let add = BigInt(num.join(\"\"))+BigInt(k)\\n    let strArr= String(add).split(\"\")\\n    return strArr.map((item,i)=>Number(item))\\n};\\n```"
                    },
                    {
                        "username": "jhaeeshani",
                        "content": "class Solution {\\npublic:\\n    vector<int> addToArrayForm(vector<int>& num, int k) {\\n        int x = num.size();\\n        int m = x-1;\\n       vector<int> arr;\\n        int sum = 0;\\n        int d;\\n        int e;\\n    for(int i = 0;i<x; i++){\\n        sum = sum*10 + num[i];\\n }\\n d = sum+k;\\n while(d>0){\\n     e = d%10;\\n    arr.push_back(e);\\n     d  = d/10;\\n\\n }\\n     reverse(arr.begin(), arr.end());\\n\\n \\n return arr;\\n\\n\\n        }\\n        \\n    \\n};\\ncould anyone help me with an optimal solution as I am getting a runtime error.\\nThanks in  advance!!\\n"
                    },
                    {
                        "username": "rahulgujjar02",
                        "content": "value of d goes beyond integer range"
                    }
                ]
            }
        ]
    }
]