[
    {
        "title": "Angle Between Hands of a Clock",
        "question_content": "Given two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand.\nAnswers within 10-5 of the actual value will be accepted as correct.\n&nbsp;\nExample 1:\n\nInput: hour = 12, minutes = 30\nOutput: 165\n\nExample 2:\n\nInput: hour = 3, minutes = 30\nOutput: 75\n\nExample 3:\n\nInput: hour = 3, minutes = 15\nOutput: 7.5\n\n&nbsp;\nConstraints:\n\n\t1 <= hour <= 12\n\t0 <= minutes <= 59",
        "solutions": [
            {
                "id": 502738,
                "title": "java-python-c-simple-math-on-clock-angles",
                "content": "**Basic Unitary Method**\\n(Credits - @rajcm)\\n\\n**Hour Hand**\\nIn 12 hours Hour hand complete whole circle and cover 360\\xB0\\nSo, 1 hour = 360\\xB0 / 12 = 30\\xB0\\n\\nSince 1 hours = 30\\xB0\\nIn 1 minute, hours hand rotate -> 30\\xB0 / 60 = 0.5\\xB0\\nSo total angle because of minutes by hour hand is `minutes/60 * 30` or `minutes * 0.5`\\n\\n**Minute Hand**\\nIn 60 minutes Minute Hand completes whole circle and cover 360\\xB0.\\nSo, 1 minute -> 360\\xB0 / 60 = 6\\xB0\\n\\n<br><br>\\n\\n**Java**\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n         // Degree covered by hour hand (hour area + minutes area)\\n        double h = (hour%12 * 30) + ((double)minutes/60 * 30);\\n        \\n         // Degree covered by minute hand (Each minute = 6 degree)\\n        double m = minutes * 6;\\n        \\n         // Absolute angle between them\\n        double angle = Math.abs(m - h);\\n        \\n         // If the angle is obtuse (>180), convert it to acute (0<=x<=180)\\n        if (angle > 180) angle = 360.0 - angle;\\n        \\n        return angle;\\n    }\\n}\\n```\\n<br><br>\\n\\n**Python**\\n\\n```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        # Degree covered by hour hand (hour area + minutes area)\\n        h = (hour%12 * 30) + (minutes/60 * 30)\\n        \\n        # Degree covered by minute hand (Each minute = 6 degree)\\n        m = minutes * 6\\n        \\n        # Absolute angle between them\\n        angle = abs(m - h)\\n        \\n        # If the angle is obtuse (>180), convert it to acute (0<=x<=180)\\n        if angle > 180:\\n            angle = 360.0 - angle\\n        \\n        return (angle)\\n```\\n\\n**C++**\\nCredits : [MichaelZ](https://leetcode.com/michaelz/)\\nThanks for the C++ code.\\n```\\ndouble angleClock(int hour, int minutes) {\\n        double minute=minutes*6, hr=hour*30+(double)minutes/2, diff=abs(hr-minute);\\n        return min(diff, 360-diff);\\n    }\\n```\\t\\n\\nPlease upvote if you found this useful.\\nIf you have any queries, please post in comment section.\\nThank you",
                "solutionTags": [
                    "Java",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n         // Degree covered by hour hand (hour area + minutes area)\\n        double h = (hour%12 * 30) + ((double)minutes/60 * 30);\\n        \\n         // Degree covered by minute hand (Each minute = 6 degree)\\n        double m = minutes * 6;\\n        \\n         // Absolute angle between them\\n        double angle = Math.abs(m - h);\\n        \\n         // If the angle is obtuse (>180), convert it to acute (0<=x<=180)\\n        if (angle > 180) angle = 360.0 - angle;\\n        \\n        return angle;\\n    }\\n}\\n```\n```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        # Degree covered by hour hand (hour area + minutes area)\\n        h = (hour%12 * 30) + (minutes/60 * 30)\\n        \\n        # Degree covered by minute hand (Each minute = 6 degree)\\n        m = minutes * 6\\n        \\n        # Absolute angle between them\\n        angle = abs(m - h)\\n        \\n        # If the angle is obtuse (>180), convert it to acute (0<=x<=180)\\n        if angle > 180:\\n            angle = 360.0 - angle\\n        \\n        return (angle)\\n```\n```\\ndouble angleClock(int hour, int minutes) {\\n        double minute=minutes*6, hr=hour*30+(double)minutes/2, diff=abs(hr-minute);\\n        return min(diff, 360-diff);\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 735395,
                "title": "python-math-solution-oneliner-explained",
                "content": "To solve this problem we need to understand the speeds of Hands of a clock.\\n\\n1. Let us find the place, where **hour hand** is. First, whe have `12` hours in total, for `360` degrees, that means `30` degrees per hour. Also, for every `60` minutes, our hour hand rotated by `1` hour, that is `30` degrees, so for every minute, it is rotated by `0.5` degrees. So, final place for hour hand is `30*hour + 0.5*minutes`\\n2. Let us find the place, where **minute hand** is: every `60` minutes minute hand makes full rotation, that means we have `6` degrees for each minute.\\n3. Finally, we evaluate absolute difference between these two numbers, and if angle is more than `180` degrees, we return complementary angle.\\n\\n**Complexity**: time and space is `O(1)`, we just use some mathematical formulae.\\n\\n```\\nclass Solution:\\n    def angleClock(self, hour, minutes):\\n        H_place = 30*hour + 0.5*minutes\\n        M_place = 6*minutes\\n        diff = abs(H_place - M_place)\\n        return diff if diff <= 180 else 360 - diff\\n```\\n\\n**Oneliner**\\nWe can write this as oneliner as well:\\n```\\nreturn min(abs(30*hour-5.5*minutes),360-abs(30*hour-5.5*minutes))\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour, minutes):\\n        H_place = 30*hour + 0.5*minutes\\n        M_place = 6*minutes\\n        diff = abs(H_place - M_place)\\n        return diff if diff <= 180 else 360 - diff\\n```\n```\\nreturn min(abs(30*hour-5.5*minutes),360-abs(30*hour-5.5*minutes))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 735414,
                "title": "c-easy-with-explanation",
                "content": "### Approach\\n1. Hour hand\\nThe clock is 360deg. Make 4 parts each part is 90deg. 15 min = 90deg. So 5 min = 30 deg.\\nSo every hour our hour hand goes forward 30 deg.\\n2. Minute hand.\\nAs 5 min = 30 deg. So 1 min = 30/5 = 6 deg.\\nif it is 30 min ->  deg is 6 * 30 = 180 deg\\n3. Relation between hour and minute hand (Hint 1)\\nNow if minute hand is at 6 i.e. 30 min hour hand goes to 2.5 min.\\ni.e. out of 60 min hand covers 30 min and out of 5 min hour hand covers 2.5.\\nWe can see the ratio here.\\nso for every minute hour hand goes by 0.5 minutes.\\n\\nSo we can find both hour angle and minute angle and see their difference. Also as the question wants us to return the shorter angle we can to perforn 360 - diff and see if it smaller than diff.\\n#### Steps:\\n1. For hour hand we perform hour % 12 and then mutilply it to magnitude of 30deg.\\n``hour_angle = (hour % 12 ) * 30 + ratio`` - ``ratio = minutes * 0.5``\\n2. For minute hand - ``minutes*6 degrees``\\n3. calculate difference between the two angles - ``abs(h_angle - min_angle)``\\n4. Check the shorter angle ``min(diff,360-diff)``\\n5. Complete\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hour_angle = (hour % 12 ) * 30 + minutes * 0.5;\\n        double minute_angle = minutes * 6;\\n        double diff = abs(hour_angle - minute_angle);\\n        return min(diff, 360 - diff);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hour_angle = (hour % 12 ) * 30 + minutes * 0.5;\\n        double minute_angle = minutes * 6;\\n        double diff = abs(hour_angle - minute_angle);\\n        return min(diff, 360 - diff);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 502816,
                "title": "python-mathematical-solution-with-explanation",
                "content": "The minute hand moves by ```minute_deg_per_min = 360\\xB0 / 60 = 6\\xB0``` per minute.\\nThe hour hand moves by ```hour_deg_per_hour = 360\\xB0 / 12 = 30\\xB0``` per hour.\\nThe hour hand has an additional movement of ```hour_deg_per_min = hour_deg_per_hour / 60 = 30\\xB0 / 60 = 0.5\\xB0``` per minute.\\n\\nTherefore we get the following movements:\\n```\\nhour_hand_deg = hour * hour_deg_per_hour + minutes * hour_deg_per_min = hour * 30 + minutes * 0.5\\nminute_hand_deg = minutes * minute_deg_per_min = minutes * 6\\n```\\n\\nWe need the absolute difference between those two:\\n```\\ndiff_deg = |hour_hand_deg - minute_hand_deg| = |hour * 30 + minutes * 0.5 - minutes * 6| = |hour * 30 - minutes * 5.5|\\n```\\n\\nAs we can easily see when looking at a clock there are two different angles between the hands:\\nThe minimum angle on one side is between 0\\xB0 and 180\\xB0.\\nThe maximum angle on the other side is between 180\\xB0 and 360\\xB0.\\nWe need the minimum angle. If our formular returned a number above 180\\xB0 we got the maximum angle.\\nWe can calculate the minimum angle by subtracting the maximum angle from 360\\xB0.\\n\\nTime and space complexity: ```O(1)```\\n```python\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        diff = abs(30 * hour - 5.5 * minutes)\\n        return diff if diff <= 180 else 360 - diff\\n```",
                "solutionTags": [
                    "Python",
                    "Math"
                ],
                "code": "```minute_deg_per_min = 360\\xB0 / 60 = 6\\xB0```\n```hour_deg_per_hour = 360\\xB0 / 12 = 30\\xB0```\n```hour_deg_per_min = hour_deg_per_hour / 60 = 30\\xB0 / 60 = 0.5\\xB0```\n```\\nhour_hand_deg = hour * hour_deg_per_hour + minutes * hour_deg_per_min = hour * 30 + minutes * 0.5\\nminute_hand_deg = minutes * minute_deg_per_min = minutes * 6\\n```\n```\\ndiff_deg = |hour_hand_deg - minute_hand_deg| = |hour * 30 + minutes * 0.5 - minutes * 6| = |hour * 30 - minutes * 5.5|\\n```\n```O(1)```\n```python\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        diff = abs(30 * hour - 5.5 * minutes)\\n        return diff if diff <= 180 else 360 - diff\\n```",
                "codeTag": "Java"
            },
            {
                "id": 512733,
                "title": "use-720-for-a-circle-then-divide-by-2-0",
                "content": "\\n```\\n    public double angleClock(int h, int m) {\\n        int hr = 60 * h + m;\\n        int min = 12 * m;\\n        \\n        int angle = Math.abs(hr - min);\\n        return Math.min(angle, 720 - angle)/2.0;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public double angleClock(int h, int m) {\\n        int hr = 60 * h + m;\\n        int min = 12 * m;\\n        \\n        int angle = Math.abs(hr - min);\\n        return Math.min(angle, 720 - angle)/2.0;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 503002,
                "title": "c-simple-easy-solution",
                "content": "Get minutes equivalent for hour hand on a scale of 0-60, in the code below hrm is used to denote that.\\nWe know that at max, the difference can be 180 degrees, or 30 units in minute equivalent scale, we use this condition and calculate appropriately.\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hrm,mn;\\n        mn=minutes;\\n        hrm = hour%12*5;\\n        hrm+=mn/12.0;\\n        if(abs(mn-hrm)>30)\\n            return mn>hrm?(60-mn+hrm)*6:(60-hrm+mn)*6;\\n        else\\n            return abs(mn-hrm)*6;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hrm,mn;\\n        mn=minutes;\\n        hrm = hour%12*5;\\n        hrm+=mn/12.0;\\n        if(abs(mn-hrm)>30)\\n            return mn>hrm?(60-mn+hrm)*6:(60-hrm+mn)*6;\\n        else\\n            return abs(mn-hrm)*6;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2520957,
                "title": "c-1-line-solution-beats-100-submissions",
                "content": "Hey guys,\\nHope you all are doing well!\\nTo be honest, I could have written this code in a single line, but I decided to keep it as simple as possible so that everyone\\xA0can\\xA0easily grasp the logic behind it.\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes){\\n        double hh_angle=(60*hour+minutes)*0.5;  \\n        double mh_angle=minutes*6;\\n        double ans=abs(hh_angle-mh_angle);     //diff liya hai\\n        return ans<=180.0 ? ans : 360.0-ans;   //chhote angle ko return kiya hai\\n    }\\n};\\n```\\nExplaination: \\ni) The minute hand moves 360 degrees in 60 minute => 6 degrees in 1 minute.\\nii) Hour hand moves 360 degrees in 12 hours => 0.5 degrees in 1 minute. \\niii) In h hours and m minutes, the minute hand would move (h*60 + m)*6 and hour hand would move (h*60 + m)*0.5. \\n\\nPlease let me know if you have any questions in the comments. I\\'d be delighted to respond.\\xA0\\nIf you found the solution helpful, please vote it up.\\nHave fun coding.",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes){\\n        double hh_angle=(60*hour+minutes)*0.5;  \\n        double mh_angle=minutes*6;\\n        double ans=abs(hh_angle-mh_angle);     //diff liya hai\\n        return ans<=180.0 ? ans : 360.0-ans;   //chhote angle ko return kiya hai\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2174887,
                "title": "3-lines-of-code-easiest-cpp-solution-with-explanation-runtime-0ms",
                "content": "**Code:**\\n```\\ndouble angleClock(int hour, int minutes)\\n    {\\n        //1 minutes = 6`    (360/60)\\n        //so firtly calulate minutes travelled by hour hand.\\n        //Every 1 hour in clock consists of 5 minute part, so (hour*5)\\n        //In very minute the movement of hour hand will be (5/60) = (1/12)\\n        //So to calculate movement in the hour hand bcz of minute hand will be (minutes/12)\\n        //So, (hour*5.0) + (minutes/12.0) will give the position of hour hand in respect of minute hand\\n\\t\\t\\n        double hr = (hour*5.0) + (minutes/12.0);  \\n\\t\\t\\n        //to calculate the angle between them\\n        //difference betweem hour hand position and minutes hand position multipled with 6\\n        //So angle 1 = (abs(hr - minutes))*6\\n        //The other angle will be (360 - angle 1)\\n        //return the smaller one\\n\\t\\t\\n        double a = min((abs(hr - minutes))*6, abs(360 - (abs(hr - minutes))*6));\\n\\t\\t\\n        return a;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\ndouble angleClock(int hour, int minutes)\\n    {\\n        //1 minutes = 6`    (360/60)\\n        //so firtly calulate minutes travelled by hour hand.\\n        //Every 1 hour in clock consists of 5 minute part, so (hour*5)\\n        //In very minute the movement of hour hand will be (5/60) = (1/12)\\n        //So to calculate movement in the hour hand bcz of minute hand will be (minutes/12)\\n        //So, (hour*5.0) + (minutes/12.0) will give the position of hour hand in respect of minute hand\\n\\t\\t\\n        double hr = (hour*5.0) + (minutes/12.0);  \\n\\t\\t\\n        //to calculate the angle between them\\n        //difference betweem hour hand position and minutes hand position multipled with 6\\n        //So angle 1 = (abs(hr - minutes))*6\\n        //The other angle will be (360 - angle 1)\\n        //return the smaller one\\n\\t\\t\\n        double a = min((abs(hr - minutes))*6, abs(360 - (abs(hr - minutes))*6));\\n\\t\\t\\n        return a;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1436506,
                "title": "100-fastest-simple-math",
                "content": "```\\n double angleClock(int hour, int minutes) {\\n        double num_hours = (30*((double)hour + ((double)(minutes)/60)));  // total time in hours eg 12:30 == 12.5 hours\\n\\t\\t//and multiplying with 30 as 1 hour = 30 degrees \\n        if(num_hours > 360) {\\n            num_hours -= 360; \\n        }// If the result goes above 360 \\n        double ans_min = 6 * minutes;  // every min is 6 degrees \\n        double result = abs(num_hours - ans_min);  // This is first answer but the minimal \\n\\t\\t//could be 360 - answer. Thats why the below line  :) \\n        return min(result, 360 - result);\\n    }\\n\\t// If you understood it then please Upvote , it motivates me !!\\n\\n```",
                "solutionTags": [],
                "code": "```\\n double angleClock(int hour, int minutes) {\\n        double num_hours = (30*((double)hour + ((double)(minutes)/60)));  // total time in hours eg 12:30 == 12.5 hours\\n\\t\\t//and multiplying with 30 as 1 hour = 30 degrees \\n        if(num_hours > 360) {\\n            num_hours -= 360; \\n        }// If the result goes above 360 \\n        double ans_min = 6 * minutes;  // every min is 6 degrees \\n        double result = abs(num_hours - ans_min);  // This is first answer but the minimal \\n\\t\\t//could be 360 - answer. Thats why the below line  :) \\n        return min(result, 360 - result);\\n    }\\n\\t// If you understood it then please Upvote , it motivates me !!\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 503033,
                "title": "4-lines-javascript-solution-with-explanation-link-60-ms",
                "content": "Solution:\\n```\\nvar angleClock = function(hour, minutes) {\\n    var minutesAngle = minutes * 6;\\n    var hoursAngle = (hour + minutes / 60) * 30;\\n    var diff = Math.abs(minutesAngle - hoursAngle);\\n    return Math.min(diff, 360 - diff);\\n};\\n```\\n\\nHere is explanation: https://www.varsitytutors.com/sat_math-help/how-to-find-the-angle-of-clock-hands\\n\\n![image](https://assets.leetcode.com/users/eforce/image_1581191938.png)\\n",
                "solutionTags": [],
                "code": "```\\nvar angleClock = function(hour, minutes) {\\n    var minutesAngle = minutes * 6;\\n    var hoursAngle = (hour + minutes / 60) * 30;\\n    var diff = Math.abs(minutesAngle - hoursAngle);\\n    return Math.min(diff, 360 - diff);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 502808,
                "title": "simple-java-solution-w-explanation",
                "content": "We can compute the angle between each hand and the vertical line, then take the absolute sum of them.\\nFirst angle (the one between the minute hand and the vertical line): `minutes*360 / 60`\\nSecond angle (the one between the hour hand and the vertical line): `hour offset from 12 o\\'clock` + `minute offset from its hour time`\\n```\\npublic double angleClock(int hour, int minutes) {\\n        double minAngle = minutes*360 / 60;\\n        double hourAnglePart1 = hour != 12 ? (hour * 360) / 12 : 0;\\n        double hourAnglePart2 = (double) (30 * minutes)/ (double) 60;\\n        double hourAngle = hourAnglePart1 + hourAnglePart2;\\n        double preResult = Math.abs(minAngle - (hourAngle));\\n        return preResult > 180 ? 360 - preResult : preResult;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic double angleClock(int hour, int minutes) {\\n        double minAngle = minutes*360 / 60;\\n        double hourAnglePart1 = hour != 12 ? (hour * 360) / 12 : 0;\\n        double hourAnglePart2 = (double) (30 * minutes)/ (double) 60;\\n        double hourAngle = hourAnglePart1 + hourAnglePart2;\\n        double preResult = Math.abs(minAngle - (hourAngle));\\n        return preResult > 180 ? 360 - preResult : preResult;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 744048,
                "title": "java-simple-small-and-efficient-code",
                "content": "Simple efficient java code.\\n\\n\\tclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n\\n\\t\\tdouble angle = 0;\\n\\t\\tdouble minAngle = minutes * 6;\\n\\t\\tdouble hrAngle = hour * 30 + (minAngle / 360 * 30);\\n\\t\\thrAngle = hrAngle % 360;\\n\\n\\t\\tangle = Math.abs(hrAngle - minAngle);\\n\\n\\t\\tangle = Math.min(angle, 360 - angle);\\n\\n\\t\\treturn angle;\\n\\t}\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public double angleClock(int hour, int minutes) {\\n\\n\\t\\tdouble angle = 0;\\n\\t\\tdouble minAngle = minutes * 6;\\n\\t\\tdouble hrAngle = hour * 30 + (minAngle / 360 * 30);\\n\\t\\thrAngle = hrAngle % 360;\\n\\n\\t\\tangle = Math.abs(hrAngle - minAngle);\\n\\n\\t\\tangle = Math.min(angle, 360 - angle);\\n\\n\\t\\treturn angle;\\n\\t}",
                "codeTag": "Java"
            },
            {
                "id": 735419,
                "title": "simple-c-solution-0ms-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double(abs(5.5*minutes - 30*hour));\\n        if(double(abs(5.5*minutes - 30*hour))>180)\\n            return 360-double(abs(5.5*minutes - 30*hour));\\n        else\\n            return double(abs(5.5*minutes - 30*hour));\\n    }\\n};\\n```\\n\\n# Simple Formula to Calculate the Angle between the hands of a clock\\n**x = 11m/2-30h***",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double(abs(5.5*minutes - 30*hour));\\n        if(double(abs(5.5*minutes - 30*hour))>180)\\n            return 360-double(abs(5.5*minutes - 30*hour));\\n        else\\n            return double(abs(5.5*minutes - 30*hour));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 734934,
                "title": "simple-math-python-solution-with-detailed-explanation",
                "content": "Clock is a circle, so the overall angle is 360. \\nThere are 60 minutes, which completes one whole circle, so angle of each minute is 360 / 60 = 6.\\nSimilarly, 12 hours, so angle of each hour is 360 // 12 = 30.\\n\\nWhile calculating hour angle, add minutes into hour because hour hand moves with each second and minute with a minute angle.\\n\\nSo, the actual hours will be hours + minutes / 60 and then multiply by 30 to get the angle.\\n\\n**Note:** In Python, Don\\'t divide by // as it will give you floor number i.e. for 3//2 will give 1 instead of 1.5 and we are interested in that fraction value, So use single forward slash \\'/\\' instead of double \\'//\\'.\\n\\n**Don\\'t forget to upvote if you find it useful!!**\\n\\n**Happy LeetCoding!! :)**\\n\\n```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        one_min_angle = 6\\n        one_hour_angle = 30\\n        \\n        minute_angle = minutes * one_min_angle\\n        hour_angle = (hour + (minutes / 60)) * one_hour_angle      # calculate hour angle by adding minutes into hour\\n        \\n        \\n        diff = abs(hour_angle - minute_angle)            # get absolute difference between angles\\n        \\n        return diff if diff <= 180 else 360 - diff          # return min angle, if diff > 180 then subtract from 360\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        one_min_angle = 6\\n        one_hour_angle = 30\\n        \\n        minute_angle = minutes * one_min_angle\\n        hour_angle = (hour + (minutes / 60)) * one_hour_angle      # calculate hour angle by adding minutes into hour\\n        \\n        \\n        diff = abs(hour_angle - minute_angle)            # get absolute difference between angles\\n        \\n        return diff if diff <= 180 else 360 - diff          # return min angle, if diff > 180 then subtract from 360\\n```",
                "codeTag": "Java"
            },
            {
                "id": 503681,
                "title": "python-faster-than-100",
                "content": "```\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        hour %= 12 \\n        h = hour*30 + minutes/2\\n        m = 6 * minutes\\n        return min(abs(h-m), 360-abs(m-h))",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        hour %= 12 \\n        h = hour*30 + minutes/2\\n        m = 6 * minutes\\n        return min(abs(h-m), 360-abs(m-h))",
                "codeTag": "Python3"
            },
            {
                "id": 2621242,
                "title": "c-beats-100-best-approach-no-explanation-needed",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double minDegree=6*minutes;\\n        if(hour==12)\\n            hour=0;\\n        double hourDegree=double(hour+minutes/60.0)*30;\\n        double angle1=abs(minDegree-hourDegree);\\n        double angle2=360-angle1;\\n        return min(angle1,angle2);\\n    }\\n};\\n\\nif(itHelps)\\n\\t upvote++;\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double minDegree=6*minutes;\\n        if(hour==12)\\n            hour=0;\\n        double hourDegree=double(hour+minutes/60.0)*30;\\n        double angle1=abs(minDegree-hourDegree);\\n        double angle2=360-angle1;\\n        return min(angle1,angle2);\\n    }\\n};\\n\\nif(itHelps)\\n\\t upvote++;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 735353,
                "title": "java-c-4-line-mathematical-solution-with-explanation",
                "content": "The code uses following facts.\\n1. Every hour, hour hand crosses 30 degree angle. ( 360 degreee / 12 hours = 30 degrees)\\n2. Every minute, minute hand covers 6 degree angle. (360 degree / 60 minutes = 6 degree )\\n3. Every minute, hour hand covers 0.5 degree angle. (30 degree / 60 minutes = 0.5 degree)\\n\\nNow we use above 3 facts to compute hourDegree for hour hand and minuteDegree for \\nminute hands. \\nWe take absolute difference between them and return minimum of (diff, 360 - diff).\\n\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double hourDegree = hour * 30 % 360 + minutes * 0.5;\\n        double minuteDegree = minutes * 6;\\n        \\n        double answer = Math.abs(minuteDegree - hourDegree);\\n        \\n        return Math.min(answer, 360 -answer);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double hourDegree = hour * 30 % 360 + minutes * 0.5;\\n        double minuteDegree = minutes * 6;\\n        \\n        double answer = Math.abs(minuteDegree - hourDegree);\\n        \\n        return Math.min(answer, 360 -answer);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3651720,
                "title": "c-easy-solution-beats-100",
                "content": "\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double min = minutes*6;\\n        double hr = 30*(hour%12) + 0.5*minutes;\\n\\n        double temp1 = abs(min-hr);\\n        double temp2 = 360-temp1;\\n\\n        if(temp1>temp2){\\n            return temp2;\\n        }\\n        \\n        return temp1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double min = minutes*6;\\n        double hr = 30*(hour%12) + 0.5*minutes;\\n\\n        double temp1 = abs(min-hr);\\n        double temp2 = 360-temp1;\\n\\n        if(temp1>temp2){\\n            return temp2;\\n        }\\n        \\n        return temp1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3168210,
                "title": "c-solution-using-fractions",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hr, int min) {\\n        double hr1= 360/12, min1= hr1/5 , frac= (double)min/60;\\n        double hrAngle= (hr+frac)*hr1 , minAngle= min*min1;\\n        // cout<<hrAngle<<\" \"<<minAngle;\\n        double ans= abs(hrAngle- minAngle);\\n        return ans<180 ?ans: 360-ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hr, int min) {\\n        double hr1= 360/12, min1= hr1/5 , frac= (double)min/60;\\n        double hrAngle= (hr+frac)*hr1 , minAngle= min*min1;\\n        // cout<<hrAngle<<\" \"<<minAngle;\\n        double ans= abs(hrAngle- minAngle);\\n        return ans<180 ?ans: 360-ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2955410,
                "title": "c-100-faster-o-1-time-and-space-very-simple-concise-solution-detailed-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n***Note:** For complete code, please scroll to the end. Detailed explanation continues below.*\\n\\n*This is a very easy and intuitive problem. Not sure why this is marked as a medium problem in Leetcode.*\\n\\nIf we set a standard unit of position measurement we can use the minute value to count the exact position(including extra displacement) of the hour hand. For example, if the time is 12:30, then hour hand is exactly at middle position of 12 and 1. To find the standard position we can use below formula:\\n\\nhourPosition = hour*(unit/12) + (unit/12)*(minute/60)\\n\\nHere,\\nhourPosition=exact position of hour hand\\nunit=total size of the clock in our new unit of mesaurement\\n\\nFor convenience, we can select unit as 60 minutes(unit=60) which is equivalent to 1 hour. This will mean that we won\\'t have to change our minute value to our new unit of measurement. We can later after finding our answer using this unit, calculate it with respect to 360 degree.\\n\\nNew formula becomes:\\n\\nhourPosition = hour*(5) + (5)*(minute/60)\\n\\nWe only have to keep 1 edge case in mind here that our hour input can have a value of 12. For such cases, we have to convert it to 0.\\n\\nAlso this might give us the bigger angle instead of the smaller angle. For this issue we can subtract the angle found from 360 and take the smaller value of the two.\\n\\n# Detailed Explanation/Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst we take care of the edge case inline in our input.\\n\\n```\\nif(hour==12)\\n    hour=0;\\n```\\nNext we find the exact hour positions and minute positions. Since our output needs to be in double we will make the calculation accordingly and store it in a double variable. For hour position we will store it in hourDegree and for minute position we will store it in minDegree.\\n\\nFirst we find the hour position. Since our hour and minute values are integer always but we need double value, we calculate minutes/60.00 instead of minutes/60. This will make the rest of the calculation also happen using doubles due to implicit typecasting.\\n\\n```\\ndouble hourDegree=hour*5+(5*(minutes/60.00));\\n```\\nFor minute position, since our unit is also equivalent to minutes, we simply store the minute value to minPosition. Here also implicit typecasting takes care of integer to double conversion.\\n\\n```\\ndouble minDegree=minutes;\\n```\\nNext we find the difference between the positions and calculate the angle. For that we have to first calcualte the absolute difference of positions i.e. `abs(hourDegree-minDegree)`. Now, since our unit was equivalent to minutes, that means a whole rotation of the clock will give us 60 positions. That means 360 degree is reduced to 60 positions. So to convert it to degree, we have to multiply by 360/60 i.e. 6.\\n\\n```\\ndouble res=abs(hourDegree-minDegree)*6.00;\\n```\\nNow we have our angle in res variable. However, this might be the bigger angle. Since the smaller and bigger angles are complement of each other, we can simply take the difference of 360.00(we need to do calculation in doubles) and res and return the value which is less among res and 360.00-res.\\n\\n```\\nreturn min(res,360.00-res);\\n```\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nSince we don\\'t have any loops and our calculations are also basic, the TC is $$O(1)$$.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nOur SC is also $$O(1)$$ as we don\\'t have any variable sized containers.\\n\\n# Complete Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        if(hour==12)\\n         hour=0;\\n        double hourDegree=hour*5+(5*(minutes/60.00));\\n        double minDegree=minutes;\\n        double res=abs(hourDegree-minDegree)*6.00;\\n        return min(res,360.00-res);\\n    }\\n};\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/fe61a7ef-7c8d-4bcd-92b4-712cb72cbfee_1672094790.9694436.png)\\n\\nIf this helped you, please leave an upvote. Thanks. \\uD83D\\uDE0A\\uD83C\\uDF08",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nif(hour==12)\\n    hour=0;\\n```\n```\\ndouble hourDegree=hour*5+(5*(minutes/60.00));\\n```\n```\\ndouble minDegree=minutes;\\n```\n```\\ndouble res=abs(hourDegree-minDegree)*6.00;\\n```\n```\\nreturn min(res,360.00-res);\\n```\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        if(hour==12)\\n         hour=0;\\n        double hourDegree=hour*5+(5*(minutes/60.00));\\n        double minDegree=minutes;\\n        double res=abs(hourDegree-minDegree)*6.00;\\n        return min(res,360.00-res);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2658342,
                "title": "easy-java-implementation-with-explaination",
                "content": "Approach:\\n* In 12 hours , hour hand can do 360 degrees , so per hour hour hand will do 30 degrees.\\n* Similarly in 60 minutes, minute hand can do 360 degrees, so in 1 minute, the minute hand will do 6 degree rotation.\\n* Also keep in mind while the minute hand is moving the hour hand will move along with it. Like in 60 minutes , the hour hand rotates 30 degrees\\n* So per minute the hour hand rotates 0.5 degrees.\\n\\n* Now simply find the difference between the hour and minute hand store it in result.\\n* Now check whether result or 360 - result, which is smaller and return it as the result.\\n\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n         double angleHour = hour*30, angleMinutes = minutes*6;\\n        \\n        angleHour =angleHour + 0.5*(minutes);\\n        \\n        double res = Math.abs(angleHour - angleMinutes);\\n        \\n        return Math.min(res, 360-res);\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n         double angleHour = hour*30, angleMinutes = minutes*6;\\n        \\n        angleHour =angleHour + 0.5*(minutes);\\n        \\n        double res = Math.abs(angleHour - angleMinutes);\\n        \\n        return Math.min(res, 360-res);\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2450691,
                "title": "python-easy-code-with-comments",
                "content": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        #Angle traversal by hourhand\\n        hAngle = 30*(hour%12)\\n        \\n        #Angle traversal by minuteshand\\n        mAngle = 6*(minutes%60)\\n        \\n        #Extra traversal by hourhand based on minutes hand\\n        extraAngle = (minutes/60)*30\\n        \\n        hAngle+=extraAngle\\n        \\n        #Angle difference\\n        diff = abs(hAngle-mAngle)\\n        \\n        #Always prefer acute angle\\n        return min(diff,360-diff)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        #Angle traversal by hourhand\\n        hAngle = 30*(hour%12)\\n        \\n        #Angle traversal by minuteshand\\n        mAngle = 6*(minutes%60)\\n        \\n        #Extra traversal by hourhand based on minutes hand\\n        extraAngle = (minutes/60)*30\\n        \\n        hAngle+=extraAngle\\n        \\n        #Angle difference\\n        diff = abs(hAngle-mAngle)\\n        \\n        #Always prefer acute angle\\n        return min(diff,360-diff)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2424720,
                "title": "100",
                "content": "double angleClock(int ho, int min) {\\n        double x=0,y=0;\\n        if (ho==12)\\n        {\\n            ho=0;\\n        }\\n        x=ho*(30);\\n        x+=(min*0.5);\\n        y=(min*6);\\n        double ans;\\n        if (x>y)\\n        {\\n            ans= x-y;\\n        }\\n       else{\\n            ans= y-x;\\n       }\\n        \\n       \\n        if (ans>180)\\n        {\\n           return 360- ans;\\n        }\\n        return ans;\\n        \\n    }",
                "solutionTags": [],
                "code": "double angleClock(int ho, int min) {\\n        double x=0,y=0;\\n        if (ho==12)\\n        {\\n            ho=0;\\n        }\\n        x=ho*(30);\\n        x+=(min*0.5);\\n        y=(min*6);\\n        double ans;\\n        if (x>y)\\n        {\\n            ans= x-y;\\n        }\\n       else{\\n            ans= y-x;\\n       }\\n        \\n       \\n        if (ans>180)\\n        {\\n           return 360- ans;\\n        }\\n        return ans;\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2169417,
                "title": "python-1-liner-o-1",
                "content": "1. The minute hand will move `m_angle = 6*m` degrees.\\n2. The hour hand will move `h_angle = 30*h + 0.5*m` degrees.\\n3. `angle = abs(h_angle - m_angle)`\\n4. Answer is `min(angle,360-angle)`\\n```\\nclass Solution:\\n    def angleClock(self, h: int, m: int) -> float:\\n        return min(abs(6*m - (30*h + 0.5*m )), 360-abs(6*m - (30*h + 0.5*m )))\\n```",
                "solutionTags": [
                    "Python",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, h: int, m: int) -> float:\\n        return min(abs(6*m - (30*h + 0.5*m )), 360-abs(6*m - (30*h + 0.5*m )))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2007927,
                "title": "python-easy-solution-full-explanation",
                "content": "12 hours = 360 degree\\n1 hour = 30 degree \\n60 mins = 360 degree\\n1 min = 6 degree\\nso first we will calculate the degree for the minutes hand i.e., \\na=6 * minutes\\nnow we will calculate the dgree for the hour hand,\\nb=(hour+minutes/60) * 30 (minutes/60 is done so that we can get the exact position of the hour hand like what if it is between any hours (ex: 2 and 3 )\\nNow c=abs(a-b)\\nd=(360-c)\\nreturn min(c,d) (what if the degree between hands is coming low from the other side so taking the minimum of the both.\\nHere is the code,\\n \\n \\n\\t\\ta=minutes*6\\n        b=(hour+(minutes/60))*30\\n        c=abs(a-b)\\n        d=abs(360-c)\\n        return min(c,d)\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t\\t\\nUpvote it, if you like...",
                "solutionTags": [],
                "code": "12 hours = 360 degree\\n1 hour = 30 degree \\n60 mins = 360 degree\\n1 min = 6 degree\\nso first we will calculate the degree for the minutes hand i.e., \\na=6 * minutes\\nnow we will calculate the dgree for the hour hand,\\nb=(hour+minutes/60) * 30 (minutes/60 is done so that we can get the exact position of the hour hand like what if it is between any hours (ex: 2 and 3 )\\nNow c=abs(a-b)\\nd=(360-c)\\nreturn min(c,d) (what if the degree between hands is coming low from the other side so taking the minimum of the both.\\nHere is the code,\\n \\n \\n\\t\\ta=minutes*6\\n        b=(hour+(minutes/60))*30\\n        c=abs(a-b)\\n        d=abs(360-c)\\n        return min(c,d)\\n\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t\\t\\nUpvote it, if you like...",
                "codeTag": "Unknown"
            },
            {
                "id": 1911342,
                "title": "python-one-line-solution-based-on-aptitude-formula",
                "content": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        return min(abs(30*hour-5.5*minutes),360-abs(30*hour-5.5*minutes))\\n    \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        return min(abs(30*hour-5.5*minutes),360-abs(30*hour-5.5*minutes))\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1889556,
                "title": "python-easiest-to-understand-comments-clear-and-concise",
                "content": "**Solution**:\\n```\\nclass Solution:\\n    def angleClock(self, h, m):\\n        # Convert the hour hand to another minute hand\\n        m2 = (h%12 + m/60)*5\\n        \\n        # Calculate the difference between the two minute hands\\n        diff = abs(m-m2)\\n        \\n        # Convert the difference to an angle\\n        ang = diff*(360/60)\\n        \\n        # Return the smallest angle\\n        return min(360-ang, ang)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, h, m):\\n        # Convert the hour hand to another minute hand\\n        m2 = (h%12 + m/60)*5\\n        \\n        # Calculate the difference between the two minute hands\\n        diff = abs(m-m2)\\n        \\n        # Convert the difference to an angle\\n        ang = diff*(360/60)\\n        \\n        # Return the smallest angle\\n        return min(360-ang, ang)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1839139,
                "title": "java-easy-explanation-on-clock-angles",
                "content": "**Find A ( Angle of Hour Hand from start/origin/0 degree)**\\n\\n12 hours = 360 deg\\n1 hour = 30 deg\\n\\nalso 60 minutes = 30 deg\\n**1 min = 0.5 deg**\\n\\nIt means hour hand rotate by 0.5 degrees every minute\\n\\n**A = 30*Hours +  (0.5)Minutes**\\n\\n**30*Hours**  = Rotation of hour hand from start every hour ( as 1 hour = 30 deg , so n hours = 30*n ) \\n**0.5minutes** = Rotation of hour hand from start every minute  \\n\\n![image](https://assets.leetcode.com/users/images/270a4a24-6599-42d6-a689-6ebe75310994_1646986749.7168727.png)\\n\\n<br>\\n<hr>\\n<br>\\n\\n**Find B ( Angle of Minute Hand from start/origin/0 degree)**\\n\\n60 minutes = 360 deg\\n**1 min = 6 deg**\\n\\nIt means minute hand rotate by 6 degrees every minute\\n\\n**B = 6*minutes**\\n\\n![image](https://assets.leetcode.com/users/images/812d1093-311f-4ccf-9852-46e57ec9c475_1646986847.6751308.png)\\n\\n<br>\\n\\n**Difference of A and B will give us Angle Between Hands of a Clock**\\nAngle(C) = Math.abs(A-B)\\n\\n![image](https://assets.leetcode.com/users/images/ed6ca54f-97ab-45e1-bbf8-91a6b2ef238e_1646988496.2992537.png)\\n\\n<br>\\n<hr>\\n<br>\\n\\n**Java Code**\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n\\t\\t//Angle of Hour Hand from start\\n        double hourHand = 30*hour + (0.5)*minutes;\\n        \\n\\t\\t//Angle of Minute Hand from start\\n        double minHand = 6 * minutes;\\n        \\n        //Difference of A and B will give us Angle Between Hands of a Clock\\n        double angle = Math.abs(hourHand - minHand);\\n        \\n\\t\\t// to return the smaller angle formed between the hour and the minute hand.\\n        return angle > 180 ? 360 - angle : angle;\\n    }\\n}\\n```\\n\\n\\n\\n\\n\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n\\t\\t//Angle of Hour Hand from start\\n        double hourHand = 30*hour + (0.5)*minutes;\\n        \\n\\t\\t//Angle of Minute Hand from start\\n        double minHand = 6 * minutes;\\n        \\n        //Difference of A and B will give us Angle Between Hands of a Clock\\n        double angle = Math.abs(hourHand - minHand);\\n        \\n\\t\\t// to return the smaller angle formed between the hour and the minute hand.\\n        return angle > 180 ? 360 - angle : angle;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1758598,
                "title": "c-0ms-beats-100-soln",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n          return min( abs( (hour % 12 + minutes/60.0) * 30 - (minutes*6) ), 360 -  abs( (hour % 12 + minutes/60.0) * 30 - (minutes*6) ));\\n    }\\n};\\n\\n\\n\\n(hr % 12 + min/60 ) * 360/12 - min/60 * 360\\nformula for finding angle \\n\\nupvote if it was helpfull\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n          return min( abs( (hour % 12 + minutes/60.0) * 30 - (minutes*6) ), 360 -  abs( (hour % 12 + minutes/60.0) * 30 - (minutes*6) ));\\n    }\\n};\\n\\n\\n\\n(hr % 12 + min/60 ) * 360/12 - min/60 * 360\\nformula for finding angle \\n\\nupvote if it was helpfull\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1687385,
                "title": "c-simple-math-solution-2-lines-0ms",
                "content": "It is a simple conversion question.\\nThe angle between hour and minute hand = angle from 12 o\\'clock to hour hand - angle from 12 o\\'clock to minutes hand\\n\\nangle from 12 o\\'clock to hour hand = ((5*hour + (minutes/60)*5))/60)*360 [because hour hand will be slightly moved in clockwise direction because of minutes passed and also converting to degrees]\\n\\nangle from 12 o\\'clock to minutes hand = (minutes/60)*360\\n\\nOn simplification we get,\\nangle between hour hand and minutes hand = 30*hour - 5.5*minutes\\n\\nBecause we should take the smaller angle, we use the min function to find the minimum of (angle, 360 - angle)\\n\\nNOTE: The result angle could be negative so we take the absolute value\\n\\n ```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double ans = abs(30*hour - (5.5*minutes));\\n        return min(ans, 360-ans);\\n    }\\n};\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double ans = abs(30*hour - (5.5*minutes));\\n        return min(ans, 360-ans);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1323801,
                "title": "100-c-0ms-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(nullptr);\\n        \\n        if(hour == 12) hour = 0;\\n        double a = ((hour)*30.0 + (minutes)*0.5);\\n        double b = (minutes)*6.0;\\n        \\n        return abs(a-b)>180.0 ? 360.0-abs(a-b) : abs(a-b);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(nullptr);\\n        \\n        if(hour == 12) hour = 0;\\n        double a = ((hour)*30.0 + (minutes)*0.5);\\n        double b = (minutes)*6.0;\\n        \\n        return abs(a-b)>180.0 ? 360.0-abs(a-b) : abs(a-b);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1281213,
                "title": "easy-c-100-faster-o-1-space-commented",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        //get the degree of minutes and hours from the 12 (pointing at 12)\\n        \\n        double  minDegree=(minutes* 6);\\n        //30 degree gap in between each hour\\n        double hourDegree=(hour==12) ? 0 : hour*30;\\n        //some degree are gonna add to hour because of the minute hand\\n        //for x minutes the hour degree moves (1/2)*x \\n\\t\\t//ex x= 30 min (pointing at 6 ) and hour is at 12 , then the hour hand moves a extra of (1/2) * 30 = 15 degrees ahead\\n        hourDegree+= (double)(minutes)/2;\\n        \\n\\t\\t//get the angle in degrees between them\\n        double angle=abs(minDegree-hourDegree);\\n        \\n        //there are two possibles angles \\n        return min(angle,360-angle);\\n    }\\n};\\n```\\n**Please upvote if this helps you :)**",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        //get the degree of minutes and hours from the 12 (pointing at 12)\\n        \\n        double  minDegree=(minutes* 6);\\n        //30 degree gap in between each hour\\n        double hourDegree=(hour==12) ? 0 : hour*30;\\n        //some degree are gonna add to hour because of the minute hand\\n        //for x minutes the hour degree moves (1/2)*x \\n\\t\\t//ex x= 30 min (pointing at 6 ) and hour is at 12 , then the hour hand moves a extra of (1/2) * 30 = 15 degrees ahead\\n        hourDegree+= (double)(minutes)/2;\\n        \\n\\t\\t//get the angle in degrees between them\\n        double angle=abs(minDegree-hourDegree);\\n        \\n        //there are two possibles angles \\n        return min(angle,360-angle);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 896674,
                "title": "python-3-simple-faster-than-72-33-and-memort-less-than-100",
                "content": "I didn\\'t think that this is gonna work, but here it is, scoring a perfect memory score. I will first show you the code, and then explain it to you. \\n```\\ndef main(hour, minutes):\\n    minutesAngle = minutes * 6\\n    hourAngle = (((hour % 12) * 30) + ((minutes / 60) * 30))\\n    angle = abs(hourAngle - minutesAngle)\\n    return min(angle, 360 - angle)\\n```\\n\\n\\nFirst of all, we measure the angle at which, minute hand will be. Now, there are 60 minutes and 360 degress, thus, 1 minute is (360 / 60) 6 degrees. \\nhourAngle depends on hour hand, as well has the minutes hand. First of all, every hour except 12 add 30 degrees. Thus, we used modulo. Then, if it is one hour and 60 minutes, its basically two hours. Therefore, to calculate the additional angle, we divide the minutes by 60, and then multiply by 30. You can directly divide by 2, but I felt that is more intuitive. \\nThen, we calculate the difference between minute and hour angle and to return minimum, we return minimum between angle and 360 - angle.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef main(hour, minutes):\\n    minutesAngle = minutes * 6\\n    hourAngle = (((hour % 12) * 30) + ((minutes / 60) * 30))\\n    angle = abs(hourAngle - minutesAngle)\\n    return min(angle, 360 - angle)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 820584,
                "title": "javascript-with-detailed-explanation",
                "content": "Idea: Consider 12pm to be degree `0`. Then calculate the degrees of hour hand and minute hand. Return the difference.\\n\\nFor example: `03:30pm`\\n```\\nminute hand: (30 / 60) * 360 = 180\\nmeaning 30 of 60 minutes takes half of a circle (360 degrees)\\n\\nhour hand: (3 * 360 / 12) + (30 / 60 * 360 / 12) = 105\\nmeaning 3 hours take 3 hour sectors (360 / 12) and 30 of 60 minutes takes half of a hour sector (360 / 12)\\n\\n180 - 105 = 75, the answer\\n```\\n\\n##### Javascript\\n```javascript\\nvar angleClock = function(hour, minutes) {\\n    const minuteAngle = minutes / 60 * 360;\\n    const hourAngle = (hour % 12 + minutes / 60 ) * 360 / 12;\\n    let ans = Math.abs(minuteAngle - hourAngle);\\n    return ans >= 180 ? 360 - ans : ans;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nminute hand: (30 / 60) * 360 = 180\\nmeaning 30 of 60 minutes takes half of a circle (360 degrees)\\n\\nhour hand: (3 * 360 / 12) + (30 / 60 * 360 / 12) = 105\\nmeaning 3 hours take 3 hour sectors (360 / 12) and 30 of 60 minutes takes half of a hour sector (360 / 12)\\n\\n180 - 105 = 75, the answer\\n```\n```javascript\\nvar angleClock = function(hour, minutes) {\\n    const minuteAngle = minutes / 60 * 360;\\n    const hourAngle = (hour % 12 + minutes / 60 ) * 360 / 12;\\n    let ans = Math.abs(minuteAngle - hourAngle);\\n    return ans >= 180 ? 360 - ans : ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 736348,
                "title": "java-3-line-simple-ans-o-1-time-with-explanation",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        // Find angle made by minute hand\\n        double min = 6.0*minutes;\\n\\t\\t// Find andgle made by hour hand\\n        double hr = 30.0*(hour%12) + 0.5*minutes;\\n        \\n\\t\\t// Return the difference between both hands (We need smaller angle that\\'s why did Math.min())\\n        return Math.min(360.0-Math.abs(min - hr), Math.abs(min - hr));\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public double angleClock(int hour, int minutes) {\\n        // Find angle made by minute hand\\n        double min = 6.0*minutes;\\n\\t\\t// Find andgle made by hour hand\\n        double hr = 30.0*(hour%12) + 0.5*minutes;\\n        \\n\\t\\t// Return the difference between both hands (We need smaller angle that\\'s why did Math.min())\\n        return Math.min(360.0-Math.abs(min - hr), Math.abs(min - hr));\\n        \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 736322,
                "title": "python-o-1-o-1",
                "content": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        hr_pos = (hour%12)*5 + (minutes/60)*5\\n\\t\\tdiff_angle = abs(minutes - hr_pos) * 6\\n\\n        if diff_angle > 180:\\n            return 360-diff_angle\\n\\n        return diff_angle\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        hr_pos = (hour%12)*5 + (minutes/60)*5\\n\\t\\tdiff_angle = abs(minutes - hr_pos) * 6\\n\\n        if diff_angle > 180:\\n            return 360-diff_angle\\n\\n        return diff_angle\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 736234,
                "title": "java-o-1-0ms-2-line-solution",
                "content": "**Implementation**\\n```\\npublic double angleClock(int h, int m) {\\n        double theta = Math.abs(30 * h - 5.5 * m);        \\n        return (theta > 180) ? 360 - theta : theta;\\n    }\\n```\\n**Logic**\\nWe need to calculate the difference of angle swept by both hands from *any arbitrary position* to the current position. This will be one of the two angles, using this we can  obtain the result.\\n\\nFor simple understanding lets consider **12:00** as *arbitrary position*. This is one of the position where both hands are overlapping (angle b/w both hands is zero) hence, difference between the two swept angles will give us one of the angles between hour hand and minute hand.\\n\\nNow we can arrive to the solution by following below steps:\\n1. Calculate the angle swept by both hands(\\u2220Hour and \\u2220Minute). Angle swept by any hand can be calculated by considering the fact that Clock can be divided into:\\n* 12 sectors of (360/12=) **30 degrees** for calculating \\u2220Hour,\\n* 60 sectors of (360/60=) **6 degrees** for calculating \\u2220Minute and \\u2220Hour\\n* Hour hand also moves every minute by **(30 / 60) = 0.5 degrees** Hence in *m* minutes it will move by  **(30 *  m / 60) degrees**\\n```\\n    angleH = 30 * (h + m / 60F);  // i.e. (30 * h) + (30 * m / 60)\\n    angleM = 6 * m; // i.e. 360 * m / 60\\n```\\n\\n2. Find the absolute difference between swept angles i.e. (say) **\\u03B8 = |\\u2220Hour - \\u2220Minute|**.\\n*\\u03B8* and *360 - \\u03B8* as the two angles between both hand.\\n```\\n    theta = Math.abs(angleH - angleM);\\n````\\n3. Find the smaller angle between *\\u03B8* and *360 - \\u03B8*. **Result = min(\\u03B8, 360-\\u03B8)**\\n```\\n    return Math.min(theta, 360-theta); \\n```\\nNote: Implementation has simplified expression for ```\\u03B8``` (or ```theta```)\\n\\n![image](https://assets.leetcode.com/users/images/b0a42dbc-f3dc-4e4f-a322-92075a59c9aa_1594890188.0851424.png)\\n\\n\\n\\n     \\n",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\npublic double angleClock(int h, int m) {\\n        double theta = Math.abs(30 * h - 5.5 * m);        \\n        return (theta > 180) ? 360 - theta : theta;\\n    }\\n```\n```\\n    angleH = 30 * (h + m / 60F);  // i.e. (30 * h) + (30 * m / 60)\\n    angleM = 6 * m; // i.e. 360 * m / 60\\n```\n```\\n    theta = Math.abs(angleH - angleM);\\n```\n```\\n    return Math.min(theta, 360-theta); \\n```\n```\\u03B8```\n```theta```",
                "codeTag": "Unknown"
            },
            {
                "id": 632493,
                "title": "java-0ms-beats-100-space-and-time-with-full-explanation",
                "content": "1. The Hour hand moves 30 (360/12) degrees every hour and 1/2 (30/60) a degree every minute.\\n2. The Minute hand moves 6 (360/60) degrees every minute.\\n3. Therefore the total movement of hand hour is : hours  30 + minutes  0.5 or total number of minutes  0.5 which is  : (hour60+minutes)0.5 \\n4. The total movement of minute hour is : minutes  6.\\n5. Now get the difference between both the movements and get the absolute value of it (as angle cannot the negative here).\\n6. Now if the resulting angle comes to be more than 180 degrees then return 360-angle as the answer as the answer requires the smaller angle.\\n\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double angle=Math.abs((hour*60+minutes)*0.5-minutes*6);\\n        return angle>180.0?360.0-angle:angle;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double angle=Math.abs((hour*60+minutes)*0.5-minutes*6);\\n        return angle>180.0?360.0-angle:angle;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 630465,
                "title": "java-100-runtime-o-1-and-100-space-2-lines",
                "content": "\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n\\t\\n        double angel = Math.abs((hour + (minutes/60.0))-(minutes/5.0))*30;       \\n        return (angel<=180)? angel : 360-angel;\\n\\t\\t\\n    }\\n}\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public double angleClock(int hour, int minutes) {\\n\\t\\n        double angel = Math.abs((hour + (minutes/60.0))-(minutes/5.0))*30;       \\n        return (angel<=180)? angel : 360-angel;\\n\\t\\t\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 620444,
                "title": "c-6-lines-simple-maths-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n\\t//Distance travelled by hour hand with a speed of 0.5 degree per minute\\n        double hd=m*0.5;\\n\\t//Distance travelled by minute hand with a speed of 6 degree per minute\\n        double md=m*6;\\n\\t//Assuming the minute hand to be initially at 12, the difference will be hour*5*6\\n        double ex=h*5*6;\\n        if(h==12)ex=0;\\n\\t//The actual difference between thehour and minute hand\\n        double ans=abs(md-hd-ex);\\n        return (min(ans,360-ans));\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n\\t//Distance travelled by hour hand with a speed of 0.5 degree per minute\\n        double hd=m*0.5;\\n\\t//Distance travelled by minute hand with a speed of 6 degree per minute\\n        double md=m*6;\\n\\t//Assuming the minute hand to be initially at 12, the difference will be hour*5*6\\n        double ex=h*5*6;\\n        if(h==12)ex=0;\\n\\t//The actual difference between thehour and minute hand\\n        double ans=abs(md-hd-ex);\\n        return (min(ans,360-ans));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 504101,
                "title": "python-3-math-line-by-line-explanation-16ms-beats-100",
                "content": "```py\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        m = minutes * 6     # Scale up minutes [0, 360): 360/60 = 6\\n        h = (hour%12) * 30  # Hours to [0, 12), then scale up to [0, 360): 360/12 = 30\\n        h += m / 12         # Adjust hour hand: full rotation of minute hand moves hour hand 1/12th of the circle\\n        angle = abs(m - h)  # Get rid of the smallest hand by adjusting it to 0. This moves the largest to -smallest\\n        return angle if angle < 180 else 360 - angle  # Return the smaller angle\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```py\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        m = minutes * 6     # Scale up minutes [0, 360): 360/60 = 6\\n        h = (hour%12) * 30  # Hours to [0, 12), then scale up to [0, 360): 360/12 = 30\\n        h += m / 12         # Adjust hour hand: full rotation of minute hand moves hour hand 1/12th of the circle\\n        angle = abs(m - h)  # Get rid of the smallest hand by adjusting it to 0. This moves the largest to -smallest\\n        return angle if angle < 180 else 360 - angle  # Return the smaller angle\\n```",
                "codeTag": "Java"
            },
            {
                "id": 502773,
                "title": "java-4-liner",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double ans = (Math.abs(hour * 5 - minutes)) * 6.0;\\n        if(hour * 5 >= minutes) ans += (1.0 * minutes) / (2.0);\\n        else ans -= (1.0 * minutes) / (2.0);\\n        return Math.abs(Math.min(ans, 360 * 1.0 - ans));\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double ans = (Math.abs(hour * 5 - minutes)) * 6.0;\\n        if(hour * 5 >= minutes) ans += (1.0 * minutes) / (2.0);\\n        else ans -= (1.0 * minutes) / (2.0);\\n        return Math.abs(Math.min(ans, 360 * 1.0 - ans));\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 4008455,
                "title": "simple-arithmetics-used",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        int totalMinutes=hour*60+minutes;\\n     double hourAngle=totalMinutes*0.5;\\n     double minuteAngle=minutes*6;\\n     if(hourAngle>=360)\\n     hourAngle=hourAngle-360;\\ndouble ans=Math.abs(minuteAngle-hourAngle);\\nif(ans>180.00)\\nans=360.00-ans;\\nreturn ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        int totalMinutes=hour*60+minutes;\\n     double hourAngle=totalMinutes*0.5;\\n     double minuteAngle=minutes*6;\\n     if(hourAngle>=360)\\n     hourAngle=hourAngle-360;\\ndouble ans=Math.abs(minuteAngle-hourAngle);\\nif(ans>180.00)\\nans=360.00-ans;\\nreturn ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3855754,
                "title": "simple-aptitude-o-1-in-time-and-space",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$ \\n\\n- Space complexity: $$O(1)$$ \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double minuteAngle = minutes*6, hourAngle = (hour*30 + minutes/2.0);\\n        if(hourAngle > 360) hourAngle -= 360;\\n\\n       double angle = abs(minuteAngle - hourAngle); //take the difference of angle swept by hour hand and minute hand\\n       return min(angle,360 - angle); //return acute angle\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double minuteAngle = minutes*6, hourAngle = (hour*30 + minutes/2.0);\\n        if(hourAngle > 360) hourAngle -= 360;\\n\\n       double angle = abs(minuteAngle - hourAngle); //take the difference of angle swept by hour hand and minute hand\\n       return min(angle,360 - angle); //return acute angle\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3762671,
                "title": "solution-python",
                "content": "# Intuition\\n- This is a tricky problem, here any `division` of whole `whole` numbers will be evealuated to `floor` division. \\n*In Python 2.x, the division of two integers returns an integer result (floor division) instead of a float.*\\nMaybe the author wanted to pay respect or whatever.\\nSo:\\n    - You can try `return 1 / 2 ` and see `0` \\n    - That\\'s why you need to divide by a `float` number\\n\\n\\n\\n- Also,  the function `abs` Returns the absolute value of the argument.\\n\\n# Detailed Code\\n```\\nclass Solution(object):\\n    def angleClock(self, hour, minutes):\\n        \"\"\"\\n        1 hour = 30\\n        1 minute = 6\\n        \"\"\"\\n        if hour == 12:\\n            hour = 0\\n        hand_one_angle = hour * 30 + (minutes / 2.0)\\n\\n        hand_two_angle = minutes * 6\\n\\n        angle = hand_one_angle - hand_two_angle\\n        angle = abs(angle)  \\n\\n        return angle if angle <= 180 else 360 - angle\\n```\\n# Short code\\n```\\nclass Solution(object):\\n    def angleClock(self, hour, minutes):\\n        if hour == 12:\\n            hour = 0\\n\\n        angle = abs(hour * 30 + (minutes / 2.0) - minutes * 6)\\n        return angle if angle <= 180 else 360 - angle\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def angleClock(self, hour, minutes):\\n        \"\"\"\\n        1 hour = 30\\n        1 minute = 6\\n        \"\"\"\\n        if hour == 12:\\n            hour = 0\\n        hand_one_angle = hour * 30 + (minutes / 2.0)\\n\\n        hand_two_angle = minutes * 6\\n\\n        angle = hand_one_angle - hand_two_angle\\n        angle = abs(angle)  \\n\\n        return angle if angle <= 180 else 360 - angle\\n```\n```\\nclass Solution(object):\\n    def angleClock(self, hour, minutes):\\n        if hour == 12:\\n            hour = 0\\n\\n        angle = abs(hour * 30 + (minutes / 2.0) - minutes * 6)\\n        return angle if angle <= 180 else 360 - angle\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3759900,
                "title": "simple-math",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double min=minutes;\\n        double hr=hour;\\n//taking 12 as reference, hr*30 is the angle rotated by hour hand,min*6 is angle rotated by minute hand and when minute hand rotates by 6deg, hour hand rotates by 0.5deg in same sence...can be proven.\\n        double deg=abs(hr*30-min*6+min/2);\\n        if(deg>180){\\n            deg=360-deg;\\n        }\\n        return deg;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double min=minutes;\\n        double hr=hour;\\n//taking 12 as reference, hr*30 is the angle rotated by hour hand,min*6 is angle rotated by minute hand and when minute hand rotates by 6deg, hour hand rotates by 0.5deg in same sence...can be proven.\\n        double deg=abs(hr*30-min*6+min/2);\\n        if(deg>180){\\n            deg=360-deg;\\n        }\\n        return deg;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3655543,
                "title": "simple-and-easy-c-solution-t-n-o-1",
                "content": "# Intuition\\nJust have to figure out how the angles of the hands of the clocks are changing.So,\\n\\nthe minute hand of the clock moves 360 degree in one hour(60 min) which means (360/60)= 6 degree in a minute, using this you can find out the angle of minutes hand.\\n\\nThe hour hand of the clock moves 360 degree in 12 hours(12x60 min) which means (360/(12x60)) =0.5 degree in a minute. Then you calculate angle of hour hand by adding the angle changed by the hour hand by minutes passed in that hour plus the angle it already had at the hour time like 5 O\\'clock or 3 O\\'clock (you can calulate by looking at the hour and multiply it by 30 as every 5 min where the notation for hour is given is 30 degree).\\n\\n# Approach\\nminute_hand_angle= 6* minutes\\n\\nhour_hand_angle=(0.5*minutes) + (hour%12)*30\\n\\nreturn the difference between the angles.     \\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double ma=minutes*6,ha=(0.5*minutes)+((hour%12)*30);\\n        return min(abs(ma-ha),360-abs(ma-ha));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double ma=minutes*6,ha=(0.5*minutes)+((hour%12)*30);\\n        return min(abs(ma-ha),360-abs(ma-ha));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3549353,
                "title": "c-3-line-solution-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        int dom = minutes*6;\\n        double doh = hour*30 + minutes*0.5;\\n        return min(abs(doh-dom) , 360-abs(doh-dom));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        int dom = minutes*6;\\n        double doh = hour*30 + minutes*0.5;\\n        return min(abs(doh-dom) , 360-abs(doh-dom));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3511956,
                "title": "easy-mathematical-solution-in-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nhour hand covers 30 degree in 60 mins and minute hand covers 360 degree in 60 minutes\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\ntaking 12 as 0 degree\\n\\nhour hand position in degree = initial postion + minutes * speed;\\nspeed of hour hand = 0.5 degree per minute\\nminute hand position in degree = initial position + minutes * speed;\\nspeed of minute hand = 6 degree per minute\\n# Complexity\\n- Time complexity:$$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        hour = hour % 12;\\n\\n        double h_moves = hour * 30.0 + minutes * 0.5;\\n        double m_moves = 0.0 + minutes * 6.0;\\n\\n        double a1 = abs(m_moves - h_moves);\\n\\n        return min(a1, 360.0 - a1);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        hour = hour % 12;\\n\\n        double h_moves = hour * 30.0 + minutes * 0.5;\\n        double m_moves = 0.0 + minutes * 6.0;\\n\\n        double a1 = abs(m_moves - h_moves);\\n\\n        return min(a1, 360.0 - a1);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2995635,
                "title": "easy-c-solution-o-1-time-complexity",
                "content": "# Approach\\n1) Initialize two doubles hour1 and minutes1\\n2) hour1 is the distance of hour clock from 12 and minutes1 is the distance of the minute clock from 12\\n3) We then calculate the absolute difference between the distances and multiply it with 360/no of partitions(12) i.e. 30 and that will give us the angle between hour hand and minute hand\\n4) .\\n    ->If the result is less than 180 i.e. acute then it is the smaller angle and so we return the result\\n    ->If the result is more than 180 i.e. obtuse then it is the larger angle and so we return the smaller angle which will be 180-result\\n\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hour1 =hour%12+ minutes/60.0;\\n        double minutes1 =(minutes/60.0)*12;\\n        double result =abs(hour1-minutes1)*30.0;\\n        if(result<=180)return result;\\n        else return 360.0-result;\\n    }\\n};\\n//Upvote the answer if it was helpful ..Thank You\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hour1 =hour%12+ minutes/60.0;\\n        double minutes1 =(minutes/60.0)*12;\\n        double result =abs(hour1-minutes1)*30.0;\\n        if(result<=180)return result;\\n        else return 360.0-result;\\n    }\\n};\\n//Upvote the answer if it was helpful ..Thank You\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2879501,
                "title": "basic-math-solution",
                "content": "\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n        double mAngle= m*6;\\n        double a=mAngle/12;\\n        if(h==12)\\n            h=0;\\n        double hAngle=((h*5*6)+a);\\n        double ans=max(mAngle,hAngle)-min(mAngle,hAngle);\\n        double temp=360-ans;\\n        return min(ans,temp);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n        double mAngle= m*6;\\n        double a=mAngle/12;\\n        if(h==12)\\n            h=0;\\n        double hAngle=((h*5*6)+a);\\n        double ans=max(mAngle,hAngle)-min(mAngle,hAngle);\\n        double temp=360-ans;\\n        return min(ans,temp);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2872418,
                "title": "o-1-space-and-time-solution-c-using-formula",
                "content": "# Approach\\nAngle = [(11/2)M-30H]\\nif it is greater than 180 return it after subtracting from 360.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:<b>$$O(1)$$</b>\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        if(hour==12)hour=0;\\n        double x=abs((60*hour)-(11*minutes));\\n        if(x/2<=180)\\n        return (x/2);\\n        else\\n            return 360-(x/2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        if(hour==12)hour=0;\\n        double x=abs((60*hour)-(11*minutes));\\n        if(x/2<=180)\\n        return (x/2);\\n        else\\n            return 360-(x/2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2813551,
                "title": "c-easy-solution-0ms-100-fast-with-comments",
                "content": "```\\ndouble angleClock(int hour, int minutes){\\n    double maffhr=(double)minutes*30/60; //calculating the angle by which the hour hand is affected due to the minutes hand\\n    double hrangle=(double)hour*30+maffhr; //calculating the angle made by hour hand with 12\\n    double miangle=(double)minutes*30/5; //calculating the angle made by minutes hand with 12\\n    double ang=fabs(hrangle-miangle); //calculating the angle difference between the hour and minutes hand\\n    return fmin(ang,360-ang); //returns the minimum angle as been told in the description\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\ndouble angleClock(int hour, int minutes){\\n    double maffhr=(double)minutes*30/60; //calculating the angle by which the hour hand is affected due to the minutes hand\\n    double hrangle=(double)hour*30+maffhr; //calculating the angle made by hour hand with 12\\n    double miangle=(double)minutes*30/5; //calculating the angle made by minutes hand with 12\\n    double ang=fabs(hrangle-miangle); //calculating the angle difference between the hour and minutes hand\\n    return fmin(ang,360-ang); //returns the minimum angle as been told in the description\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2769436,
                "title": "c-one-liner-formula-based",
                "content": "Formula for angle between Minute and Hour hand of a clock = 11/2 * minutes - 30 * hour\\n```\\nclass Solution\\n{\\n    public:\\n        double angleClock(int hour, int minutes){\\n            return min(abs((11 / 2.0) *minutes - 30 *hour), 360 - abs((11 / 2.0) *minutes - 30 *hour));\\n        }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution\\n{\\n    public:\\n        double angleClock(int hour, int minutes){\\n            return min(abs((11 / 2.0) *minutes - 30 *hour), 360 - abs((11 / 2.0) *minutes - 30 *hour));\\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2666246,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double hourDegree = (hour*30) + (minutes*0.5);\\n        double minuteDegree = (minutes*6);\\n        double angleBetween = Math.abs(hourDegree - minuteDegree);\\n        return Math.min(angleBetween, 360-angleBetween);\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double hourDegree = (hour*30) + (minutes*0.5);\\n        double minuteDegree = (minutes*6);\\n        double angleBetween = Math.abs(hourDegree - minuteDegree);\\n        return Math.min(angleBetween, 360-angleBetween);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2632938,
                "title": "c-100-faster-than-all-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double minDegree=6*minutes;\\n        if(hour==12)\\n            hour=0;\\n        double hourDegree=double(hour+minutes/60.0)*30;\\n        double angle1=abs(minDegree-hourDegree);\\n        double angle2=360-angle1;\\n        return min(angle1,angle2);\\n    }\\n};\\n",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double minDegree=6*minutes;\\n        if(hour==12)\\n            hour=0;\\n        double hourDegree=double(hour+minutes/60.0)*30;\\n        double angle1=abs(minDegree-hourDegree);\\n        double angle2=360-angle1;\\n        return min(angle1,angle2);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2593806,
                "title": "c-simple-100-0ms-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double t=30*hour;\\n        double t1=5.5*minutes;\\n        double ans=t-t1;\\n        if(ans<0) ans*=-1;\\n        if(ans>180) ans=360-ans;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double t=30*hour;\\n        double t1=5.5*minutes;\\n        double ans=t-t1;\\n        if(ans<0) ans*=-1;\\n        if(ans>180) ans=360-ans;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2548929,
                "title": "1344-angle-between-hands-of-a-clock-in-java-time-o-1-space-o-1",
                "content": "class Solution {\\n  public double angleClock(int hour, int minutes) {\\n    final double hourHand = (hour % 12 + minutes / 60.0) * 30;\\n    final double minuteHand = minutes * 6;\\n    final double diff = Math.abs(hourHand - minuteHand);\\n    return Math.min(diff, 360 - diff);\\n  }\\n}\\n",
                "solutionTags": [
                    "Math"
                ],
                "code": "class Solution {\\n  public double angleClock(int hour, int minutes) {\\n    final double hourHand = (hour % 12 + minutes / 60.0) * 30;\\n    final double minuteHand = minutes * 6;\\n    final double diff = Math.abs(hourHand - minuteHand);\\n    return Math.min(diff, 360 - diff);\\n  }",
                "codeTag": "Java"
            },
            {
                "id": 2546912,
                "title": "java-100-fastest-method-with-simple-math",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double anglePerHour = 30;\\n        double anglePerMin = 6;\\n        \\n        double diffHour = Math.abs(minutes / 5.0 - hour) * anglePerHour;\\n        double diffMin = (minutes / 60.0) * 5 * anglePerMin;\\n        \\n        double cwdiff = 0;\\n        //if minute hand is before hour hand;\\n        if(minutes / 5 - hour < 0){\\n            cwdiff = diffHour + diffMin;\\n        }\\n        \\n        //if minute hand is after hour hand;\\n        else{\\n            cwdiff = Math.abs(diffHour - diffMin);\\n        }\\n        \\n        double ccwdiff = 360 - cwdiff;\\n        return Math.min(cwdiff, ccwdiff);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double anglePerHour = 30;\\n        double anglePerMin = 6;\\n        \\n        double diffHour = Math.abs(minutes / 5.0 - hour) * anglePerHour;\\n        double diffMin = (minutes / 60.0) * 5 * anglePerMin;\\n        \\n        double cwdiff = 0;\\n        //if minute hand is before hour hand;\\n        if(minutes / 5 - hour < 0){\\n            cwdiff = diffHour + diffMin;\\n        }\\n        \\n        //if minute hand is after hour hand;\\n        else{\\n            cwdiff = Math.abs(diffHour - diffMin);\\n        }\\n        \\n        double ccwdiff = 360 - cwdiff;\\n        return Math.min(cwdiff, ccwdiff);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2387730,
                "title": "c-solution-math",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double ans = abs((30 * hour) - (5.5 * minutes));\\n        return min(ans, 360-ans);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double ans = abs((30 * hour) - (5.5 * minutes));\\n        return min(ans, 360-ans);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2383792,
                "title": "beginner-friendly-explanation-and-solution-java-0-ms",
                "content": "# Approach\\nImagine the clock as a circle, and then think through this:\\n- one complete rotation around the circle is 360 degrees\\n- the clock (circle) is divided into 12 labels (hours from 1 through 12)\\n- what is the angle between two consecutive labels? 360 / 12 = 30\\n- - another way to think this is the opposite way: if 30 is added 12 times it makes 360!\\n\\nMoving forward\\n- observe that when needle shows 5 minutes, it is physically at label 1. For 15 minutes it is at label 3, for 45 at label 9.\\n- - the above fact can be represented as `min / 5 = label`\\n\\nWhy the above stuff?\\nImage it\\'s 12:30 on the clock, so hour label is obviously 12. What about the minute label? 30 / 5 = 6. So, 12 to 6. What\\'s the difference: 12 - 6 = 6. In other words, the clock shows two needles which have covered 6 consecutive labels from hour label to minute label. What is the angle between these labels: 6 * 30 = 180. **(Not exactly, as explained below - but undertanding like this will make it easier to get to the tricky part)**\\n\\n# **Tricky part**\\nOur assumptions in the above walkthrough have kept the hour needle constant. That is, we assume that the hour needle **does not** move from its position and just jumps to next label when an hour passes. \\uD83D\\uDE27 This is not the case:\\n- observe that as the minute needle moves through, the hour needle slowly moves too.\\n- as 60 minutes pass, the hour needle slowly progresses to the next hour\\n\\nIf you observe the images in the problem description tab, there are 3 images of clocks. Take, for example, the clock with 12:30. Observe that the hour needle is not exactly at 12. Its **halfway** through 12 and 1.\\n- when the minutes needle is at 30, hour needle moves *halfway or 50% or 0.5* to the next hour\\n- when the minutes needle is at 15, hour neendle moves to 25% or 0.25 to the next hour\\n\\nThis can be represented mathematically as `minutes / 60`\\n>30 / 60 = 0.50\\\\\\n>45 / 60 = 0.75\\n>60 / 60 = 1.00\\n>15 / 60 = 0.25\\n>23 / 60 = 0.38\\n\\nSo, we have to keep in mind this displacement of hour needle as well and add it to the original hour needle position.\\n\\n## Another tricky bit\\n*(This one kept me scratching my head for 20 minutes - It shouldnt have but still...)*\\n\\nNote that two needles in a clock can be at 180 degrees at max, not beyond that. So, if the calculated angle becomes greater than 180, just subtract it from 360.\\n\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n\\n        double minToHLabel = minutes / 5.0;\\n  \\n        double disp = (double) 1/60 * minutes;\\n        \\n        double diff = (hour + disp) - minToHLabel;\\n        \\n\\t\\t// absolute difference (Math.abs can be used aswell) \\n        if (diff < 0){\\n            diff = diff * - 1;\\n        }\\n        \\n\\t\\t// if the calculated angle is greater than 180, return after subtracting from 360\\n        if (diff * 30 > 180){\\n            return 360 - diff * 30;\\n        }\\n        else {\\n            return diff * 30;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n\\n        double minToHLabel = minutes / 5.0;\\n  \\n        double disp = (double) 1/60 * minutes;\\n        \\n        double diff = (hour + disp) - minToHLabel;\\n        \\n\\t\\t// absolute difference (Math.abs can be used aswell) \\n        if (diff < 0){\\n            diff = diff * - 1;\\n        }\\n        \\n\\t\\t// if the calculated angle is greater than 180, return after subtracting from 360\\n        if (diff * 30 > 180){\\n            return 360 - diff * 30;\\n        }\\n        else {\\n            return diff * 30;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2368840,
                "title": "c-o-1-solution-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hr=30*hour+(0.5*minutes);\\n        hr=hr>=360?hr-360:hr;\\n        double m=6*minutes;\\n        if(m>hr)\\n        return m-hr<hr+(360-m)?m-hr:hr+(360-m);\\n        return hr-m<(360-hr)+m?hr-m:(360-hr)+m;\\n    }\\n};\\n```\\nAs we know \\n**One hour** = 30 degress + 0.5 * Minutes.\\n**One Minute** = 6 degress.\\nNow we apply simple mathematic formula to yield the result.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hr=30*hour+(0.5*minutes);\\n        hr=hr>=360?hr-360:hr;\\n        double m=6*minutes;\\n        if(m>hr)\\n        return m-hr<hr+(360-m)?m-hr:hr+(360-m);\\n        return hr-m<(360-hr)+m?hr-m:(360-hr)+m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2306119,
                "title": "on-line-or-two-lines-python",
                "content": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        x = abs(minutes * 6 -(hour * 30 + minutes/2))\\n        return min(360-x , x)\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        x = abs(minutes * 6 -(hour * 30 + minutes/2))\\n        return min(360-x , x)\\n",
                "codeTag": "Java"
            },
            {
                "id": 2258116,
                "title": "3-o-1-time-o-1-space-illustrated-explanation",
                "content": "![image](https://assets.leetcode.com/users/images/97c6441b-71ae-4045-b52c-69c5f97894c3_1657362262.4013243.png)\\n\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \"\"\" O(1)TS \"\"\"\\n        h = 360 / 12 * (hour + minutes / 60)\\n        m = 360 / 60 * minutes\\n        return min(a := abs(h - m), 360 - a)\\n\\t\\t\\n\\t\\t\\n![image](https://assets.leetcode.com/users/images/ab16870a-4834-444f-936c-5c071d410f3c_1657362277.5164502.png)\\n\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \"\"\" O(1)TS \"\"\"\\n        return min(a := abs(30 * hour - 5.5 * minutes), 360 - a)",
                "solutionTags": [],
                "code": "![image](https://assets.leetcode.com/users/images/97c6441b-71ae-4045-b52c-69c5f97894c3_1657362262.4013243.png)\\n\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \"\"\" O(1)TS \"\"\"\\n        h = 360 / 12 * (hour + minutes / 60)\\n        m = 360 / 60 * minutes\\n        return min(a := abs(h - m), 360 - a)\\n\\t\\t\\n\\t\\t\\n![image](https://assets.leetcode.com/users/images/ab16870a-4834-444f-936c-5c071d410f3c_1657362277.5164502.png)\\n\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \"\"\" O(1)TS \"\"\"\\n        return min(a := abs(30 * hour - 5.5 * minutes), 360 - a)",
                "codeTag": "Python3"
            },
            {
                "id": 2191114,
                "title": "simple-math-solution-easy-explanation",
                "content": "* First we have to calculate perMinute and perHour angles.\\n**perMinute angle = 360 (total angle) / 60 (minutes) \\nSimilarly perHour angle= 360 /12 (hours)**\\n* if(hour ==12 ) convert it to 0, So angle fits in 360 degrees  to avoid unneccesary calculations.\\n\\n* Now as the minute hand moves hour hand angle also changes. To find out that angle :\\nwe can see that between any two hours  30 degree angle exists.\\n**So perMinute Movement of hour hand between two hours = 30( angle between two hours)/60(total minutes).**\\n**So totalHourAngle= perHourAngle( 30 ) * hours + 0.5 * minutes.\\nMinuteHandAngle = perMinuteAngle( 6 )  * minutes.**\\n \\n*  **then angle1=abs(hourAngle - minuteAngle);**\\n       **angle2 =360 - angle1**\\n \\n*  **RequiredAns = min(angle1,angle2)**.\\n\\n* Please note that all angle are calculated with respect to 12:00.\\n\\n\\tPlease upvote if found Helpful!!\\n\\n```\\nclass Solution{\\npublic:\\n   double angleClock(int hour, int minutes){\\n      int perMinute = 6;  \\n      int perHour = 30;   \\n      if (hour == 12)\\n         hour = 0;\\n      double minuteAngle = 6 * minutes;\\n      double hourAngle = 30 * hour + minutes * 0.5;\\n      double angle1 = abs(hourAngle - minuteAngle);\\n      double angle2 = abs(360 - angle1);\\n      return min(angle1, angle2);\\n   }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution{\\npublic:\\n   double angleClock(int hour, int minutes){\\n      int perMinute = 6;  \\n      int perHour = 30;   \\n      if (hour == 12)\\n         hour = 0;\\n      double minuteAngle = 6 * minutes;\\n      double hourAngle = 30 * hour + minutes * 0.5;\\n      double angle1 = abs(hourAngle - minuteAngle);\\n      double angle2 = abs(360 - angle1);\\n      return min(angle1, angle2);\\n   }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2163214,
                "title": "angle-between-hands-of-a-clock-python-solution",
                "content": "def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        \"\"\"\\n        As hour clock move by (360/12) is per hour + ((360/12)/60) per minutes\\n        \"\"\"\\n        hours_degree = (360/12)*hour+(360/720)*minutes\\n        minute_degree = (360/60)*minutes\\n        res =  abs(hours_degree-minute_degree)\\n        if res > 180:\\n            return 360-res\\n        return res",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        \"\"\"\\n        As hour clock move by (360/12) is per hour + ((360/12)/60) per minutes\\n        \"\"\"\\n        hours_degree = (360/12)*hour+(360/720)*minutes\\n        minute_degree = (360/60)*minutes\\n        res =  abs(hours_degree-minute_degree)\\n        if res > 180:\\n            return 360-res\\n        return res",
                "codeTag": "Python3"
            },
            {
                "id": 2102837,
                "title": "python-naive-approach-explained-with-comments",
                "content": "**Code**\\n```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        # Normalizing minute position in range (1-12)\\n        min_clock = minutes/5\\n\\n        # If time is 12.00 returning 0\\n        if minutes == 0 and hour*30 == 360:\\n            return 0\\n        \\n        # If minutes is 0 then multiply hour by 30 degree as each hour consists of 30 degree\\n        elif minutes == 0:\\n            only_hour = hour*30\\n            \\n            # Check whether it is shorter in opposite direction\\n            if only_hour > 180:\\n                return 360-(only_hour)\\n            return only_hour\\n        \\n        else:\\n            # Finding the degree between minute hand and closest hour of the hour hand\\n            time = abs(hour-min_clock)*30\\n            \\n            # Finding the difference that needs to added/subtracted\\n            diff = 30/(60/minutes)\\n            \\n            # Subtracting when minute hand is at greater value that hour hand\\n            if min_clock > hour:\\n                fin_time = time-diff\\n                \\n            # Adding when minute hand is at lesser value that hour hand\\n            else:\\n                fin_time = time+diff\\n            \\n            # Check the shorter direction\\n            if fin_time > 180:\\n                diff = fin_time-180\\n                return abs(180-diff)\\n            else:\\n                return abs(fin_time)\\n            \\n```\\n\\n\\n**Space & Time Analysis**\\n![image](https://assets.leetcode.com/users/images/3c439212-1a7d-45ff-a31d-630b871e2e81_1654181622.2073946.png)\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        \\n        # Normalizing minute position in range (1-12)\\n        min_clock = minutes/5\\n\\n        # If time is 12.00 returning 0\\n        if minutes == 0 and hour*30 == 360:\\n            return 0\\n        \\n        # If minutes is 0 then multiply hour by 30 degree as each hour consists of 30 degree\\n        elif minutes == 0:\\n            only_hour = hour*30\\n            \\n            # Check whether it is shorter in opposite direction\\n            if only_hour > 180:\\n                return 360-(only_hour)\\n            return only_hour\\n        \\n        else:\\n            # Finding the degree between minute hand and closest hour of the hour hand\\n            time = abs(hour-min_clock)*30\\n            \\n            # Finding the difference that needs to added/subtracted\\n            diff = 30/(60/minutes)\\n            \\n            # Subtracting when minute hand is at greater value that hour hand\\n            if min_clock > hour:\\n                fin_time = time-diff\\n                \\n            # Adding when minute hand is at lesser value that hour hand\\n            else:\\n                fin_time = time+diff\\n            \\n            # Check the shorter direction\\n            if fin_time > 180:\\n                diff = fin_time-180\\n                return abs(180-diff)\\n            else:\\n                return abs(fin_time)\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2061780,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n        // Few helpful notes for problem solving\\n        // Considering the clock as a total of 360 degree space\\n        // we have 12 hours, each hour moves 360/12 = 30 degrees\\n        // we have 60 mins, each minute moves 360/60 = 6 degrees\\n        // 60 minutes of time moves hour needle by 30 degrees; 1 minute will move hours extra by 30/60 mins\\n        \\n        double oneHourDegrees = 30;\\n        double oneMinDegrees = 6;\\n\\n        double minuteAngle = minutes * oneMinDegrees;\\n        \\n        double hourAngle = (hour % 12) * oneHourDegrees;\\n        double hourAngleExtraMovement = minutes * (oneHourDegrees / 60);\\n        \\n        \\n        double diff = Math.abs((hourAngle + hourAngleExtraMovement) - minuteAngle);\\n        return Math.min(diff, 360-diff);\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n        // Few helpful notes for problem solving\\n        // Considering the clock as a total of 360 degree space\\n        // we have 12 hours, each hour moves 360/12 = 30 degrees\\n        // we have 60 mins, each minute moves 360/60 = 6 degrees\\n        // 60 minutes of time moves hour needle by 30 degrees; 1 minute will move hours extra by 30/60 mins\\n        \\n        double oneHourDegrees = 30;\\n        double oneMinDegrees = 6;\\n\\n        double minuteAngle = minutes * oneMinDegrees;\\n        \\n        double hourAngle = (hour % 12) * oneHourDegrees;\\n        double hourAngleExtraMovement = minutes * (oneHourDegrees / 60);\\n        \\n        \\n        double diff = Math.abs((hourAngle + hourAngleExtraMovement) - minuteAngle);\\n        return Math.min(diff, 360-diff);\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2023508,
                "title": "beats-100-percent-cpp-solution-very-easy-to-understand",
                "content": "class Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double a1_h =hour*30 +minutes/2.0 ;\\n          double a1_m =minutes*6 ;\\n     \\n        double ang1 =abs(a1_h-a1_m);\\n        double ang2 =360 -ang1;\\n        return min(ang1,ang2);\\n    }\\n};",
                "solutionTags": [
                    "Math"
                ],
                "code": "class Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double a1_h =hour*30 +minutes/2.0 ;\\n          double a1_m =minutes*6 ;\\n     \\n        double ang1 =abs(a1_h-a1_m);\\n        double ang2 =360 -ang1;\\n        return min(ang1,ang2);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1925864,
                "title": "c-100-fatsest-easy",
                "content": "class Solution {\\npublic:\\n    double angleClock(int hr, int m) {\\n        \\n        double Am=(double)m*6;\\n        double th;\\n        if(hr!=12){\\n        th=hr + (double)m/60;\\n        }\\n        else\\n        th=(double)m/60;\\n        \\n        double Ah=(double)th*30;\\n        \\n        \\n        if((th<=6 && m<=30) || (th>=6 && m>=30))\\n        return abs(Ah-Am);\\n        else \\n        {\\n            return min(abs(Ah-Am),(360-abs(Ah-Am)));\\n        }\\n    }\\n};\\n\\nI hope you liked it...",
                "solutionTags": [
                    "Math"
                ],
                "code": "class Solution {\\npublic:\\n    double angleClock(int hr, int m) {\\n        \\n        double Am=(double)m*6;\\n        double th;\\n        if(hr!=12){\\n        th=hr + (double)m/60;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1885653,
                "title": "pure-maths-simple-one-line-soln-beats-100",
                "content": "class Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n  return min (abs(-(30*hour)+(5.5*minutes)),360.0-abs((-30*hour)+(5.5*minutes)));\\n      }\\n};",
                "solutionTags": [
                    "Math"
                ],
                "code": "class Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n  return min (abs(-(30*hour)+(5.5*minutes)),360.0-abs((-30*hour)+(5.5*minutes)));\\n      }",
                "codeTag": "Java"
            },
            {
                "id": 1883807,
                "title": "javascript-1344-angle-between-hands-of-a-clock",
                "content": "---\\n\\nHope it is simple to understand.\\n\\n---\\n\\n```\\nvar angleClock = function (hour, minutes) {\\n    const degh = hour + minutes / 60; // convert to hours\\n    const degm = minutes / 5; //         convert to hours\\n\\n    const angle = Math.abs(degm - degh) * 30; // 30 degrees per 1 hour\\n    return Math.min(angle, 360 - angle);\\n};\\n```\\n\\n![image](https://assets.leetcode.com/users/images/211173a3-6c7c-4be3-bb0d-b56a6298ab6c_1648257885.2183793.png)\\n\\n---\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar angleClock = function (hour, minutes) {\\n    const degh = hour + minutes / 60; // convert to hours\\n    const degm = minutes / 5; //         convert to hours\\n\\n    const angle = Math.abs(degm - degh) * 30; // 30 degrees per 1 hour\\n    return Math.min(angle, 360 - angle);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1786555,
                "title": "easy-c-100-faster",
                "content": "```\\ndouble angleClock(int hour, int minutes)\\n{\\n    if (hour == 12)\\n        hour = 0;\\n\\n    double hour_d = minutes;\\n\\n    hour_d = (hour * 30) + (hour_d / 2);\\n    double min_d = minutes * 6;\\n\\n    cout << hour_d << \" \" << min_d << endl;\\n\\n    if (hour_d > min_d)\\n        return min(hour_d - min_d, 360.0 - hour_d + min_d);\\n\\n    else\\n        return min(min_d - hour_d, 360.0 - min_d + hour_d);\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\ndouble angleClock(int hour, int minutes)\\n{\\n    if (hour == 12)\\n        hour = 0;\\n\\n    double hour_d = minutes;\\n\\n    hour_d = (hour * 30) + (hour_d / 2);\\n    double min_d = minutes * 6;\\n\\n    cout << hour_d << \" \" << min_d << endl;\\n\\n    if (hour_d > min_d)\\n        return min(hour_d - min_d, 360.0 - hour_d + min_d);\\n\\n    else\\n        return min(min_d - hour_d, 360.0 - min_d + hour_d);\\n}\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1724461,
                "title": "simple-one-line-java-solution-with-proper-explanation",
                "content": "```\\npublic double angleClock(int hour, int minutes) {\\n\\t\\t//Hour hand roatation per hour = 360/12 = 30\\n\\t\\t// Hour hand rotation per min = 30/60 = 0.5\\n\\t\\t// Min hand rotation per min = 360/60 = 6\\n        double diff = Math.abs((hour%12)*30 + minutes*0.5- minutes*6);\\n        return diff>180? (360-diff):diff;\\n}\\n```\\n\\t\\t",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\npublic double angleClock(int hour, int minutes) {\\n\\t\\t//Hour hand roatation per hour = 360/12 = 30\\n\\t\\t// Hour hand rotation per min = 30/60 = 0.5\\n\\t\\t// Min hand rotation per min = 360/60 = 6\\n        double diff = Math.abs((hour%12)*30 + minutes*0.5- minutes*6);\\n        return diff>180? (360-diff):diff;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1722685,
                "title": "c-clock-math-explained",
                "content": "```\\n    /*\\n    Mathwise-        \\n        1 hour = 60 minutes = 360 degrees on a clock.\\n        every time minute hand travels 360 degrees, hour hand travels by 1 hour\\'s worth - 30 degrees (360/12)\\n        every time minute hand travels 6 degrees (1 minute), hour hand travels (30*6)/360: 0.5 degrees\\n        \\n        minute hand would be at the 6*minute angle\\n        hour hand would be at the 30*hour + 0.5*minute.\\n        \\n        compute the angle difference \\n        if angle is bigger than 180, return the 360 - angle result\\n        minute hand goes 6 degrees per minute\\n        \\n        angle will be minute angle - hour angle (abs);\\n    */\\nclass Solution {\\npublic:\\n\\n    double angleClock(int hour, int minutes) {\\n        double minuteAngle = 6 * minutes;\\n        double hourAngle = 30 * hour + 0.5 * minutes;\\n        \\n        double angle = abs(minuteAngle - hourAngle);\\n        return min(angle, 360-angle); //as thought earlier, we could use a conditional like if(angle > 180) {return 360-angle};\\n    }\\n    \\n    //TIME - O(1) //no matter what happens, we have a constant time\\n    //SPACE - O(1) //no matter what happens, we have a constant space\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n    /*\\n    Mathwise-        \\n        1 hour = 60 minutes = 360 degrees on a clock.\\n        every time minute hand travels 360 degrees, hour hand travels by 1 hour\\'s worth - 30 degrees (360/12)\\n        every time minute hand travels 6 degrees (1 minute), hour hand travels (30*6)/360: 0.5 degrees\\n        \\n        minute hand would be at the 6*minute angle\\n        hour hand would be at the 30*hour + 0.5*minute.\\n        \\n        compute the angle difference \\n        if angle is bigger than 180, return the 360 - angle result\\n        minute hand goes 6 degrees per minute\\n        \\n        angle will be minute angle - hour angle (abs);\\n    */\\nclass Solution {\\npublic:\\n\\n    double angleClock(int hour, int minutes) {\\n        double minuteAngle = 6 * minutes;\\n        double hourAngle = 30 * hour + 0.5 * minutes;\\n        \\n        double angle = abs(minuteAngle - hourAngle);\\n        return min(angle, 360-angle); //as thought earlier, we could use a conditional like if(angle > 180) {return 360-angle};\\n    }\\n    \\n    //TIME - O(1) //no matter what happens, we have a constant time\\n    //SPACE - O(1) //no matter what happens, we have a constant space\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1575773,
                "title": "java-math-on-clock-angles-faster-than-100",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {      \\n        \\n        int oneMinAngle = 6;\\n        int oneHourAngle = 30;\\n        \\n        //calculating the effect of minutes on the hour hand\\n        double minFrac = (double)minutes/60.0;\\n        double hHandMove = minFrac * oneHourAngle;\\n       \\n        //calculating the angles of hour hand the minute hand from 0degree\\n        double hAngle = (hour%12) * oneHourAngle + hHandMove;\\n        double minAngle = minutes * oneMinAngle;\\n        \\n        //calculating both the angles formed \\n        double firstDiff = Math.abs(hAngle - minAngle);\\n        double secondDiff = 360 - firstDiff;\\n        \\n        return Math.min(firstDiff, secondDiff);\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {      \\n        \\n        int oneMinAngle = 6;\\n        int oneHourAngle = 30;\\n        \\n        //calculating the effect of minutes on the hour hand\\n        double minFrac = (double)minutes/60.0;\\n        double hHandMove = minFrac * oneHourAngle;\\n       \\n        //calculating the angles of hour hand the minute hand from 0degree\\n        double hAngle = (hour%12) * oneHourAngle + hHandMove;\\n        double minAngle = minutes * oneMinAngle;\\n        \\n        //calculating both the angles formed \\n        double firstDiff = Math.abs(hAngle - minAngle);\\n        double secondDiff = 360 - firstDiff;\\n        \\n        return Math.min(firstDiff, secondDiff);\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1538731,
                "title": "easy-to-understand-python-code",
                "content": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        # cloclwise\\n\\t\\t# 30 degrees is the angle of one hour\\n        hour_angle = hour * 30 + 30 * minutes / 60\\n        minute_angle = 360 * minutes / 60\\n        return min(360 - abs(minute_angle - hour_angle), abs(minute_angle - hour_angle))",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        # cloclwise\\n\\t\\t# 30 degrees is the angle of one hour\\n        hour_angle = hour * 30 + 30 * minutes / 60\\n        minute_angle = 360 * minutes / 60\\n        return min(360 - abs(minute_angle - hour_angle), abs(minute_angle - hour_angle))",
                "codeTag": "Java"
            },
            {
                "id": 1464436,
                "title": "java-math-with-explanation",
                "content": "1. For every 1 hour (60 minutes) that is completed on a clock, the minutes pointer rotates 360 degrees. This means that for every 1 minute, the minutes pointer moved 6 degrees.\\n2. For every 12 hours, the hours pointer completes 360 degrees, which means that the hour pointer moves 30 degrees every hour.\\n3. The main point to remember here is that the hour pointer doesn\\'t remain at a static position between every hour that passes, but it covers a certain degree as the minutes keep passing by. It is important to calculate the degree of movement and add it to the total degree that the hours pointer moves.\\n\\nAs an example, let us consider when the time is 12:30. While the minutes pointer moves by 180 degrees at this time (30 * 6), the hour pointer moves by 0.5 degrees every 1 minute,as calculated below:\\n\\n360 degrees = 12 hours\\n30 degrees = 1 hour\\n30 degrees = 60 minutes => 0.5 degrees every minute. In this example, where the minutes is at 30, we can thus infer that the hours pointer has moved 15 degrees. We thus calculate the hoursAngle and minutesAngle.\\n\\n```\\n public double angleClock(int hour, int minutes) {\\n        double hourAngle = 30*(hour%12) + 0.5*(minutes);\\n        double minuteAngle = 6*(minutes);\\n        \\n        double result = Math.abs(hourAngle-minuteAngle);\\n        //min angle to be returned.\\n        return Math.min(result, 360-result);\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\n public double angleClock(int hour, int minutes) {\\n        double hourAngle = 30*(hour%12) + 0.5*(minutes);\\n        double minuteAngle = 6*(minutes);\\n        \\n        double result = Math.abs(hourAngle-minuteAngle);\\n        //min angle to be returned.\\n        return Math.min(result, 360-result);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1432604,
                "title": "3-line-100-c-code",
                "content": "```\\n//please upvote  if you like the solution \\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hA = 30*hour + (double)minutes/2;\\n        double mA = 6*minutes;\\n        return min(360 - abs(hA - mA), abs(hA - mA));\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n//please upvote  if you like the solution \\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hA = 30*hour + (double)minutes/2;\\n        double mA = 6*minutes;\\n        return min(360 - abs(hA - mA), abs(hA - mA));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1314494,
                "title": "c-easy-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tdouble angleClock(int hour, int minutes) {\\n\\n\\t\\t\\tdouble n=static_cast<double>(minutes)/60;        \\n\\t\\t\\tdouble min=n*360;        \\n\\t\\t\\tdouble hou=(n+hour)*30;\\n\\n\\t\\t\\treturn abs(hou-min)>360-abs(hou-min)?360-abs(hou-min):abs(hou-min);\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tdouble angleClock(int hour, int minutes) {\\n\\n\\t\\t\\tdouble n=static_cast<double>(minutes)/60;        \\n\\t\\t\\tdouble min=n*360;        \\n\\t\\t\\tdouble hou=(n+hour)*30;\\n\\n\\t\\t\\treturn abs(hou-min)>360-abs(hou-min)?360-abs(hou-min):abs(hou-min);\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1298871,
                "title": "detailed-solution-with-full-explanation",
                "content": "class Solution {\\n    \\n    public double angleClock(int hour, int minutes) {\\n        /*\\n            This method calculates the angles difference \\n            between HOUR HAND and MINUTE HAND\\n        */\\n\\n        /*\\n        ALGORITHM:\\n            #   Calculate the angles for each hands from \\n                the origin(i.e. 12 o\\'clock)\\n            #   1 hour makes 30 degrees\\n            #   1 minute makes 6 degrees\\n        */\\n\\n        double angleHourHand = (hour * 30) % 360 + minutes * 0.5;\\n        // one hour makes 30 degrees\\n        // 12 o\\'clock is 0 degrees, that is why modulues applied\\n        // 60 minutes is 1 hour and that is 30 degrees\\n        // so 1 minute is 0.5 degree\\n\\n        double angleMinuteHand = minutes * 6; \\n        // 60 minutes is 360 degrees\\n        // 1 minute is 6 degrees\\n\\n        double difference = angleHourHand - angleMinuteHand;\\n\\n        // IF NEGATIVE, MAKE POSITIVE\\n        if (difference < 0){\\n            difference *= -1;\\n        }\\n\\n        // There are two angles \\n        // One is definitely smaller than 180, find it \\n        if(difference > 180){\\n            difference = 360 - difference; // the other angles that completes to 360\\n        }\\n        \\n        \\n        return difference;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    \\n    public double angleClock(int hour, int minutes) {\\n        /*\\n            This method calculates the angles difference \\n            between HOUR HAND and MINUTE HAND\\n        */\\n\\n        /*\\n        ALGORITHM:\\n            #   Calculate the angles for each hands from \\n                the origin(i.e. 12 o\\'clock)\\n            #   1 hour makes 30 degrees\\n            #   1 minute makes 6 degrees\\n        */\\n\\n        double angleHourHand = (hour * 30) % 360 + minutes * 0.5;\\n        // one hour makes 30 degrees\\n        // 12 o\\'clock is 0 degrees, that is why modulues applied\\n        // 60 minutes is 1 hour and that is 30 degrees\\n        // so 1 minute is 0.5 degree\\n\\n        double angleMinuteHand = minutes * 6; \\n        // 60 minutes is 360 degrees\\n        // 1 minute is 6 degrees\\n\\n        double difference = angleHourHand - angleMinuteHand;\\n\\n        // IF NEGATIVE, MAKE POSITIVE\\n        if (difference < 0){\\n            difference *= -1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1260232,
                "title": "php-solution-100-faster-2-lines-of-code",
                "content": "```\\n\\tfunction angleClock($hour, $minutes) {\\n        $delta = abs($hour * 30 - $minutes / 2 * 11);\\n        return $delta <= 180 ? $delta : 360 - $delta;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\tfunction angleClock($hour, $minutes) {\\n        $delta = abs($hour * 30 - $minutes / 2 * 11);\\n        return $delta <= 180 ? $delta : 360 - $delta;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1260171,
                "title": "php-solution-100-faster",
                "content": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer $hour\\n     * @param Integer $minutes\\n     * @return Float\\n     */\\n    function angleClock($hour, $minutes) {\\n        if($hour > 12) $hour -= 12; \\n        $delta = abs(($minutes * 6) - (0.5 * ($hour * 60 + $minutes)));\\n        if($delta < 180) \\n            return $delta;\\n        return 360-$delta;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer $hour\\n     * @param Integer $minutes\\n     * @return Float\\n     */\\n    function angleClock($hour, $minutes) {\\n        if($hour > 12) $hour -= 12; \\n        $delta = abs(($minutes * 6) - (0.5 * ($hour * 60 + $minutes)));\\n        if($delta < 180) \\n            return $delta;\\n        return 360-$delta;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1192482,
                "title": "two-liner-c-solution-100-faster",
                "content": "Formula for finding angle between hour hand and minute hand:\\nAngle= (30 * Hour - (11/2) * Minutes))\\nIf the Angle is greater than 180 degree ( reflex angle ) then subtract it from 360 degree to get the correct angle.\\n\\n\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double x= abs(30*hour - 11/(double)2*minutes);\\n        return min(x,360.00000-x);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double x= abs(30*hour - 11/(double)2*minutes);\\n        return min(x,360.00000-x);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1182338,
                "title": "100-faster-solution",
                "content": "***Do upvote if you like the solution to keep me motivated*** \\uD83D\\uDE0A\\u270C\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n    double  hour_hand_angle = hour*30 + minutes*0.5;\\n    double minute_hand_angle = minutes*6;\\n    double angle = abs(hour_hand_angle - minute_hand_angle);\\n        if(angle<=180)\\n            return angle;\\n        else \\n            return 360 - angle;\\n    }\\n};\\n```\\n```\\n# Quick Explanation\\n1. Hour hand makes angle of 360\\xB0 in 12 hours , so in 1 hour it will make 360/12 = 30\\xB0. In 1 hour(60 minutes) it is making 30\\xB0 so in 1 minute it will make 30/60 = 0.5\\xB0.\\n2. Minute hand makes angle of 360\\xB0 in 1 hour(60 minutes) , so in 1 minute it will make 360/60 = 6\\xB0.\\n3. Subtract both angles to give absolute value.\\n4. We have to return smallest angle ,so check if its greater than 180\\xB0 then subract it from 360\\xB0.\\nUpvote if it helped!\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n    double  hour_hand_angle = hour*30 + minutes*0.5;\\n    double minute_hand_angle = minutes*6;\\n    double angle = abs(hour_hand_angle - minute_hand_angle);\\n        if(angle<=180)\\n            return angle;\\n        else \\n            return 360 - angle;\\n    }\\n};\\n```\n```\\n# Quick Explanation\\n1. Hour hand makes angle of 360\\xB0 in 12 hours , so in 1 hour it will make 360/12 = 30\\xB0. In 1 hour(60 minutes) it is making 30\\xB0 so in 1 minute it will make 30/60 = 0.5\\xB0.\\n2. Minute hand makes angle of 360\\xB0 in 1 hour(60 minutes) , so in 1 minute it will make 360/60 = 6\\xB0.\\n3. Subtract both angles to give absolute value.\\n4. We have to return smallest angle ,so check if its greater than 180\\xB0 then subract it from 360\\xB0.\\nUpvote if it helped!\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1144549,
                "title": "c-with-explanation",
                "content": "```\\n    /*\\n     * Solution is to find the angle between hours hand and\\n     * minutes hand, need to see how much hours hand will\\n     * deviate with respect to minute hand.\\n     *\\n     * The hours hand will complete angle of 360 only when it\\n     * completes 12 hours i.e..,\\n     *       360degrees -> 12 hours\\n     *        30degrees -> 1 hour\\n     *\\n     * As we can see tha there is a 30degree deviation in the\\n     * hour hand which corresponds to 0.5degree in 1 minute\\n     *        30degrees -> 1 hour\\n     *        30degress -> 60 minutes\\n     *        0.5degree -> 1 minute\\n     *\\n     * Now lets check the minutes hand, the minutes hand will\\n     * complete 360degree in 60 minutes\\n     *        360degree -> 60 minutes\\n     *         60degree -> 1 minute\\n     *\\n     * Absolute difference of both hours angle and minutes angle\\n     * will give the result.\\n     *\\n     * Base Case:\\n     * If the hour is 12, then hour hand is at 0\\n     * If the hour, minutes < 0 or hour > 12 or min > 60, invalid\\n    */\\n    double angleClock(int hour, int minutes) {\\n        if (hour < 0 || minutes < 0 || hour > 12 || minutes > 60) {\\n            // Invalid input\\n            return 0.0;\\n        }\\n        \\n        // Check if the hour is 12, then hour hand is at 0\\n        if (hour == 12) {\\n            // Replace with zero\\n            hour = 0;\\n        }\\n        \\n        // As minutes hand effects the hours hand, calculate the hour\\n        // angle by including the minutes hand. As angle between the\\n        // hours hand for a minute is known(0.5), hours hand needs\\n        // to be converted to minutes and multiply with 0.5 so that we\\n        // get the total angle\\n        //       (h*60 + m) >> 1\\n        double hoursAngle = (hour * 60 + minutes) * 0.5;\\n        \\n        // Calculate the minutes angle, as we know the angle at each\\n        // minute directly multiple with 6\\n        double minutesAngle = minutes * 6;\\n        \\n        // Get the absolute difference and return\\n        double angle = abs(hoursAngle - minutesAngle);\\n        \\n        // Return the smaller angle of two possible angles\\n        angle = min(360 - angle, angle);\\n        \\n        return angle;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    /*\\n     * Solution is to find the angle between hours hand and\\n     * minutes hand, need to see how much hours hand will\\n     * deviate with respect to minute hand.\\n     *\\n     * The hours hand will complete angle of 360 only when it\\n     * completes 12 hours i.e..,\\n     *       360degrees -> 12 hours\\n     *        30degrees -> 1 hour\\n     *\\n     * As we can see tha there is a 30degree deviation in the\\n     * hour hand which corresponds to 0.5degree in 1 minute\\n     *        30degrees -> 1 hour\\n     *        30degress -> 60 minutes\\n     *        0.5degree -> 1 minute\\n     *\\n     * Now lets check the minutes hand, the minutes hand will\\n     * complete 360degree in 60 minutes\\n     *        360degree -> 60 minutes\\n     *         60degree -> 1 minute\\n     *\\n     * Absolute difference of both hours angle and minutes angle\\n     * will give the result.\\n     *\\n     * Base Case:\\n     * If the hour is 12, then hour hand is at 0\\n     * If the hour, minutes < 0 or hour > 12 or min > 60, invalid\\n    */\\n    double angleClock(int hour, int minutes) {\\n        if (hour < 0 || minutes < 0 || hour > 12 || minutes > 60) {\\n            // Invalid input\\n            return 0.0;\\n        }\\n        \\n        // Check if the hour is 12, then hour hand is at 0\\n        if (hour == 12) {\\n            // Replace with zero\\n            hour = 0;\\n        }\\n        \\n        // As minutes hand effects the hours hand, calculate the hour\\n        // angle by including the minutes hand. As angle between the\\n        // hours hand for a minute is known(0.5), hours hand needs\\n        // to be converted to minutes and multiply with 0.5 so that we\\n        // get the total angle\\n        //       (h*60 + m) >> 1\\n        double hoursAngle = (hour * 60 + minutes) * 0.5;\\n        \\n        // Calculate the minutes angle, as we know the angle at each\\n        // minute directly multiple with 6\\n        double minutesAngle = minutes * 6;\\n        \\n        // Get the absolute difference and return\\n        double angle = abs(hoursAngle - minutesAngle);\\n        \\n        // Return the smaller angle of two possible angles\\n        angle = min(360 - angle, angle);\\n        \\n        return angle;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1098587,
                "title": "java-easy-solution-runtime-0-ms-faster-than-100-00-of-java-online-submissions",
                "content": "```\\n\\npublic double angleClock(int hour, int minutes) \\n    {\\n        double m=0;\\n        m=minutes*6;\\n        double h=hour%12;;\\n        h=(h*30)+(minutes*0.5);\\n        double angle = Math.abs(m - h);\\n        \\n        if((angle)>180)\\n          return (360-angle);\\n        else\\n             return (angle);\\n\\t\\t\\t }\\n",
                "solutionTags": [],
                "code": "```\\n\\npublic double angleClock(int hour, int minutes) \\n    {\\n        double m=0;\\n        m=minutes*6;\\n        double h=hour%12;;\\n        h=(h*30)+(minutes*0.5);\\n        double angle = Math.abs(m - h);\\n        \\n        if((angle)>180)\\n          return (360-angle);\\n        else\\n             return (angle);\\n\\t\\t\\t }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1013332,
                "title": "python-simulation-math",
                "content": "```py\\n\\'\\'\\'\\nsimulation + math\\nh: 1 hour: hour hand: 360/12 + 30/60*minutes\\n           minute hand 360/60\\n\\'\\'\\'\\n\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        mDegree = 360/60 * minutes\\n        hDegree = 360/12 * hour + 360/(60*12)*minutes\\n\\n        return min(abs(mDegree-hDegree), 360-abs(mDegree-hDegree))\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```py\\n\\'\\'\\'\\nsimulation + math\\nh: 1 hour: hour hand: 360/12 + 30/60*minutes\\n           minute hand 360/60\\n\\'\\'\\'\\n\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        mDegree = 360/60 * minutes\\n        hDegree = 360/12 * hour + 360/(60*12)*minutes\\n\\n        return min(abs(mDegree-hDegree), 360-abs(mDegree-hDegree))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1000569,
                "title": "c-0ms-math-two-solution-with-comments",
                "content": "if this isnt simply, we can separate ... and have second solution \\n\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n      double ang = abs((h%12)*30 - m*5.5);\\n      return min (ang , 360 - ang); \\n    }\\n};\\n```\\n_____________\\n\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n      double ah = (h%12)*30 + m*0.5;             //calculate angle of hours hand\\n      double am = m*6.0;                         //calculate angle of minutes hand\\n      double ang;\\n      if(ah > am) ang = ah - am;                 //calculate angle beetween minutes hand and hours hand\\n      else ang = am - ah;\\n      \\n      if(ang>180) ang = 360 - ang;               //if our angle isnt sharp\\n      return ang;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n      double ang = abs((h%12)*30 - m*5.5);\\n      return min (ang , 360 - ang); \\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n      double ah = (h%12)*30 + m*0.5;             //calculate angle of hours hand\\n      double am = m*6.0;                         //calculate angle of minutes hand\\n      double ang;\\n      if(ah > am) ang = ah - am;                 //calculate angle beetween minutes hand and hours hand\\n      else ang = am - ah;\\n      \\n      if(ang>180) ang = 360 - ang;               //if our angle isnt sharp\\n      return ang;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 922724,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n        \\n        if(hour==12)\\n            hour=0;\\n        double min=minutes*6.0;\\n        double hrs=hour*30.0+minutes*0.5;\\n        double diff=Math.abs(min-hrs);\\n        if(diff>180)\\n        {\\n            return 360-diff;\\n        }\\n        return diff;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n        \\n        if(hour==12)\\n            hour=0;\\n        double min=minutes*6.0;\\n        double hrs=hour*30.0+minutes*0.5;\\n        double diff=Math.abs(min-hrs);\\n        if(diff>180)\\n        {\\n            return 360-diff;\\n        }\\n        return diff;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 803854,
                "title": "python-3-explanation",
                "content": "* We can break this question down into two separate functions:\\n1. `getMinuteAngle`: For a given `minutes` value, what is the angle from the 0 position to where the minute hand is.\\n2. `getHourAngle`: For a given `minutes` **and** `hours` value, what is the angle from the 0 position to where the hour hand is.\\n\\t * We need to factor in both the `minutes` and `hours` values for the hours hand since it moves a little bit for each minute that goes by.\\n* For `getMinuteAngle`, we calculate the angle between the 0 position and one minute \\'notch\\' on the clock as `360 / 60 == 6`.\\n\\t* We then multiply this by however many `minutes` we have.\\n* For `getHourAngle`, we calculate the angle between the 0 position and one hour \\'noth\\' on the clock as `360 / 12 == 30`.\\n\\t* We also need to calculate the `minuteOffsetAngle`, which is the fractional amount the hour hand moves for each passing minute.\\n\\t* This value is the proportion of `oneHourAngle` multiplied by how many minutes in a total hour have passed.\\n\\t* In our return statement we need to be sure to modulo the `hour` value by `12` since a clock can represent 24 hours by looping around the clock twice.\\n* After we have both the `minuteAngle` and the `hourAngle`, we calculate the `angleDifference` as an `abs`olute value, and return the smaller angle in the circle using a ternary operator.\\n```\\nclass Solution:\\n    \\n    def getMinuteAngle(self, minutes: int) -> int:\\n        oneMinuteAngle = 6\\n        \\n        return minutes * oneMinuteAngle\\n    \\n    def getHourAngle(self, hour: int, minutes: int) -> float:\\n        oneHourAngle = 30\\n        minuteOffsetAngle = oneHourAngle * (minutes / 60)\\n        \\n        return ((hour % 12) * oneHourAngle) + minuteOffsetAngle\\n    \\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        minuteAngle = self.getMinuteAngle(minutes)\\n        hourAngle = self.getHourAngle(hour, minutes)\\n\\n        angleDifference = abs(hourAngle - minuteAngle)\\n        return angleDifference if angleDifference <= 180 else 360 - angleDifference\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    \\n    def getMinuteAngle(self, minutes: int) -> int:\\n        oneMinuteAngle = 6\\n        \\n        return minutes * oneMinuteAngle\\n    \\n    def getHourAngle(self, hour: int, minutes: int) -> float:\\n        oneHourAngle = 30\\n        minuteOffsetAngle = oneHourAngle * (minutes / 60)\\n        \\n        return ((hour % 12) * oneHourAngle) + minuteOffsetAngle\\n    \\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        minuteAngle = self.getMinuteAngle(minutes)\\n        hourAngle = self.getHourAngle(hour, minutes)\\n\\n        angleDifference = abs(hourAngle - minuteAngle)\\n        return angleDifference if angleDifference <= 180 else 360 - angleDifference\\n```",
                "codeTag": "Java"
            },
            {
                "id": 786183,
                "title": "c-0ms-solution-using-formula",
                "content": "```\\n double a1,a2;\\n        a1=(double)(11*minutes)/2;\\n        a1=a1-(30*hour);\\n        a1=abs(a1);\\n        a2=abs(360-a1);\\n        if(a1<a2)\\n            return a1;\\n        else\\n            return a2;\\n```",
                "solutionTags": [],
                "code": "```\\n double a1,a2;\\n        a1=(double)(11*minutes)/2;\\n        a1=a1-(30*hour);\\n        a1=abs(a1);\\n        a2=abs(360-a1);\\n        if(a1<a2)\\n            return a1;\\n        else\\n            return a2;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 784649,
                "title": "simple-java-solution-0ms-beat-100",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        if(hour<1 || hour >12 || minutes <0 || minutes >59) return -1;\\n        double handle1 = (double) hour + (double)minutes/60;\\n        double handle2 = (double)minutes / 60 * 12;\\n\\n        double res = Math.abs(handle1 - handle2) / 12 * 360;\\n        if(res > 180) res = 360 - res;\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        if(hour<1 || hour >12 || minutes <0 || minutes >59) return -1;\\n        double handle1 = (double) hour + (double)minutes/60;\\n        double handle2 = (double)minutes / 60 * 12;\\n\\n        double res = Math.abs(handle1 - handle2) / 12 * 360;\\n        if(res > 180) res = 360 - res;\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 758827,
                "title": "clear-python-solution-faster-than-98",
                "content": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        minuteAngle = 6 * minutes\\n        hourAngle = (hour % 12) * 30\\n        add = minutes * 0.5\\n        hourAngle += add\\n        angle = abs(hourAngle - minuteAngle)\\n        return min(angle, 360 - angle)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        minuteAngle = 6 * minutes\\n        hourAngle = (hour % 12) * 30\\n        add = minutes * 0.5\\n        hourAngle += add\\n        angle = abs(hourAngle - minuteAngle)\\n        return min(angle, 360 - angle)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 742053,
                "title": "java-solution-0ms-runtime",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n        double h_ang, minu_ang, angle=0.0;\\n        minu_ang = (minutes % 60) * 6;\\n        h_ang = (hour % 12) * 30 + minutes * 0.5;\\n        angle = Math.abs(h_ang - minu_ang);\\n      \\n        if(angle>180)\\n         angle = 360 - angle;\\n        \\n        return angle;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n        double h_ang, minu_ang, angle=0.0;\\n        minu_ang = (minutes % 60) * 6;\\n        h_ang = (hour % 12) * 30 + minutes * 0.5;\\n        angle = Math.abs(h_ang - minu_ang);\\n      \\n        if(angle>180)\\n         angle = 360 - angle;\\n        \\n        return angle;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 737105,
                "title": "simple-java-math-solution",
                "content": "*Check out this desmos playground to visualize the graph :)*\\n***https://www.desmos.com/calculator/n7xtljtues***\\n\\nA full circle has `360 degrees` - and `60 minutes`. `360/60 = 6`\\n*Every minute* is **6 degrees clockwise for the minute hand**. \\n\\nEvery `hour` moves the hour-hand over `5` ticks, or `5 * 6 = 30 degrees`. \\nSo, *every minute* is **1/60 of an hour, or 30/60 degrees = .5 degrees clockwise for the hour hand**.\\n\\nSo, as time moves forward each minute, the angle grows by `5.5 degrees`(because 6 - 0.5 = 5.5). When the value goes over `180`, you take the extra and count backward. \\nStarting from `12:00`, or `0 degrees`, you can simply count forward by `5.5`. Ex: When the value reaches `181.5`, you take the shorter angle: `180 - 1.5 = 178.5`\\n\\n```\\n//hour * 60 gives us the number of ticks forward from the hour\\n//minutes tells us how many additional ticks forward\\n//multiply by 5.5 degrees per tick\\n//mod by 360 because it doesn\\'t matter if it\\'s rotated a full circle\\n//use min to get the smaller of the 2 angles formed\\n\\ndouble b = (((hour % 12) * 60 + minutes) * 5.5) % 360;\\nreturn Math.min(b, 360 - b);\\n```\\nThe `hour % 12` is so that 12:00 is treated as the beginning, aka 0 steps forward in time, rather than the end, 720 steps forward in time.\\n\\nAnother thing to note is that there are 361 unique outputs for this function, so you could easily precompute all the values, and store them if this method was going to be called many many times. The possible output values are `[0, 180]` *in steps of* `0.5`\\n\\nAdditionally, if you\\'re allowing complex numbers, you can use the following function to directly compute the result with all arithmetic:\\n![image](https://assets.leetcode.com/users/images/cdfe5fe3-28ba-4229-a9dd-f440093a0d3d_1594795935.0496445.png)\\n\\n`Re` means only the `real` portion of the complex number, and `Im` means only the imaginary part.\\n\\nThe input `x` is the number of minutes since the angle between the hands was `0 degrees`. The graph of the function looks like this:\\n![image](https://assets.leetcode.com/users/images/4b1cb2af-ada0-41ce-bd98-d0c63711f672_1594794620.6631007.png)\\n\\nCheck out this desmos playground to visualize the graph :)\\nhttps://www.desmos.com/calculator/n7xtljtues\\n<iframe src=\"https://www.desmos.com/calculator/n7xtljtues?embed\" width=\"500px\" height=\"500px\" style=\"border: 1px solid #ccc\" frameborder=0></iframe>",
                "solutionTags": [],
                "code": "```\\n//hour * 60 gives us the number of ticks forward from the hour\\n//minutes tells us how many additional ticks forward\\n//multiply by 5.5 degrees per tick\\n//mod by 360 because it doesn\\'t matter if it\\'s rotated a full circle\\n//use min to get the smaller of the 2 angles formed\\n\\ndouble b = (((hour % 12) * 60 + minutes) * 5.5) % 360;\\nreturn Math.min(b, 360 - b);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 736991,
                "title": "logical-solution-over-optimized-solution",
                "content": "The first thing we want to do is map minutes to degrees. A simple way to logically do so is to solve for the ratio D in the proportion:\\nD = 360deg/60min = 6deg/1min;\\n\\nThen, x minutes in degrees is represented by:\\nM(x) = (x)min * D \\n\\t\\t = (x)min * (6)deg/min\\n\\t\\t = (6x)deg\\n\\nGiven that 5 minute increments also correspond to one hour on the clock:\\nM(5) = (6(5))deg\\n\\t\\t= 30deg;\\n\\nThe ith hour in degrees can be found by:\\nH_base(i) = i * 30deg;\\n\\nTo find the hour hand\\'s actual offset from it\\'s base:\\nH_offset(m) = M(5) * (M(m) / 360deg)\\n\\t\\t\\t\\t\\t= 30deg * ((6m)deg / 360deg)\\n\\t\\t\\t\\t\\t= 30deg * 6m/360\\n\\t\\t\\t\\t\\t= (m/2)deg\\n\\nThe total displacement, therefore, is:\\nH(h, m) = H_base(h) + H_offset(m)\\n\\t\\t\\t = h * 30deg + (m/2)deg\\n\\t\\t\\t = (30h + m/2)deg\\n\\nNow that we have H(h,m) and M(m), we can take the absolute value of their difference:\\nLet L = ABS(m - h).\\nBasically, the distance between the minute and hour hands is the angle, and that distance has to be positive.\\n\\nThe last requirement is that we take the smaller of the two resulting angles:\\nMIN (L, 360 - L)\\n\\nSo, in code:\\n\\n```\\nclass Solution {\\n#define M(m) 6 *m\\n#define H_base(h) h * 30\\n#define H_offset(m) (double)m / 2\\n#define H(h, m) H_base(h) + H_offset(m)\\npublic:\\n    double angleClock(int hour, int minutes) {\\n\\t\\tdouble M = M(minutes);\\n\\t\\tdouble H = H(hour, minutes);\\n\\t\\tdouble L = abs(M - H);\\n\\t\\treturn min(L, 360 - L);\\n    }\\n};\\n```\\n### Below are unnecessary optimizations, especially considering that this problem is \\'locked\\' now. I also assume the reader\\'s familiarity with algebra and C/C++\\nI considered two optimizations, both based on refactoring the expression, abs(M - H), which expands to: \\n```\\n\\tabs( 6 * minutes - (30 * hour + (minutes / 2) ) );\\n```\\nWith some algebra, we can bring the arithmetic operations down to 1 SUB and 2 MULT (the compiler knows to make (double)11/2 a constant. To skip the explicit cast, you can write it as a literal, 5.5):\\n```\\n    double angleClock(int hour, int minutes) {\\n\\t\\tdouble L = abs(5.5*minutes - 30.0*hour);\\n\\t\\treturn L > 180 ? 360 - L : L;\\n\\t}\\n```\\nWhile this alone might seem like the most optimal solution, the corresponding assembler output (clang++-9, -O1) will show many conversions and move operations that exist just because the abs function takes a double instead of an integer. So, maybe we can do better by refactoring the abs(M-H) expression so that M-H remains an integer? Yes:\\n```\\n\\tdouble L = abs(11*minutes - 60*hour) * 0.5;\\n```\\nEven further, we can keep the result of abs as an int and delay the conversion to a double (that happens when multiplying by 0.5) until after the final conditional statement:\\n```\\n        int L = abs(11*minutes - 60*hour);\\n        return (L > 360 ? 720 - L : L) * 0.5;\\n```\\nIn order to allow the L * 0.5 expression to become the function\\'s last instructions, we double the constants, 180 and 360, to return the correct values. If you looked at the compiler output, you would\\'ve been able to see that the constants 180 and 360 had to be moved into XMM registers to compare against L when it was a double. Now that L is an int, the new constants (360 and 720) are immediate operands to the instructions. Here is a CE link to a comparison of this change: https://godbolt.org/z/YMWWaz\\n\\nBasically, the premise of the optimizations comes from a general rule to minimize data conversions.\\n# Optimized Solution:\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        int L = abs(11*minutes - 60*hour);\\n        return (L > 360 ? 720 - L : L) * 0.5;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n#define M(m) 6 *m\\n#define H_base(h) h * 30\\n#define H_offset(m) (double)m / 2\\n#define H(h, m) H_base(h) + H_offset(m)\\npublic:\\n    double angleClock(int hour, int minutes) {\\n\\t\\tdouble M = M(minutes);\\n\\t\\tdouble H = H(hour, minutes);\\n\\t\\tdouble L = abs(M - H);\\n\\t\\treturn min(L, 360 - L);\\n    }\\n};\\n```\n```\\n\\tabs( 6 * minutes - (30 * hour + (minutes / 2) ) );\\n```\n```\\n    double angleClock(int hour, int minutes) {\\n\\t\\tdouble L = abs(5.5*minutes - 30.0*hour);\\n\\t\\treturn L > 180 ? 360 - L : L;\\n\\t}\\n```\n```\\n\\tdouble L = abs(11*minutes - 60*hour) * 0.5;\\n```\n```\\n        int L = abs(11*minutes - 60*hour);\\n        return (L > 360 ? 720 - L : L) * 0.5;\\n```\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        int L = abs(11*minutes - 60*hour);\\n        return (L > 360 ? 720 - L : L) * 0.5;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 736893,
                "title": "java-solution-angle-between-hands-of-a-clock-0-ms-beat-100-5-lines-easy-to-understand",
                "content": "* Consider the clock as a 360 degree circle\\n* Each minute as a 6 degree leap, thus 60 minutes -> 360 degrees\\n* And each hour is a 30 degree leap, thus 12 hours -> 360 degrees\\n* Given the hour and minutes, calculate the respective angles\\n* Return the minimum of the diff and 360 - diff.\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        int minuteAngle = minutes*6;\\n        double hourAngle = hour == 12 ? 0 : hour*30;\\n        hourAngle += ((minuteAngle*30)/360.0);\\n        double angle = Math.abs(hourAngle - minuteAngle);\\n        return Math.min(360 - angle, angle);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        int minuteAngle = minutes*6;\\n        double hourAngle = hour == 12 ? 0 : hour*30;\\n        hourAngle += ((minuteAngle*30)/360.0);\\n        double angle = Math.abs(hourAngle - minuteAngle);\\n        return Math.min(360 - angle, angle);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 736818,
                "title": "python-easy-solution",
                "content": "Just see if hour hand is ahead of minutes hand in clockwise direction.\\n```\\ndef angleClock(self, hour: int, minutes: int) -> float:\\n        mins_diff = (hour%12)*5 - minutes\\n        if mins_diff < 0:\\n            angle = abs(abs(mins_diff)*6 - minutes*0.5)\\n            return min(angle, 360-angle)\\n        else:\\n            angle = mins_diff*6 + minutes*0.5\\n            return min(angle, 360-angle)\\n```",
                "solutionTags": [],
                "code": "```\\ndef angleClock(self, hour: int, minutes: int) -> float:\\n        mins_diff = (hour%12)*5 - minutes\\n        if mins_diff < 0:\\n            angle = abs(abs(mins_diff)*6 - minutes*0.5)\\n            return min(angle, 360-angle)\\n        else:\\n            angle = mins_diff*6 + minutes*0.5\\n            return min(angle, 360-angle)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 736731,
                "title": "python-3-lines",
                "content": "```\\nclass Solution(object):\\n    def angleClock(self, hour, minutes):\\n        \"\"\"\\n        :type hour: int\\n        :type minutes: int\\n        :rtype: float\\n        \"\"\"\\n        m = minutes*6\\n        h = hour*30 + float(minutes*30)/60\\n    \\n        return min(abs(m-h), 360-abs(m-h))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def angleClock(self, hour, minutes):\\n        \"\"\"\\n        :type hour: int\\n        :type minutes: int\\n        :rtype: float\\n        \"\"\"\\n        m = minutes*6\\n        h = hour*30 + float(minutes*30)/60\\n    \\n        return min(abs(m-h), 360-abs(m-h))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 736695,
                "title": "c-avoids-double-arithmetic-almost",
                "content": "Since calculations using doubles are more inefficient than ints, we keep the angles in half-degrees(0-720 instead of 0-360) until the very end.\\n\\nRemove unnecessary addition in delta calculation which should look like this:\\n```var delta = (hour == 12 ? 0 : hour * 60) + minutes - (minutes * 12);```\\nBut can be reduced to the line below.\\n\\nAvoids using Math.Abs\\n\\n```\\n    public double AngleClock(int hour, int minutes) {\\n        var delta = (hour == 12 ? 0 : hour * 60) - (minutes * 11);\\n        if (delta < 0) delta += 720;\\n        if (delta > 360) delta = 720 - delta;\\n        return delta / 2D;\\n    }\\n```",
                "solutionTags": [],
                "code": "```var delta = (hour == 12 ? 0 : hour * 60) + minutes - (minutes * 12);```\n```\\n    public double AngleClock(int hour, int minutes) {\\n        var delta = (hour == 12 ? 0 : hour * 60) - (minutes * 11);\\n        if (delta < 0) delta += 720;\\n        if (delta > 360) delta = 720 - delta;\\n        return delta / 2D;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 736596,
                "title": "c-angle-between-h-and-m-with-proof-and-explaination",
                "content": "class Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        /*\\n        \\n        total clock is divided into 12 sectors with 30 degree angle each as (360/12)=30\\n        \\n        each sector contributes 5 minutes so ->  30/5 = 6 degrees on each minute\\n        \\n        30*(hour%12) because we will calculate the shift with respect to 12 hour hand\\n        \\n        if some x minutes  past then how much does this contribute the hour hand rotation ? \\n        \\n        well, for 60 minutes it will turn 30 deg\\n        \\n            then for x minutes it will turn 30*x/60= x/2;\\n        \\n        so that is it take the difference of hour and minute hand then check which is minimum clockwise or anti             clockwise \\n        \\n        \\n        Please upvote if i was able to explain well  :-)\\n        \\n        */\\n        \\n        \\n        \\n        double ans= abs(30*(hour%12) + minutes/2.0 - 6*(minutes));\\n        \\n        \\n        return min(360-ans,ans);        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        /*\\n        \\n        total clock is divided into 12 sectors with 30 degree angle each as (360/12)=30\\n        \\n        each sector contributes 5 minutes so ->  30/5 = 6 degrees on each minute\\n        \\n        30*(hour%12) because we will calculate the shift with respect to 12 hour hand\\n        \\n        if some x minutes  past then how much does this contribute the hour hand rotation ? \\n        \\n        well, for 60 minutes it will turn 30 deg\\n        \\n            then for x minutes it will turn 30*x/60= x/2;\\n        \\n        so that is it take the difference of hour and minute hand then check which is minimum clockwise or anti             clockwise \\n        \\n        \\n        Please upvote if i was able to explain well  :-)\\n        \\n        */\\n        \\n        \\n        \\n        double ans= abs(30*(hour%12) + minutes/2.0 - 6*(minutes));\\n        \\n        \\n        return min(360-ans,ans);        \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 736594,
                "title": "faster-than-100-java",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n    \\n        double minuteAngle = (360/60)*minutes;\\n        double hourAngle = (360/12)*hour + minutes * (30.0/60.0);\\n        \\n        return Math.min(Math.abs(hourAngle-minuteAngle), 360-Math.abs(hourAngle-minuteAngle));\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n    \\n        double minuteAngle = (360/60)*minutes;\\n        double hourAngle = (360/12)*hour + minutes * (30.0/60.0);\\n        \\n        return Math.min(Math.abs(hourAngle-minuteAngle), 360-Math.abs(hourAngle-minuteAngle));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 736545,
                "title": "c-simple-oneliner-explained-100-time-95-space",
                "content": "In order to solve it in one line, I used the trick to declare an extra variable (`diff`) as a parameter.\\n\\nIn the body of my function, I then used the parentheses to assign it the result of my operation and then just use its result for the conditional of the ternary operator, whose clauses were now just using the updated value of `diff`.\\n\\nFor the math, I just grouped: the angle formed by the hours is computed as `h * 30 + m / 2.0`, since each full hour can only take `1 / 12` of the whole clock, so `360 / 12 == 30`, plus the portion matching how many minutes have passed since the last \"o\\'clock\" moment, ie: `m * 30 / 60.0 == m / 2.0`. For the minutes is even easier: each minute equates to `360 / 60`, that is to say, `6` degrees.\\n\\nYou end up having `h * 30 + m / 2.0 - m * 6` or, if you group another bit: `h * 30.0 - m * 11 / 2.0`.\\n\\nFinally, if the difference is bigger than half a circle (`180` degreess), then I take the smaller angle, computed as `360 - diff`; if it is smaller, I just take `diff` directly :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m, double diff = 0) {\\n        return (diff = abs(h * 30.0 - m * 11 / 2.0)) > 180 ? 360 - diff : diff;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m, double diff = 0) {\\n        return (diff = abs(h * 30.0 - m * 11 / 2.0)) > 180 ? 360 - diff : diff;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 736198,
                "title": "angle-between-hands-o-a-clock-answer-using-formula",
                "content": "class Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        double x =abs((11/2.0)*minutes-30*hour);\\n        if(x<180)\\n            return x;\\n        else\\n            return 360-x;\\n    }\\n};\\n\\nuse   angle=|(11/2.0)*minutes-30 * hour |\\nif angle>180 then 360-angle is the answer.\\nelse\\nangle is the answer.",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        double x =abs((11/2.0)*minutes-30*hour);\\n        if(x<180)\\n            return x;\\n        else\\n            return 360-x;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 736142,
                "title": "easiest-mathematical-explanation-with-4-line-readable-java-code",
                "content": "For **minutes angle** - \\n60 minutes = 360 angle\\ngiven minutes = ? angle\\n**minutesAngle = minutes\\\\*360/60 = minutes\\\\*6**\\n\\nFor **hour angle** - \\n1 hours = 30 angle\\ngiven hours = ? angle\\n**hourAngle = hour*30 + (angle due to minutes)**\\n**Exception :** for hour 12, hour angle will be 0 and total angle will be only due to minutes.\\n\\nFor **angle due to minutes** -\\n60 minutes = 30 angle\\ngiven minutes = ? angle\\n**angle due to minutes = minutes*30/60 = minutes/2**\\n```\\nclass Solution {\\n    public double angleClock(int hour, int min) {\\n        double minutes = min, minuteAngle=minutes*6;   //minutes variable is only for converting minutes to double from int\\n        double hoursAngle = (hour==12) ? minutes/2 : (hour*30)+(minutes/2);\\n        double angle = Math.abs(minuteAngle-hoursAngle);   //difference between both angles\\n        return angle>180 ? 360-angle : angle;   // for minimum angle, if angle is greater than 180, subtract it from 360\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int min) {\\n        double minutes = min, minuteAngle=minutes*6;   //minutes variable is only for converting minutes to double from int\\n        double hoursAngle = (hour==12) ? minutes/2 : (hour*30)+(minutes/2);\\n        double angle = Math.abs(minuteAngle-hoursAngle);   //difference between both angles\\n        return angle>180 ? 360-angle : angle;   // for minimum angle, if angle is greater than 180, subtract it from 360\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 736042,
                "title": "angle-between-hands-of-a-clock-clean-java-code",
                "content": "```\\nclass Solution {\\n    \\n    final double MIN_P_H     = 5.0;\\n    final double CIRCLE      = 360.0;\\n    final double SEMI_CIRCLE = 180.0;\\n    final double HOURS       = 12.0;\\n    final double MINUTES     = 60.0;\\n    final double DEGREE_P_H  = 30.0;\\n    \\n    public double angleClock(int hour, int minutes) {\\n        if(minutes == hour/MIN_P_H) return 0.0;\\n        \\n        double result = 0.0;\\n        \\n        double minutes_d = degreeOfMin(minutes);\\n        double hour_d    = degreeOfHour(hour, minutes);\\n        result = Math.abs(minutes_d - hour_d);\\n        \\n        if(result > SEMI_CIRCLE) result = Math.abs(result - CIRCLE);\\n        return result;\\n    }\\n    \\n    private double degreeOfMin(int m){\\n        if(m == 0) return 0.0;\\n        \\n        double minutes_ratio = m / MINUTES;\\n        return minutes_ratio * CIRCLE;\\n    }\\n    \\n    private double degreeOfHour(int h, int m){\\n        if(h == HOURS && m == 0) return 0.0;\\n        \\n        double hours_ratio = h / HOURS;\\n        double minutes_ratio = m / MINUTES;\\n        double hours_degree = (hours_ratio * CIRCLE) + (minutes_ratio * DEGREE_P_H);\\n        \\n        if(hours_degree > CIRCLE) hours_degree -= CIRCLE;\\n        return hours_degree;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    \\n    final double MIN_P_H     = 5.0;\\n    final double CIRCLE      = 360.0;\\n    final double SEMI_CIRCLE = 180.0;\\n    final double HOURS       = 12.0;\\n    final double MINUTES     = 60.0;\\n    final double DEGREE_P_H  = 30.0;\\n    \\n    public double angleClock(int hour, int minutes) {\\n        if(minutes == hour/MIN_P_H) return 0.0;\\n        \\n        double result = 0.0;\\n        \\n        double minutes_d = degreeOfMin(minutes);\\n        double hour_d    = degreeOfHour(hour, minutes);\\n        result = Math.abs(minutes_d - hour_d);\\n        \\n        if(result > SEMI_CIRCLE) result = Math.abs(result - CIRCLE);\\n        return result;\\n    }\\n    \\n    private double degreeOfMin(int m){\\n        if(m == 0) return 0.0;\\n        \\n        double minutes_ratio = m / MINUTES;\\n        return minutes_ratio * CIRCLE;\\n    }\\n    \\n    private double degreeOfHour(int h, int m){\\n        if(h == HOURS && m == 0) return 0.0;\\n        \\n        double hours_ratio = h / HOURS;\\n        double minutes_ratio = m / MINUTES;\\n        double hours_degree = (hours_ratio * CIRCLE) + (minutes_ratio * DEGREE_P_H);\\n        \\n        if(hours_degree > CIRCLE) hours_degree -= CIRCLE;\\n        return hours_degree;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 735918,
                "title": "python-readable-solution",
                "content": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        if hour == 12:\\n            hour = 0\\n        time_minutes = hour*60 + minutes\\n        hour_angle = (time_minutes * 360) / (12*60)\\n        minute_angle = (minutes * 360) / 60\\n        ans = abs(minute_angle - hour_angle)\\n        if ans > 180:\\n            ans = 360 - ans\\n\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        if hour == 12:\\n            hour = 0\\n        time_minutes = hour*60 + minutes\\n        hour_angle = (time_minutes * 360) / (12*60)\\n        minute_angle = (minutes * 360) / 60\\n        ans = abs(minute_angle - hour_angle)\\n        if ans > 180:\\n            ans = 360 - ans\\n\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 735846,
                "title": "c-just-1-line-easy-peasy-japanesey",
                "content": "For every one hour, the bigger hand rotates by 30\\xB0. And for every minute past that hour, the bigger hand further rotates by 0.5\\xB0. The minute hand rotates at 6\\xB0 per minute. Return the difference between both the hands. \\n```\\ndouble angleClock(int hour, int minutes)\\n        return min(abs(hour*30 - minutes*5.5), 360-abs(hour*30 - minutes*5.5));\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\ndouble angleClock(int hour, int minutes)\\n        return min(abs(hour*30 - minutes*5.5), 360-abs(hour*30 - minutes*5.5));\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 735783,
                "title": "java-o-1-math-formula",
                "content": "Explanation: For the hours, you have 12 different values. For the minutes you have 60 different values. You can then divide 360 degrees into 12 parts for the hours (result is 30), and divide 360 degrees into 60 parts for the minutes (result: 6).\\n\\nNow you can easily calculate how many degrees there are between the beginning of each pointer and their current position. For the hours it would be `30*hours` and for the minutes it would be `6*minutes`. But be careful! The hour pointer can be anywhere between the current and the next hour, so you can\\'t just take the hours value, you need to use the minutes to calculate where, in between the current and the next hour, the pointer is. You do that by using `30 * (hours + minutes/60)`.\\n\\nNow, in order to calculate the angle between, you take the difference between the two calculated degrees. Beware that the result can be negative, as you won\\'t know which pointer is ahead of the other, so you take the absolute value of that difference. Also, you do not know if you calculated the bigger or the smaller angle, so you do take the minimum between the calculated angle and its complement: `min(calculated,360-calculated)`.\\n\\nThe formula can then be worked.\\n1. `| 6minutes - 30 * (hours + minutes/60) |`\\n2. `| 6minutes - 30hours - 30minutes/60 |`\\n3. `| 6minutes - 30hours - minutes/2 |`\\n4. `| 12minutes/2 - 60hours/2 - minutes/2 |`\\n5. `| 11minutes/2 - 60hours/2 |`\\n6. `| (11minutes - 60hours)/2 |`\\n\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double a = Math.abs((11*minutes - 60*hour)/2.0);\\n        return Math.min(a,360-a);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double a = Math.abs((11*minutes - 60*hour)/2.0);\\n        return Math.min(a,360-a);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 735712,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n        double diff = (minutes/60.0)*30;\\n        \\n        double hourHand = hour * 30 + diff;\\n        double minuteHand = minutes * 6;\\n        \\n        double ans = hourHand - minuteHand;\\n        if(ans < 0){\\n            ans = -ans;\\n        }\\n        if(ans > 180){\\n            ans = 360 - ans;\\n        }\\n       \\n        return ans;\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        \\n        double diff = (minutes/60.0)*30;\\n        \\n        double hourHand = hour * 30 + diff;\\n        double minuteHand = minutes * 6;\\n        \\n        double ans = hourHand - minuteHand;\\n        if(ans < 0){\\n            ans = -ans;\\n        }\\n        if(ans > 180){\\n            ans = 360 - ans;\\n        }\\n       \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 735664,
                "title": "go-0ms-faster-than-100",
                "content": "```go\\nfunc angleClock(hour int, minutes int) float64 {\\n    hour %= 12\\n    ma, ha := 360.0/60.0*float64(minutes), 360.0/12.0*float64(hour) + 360.0/12.0*float64(minutes)/60.0\\n    a := math.Max(ma, ha) - math.Min(ma, ha)\\n    \\n    if a > 180.0 {\\n        return 360.0 - a\\n    }\\n    \\n    return a\\n}\\n```",
                "solutionTags": [],
                "code": "```go\\nfunc angleClock(hour int, minutes int) float64 {\\n    hour %= 12\\n    ma, ha := 360.0/60.0*float64(minutes), 360.0/12.0*float64(hour) + 360.0/12.0*float64(minutes)/60.0\\n    a := math.Max(ma, ha) - math.Min(ma, ha)\\n    \\n    if a > 180.0 {\\n        return 360.0 - a\\n    }\\n    \\n    return a\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 735651,
                "title": "suddh-desi-math",
                "content": "```\\n public static double angleClock(int hour, int minutes) {\\n\\n        /**\\n         * What do i know :\\n         *\\n         * Total Degrees = 360. For 12 hours\\n         * In 1 hour = 360/12 = 30 degrees.\\n         * In 1 hour(60 minutes) = 30 degree, So 1 minute = 30/60 ==> 1/2;\\n         *\\n         * Now how much hour has moved in corresponding to minute.\\n         * HourDegree = hour * 30 + (minutes/60) * 30;\\n         *\\n         * Or we can also write as\\n         * HourDegree = hour * 30 + minute/2\\n         *\\n         * For Minutes it\\'s simple :\\n         * In 1 minute = 360/60 ==> 6 degree.\\n         *\\n         * So for given minutes\\n         * MinutesDegree = minutes * 6;\\n         *\\n         * Edge case if someone has given time 12:30....we have to consider time from 0 to 11... else 12 * 30 will overshoot\\n         */\\n        double hourDegree = hour * 30 + (minutes / 2d);\\n        double minuteDegree = minutes * 6;\\n\\n        double absoluteDifferenceInDegree = Math.abs(hourDegree - minuteDegree);\\n\\n        return absoluteDifferenceInDegree > 180 ? 360 - absoluteDifferenceInDegree : absoluteDifferenceInDegree;\\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\n public static double angleClock(int hour, int minutes) {\\n\\n        /**\\n         * What do i know :\\n         *\\n         * Total Degrees = 360. For 12 hours\\n         * In 1 hour = 360/12 = 30 degrees.\\n         * In 1 hour(60 minutes) = 30 degree, So 1 minute = 30/60 ==> 1/2;\\n         *\\n         * Now how much hour has moved in corresponding to minute.\\n         * HourDegree = hour * 30 + (minutes/60) * 30;\\n         *\\n         * Or we can also write as\\n         * HourDegree = hour * 30 + minute/2\\n         *\\n         * For Minutes it\\'s simple :\\n         * In 1 minute = 360/60 ==> 6 degree.\\n         *\\n         * So for given minutes\\n         * MinutesDegree = minutes * 6;\\n         *\\n         * Edge case if someone has given time 12:30....we have to consider time from 0 to 11... else 12 * 30 will overshoot\\n         */\\n        double hourDegree = hour * 30 + (minutes / 2d);\\n        double minuteDegree = minutes * 6;\\n\\n        double absoluteDifferenceInDegree = Math.abs(hourDegree - minuteDegree);\\n\\n        return absoluteDifferenceInDegree > 180 ? 360 - absoluteDifferenceInDegree : absoluteDifferenceInDegree;\\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 735567,
                "title": "c-simple-straightforward-solution-100-00",
                "content": "```\\n// Please, UpVote, if you like it :-)\\ndouble angleClock(int hour, int minutes) {\\n\\tdouble minutesAngle = (360 / 60) * minutes;\\n\\tdouble hoursAngle = (360 / 12) * (hour % 12);\\n\\thoursAngle += (360 / 12) * (minutes / 60.0); // minutes for adding to hours\\n\\tdouble angle = abs(minutesAngle - hoursAngle);\\n\\treturn min(angle, 360 - angle);\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n// Please, UpVote, if you like it :-)\\ndouble angleClock(int hour, int minutes) {\\n\\tdouble minutesAngle = (360 / 60) * minutes;\\n\\tdouble hoursAngle = (360 / 12) * (hour % 12);\\n\\thoursAngle += (360 / 12) * (minutes / 60.0); // minutes for adding to hours\\n\\tdouble angle = abs(minutesAngle - hoursAngle);\\n\\treturn min(angle, 360 - angle);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 735478,
                "title": "c-one-liner",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n        return min(abs(h*30- 5.5*m), 360-abs(h*30- 5.5*m));\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n        return min(abs(h*30- 5.5*m), 360-abs(h*30- 5.5*m));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 735467,
                "title": "c-simple-maths-0ms-soln-100",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hrNeedle=(hour+(minutes/60.0))*30;\\n        double minNeedle=minutes*6.0;\\n        double diff=abs(hrNeedle-minNeedle);\\n        return min(diff,360.0-diff);\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hrNeedle=(hour+(minutes/60.0))*30;\\n        double minNeedle=minutes*6.0;\\n        double diff=abs(hrNeedle-minNeedle);\\n        return min(diff,360.0-diff);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 735435,
                "title": "java-3-lines-100-with-0ms",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n\\t\\t//The absolute degree between two needles.\\n\\t\\t//Minute: 1minute = 6 degrees\\n\\t\\t//Hour: 1hour = 30 degrees\\n\\t\\t//For Hour needle, we take modulus 12 because the degree of 12 o\\'clock is 0.\\n\\t\\t//However the degree of Hour needle needs to take into account the progress\\n\\t\\t// of the Minute needle, which is min/60, with min varies from 0 to 60. During this \\n\\t\\t// progression, the Hour needle can move a total of 30 degrees, that\\'s why we add \\n\\t\\t// 30* min/60 to the Hour needle angle.\\n        double ans=Math.abs(((hour%12)*30+(double)minutes/2)-minutes*6);\\n\\t\\t\\n        if(ans>180)ans=360-ans;\\n\\t\\t//We want the smaller angle.\\n\\t\\t//Math.min() is avoided as it slows down the code.\\n\\t\\t\\n        return ans;\\n    }\\n}\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n\\t\\t//The absolute degree between two needles.\\n\\t\\t//Minute: 1minute = 6 degrees\\n\\t\\t//Hour: 1hour = 30 degrees\\n\\t\\t//For Hour needle, we take modulus 12 because the degree of 12 o\\'clock is 0.\\n\\t\\t//However the degree of Hour needle needs to take into account the progress\\n\\t\\t// of the Minute needle, which is min/60, with min varies from 0 to 60. During this \\n\\t\\t// progression, the Hour needle can move a total of 30 degrees, that\\'s why we add \\n\\t\\t// 30* min/60 to the Hour needle angle.\\n        double ans=Math.abs(((hour%12)*30+(double)minutes/2)-minutes*6);\\n\\t\\t\\n        if(ans>180)ans=360-ans;\\n\\t\\t//We want the smaller angle.\\n\\t\\t//Math.min() is avoided as it slows down the code.\\n\\t\\t\\n        return ans;\\n    }\\n}\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 735425,
                "title": "c-solution-in-two-line",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double g=abs(30*hour-5.5*minutes);\\n        return min(g,360-g);\\n    }\\n};\\n ```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double g=abs(30*hour-5.5*minutes);\\n        return min(g,360-g);\\n    }\\n};\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 735368,
                "title": "c-4-line-solution-with-explanation",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hourDegree = (hour+(minutes/60.00))*30.00; // Hour*30 for degrees hour needle has covered + extra degrees covered by hour according to minute.\\n        double minDegree = minutes*6.00; // 1 minute is 6 degrees\\n        \\n        double diff = abs(hourDegree - minDegree);\\n        \\n        return min(diff, 360.00-diff);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hourDegree = (hour+(minutes/60.00))*30.00; // Hour*30 for degrees hour needle has covered + extra degrees covered by hour according to minute.\\n        double minDegree = minutes*6.00; // 1 minute is 6 degrees\\n        \\n        double diff = abs(hourDegree - minDegree);\\n        \\n        return min(diff, 360.00-diff);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 724080,
                "title": "100-faster-cpp",
                "content": "```\\n double angleClock(int h, int m) {\\n        double d,x,d1;\\n        if(h==12)\\n            h=0;\\n        d=abs(h*30-5.5*m);\\n        d1=min(d,360-d);\\n        \\n        \\n        return d1;\\n    }\\n\\t",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n double angleClock(int h, int m) {\\n        double d,x,d1;\\n        if(h==12)\\n            h=0;\\n        d=abs(h*30-5.5*m);\\n        d1=min(d,360-d);\\n        \\n        \\n        return d1;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 641291,
                "title": "java-0ms-100",
                "content": "```\\n    public double angleClock(int hour, int minutes) {\\n        hour = hour % 12;\\n        double tmp = minutes * 1.0 / 60 * 30;\\n        double hourAngle = hour * 30 + tmp;\\n        double minuteAngle = tmp * 12;\\n        double gap = Math.abs(hourAngle - minuteAngle);\\n        return Math.min(gap, 360 - gap);\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public double angleClock(int hour, int minutes) {\\n        hour = hour % 12;\\n        double tmp = minutes * 1.0 / 60 * 30;\\n        double hourAngle = hour * 30 + tmp;\\n        double minuteAngle = tmp * 12;\\n        double gap = Math.abs(hourAngle - minuteAngle);\\n        return Math.min(gap, 360 - gap);\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 634685,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {number} hour\\n * @param {number} minutes\\n * @return {number}\\n */\\nvar angleClock = function(hour, minutes) {\\n    if(hour == 12){\\n        hour = 0\\n    }\\n    let min = minutes/5\\n    \\n    let newHour = Math.abs(hour + minutes/60)\\n    let angle = Math.abs(newHour-min)*30\\n    return Math.min((360-angle),angle)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} hour\\n * @param {number} minutes\\n * @return {number}\\n */\\nvar angleClock = function(hour, minutes) {\\n    if(hour == 12){\\n        hour = 0\\n    }\\n    let min = minutes/5\\n    \\n    let newHour = Math.abs(hour + minutes/60)\\n    let angle = Math.abs(newHour-min)*30\\n    return Math.min((360-angle),angle)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 615354,
                "title": "c-100-100",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) \\n    {\\n        double hourAngle = (hour % 12) * 30 + 1.0 * minutes / 2, minuteAngle = minutes * 6;\\n        return min(abs(hourAngle - minuteAngle), 360 - abs(hourAngle - minuteAngle));\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) \\n    {\\n        double hourAngle = (hour % 12) * 30 + 1.0 * minutes / 2, minuteAngle = minutes * 6;\\n        return min(abs(hourAngle - minuteAngle), 360 - abs(hourAngle - minuteAngle));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 568481,
                "title": "python-99-one-liner-explained",
                "content": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        h,m = (360*(hour+minutes/60)/12) % 360 , (360*minutes/60) \\n        d = abs(h-m)\\n        return d if d<180 else 360 - d\\n```\\n\\nLet\\'s start with a 3 liner. There are a couple catches here.\\n\\n1. if we start from 0, the minutes never go above 60. But the hours can be actually above 12 (like if we get 12:59 - that\\'s almost 1:00), so we need to add minutes to the hours:\\n\\n```\\n        h,m = (360*(hour+minutes/60)/12) % 360 , (360*minutes/60) \\n```\\n\\nThe hours can go from 0:00 - that\\'s 0 to 12:00 - that\\'s 360 and even higher to 12:59 - that\\'s above 360. So if our hour angle goes above 360 - we need to bring reduce it by 360, that\\'s done by `% 360`\\n\\n3. The angle between the arrows can\\'t be more than 180, so we need to find the diff. We do it in two steps:\\n\\n```\\n        d = abs(h-m)\\n\\t\\treturn d if d<180 else 360 - d\\n```\\n\\nThat looks somewhat random, but there is meaning to it. The angle between arrows is relative and can be measured in two ways - clockwise and counterclockwise. One if those angles is going to be <=180, another one is >=180 . So we need to pick the smaller angle regardless of the direction. The first `abs()` call basically means we don\\'t care if the angle is measured clockwise or counterwise. And the 2nd `if` statement says that we need to pick the smaller one.\\n\\nOk, so where is the one-liner? Here you go, the same code, just re-packaged:\\n\\n```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        return d if (d := abs(30*(hour+minutes/60) % 360 - 6*minutes)) <180 else 360 - d\\n ```\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        h,m = (360*(hour+minutes/60)/12) % 360 , (360*minutes/60) \\n        d = abs(h-m)\\n        return d if d<180 else 360 - d\\n```\n```\\n        h,m = (360*(hour+minutes/60)/12) % 360 , (360*minutes/60) \\n```\n```\\n        d = abs(h-m)\\n\\t\\treturn d if d<180 else 360 - d\\n```\n```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        return d if (d := abs(30*(hour+minutes/60) % 360 - 6*minutes)) <180 else 360 - d\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 565039,
                "title": "java-simple-and-easy-to-understand",
                "content": "class Solution {\\n\\n\\tpublic double angleClock(int hour, int minutes) {\\n\\t\\t\\n\\t\\tdouble h = (hour % 12) * 30 + (minutes / 60.0) * 30;\\n\\t\\tdouble m = minutes * 6;\\n\\t\\tdouble abs = Math.abs(h - m);\\n\\n\\t\\treturn abs > 180 ? 360 - abs : abs;\\n\\t}\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\n\\tpublic double angleClock(int hour, int minutes) {\\n\\t\\t\\n\\t\\tdouble h = (hour % 12) * 30 + (minutes / 60.0) * 30;\\n\\t\\tdouble m = minutes * 6;\\n\\t\\tdouble abs = Math.abs(h - m);\\n\\n\\t\\treturn abs > 180 ? 360 - abs : abs;\\n\\t}",
                "codeTag": "Java"
            },
            {
                "id": 555054,
                "title": "java-beats-100-time-space",
                "content": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double h_dev = (minutes != 60 && minutes != 0) ? (((double)minutes/60) / 12 ) * 360 : 0;\\n        double h = hour != 12 ? ((double)hour / 12 ) * 360 : 0;\\n        double h_angle_from_12 = h + h_dev;\\n        double m_angle_from_12 = minutes != 60 ? ((double)minutes / 60) * 360 : 0;\\n        \\n        return Math.min(Math.abs(h_angle_from_12 - m_angle_from_12),Math.abs(360 - Math.abs(h_angle_from_12 - m_angle_from_12)));\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double h_dev = (minutes != 60 && minutes != 0) ? (((double)minutes/60) / 12 ) * 360 : 0;\\n        double h = hour != 12 ? ((double)hour / 12 ) * 360 : 0;\\n        double h_angle_from_12 = h + h_dev;\\n        double m_angle_from_12 = minutes != 60 ? ((double)minutes / 60) * 360 : 0;\\n        \\n        return Math.min(Math.abs(h_angle_from_12 - m_angle_from_12),Math.abs(360 - Math.abs(h_angle_from_12 - m_angle_from_12)));\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 550569,
                "title": "c-one-liner",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        return abs((hour % 12) * 30.0 - minutes * 5.5) > 180 ? 360.0 - abs((hour % 12) * 30.0 - minutes * 5.5) : abs((hour % 12) * 30.0 - minutes * 5.5);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        return abs((hour % 12) * 30.0 - minutes * 5.5) > 180 ? 360.0 - abs((hour % 12) * 30.0 - minutes * 5.5) : abs((hour % 12) * 30.0 - minutes * 5.5);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 549352,
                "title": "java-solution-beats-100-time-space",
                "content": "360 for 12h -> 1 h has 30\\n360 for 60m -> 1 m has 6\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        if (hour == 12) hour = 0;\\n\\n        double hh = (hour + minutes * 1.0 / 60) * 30;\\n        double mm = minutes * 6;\\n\\n        double diff = Math.abs(hh - mm);\\n        return Math.min(diff, 360 - diff);\\n    }\\n}\\n```\\n\\nMore concise code\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double diff = Math.abs(hour * 30 - minutes * 5.5);\\n        return Math.min(diff, 360 - diff);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        if (hour == 12) hour = 0;\\n\\n        double hh = (hour + minutes * 1.0 / 60) * 30;\\n        double mm = minutes * 6;\\n\\n        double diff = Math.abs(hh - mm);\\n        return Math.min(diff, 360 - diff);\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double diff = Math.abs(hour * 30 - minutes * 5.5);\\n        return Math.min(diff, 360 - diff);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 509782,
                "title": "javascript-and-c-solutions",
                "content": "**Synopsis:**\\n\\nCalculate the degree of the hour hand and the degree of the minute hand.  Return the answer as the difference between these two degrees.\\n\\n**Note:** if this difference is greater-than `180` degrees, then subtract `180` from the answer (ie. it is a smaller degree difference between the two hands on the other side of the clock).  For example, let\\'s say the degree difference is `270`, then `270 - 180 = 90`.  This is the same value as `360 - 270 = 90`.  So we can simply return the minimum of the `answer` and `360 - answer`.\\n\\n**Formulas:**\\n```\\nh = hours\\nm = minutes\\n\\t\\t\\t \\nhour degree = h * 360 / 12 + 30 * m / 60\\n            = h * 30 + m / 2\\n\\nminute degree = m / 60 * 360\\n              = m * 6\\n\\nanswer degree = abs(hour degree - minute degree)\\n              = abs(h * 30 + m / 2 - m * 6)\\n              = abs(h * 30 - m * 5.5)\\n```\\n\\n**Runtime:** O(1)\\n\\n---\\n\\n**Concise Solutions:**\\n\\n*Javascript*\\n```\\nlet angleClock = (h, m) => {\\n    let degree = Math.abs(h * 30 - m * 5.5);\\n    return Math.min(degree, 360 - degree);\\n};\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n        auto degree = abs(h * 30 - m * 5.5);\\n        return min(degree, 360 - degree);\\n    }\\n};\\n```\\n\\n---\\n\\n**Verbose Solutions:**\\n\\n*Javascript*\\n```\\nlet angleClock = (h, m) => {\\n    if (h == 12)\\n        h = 0;\\n    h = 30 * h + 0.5 * m;\\n    m = 6 * m;\\n    let degree = Math.max(h, m) - Math.min(h, m);\\n    return Math.min(degree, 360 - degree)\\n};\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m, double offset = 1e5) {\\n        if (h == 12)\\n            h = 0;\\n        h = offset * (30 * h + 0.5 * m);\\n        m = offset * (6 * m);\\n        auto degree = max(h, m) - min(h, m);\\n        return min(degree / offset, 360 - degree / offset);\\n    }\\n};\\n```\\n\\n---\\n\\n**Supplemental Notes:**\\n\\n60 minutes for 360 degrees -> 1 minute for every 6 degrees\\n\\n12 hours for 360 degrees -> 1 hour for every 30 degrees\\n\\nwithin that 30 degrees, the minute hand alters the hour hand\\n\\n60 minutes for 30 degrees -> 1 minute for every 0.5 degrees\\n\\nformulas:\\n\\nh = 30 * h + 0.5 * m\\nm = 6 * m\\n\\nexamples:\\n\\nInput: hour = 12, minutes = 30\\nOutput: 165\\n\\nhour = 12 -> degree = 0 + 30 * 0.5 = 15\\nmin = 30 -> degree = 30 * 6 = 180\\n180 - 15 = 165\\n\\nInput: hour = 3, minutes = 30\\nOutput: 75\\n\\nhour = 3 -> degree = 3 * 30 = 90 + 30 * 0.5 = 105\\nmin = 30 -> degree = 30 * 6 = 180\\n180 - 105 = 75\\n\\nInput: hour = 3, minutes = 15\\nOutput: 7.5\\n\\nhour = 3 -> degree = 3 * 30 = 90 + 15 * 0.5 = 97.5\\nmin = 15 -> degree = 15 * 6 = 90\\n97.5 - 80 = 7.5\\n\\nInput: hour = 4, minutes = 50\\nOutput: 155\\n\\nhour = 4 -> degree = 4 * 30 = 120 + 50 * 0.5 = 145\\nmin = 50 -> degree = 50 * 6 = 300\\n300 - 145 = 155",
                "solutionTags": [],
                "code": "```\\nh = hours\\nm = minutes\\n\\t\\t\\t \\nhour degree = h * 360 / 12 + 30 * m / 60\\n            = h * 30 + m / 2\\n\\nminute degree = m / 60 * 360\\n              = m * 6\\n\\nanswer degree = abs(hour degree - minute degree)\\n              = abs(h * 30 + m / 2 - m * 6)\\n              = abs(h * 30 - m * 5.5)\\n```\n```\\nlet angleClock = (h, m) => {\\n    let degree = Math.abs(h * 30 - m * 5.5);\\n    return Math.min(degree, 360 - degree);\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m) {\\n        auto degree = abs(h * 30 - m * 5.5);\\n        return min(degree, 360 - degree);\\n    }\\n};\\n```\n```\\nlet angleClock = (h, m) => {\\n    if (h == 12)\\n        h = 0;\\n    h = 30 * h + 0.5 * m;\\n    m = 6 * m;\\n    let degree = Math.max(h, m) - Math.min(h, m);\\n    return Math.min(degree, 360 - degree)\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    double angleClock(int h, int m, double offset = 1e5) {\\n        if (h == 12)\\n            h = 0;\\n        h = offset * (30 * h + 0.5 * m);\\n        m = offset * (6 * m);\\n        auto degree = max(h, m) - min(h, m);\\n        return min(degree / offset, 360 - degree / offset);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 504892,
                "title": "c-very-easy-solution-4-line-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double minute_angle = (360*minutes)/60;\\n        double hour_angle = (hour%12)*30 + (30*(double)minutes)/60;\\n        double ans = abs(minute_angle - hour_angle);\\n        return min(ans,360-ans);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double minute_angle = (360*minutes)/60;\\n        double hour_angle = (hour%12)*30 + (30*(double)minutes)/60;\\n        double ans = abs(minute_angle - hour_angle);\\n        return min(ans,360-ans);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 503917,
                "title": "java-simple-solution-using-basic-maths",
                "content": "12 hours = 360 degree => 1 hour = 30 degree angle\\n60 minutes =  360 degree => 1 minute = 6 degree angle\\n1hour = 60 minutes => 1 minute = 1/60 hour\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double angle = Math.abs(30.0 * (hour % 12 + (double) minutes / 60) - 6 * minutes);\\n        return (angle <= 180.0) ? angle : 360 - angle;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double angle = Math.abs(30.0 * (hour % 12 + (double) minutes / 60) - 6 * minutes);\\n        return (angle <= 180.0) ? angle : 360 - angle;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 503266,
                "title": "java-4-line-very-simple-code-easy-to-understand",
                "content": "**step1**: compute the clockwise minutess angle difference from \"12\" \\n**step2**: compute the clockwise hours angle difference from \"12\" (which may be influnced by minutes hand)\\n**step3**: compute the absolute difference between the previous diff and return the smaller one: ```min(diff, 360 - diff)```\\n\\n\\n**Code**:\\n```java\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double minAngle = minutes * 6.0;     // Clockwise Angle difference from \"12\"\\n        double hourAngle = (hour % 12) * 30.0 + minutes * 0.5;  // min/60 * 30\\n        double diff = Math.abs(hourAngle - minAngle);\\n        return Math.min(diff, 360 - diff);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```min(diff, 360 - diff)```\n```java\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double minAngle = minutes * 6.0;     // Clockwise Angle difference from \"12\"\\n        double hourAngle = (hour % 12) * 30.0 + minutes * 0.5;  // min/60 * 30\\n        double diff = Math.abs(hourAngle - minAngle);\\n        return Math.min(diff, 360 - diff);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 502810,
                "title": "c-simple-solution",
                "content": "We multiple minutes to 6 (because 360 / 60 = 6), also we transfer haur  to minutes and divide it to 2 (because 360/720 = 0.5).\\n360 total angel in clock\\n60 is minutes in 1 hour \\n720 is 12 hours in minutes\\n```\\ndouble angleClock(int hour, int minutes) {\\n\\tdouble res = 0;\\n\\tdouble minAngle = (double)minutes * 6;\\n\\tdouble hourAngle = ((double)hour * 60 + (double)minutes) / 2;\\n\\tres = abs(hourAngle - minAngle);\\n\\tres = min(res, 360 - res);\\n\\treturn res;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\ndouble angleClock(int hour, int minutes) {\\n\\tdouble res = 0;\\n\\tdouble minAngle = (double)minutes * 6;\\n\\tdouble hourAngle = ((double)hour * 60 + (double)minutes) / 2;\\n\\tres = abs(hourAngle - minAngle);\\n\\tres = min(res, 360 - res);\\n\\treturn res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 502709,
                "title": "python",
                "content": "```python\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        if (hour == 12): \\n            hour = 0\\n        if (minutes == 60): \\n            minutes = 0\\n        hour_angle = 0.5 * (hour * 60 + minutes) \\n        minute_angle = 6 * minutes\\n\\n        angle = abs(hour_angle - minute_angle)  \\n        angle = min(360 - angle, angle) \\n\\n        return angle",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        if (hour == 12): \\n            hour = 0\\n        if (minutes == 60): \\n            minutes = 0\\n        hour_angle = 0.5 * (hour * 60 + minutes) \\n        minute_angle = 6 * minutes\\n\\n        angle = abs(hour_angle - minute_angle)  \\n        angle = min(360 - angle, angle) \\n\\n        return angle",
                "codeTag": "Java"
            },
            {
                "id": 4072348,
                "title": "as-simple-as-you-done-in-your-schooling",
                "content": "# Intuition\\nJust as you done in aptitude\\n\\n# Approach\\nCalcuate minute spaces and thats it....\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        int hr_mul=30;\\n        double hr_min_mul=0.5;\\n        int min_mul=6;\\n        double i=hour*hr_mul;\\n        double j=minutes*hr_min_mul;\\n        double k=fmod(i+j,360.0);\\n        double l=minutes*min_mul;\\n        return min(fabs(k - l), 360.0 - fabs(k - l));;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        int hr_mul=30;\\n        double hr_min_mul=0.5;\\n        int min_mul=6;\\n        double i=hour*hr_mul;\\n        double j=minutes*hr_min_mul;\\n        double k=fmod(i+j,360.0);\\n        double l=minutes*min_mul;\\n        return min(fabs(k - l), 360.0 - fabs(k - l));;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4046543,
                "title": "python-solution-with-formula",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nEvery minute, the minute hand moves 6 degrees.(because 360/60 = 6 degrees)\\nEvery minute, the hour hand moves half a degree (there are 720 minutes in half a day).\\nSo At h:mm, the hour hand has moved (60h + m) * 0.5 degrees = 30h + m/2\\nThe minute hand is at 6m degrees\\nThe difference between is (30h + m/2) - 6m = 30h - (11/2)m.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTo find other angle,we just have to subtract with 360\\ni.e., 360-(30h)+5.5*m\\nFinally return the minimum angle of these angles\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n      a = abs(30*hour-5.5*minutes)\\n      b = abs(360-a)\\n      return b if a>b else a\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n      a = abs(30*hour-5.5*minutes)\\n      b = abs(360-a)\\n      return b if a>b else a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4037869,
                "title": "easy-4-line-python3-solution",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        hr_ang = (hour*30+0.5*minutes)%360\\n        min_ang = minutes*6%360\\n        diff =  abs(min_ang - hr_ang)\\n        return min(diff,360-diff)\\n        \\n\\n\\n\\n\\n\\n\\n        \\n        \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        hr_ang = (hour*30+0.5*minutes)%360\\n        min_ang = minutes*6%360\\n        diff =  abs(min_ang - hr_ang)\\n        return min(diff,360-diff)\\n        \\n\\n\\n\\n\\n\\n\\n        \\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4036069,
                "title": "c-solution-0ms-beats-100",
                "content": "**Explanation:**\\n\\nFirst find the angle that the hour hand makes:\\nThe hour hand will complete 30\\xB0 in one hour and using this we can deduce that if the hour hand moves 30\\xB0 in 1 hour (60 minutes) then it will move 30\\xB0/60 = 0.5\\xB0 in a minute. \\nTherefore, we can say the angle moved by the hour hand `= (30 * hour) + (0.5 * minutes)`.\\n\\nSimilarily, find the angle that the minute hand makes:\\nWe know that the 60 minutes equals one hour and so, minute hand completes 360\\xB0 (one revolution) in 60 minutes. Thus, the minute hand covers 360\\xB0/60 = 6\\xB0 in a minute.\\nTherefore, we can say the angle moved by the minute hand `= (6 * minutes)`.\\n\\nThe total angle between the hands equals to the absolute difference of the two angles.\\nNext, simply check if the angle calculated is greater than 180\\xB0, if so, then to return the smallest angle subtract the angle from 360\\xB0.\\n\\n**Solution:**\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hour_angle = (30*hour)+(0.5*minutes);\\n        double minute_angle = (6*minutes);\\n        double angle = abs(hour_angle - minute_angle);\\n        if(angle > 180) return (double)(360-angle);\\n        return angle;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double hour_angle = (30*hour)+(0.5*minutes);\\n        double minute_angle = (6*minutes);\\n        double angle = abs(hour_angle - minute_angle);\\n        if(angle > 180) return (double)(360-angle);\\n        return angle;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4035218,
                "title": "c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        // find for minutes\\n        double a = (minutes / 60.0000) * 360.0000;\\n\\n        // find for hour\\n        double b = 0;\\n        if(hour < 12) b = (hour / 12.0000) * 360.0000;\\n\\n        b += (minutes / 60.0000) * 30.0000;\\n \\n        cout << a << \" \" << b << endl;\\n        if(abs(a - b) <= 180)  return abs(a - b);\\n\\n        if(a > 180) return 360 - a + b;\\n        return 360 - b + a;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        // find for minutes\\n        double a = (minutes / 60.0000) * 360.0000;\\n\\n        // find for hour\\n        double b = 0;\\n        if(hour < 12) b = (hour / 12.0000) * 360.0000;\\n\\n        b += (minutes / 60.0000) * 30.0000;\\n \\n        cout << a << \" \" << b << endl;\\n        if(abs(a - b) <= 180)  return abs(a - b);\\n\\n        if(a > 180) return 360 - a + b;\\n        return 360 - b + a;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4023269,
                "title": "easy-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n{\\n    public:\\n        double angleClock(int hour, int minutes)\\n        {\\n            double total_hour = double(hour) + double(minutes) / 60;\\n\\n           \\t//12 hr -> 360 degrees\\n           \\t//1 hr  -> 30 degress\\n           \\t//x hr  -> x*30;\\n            double angle_hour_hand = total_hour * 30;\\n\\n           \\t//60 min -> 360 degrees\\n           \\t//1 min  -> 6 degrees\\n           \\t//y min  -> y*6\\n\\n            double angle_minute_hand = minutes * 6;\\n            if(angle_hour_hand >= 360)\\n              angle_hour_hand = angle_hour_hand-360;\\n\\n            double result = abs(angle_minute_hand - angle_hour_hand);\\n            if(result > 180)\\n              return 360-result;\\n            return result;\\n        }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution\\n{\\n    public:\\n        double angleClock(int hour, int minutes)\\n        {\\n            double total_hour = double(hour) + double(minutes) / 60;\\n\\n           \\t//12 hr -> 360 degrees\\n           \\t//1 hr  -> 30 degress\\n           \\t//x hr  -> x*30;\\n            double angle_hour_hand = total_hour * 30;\\n\\n           \\t//60 min -> 360 degrees\\n           \\t//1 min  -> 6 degrees\\n           \\t//y min  -> y*6\\n\\n            double angle_minute_hand = minutes * 6;\\n            if(angle_hour_hand >= 360)\\n              angle_hour_hand = angle_hour_hand-360;\\n\\n            double result = abs(angle_minute_hand - angle_hour_hand);\\n            if(result > 180)\\n              return 360-result;\\n            return result;\\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991811,
                "title": "100-beats-cpp-easy-and-simple-solution-with-the-approach",
                "content": "double angleClock(int hour, int minutes) {\\n       if(hour==12)\\n           hour=0;\\n\\t\\t   \\n\\t\\t   /*    12 hour=360;\\n\\t\\t     1hour=30 deg rotate;\\n\\t\\t\\t 60 min=30 deg\\n\\t\\t\\t 1 min=1/2deg;\\n\\t\\t\\t so n minutes=n/2 deg\\n\\t\\t\\t hour=hour+minutes/2deg;\\n\\t\\t\\t */\\n        double h1=(minutes/5.0-0)*30;             \\n        double angle=(hour-0)*30+minutes/2.0;\\n       \\n        return min(abs(angle-h1),360-abs(angle-h1));\\n       \\n        \\n    }",
                "solutionTags": [],
                "code": "double angleClock(int hour, int minutes) {\\n       if(hour==12)\\n           hour=0;\\n\\t\\t   \\n\\t\\t   /*    12 hour=360;\\n\\t\\t     1hour=30 deg rotate;\\n\\t\\t\\t 60 min=30 deg\\n\\t\\t\\t 1 min=1/2deg;\\n\\t\\t\\t so n minutes=n/2 deg\\n\\t\\t\\t hour=hour+minutes/2deg;\\n\\t\\t\\t */\\n        double h1=(minutes/5.0-0)*30;             \\n        double angle=(hour-0)*30+minutes/2.0;\\n       \\n        return min(abs(angle-h1),360-abs(angle-h1));\\n       \\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3985725,
                "title": "beats-100-best-and-o-1-time-and-space-complexity",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        if(hour==12)\\n        hour=0;\\n        double x=abs((60*hour)-(11*minutes));\\n        if(x/2<=180)\\n            return (x/2);\\n        else\\n            return 360-(x/2);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        if(hour==12)\\n        hour=0;\\n        double x=abs((60*hour)-(11*minutes));\\n        if(x/2<=180)\\n            return (x/2);\\n        else\\n            return 360-(x/2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3978899,
                "title": "clock-angle-direct-formula",
                "content": "# Approach\\nFormula for angle: \\n**angle = (11 / 2) * Minutes - 30 * Hours**\\nIf angle is greater than 180, return 360 - angle\\n\\n---\\n\\n\\n# Complexity\\n- Time complexity: O(1)\\n- Space complexity: O(1) \\n\\n---\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double ans = Math.abs(5.5 * minutes - 30 * hour);\\n        return ans < 180 ? ans : 360 - ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public double angleClock(int hour, int minutes) {\\n        double ans = Math.abs(5.5 * minutes - 30 * hour);\\n        return ans < 180 ? ans : 360 - ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3947037,
                "title": "c-1-line",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        return min(abs(30.0 * (hour % 12) - 5.5 * minutes), 360 - abs(30.0 * (hour % 12) - 5.5 * minutes));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        return min(abs(30.0 * (hour % 12) - 5.5 * minutes), 360 - abs(30.0 * (hour % 12) - 5.5 * minutes));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3943814,
                "title": "javascript-simple-solution",
                "content": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number} hour\\n * @param {number} minutes\\n * @return {number}\\n */\\nvar angleClock = function(hour, minutes) {\\n    // calculate one minute angle -> 360deg / 60mins = 6deg\\n    let oneMinuteAngle = 6;\\n\\n    // calculate one hour angle -> 360deg / 12hrs = 30deg\\n    let oneHourAngle = 30;\\n\\n    // Minutes angle\\n    let minutesAngle = oneMinuteAngle * minutes;\\n\\n    // Hour Angle\\n    let hourAngle = (hour % 12 + minutes/60) * oneHourAngle;\\n\\n    let diff = Math.abs(hourAngle - minutesAngle);\\n\\n    return Math.min(diff, 360 - diff);\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} hour\\n * @param {number} minutes\\n * @return {number}\\n */\\nvar angleClock = function(hour, minutes) {\\n    // calculate one minute angle -> 360deg / 60mins = 6deg\\n    let oneMinuteAngle = 6;\\n\\n    // calculate one hour angle -> 360deg / 12hrs = 30deg\\n    let oneHourAngle = 30;\\n\\n    // Minutes angle\\n    let minutesAngle = oneMinuteAngle * minutes;\\n\\n    // Hour Angle\\n    let hourAngle = (hour % 12 + minutes/60) * oneHourAngle;\\n\\n    let diff = Math.abs(hourAngle - minutesAngle);\\n\\n    return Math.min(diff, 360 - diff);\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3929774,
                "title": "c-simple-solution",
                "content": "\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double ans = ((double)hour + (double)minutes/60)*30;\\n        ans -= (double)minutes*6;\\n        ans = fabs(ans);\\n        return (ans > 180) ? 360-ans : ans; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double ans = ((double)hour + (double)minutes/60)*30;\\n        ans -= (double)minutes*6;\\n        ans = fabs(ans);\\n        return (ans > 180) ? 360-ans : ans; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3929196,
                "title": "easiest-two-line-c-solution",
                "content": "# Intuition\\nThere is this formula to calculate angles between hands of the clock.\\nAngles between the hands of the clock=30H-11/2*M.\\nUse this formula in the code.\\n\\n# Approach\\n1) Calculate the value of the angle using the formula. Make sure to include decimal points.\\n\\n2) Next, check if its negative (since, angle cannot be negative).\\n3) If it is negative multiply the angle by -1.\\n\\n4) Now calculate the minimum of the angle and its reflex angle (since, the minimum is considered as the angle of the clock)\\nReturn this answer;\\n\\n5) Use sample test cases to get this logic intuitively.\\n\\n# Complexity\\n- Time complexity:\\n0(1)\\n\\n- Space complexity:\\n0(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double d=30*hour-(11.0/2.0)*minutes;\\n        if(d<0)\\n        d*=-1;\\n        return min(d,360-d);\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        double d=30*hour-(11.0/2.0)*minutes;\\n        if(d<0)\\n        d*=-1;\\n        return min(d,360-d);\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3908900,
                "title": "have-a-look",
                "content": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        double h=hour*30 + minutes*0.5;\\n        double m=hour*0 + minutes*6;\\n        \\n        double alpha=abs(h-m);\\n        \\n        return min(alpha,360-alpha);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        double h=hour*30 + minutes*0.5;\\n        double m=hour*0 + minutes*6;\\n        \\n        double alpha=abs(h-m);\\n        \\n        return min(alpha,360-alpha);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3881205,
                "title": "one-line-solution-with-explanation",
                "content": "# Approach\\n```\\nminHandDegrees = 360 * minutes/60\\nhourComponent = 360 * hour/12\\nminuteComponent = 360 * 1/12 * minutes/60\\nhourHandDegrees = hourComponent + minuteComponent\\n```\\n\\nIf ```abs(hourHandDegrees - minHandDegrees) > 180``` then min angle is ```360 - abs(hourDeg - minDeg)```.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$.\\n\\n- Space complexity: $$O(1)$$.\\n\\n# Code\\n```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        return min(d := abs(30*hour - 5.5*minutes), 360 - d)\\n```",
                "solutionTags": [
                    "Python3",
                    "Math"
                ],
                "code": "```\\nminHandDegrees = 360 * minutes/60\\nhourComponent = 360 * hour/12\\nminuteComponent = 360 * 1/12 * minutes/60\\nhourHandDegrees = hourComponent + minuteComponent\\n```\n```abs(hourHandDegrees - minHandDegrees) > 180```\n```360 - abs(hourDeg - minDeg)```\n```\\nclass Solution:\\n    def angleClock(self, hour: int, minutes: int) -> float:\\n        return min(d := abs(30*hour - 5.5*minutes), 360 - d)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3867306,
                "title": "python-beginner-friendly-solution",
                "content": "# Intuition\\nUse Maths and describe angle at hour hand\\n\\n# Approach\\nFind how much hour hand will move in certain minutes, make a list of all the degree when hour hand is at hours like 1:00 , 2:00, find degree of minute hand. Find absolute value of hour angle - minute angle if it is greater than 180 return 360 - angle.\\nUpvote if you like the solution\\n\\n# Code\\n```\\nclass Solution(object):\\n    def angleClock(self, hour, minutes):\\n        \"\"\"\\n        :type hour: int\\n        :type minutes: int\\n        :rtype: float\\n        \"\"\"\\n        degree = 30*float(minutes)/60\\n        anh = [30,60,90,120,150,180,210,240,270,300,330,0]\\n        deg = 6*minutes\\n        print(anh[hour-1] , deg , degree)\\n        angle = abs(anh[hour-1] - deg + degree)\\n        if angle > 180:\\n            return 360 - angle\\n        return angle\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def angleClock(self, hour, minutes):\\n        \"\"\"\\n        :type hour: int\\n        :type minutes: int\\n        :rtype: float\\n        \"\"\"\\n        degree = 30*float(minutes)/60\\n        anh = [30,60,90,120,150,180,210,240,270,300,330,0]\\n        deg = 6*minutes\\n        print(anh[hour-1] , deg , degree)\\n        angle = abs(anh[hour-1] - deg + degree)\\n        if angle > 180:\\n            return 360 - angle\\n        return angle\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564980,
                "content": [
                    {
                        "username": "axiomaticuncertainty",
                        "content": "This problem is too simple to fit into the medium category; should be changed."
                    },
                    {
                        "username": "akshaysuri",
                        "content": "Easy 4 line solution in java with detailed explanation. Solution runs in 0 ms and is 100% faster than submissions. \\n[Java 4 line solution for clock angle problem](https://qr.ae/pNs1l7)"
                    },
                    {
                        "username": "cbidici",
                        "content": "This question is not a medium questions because even secondary (maybe even primary) school students are capable to do math required to solve this question.\\nLeveling of questions in here are not accurate for many questions."
                    },
                    {
                        "username": "strahd",
                        "content": "This question requires nothing more than simple arithmetic.  It needs to be categorized as easy."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "The `division` is swapped with `floor division` in this example. \nTry `1/2` and get `0` instead of `0.5`. \nAnd nah, this is not written on Python 2.x, in that case the `from __future__ import division` would not be prohibited. \n"
                    },
                    {
                        "username": "Ganes123",
                        "content": "Differing by single position at 4th decimal position in the output solution.\\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        if(hour==12)\\n        {\\n            hour=0;\\n        }\\n\\n        float extra = (float)(minutes)/(float)(12);\\n\\n        // cout<<extra<<\" \"<<minutes<<endl;\\n        \\n        float hours= (float)(hour)*(float)(5)+extra;\\n\\n        float minute=(float)(minutes);\\n\\n        cout<<hours<<\" \"<<minutes<<endl;\\n\\n        float angle = abs(minute-hours);\\n\\n        angle = min(60-angle,angle);\\n\\n        return angle*6;\\n\\n        }\\n};"
                    },
                    {
                        "username": "jannatmaruf",
                        "content": "h = int(input(\"Enter your Hour\"\":\"))\\nm = int(input(\"Enter your Minute\"\":\"))\\nif h < 0 or m < 0 or h > 12 or m > 60:\\n    print(\"Wrong input\")\\n\\nhour_angle = 0.5*(h*60+m)\\nminut_angle = m*6\\n\\nif hour_angle > minut_angle:\\n    Angle=hour_angle-minut_angle\\nelse:\\n    Angle=minut_angle-hour_angle\\n\\nif Angle > 180:\\n    Angle=min(360-Angle,Angle)\\nprint(Angle)\\n\\nwhat wrong this code?"
                    },
                    {
                        "username": "Vipin_121",
                        "content": " `class Solution {\\n    public double angleClock(int hour, int minutes) {\\n     double ang1=Math.abs((double)(60*hour-11*minutes))/2;   \\n        double ang2=360-ang1;\\n        return ang1<ang2 ?ang1:ang2;\\n    }\\n}`"
                    },
                    {
                        "username": "sabarishsindiri789",
                        "content": "        m=minutes*6\\n        if hour == 12:\\n            n=(30*(m/360))\\n        else:\\n            n=(hour*30) + (30*(m/360))\\n        return abs(m-n)\\nwhy this code is not running in py?\\n"
                    },
                    {
                        "username": "Vinit171",
                        "content": "instead of \\'return abs(m-n) , write \"return min(abs(m-n),360-abs(m-n))\""
                    }
                ]
            },
            {
                "id": 1574050,
                "content": [
                    {
                        "username": "axiomaticuncertainty",
                        "content": "This problem is too simple to fit into the medium category; should be changed."
                    },
                    {
                        "username": "akshaysuri",
                        "content": "Easy 4 line solution in java with detailed explanation. Solution runs in 0 ms and is 100% faster than submissions. \\n[Java 4 line solution for clock angle problem](https://qr.ae/pNs1l7)"
                    },
                    {
                        "username": "cbidici",
                        "content": "This question is not a medium questions because even secondary (maybe even primary) school students are capable to do math required to solve this question.\\nLeveling of questions in here are not accurate for many questions."
                    },
                    {
                        "username": "strahd",
                        "content": "This question requires nothing more than simple arithmetic.  It needs to be categorized as easy."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "The `division` is swapped with `floor division` in this example. \nTry `1/2` and get `0` instead of `0.5`. \nAnd nah, this is not written on Python 2.x, in that case the `from __future__ import division` would not be prohibited. \n"
                    },
                    {
                        "username": "Ganes123",
                        "content": "Differing by single position at 4th decimal position in the output solution.\\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        if(hour==12)\\n        {\\n            hour=0;\\n        }\\n\\n        float extra = (float)(minutes)/(float)(12);\\n\\n        // cout<<extra<<\" \"<<minutes<<endl;\\n        \\n        float hours= (float)(hour)*(float)(5)+extra;\\n\\n        float minute=(float)(minutes);\\n\\n        cout<<hours<<\" \"<<minutes<<endl;\\n\\n        float angle = abs(minute-hours);\\n\\n        angle = min(60-angle,angle);\\n\\n        return angle*6;\\n\\n        }\\n};"
                    },
                    {
                        "username": "jannatmaruf",
                        "content": "h = int(input(\"Enter your Hour\"\":\"))\\nm = int(input(\"Enter your Minute\"\":\"))\\nif h < 0 or m < 0 or h > 12 or m > 60:\\n    print(\"Wrong input\")\\n\\nhour_angle = 0.5*(h*60+m)\\nminut_angle = m*6\\n\\nif hour_angle > minut_angle:\\n    Angle=hour_angle-minut_angle\\nelse:\\n    Angle=minut_angle-hour_angle\\n\\nif Angle > 180:\\n    Angle=min(360-Angle,Angle)\\nprint(Angle)\\n\\nwhat wrong this code?"
                    },
                    {
                        "username": "Vipin_121",
                        "content": " `class Solution {\\n    public double angleClock(int hour, int minutes) {\\n     double ang1=Math.abs((double)(60*hour-11*minutes))/2;   \\n        double ang2=360-ang1;\\n        return ang1<ang2 ?ang1:ang2;\\n    }\\n}`"
                    },
                    {
                        "username": "sabarishsindiri789",
                        "content": "        m=minutes*6\\n        if hour == 12:\\n            n=(30*(m/360))\\n        else:\\n            n=(hour*30) + (30*(m/360))\\n        return abs(m-n)\\nwhy this code is not running in py?\\n"
                    },
                    {
                        "username": "Vinit171",
                        "content": "instead of \\'return abs(m-n) , write \"return min(abs(m-n),360-abs(m-n))\""
                    }
                ]
            },
            {
                "id": 1574514,
                "content": [
                    {
                        "username": "axiomaticuncertainty",
                        "content": "This problem is too simple to fit into the medium category; should be changed."
                    },
                    {
                        "username": "akshaysuri",
                        "content": "Easy 4 line solution in java with detailed explanation. Solution runs in 0 ms and is 100% faster than submissions. \\n[Java 4 line solution for clock angle problem](https://qr.ae/pNs1l7)"
                    },
                    {
                        "username": "cbidici",
                        "content": "This question is not a medium questions because even secondary (maybe even primary) school students are capable to do math required to solve this question.\\nLeveling of questions in here are not accurate for many questions."
                    },
                    {
                        "username": "strahd",
                        "content": "This question requires nothing more than simple arithmetic.  It needs to be categorized as easy."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "The `division` is swapped with `floor division` in this example. \nTry `1/2` and get `0` instead of `0.5`. \nAnd nah, this is not written on Python 2.x, in that case the `from __future__ import division` would not be prohibited. \n"
                    },
                    {
                        "username": "Ganes123",
                        "content": "Differing by single position at 4th decimal position in the output solution.\\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        if(hour==12)\\n        {\\n            hour=0;\\n        }\\n\\n        float extra = (float)(minutes)/(float)(12);\\n\\n        // cout<<extra<<\" \"<<minutes<<endl;\\n        \\n        float hours= (float)(hour)*(float)(5)+extra;\\n\\n        float minute=(float)(minutes);\\n\\n        cout<<hours<<\" \"<<minutes<<endl;\\n\\n        float angle = abs(minute-hours);\\n\\n        angle = min(60-angle,angle);\\n\\n        return angle*6;\\n\\n        }\\n};"
                    },
                    {
                        "username": "jannatmaruf",
                        "content": "h = int(input(\"Enter your Hour\"\":\"))\\nm = int(input(\"Enter your Minute\"\":\"))\\nif h < 0 or m < 0 or h > 12 or m > 60:\\n    print(\"Wrong input\")\\n\\nhour_angle = 0.5*(h*60+m)\\nminut_angle = m*6\\n\\nif hour_angle > minut_angle:\\n    Angle=hour_angle-minut_angle\\nelse:\\n    Angle=minut_angle-hour_angle\\n\\nif Angle > 180:\\n    Angle=min(360-Angle,Angle)\\nprint(Angle)\\n\\nwhat wrong this code?"
                    },
                    {
                        "username": "Vipin_121",
                        "content": " `class Solution {\\n    public double angleClock(int hour, int minutes) {\\n     double ang1=Math.abs((double)(60*hour-11*minutes))/2;   \\n        double ang2=360-ang1;\\n        return ang1<ang2 ?ang1:ang2;\\n    }\\n}`"
                    },
                    {
                        "username": "sabarishsindiri789",
                        "content": "        m=minutes*6\\n        if hour == 12:\\n            n=(30*(m/360))\\n        else:\\n            n=(hour*30) + (30*(m/360))\\n        return abs(m-n)\\nwhy this code is not running in py?\\n"
                    },
                    {
                        "username": "Vinit171",
                        "content": "instead of \\'return abs(m-n) , write \"return min(abs(m-n),360-abs(m-n))\""
                    }
                ]
            },
            {
                "id": 2039881,
                "content": [
                    {
                        "username": "axiomaticuncertainty",
                        "content": "This problem is too simple to fit into the medium category; should be changed."
                    },
                    {
                        "username": "akshaysuri",
                        "content": "Easy 4 line solution in java with detailed explanation. Solution runs in 0 ms and is 100% faster than submissions. \\n[Java 4 line solution for clock angle problem](https://qr.ae/pNs1l7)"
                    },
                    {
                        "username": "cbidici",
                        "content": "This question is not a medium questions because even secondary (maybe even primary) school students are capable to do math required to solve this question.\\nLeveling of questions in here are not accurate for many questions."
                    },
                    {
                        "username": "strahd",
                        "content": "This question requires nothing more than simple arithmetic.  It needs to be categorized as easy."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "The `division` is swapped with `floor division` in this example. \nTry `1/2` and get `0` instead of `0.5`. \nAnd nah, this is not written on Python 2.x, in that case the `from __future__ import division` would not be prohibited. \n"
                    },
                    {
                        "username": "Ganes123",
                        "content": "Differing by single position at 4th decimal position in the output solution.\\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        if(hour==12)\\n        {\\n            hour=0;\\n        }\\n\\n        float extra = (float)(minutes)/(float)(12);\\n\\n        // cout<<extra<<\" \"<<minutes<<endl;\\n        \\n        float hours= (float)(hour)*(float)(5)+extra;\\n\\n        float minute=(float)(minutes);\\n\\n        cout<<hours<<\" \"<<minutes<<endl;\\n\\n        float angle = abs(minute-hours);\\n\\n        angle = min(60-angle,angle);\\n\\n        return angle*6;\\n\\n        }\\n};"
                    },
                    {
                        "username": "jannatmaruf",
                        "content": "h = int(input(\"Enter your Hour\"\":\"))\\nm = int(input(\"Enter your Minute\"\":\"))\\nif h < 0 or m < 0 or h > 12 or m > 60:\\n    print(\"Wrong input\")\\n\\nhour_angle = 0.5*(h*60+m)\\nminut_angle = m*6\\n\\nif hour_angle > minut_angle:\\n    Angle=hour_angle-minut_angle\\nelse:\\n    Angle=minut_angle-hour_angle\\n\\nif Angle > 180:\\n    Angle=min(360-Angle,Angle)\\nprint(Angle)\\n\\nwhat wrong this code?"
                    },
                    {
                        "username": "Vipin_121",
                        "content": " `class Solution {\\n    public double angleClock(int hour, int minutes) {\\n     double ang1=Math.abs((double)(60*hour-11*minutes))/2;   \\n        double ang2=360-ang1;\\n        return ang1<ang2 ?ang1:ang2;\\n    }\\n}`"
                    },
                    {
                        "username": "sabarishsindiri789",
                        "content": "        m=minutes*6\\n        if hour == 12:\\n            n=(30*(m/360))\\n        else:\\n            n=(hour*30) + (30*(m/360))\\n        return abs(m-n)\\nwhy this code is not running in py?\\n"
                    },
                    {
                        "username": "Vinit171",
                        "content": "instead of \\'return abs(m-n) , write \"return min(abs(m-n),360-abs(m-n))\""
                    }
                ]
            },
            {
                "id": 1969160,
                "content": [
                    {
                        "username": "axiomaticuncertainty",
                        "content": "This problem is too simple to fit into the medium category; should be changed."
                    },
                    {
                        "username": "akshaysuri",
                        "content": "Easy 4 line solution in java with detailed explanation. Solution runs in 0 ms and is 100% faster than submissions. \\n[Java 4 line solution for clock angle problem](https://qr.ae/pNs1l7)"
                    },
                    {
                        "username": "cbidici",
                        "content": "This question is not a medium questions because even secondary (maybe even primary) school students are capable to do math required to solve this question.\\nLeveling of questions in here are not accurate for many questions."
                    },
                    {
                        "username": "strahd",
                        "content": "This question requires nothing more than simple arithmetic.  It needs to be categorized as easy."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "The `division` is swapped with `floor division` in this example. \nTry `1/2` and get `0` instead of `0.5`. \nAnd nah, this is not written on Python 2.x, in that case the `from __future__ import division` would not be prohibited. \n"
                    },
                    {
                        "username": "Ganes123",
                        "content": "Differing by single position at 4th decimal position in the output solution.\\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        if(hour==12)\\n        {\\n            hour=0;\\n        }\\n\\n        float extra = (float)(minutes)/(float)(12);\\n\\n        // cout<<extra<<\" \"<<minutes<<endl;\\n        \\n        float hours= (float)(hour)*(float)(5)+extra;\\n\\n        float minute=(float)(minutes);\\n\\n        cout<<hours<<\" \"<<minutes<<endl;\\n\\n        float angle = abs(minute-hours);\\n\\n        angle = min(60-angle,angle);\\n\\n        return angle*6;\\n\\n        }\\n};"
                    },
                    {
                        "username": "jannatmaruf",
                        "content": "h = int(input(\"Enter your Hour\"\":\"))\\nm = int(input(\"Enter your Minute\"\":\"))\\nif h < 0 or m < 0 or h > 12 or m > 60:\\n    print(\"Wrong input\")\\n\\nhour_angle = 0.5*(h*60+m)\\nminut_angle = m*6\\n\\nif hour_angle > minut_angle:\\n    Angle=hour_angle-minut_angle\\nelse:\\n    Angle=minut_angle-hour_angle\\n\\nif Angle > 180:\\n    Angle=min(360-Angle,Angle)\\nprint(Angle)\\n\\nwhat wrong this code?"
                    },
                    {
                        "username": "Vipin_121",
                        "content": " `class Solution {\\n    public double angleClock(int hour, int minutes) {\\n     double ang1=Math.abs((double)(60*hour-11*minutes))/2;   \\n        double ang2=360-ang1;\\n        return ang1<ang2 ?ang1:ang2;\\n    }\\n}`"
                    },
                    {
                        "username": "sabarishsindiri789",
                        "content": "        m=minutes*6\\n        if hour == 12:\\n            n=(30*(m/360))\\n        else:\\n            n=(hour*30) + (30*(m/360))\\n        return abs(m-n)\\nwhy this code is not running in py?\\n"
                    },
                    {
                        "username": "Vinit171",
                        "content": "instead of \\'return abs(m-n) , write \"return min(abs(m-n),360-abs(m-n))\""
                    }
                ]
            },
            {
                "id": 1882191,
                "content": [
                    {
                        "username": "axiomaticuncertainty",
                        "content": "This problem is too simple to fit into the medium category; should be changed."
                    },
                    {
                        "username": "akshaysuri",
                        "content": "Easy 4 line solution in java with detailed explanation. Solution runs in 0 ms and is 100% faster than submissions. \\n[Java 4 line solution for clock angle problem](https://qr.ae/pNs1l7)"
                    },
                    {
                        "username": "cbidici",
                        "content": "This question is not a medium questions because even secondary (maybe even primary) school students are capable to do math required to solve this question.\\nLeveling of questions in here are not accurate for many questions."
                    },
                    {
                        "username": "strahd",
                        "content": "This question requires nothing more than simple arithmetic.  It needs to be categorized as easy."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "The `division` is swapped with `floor division` in this example. \nTry `1/2` and get `0` instead of `0.5`. \nAnd nah, this is not written on Python 2.x, in that case the `from __future__ import division` would not be prohibited. \n"
                    },
                    {
                        "username": "Ganes123",
                        "content": "Differing by single position at 4th decimal position in the output solution.\\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        if(hour==12)\\n        {\\n            hour=0;\\n        }\\n\\n        float extra = (float)(minutes)/(float)(12);\\n\\n        // cout<<extra<<\" \"<<minutes<<endl;\\n        \\n        float hours= (float)(hour)*(float)(5)+extra;\\n\\n        float minute=(float)(minutes);\\n\\n        cout<<hours<<\" \"<<minutes<<endl;\\n\\n        float angle = abs(minute-hours);\\n\\n        angle = min(60-angle,angle);\\n\\n        return angle*6;\\n\\n        }\\n};"
                    },
                    {
                        "username": "jannatmaruf",
                        "content": "h = int(input(\"Enter your Hour\"\":\"))\\nm = int(input(\"Enter your Minute\"\":\"))\\nif h < 0 or m < 0 or h > 12 or m > 60:\\n    print(\"Wrong input\")\\n\\nhour_angle = 0.5*(h*60+m)\\nminut_angle = m*6\\n\\nif hour_angle > minut_angle:\\n    Angle=hour_angle-minut_angle\\nelse:\\n    Angle=minut_angle-hour_angle\\n\\nif Angle > 180:\\n    Angle=min(360-Angle,Angle)\\nprint(Angle)\\n\\nwhat wrong this code?"
                    },
                    {
                        "username": "Vipin_121",
                        "content": " `class Solution {\\n    public double angleClock(int hour, int minutes) {\\n     double ang1=Math.abs((double)(60*hour-11*minutes))/2;   \\n        double ang2=360-ang1;\\n        return ang1<ang2 ?ang1:ang2;\\n    }\\n}`"
                    },
                    {
                        "username": "sabarishsindiri789",
                        "content": "        m=minutes*6\\n        if hour == 12:\\n            n=(30*(m/360))\\n        else:\\n            n=(hour*30) + (30*(m/360))\\n        return abs(m-n)\\nwhy this code is not running in py?\\n"
                    },
                    {
                        "username": "Vinit171",
                        "content": "instead of \\'return abs(m-n) , write \"return min(abs(m-n),360-abs(m-n))\""
                    }
                ]
            },
            {
                "id": 1730514,
                "content": [
                    {
                        "username": "axiomaticuncertainty",
                        "content": "This problem is too simple to fit into the medium category; should be changed."
                    },
                    {
                        "username": "akshaysuri",
                        "content": "Easy 4 line solution in java with detailed explanation. Solution runs in 0 ms and is 100% faster than submissions. \\n[Java 4 line solution for clock angle problem](https://qr.ae/pNs1l7)"
                    },
                    {
                        "username": "cbidici",
                        "content": "This question is not a medium questions because even secondary (maybe even primary) school students are capable to do math required to solve this question.\\nLeveling of questions in here are not accurate for many questions."
                    },
                    {
                        "username": "strahd",
                        "content": "This question requires nothing more than simple arithmetic.  It needs to be categorized as easy."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "The `division` is swapped with `floor division` in this example. \nTry `1/2` and get `0` instead of `0.5`. \nAnd nah, this is not written on Python 2.x, in that case the `from __future__ import division` would not be prohibited. \n"
                    },
                    {
                        "username": "Ganes123",
                        "content": "Differing by single position at 4th decimal position in the output solution.\\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        if(hour==12)\\n        {\\n            hour=0;\\n        }\\n\\n        float extra = (float)(minutes)/(float)(12);\\n\\n        // cout<<extra<<\" \"<<minutes<<endl;\\n        \\n        float hours= (float)(hour)*(float)(5)+extra;\\n\\n        float minute=(float)(minutes);\\n\\n        cout<<hours<<\" \"<<minutes<<endl;\\n\\n        float angle = abs(minute-hours);\\n\\n        angle = min(60-angle,angle);\\n\\n        return angle*6;\\n\\n        }\\n};"
                    },
                    {
                        "username": "jannatmaruf",
                        "content": "h = int(input(\"Enter your Hour\"\":\"))\\nm = int(input(\"Enter your Minute\"\":\"))\\nif h < 0 or m < 0 or h > 12 or m > 60:\\n    print(\"Wrong input\")\\n\\nhour_angle = 0.5*(h*60+m)\\nminut_angle = m*6\\n\\nif hour_angle > minut_angle:\\n    Angle=hour_angle-minut_angle\\nelse:\\n    Angle=minut_angle-hour_angle\\n\\nif Angle > 180:\\n    Angle=min(360-Angle,Angle)\\nprint(Angle)\\n\\nwhat wrong this code?"
                    },
                    {
                        "username": "Vipin_121",
                        "content": " `class Solution {\\n    public double angleClock(int hour, int minutes) {\\n     double ang1=Math.abs((double)(60*hour-11*minutes))/2;   \\n        double ang2=360-ang1;\\n        return ang1<ang2 ?ang1:ang2;\\n    }\\n}`"
                    },
                    {
                        "username": "sabarishsindiri789",
                        "content": "        m=minutes*6\\n        if hour == 12:\\n            n=(30*(m/360))\\n        else:\\n            n=(hour*30) + (30*(m/360))\\n        return abs(m-n)\\nwhy this code is not running in py?\\n"
                    },
                    {
                        "username": "Vinit171",
                        "content": "instead of \\'return abs(m-n) , write \"return min(abs(m-n),360-abs(m-n))\""
                    }
                ]
            },
            {
                "id": 1724523,
                "content": [
                    {
                        "username": "axiomaticuncertainty",
                        "content": "This problem is too simple to fit into the medium category; should be changed."
                    },
                    {
                        "username": "akshaysuri",
                        "content": "Easy 4 line solution in java with detailed explanation. Solution runs in 0 ms and is 100% faster than submissions. \\n[Java 4 line solution for clock angle problem](https://qr.ae/pNs1l7)"
                    },
                    {
                        "username": "cbidici",
                        "content": "This question is not a medium questions because even secondary (maybe even primary) school students are capable to do math required to solve this question.\\nLeveling of questions in here are not accurate for many questions."
                    },
                    {
                        "username": "strahd",
                        "content": "This question requires nothing more than simple arithmetic.  It needs to be categorized as easy."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "The `division` is swapped with `floor division` in this example. \nTry `1/2` and get `0` instead of `0.5`. \nAnd nah, this is not written on Python 2.x, in that case the `from __future__ import division` would not be prohibited. \n"
                    },
                    {
                        "username": "Ganes123",
                        "content": "Differing by single position at 4th decimal position in the output solution.\\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        if(hour==12)\\n        {\\n            hour=0;\\n        }\\n\\n        float extra = (float)(minutes)/(float)(12);\\n\\n        // cout<<extra<<\" \"<<minutes<<endl;\\n        \\n        float hours= (float)(hour)*(float)(5)+extra;\\n\\n        float minute=(float)(minutes);\\n\\n        cout<<hours<<\" \"<<minutes<<endl;\\n\\n        float angle = abs(minute-hours);\\n\\n        angle = min(60-angle,angle);\\n\\n        return angle*6;\\n\\n        }\\n};"
                    },
                    {
                        "username": "jannatmaruf",
                        "content": "h = int(input(\"Enter your Hour\"\":\"))\\nm = int(input(\"Enter your Minute\"\":\"))\\nif h < 0 or m < 0 or h > 12 or m > 60:\\n    print(\"Wrong input\")\\n\\nhour_angle = 0.5*(h*60+m)\\nminut_angle = m*6\\n\\nif hour_angle > minut_angle:\\n    Angle=hour_angle-minut_angle\\nelse:\\n    Angle=minut_angle-hour_angle\\n\\nif Angle > 180:\\n    Angle=min(360-Angle,Angle)\\nprint(Angle)\\n\\nwhat wrong this code?"
                    },
                    {
                        "username": "Vipin_121",
                        "content": " `class Solution {\\n    public double angleClock(int hour, int minutes) {\\n     double ang1=Math.abs((double)(60*hour-11*minutes))/2;   \\n        double ang2=360-ang1;\\n        return ang1<ang2 ?ang1:ang2;\\n    }\\n}`"
                    },
                    {
                        "username": "sabarishsindiri789",
                        "content": "        m=minutes*6\\n        if hour == 12:\\n            n=(30*(m/360))\\n        else:\\n            n=(hour*30) + (30*(m/360))\\n        return abs(m-n)\\nwhy this code is not running in py?\\n"
                    },
                    {
                        "username": "Vinit171",
                        "content": "instead of \\'return abs(m-n) , write \"return min(abs(m-n),360-abs(m-n))\""
                    }
                ]
            },
            {
                "id": 1707148,
                "content": [
                    {
                        "username": "axiomaticuncertainty",
                        "content": "This problem is too simple to fit into the medium category; should be changed."
                    },
                    {
                        "username": "akshaysuri",
                        "content": "Easy 4 line solution in java with detailed explanation. Solution runs in 0 ms and is 100% faster than submissions. \\n[Java 4 line solution for clock angle problem](https://qr.ae/pNs1l7)"
                    },
                    {
                        "username": "cbidici",
                        "content": "This question is not a medium questions because even secondary (maybe even primary) school students are capable to do math required to solve this question.\\nLeveling of questions in here are not accurate for many questions."
                    },
                    {
                        "username": "strahd",
                        "content": "This question requires nothing more than simple arithmetic.  It needs to be categorized as easy."
                    },
                    {
                        "username": "a_andreasian",
                        "content": "The `division` is swapped with `floor division` in this example. \nTry `1/2` and get `0` instead of `0.5`. \nAnd nah, this is not written on Python 2.x, in that case the `from __future__ import division` would not be prohibited. \n"
                    },
                    {
                        "username": "Ganes123",
                        "content": "Differing by single position at 4th decimal position in the output solution.\\n\\nclass Solution {\\npublic:\\n    double angleClock(int hour, int minutes) {\\n        \\n        if(hour==12)\\n        {\\n            hour=0;\\n        }\\n\\n        float extra = (float)(minutes)/(float)(12);\\n\\n        // cout<<extra<<\" \"<<minutes<<endl;\\n        \\n        float hours= (float)(hour)*(float)(5)+extra;\\n\\n        float minute=(float)(minutes);\\n\\n        cout<<hours<<\" \"<<minutes<<endl;\\n\\n        float angle = abs(minute-hours);\\n\\n        angle = min(60-angle,angle);\\n\\n        return angle*6;\\n\\n        }\\n};"
                    },
                    {
                        "username": "jannatmaruf",
                        "content": "h = int(input(\"Enter your Hour\"\":\"))\\nm = int(input(\"Enter your Minute\"\":\"))\\nif h < 0 or m < 0 or h > 12 or m > 60:\\n    print(\"Wrong input\")\\n\\nhour_angle = 0.5*(h*60+m)\\nminut_angle = m*6\\n\\nif hour_angle > minut_angle:\\n    Angle=hour_angle-minut_angle\\nelse:\\n    Angle=minut_angle-hour_angle\\n\\nif Angle > 180:\\n    Angle=min(360-Angle,Angle)\\nprint(Angle)\\n\\nwhat wrong this code?"
                    },
                    {
                        "username": "Vipin_121",
                        "content": " `class Solution {\\n    public double angleClock(int hour, int minutes) {\\n     double ang1=Math.abs((double)(60*hour-11*minutes))/2;   \\n        double ang2=360-ang1;\\n        return ang1<ang2 ?ang1:ang2;\\n    }\\n}`"
                    },
                    {
                        "username": "sabarishsindiri789",
                        "content": "        m=minutes*6\\n        if hour == 12:\\n            n=(30*(m/360))\\n        else:\\n            n=(hour*30) + (30*(m/360))\\n        return abs(m-n)\\nwhy this code is not running in py?\\n"
                    },
                    {
                        "username": "Vinit171",
                        "content": "instead of \\'return abs(m-n) , write \"return min(abs(m-n),360-abs(m-n))\""
                    }
                ]
            }
        ]
    }
]