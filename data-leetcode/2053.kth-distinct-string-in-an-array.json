[
    {
        "title": "Kth Distinct String in an Array",
        "question_content": "A distinct string is a string that is present only once in an array.\nGiven an array of strings arr, and an integer k, return the kth distinct string present in arr. If there are fewer than k distinct strings, return an empty string \"\".\nNote that the strings are considered in the order in which they appear in the array.\n&nbsp;\nExample 1:\n\nInput: arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2\nOutput: \"a\"\nExplanation:\nThe only distinct strings in arr are \"d\" and \"a\".\n\"d\" appears 1st, so it is the 1st distinct string.\n\"a\" appears 2nd, so it is the 2nd distinct string.\nSince k == 2, \"a\" is returned. \n\nExample 2:\n\nInput: arr = [\"aaa\",\"aa\",\"a\"], k = 1\nOutput: \"aaa\"\nExplanation:\nAll strings in arr are distinct, so the 1st string \"aaa\" is returned.\n\nExample 3:\n\nInput: arr = [\"a\",\"b\",\"a\"], k = 3\nOutput: \"\"\nExplanation:\nThe only distinct string is \"b\". Since there are fewer than 3 distinct strings, we return an empty string \"\".\n\n&nbsp;\nConstraints:\n\n\t1 <= k <= arr.length <= 1000\n\t1 <= arr[i].length <= 5\n\tarr[i] consists of lowercase English letters.",
        "solutions": [
            {
                "id": 1549265,
                "title": "hashmap",
                "content": "**C++**\\n```cpp\\nstring kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int> m;\\n    for (auto &s : arr)\\n        ++m[s];\\n    for (auto &s : arr)\\n        if (m[s] == 1 && --k == 0)\\n            return s;\\n    return \"\";\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nstring kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int> m;\\n    for (auto &s : arr)\\n        ++m[s];\\n    for (auto &s : arr)\\n        if (m[s] == 1 && --k == 0)\\n            return s;\\n    return \"\";\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1550617,
                "title": "python-simple-2-lines-solution",
                "content": "**Python :**\\n\\n```\\ndef kthDistinct(self, arr: List[str], k: int) -> str:\\n\\tarr = [i for i in arr if arr.count(i) == 1]\\n\\treturn \"\" if k > len(arr) else arr[k - 1]\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef kthDistinct(self, arr: List[str], k: int) -> str:\\n\\tarr = [i for i in arr if arr.count(i) == 1]\\n\\treturn \"\" if k > len(arr) else arr[k - 1]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1549003,
                "title": "python3-freq-table",
                "content": "\\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        freq = Counter(arr)\\n        for x in arr: \\n            if freq[x] == 1: k -= 1\\n            if k == 0: return x\\n        return \"\"\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        freq = Counter(arr)\\n        for x in arr: \\n            if freq[x] == 1: k -= 1\\n            if k == 0: return x\\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1551249,
                "title": "c-easy-to-understand-using-unordered-map",
                "content": "### 1. Map all the string with the number of times each of them occur.\\n### 2. Traverse the array once more and decrease the value of ***k*** by one, each time you encounter a string with count as 1.\\n\\n```\\nstring kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int> mp;\\n    for (string& s: arr)\\n        mp[s]++;    // Mapping string with its count.\\n    for (string& s: arr) {  // Traversing the string to get the kth distinct string\\n        if (mp[s] == 1) {   // Count of a string is 1\\n            k--;    // Decrease k\\n            if (k == 0)\\n                return s;   // When k is 0 we return the string\\n        }\\n    }\\n    return \"\";  // If k is more than all the distinct string\\n}\\n```\\n**Time Complexity: O(2 * N)**\\n**Space Complexity: O(N)**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nstring kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int> mp;\\n    for (string& s: arr)\\n        mp[s]++;    // Mapping string with its count.\\n    for (string& s: arr) {  // Traversing the string to get the kth distinct string\\n        if (mp[s] == 1) {   // Count of a string is 1\\n            k--;    // Decrease k\\n            if (k == 0)\\n                return s;   // When k is 0 we return the string\\n        }\\n    }\\n    return \"\";  // If k is more than all the distinct string\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1549091,
                "title": "java-easy-to-understand-with-map-o-n-time-and-space",
                "content": "1. in first iteration record the frequencies of each string  in the map\\n2. in the second iteration if you find a string with frequency 1 then decreese k .\\n3. when k ==0 we have found the kth distrinct string.\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String,Integer> map=new HashMap<>();\\n        \\n        for(String s:arr){\\n            \\n            if(map.containsKey(s)) map.put(s,map.get(s)+1);\\n             else map.put(s,1);\\n        }\\n\\t\\tint i=0;\\n        for(String s:arr){\\n            if(map.get(s)==1 && ++i==k){\\n                \\n                    return s;\\n                } \\n                 \\n        }\\n        return \"\";\\n        \\n    }\\n}\\n```\\nadding another version with following changes\\n1. Used LinkedHashMap  . Thanks to [@radzas\\n](https://leetcode.com/radzas)\\n2. Used Boolean instead of Intger to distinguish uniquness of a string.  Thanks to [@namitha_reval ](https://leetcode.com/namitha_reval)for this idea\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String,Boolean> map=new LinkedHashMap<>();\\n        for(String s:arr){\\n           map.put(s,!map.containsKey(s));\\n         }\\n\\t\\tint i=0;\\n        for(String key:map.keySet()){\\n            if(map.get(key) && ++i==k){\\n                \\n            } \\n        }\\n        return \"\";\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String,Integer> map=new HashMap<>();\\n        \\n        for(String s:arr){\\n            \\n            if(map.containsKey(s)) map.put(s,map.get(s)+1);\\n             else map.put(s,1);\\n        }\\n\\t\\tint i=0;\\n        for(String s:arr){\\n            if(map.get(s)==1 && ++i==k){\\n                \\n                    return s;\\n                } \\n                 \\n        }\\n        return \"\";\\n        \\n    }\\n}\\n```\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String,Boolean> map=new LinkedHashMap<>();\\n        for(String s:arr){\\n           map.put(s,!map.containsKey(s));\\n         }\\n\\t\\tint i=0;\\n        for(String key:map.keySet()){\\n            if(map.get(key) && ++i==k){\\n                \\n            } \\n        }\\n        return \"\";\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1715724,
                "title": "fastest-java-solution-using-hashmap-simple-and-easy-coding",
                "content": "```\\n public String kthDistinct(String[] arr, int k) {\\n        \\n        HashMap<String,Boolean> map=new HashMap<>();\\n        int count=0;\\n        \\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(map.containsKey(arr[i]))\\n            {\\n                map.put(arr[i],false);\\n                \\n            }\\n            else\\n            {\\n                map.put(arr[i],true);\\n            }\\n        }\\n        \\n        for(String item:arr)\\n        {\\n            if(map.get(item)==true)\\n            {\\n                count++;\\n                if(count==k)\\n                {\\n                    return item;\\n                }\\n            }\\n        }\\n        \\n        return \"\";\\n        \\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n public String kthDistinct(String[] arr, int k) {\\n        \\n        HashMap<String,Boolean> map=new HashMap<>();\\n        int count=0;\\n        \\n        for(int i=0;i<arr.length;i++)\\n        {\\n            if(map.containsKey(arr[i]))\\n            {\\n                map.put(arr[i],false);\\n                \\n            }\\n            else\\n            {\\n                map.put(arr[i],true);\\n            }\\n        }\\n        \\n        for(String item:arr)\\n        {\\n            if(map.get(item)==true)\\n            {\\n                count++;\\n                if(count==k)\\n                {\\n                    return item;\\n                }\\n            }\\n        }\\n        \\n        return \"\";\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1562867,
                "title": "javascript-few-lines-solution-w-explanation",
                "content": "```\\nvar kthDistinct = function(arr, k) {\\n    const map = {} // used for arr occurences\\n    const distinctArr = [] // store the distinct values (only appearing once)\\n    \\n\\t// increment the occurence to the map\\n    arr.forEach(letter => map[letter] = map[letter] + 1 || 1)\\n    \\n\\t// store all the distinct values in order\\n    for (let [key, val] of Object.entries(map)) \\n        if (val == 1) distinctArr.push(key)\\n    \\n\\t// return the key or empty string\\n    return distinctArr[k-1] || \"\"\\n};\\n~``",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar kthDistinct = function(arr, k) {\\n    const map = {} // used for arr occurences\\n    const distinctArr = [] // store the distinct values (only appearing once)\\n    \\n\\t// increment the occurence to the map\\n    arr.forEach(letter => map[letter] = map[letter] + 1 || 1)\\n    \\n\\t// store all the distinct values in order\\n    for (let [key, val] of Object.entries(map)) \\n        if (val == 1) distinctArr.push(key)\\n    \\n\\t// return the key or empty string\\n    return distinctArr[k-1] || \"\"\\n};\\n~``",
                "codeTag": "Unknown"
            },
            {
                "id": 1556263,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) \\n    {\\n        unordered_map<string,int>m;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            m[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(m[arr[i]]==1)\\n            {\\n                k--;\\n            }\\n            if(k==0 && m[arr[i]]==1)\\n            {\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```\\n***Please upvote if you have found my code useful. Thank you.***",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) \\n    {\\n        unordered_map<string,int>m;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            m[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(m[arr[i]]==1)\\n            {\\n                k--;\\n            }\\n            if(k==0 && m[arr[i]]==1)\\n            {\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2707433,
                "title": "simple-easy-to-understand-91-ms-faster-than-99-69-of-c-online-submissions",
                "content": "**Step 1:** Count the frequency of the word.\\n**Step 2:** Store the string that occurs only one in the order they are present in the given string in some data structure Lets say a vector.\\n**Srep 3:** Return the data_Structure[k-1] if there is any element present in the data_structure else return \"\";\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        map<string, int> mp;\\n        for(auto it: arr) mp[it]++;\\n        vector<string> ans;\\n        for(auto it : arr)\\n            if(mp[it] == 1)\\n                ans.push_back(it);\\n        if(ans.size()==0) return \"\";\\n        return ans[k-1];\\n    }\\n};\\n```\\nIf you like the approach the please Upvote it so that it can reach to many people and also give a star.\\nFeel free to comment for any kind of queries related to the problem/Approach.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        map<string, int> mp;\\n        for(auto it: arr) mp[it]++;\\n        vector<string> ans;\\n        for(auto it : arr)\\n            if(mp[it] == 1)\\n                ans.push_back(it);\\n        if(ans.size()==0) return \"\";\\n        return ans[k-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2731032,
                "title": "java",
                "content": "If you like it pls upvote\\n```\\n\\n    public String kthDistinct(String[] arr, int k) {\\n        int count = 0;\\n        Map<String, Boolean> map = new HashMap<>();\\n\\n        for (int i = 0; i <= arr.length-1; i++) {\\n            if (map.containsKey(arr[i])) {\\n                map.put(arr[i], false);\\n            } else map.put(arr[i], true);\\n        }\\n        \\n        for (int i = 0; i < arr.length; i++) {\\n            if (map.get(arr[i])) {\\n                count++;\\n                if (count==k) return arr[i];\\n            }\\n        }\\n        \\n        return \"\";\\n    }\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\n    public String kthDistinct(String[] arr, int k) {\\n        int count = 0;\\n        Map<String, Boolean> map = new HashMap<>();\\n\\n        for (int i = 0; i <= arr.length-1; i++) {\\n            if (map.containsKey(arr[i])) {\\n                map.put(arr[i], false);\\n            } else map.put(arr[i], true);\\n        }\\n        \\n        for (int i = 0; i < arr.length; i++) {\\n            if (map.get(arr[i])) {\\n                count++;\\n                if (count==k) return arr[i];\\n            }\\n        }\\n        \\n        return \"\";\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1549575,
                "title": "c-simple-and-short-solution-explained",
                "content": "**Idea:**\\nWe count the frequencies of each string in a map `freq`.\\nThen, we loop through the strings, if its frequency is 1 - which means it\\'s distinct - we decrease `k`.\\nWhen `k` reached 0 - we found our solution.\\n\\n**Time Complexity:** O(n)\\n**Space Complexuty:** O(n)\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> freq;\\n        for (auto s : arr) freq[s]++;\\n        \\n        for (auto s : arr) {\\n            if (freq[s] == 1) k--;\\n            if (k == 0) return s;\\n        }\\n        \\n        return \"\";\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> freq;\\n        for (auto s : arr) freq[s]++;\\n        \\n        for (auto s : arr) {\\n            if (freq[s] == 1) k--;\\n            if (k == 0) return s;\\n        }\\n        \\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549072,
                "title": "python3-counter",
                "content": "We create a counter for strings in ```arr```.\\nUnique string is a string ```s``` which is in the ```arr``` exatly one time. Which is when ```c[s]==1```.\\nWe are counting unique strings in the array ```arr```.\\n\\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        c=Counter(arr)\\n        i=0\\n        for s in arr:\\n            i+=c[s]==1\\n            if i==k: return s\\n        return \\'\\'\\n```\\n\\nShorter Code (3 lines):\\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        c=Counter(arr)\\n        arr=[s for s in arr if c[s]==1]\\n        return k<=len(arr) and arr[k-1] or \\'\\'  \\n```\\n",
                "solutionTags": [],
                "code": "```arr```\n```s```\n```arr```\n```c[s]==1```\n```arr```\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        c=Counter(arr)\\n        i=0\\n        for s in arr:\\n            i+=c[s]==1\\n            if i==k: return s\\n        return \\'\\'\\n```\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        c=Counter(arr)\\n        arr=[s for s in arr if c[s]==1]\\n        return k<=len(arr) and arr[k-1] or \\'\\'  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549027,
                "title": "c-hash-map-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n       map<string,pair<int,int>>m;\\n       vector<pair<int,string>>v;\\n       int n=arr.size();\\n       for(int i=0;i<n;i++)\\n       {\\n           m[arr[i]].first++;\\n           m[arr[i]].second=i;\\n       }\\n        for(auto it=m.begin();it!=m.end();it++)\\n        {\\n            if(it->second.first==1)\\n            {\\n                v.push_back({it->second.second,it->first});\\n            }\\n        }\\n        sort(v.begin(),v.end());\\n        if(v.size()<k)\\n        {\\n            return \"\";\\n        }\\n        auto x=v[k-1];\\n        return x.second;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n       map<string,pair<int,int>>m;\\n       vector<pair<int,string>>v;\\n       int n=arr.size();\\n       for(int i=0;i<n;i++)\\n       {\\n           m[arr[i]].first++;\\n           m[arr[i]].second=i;\\n       }\\n        for(auto it=m.begin();it!=m.end();it++)\\n        {\\n            if(it->second.first==1)\\n            {\\n                v.push_back({it->second.second,it->first});\\n            }\\n        }\\n        sort(v.begin(),v.end());\\n        if(v.size()<k)\\n        {\\n            return \"\";\\n        }\\n        auto x=v[k-1];\\n        return x.second;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3103522,
                "title": "simple-java-solution",
                "content": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        int count=0,temp=0;\\n        for(int i=0;i<arr.length;i++)\\n            {\\n            for(int j=0;j<arr.length;j++)\\n                {\\n                if(i!=j && arr[i].equals(arr[j]))\\n                    count++;\\n                }\\n            if(count==0)\\n                temp++;\\n            if(temp==k)\\n                return arr[i];\\n            count=0;\\n            }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        int count=0,temp=0;\\n        for(int i=0;i<arr.length;i++)\\n            {\\n            for(int j=0;j<arr.length;j++)\\n                {\\n                if(i!=j && arr[i].equals(arr[j]))\\n                    count++;\\n                }\\n            if(count==0)\\n                temp++;\\n            if(temp==k)\\n                return arr[i];\\n            count=0;\\n            }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2781985,
                "title": "java-easy-and-clean-solution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n     Map<String, Integer> map = new HashMap<>();\\n     \\n     for(String s : arr) {\\n         if(map.containsKey(s)) map.put(s, map.get(s) + 1);\\n         else map.put(s, 1);\\n     }\\n     int i = 0;\\n     for(String s : arr) {\\n         if(map.get(s) == 1 && ++ i == k)\\n         return s;\\n     }\\n     return \"\";\\n    }\\n}\\n```\\n# PLEASE UPVOTE IF IT WAS HELPFULL",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n     Map<String, Integer> map = new HashMap<>();\\n     \\n     for(String s : arr) {\\n         if(map.containsKey(s)) map.put(s, map.get(s) + 1);\\n         else map.put(s, 1);\\n     }\\n     int i = 0;\\n     for(String s : arr) {\\n         if(map.get(s) == 1 && ++ i == k)\\n         return s;\\n     }\\n     return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2156041,
                "title": "javascript-easiest-to-understand",
                "content": "```\\nvar kthDistinct = function(arr, k) {\\n    let obj = {};\\n    let count = 0;\\n    \\n    for(let i = 0; i < arr.length; i++){\\n            obj[arr[i]] = obj[arr[i]] + 1 || 1\\n    }\\n    \\n\\n    for(let j = 0; j < arr.length; j++){\\n        if(obj[arr[j]] == 1 ){\\n            count++\\n            if(count == k){\\n                return arr[j]\\n            }  \\n        } \\n    }\\n    \\n    if(count != k){\\n        return \"\"\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar kthDistinct = function(arr, k) {\\n    let obj = {};\\n    let count = 0;\\n    \\n    for(let i = 0; i < arr.length; i++){\\n            obj[arr[i]] = obj[arr[i]] + 1 || 1\\n    }\\n    \\n\\n    for(let j = 0; j < arr.length; j++){\\n        if(obj[arr[j]] == 1 ){\\n            count++\\n            if(count == k){\\n                return arr[j]\\n            }  \\n        } \\n    }\\n    \\n    if(count != k){\\n        return \"\"\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1553380,
                "title": "javascript-solution-counting-frequencies",
                "content": "```\\nvar kthDistinct = function(arr, k) {\\n    let freqs = {};\\n    for (let s of arr) freqs[s] = (freqs[s] || 0) + 1;\\n       \\n    return [...Object.keys(freqs)].filter(x => freqs[x] === 1)[k - 1] || \"\";\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar kthDistinct = function(arr, k) {\\n    let freqs = {};\\n    for (let s of arr) freqs[s] = (freqs[s] || 0) + 1;\\n       \\n    return [...Object.keys(freqs)].filter(x => freqs[x] === 1)[k - 1] || \"\";\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1549709,
                "title": "rust-solutions",
                "content": "1. My long solution with HashMap and Sort (4 ms)\\n```\\nimpl Solution {\\n    pub fn kth_distinct(arr: Vec<String>, k: i32) -> String {\\n        let mut hm = std::collections::HashMap::new();\\n        arr.iter().enumerate().for_each(|(ind, s)| {\\n            let e = hm.entry(s).or_insert_with(|| vec![0, ind]);\\n            (*e)[0] += 1;\\n        });\\n\\n        let mut v: Vec<(&String, Vec<usize>)> = hm.into_iter().filter(|(_, v)| v[0] == 1).collect();\\n        v.sort_unstable_by_key(|(_, v)| v[1]);\\n        v.iter()\\n            .map(|(s, _)| *s)\\n            .nth((k - 1) as usize)\\n            .unwrap_or(&\"\".to_string())\\n            .to_string()\\n    }\\n}\\n```\\n\\n2. Short clean solution (inspired by @votrubac - https://leetcode.com/problems/kth-distinct-string-in-an-array/discuss/1549265/Hashmap) (4 ms)\\n```\\nimpl Solution {\\n    pub fn kth_distinct(arr: Vec<String>, k: i32) -> String {\\n        let mut hm = std::collections::HashMap::new();\\n        arr.iter().for_each(|s| {\\n            *hm.entry(s).or_insert(0) += 1;\\n        });\\n\\n        arr.iter()\\n            .filter(|&s| hm[s] == 1)\\n            .nth((k - 1) as usize)\\n            .unwrap_or(&\"\".to_string())\\n            .to_string()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn kth_distinct(arr: Vec<String>, k: i32) -> String {\\n        let mut hm = std::collections::HashMap::new();\\n        arr.iter().enumerate().for_each(|(ind, s)| {\\n            let e = hm.entry(s).or_insert_with(|| vec![0, ind]);\\n            (*e)[0] += 1;\\n        });\\n\\n        let mut v: Vec<(&String, Vec<usize>)> = hm.into_iter().filter(|(_, v)| v[0] == 1).collect();\\n        v.sort_unstable_by_key(|(_, v)| v[1]);\\n        v.iter()\\n            .map(|(s, _)| *s)\\n            .nth((k - 1) as usize)\\n            .unwrap_or(&\"\".to_string())\\n            .to_string()\\n    }\\n}\\n```\n```\\nimpl Solution {\\n    pub fn kth_distinct(arr: Vec<String>, k: i32) -> String {\\n        let mut hm = std::collections::HashMap::new();\\n        arr.iter().for_each(|s| {\\n            *hm.entry(s).or_insert(0) += 1;\\n        });\\n\\n        arr.iter()\\n            .filter(|&s| hm[s] == 1)\\n            .nth((k - 1) as usize)\\n            .unwrap_or(&\"\".to_string())\\n            .to_string()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1549231,
                "title": "java-linkedhashmap-easy-to-understand-two-ways",
                "content": "LinkedHashMap maintains the order of insertion, so we can simply decrease the value \\'k\\' if the key\\'s value is 1 and return the key when k reduces to 0, if not return an empty string.\\n```\\nclass Solution\\n{\\n    public String kthDistinct(String[] arr, int k)\\n    {\\n        Map<String, Integer> map = new LinkedHashMap<>();\\n        for(String s : arr)\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        for(String s : map.keySet())\\n        {\\n            if(map.get(s) == 1)\\n                k--;\\n            if(k == 0)\\n                return s;\\n        }\\n        return \"\";\\n    }\\n}\\n```\\nIt can also be implemented without LinkedHashMap, by following the sequence of the given string array.\\n```\\nclass Solution\\n{\\n    public String kthDistinct(String[] arr, int k)\\n    {\\n        Map<String, Integer> map = new HashMap<>();\\n        for(String s : arr)\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        for(String s : arr)\\n        {\\n            if(map.get(s) == 1)\\n                k--;\\n            if(k == 0)\\n                return s;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution\\n{\\n    public String kthDistinct(String[] arr, int k)\\n    {\\n        Map<String, Integer> map = new LinkedHashMap<>();\\n        for(String s : arr)\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        for(String s : map.keySet())\\n        {\\n            if(map.get(s) == 1)\\n                k--;\\n            if(k == 0)\\n                return s;\\n        }\\n        return \"\";\\n    }\\n}\\n```\n```\\nclass Solution\\n{\\n    public String kthDistinct(String[] arr, int k)\\n    {\\n        Map<String, Integer> map = new HashMap<>();\\n        for(String s : arr)\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        for(String s : arr)\\n        {\\n            if(map.get(s) == 1)\\n                k--;\\n            if(k == 0)\\n                return s;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549066,
                "title": "easy-c-solution-using-map",
                "content": "```\\nmap<string,int> mp;\\n        vector<string> temp;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n           mp[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(mp[arr[i]]==1)\\n                temp.push_back(arr[i]);\\n        }\\n        if(k>temp.size())\\n            return \"\";\\n        return temp[k-1];\\n```",
                "solutionTags": [],
                "code": "```\\nmap<string,int> mp;\\n        vector<string> temp;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n           mp[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(mp[arr[i]]==1)\\n                temp.push_back(arr[i]);\\n        }\\n        if(k>temp.size())\\n            return \"\";\\n        return temp[k-1];\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2906643,
                "title": "java-hashmap-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String, Integer> map = new HashMap<>();\\n        for(String a : arr)\\n        map.put(a,map.getOrDefault(a,0)+1);\\n        int count=1;\\n        for(String a : arr) {\\n            if(map.get(a)==1 && count++ ==k)\\n                return a;     \\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String, Integer> map = new HashMap<>();\\n        for(String a : arr)\\n        map.put(a,map.getOrDefault(a,0)+1);\\n        int count=1;\\n        for(String a : arr) {\\n            if(map.get(a)==1 && count++ ==k)\\n                return a;     \\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2856942,
                "title": "easy-simple-95-efficient-solution",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>m;\\n        int c=0;\\n        for(int i=0;i<arr.size();i++)\\n            m[arr[i]]++;\\n        \\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(m[arr[i]]==1)\\n            {\\n                c++;\\n                if(c==k)\\n                    return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Hash Table",
                    "String",
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>m;\\n        int c=0;\\n        for(int i=0;i<arr.size();i++)\\n            m[arr[i]]++;\\n        \\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(m[arr[i]]==1)\\n            {\\n                c++;\\n                if(c==k)\\n                    return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2458144,
                "title": "go-solution",
                "content": "```\\nfunc kthDistinct(arr []string, k int) string {\\n    res, strFrequency := \"\", make(map[string]int)\\n    \\n    for i := 0; i < len(arr); i++ {\\n        strFrequency[arr[i]]++\\n    }\\n    \\n    for i := 0; i < len(arr); i++ {\\n        if strFrequency[arr[i]] == 1 {\\n            k--\\n        }\\n        \\n        if k == 0 {\\n            res = arr[i]\\n            break\\n        }\\n    }\\n    \\n    return res\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc kthDistinct(arr []string, k int) string {\\n    res, strFrequency := \"\", make(map[string]int)\\n    \\n    for i := 0; i < len(arr); i++ {\\n        strFrequency[arr[i]]++\\n    }\\n    \\n    for i := 0; i < len(arr); i++ {\\n        if strFrequency[arr[i]] == 1 {\\n            k--\\n        }\\n        \\n        if k == 0 {\\n            res = arr[i]\\n            break\\n        }\\n    }\\n    \\n    return res\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2189110,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<>(arr.length);\\n        for (String s : arr) {\\n            map.put(s, map.getOrDefault(s, 0) + 1);\\n        }\\n        int c = 0;\\n        for (Map.Entry<String, Integer> word : map.entrySet()) {\\n            if (word.getValue() == 1) {\\n                c++;\\n                if (c == k) {\\n                    return word.getKey();\\n                }\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String, Integer> map = new LinkedHashMap<>(arr.length);\\n        for (String s : arr) {\\n            map.put(s, map.getOrDefault(s, 0) + 1);\\n        }\\n        int c = 0;\\n        for (Map.Entry<String, Integer> word : map.entrySet()) {\\n            if (word.getValue() == 1) {\\n                c++;\\n                if (c == k) {\\n                    return word.getKey();\\n                }\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1567580,
                "title": "python-easy-to-understand-code",
                "content": "```\\ndef kthDistinct(self, arr: List[str], k: int) -> str:\\n        l=[]\\n\\t\\tc=Counter(arr)\\n        for i in arr:\\n            if c[i] == 1:\\n                l.append(i)\\n        if k > len(l):\\n            return \"\"\\n        else:\\n            return l[k-1]\\n```\\nOr even simplified:\\n```\\ndef kthDistinct(self, arr: List[str], k: int) -> str:\\n        c=Counter(arr)\\n        l=[i for i in arr if c[i] == 1]\\n        return \"\" if k > len(l) else l[k - 1]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef kthDistinct(self, arr: List[str], k: int) -> str:\\n        l=[]\\n\\t\\tc=Counter(arr)\\n        for i in arr:\\n            if c[i] == 1:\\n                l.append(i)\\n        if k > len(l):\\n            return \"\"\\n        else:\\n            return l[k-1]\\n```\n```\\ndef kthDistinct(self, arr: List[str], k: int) -> str:\\n        c=Counter(arr)\\n        l=[i for i in arr if c[i] == 1]\\n        return \"\" if k > len(l) else l[k - 1]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1549070,
                "title": "c-dictionary",
                "content": "```\\npublic class Solution {\\n    public string KthDistinct(string[] arr, int k) {\\n             \\n        var dict = new Dictionary<string, int>();\\n        \\n        foreach (string str in arr) {\\n            if (dict.ContainsKey(str)) dict[str]++;\\n            else dict[str] = 1;\\n        }\\n        \\n        foreach (string str in arr) {\\n            int count;\\n            if (dict.TryGetValue(str, out count)) {                \\n                if (count == 1) {                    \\n                    if (--k == 0) return str;                    \\n                }\\n            }            \\n        }\\n        \\n        return \"\";\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public string KthDistinct(string[] arr, int k) {\\n             \\n        var dict = new Dictionary<string, int>();\\n        \\n        foreach (string str in arr) {\\n            if (dict.ContainsKey(str)) dict[str]++;\\n            else dict[str] = 1;\\n        }\\n        \\n        foreach (string str in arr) {\\n            int count;\\n            if (dict.TryGetValue(str, out count)) {                \\n                if (count == 1) {                    \\n                    if (--k == 0) return str;                    \\n                }\\n            }            \\n        }\\n        \\n        return \"\";\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549004,
                "title": "c-easy-hash-map-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> m;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            string t=arr[i];\\n            m[t]++;\\n        }\\n        int val=0;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(m[arr[i]]==1)\\n            {\\n                val++;\\n                if(val==k)\\n                    return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> m;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            string t=arr[i];\\n            m[t]++;\\n        }\\n        int val=0;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(m[arr[i]]==1)\\n            {\\n                val++;\\n                if(val==k)\\n                    return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3938530,
                "title": "easy-to-understand-100-fast-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution { \\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mpp;\\n        for(auto &s : arr){\\n            mpp[s]++;\\n        }\\n        int cnt=0;\\n        for (auto &s : arr){\\n            if(mpp[s]==1){\\n                cnt++;\\n                if(cnt==k){\\n                    return s;\\n                }\\n            }\\n        }\\n        return \"\";\\n    }\\n}; //Please upvote my code\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution { \\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mpp;\\n        for(auto &s : arr){\\n            mpp[s]++;\\n        }\\n        int cnt=0;\\n        for (auto &s : arr){\\n            if(mpp[s]==1){\\n                cnt++;\\n                if(cnt==k){\\n                    return s;\\n                }\\n            }\\n        }\\n        return \"\";\\n    }\\n}; //Please upvote my code\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3085693,
                "title": "simple-solution-hashmaps-o-n-time",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>m;\\n        for(int i=0;i<arr.size();i++){\\n            m[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(m[arr[i]]==1){\\n                k--;\\n                if(k==0)return arr[i];\\n            }\\n        }\\n        return \"\";\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>m;\\n        for(int i=0;i<arr.size();i++){\\n            m[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(m[arr[i]]==1){\\n                k--;\\n                if(k==0)return arr[i];\\n            }\\n        }\\n        return \"\";\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2653807,
                "title": "o-1-space-complexity-2-approaches-with-map-and-without-map-counting-c-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCount the distinct strings and return kth string.\\n\\n\\n# Complexity\\n**Approach  - 1**\\n- Time complexity: $$O(n^2)$$ count method takes $$O(n)$$ time per iteration\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n**Approach  - 2**\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$ for  HashMap.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n```\\nif(you like)\\n\\tplease upvote;\\n```\\n\\n\\n**Approach - 1**\\n# C++ Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        for(string s : arr)\\n        {\\n            if(count(arr.begin(), arr.end(), s) == 1) // Find the distinct number and decrement the value of k.\\n                k--;\\n            if(k == 0)\\n                return s;   \\n        }\\n        \\n        return \"\";\\n    }\\n};\\n```\\n**Approach - 1**\\n# Java Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        ArrayList<String> v = new ArrayList<>();\\n        for(String s:arr)\\n            v.add(s);\\n\\n        for(String s : v)\\n        {\\n            if(Collections.frequency(v, s) == 1) // Find the distinct number and decrement the value of k.\\n                k--;\\n            if(k == 0)\\n                return s;   \\n        }\\n        \\n        return \"\";\\n    }\\n}\\n```\\n\\n**Approach - 2**\\n# C++ Code\\n```\\nstring kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int> m;\\n    for (auto &s : arr)\\n        m[s]++;\\n    for (auto &s : arr)\\n        if (m[s] == 1 && --k == 0)\\n            return s;\\n    return \"\";\\n}\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nif(you like)\\n\\tplease upvote;\\n```\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        for(string s : arr)\\n        {\\n            if(count(arr.begin(), arr.end(), s) == 1) // Find the distinct number and decrement the value of k.\\n                k--;\\n            if(k == 0)\\n                return s;   \\n        }\\n        \\n        return \"\";\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        ArrayList<String> v = new ArrayList<>();\\n        for(String s:arr)\\n            v.add(s);\\n\\n        for(String s : v)\\n        {\\n            if(Collections.frequency(v, s) == 1) // Find the distinct number and decrement the value of k.\\n                k--;\\n            if(k == 0)\\n                return s;   \\n        }\\n        \\n        return \"\";\\n    }\\n}\\n```\n```\\nstring kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int> m;\\n    for (auto &s : arr)\\n        m[s]++;\\n    for (auto &s : arr)\\n        if (m[s] == 1 && --k == 0)\\n            return s;\\n    return \"\";\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2616688,
                "title": "c-solution-simple-method-best-approach-map-used",
                "content": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n\\t\\n\\t\\n        unordered_map<string ,int>ans;\\n        \\n        for (auto &s:arr)\\n        {\\n            ans[s]++;\\n        }\\n        for (auto &s: arr)\\n        {\\n            if (ans[s]==1)\\n                k--;\\n            if (k==0)\\n                return s;\\n        }\\n        return \"\";\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n\\t\\n\\t\\n        unordered_map<string ,int>ans;\\n        \\n        for (auto &s:arr)\\n        {\\n            ans[s]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2299271,
                "title": "faster-than-95-space-less-than-90-easy-basics",
                "content": "```\\n        data = {}\\n        from collections import Counter\\n        data=dict(Counter(arr))\\n        result = list(filter(lambda x: data[x] == 1, data))\\n        if len(result) < k:\\n            return \\'\\'\\n        return result[k - 1]\\n        print(data)\\n```\\nIF THIS HELP U KINDLY UPVOTE THIS TO HELP OTHERS TO GET THIS SOLUTION\\nIF U DONT GET IT KINDLY COMMENT AND FEEL FREE TO ASK\\nAND CORRECT MEIF I AM WRONG",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n        data = {}\\n        from collections import Counter\\n        data=dict(Counter(arr))\\n        result = list(filter(lambda x: data[x] == 1, data))\\n        if len(result) < k:\\n            return \\'\\'\\n        return result[k - 1]\\n        print(data)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2210864,
                "title": "faster-than-95-memory-less-than-70-hashmap",
                "content": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String, Integer> map = new HashMap<>();\\n        for(String str : arr){\\n            if(map.containsKey(str)) map.put(str, (map.get(str)+1));\\n            else map.put(str, 1);\\n        }\\n        int count=0;\\n        for(String ele: arr){\\n            if(map.get(ele)==1){\\n                count++;\\n                if(count==k){\\n                    return ele;\\n                }\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String, Integer> map = new HashMap<>();\\n        for(String str : arr){\\n            if(map.containsKey(str)) map.put(str, (map.get(str)+1));\\n            else map.put(str, 1);\\n        }\\n        int count=0;\\n        for(String ele: arr){\\n            if(map.get(ele)==1){\\n                count++;\\n                if(count==k){\\n                    return ele;\\n                }\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2152025,
                "title": "c-hashmap",
                "content": "\\t*******************if this solution is helpfull then plz upvote*****app logo ko apke gf ki kasam,mammy ki kasam*******************\\n\\tclass Solution {\\n\\tpublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        int n =arr.size();\\n        unordered_map<string,int>m;\\n        for(auto x:arr){\\n            m[x]++;\\n        }\\n        int c=0;\\n        for(int i=0;i<n;i++){\\n            if(m[arr[i]]==1){\\n                c++;\\n            }\\n            if(c==k)\\n                return arr[i];\\n        }\\n          return \"\";\\n    }\\n\\t};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        int n =arr.size();\\n        unordered_map<string,int>m;\\n        for(auto x:arr){\\n            m[x]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2038494,
                "title": "java-solution-using-hashmap",
                "content": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n        HashMap<String,Integer> hmap = new HashMap<>();\\n        for(String a:arr)\\n            hmap.put(a,hmap.getOrDefault(a,0)+1);\\n        int i=0;\\n        for(String key:arr)\\n        {\\n            if(hmap.get(key)==1)\\n            {\\n                i++;\\n                if(i==k)\\n                    return key;\\n            }\\n        }\\n        return \"\";\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n        HashMap<String,Integer> hmap = new HashMap<>();\\n        for(String a:arr)\\n            hmap.put(a,hmap.getOrDefault(a,0)+1);\\n        int i=0;\\n        for(String key:arr)\\n        {\\n            if(hmap.get(key)==1)\\n            {\\n                i++;\\n                if(i==k)\\n                    return key;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1879932,
                "title": "c-clean-easy-hashmap",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tstring kthDistinct(vector<string>& arr, int k) {\\n\\t\\t\\tunordered_map<string,int>m;\\n\\t\\t\\tfor(auto i : arr){\\n\\t\\t\\t\\tm[i]++;\\n\\t\\t\\t}\\n\\t\\t\\tfor(auto i : arr){\\n\\t\\t\\t\\tif(m[i]==1) k--;\\n\\t\\t\\t\\tif(k==0)\\n\\t\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t\\treturn \"\";\\n\\t\\t}\\n\\t};\\n\\n\\tfeel free to ask your doubts :)\\n\\tand pls upvote if it was helpful :)",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tstring kthDistinct(vector<string>& arr, int k) {\\n\\t\\t\\tunordered_map<string,int>m;\\n\\t\\t\\tfor(auto i : arr){\\n\\t\\t\\t\\tm[i]++;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1740354,
                "title": "java-hashmap-easy-solution-6ms",
                "content": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String, Integer> map = new HashMap<>();\\n        for(String ar : arr){\\n            map.put(ar, map.getOrDefault(ar,0)+1);\\n        }\\n        for(int i=0; i<arr.length;i++){\\n            if(map.get(arr[i])==1 && --k==0){\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String, Integer> map = new HashMap<>();\\n        for(String ar : arr){\\n            map.put(ar, map.getOrDefault(ar,0)+1);\\n        }\\n        for(int i=0; i<arr.length;i++){\\n            if(map.get(arr[i])==1 && --k==0){\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1704820,
                "title": "java-solution-4-ms-faster-than-98-80-of-java-online-submissions",
                "content": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String ,Integer> hm = new HashMap<>();\\n        for(int i = 0; i < arr.length; i++)\\n\\t\\t{\\n             if(hm.containsKey(arr[i]))\\n\\t\\t\\t {\\n                   hm.put(arr[i] , hm.get(arr[i]) + 1);\\n             }\\n            else{\\n                hm.put(arr[i] , 1);\\n            }\\n        }\\n        for(int i=0; i<arr.length; i++)\\n\\t\\t{\\n                    if(hm.get(arr[i]) == 1)\\n\\t\\t\\t\\t\\t{\\n                        k--;\\n\\t\\t\\t\\t\\t\\t   if(k == 0)\\n\\t\\t\\t\\t     \\t{\\n                       return arr[i];\\n                        }\\n                    }\\n                 \\n             }\\n        \\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String ,Integer> hm = new HashMap<>();\\n        for(int i = 0; i < arr.length; i++)\\n\\t\\t{\\n             if(hm.containsKey(arr[i]))\\n\\t\\t\\t {\\n                   hm.put(arr[i] , hm.get(arr[i]) + 1);\\n             }\\n            else{\\n                hm.put(arr[i] , 1);\\n            }\\n        }\\n        for(int i=0; i<arr.length; i++)\\n\\t\\t{\\n                    if(hm.get(arr[i]) == 1)\\n\\t\\t\\t\\t\\t{\\n                        k--;\\n\\t\\t\\t\\t\\t\\t   if(k == 0)\\n\\t\\t\\t\\t     \\t{\\n                       return arr[i];\\n                        }\\n                    }\\n                 \\n             }\\n        \\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1702548,
                "title": "easy-to-understand-for-beginners-as-well-hashset",
                "content": "```\\nvar kthDistinct = function(arr, k) {\\n    \\n    const set = new Set()\\n    const visited = new Set()\\n    for(let i=0;i<arr.length;i++){\\n        if(visited.has(arr[i])){\\n            set.delete(arr[i])\\n        }else{\\n            set.add(arr[i])\\n        }\\n        visited.add(arr[i])\\n    }\\n    return Array.from(set)[k-1] ? Array.from(set)[k-1] : \"\" // converting from set to array using Array.from() or [...set] also works\\n};\\n```\\nRuntime: 84 ms, faster than 78.93% of JavaScript online submissions for Kth Distinct String in an Array.\\nMemory Usage: 42.1 MB, less than 66.98% of JavaScript online submissions for Kth Distinct String in an Array.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar kthDistinct = function(arr, k) {\\n    \\n    const set = new Set()\\n    const visited = new Set()\\n    for(let i=0;i<arr.length;i++){\\n        if(visited.has(arr[i])){\\n            set.delete(arr[i])\\n        }else{\\n            set.add(arr[i])\\n        }\\n        visited.add(arr[i])\\n    }\\n    return Array.from(set)[k-1] ? Array.from(set)[k-1] : \"\" // converting from set to array using Array.from() or [...set] also works\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1621682,
                "title": "c-easy",
                "content": "```C++\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> m;\\n        for(auto i:arr){\\n            m[i]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(m[arr[i]]==1){\\n                k--;\\n            }\\n            if(k==0){\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```\\n**Upvote if you found solution useful**",
                "solutionTags": [],
                "code": "```C++\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> m;\\n        for(auto i:arr){\\n            m[i]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(m[arr[i]]==1){\\n                k--;\\n            }\\n            if(k==0){\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1616933,
                "title": "easy-c-solution-with-map",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> mp;\\n        int ans=0;\\n        for(string word:arr){\\n            mp[word]++;\\n        }\\n        \\n        for(string word:arr){\\n            if(mp[word]==1){// now we count only those with value 1\\n                ans++;\\n            }\\n            if(ans==k){\\n                return word;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> mp;\\n        int ans=0;\\n        for(string word:arr){\\n            mp[word]++;\\n        }\\n        \\n        for(string word:arr){\\n            if(mp[word]==1){// now we count only those with value 1\\n                ans++;\\n            }\\n            if(ans==k){\\n                return word;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1568057,
                "title": "hash-map-c-easy-to-understand",
                "content": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) \\n    {\\n        int n = arr.size();\\n        unordered_map<string,int> mp;         // declare the hashmap for storing the frequency\\n        for(int i=0;i<n;i++)\\n        {\\n            mp[arr[i]]++;\\n        }\\n        \\n        int cnt = 0;                          // declare the count variable for keeping track of the given k\\n        for(int i=0;i<n;i++)\\n        {\\n            if(mp[arr[i]]==1)                 // whenver i will found a single occur char then increase the cnt by one\\n            {                                 // and check cnt is reach to k or not \\n                cnt++;\\n                if(cnt==k)\\n                { \\n                    return arr[i];            // after reaching to the Kth single occur element just return it\\n                }\\n            }\\n        }\\n        return \"\";  \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) \\n    {\\n        int n = arr.size();\\n        unordered_map<string,int> mp;         // declare the hashmap for storing the frequency\\n        for(int i=0;i<n;i++)\\n        {\\n            mp[arr[i]]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1549494,
                "title": "kotlin-straightforward",
                "content": "```\\nclass Solution {\\n    fun kthDistinct(arr: Array<String>, k: Int): String {\\n        val count = arr.groupingBy { it }.eachCount()\\n        return arr.filter { count[it]!! == 1 }.elementAtOrElse(k - 1) { \"\" }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun kthDistinct(arr: Array<String>, k: Int): String {\\n        val count = arr.groupingBy { it }.eachCount()\\n        return arr.filter { count[it]!! == 1 }.elementAtOrElse(k - 1) { \"\" }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549328,
                "title": "short-java-6-lines",
                "content": "```java\\npublic String kthDistinct(String[] a, int k) {\\n        Map<String, Integer> m = new HashMap<>();\\n        Arrays.stream(a).forEach(s -> m.put(s, m.getOrDefault(s, 0) + 1));\\n        for (String s : a)\\n            if (m.get(s) == 1 && --k == 0)\\n                return s;\\n        return \"\";\\n    }",
                "solutionTags": [],
                "code": "```java\\npublic String kthDistinct(String[] a, int k) {\\n        Map<String, Integer> m = new HashMap<>();\\n        Arrays.stream(a).forEach(s -> m.put(s, m.getOrDefault(s, 0) + 1));\\n        for (String s : a)\\n            if (m.get(s) == 1 && --k == 0)\\n                return s;\\n        return \"\";\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1549164,
                "title": "c-no-map-or-set",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        \\n        int n=arr.size();\\n        int cnt=0;\\n        for (int i=0; i<n; i++){\\n            int j;\\n            for (j=0; j<n; j++)\\n                if (i^j and arr[j]==arr[i])\\n                    break;\\n\\n            if (!(j^n))\\n                cnt++;\\n \\n            if (!(cnt^k))\\n                return arr[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        \\n        int n=arr.size();\\n        int cnt=0;\\n        for (int i=0; i<n; i++){\\n            int j;\\n            for (j=0; j<n; j++)\\n                if (i^j and arr[j]==arr[i])\\n                    break;\\n\\n            if (!(j^n))\\n                cnt++;\\n \\n            if (!(cnt^k))\\n                return arr[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549140,
                "title": "golang-solution",
                "content": "[2053. Kth Distinct String in an Array](https://leetcode.com/problems/kth-distinct-string-in-an-array/)\\n\\nThe idea of this solution is to add all the words in `arr` to a map, and then find the `k`\\'th word that has a frequency of `1`.\\n\\n``` go\\nfunc kthDistinct(arr []string, k int) string {\\n    m := make(map[string] int)\\n    counter := 0\\n    \\n    for _, a := range arr { m[a]++ }\\n    \\n    for _, a := range arr {\\n        if m[a] == 1 { counter++ }\\n        if counter == k { return a }\\n    }\\n    \\n    return \"\"\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "``` go\\nfunc kthDistinct(arr []string, k int) string {\\n    m := make(map[string] int)\\n    counter := 0\\n    \\n    for _, a := range arr { m[a]++ }\\n    \\n    for _, a := range arr {\\n        if m[a] == 1 { counter++ }\\n        if counter == k { return a }\\n    }\\n    \\n    return \"\"\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1549096,
                "title": "c-frequency-map",
                "content": "**Connect with me on LinkedIn**: https://www.linkedin.com/in/abhay5349singh/\\n\\n```\\nclass Solution {\\npublic:\\n\\n    string kthDistinct(vector<string>& a, int k) {\\n        int n=a.size();\\n        \\n        map<string,int> mp;\\n        for(int i=0;i<n;i++) mp[a[i]]++;\\n        \\n        for(int i=0;i<n;i++){\\n            if(mp[a[i]]==1) k--;  // reducing k as we encounter unique strings\\n            if(k==0) return a[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\n    string kthDistinct(vector<string>& a, int k) {\\n        int n=a.size();\\n        \\n        map<string,int> mp;\\n        for(int i=0;i<n;i++) mp[a[i]]++;\\n        \\n        for(int i=0;i<n;i++){\\n            if(mp[a[i]]==1) k--;  // reducing k as we encounter unique strings\\n            if(k==0) return a[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549054,
                "title": "easy-c-using-unordered-map",
                "content": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>m;\\n        for(auto i:arr)\\n        {m[i]++;}\\n        vector<string>v;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(m[arr[i]]==1)\\n            {\\n                v.push_back(arr[i]);\\n            }\\n        }\\n        if(v.size()<k)\\n        {\\n            return \"\";\\n        }\\n        return v[k-1];\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>m;\\n        for(auto i:arr)\\n        {m[i]++;}",
                "codeTag": "Java"
            },
            {
                "id": 3933789,
                "title": "easy-solution-map-full-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIn summary, the code creates a frequency map of strings from the input array and iterates through this map to find the kth distinct element based on the frequency counts. It then returns the kth distinct element if found, or an empty string if not.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe kthDistinct function takes in a vector of strings (arr) and an integer k as parameters.\\n\\n1. It creates a map named mp to store the frequency of each string in the input array.\\n\\n2. It then iterates through the input array and updates the frequency count of each string in the map.\\n\\n3. After populating the frequency map, the code initializes a counter variable named count to keep track of the number of distinct elements encountered.\\n\\n4. The code then loops through each element in the map. For each key-value pair (it), it checks if the value (frequency) of the current string is equal to 1 (indicating it\\'s a distinct element).\\n\\n5. If the frequency of the string is indeed 1, the count variable is incremented.\\n\\n6. The code compares the count variable with the target value k. If they are equal, the function returns the key (string) associated with the current map entry, which represents the kth distinct element.\\n\\nIf the target k is not reached after iterating through the map, the function returns an empty string to indicate that the kth distinct element was not found.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n    O(n logn)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n    O(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        int n = arr.size();\\n\\n        map<string,int> mp;\\n\\n        for(int i=0;i<n;i++) {\\n            mp[arr[i]]++;\\n        }\\n\\n        int count = 0;\\n        for(auto it : arr) {\\n            if(mp[it] == 1) {\\n                count++;\\n\\n                if(count == k)\\n                    return it;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        int n = arr.size();\\n\\n        map<string,int> mp;\\n\\n        for(int i=0;i<n;i++) {\\n            mp[arr[i]]++;\\n        }\\n\\n        int count = 0;\\n        for(auto it : arr) {\\n            if(mp[it] == 1) {\\n                count++;\\n\\n                if(count == k)\\n                    return it;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3923008,
                "title": "logic-code-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n![image.png](https://assets.leetcode.com/users/images/405f15de-d545-40af-94b1-7f1ef46f1cc5_1692285415.4725778.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n    \\n\\n     HashMap<String,Integer> sap= new HashMap<>();\\n    for(String lal:arr){\\n        sap.put(lal,sap.getOrDefault(lal,0)+1);\\n    }\\n    int fdfs=0;\\n   for(String ting:arr){\\n       if(sap.get(ting)==1&&++fdfs==k){\\n           return ting;\\n       }\\n       \\n   }\\n   return \"\";\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n    \\n\\n     HashMap<String,Integer> sap= new HashMap<>();\\n    for(String lal:arr){\\n        sap.put(lal,sap.getOrDefault(lal,0)+1);\\n    }\\n    int fdfs=0;\\n   for(String ting:arr){\\n       if(sap.get(ting)==1&&++fdfs==k){\\n           return ting;\\n       }\\n       \\n   }\\n   return \"\";\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3877159,
                "title": "easy-understandable-using-map",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> cals;\\n\\n        for (auto i : arr) {\\n            cals[i]++;\\n        }\\n\\n        int cnt = 0;\\n        for (auto i : arr) {\\n\\n            if (cals[i]==1) {\\n                k--;\\n\\n                if (k==0) {\\n                    return i;\\n                }\\n                \\n            }\\n\\n        }\\n        return \"\";\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> cals;\\n\\n        for (auto i : arr) {\\n            cals[i]++;\\n        }\\n\\n        int cnt = 0;\\n        for (auto i : arr) {\\n\\n            if (cals[i]==1) {\\n                k--;\\n\\n                if (k==0) {\\n                    return i;\\n                }\\n                \\n            }\\n\\n        }\\n        return \"\";\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3783171,
                "title": "python-easy-solution-hash-table",
                "content": "# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        dic={}\\n        for i in arr:\\n            if i in dic:\\n                dic[i]+=1\\n            else:\\n                dic[i]=1\\n        for i in arr:\\n            if dic[i]==1:\\n                k-=1\\n                if k==0:\\n                    return i\\n        return \"\"\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        dic={}\\n        for i in arr:\\n            if i in dic:\\n                dic[i]+=1\\n            else:\\n                dic[i]=1\\n        for i in arr:\\n            if dic[i]==1:\\n                k-=1\\n                if k==0:\\n                    return i\\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3663699,
                "title": "python-hash-table",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n\\n        dicts = {}\\n        ans = []\\n\\n        for i in range(len(arr)):\\n            if arr[i] in dicts:\\n                dicts[arr[i]] += 1\\n            else:\\n                dicts[arr[i]] = 1\\n        \\n        for i in dicts:\\n            if dicts[i] == 1:\\n                ans.append([i, dicts[i]])\\n        \\n        if len(ans) <k:\\n            return \"\"\\n        return ans[k-1][0]\\n\\n\\n\\n        \\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n\\n        dicts = {}\\n        ans = []\\n\\n        for i in range(len(arr)):\\n            if arr[i] in dicts:\\n                dicts[arr[i]] += 1\\n            else:\\n                dicts[arr[i]] = 1\\n        \\n        for i in dicts:\\n            if dicts[i] == 1:\\n                ans.append([i, dicts[i]])\\n        \\n        if len(ans) <k:\\n            return \"\"\\n        return ans[k-1][0]\\n\\n\\n\\n        \\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3618431,
                "title": "hashmap-unordered-hashing-c-easy-solution-optimal-solution",
                "content": "\\n# Approach : \\nWhenever a problem is based on its count/frequency , then 1st approach to think about is map.\\nFirst declare a map and count the frequency of each element , further traverse the array and check from map if frequency is 1 .\\nIf frequency == 1 , then it is a distinct element and do k--\\nWhen k==0 , it means its the Kth distict element , return it.\\n\\nDo upvote and have a good code :)\\n<!-- Describe your approach to solving the problem. -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mp;\\n        string ans;\\n\\n        for(int i=0;i<arr.size();i++){\\n            mp[arr[i]]++;\\n        }\\n\\n        for(int i=0;i<arr.size();i++){\\n            if(mp[arr[i]] == 1){\\n                k--;\\n            }\\n            if(k==0){\\n                ans=arr[i];\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mp;\\n        string ans;\\n\\n        for(int i=0;i<arr.size();i++){\\n            mp[arr[i]]++;\\n        }\\n\\n        for(int i=0;i<arr.size();i++){\\n            if(mp[arr[i]] == 1){\\n                k--;\\n            }\\n            if(k==0){\\n                ans=arr[i];\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3588537,
                "title": "beginners-approach",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n    add all the string in frequncy map\\n    now go again into array and check for those whre value==1\\n    and store the key in list from 0 to n\\n    now return the kth key from the start\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String, Integer> map= new HashMap<>();\\n\\n        for(String s: arr) map.put(s, map.getOrDefault(s,0)+1);\\n\\n        List<String> ls= new ArrayList<>(); \\n        for(String s: arr) if(map.get(s)==1) ls.add(s);\\n\\n        if(ls.size()>=k) return ls.get(k-1);\\n\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String, Integer> map= new HashMap<>();\\n\\n        for(String s: arr) map.put(s, map.getOrDefault(s,0)+1);\\n\\n        List<String> ls= new ArrayList<>(); \\n        for(String s: arr) if(map.get(s)==1) ls.add(s);\\n\\n        if(ls.size()>=k) return ls.get(k-1);\\n\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3391342,
                "title": "easy-for-beginners-99-98-beats-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        int cnt=0;\\n        for(auto i:arr){\\n            if(count(arr.begin(),arr.end(),i)==1)cnt++;\\n            if(cnt==k)return i;\\n        }\\n    return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        int cnt=0;\\n        for(auto i:arr){\\n            if(count(arr.begin(),arr.end(),i)==1)cnt++;\\n            if(cnt==k)return i;\\n        }\\n    return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3304921,
                "title": "kth-distinct-string-in-an-array-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        int i;\\n        string s = \"\";\\n        for(i=0 ; i<arr.size() ; i++)\\n        {\\n            if(count(arr.begin(), arr.end(), arr[i])==1)\\n            {\\n                if(k==1)\\n                {\\n                    s = arr[i];\\n                    return s;\\n                }\\n                k--;\\n            }\\n        }\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        int i;\\n        string s = \"\";\\n        for(i=0 ; i<arr.size() ; i++)\\n        {\\n            if(count(arr.begin(), arr.end(), arr[i])==1)\\n            {\\n                if(k==1)\\n                {\\n                    s = arr[i];\\n                    return s;\\n                }\\n                k--;\\n            }\\n        }\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189499,
                "title": "c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        \\n    int n=arr.size();\\n    vector<bool> check(n,false);\\n    for (int i = 0; i < n - 1; i++)\\n    {\\n        for (int j = i + 1; j < n; j++)\\n        {\\n            if (arr[i] == arr[j])\\n            {\\n                check[i] = true;\\n                check[j] = true;\\n            }\\n        }\\n    }\\n\\n    vector<string> v;\\n    for (int i = 0; i < n; i++)\\n    {\\n        if (!check[i])\\n        {\\n            v.push_back(arr[i]);\\n        }\\n    }\\n\\n    string ans;\\n    if (k <= v.size())\\n    {\\n       ans=v[k-1];\\n    }\\n    else\\n    {\\n        ans=\"\";\\n    }\\n\\n    return ans;\\n\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        \\n    int n=arr.size();\\n    vector<bool> check(n,false);\\n    for (int i = 0; i < n - 1; i++)\\n    {\\n        for (int j = i + 1; j < n; j++)\\n        {\\n            if (arr[i] == arr[j])\\n            {\\n                check[i] = true;\\n                check[j] = true;\\n            }\\n        }\\n    }\\n\\n    vector<string> v;\\n    for (int i = 0; i < n; i++)\\n    {\\n        if (!check[i])\\n        {\\n            v.push_back(arr[i]);\\n        }\\n    }\\n\\n    string ans;\\n    if (k <= v.size())\\n    {\\n       ans=v[k-1];\\n    }\\n    else\\n    {\\n        ans=\"\";\\n    }\\n\\n    return ans;\\n\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3135311,
                "title": "c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        map<string, int> dict;\\n        for(auto &a : arr) dict[a]++;//store freq of each string\\n        int n=0;//keep tab on no. of distinct strings encountered so far\\n        for(int i = 0; i < arr.size(); i++){\\n            if(dict[arr[i]] == 1){\\n                if(++n == k) return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        map<string, int> dict;\\n        for(auto &a : arr) dict[a]++;//store freq of each string\\n        int n=0;//keep tab on no. of distinct strings encountered so far\\n        for(int i = 0; i < arr.size(); i++){\\n            if(dict[arr[i]] == 1){\\n                if(++n == k) return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3097654,
                "title": "veery-very-easy-hashmap-java",
                "content": "If you find this useful please Upvote\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        int ans=0;\\n        HashMap<String, Boolean> map=new HashMap<>();\\n\\n        for(int i=0; i<arr.length; i++){\\n            if(map.containsKey(arr[i])){\\n                map.put(arr[i], false);\\n            }\\n            else{\\n                map.put(arr[i], true);\\n            }\\n        }\\n\\n        for(int i=0; i<arr.length; i++){\\n            if(map.get(arr[i])){\\n                ans++;\\n                if(ans==k){\\n                    return arr[i];\\n                }\\n            }\\n\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        int ans=0;\\n        HashMap<String, Boolean> map=new HashMap<>();\\n\\n        for(int i=0; i<arr.length; i++){\\n            if(map.containsKey(arr[i])){\\n                map.put(arr[i], false);\\n            }\\n            else{\\n                map.put(arr[i], true);\\n            }\\n        }\\n\\n        for(int i=0; i<arr.length; i++){\\n            if(map.get(arr[i])){\\n                ans++;\\n                if(ans==k){\\n                    return arr[i];\\n                }\\n            }\\n\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3096980,
                "title": "one-liner-solution-esnext-syntax",
                "content": "# Code\\n```\\n/**\\n * @param {string[]} arr\\n * @param {number} k\\n * @return {string}\\n */\\nvar kthDistinct = function(arr, k) {\\n    return Object.entries(\\n                arr.reduce((acc, str) => {\\n                    acc[str] = acc[str] === undefined;\\n                    return acc;\\n                }, {})\\n            )\\n            .filter(([, isDistinct]) => isDistinct)[k - 1]?.[0] ?? \\'\\';\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} arr\\n * @param {number} k\\n * @return {string}\\n */\\nvar kthDistinct = function(arr, k) {\\n    return Object.entries(\\n                arr.reduce((acc, str) => {\\n                    acc[str] = acc[str] === undefined;\\n                    return acc;\\n                }, {})\\n            )\\n            .filter(([, isDistinct]) => isDistinct)[k - 1]?.[0] ?? \\'\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2997621,
                "title": "easy-to-understand-beats-85-8-of-solution-in-python-beginner-friendly-solution",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N) is the time complexity as Counter takes O(N) time complexity.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(N) is the worst space complexity where all the elements are unique\\n\\n# Code\\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        l = []\\n        x = Counter(arr)\\n        for i, j in x.items():\\n            if j==1:\\n                l.append(i)\\n        if len(l)<k:\\n            return \"\"\\n        return l[k-1]\\n```\\n\\nFor understanding Python from Scratch, Learning Complex Libraries, need help with solving questions or want to learn MACHINE LEARNING for FREE\\n\\nSubscribe to Bolt Coding Channel - https://www.youtube.com/@boltcoding",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        l = []\\n        x = Counter(arr)\\n        for i, j in x.items():\\n            if j==1:\\n                l.append(i)\\n        if len(l)<k:\\n            return \"\"\\n        return l[k-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986775,
                "title": "q2053-accepted-c-100-fastest-using-maps-easy-simple",
                "content": "CRUX \\n1) We want to return the kth Distinct String.\\n2) Using HashMaps to solve. Calculating the string and it\\'s frequency.\\n3) If the string and its frequency is 1 then k is reduced.\\n4) When k=0, it\\'s the string to be returned.\\n\\t\\t\\tPLEASE UPVOTE \\uD83E\\uDEF6\\uD83C\\uDFFB\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map <string,int> mp;\\n        for(auto i: arr)\\n            mp[i]++; // Calculating the Frequency\\n        int n=arr.size();\\n        for(int i=0;i<n;i++){\\n            if(mp[arr[i]]==1)\\n                k--; // Reducing the k for the kth Distinct Value \\n            if(k==0)\\n                return arr[i]; //When k turns to be 0 Thus,Answer is returned\\n        }\\n        return \"\"; // When there is no ans that has satisfied the conditions then  \"\" is returned\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map <string,int> mp;\\n        for(auto i: arr)\\n            mp[i]++; // Calculating the Frequency\\n        int n=arr.size();\\n        for(int i=0;i<n;i++){\\n            if(mp[arr[i]]==1)\\n                k--; // Reducing the k for the kth Distinct Value \\n            if(k==0)\\n                return arr[i]; //When k turns to be 0 Thus,Answer is returned\\n        }\\n        return \"\"; // When there is no ans that has satisfied the conditions then  \"\" is returned\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2946059,
                "title": "java-solution-using-hashmap-time-complexity-o-n",
                "content": "# Intuition\\nyeah,basically they have said  to be distinct strings  so i have thought of hashmaps where we can identify distinct strings\\n\\n# Approach\\nstep1: first i have thought of iterating through the array  using hashmap\\nstep2:after iterating  i have added  all elements which are having  key-value pair(value=1) in arraylist( i have taken arraylist because it has dynamic size)\\nstep3:as the given   to follow 1 indexing so i have subtracted 1 from k so that it becomes 0 indexing  and i have returned the string \\nstep4:if the  arraylist is less than k i have returned \"\";**\\n\\n# Complexity\\n- Time complexity:\\n- o(n);\\n\\n- Space complexity:\\no(n);\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String,Integer>hm= new HashMap<String,Integer>();\\n       \\n       for(int i=0;i<arr.length;i++)\\n        {\\n           if(hm.containsKey(arr[i]))\\n           hm.put(arr[i],hm.get(arr[i])+1);\\n           else\\n           hm.put(arr[i],1);\\n        }\\n      \\n         ArrayList<String>as= new ArrayList<String>();\\n        \\n       for(int i=0;i<arr.length;i++)\\n        {\\n            if(hm.get(arr[i])==1){\\n          as.add(arr[i]);\\n            }\\n\\n        }\\n        int d=k-1;\\n            for(int i=0;i<as.size();i++)\\n            {\\n                if(i==d)\\n                {\\n                    return as.get(i);\\n                }\\n            }\\n        \\nreturn \"\";\\n\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String,Integer>hm= new HashMap<String,Integer>();\\n       \\n       for(int i=0;i<arr.length;i++)\\n        {\\n           if(hm.containsKey(arr[i]))\\n           hm.put(arr[i],hm.get(arr[i])+1);\\n           else\\n           hm.put(arr[i],1);\\n        }\\n      \\n         ArrayList<String>as= new ArrayList<String>();\\n        \\n       for(int i=0;i<arr.length;i++)\\n        {\\n            if(hm.get(arr[i])==1){\\n          as.add(arr[i]);\\n            }\\n\\n        }\\n        int d=k-1;\\n            for(int i=0;i<as.size();i++)\\n            {\\n                if(i==d)\\n                {\\n                    return as.get(i);\\n                }\\n            }\\n        \\nreturn \"\";\\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2669976,
                "title": "java-solution-hashmap",
                "content": "### Please Upvote :D\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String, Integer> map = new HashMap<>();\\n\\n        for (String s : arr) {\\n            map.put(s, map.getOrDefault(s, 0) + 1);\\n        }\\n\\n        int count = 0;\\n\\n        for (String s : arr) {\\n            if (map.get(s) == 1) {\\n                count++;\\n                if (count == k) return s;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n}\\n\\n// TC: O(n), SC: O(n)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String, Integer> map = new HashMap<>();\\n\\n        for (String s : arr) {\\n            map.put(s, map.getOrDefault(s, 0) + 1);\\n        }\\n\\n        int count = 0;\\n\\n        for (String s : arr) {\\n            if (map.get(s) == 1) {\\n                count++;\\n                if (count == k) return s;\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n}\\n\\n// TC: O(n), SC: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2668923,
                "title": "c-count-vectors",
                "content": "\\t\\t\\n\\t\\tint j=0;\\n        int n=arr.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(count(arr.begin(),arr.end(),arr[i])==1 && k==++j)\\n            {\\n                    return arr[i];\\n            }\\n        }\\n        return \"\";",
                "solutionTags": [
                    "Java",
                    "C",
                    "Array",
                    "String"
                ],
                "code": "\\t\\t\\n\\t\\tint j=0;\\n        int n=arr.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(count(arr.begin(),arr.end(),arr[i])==1 && k==++j)\\n            {\\n                    return arr[i];\\n            }\\n        }\\n        return \"\";",
                "codeTag": "Unknown"
            },
            {
                "id": 2622720,
                "title": "c-easy-to-understand-short",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> m;\\n        for(auto i:arr)\\n            m[i]++;\\n        int c=0;\\n        for(auto i:arr)\\n        {\\n            if(m[i]==1)\\n                c++;\\n            if(c==k)\\n                return i;\\n        }\\n        return \"\";\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> m;\\n        for(auto i:arr)\\n            m[i]++;\\n        int c=0;\\n        for(auto i:arr)\\n        {\\n            if(m[i]==1)\\n                c++;\\n            if(c==k)\\n                return i;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2534115,
                "title": "cpp-beginner-friendly-hashmap",
                "content": "```\\nExplaination:\\nJust map the srings in an unordered map nad return the kth distinct string.\\n\\nCode:\\n\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& s, int k) {\\n        unordered_map<string,int>m;\\n        int i,n=s.size(),t=0;\\n        for(i=0;i<n;i++)\\n            m[s[i]]++;\\n        for(i=0;i<n;i++){\\n            if(m[s[i]]==1){\\n                t++;\\n                if(k==t)\\n                    return s[i];\\n        }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nExplaination:\\nJust map the srings in an unordered map nad return the kth distinct string.\\n\\nCode:\\n\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& s, int k) {\\n        unordered_map<string,int>m;\\n        int i,n=s.size(),t=0;\\n        for(i=0;i<n;i++)\\n            m[s[i]]++;\\n        for(i=0;i<n;i++){\\n            if(m[s[i]]==1){\\n                t++;\\n                if(k==t)\\n                    return s[i];\\n        }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2532260,
                "title": "simple-swift-solution",
                "content": "```\\nclass Solution {\\n    func kthDistinct(_ arr: [String], _ k: Int) -> String {\\n        var lookup: [String: Int] = [:]\\n        for s in arr { lookup[s, default: 0] += 1 }\\n        \\n        let distinctArr = arr.filter { lookup[$0] == 1 }\\n        return distinctArr.count >= k ? distinctArr[k-1] : \"\"\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func kthDistinct(_ arr: [String], _ k: Int) -> String {\\n        var lookup: [String: Int] = [:]\\n        for s in arr { lookup[s, default: 0] += 1 }\\n        \\n        let distinctArr = arr.filter { lookup[$0] == 1 }\\n        return distinctArr.count >= k ? distinctArr[k-1] : \"\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2513301,
                "title": "hashmap",
                "content": "```\\nclass Solution {\\n    fun kthDistinct(arr: Array<String>, k: Int): String {\\n        val map = mutableMapOf<String,Int>()\\n        for(w in arr){\\n            map[w] = (map[w]?:0)+1\\n        }\\n        var count =0\\n        for(w in arr){\\n            if((map[w]?:0)==1)count++\\n            if(count==k) return w\\n        }\\n        return \"\"\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun kthDistinct(arr: Array<String>, k: Int): String {\\n        val map = mutableMapOf<String,Int>()\\n        for(w in arr){\\n            map[w] = (map[w]?:0)+1\\n        }\\n        var count =0\\n        for(w in arr){\\n            if((map[w]?:0)==1)count++\\n            if(count==k) return w\\n        }\\n        return \"\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2438701,
                "title": "c-maps-short-solution",
                "content": "```\\nstring kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> c;\\n        for (const auto& s : arr) {\\n            ++c[s];\\n        }\\n        for (const auto& s : arr) {\\n            if (c[s] == 1 && --k == 0) {\\n                return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstring kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> c;\\n        for (const auto& s : arr) {\\n            ++c[s];\\n        }\\n        for (const auto& s : arr) {\\n            if (c[s] == 1 && --k == 0) {\\n                return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2390944,
                "title": "beginner-friendly-short-and-easy-without-hashmap",
                "content": "```\\nclass Solution {\\n    public boolean isDistinct(String[] arr,int j ){\\n        for(int i=0;i<arr.length;i++){\\n            if(Objects.equals(arr[i], arr[j]) && i!=j) return false;\\n        }\\n        return true;\\n    }\\n    public String kthDistinct(String[] arr, int k) {\\n     \\n        String res=\"\";\\n        int dis=0;\\n        \\n        for(int i=0;i<arr.length;i++){\\n            if(isDistinct(arr,i )){\\n                dis++;  \\n                if(dis==k){\\n                    return arr[i];\\n                }\\n            }\\n        }\\n        return res;        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public boolean isDistinct(String[] arr,int j ){\\n        for(int i=0;i<arr.length;i++){\\n            if(Objects.equals(arr[i], arr[j]) && i!=j) return false;\\n        }\\n        return true;\\n    }\\n    public String kthDistinct(String[] arr, int k) {\\n     \\n        String res=\"\";\\n        int dis=0;\\n        \\n        for(int i=0;i<arr.length;i++){\\n            if(isDistinct(arr,i )){\\n                dis++;  \\n                if(dis==k){\\n                    return arr[i];\\n                }\\n            }\\n        }\\n        return res;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2354477,
                "title": "java-easy-to-understand-using-hashmap",
                "content": "```\\nclass Solution {\\n\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String, Integer> map = new HashMap<>();\\n        for (String s : arr) {\\n            map.put(s, map.getOrDefault(s, 0) + 1);\\n        }\\n        for (String s : arr) {\\n            if (map.get(s) == 1) {\\n                k--;\\n                if (k == 0) return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String, Integer> map = new HashMap<>();\\n        for (String s : arr) {\\n            map.put(s, map.getOrDefault(s, 0) + 1);\\n        }\\n        for (String s : arr) {\\n            if (map.get(s) == 1) {\\n                k--;\\n                if (k == 0) return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2353829,
                "title": "hashmap-c",
                "content": "\\n      string kthDistinct(vector<string>& arr, int k) {\\n        int n=arr.size();\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<n;i++)\\n        {\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(mp[arr[i]]==1)\\n            {\\n                k--;\\n                if(k==0)\\n                {\\n                  return arr[i];\\n                }\\n            }\\n        }\\n        return \"\";\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n      string kthDistinct(vector<string>& arr, int k) {\\n        int n=arr.size();\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<n;i++)\\n        {\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0;i<n;i++)\\n        {\\n            if(mp[arr[i]]==1)\\n            {\\n                k--;\\n                if(k==0)\\n                {\\n                  return arr[i];\\n                }\\n            }\\n        }\\n        return \"\";\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2347724,
                "title": "using-map-vs-vector-c",
                "content": "```\\n/////using d=find() bruteforce but error in lngth of 374 dont know why\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        // unordered_set<string>sk;\\n        vector<string>l;\\n        string res;\\n        for(int i=0;i<arr.size();i++){\\n            if(find(l.begin(),l.end(),arr[i])!= l.end()){\\n                l.erase(remove(l.begin(), l.end(), arr[i]));\\n            }\\n            else{\\n                l.push_back(arr[i]);\\n            }\\n            \\n        }\\n        \\n        for(auto i:l){\\n            cout<<i<<endl;\\n        }\\n        for(int i=0;i<k;i++){\\n             res=l[i];\\n        }\\n    return res;\\n    }\\n};\\n\\n\\n\\n```\\n///////using map\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        map<string,int>sk;\\n        string res;\\n        for(int i=0;i<arr.size();i++){\\n            sk[arr[i]]++;\\n        }\\n        int n=0;\\n        \\n        for(string s : arr){\\n            if(sk[s] ==1) {\\n                n++;\\n            }\\n            if(n == k){ return s;}\\n        }\\n        \\n        return \"\";\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n/////using d=find() bruteforce but error in lngth of 374 dont know why\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        // unordered_set<string>sk;\\n        vector<string>l;\\n        string res;\\n        for(int i=0;i<arr.size();i++){\\n            if(find(l.begin(),l.end(),arr[i])!= l.end()){\\n                l.erase(remove(l.begin(), l.end(), arr[i]));\\n            }\\n            else{\\n                l.push_back(arr[i]);\\n            }\\n            \\n        }\\n        \\n        for(auto i:l){\\n            cout<<i<<endl;\\n        }\\n        for(int i=0;i<k;i++){\\n             res=l[i];\\n        }\\n    return res;\\n    }\\n};\\n\\n\\n\\n```\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        map<string,int>sk;\\n        string res;\\n        for(int i=0;i<arr.size();i++){\\n            sk[arr[i]]++;\\n        }\\n        int n=0;\\n        \\n        for(string s : arr){\\n            if(sk[s] ==1) {\\n                n++;\\n            }\\n            if(n == k){ return s;}\\n        }\\n        \\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2295737,
                "title": "easy-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,vector<int>>mp;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(mp.find(arr[i])==mp.end())\\n            {\\n                mp[arr[i]]={1,i};\\n            }\\n            else\\n            {\\n                mp[arr[i]][0]++;\\n            }\\n        }\\n        priority_queue<pair<int,string>>q;\\n        for(auto it=mp.begin();it!=mp.end();it++)\\n        {\\n          vector<int>v=it->second;\\n          if(v[0]==1)\\n          {\\n              q.push({v[1],it->first});\\n              if(q.size()>k)\\n                  q.pop();\\n          }\\n        }\\n        if(q.size()<k)\\n            return \"\";\\n        return q.top().second;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,vector<int>>mp;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(mp.find(arr[i])==mp.end())\\n            {\\n                mp[arr[i]]={1,i};\\n            }\\n            else\\n            {\\n                mp[arr[i]][0]++;\\n            }\\n        }\\n        priority_queue<pair<int,string>>q;\\n        for(auto it=mp.begin();it!=mp.end();it++)\\n        {\\n          vector<int>v=it->second;\\n          if(v[0]==1)\\n          {\\n              q.push({v[1],it->first});\\n              if(q.size()>k)\\n                  q.pop();\\n          }\\n        }\\n        if(q.size()<k)\\n            return \"\";\\n        return q.top().second;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2294319,
                "title": "kth-distinct-string-in-an-array",
                "content": "class Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        z=[]\\n        for ele in arr:\\n            if arr.count(ele)==1:\\n                z.append(ele)\\n        if len(z)<k:\\n            return \"\"\\n        else:\\n             return z[k-1]\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "class Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        z=[]\\n        for ele in arr:\\n            if arr.count(ele)==1:\\n                z.append(ele)\\n        if len(z)<k:\\n            return \"\"\\n        else:\\n             return z[k-1]\\n",
                "codeTag": "Java"
            },
            {
                "id": 2229488,
                "title": "javascript-straightforward-fast-simple-explained",
                "content": "```\\nvar kthDistinct = function(arr, k) {\\n    let obj = {};\\n    let unique = [];\\n\\t// count frequency of each item in arr\\n    for (let str of arr) {\\n        if (obj[str]) obj[str]++;\\n        else obj[str] = 1;\\n    } // get all items that occur only once\\n\\tfor (let key of Object.keys(obj)) {\\n        if (obj[key] === 1) unique.push(key)\\n    } if (!unique[k-1]) return \"\"\\n    return unique[k-1]\\n};\\n```\\n![image](https://assets.leetcode.com/users/images/a219e8bf-6e6d-4b33-a0ad-2575792e1067_1656808455.7416797.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar kthDistinct = function(arr, k) {\\n    let obj = {};\\n    let unique = [];\\n\\t// count frequency of each item in arr\\n    for (let str of arr) {\\n        if (obj[str]) obj[str]++;\\n        else obj[str] = 1;\\n    } // get all items that occur only once\\n\\tfor (let key of Object.keys(obj)) {\\n        if (obj[key] === 1) unique.push(key)\\n    } if (!unique[k-1]) return \"\"\\n    return unique[k-1]\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2214306,
                "title": "javascript-easy-solution",
                "content": "```\\nvar kthDistinct = function(arr, k) {    \\n    let hash = {};\\n    let count = 0;\\n    \\n    for(let i=0; i<arr.length; i++) {\\n        let word = arr[i];\\n        if( hash[word] ) {\\n            hash[word]++;\\n        } else {\\n            hash[word] = 1;\\n        }\\n    }\\n    \\n    for(let key in hash) {\\n        if( hash[key] == 1) {\\n            count++;\\n        }\\n        if( count == k ) return key;\\n    }\\n    \\n    return \\'\\';\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Hash Table"
                ],
                "code": "```\\nvar kthDistinct = function(arr, k) {    \\n    let hash = {};\\n    let count = 0;\\n    \\n    for(let i=0; i<arr.length; i++) {\\n        let word = arr[i];\\n        if( hash[word] ) {\\n            hash[word]++;\\n        } else {\\n            hash[word] = 1;\\n        }\\n    }\\n    \\n    for(let key in hash) {\\n        if( hash[key] == 1) {\\n            count++;\\n        }\\n        if( count == k ) return key;\\n    }\\n    \\n    return \\'\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2206107,
                "title": "easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        string ans=\"\";\\n        map<string, int>m;\\n\\t\\tfor(int i=0; i<arr.size(); i++) \\n        {\\n            m[arr[i]]++;\\n        }\\n        for(int i=0; i<arr.size(); i++)\\n        {\\n\\t\\t\\tif(m[arr[i]]==1)\\n            {\\n                k--;\\n                if(k==0)\\n                    ans = arr[i];\\n            }\\n        }\\n    return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        string ans=\"\";\\n        map<string, int>m;\\n\\t\\tfor(int i=0; i<arr.size(); i++) \\n        {\\n            m[arr[i]]++;\\n        }\\n        for(int i=0; i<arr.size(); i++)\\n        {\\n\\t\\t\\tif(m[arr[i]]==1)\\n            {\\n                k--;\\n                if(k==0)\\n                    ans = arr[i];\\n            }\\n        }\\n    return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2058094,
                "title": "java-bruteforce-better-optimal-intuitive",
                "content": "```\\n//Bruteforce Approach\\n\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n       int n=arr.length;\\n       for(int i=0;i<n;i++)\\n       {\\n         int cnt=0;\\n         for(int j=0;j<n;j++)\\n           if(arr[i].equals(arr[j]))\\n             cnt++; \\n          \\n         if(cnt==1)\\n           k--; \\n               \\n         if(k==0)\\n           return arr[i];    \\n       }\\n       return \"\";  \\n    }\\n\\t\\n\\t//Aliter \\n\\t\\n\\tclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n       int n=arr.length,counter=0;\\n       for(int i=0;i<n;i++)\\n       {\\n         int cnt=0;\\n         for(int j=0;j<n;j++)\\n           if(arr[i].equals(arr[j]))\\n             cnt++; \\n          \\n         if(cnt==1)\\n           counter++;\\n               \\n         if(counter==k)\\n           return arr[i];    \\n       }\\n       return \"\";  \\n    }\\n}\\n```\\n\\n```\\n//Better Approach\\n\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n        HashMap<String,Integer>hm= new HashMap<>();\\n        for(String str:arr)\\n          if(hm.containsKey(str))\\n             hm.put(str,hm.get(str)+1);\\n          else\\n             hm.put(str,1);\\n    \\n        int cnt=0;\\n        for(String str:arr)\\n          if(hm.get(str)==1)\\n          {\\n            cnt++;\\n            if(cnt==k)\\n              return str;\\n          }\\n        \\n        return \"\";\\n    }\\n}\\n```\\n\\n```\\n//Optimal Approach\\n\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n        LinkedHashMap<String,Integer>lhm= new LinkedHashMap<>();\\n        for(String str:arr)\\n          if(lhm.containsKey(str))\\n             lhm.put(str,lhm.get(str)+1);\\n          else\\n             lhm.put(str,1);\\n    \\n        int cnt=0;\\n        for(String str:arr)\\n          if(lhm.get(str)==1)\\n          {\\n            cnt++;\\n            if(cnt==k)\\n              return str;\\n          }\\n        \\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n//Bruteforce Approach\\n\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n       int n=arr.length;\\n       for(int i=0;i<n;i++)\\n       {\\n         int cnt=0;\\n         for(int j=0;j<n;j++)\\n           if(arr[i].equals(arr[j]))\\n             cnt++; \\n          \\n         if(cnt==1)\\n           k--; \\n               \\n         if(k==0)\\n           return arr[i];    \\n       }\\n       return \"\";  \\n    }\\n\\t\\n\\t//Aliter \\n\\t\\n\\tclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n       int n=arr.length,counter=0;\\n       for(int i=0;i<n;i++)\\n       {\\n         int cnt=0;\\n         for(int j=0;j<n;j++)\\n           if(arr[i].equals(arr[j]))\\n             cnt++; \\n          \\n         if(cnt==1)\\n           counter++;\\n               \\n         if(counter==k)\\n           return arr[i];    \\n       }\\n       return \"\";  \\n    }\\n}\\n```\n```\\n//Better Approach\\n\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n        HashMap<String,Integer>hm= new HashMap<>();\\n        for(String str:arr)\\n          if(hm.containsKey(str))\\n             hm.put(str,hm.get(str)+1);\\n          else\\n             hm.put(str,1);\\n    \\n        int cnt=0;\\n        for(String str:arr)\\n          if(hm.get(str)==1)\\n          {\\n            cnt++;\\n            if(cnt==k)\\n              return str;\\n          }\\n        \\n        return \"\";\\n    }\\n}\\n```\n```\\n//Optimal Approach\\n\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n        LinkedHashMap<String,Integer>lhm= new LinkedHashMap<>();\\n        for(String str:arr)\\n          if(lhm.containsKey(str))\\n             lhm.put(str,lhm.get(str)+1);\\n          else\\n             lhm.put(str,1);\\n    \\n        int cnt=0;\\n        for(String str:arr)\\n          if(lhm.get(str)==1)\\n          {\\n            cnt++;\\n            if(cnt==k)\\n              return str;\\n          }\\n        \\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2052507,
                "title": "python-hash-map-78-faster",
                "content": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        hash_map = {}\\n        for string in arr:\\n            hash_map[string] = hash_map.get(string, 0) + 1\\n        for string in arr:\\n            if hash_map[string] == 1:\\n                k -= 1\\n                if k == 0:\\n                    return string\\n        return \"\"\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        hash_map = {}\\n        for string in arr:\\n            hash_map[string] = hash_map.get(string, 0) + 1\\n        for string in arr:\\n            if hash_map[string] == 1:\\n                k -= 1\\n                if k == 0:\\n                    return string\\n        return \"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1972824,
                "title": "simple-python-solution-with-try-and-except",
                "content": "```\\ndef kthDistinct(self, arr, k):\\n\\ttry :\\n\\t\\treturn [c for c in arr if arr.count(c) == 1][k-1]\\n\\texcept :\\n\\t\\treturn \"\"\\n```",
                "solutionTags": [],
                "code": "```\\ndef kthDistinct(self, arr, k):\\n\\ttry :\\n\\t\\treturn [c for c in arr if arr.count(c) == 1][k-1]\\n\\texcept :\\n\\t\\treturn \"\"\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1943548,
                "title": "python-dictionary-basic-solution-faster-than-95",
                "content": "```\\nd={}\\nfor i in arr:\\n\\td[i]=d.get(i,0)+1\\n\\ncount=1\\nfor i in arr:\\n\\tif count==k and d[i]==1:\\n\\t\\treturn i\\n\\telif d[i]==1 and count!=k:\\n\\t\\tcount+=1\\nreturn \"\"\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nd={}\\nfor i in arr:\\n\\td[i]=d.get(i,0)+1\\n\\ncount=1\\nfor i in arr:\\n\\tif count==k and d[i]==1:\\n\\t\\treturn i\\n\\telif d[i]==1 and count!=k:\\n\\t\\tcount+=1\\nreturn \"\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1936726,
                "title": "rust",
                "content": "```rust\\nimpl Solution {\\n    pub fn kth_distinct(arr: Vec<String>, k: i32) -> String {\\n        let mut dict = std::collections::HashMap::new();\\n        for i in 0..arr.len() {\\n            *dict.entry(arr[i].as_str()).or_insert(0) += 1;\\n        }\\n        let mut idx = 0;\\n        for i in 0..arr.len() {\\n            if *dict.get(arr[i].as_str()).unwrap() == 1 {\\n                idx += 1;\\n                if idx == k {\\n                    return arr[i].to_string();\\n                }\\n            }\\n        }\\n        \"\".to_owned()\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rust\\nimpl Solution {\\n    pub fn kth_distinct(arr: Vec<String>, k: i32) -> String {\\n        let mut dict = std::collections::HashMap::new();\\n        for i in 0..arr.len() {\\n            *dict.entry(arr[i].as_str()).or_insert(0) += 1;\\n        }\\n        let mut idx = 0;\\n        for i in 0..arr.len() {\\n            if *dict.get(arr[i].as_str()).unwrap() == 1 {\\n                idx += 1;\\n                if idx == k {\\n                    return arr[i].to_string();\\n                }\\n            }\\n        }\\n        \"\".to_owned()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1904522,
                "title": "kth-distinct-string-in-an-array",
                "content": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        int count = 0;\\n        for (int j = 0; j < arr.length; j++) {\\n            count = 0;\\n            for (int i = 0; i < arr.length; i++) {\\n                if (arr[j].equals(arr[i]))\\n                    count++;\\n            }\\n            if (count == 1) {\\n                k--;\\n                if (k == 0)\\n                    return arr[j];\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        int count = 0;\\n        for (int j = 0; j < arr.length; j++) {\\n            count = 0;\\n            for (int i = 0; i < arr.length; i++) {\\n                if (arr[j].equals(arr[i]))\\n                    count++;\\n            }\\n            if (count == 1) {\\n                k--;\\n                if (k == 0)\\n                    return arr[j];\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1815460,
                "title": "c-using-unordered-map-o-n",
                "content": "**My Solution**\\n\\n**Approach : Maintain the freq. of each element using Unordered Map and then loop k times verifying the element occuring only Once and return kth element occuring once**\\n\\n**Time Complexity: O(N)**\\n**Space Complexity: O(N)**\\n\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> m;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            m[arr[i]]++;\\n        }\\n        int count=1;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(m[arr[i]]==1 && count!=k)\\n            {\\n                count++;\\n            }\\n            else if(m[arr[i]]==1 && count==k)\\n                return arr[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```\\n\\n**Please Upvote \\uD83D\\uDC4D\\uD83C\\uDFFB, Spread Love and Motivate**",
                "solutionTags": [
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> m;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            m[arr[i]]++;\\n        }\\n        int count=1;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(m[arr[i]]==1 && count!=k)\\n            {\\n                count++;\\n            }\\n            else if(m[arr[i]]==1 && count==k)\\n                return arr[i];\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1810730,
                "title": "java-linkedhashmap",
                "content": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String, Integer> map = new LinkedHashMap<>();\\n        for(int i=0; i<arr.length; i++){\\n            map.put(arr[i], map.getOrDefault(arr[i], 0)+1);\\n        }\\n        \\n        if(k>map.size()) return \"\";\\n        \\n        String[] str = new String[arr.length+1];\\n        Arrays.fill(str, \"\");\\n        int index=1;\\n        for(Map.Entry<String, Integer> m: map.entrySet()){\\n            if(m.getValue()<2){\\n                str[index] = m.getKey();\\n                index++;\\n            }\\n        }\\n        \\n        return str[k];\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String, Integer> map = new LinkedHashMap<>();\\n        for(int i=0; i<arr.length; i++){\\n            map.put(arr[i], map.getOrDefault(arr[i], 0)+1);\\n        }\\n        \\n        if(k>map.size()) return \"\";\\n        \\n        String[] str = new String[arr.length+1];\\n        Arrays.fill(str, \"\");\\n        int index=1;\\n        for(Map.Entry<String, Integer> m: map.entrySet()){\\n            if(m.getValue()<2){\\n                str[index] = m.getKey();\\n                index++;\\n            }\\n        }\\n        \\n        return str[k];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1787382,
                "title": "c-easy-solution-beginner-friendly-o-n-time-complexity",
                "content": "**Please Upvote if you found this helpful.**\\n\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) \\n    {\\n        string ans= \"\";\\n        unordered_map<string, int> mp;\\n        for(int i=0; i<arr.size(); i++)\\n        {\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0; i<arr.size(); i++)\\n        {\\n            if(mp[arr[i]]== 1)\\n            {\\n                k--;\\n                if(k== 0)\\n                {\\n                    ans= arr[i];\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) \\n    {\\n        string ans= \"\";\\n        unordered_map<string, int> mp;\\n        for(int i=0; i<arr.size(); i++)\\n        {\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0; i<arr.size(); i++)\\n        {\\n            if(mp[arr[i]]== 1)\\n            {\\n                k--;\\n                if(k== 0)\\n                {\\n                    ans= arr[i];\\n                    break;\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1772269,
                "title": "cpp-easy-to-understant-soln",
                "content": "string kthDistinct(vector<string>& arr, int k) {\\n        \\n   unordered_map<string,int> mp;\\n        int n = arr.size();\\n        int count = 0;\\n        for(int i=0;i<n;i++)\\n            mp[arr[i]]++;\\n        \\n    \\n        for(int i=0;i<n;i++)\\n        {\\n            if(mp[arr[i]] == 1)\\n                count++;\\n            if(count == k)\\n            {\\n              return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "string kthDistinct(vector<string>& arr, int k) {\\n        \\n   unordered_map<string,int> mp;\\n        int n = arr.size();\\n        int count = 0;\\n        for(int i=0;i<n;i++)\\n            mp[arr[i]]++;\\n        \\n    \\n        for(int i=0;i<n;i++)\\n        {\\n            if(mp[arr[i]] == 1)\\n                count++;\\n            if(count == k)\\n            {\\n              return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1770557,
                "title": "c-easy-solution",
                "content": "\\n\\n\\n\\n\\n\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>m;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            m[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(m[arr[i]]==1)\\n            {\\n                k--;\\n            }\\n            if(k==0 && m[arr[i]]==1)\\n            {\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>m;\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            m[arr[i]]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1769805,
                "title": "javascript-easy-accepted-solution-99-62-faster-runtime-64-ms",
                "content": "![image](https://assets.leetcode.com/users/images/c9e0b0a0-32ba-4ed0-92c8-be9d9752476f_1644817076.4198272.png)\\n\\n```\\nvar kthDistinct = function(arr, k) {\\n    let arr1 = [];\\n    let myMap = new Map();\\n    for (let i = 0; i < arr.length; i++) {\\n        if(!myMap.has(arr[i])){\\n            myMap.set(arr[i],1);\\n        } else if(myMap.has(arr[i])){\\n            let count = myMap.get(arr[i]);\\n            count++;\\n            myMap.delete(arr[i],count);\\n            myMap.set(arr[i],count);\\n        }\\n    } \\n    for (const [key,val] of myMap) {\\n        if(val === 1){\\n            arr1.push(key);\\n        }\\n    }\\n    if(arr1[k-1] === undefined){\\n        return \"\";\\n    } else {\\n        return arr1[k-1];\\n    }\\n};",
                "solutionTags": [],
                "code": "![image](https://assets.leetcode.com/users/images/c9e0b0a0-32ba-4ed0-92c8-be9d9752476f_1644817076.4198272.png)\\n\\n```\\nvar kthDistinct = function(arr, k) {\\n    let arr1 = [];\\n    let myMap = new Map();\\n    for (let i = 0; i < arr.length; i++) {\\n        if(!myMap.has(arr[i])){\\n            myMap.set(arr[i],1);\\n        } else if(myMap.has(arr[i])){\\n            let count = myMap.get(arr[i]);\\n            count++;\\n            myMap.delete(arr[i],count);\\n            myMap.set(arr[i],count);\\n        }\\n    } \\n    for (const [key,val] of myMap) {\\n        if(val === 1){\\n            arr1.push(key);\\n        }\\n    }\\n    if(arr1[k-1] === undefined){\\n        return \"\";\\n    } else {\\n        return arr1[k-1];\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1721979,
                "title": "c-easy-solution-map",
                "content": "\\n\\t    unordered_map<string,int> mp;\\n        \\n        int cnt = 0;\\n        \\n        for(int i=0;i<arr.size();i++)\\n        {\\n            mp[arr[i]]++;\\n        }\\n        \\n        string result = \"\";\\n        \\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(mp[arr[i]]==1)\\n            {\\n                 cnt++;\\n            }\\n            \\n            if(cnt==k)\\n            {\\n                result = arr[i];\\n                break;\\n            }\\n           \\n        }\\n        \\n        return result;\\n        \\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "\\n\\t    unordered_map<string,int> mp;\\n        \\n        int cnt = 0;\\n        \\n        for(int i=0;i<arr.size();i++)\\n        {\\n            mp[arr[i]]++;\\n        }\\n        \\n        string result = \"\";\\n        \\n        for(int i=0;i<arr.size();i++)\\n        {\\n            if(mp[arr[i]]==1)\\n            {\\n                 cnt++;\\n            }\\n            \\n            if(cnt==k)\\n            {\\n                result = arr[i];\\n                break;\\n            }\\n           \\n        }\\n        \\n        return result;\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1675661,
                "title": "java-linear-time-space-easy-to-understand",
                "content": "Key idea:\\n- Have a hashtable that stores frequency of occurrences of each string in arr.\\n- Loop through the arr again:\\n\\t- At each iteration, check which string has frequency of occurrence as 1.\\n\\t- For *those* distinct strings, return the kth one.\\n\\t- Note: k could be between 1 and last index of arr. Else return \"\".\\n\\n**Time Complexity:** O(n * m) where n = length of arr and m = longest/average size of any string in the arr\\n**Space Complexity:** O(n) considering `m` length of the string\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String, Integer> hashTable = new HashMap<>();\\n        \\n        for(String word : arr)\\n            hashTable.put(word, hashTable.getOrDefault(word, 0) + 1);\\n        \\n        int index = 0;\\n        for(index = 0; index < arr.length && k > 0; ++index) {\\n            if(hashTable.get(arr[index]) == 1)\\n                k--;\\n        }\\n        \\n        if(k == 0 && index <= arr.length)\\n            return arr[index-1];\\n        \\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String, Integer> hashTable = new HashMap<>();\\n        \\n        for(String word : arr)\\n            hashTable.put(word, hashTable.getOrDefault(word, 0) + 1);\\n        \\n        int index = 0;\\n        for(index = 0; index < arr.length && k > 0; ++index) {\\n            if(hashTable.get(arr[index]) == 1)\\n                k--;\\n        }\\n        \\n        if(k == 0 && index <= arr.length)\\n            return arr[index-1];\\n        \\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1672456,
                "title": "c-brute-force-method-using-properties-of-vectors-very-slow-compared-to-other-submissions",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) \\n    {\\n        if( k > arr.size()) //check obvious base case, k must not be large than arr.size()\\n        {\\n            return \"\";\\n        }\\n        \\n        if(arr.size() == 2 && arr[0] == arr[1]) //manually check base case\\n        {\\n            return \"\";\\n        }\\n        \\n        vector<string> arr2;\\n        \\n        vector<string> diff;\\n        \\n        for(int i = 0; i < arr.size(); i++)\\n        {\\n            for(int j = i+1; j < arr.size(); j++)\\n            {\\n                if(arr[i] == arr[j])\\n                {\\n                    arr2.push_back(arr[i]);\\n                    arr2.push_back(arr[j]);\\n                }\\n            }\\n        }\\n        \\n        vector<string>::iterator it; //declare the iterator\\n        \\n        for(string val : arr2) //iterate through vector of dupes\\n        {\\n            it = find(arr.begin(), arr.end(), val);\\n            \\n            int index = it - arr.begin();\\n            \\n            if(it != arr.end()) //if element from duplicates array match original, we can delete it\\n            {\\n                arr.erase(arr.begin() + index);\\n            }\\n        }\\n        \\n        return arr[k-1]; //arrays are 0 indexed, so we must use -1, or else we might go out of bounds\\n    }\\n};\\n````",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) \\n    {\\n        if( k > arr.size()) //check obvious base case, k must not be large than arr.size()\\n        {\\n            return \"\";\\n        }\\n        \\n        if(arr.size() == 2 && arr[0] == arr[1]) //manually check base case\\n        {\\n            return \"\";\\n        }\\n        \\n        vector<string> arr2;\\n        \\n        vector<string> diff;\\n        \\n        for(int i = 0; i < arr.size(); i++)\\n        {\\n            for(int j = i+1; j < arr.size(); j++)\\n            {\\n                if(arr[i] == arr[j])\\n                {\\n                    arr2.push_back(arr[i]);\\n                    arr2.push_back(arr[j]);\\n                }\\n            }\\n        }\\n        \\n        vector<string>::iterator it; //declare the iterator\\n        \\n        for(string val : arr2) //iterate through vector of dupes\\n        {\\n            it = find(arr.begin(), arr.end(), val);\\n            \\n            int index = it - arr.begin();\\n            \\n            if(it != arr.end()) //if element from duplicates array match original, we can delete it\\n            {\\n                arr.erase(arr.begin() + index);\\n            }\\n        }\\n        \\n        return arr[k-1]; //arrays are 0 indexed, so we must use -1, or else we might go out of bounds\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1652582,
                "title": "hashmap-easy-to-understand-solution",
                "content": "first we calculated the number of times a string occures in an array and stored the values in a map.\\n\\n```\\nunordered_map<string, int> m;\\nfor (auto &s : arr)\\n++m[s];\\n```\\n\\nfor eg:\\n[\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2\\n\\nmap :\\nd:1\\nb:2\\nc:2\\na:1\\n\\n```\\nfor (auto &s : arr)\\n        if (m[s] == 1 && --k == 0)\\n            return s;\\n```\\nm[s]==1 means we are only checking the strings which have appeared once i.e. \\'d\\' and \\'a\\' in above example.\\nand --k==0 will only be evaluated when m[s]==1 is true means we need to return the string at the right index i.e. if k is greater than our desired value we decrease the value of k\\n\\nd is a valid string but not at the right index : k = 2 , --k = 1 --k==0 false\\na is a valid string k=1 --k = 0 --k==0 true\\nhence we return this string\\n\\nhope this helps :)\\n\\n\\n```\\nstring kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int> m;\\n    for (auto &s : arr)\\n        ++m[s];\\n    for (auto &s : arr)\\n        if (m[s] == 1 && --k == 0)\\n            return s;\\n    return \"\";\\n}\\n```\\n\\n# Note :- Hash map does not guarantee any order, that\\'s why we need to enumerate using the input array again****\\nPlease upvote my solution if you would have  liked it",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nunordered_map<string, int> m;\\nfor (auto &s : arr)\\n++m[s];\\n```\n```\\nfor (auto &s : arr)\\n        if (m[s] == 1 && --k == 0)\\n            return s;\\n```\n```\\nstring kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int> m;\\n    for (auto &s : arr)\\n        ++m[s];\\n    for (auto &s : arr)\\n        if (m[s] == 1 && --k == 0)\\n            return s;\\n    return \"\";\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1641478,
                "title": "c-using-map",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> temp;\\n        for(int i = 0; i< arr.size(); i++){\\n            temp[arr[i]]++;\\n        }\\n        vector<string> f;\\n        for(int i = 0; i < arr.size(); i++){\\n            if(temp[arr[i]] == 1) f.push_back(arr[i]);\\n        }\\n        if(k > f.size()) return \"\";\\n        else return f[k - 1];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> temp;\\n        for(int i = 0; i< arr.size(); i++){\\n            temp[arr[i]]++;\\n        }\\n        vector<string> f;\\n        for(int i = 0; i < arr.size(); i++){\\n            if(temp[arr[i]] == 1) f.push_back(arr[i]);\\n        }\\n        if(k > f.size()) return \"\";\\n        else return f[k - 1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1640428,
                "title": "c-easy-hashmap",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int n) {\\n        unordered_map<string,int>mp;\\n        for(auto& i:arr)mp[i]++;\\n        for(auto& i:arr){\\n            if(mp[i]==1)n--;\\n            if(n==0)return i;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int n) {\\n        unordered_map<string,int>mp;\\n        for(auto& i:arr)mp[i]++;\\n        for(auto& i:arr){\\n            if(mp[i]==1)n--;\\n            if(n==0)return i;\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1637956,
                "title": "python-simplest-solution",
                "content": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        n = len(arr)\\n        cnt = defaultdict(int)\\n        for c in arr:\\n            cnt[c] += 1\\n        \\n        distinct = []\\n        for i in range(n):\\n            if cnt[arr[i]] == 1:\\n                distinct.append(arr[i])\\n                \\n        if len(distinct) < k:\\n            return \"\"\\n        else:\\n            return distinct[k-1]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        n = len(arr)\\n        cnt = defaultdict(int)\\n        for c in arr:\\n            cnt[c] += 1\\n        \\n        distinct = []\\n        for i in range(n):\\n            if cnt[arr[i]] == 1:\\n                distinct.append(arr[i])\\n                \\n        if len(distinct) < k:\\n            return \"\"\\n        else:\\n            return distinct[k-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1632009,
                "title": "java-easy-7-lines-o-n",
                "content": "Because we are dealing with string, using a hashmap to count is a good idea. \\n\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String, Integer> map = new HashMap<>();\\n        for (String s : arr) map.merge(s, 1, Integer::sum);\\n        for (String s : arr) \\n            if (map.get(s) == 1)\\n                if (--k == 0)\\n                    return s;\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String, Integer> map = new HashMap<>();\\n        for (String s : arr) map.merge(s, 1, Integer::sum);\\n        for (String s : arr) \\n            if (map.get(s) == 1)\\n                if (--k == 0)\\n                    return s;\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1603261,
                "title": "have-a-scala-interview-in-a-few-hrs-prepping-on-some-easy-problems-i-don-t-know-scala",
                "content": "```\\nimport collection.mutable\\n\\nobject Solution {\\n    def kthDistinct(arr: Array[String], k: Int): String = {\\n        var count = 0;\\n        var m = mutable.Map[String, Int]().withDefaultValue(0);\\n        arr.foreach { id => m(id)+=1 }\\n        \\n        arr.foreach { id => \\n            \\n            if (m(id) ==1){count+=1}\\n            if (count ==k){return id}\\n        \\n        }\\n        \\n        return \"\"\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimport collection.mutable\\n\\nobject Solution {\\n    def kthDistinct(arr: Array[String], k: Int): String = {\\n        var count = 0;\\n        var m = mutable.Map[String, Int]().withDefaultValue(0);\\n        arr.foreach { id => m(id)+=1 }\\n        \\n        arr.foreach { id => \\n            \\n            if (m(id) ==1){count+=1}\\n            if (count ==k){return id}\\n        \\n        }\\n        \\n        return \"\"\\n        \\n    }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1597160,
                "title": "c-unordered-map",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        //this map to store count of strings\\n        unordered_map<string,int> map;\\n        //this order vector to store the distinct strings in order to find kth among them\\n        vector<string> order;\\n        int n=arr.size();\\n        for(int i=0;i<n;i++){\\n            if(map[arr[i]]==0){\\n                order.push_back(arr[i]);\\n            }            \\n            map[arr[i]]++;\\n        }\\n        int m=order.size();\\n        int count=1;\\n        for(int i=0;i<m;i++){\\n            if(map[order[i]]==1){\\n                if(count==k){\\n                    return order[i];\\n                }\\n                count++;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Hash Table"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        //this map to store count of strings\\n        unordered_map<string,int> map;\\n        //this order vector to store the distinct strings in order to find kth among them\\n        vector<string> order;\\n        int n=arr.size();\\n        for(int i=0;i<n;i++){\\n            if(map[arr[i]]==0){\\n                order.push_back(arr[i]);\\n            }            \\n            map[arr[i]]++;\\n        }\\n        int m=order.size();\\n        int count=1;\\n        for(int i=0;i<m;i++){\\n            if(map[order[i]]==1){\\n                if(count==k){\\n                    return order[i];\\n                }\\n                count++;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1595189,
                "title": "rust",
                "content": "```\\nuse std::collections::HashMap;\\nimpl Solution {\\n    pub fn kth_distinct(arr: Vec<String>, k: i32) -> String {\\n        let mut m:HashMap<String,i32> = HashMap::new();\\n        let mut count = 0;\\n        for v in arr.iter(){\\n            *m.entry(v.to_string()).or_insert(0) +=1;\\n        }\\n        for i in arr.iter(){\\n            if m.get(i) == Some(&1) {\\n                count +=1;\\n                if count == k{\\n                    return i.to_string();\\n                }\\n            }\\n        }\\n        String::from(\"\")\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::collections::HashMap;\\nimpl Solution {\\n    pub fn kth_distinct(arr: Vec<String>, k: i32) -> String {\\n        let mut m:HashMap<String,i32> = HashMap::new();\\n        let mut count = 0;\\n        for v in arr.iter(){\\n            *m.entry(v.to_string()).or_insert(0) +=1;\\n        }\\n        for i in arr.iter(){\\n            if m.get(i) == Some(&1) {\\n                count +=1;\\n                if count == k{\\n                    return i.to_string();\\n                }\\n            }\\n        }\\n        String::from(\"\")\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1595104,
                "title": "c-solution-using-unordered-map",
                "content": "We will use unordered_map to store frequency of each string in array.\\n\\n```\\nstring kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> freq;\\n        for(auto s : arr)\\n            freq[s]++;\\n        \\n        int count = 0;\\n        for(auto s : arr){\\n            if(freq[s] == 1)\\n                count++;\\n            \\n            if(count == k)\\n                return s;\\n        }\\n        return \"\";\\n    }\\n```\\n\\nTime Complexity : O(n) on average, as insertion in unordered map takes O(1) time on an average.\\nSpace Complexity : O(n) , to store frequency of each string",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nstring kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> freq;\\n        for(auto s : arr)\\n            freq[s]++;\\n        \\n        int count = 0;\\n        for(auto s : arr){\\n            if(freq[s] == 1)\\n                count++;\\n            \\n            if(count == k)\\n                return s;\\n        }\\n        return \"\";\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1592477,
                "title": "java-100-very-easy-solution-from-uzb-coder",
                "content": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n       String[]res=new String[arr.length];\\n    HashMap<String,Integer> hm = new HashMap<>();\\n              \\n        for(int i = 0; i < arr.length; i++){\\n           if(hm.containsKey(arr[i])){               \\n               hm.put(arr[i],hm.get(arr[i])+1);\\n           }\\n           else{\\n               hm.put(arr[i],1);\\n           }\\n        }        \\n        for(String s: arr){\\n            if(hm.get(s)==1)\\n                k--;\\n            if(k==0)\\n                return s;\\n        }\\n        return \"\";\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n       String[]res=new String[arr.length];\\n    HashMap<String,Integer> hm = new HashMap<>();\\n              \\n        for(int i = 0; i < arr.length; i++){\\n           if(hm.containsKey(arr[i])){               \\n               hm.put(arr[i],hm.get(arr[i])+1);\\n           }\\n           else{\\n               hm.put(arr[i],1);\\n           }\\n        }        \\n        for(String s: arr){\\n            if(hm.get(s)==1)\\n                k--;\\n            if(k==0)\\n                return s;\\n        }\\n        return \"\";\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1589694,
                "title": "python3-simple-solution-by-counter",
                "content": "```\\nfrom collections import Counter\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        arr_dict = Counter(arr)\\n        for key, value in arr_dict.items():\\n            if value == 1:\\n                k -= 1\\n                if not k:\\n                    return key\\n        return \\'\\'\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        arr_dict = Counter(arr)\\n        for key, value in arr_dict.items():\\n            if value == 1:\\n                k -= 1\\n                if not k:\\n                    return key\\n        return \\'\\'\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1580393,
                "title": "c-simple-hashmap-fast",
                "content": "\\n\\t\\tstring kthDistinct(vector<string>& arr, int k) {\\n        int n = arr.size();\\n        unordered_map<string,int> m;\\n        \\n        for(int i=0;i<n;i++){\\n            m[arr[i]]++;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(m[arr[i]] == 1){\\n                k--;\\n                if(k == 0)\\n                    return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }",
                "solutionTags": [],
                "code": "\\n\\t\\tstring kthDistinct(vector<string>& arr, int k) {\\n        int n = arr.size();\\n        unordered_map<string,int> m;\\n        \\n        for(int i=0;i<n;i++){\\n            m[arr[i]]++;\\n        }\\n        for(int i=0;i<n;i++){\\n            if(m[arr[i]] == 1){\\n                k--;\\n                if(k == 0)\\n                    return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1572020,
                "title": "c-4ms-unordered-map",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> lookup;\\n        for(const auto &s : arr) {\\n            lookup[s]++;\\n        }\\n        \\n        int cnt = 0;\\n        for(const auto &s : arr) {\\n            if(lookup[s] == 1) {\\n                ++cnt;\\n                if(cnt == k)\\n                    return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> lookup;\\n        for(const auto &s : arr) {\\n            lookup[s]++;\\n        }\\n        \\n        int cnt = 0;\\n        for(const auto &s : arr) {\\n            if(lookup[s] == 1) {\\n                ++cnt;\\n                if(cnt == k)\\n                    return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1552272,
                "title": "swift-easy-to-understand-with-dictionary",
                "content": "```\\nclass Solution {\\n    func kthDistinct(_ arr: [String], _ k: Int) -> String {\\n\\n        let dictionary = Dictionary(grouping: arr, by: {$0}).filter { $1.count == 1 }.keys\\n        var temp = 0\\n\\n        for each in arr {\\n            if dictionary.contains(each) {\\n                temp += 1\\n                if temp == k {\\n                    return each\\n                }\\n            }\\n        }\\n\\n        return \"\"\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func kthDistinct(_ arr: [String], _ k: Int) -> String {\\n\\n        let dictionary = Dictionary(grouping: arr, by: {$0}).filter { $1.count == 1 }.keys\\n        var temp = 0\\n\\n        for each in arr {\\n            if dictionary.contains(each) {\\n                temp += 1\\n                if temp == k {\\n                    return each\\n                }\\n            }\\n        }\\n\\n        return \"\"\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1551262,
                "title": "if-you-don-t-know-what-to-do-throw-in-a-hashmap",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> freq;\\n        for(auto s : arr) {\\n            freq[s]++; \\n        }        \\n        for(auto s: arr){ \\n            if(freq[s]==1){\\n                if(--k == 0 ) \\n                    return s; \\n            }\\n        }\\n        return \"\"; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int> freq;\\n        for(auto s : arr) {\\n            freq[s]++; \\n        }        \\n        for(auto s: arr){ \\n            if(freq[s]==1){\\n                if(--k == 0 ) \\n                    return s; \\n            }\\n        }\\n        return \"\"; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549423,
                "title": "c-2053-kth-distinct-string-in-an-array",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> freq; \\n        for (auto& x : arr) ++freq[x]; \\n        for (auto& x : arr) \\n            if (freq[x] == 1 && --k == 0) return x; \\n        return string(); \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> freq; \\n        for (auto& x : arr) ++freq[x]; \\n        for (auto& x : arr) \\n            if (freq[x] == 1 && --k == 0) return x; \\n        return string(); \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549242,
                "title": "easy-solution-using-unordered-map-c",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        int n = arr.size();\\n        unordered_map<string,int> m;\\n        for(auto it : arr){\\n            m[it]++;\\n        }\\n        for(int i =0;i<n;i++){\\n            auto it = m.find(arr[i]);\\n            if((*it).second == 1)k--;\\n            if(k == 0){\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        int n = arr.size();\\n        unordered_map<string,int> m;\\n        for(auto it : arr){\\n            m[it]++;\\n        }\\n        for(int i =0;i<n;i++){\\n            auto it = m.find(arr[i]);\\n            if((*it).second == 1)k--;\\n            if(k == 0){\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549218,
                "title": "javascript-direct-way-194ms",
                "content": "```\\nconst counter = (a_or_s) => { let map = new Map(); for (const i of a_or_s) map.set(i, map.get(i) + 1 || 1); return map; };\\n\\nconst kthDistinct = (a, k) => {\\n    let m = counter(a);\\n    let i = 1;\\n    for (const [s, occ] of m) {\\n        if (occ == 1) {\\n            if (i == k) return s;\\n            i++;\\n        }\\n    }\\n    return \\'\\';\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst counter = (a_or_s) => { let map = new Map(); for (const i of a_or_s) map.set(i, map.get(i) + 1 || 1); return map; };\\n\\nconst kthDistinct = (a, k) => {\\n    let m = counter(a);\\n    let i = 1;\\n    for (const [s, occ] of m) {\\n        if (occ == 1) {\\n            if (i == k) return s;\\n            i++;\\n        }\\n    }\\n    return \\'\\';\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1549094,
                "title": "c-solution-with-map",
                "content": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        map <string,int> save;\\n//save each element of array in map (so I know which one is a distinct string and which one not) \\n        for (auto s : arr)save[s]++;\\n        \\n        for (auto s : arr){\\n\\t\\t//start from the first element of array we check if it is a distinct string, if so k--\\n\\t\\t//so we can get kth disitinct string\\n            if (save[s] == 1)k--;\\n            \\n\\t\\t\\t//when k = 0 means that we find the kth disitinct string\\n            if (k == 0)return s;\\n        }\\n        //if the loop is finished and we didn\\'t returned anything (so means that k != 0) means that there are fewer than k distinct strings\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        map <string,int> save;\\n//save each element of array in map (so I know which one is a distinct string and which one not) \\n        for (auto s : arr)save[s]++;\\n        \\n        for (auto s : arr){\\n\\t\\t//start from the first element of array we check if it is a distinct string, if so k--\\n\\t\\t//so we can get kth disitinct string\\n            if (save[s] == 1)k--;\\n            \\n\\t\\t\\t//when k = 0 means that we find the kth disitinct string\\n            if (k == 0)return s;\\n        }\\n        //if the loop is finished and we didn\\'t returned anything (so means that k != 0) means that there are fewer than k distinct strings\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1549087,
                "title": "kth-distinct-string-in-an-array",
                "content": "\"\"\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        int n=arr.length;\\n        int[] a=new int[n];\\n        int b=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            int c=1;\\n            for(int j=0;j<n;j++)\\n            {\\n                if(i!=j && arr[i].equals(arr[j]))\\n                {\\n                    c++;\\n                }\\n            }\\n            a[i]=c;\\n            if(c==1)\\n            {\\n                b++;\\n            }\\n        }\\n        if(k<=b)\\n        {\\n            int c=0;\\n            for(int i=0;i<n;i++)\\n            {\\n                if(a[i]==1)\\n                {\\n                    c++;\\n                    if(c==k)\\n                    {\\n                        return arr[i];\\n                    }\\n                }\\n            }\\n        }\\n\\t\\tString a=new String();\\n        return a;\\n        \\n    }\\n}\\n\"\"",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        int n=arr.length;\\n        int[] a=new int[n];\\n        int b=0;\\n        for(int i=0;i<n;i++)\\n        {\\n            int c=1;\\n            for(int j=0;j<n;j++)\\n            {\\n                if(i!=j && arr[i].equals(arr[j]))\\n                {\\n                    c++;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1549084,
                "title": "c-hashmap",
                "content": "```\\nclass Solution {\\npublic:\\n  string kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int>t;\\n    for(auto &w:arr) t[w]++;\\n    for(auto &w:arr)\\n      if(t[w] == 1) if(--k == 0) return w;\\n    \\n    return \"\";\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  string kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int>t;\\n    for(auto &w:arr) t[w]++;\\n    for(auto &w:arr)\\n      if(t[w] == 1) if(--k == 0) return w;\\n    \\n    return \"\";\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1548986,
                "title": "java-hashmap-linkedhashmap-simple",
                "content": "```\\nclass Solution {\\n    public String kthDistinct(String[] a, int k) {\\n        \\n        if(a.length==0)\\n        return \"\";\\n        \\n        HashMap<String,Integer> map=new LinkedHashMap<>();\\n        \\n        for(String s:a)\\n        map.put(s,map.getOrDefault(s,0)+1);\\n        \\n        for(String  m : map.keySet()){\\n           if(map.get(m)==1)\\n            {\\n                k--;\\n                if(k==0)\\n                return m;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n\\n```\\n\\n**Note**:\\n\\n**LinkedHashMap maintains insertion order in java**",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] a, int k) {\\n        \\n        if(a.length==0)\\n        return \"\";\\n        \\n        HashMap<String,Integer> map=new LinkedHashMap<>();\\n        \\n        for(String s:a)\\n        map.put(s,map.getOrDefault(s,0)+1);\\n        \\n        for(String  m : map.keySet()){\\n           if(map.get(m)==1)\\n            {\\n                k--;\\n                if(k==0)\\n                return m;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1548981,
                "title": "a-few-solutions",
                "content": "Use a map `m` to count the frequency of each string `s` of the input array `A`.  Return the `K`<sup>th</sup> unique string `s` per the order of the input array `A` if it exists.  Otherwise return the empty string.\\n\\n---\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun kthDistinct(A: Array<String>, K: Int): String {\\n        var m = mutableMapOf<String, Int>()\\n        for (s in A)\\n            m.set(s, 1 + m.getOrDefault(s, 0))\\n        var i = 0\\n        var t = \"\"\\n        for (s in A)\\n            if (m[s]!! == 1 && ++i == K)\\n                t = s\\n        return t\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet kthDistinct = (A, K, m = new Map(), i = 0, t = \\'\\') => {\\n    for (let s of A)\\n        m.set(s, 1 + (m.get(s) || 0));\\n    for (let s of A)\\n        if (m.get(s) == 1 && ++i == K)\\n            t = s;\\n    return t;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def kthDistinct(self, A: List[str], K: int, i = 0, t = \\'\\') -> str:\\n        m = Counter(A)\\n        for s in A:\\n            if m[s] == 1:\\n                i += 1\\n                if i == K:\\n                    t = s\\n        return t\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using Map = map<string, int>;\\n    using VS = vector<string>;\\n    string kthDistinct(VS& A, int K, Map m = {}, int i = 0, string t = {}) {\\n        for (auto& s: A)\\n            ++m[s];\\n        for (auto& s: A)\\n            if (m[s] == 1 && ++i == K)\\n                t = s;\\n        return t;\\n    }\\n};\\n```\\n\\n---\\n\\nLet `B` be the input array `A` filtered to remove duplicates based upon a counter `m` of the frequeny of each value `s`.  Return `B[K - 1]` if it exists as the 0-based `K`<sup>th</sup> unique value per the order of `A`.\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun kthDistinct(A: Array<String>, K: Int): String {\\n        var m = mutableMapOf<String, Int>()\\n        for (s in A)\\n            m[s] = 1 + m.getOrDefault(s, 0)\\n        var B = A.filter{ m[it]!! == 1 }\\n        return if (K <= B.size) B[K - 1] else \"\"\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet kthDistinct = (A, K, m = new Map()) => {\\n    for (let s of A)\\n        m.set(s, 1 + (m.get(s) || 0));\\n    let B = A.filter(s => m.get(s) == 1);\\n    return K <= B.length ? B[K - 1] : \\'\\';\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def kthDistinct(self, A: List[str], K: int) -> str:\\n        m = Counter(A)\\n        B = [s for s in A if m[s] == 1]\\n        return B[K - 1] if K <= len(B) else \\'\\'\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VS = vector<string>;\\n    using Map = unordered_map<string, int>;\\n    string kthDistinct(VS& A, int K, Map m = {}) {\\n        for (auto& s: A)\\n            ++m[s];\\n        A.erase(remove_if(A.begin(), A.end(), [&](auto& s) { return m[s] != 1; }), A.end()); // remove duplicates\\n        return K <= A.size() ? A[K - 1] : \"\";\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun kthDistinct(A: Array<String>, K: Int): String {\\n        var m = mutableMapOf<String, Int>()\\n        for (s in A)\\n            m.set(s, 1 + m.getOrDefault(s, 0))\\n        var i = 0\\n        var t = \"\"\\n        for (s in A)\\n            if (m[s]!! == 1 && ++i == K)\\n                t = s\\n        return t\\n    }\\n}\\n```\n```\\nlet kthDistinct = (A, K, m = new Map(), i = 0, t = \\'\\') => {\\n    for (let s of A)\\n        m.set(s, 1 + (m.get(s) || 0));\\n    for (let s of A)\\n        if (m.get(s) == 1 && ++i == K)\\n            t = s;\\n    return t;\\n};\\n```\n```\\nclass Solution:\\n    def kthDistinct(self, A: List[str], K: int, i = 0, t = \\'\\') -> str:\\n        m = Counter(A)\\n        for s in A:\\n            if m[s] == 1:\\n                i += 1\\n                if i == K:\\n                    t = s\\n        return t\\n```\n```\\nclass Solution {\\npublic:\\n    using Map = map<string, int>;\\n    using VS = vector<string>;\\n    string kthDistinct(VS& A, int K, Map m = {}, int i = 0, string t = {}) {\\n        for (auto& s: A)\\n            ++m[s];\\n        for (auto& s: A)\\n            if (m[s] == 1 && ++i == K)\\n                t = s;\\n        return t;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    fun kthDistinct(A: Array<String>, K: Int): String {\\n        var m = mutableMapOf<String, Int>()\\n        for (s in A)\\n            m[s] = 1 + m.getOrDefault(s, 0)\\n        var B = A.filter{ m[it]!! == 1 }\\n        return if (K <= B.size) B[K - 1] else \"\"\\n    }\\n}\\n```\n```\\nlet kthDistinct = (A, K, m = new Map()) => {\\n    for (let s of A)\\n        m.set(s, 1 + (m.get(s) || 0));\\n    let B = A.filter(s => m.get(s) == 1);\\n    return K <= B.length ? B[K - 1] : \\'\\';\\n};\\n```\n```\\nclass Solution:\\n    def kthDistinct(self, A: List[str], K: int) -> str:\\n        m = Counter(A)\\n        B = [s for s in A if m[s] == 1]\\n        return B[K - 1] if K <= len(B) else \\'\\'\\n```\n```\\nclass Solution {\\npublic:\\n    using VS = vector<string>;\\n    using Map = unordered_map<string, int>;\\n    string kthDistinct(VS& A, int K, Map m = {}) {\\n        for (auto& s: A)\\n            ++m[s];\\n        A.erase(remove_if(A.begin(), A.end(), [&](auto& s) { return m[s] != 1; }), A.end()); // remove duplicates\\n        return K <= A.size() ? A[K - 1] : \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4083296,
                "title": "2053-kth-distinct-string-in-an-array",
                "content": "# Intuition \\n      arr =\\n      [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"]\\n      k =2  \\n       pair the values \\n       { a:1,\\n         b:2,\\n         c:2,\\n         d:1}\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach \\nHashMap Approach\\nNow loop the array in a relative order and compare with a hashmap values which have a value of one they all are distinct strings and return the kth distinct string ,so that the relative order won\\'t change.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String,Integer> map =new HashMap<>();\\n        int count=0;\\n        for(String s:arr){\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n        for(String s:arr){\\n            if(map.get(s)==1){\\n                count++;\\n                if(count==k) return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String,Integer> map =new HashMap<>();\\n        int count=0;\\n        for(String s:arr){\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n        for(String s:arr){\\n            if(map.get(s)==1){\\n                count++;\\n                if(count==k) return s;\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4076942,
                "title": "my-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        ans=[]\\n        for i in arr:\\n            if arr.count(i)==1:\\n                ans.append(i)\\n        if len(ans)<k:\\n            return \\'\\'\\n        return ans[k-1]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        ans=[]\\n        for i in arr:\\n            if arr.count(i)==1:\\n                ans.append(i)\\n        if len(ans)<k:\\n            return \\'\\'\\n        return ans[k-1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4074312,
                "title": "simple-c-not-c-solution-with-better-than-70-in-memory",
                "content": "\\n# Code\\n```\\nchar * kthDistinct(char ** arr, int arrSize, int k)\\n{\\n\\n    char * distStr = \"\" ;\\n    int distCntr   = 0  ;\\n    int i ;\\n    int j ;\\n\\n    for( i = 0; i < arrSize; i++ )\\n    {\\n\\n        for( j = 0; j < arrSize; j++ )\\n        {\\n\\n            if( i == j )\\n            {\\n                continue ;\\n            }\\n            else\\n            {\\n                if( strcmp( arr[i], arr[j] ) == 0 )\\n                {\\n                    break ;\\n                }\\n                else\\n                {\\n\\n                }\\n            }\\n            \\n        }\\n\\n        if( j == arrSize ) \\n        {\\n            distCntr++ ;\\n        }\\n        else\\n        {\\n\\n        }\\n\\n        if( distCntr == k )\\n        {\\n            distStr = arr[i] ;\\n            break ;\\n        }\\n        else\\n        {\\n\\n        }\\n\\n    }\\n\\n    if( distCntr < k )\\n    {\\n        distStr = \"\" ;\\n    }\\n    else\\n    {\\n        \\n    }\\n\\n    return distStr ;\\n\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nchar * kthDistinct(char ** arr, int arrSize, int k)\\n{\\n\\n    char * distStr = \"\" ;\\n    int distCntr   = 0  ;\\n    int i ;\\n    int j ;\\n\\n    for( i = 0; i < arrSize; i++ )\\n    {\\n\\n        for( j = 0; j < arrSize; j++ )\\n        {\\n\\n            if( i == j )\\n            {\\n                continue ;\\n            }\\n            else\\n            {\\n                if( strcmp( arr[i], arr[j] ) == 0 )\\n                {\\n                    break ;\\n                }\\n                else\\n                {\\n\\n                }\\n            }\\n            \\n        }\\n\\n        if( j == arrSize ) \\n        {\\n            distCntr++ ;\\n        }\\n        else\\n        {\\n\\n        }\\n\\n        if( distCntr == k )\\n        {\\n            distStr = arr[i] ;\\n            break ;\\n        }\\n        else\\n        {\\n\\n        }\\n\\n    }\\n\\n    if( distCntr < k )\\n    {\\n        distStr = \"\" ;\\n    }\\n    else\\n    {\\n        \\n    }\\n\\n    return distStr ;\\n\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072830,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        a=Counter(arr)\\n        c=0\\n        res=[]\\n        for i in a:\\n            if a[i]==1:\\n                res.append(i)\\n        if len(res)==0:\\n            return \"\"\\n        if len(res)>=k:\\n            return res[k-1]\\n        else:\\n            return \"\"\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        a=Counter(arr)\\n        c=0\\n        res=[]\\n        for i in a:\\n            if a[i]==1:\\n                res.append(i)\\n        if len(res)==0:\\n            return \"\"\\n        if len(res)>=k:\\n            return res[k-1]\\n        else:\\n            return \"\"\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072228,
                "title": "python-solution-using-list-and-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. All the 1st occurance of str in list called **item_list**\\n2. Duplicate occurances in set called **items_set**\\n3. Remove all the duplicate items from the list\\n4. Once we have all the items with occurance =1 and are in order, iterate through the item_list till k, and return the kth item.\\n\\n# Complexity\\n- Time complexity: o(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: o(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def kthDistinct(self, arr, k):\\n        \"\"\"\\n        :type arr: List[str]\\n        :type k: int\\n        :rtype: str\\n        \"\"\"\\n        item_list=[]\\n        items_set=set()\\n        for i in arr:\\n            if i in item_list:\\n                items_set.add(i)\\n            else :\\n                item_list.append(i)\\n        for i in items_set:\\n            print(i)\\n            item_list.remove(i)\\n        counter=1\\n        res=\"\"\\n        for key in item_list:\\n            if counter==k:\\n                res=key\\n            counter=counter+1\\n        return res\\n\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def kthDistinct(self, arr, k):\\n        \"\"\"\\n        :type arr: List[str]\\n        :type k: int\\n        :rtype: str\\n        \"\"\"\\n        item_list=[]\\n        items_set=set()\\n        for i in arr:\\n            if i in item_list:\\n                items_set.add(i)\\n            else :\\n                item_list.append(i)\\n        for i in items_set:\\n            print(i)\\n            item_list.remove(i)\\n        counter=1\\n        res=\"\"\\n        for key in item_list:\\n            if counter==k:\\n                res=key\\n            counter=counter+1\\n        return res\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4061363,
                "title": "two-lines-solution",
                "content": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        cnt = Counter(arr)\\n        return \"\".join(s[0] for s in zip(filter(lambda c: cnt[c] == 1, arr), count(1)) if s[1] == k)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        cnt = Counter(arr)\\n        return \"\".join(s[0] for s in zip(filter(lambda c: cnt[c] == 1, arr), count(1)) if s[1] == k)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4057032,
                "title": "basic-python",
                "content": "EASIEST HASHMAP IMPLEMENTATION\\n\\n# Code\\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        m={}\\n        for i in arr:\\n            if i not in m:\\n                m[i]=1\\n            elif i in m:\\n                m[i]=0\\n        for u,v in m.items():\\n            if v==1:\\n                k-=1\\n            if k==0:\\n                return u\\n        return \"\"\\n\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        m={}\\n        for i in arr:\\n            if i not in m:\\n                m[i]=1\\n            elif i in m:\\n                m[i]=0\\n        for u,v in m.items():\\n            if v==1:\\n                k-=1\\n            if k==0:\\n                return u\\n        return \"\"\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4054573,
                "title": "world-easy-solution-using-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} arr\\n * @param {number} k\\n * @return {string}\\n */\\nvar kthDistinct = function(arr, k) {\\n  let d = 0;\\n    for(let i=0; i<arr.length; i++){\\n      let a = checkit(arr[i],arr,i);\\n      if(a){\\n        d = d+1;\\n        if(d == k){\\n          return arr[i];\\n        }\\n      }\\n    }\\n    return \"\";\\n};\\n\\nfunction checkit(string, array, j){\\n  for(let i=0; i<array.length; i++){\\n    if(i != j){\\n      if(string == array[i]){\\n       return false;\\n      }\\n    }\\n  }\\n  return true;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} arr\\n * @param {number} k\\n * @return {string}\\n */\\nvar kthDistinct = function(arr, k) {\\n  let d = 0;\\n    for(let i=0; i<arr.length; i++){\\n      let a = checkit(arr[i],arr,i);\\n      if(a){\\n        d = d+1;\\n        if(d == k){\\n          return arr[i];\\n        }\\n      }\\n    }\\n    return \"\";\\n};\\n\\nfunction checkit(string, array, j){\\n  for(let i=0; i<array.length; i++){\\n    if(i != j){\\n      if(string == array[i]){\\n       return false;\\n      }\\n    }\\n  }\\n  return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050861,
                "title": "easy-to-learn-and-understand",
                "content": "# Code\\n```\\nimport java.util.HashSet;\\n\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String,Integer> map=new HashMap<>();\\n        int count=0;\\n        for(String element:arr){\\n            if(map.containsKey(element)) map.put(element, map.get(element)+1);\\n            else map.put(element,0);\\n        }\\n\\n        for(String element:arr){\\n            if(map.get(element)==0) count++;\\n            if(count==k) return element;\\n        }\\n        return \"\";\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.util.HashSet;\\n\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String,Integer> map=new HashMap<>();\\n        int count=0;\\n        for(String element:arr){\\n            if(map.containsKey(element)) map.put(element, map.get(element)+1);\\n            else map.put(element,0);\\n        }\\n\\n        for(String element:arr){\\n            if(map.get(element)==0) count++;\\n            if(count==k) return element;\\n        }\\n        return \"\";\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4048704,
                "title": "89-runtime-97-memory-without-counter-simple-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/674a50c7-dc84-4a77-b0d3-c5449fe5d7d0_1694799282.708279.png)\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        d: dict = {}\\n        d_get = d.get\\n\\n        for i in arr: d[i] = d_get(i,0) + 1\\n\\n        for i, v in d.items():\\n            if v == 1:\\n                k -= 1\\n                if not k: return i\\n        \\n        return \"\"\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        d: dict = {}\\n        d_get = d.get\\n\\n        for i in arr: d[i] = d_get(i,0) + 1\\n\\n        for i, v in d.items():\\n            if v == 1:\\n                k -= 1\\n                if not k: return i\\n        \\n        return \"\"\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4047005,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n        Map<String,Integer>map=new LinkedHashMap<>();\\n        for(String s:arr)\\n        {\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n        for(Map.Entry<String,Integer>m:map.entrySet())\\n        {\\n            if(m.getValue()==1)\\n            {\\n                k--;\\n        \\n            }\\n            if(k==0)\\n            {\\n                return m.getKey();\\n            }\\n        }\\n        return \"\";\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) \\n    {\\n        Map<String,Integer>map=new LinkedHashMap<>();\\n        for(String s:arr)\\n        {\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n        for(Map.Entry<String,Integer>m:map.entrySet())\\n        {\\n            if(m.getValue()==1)\\n            {\\n                k--;\\n        \\n            }\\n            if(k==0)\\n            {\\n                return m.getKey();\\n            }\\n        }\\n        return \"\";\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4032187,
                "title": "c-code-with-94-faster",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> m;\\n        for(int i=0;i<arr.size();i++) m[arr[i]]++;\\n        int cnt=0;\\n        for(auto x : arr){\\n            if(m[x]==1){\\n                cnt++;\\n                if(cnt==k) return x;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string, int> m;\\n        for(int i=0;i<arr.size();i++) m[arr[i]]++;\\n        int cnt=0;\\n        for(auto x : arr){\\n            if(m[x]==1){\\n                cnt++;\\n                if(cnt==k) return x;\\n            }\\n        }\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4026129,
                "title": "typescript-javascript-solution",
                "content": "```ts\\nfunction kthDistinct(arr: string[], k: number): string {\\n    const setData = [...new Set(arr)];\\n    if(setData.length == arr.length) return arr[k-1];\\n    const distinctChars: string[] = [];\\n    for(let char of setData){\\n        if(arr.indexOf(char) === arr.lastIndexOf(char)) distinctChars.push(char);\\n    }\\n    return distinctChars[k-1] || \\'\\';\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```ts\\nfunction kthDistinct(arr: string[], k: number): string {\\n    const setData = [...new Set(arr)];\\n    if(setData.length == arr.length) return arr[k-1];\\n    const distinctChars: string[] = [];\\n    for(let char of setData){\\n        if(arr.indexOf(char) === arr.lastIndexOf(char)) distinctChars.push(char);\\n    }\\n    return distinctChars[k-1] || \\'\\';\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020120,
                "title": "beginner-approach-hashmap-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String,Integer>ans=new LinkedHashMap<>();\\n        for(int i=0;i<arr.length;i++){\\n            ans.put(arr[i],ans.getOrDefault(arr[i],0)+1);\\n        }\\n        ArrayList<String>an=new ArrayList<>();\\n        Set<String>key=ans.keySet();\\n        for(String p:key){\\n            if(ans.get(p)<=1){\\n                an.add(p);\\n            }\\n        }\\n        if(an.size()<k)return \"\";\\n        return an.get(k-1);\\n       \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String,Integer>ans=new LinkedHashMap<>();\\n        for(int i=0;i<arr.length;i++){\\n            ans.put(arr[i],ans.getOrDefault(arr[i],0)+1);\\n        }\\n        ArrayList<String>an=new ArrayList<>();\\n        Set<String>key=ans.keySet();\\n        for(String p:key){\\n            if(ans.get(p)<=1){\\n                an.add(p);\\n            }\\n        }\\n        if(an.size()<k)return \"\";\\n        return an.get(k-1);\\n       \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019942,
                "title": "99-beats-two-sets-solution-java",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n\\n        Set<String> set = new LinkedHashSet<>();    \\n        Set<String> duplicates = new HashSet<>();\\n\\n\\n        for(int i = 0; i<arr.length; i++){\\n            if(duplicates.contains(arr[i]) ||set.contains(arr[i])){\\n                set.remove(arr[i]);\\n                duplicates.add(arr[i]);\\n                continue;\\n            }\\n            set.add(arr[i]);\\n        }\\n\\n        if(set.size()<k) return \"\";\\n\\n          List<String> list = new ArrayList<>(set);\\n          return list.get(k-1);\\n\\n\\n\\n\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n\\n        Set<String> set = new LinkedHashSet<>();    \\n        Set<String> duplicates = new HashSet<>();\\n\\n\\n        for(int i = 0; i<arr.length; i++){\\n            if(duplicates.contains(arr[i]) ||set.contains(arr[i])){\\n                set.remove(arr[i]);\\n                duplicates.add(arr[i]);\\n                continue;\\n            }\\n            set.add(arr[i]);\\n        }\\n\\n        if(set.size()<k) return \"\";\\n\\n          List<String> list = new ArrayList<>(set);\\n          return list.get(k-1);\\n\\n\\n\\n\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4008323,
                "title": "solution-using-hashmaps-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String,Integer> map = new HashMap<>();\\n        for(String s : arr)\\n        {\\n            map.put(s, map.getOrDefault(s, 0)+1);\\n        }\\n\\n        for(int i = 0; i < arr.length; i++)\\n        {\\n            if(map.get(arr[i]) == 1)k--;\\n            if(k == 0)\\n            {\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        Map<String,Integer> map = new HashMap<>();\\n        for(String s : arr)\\n        {\\n            map.put(s, map.getOrDefault(s, 0)+1);\\n        }\\n\\n        for(int i = 0; i < arr.length; i++)\\n        {\\n            if(map.get(arr[i]) == 1)k--;\\n            if(k == 0)\\n            {\\n                return arr[i];\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3997062,
                "title": "java-solution-using-map-and-list",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n         String s1=\"\";\\n\\n     Map<String,Integer> map=new HashMap<>();\\n     List<String> list=new ArrayList<>();\\n\\n     for(int i=0;i<arr.length;i++){\\n       map.put(arr[i],map.getOrDefault(arr[i],0)+1);\\n\\n     }\\n     for(int i=0;i<arr.length;i++){\\n       if(map.get(arr[i])==1)list.add(arr[i]);\\n\\n     }\\n     \\n     \\n\\n\\n    return (k <= list.size())?list.get(k-1): s1;\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n         String s1=\"\";\\n\\n     Map<String,Integer> map=new HashMap<>();\\n     List<String> list=new ArrayList<>();\\n\\n     for(int i=0;i<arr.length;i++){\\n       map.put(arr[i],map.getOrDefault(arr[i],0)+1);\\n\\n     }\\n     for(int i=0;i<arr.length;i++){\\n       if(map.get(arr[i])==1)list.add(arr[i]);\\n\\n     }\\n     \\n     \\n\\n\\n    return (k <= list.size())?list.get(k-1): s1;\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981614,
                "title": "python-easy-counter",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def kthDistinct(self, arr, k):\\n        \"\"\"\\n        :type arr: List[str]\\n        :type k: int\\n        :rtype: str\\n        \"\"\"\\n\\n        #lets just use a counter\\n        counter = Counter(arr)\\n        distinct_nums = []\\n        for num in arr:\\n            if counter[num] == 1:\\n                distinct_nums.append(num)\\n        \\n        if len(distinct_nums) < k:\\n            return \"\"\\n        return distinct_nums[k - 1]\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def kthDistinct(self, arr, k):\\n        \"\"\"\\n        :type arr: List[str]\\n        :type k: int\\n        :rtype: str\\n        \"\"\"\\n\\n        #lets just use a counter\\n        counter = Counter(arr)\\n        distinct_nums = []\\n        for num in arr:\\n            if counter[num] == 1:\\n                distinct_nums.append(num)\\n        \\n        if len(distinct_nums) < k:\\n            return \"\"\\n        return distinct_nums[k - 1]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3981562,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashSet<String> h = new HashSet<>();\\n        List<String>l=new ArrayList();\\n        for(int i=0;i<arr.length;i++){\\n            if(h.contains(arr[i])){\\n                l.remove(arr[i]);\\n            }\\n            else{\\n                h.add(arr[i]);\\n                l.add(arr[i]);\\n            }\\n        }\\n        if(l.size()<k-1 || l.size()==0){\\n            return \"\";\\n        }\\n        return l.get(k-1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashSet<String> h = new HashSet<>();\\n        List<String>l=new ArrayList();\\n        for(int i=0;i<arr.length;i++){\\n            if(h.contains(arr[i])){\\n                l.remove(arr[i]);\\n            }\\n            else{\\n                h.add(arr[i]);\\n                l.add(arr[i]);\\n            }\\n        }\\n        if(l.size()<k-1 || l.size()==0){\\n            return \"\";\\n        }\\n        return l.get(k-1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974822,
                "title": "simple-solution-with-comments",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        map<string,int>m;\\n        // mapping for every string in the arry\\n        for(int i  = 0; i<arr.size(); i++){\\n           m[arr[i]]++;\\n        }\\n        vector<string>singleEle;\\n        for(int i = 0; i<arr.size(); i++){\\n            // if num of occur 1 ho then array ke andar push kardo elemets\\n            if(m[arr[i]]==1){\\n                singleEle.push_back(arr[i]);\\n            }\\n        }\\n        // if the size of the singleEle array is less than k return NULL str\\n        if(k>singleEle.size())return \"\";\\n        // else return k-1 th val\\n        return singleEle[k-1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        map<string,int>m;\\n        // mapping for every string in the arry\\n        for(int i  = 0; i<arr.size(); i++){\\n           m[arr[i]]++;\\n        }\\n        vector<string>singleEle;\\n        for(int i = 0; i<arr.size(); i++){\\n            // if num of occur 1 ho then array ke andar push kardo elemets\\n            if(m[arr[i]]==1){\\n                singleEle.push_back(arr[i]);\\n            }\\n        }\\n        // if the size of the singleEle array is less than k return NULL str\\n        if(k>singleEle.size())return \"\";\\n        // else return k-1 th val\\n        return singleEle[k-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3964811,
                "title": "easy-c-solution-with-dictionary",
                "content": "# Code\\n```\\npublic class Solution {\\n    public string KthDistinct(string[] arr, int k) {\\n        Dictionary<string, int> map = new();\\n            foreach (string c in arr)\\n            {\\n                if(!map.TryAdd(c,1))\\n                    map[c]++;\\n            }\\n            int count = 0;\\n            foreach(string c in map.Keys)\\n            {\\n                if (map[c] == 1)\\n                    count++;\\n                if(count==k)\\n                    return c;\\n            }\\n            return string.Empty;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public string KthDistinct(string[] arr, int k) {\\n        Dictionary<string, int> map = new();\\n            foreach (string c in arr)\\n            {\\n                if(!map.TryAdd(c,1))\\n                    map[c]++;\\n            }\\n            int count = 0;\\n            foreach(string c in map.Keys)\\n            {\\n                if (map[c] == 1)\\n                    count++;\\n                if(count==k)\\n                    return c;\\n            }\\n            return string.Empty;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3960026,
                "title": "java-beats-98-52-linkedhashset-explanation",
                "content": "# Approach\\n1. Iterate over each string in the array.\\n2. If the string is already in the seen set, it\\'s a repeat, so we remove it from seen and add it to a removed set. This removed set ensures that strings appearing more than twice don\\'t get added.\\n3. If the string isn\\'t in the removed set (indicating it hasn\\'t been seen more than once), add it to seen.\\n4. Finally, iterate over the seen set and return the kth distinct string. If there aren\\'t enough distinct strings, return an empty string.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$ \\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        LinkedHashSet<String> seen = new LinkedHashSet<>();\\n        HashSet<String> removed = new HashSet<>();\\n        \\n        for (String s : arr) {\\n            if (seen.contains(s)) {\\n                seen.remove(s);\\n                removed.add(s);\\n            } else if (!removed.contains(s)) {\\n                seen.add(s);\\n            }\\n        }\\n\\n        int count = 1;\\n        for (String s : seen) {\\n            if (count == k) {\\n                return s;\\n            }\\n            count++;\\n        }\\n        return \"\";\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        LinkedHashSet<String> seen = new LinkedHashSet<>();\\n        HashSet<String> removed = new HashSet<>();\\n        \\n        for (String s : arr) {\\n            if (seen.contains(s)) {\\n                seen.remove(s);\\n                removed.add(s);\\n            } else if (!removed.contains(s)) {\\n                seen.add(s);\\n            }\\n        }\\n\\n        int count = 1;\\n        for (String s : seen) {\\n            if (count == k) {\\n                return s;\\n            }\\n            count++;\\n        }\\n        return \"\";\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3949763,
                "title": "c-map-beats-100",
                "content": "class Solution { \\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mpp;\\n        for(auto &s : arr){\\n            mpp[s]++;\\n        }\\n        int cnt=0;\\n        for (auto &s : arr){\\n            if(mpp[s]==1){\\n                cnt++;\\n                if(cnt==k){\\n                    return s;\\n                }\\n            }\\n        }\\n        return \"\";\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution { \\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mpp;\\n        for(auto &s : arr){\\n            mpp[s]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3945811,
                "title": "ruby-without-hash",
                "content": "```\\ndef kth_distinct(arr, k)\\n  a = arr.select{|a| arr.count(a) == 1}[k-1]\\n  a ? a : \"\"\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\ndef kth_distinct(arr, k)\\n  a = arr.select{|a| arr.count(a) == 1}[k-1]\\n  a ? a : \"\"\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3941386,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  String kthDistinct(List<String> arr, int k) {\\n      Map<String, int> m = {};\\n      for (var i in arr) {\\n          if (!m.containsKey(i)) {\\n              m[i] = 1;\\n          } else {\\n              m[i] = m[i]! + 1;\\n          }\\n      }\\n\\n      final distinct = Map.fromEntries(m.entries.where((e) => e.value == 1).toList());\\n      return  distinct.entries.length < k ? \"\" : distinct.entries.toList()[k - 1].key;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  String kthDistinct(List<String> arr, int k) {\\n      Map<String, int> m = {};\\n      for (var i in arr) {\\n          if (!m.containsKey(i)) {\\n              m[i] = 1;\\n          } else {\\n              m[i] = m[i]! + 1;\\n          }\\n      }\\n\\n      final distinct = Map.fromEntries(m.entries.where((e) => e.value == 1).toList());\\n      return  distinct.entries.length < k ? \"\" : distinct.entries.toList()[k - 1].key;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939536,
                "title": "best-sollution-in-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n     ArrayList<String>list = new ArrayList<>();\\n     StringBuffer sb = new StringBuffer();\\n     int j = 0;\\n     for(int i=0;i<arr.length;i++){\\n         int count = 0;\\n         for(j=0;j<arr.length;j++){\\n             if(arr[i].equals(arr[j])){\\n                 count++;\\n             }\\n         }\\n         if(count == 1){\\n             list.add(arr[i]);\\n         }\\n     }   \\n     System.out.println(sb.length());\\n     System.out.println(arr.length);\\n     String s1 = \"\";\\n    //  if(sb.length()==arr.length){\\n    //      s1 = s1 + arr[0];\\n    //      return s1;\\n    //  }\\n       if(list.size()>=k){\\n        s1 = s1 + list.get(k-1);\\n        return s1;\\n     }\\n     else{\\n         return s1;\\n     }\\n     \\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n     ArrayList<String>list = new ArrayList<>();\\n     StringBuffer sb = new StringBuffer();\\n     int j = 0;\\n     for(int i=0;i<arr.length;i++){\\n         int count = 0;\\n         for(j=0;j<arr.length;j++){\\n             if(arr[i].equals(arr[j])){\\n                 count++;\\n             }\\n         }\\n         if(count == 1){\\n             list.add(arr[i]);\\n         }\\n     }   \\n     System.out.println(sb.length());\\n     System.out.println(arr.length);\\n     String s1 = \"\";\\n    //  if(sb.length()==arr.length){\\n    //      s1 = s1 + arr[0];\\n    //      return s1;\\n    //  }\\n       if(list.size()>=k){\\n        s1 = s1 + list.get(k-1);\\n        return s1;\\n     }\\n     else{\\n         return s1;\\n     }\\n     \\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3936346,
                "title": "k-th-distinct-string-js-use-object",
                "content": "```\\n/**\\n * @param {string[]} arr\\n * @param {number} k\\n * @return {string}\\n */\\nvar kthDistinct = function(arr, k) {\\n    set = {}\\n\\n    for (ar of arr) {\\n        set[ar] = set[ar] >= 1 ? set[ar] + 1 : 1\\n    }\\n\\n    for (s in set) {\\n        if (set[s] == 1) {\\n            if (--k == 0) return s \\n        }\\n    }\\n\\n    return \"\"\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} arr\\n * @param {number} k\\n * @return {string}\\n */\\nvar kthDistinct = function(arr, k) {\\n    set = {}\\n\\n    for (ar of arr) {\\n        set[ar] = set[ar] >= 1 ? set[ar] + 1 : 1\\n    }\\n\\n    for (s in set) {\\n        if (set[s] == 1) {\\n            if (--k == 0) return s \\n        }\\n    }\\n\\n    return \"\"\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3935600,
                "title": "using-vector-pair-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        \\n        vector<pair<string, int>> v;\\n        for(int i=0; i<arr.size(); i++) {\\n\\n            bool found = false;\\n\\n            for(auto &item: v) {\\n                if(item.first == arr[i]) {\\n                    item.second++;\\n                    found = true;\\n                    break;\\n                }\\n            }\\n\\n            if(found == false) {\\n                v.push_back(make_pair(arr[i], 1));\\n            }\\n        }\\n\\n        int count=0;\\n\\n        for(auto &i: v) {\\n\\n            if(i.second == 1) {\\n                count++;\\n                if(count == k) {\\n                    return i.first;\\n                }\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        \\n        vector<pair<string, int>> v;\\n        for(int i=0; i<arr.size(); i++) {\\n\\n            bool found = false;\\n\\n            for(auto &item: v) {\\n                if(item.first == arr[i]) {\\n                    item.second++;\\n                    found = true;\\n                    break;\\n                }\\n            }\\n\\n            if(found == false) {\\n                v.push_back(make_pair(arr[i], 1));\\n            }\\n        }\\n\\n        int count=0;\\n\\n        for(auto &i: v) {\\n\\n            if(i.second == 1) {\\n                count++;\\n                if(count == k) {\\n                    return i.first;\\n                }\\n            }\\n        }\\n\\n        return \"\";\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3929795,
                "title": "faster-than-99-c",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n  string kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int> count;\\n    for (string& i : arr)\\n      ++count[i];\\n    for ( string& i : arr)\\n      if (count[i]==1 && --k==0)\\n        return i;\\n    return \"\";\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  string kthDistinct(vector<string>& arr, int k) {\\n    unordered_map<string, int> count;\\n    for (string& i : arr)\\n      ++count[i];\\n    for ( string& i : arr)\\n      if (count[i]==1 && --k==0)\\n        return i;\\n    return \"\";\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3921796,
                "title": "java-set-ordered-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n              if(arr == null || arr.length == 0 || k <= 0) {\\n         return \"\";\\n      }\\n\\n      HashSet<String> dSet = new HashSet<>();\\n      LinkedHashSet<String> oSet = new LinkedHashSet<>();\\n      for(String s : arr) {\\n         if(!dSet.contains(s)) {\\n            dSet.add(s);\\n            oSet.add(s);\\n         } else {\\n            oSet.remove(s);\\n         }\\n      }\\n\\n      if(oSet.size() < k) {\\n         return \"\";\\n      }\\n      int count = 1;\\n      for(String s : oSet) {\\n         if(count == k) {\\n            return s;\\n         }\\n         count++;\\n      }\\n\\n      return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n              if(arr == null || arr.length == 0 || k <= 0) {\\n         return \"\";\\n      }\\n\\n      HashSet<String> dSet = new HashSet<>();\\n      LinkedHashSet<String> oSet = new LinkedHashSet<>();\\n      for(String s : arr) {\\n         if(!dSet.contains(s)) {\\n            dSet.add(s);\\n            oSet.add(s);\\n         } else {\\n            oSet.remove(s);\\n         }\\n      }\\n\\n      if(oSet.size() < k) {\\n         return \"\";\\n      }\\n      int count = 1;\\n      for(String s : oSet) {\\n         if(count == k) {\\n            return s;\\n         }\\n         count++;\\n      }\\n\\n      return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3918911,
                "title": "c-dictionary-solution-o-n",
                "content": "# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public string KthDistinct(string[] arr, int k) {\\n        \\n        var dict = new Dictionary<string, int>();\\n        \\n\\n        foreach(var str in arr) {\\n            if(dict.ContainsKey(str)) {\\n                dict[str]++;\\n            } else {\\n                dict[str] = 1;\\n            }\\n        }\\n\\n        int count = 0;\\n        foreach(var pair in dict)\\n        {\\n            if(pair.Value == 1)\\n                count++;\\n\\n            if(count == k)\\n                return pair.Key;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C#",
                    "Hash Table",
                    "Counting"
                ],
                "code": "```\\npublic class Solution {\\n    public string KthDistinct(string[] arr, int k) {\\n        \\n        var dict = new Dictionary<string, int>();\\n        \\n\\n        foreach(var str in arr) {\\n            if(dict.ContainsKey(str)) {\\n                dict[str]++;\\n            } else {\\n                dict[str] = 1;\\n            }\\n        }\\n\\n        int count = 0;\\n        foreach(var pair in dict)\\n        {\\n            if(pair.Value == 1)\\n                count++;\\n\\n            if(count == k)\\n                return pair.Key;\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3918168,
                "title": "java-solution-using-hashmap",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String,Integer> map=new HashMap<>();\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            map.put(arr[i],map.getOrDefault(arr[i],0)+1);\\n        }\\n\\n        int w=0;\\n        for(int j=0;j<arr.length;j++)\\n        {\\n            String str=arr[j];\\n            if(map.get(str)==1)\\n            {\\n                w++;\\n                if(w==k)\\n                {\\n                    return str;\\n                }\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public String kthDistinct(String[] arr, int k) {\\n        HashMap<String,Integer> map=new HashMap<>();\\n        for(int i=0;i<arr.length;i++)\\n        {\\n            map.put(arr[i],map.getOrDefault(arr[i],0)+1);\\n        }\\n\\n        int w=0;\\n        for(int j=0;j<arr.length;j++)\\n        {\\n            String str=arr[j];\\n            if(map.get(str)==1)\\n            {\\n                w++;\\n                if(w==k)\\n                {\\n                    return str;\\n                }\\n            }\\n        }\\n        return \"\";\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1994752,
                "content": [
                    {
                        "username": "Farhan_313",
                        "content": "tip :1. store counts in hashmap\\n      initialise count=0;\\n       2. iterate the array  , if its mapped value is 1 then (count++)\\n       3. if count==k return string\\n      "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Thanks!"
                    },
                    {
                        "username": "SumitVerma9005",
                        "content": "1. store the frequency of each string .\\n2. iterate through the given arr vector and  print the kth  string which  count is =1 ."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        l = []\\n        for i in arr:\\n            if arr.count(i) == 1:\\n                l.append(i)\\n        if len(l) >= k:\\n            return l[k - 1]\\n        return \"\""
                    },
                    {
                        "username": "Rhythm_1383",
                        "content": "can someone tell why its failing for [\"b\",\"a\",\"c\",\"a\"]\\n\\n        unordered_map<string,int> mp;\\n        for(auto i:arr)\\n        {\\n            mp[i]++;\\n        }\\n        string s=\"\";\\n        int count=0;\\n        for(auto i:arr)\\n        {\\n            if(mp[i]==1)\\n            {\\n                count++;\\n            }\\n            if(count==k)\\n            {\\n                s=i;\\n            }\\n        }\\n        return s;\\n"
                    },
                    {
                        "username": "Harsh0786",
                        "content": "the problem is even after kth value is matched to count you\\'re just keep running the program which is causing the problem use \\nif(mp[i]==1){\\n                count++;  \\n                if(k==count) return i; \\n            }\\n}\\nreturn \"\";"
                    },
                    {
                        "username": "shubham_kewat",
                        "content": "does anyone know? on uncommenting the line it gives wrong output for the test case [\"aaa\",\"aa\",\"a\"]\\n\\npublic String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String,Integer> map = new LinkedHashMap<>();\\n        String ans=\"\";\\n        for(String s : arr){\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n\\n        for(Map.Entry<String,Integer> entry : map.entrySet()){\\n            if(k>0&&entry.getValue()==1){\\n                k--;\\n            }\\n            if(k==0){\\n                ans = entry.getKey();\\n               //return ans;// HERE ON UNCOMMENTING IT GIVING THE WRONG OUTPUT\\n            }\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "It works correct for me, if uncommented. "
                    },
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<arr.size();i++){\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(mp[arr[i]]==1){\\n                k--;\\n            }\\n            if(k==0){\\n                return arr[i];\\n            }\\n\\n        }\\n        return \"\";\\n    }\\n};"
                    },
                    {
                        "username": "topswe",
                        "content": "Use frequency counter to filter the array."
                    }
                ]
            },
            {
                "id": 1967786,
                "content": [
                    {
                        "username": "Farhan_313",
                        "content": "tip :1. store counts in hashmap\\n      initialise count=0;\\n       2. iterate the array  , if its mapped value is 1 then (count++)\\n       3. if count==k return string\\n      "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Thanks!"
                    },
                    {
                        "username": "SumitVerma9005",
                        "content": "1. store the frequency of each string .\\n2. iterate through the given arr vector and  print the kth  string which  count is =1 ."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        l = []\\n        for i in arr:\\n            if arr.count(i) == 1:\\n                l.append(i)\\n        if len(l) >= k:\\n            return l[k - 1]\\n        return \"\""
                    },
                    {
                        "username": "Rhythm_1383",
                        "content": "can someone tell why its failing for [\"b\",\"a\",\"c\",\"a\"]\\n\\n        unordered_map<string,int> mp;\\n        for(auto i:arr)\\n        {\\n            mp[i]++;\\n        }\\n        string s=\"\";\\n        int count=0;\\n        for(auto i:arr)\\n        {\\n            if(mp[i]==1)\\n            {\\n                count++;\\n            }\\n            if(count==k)\\n            {\\n                s=i;\\n            }\\n        }\\n        return s;\\n"
                    },
                    {
                        "username": "Harsh0786",
                        "content": "the problem is even after kth value is matched to count you\\'re just keep running the program which is causing the problem use \\nif(mp[i]==1){\\n                count++;  \\n                if(k==count) return i; \\n            }\\n}\\nreturn \"\";"
                    },
                    {
                        "username": "shubham_kewat",
                        "content": "does anyone know? on uncommenting the line it gives wrong output for the test case [\"aaa\",\"aa\",\"a\"]\\n\\npublic String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String,Integer> map = new LinkedHashMap<>();\\n        String ans=\"\";\\n        for(String s : arr){\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n\\n        for(Map.Entry<String,Integer> entry : map.entrySet()){\\n            if(k>0&&entry.getValue()==1){\\n                k--;\\n            }\\n            if(k==0){\\n                ans = entry.getKey();\\n               //return ans;// HERE ON UNCOMMENTING IT GIVING THE WRONG OUTPUT\\n            }\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "It works correct for me, if uncommented. "
                    },
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<arr.size();i++){\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(mp[arr[i]]==1){\\n                k--;\\n            }\\n            if(k==0){\\n                return arr[i];\\n            }\\n\\n        }\\n        return \"\";\\n    }\\n};"
                    },
                    {
                        "username": "topswe",
                        "content": "Use frequency counter to filter the array."
                    }
                ]
            },
            {
                "id": 1777675,
                "content": [
                    {
                        "username": "Farhan_313",
                        "content": "tip :1. store counts in hashmap\\n      initialise count=0;\\n       2. iterate the array  , if its mapped value is 1 then (count++)\\n       3. if count==k return string\\n      "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Thanks!"
                    },
                    {
                        "username": "SumitVerma9005",
                        "content": "1. store the frequency of each string .\\n2. iterate through the given arr vector and  print the kth  string which  count is =1 ."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        l = []\\n        for i in arr:\\n            if arr.count(i) == 1:\\n                l.append(i)\\n        if len(l) >= k:\\n            return l[k - 1]\\n        return \"\""
                    },
                    {
                        "username": "Rhythm_1383",
                        "content": "can someone tell why its failing for [\"b\",\"a\",\"c\",\"a\"]\\n\\n        unordered_map<string,int> mp;\\n        for(auto i:arr)\\n        {\\n            mp[i]++;\\n        }\\n        string s=\"\";\\n        int count=0;\\n        for(auto i:arr)\\n        {\\n            if(mp[i]==1)\\n            {\\n                count++;\\n            }\\n            if(count==k)\\n            {\\n                s=i;\\n            }\\n        }\\n        return s;\\n"
                    },
                    {
                        "username": "Harsh0786",
                        "content": "the problem is even after kth value is matched to count you\\'re just keep running the program which is causing the problem use \\nif(mp[i]==1){\\n                count++;  \\n                if(k==count) return i; \\n            }\\n}\\nreturn \"\";"
                    },
                    {
                        "username": "shubham_kewat",
                        "content": "does anyone know? on uncommenting the line it gives wrong output for the test case [\"aaa\",\"aa\",\"a\"]\\n\\npublic String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String,Integer> map = new LinkedHashMap<>();\\n        String ans=\"\";\\n        for(String s : arr){\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n\\n        for(Map.Entry<String,Integer> entry : map.entrySet()){\\n            if(k>0&&entry.getValue()==1){\\n                k--;\\n            }\\n            if(k==0){\\n                ans = entry.getKey();\\n               //return ans;// HERE ON UNCOMMENTING IT GIVING THE WRONG OUTPUT\\n            }\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "It works correct for me, if uncommented. "
                    },
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<arr.size();i++){\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(mp[arr[i]]==1){\\n                k--;\\n            }\\n            if(k==0){\\n                return arr[i];\\n            }\\n\\n        }\\n        return \"\";\\n    }\\n};"
                    },
                    {
                        "username": "topswe",
                        "content": "Use frequency counter to filter the array."
                    }
                ]
            },
            {
                "id": 1919902,
                "content": [
                    {
                        "username": "Farhan_313",
                        "content": "tip :1. store counts in hashmap\\n      initialise count=0;\\n       2. iterate the array  , if its mapped value is 1 then (count++)\\n       3. if count==k return string\\n      "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Thanks!"
                    },
                    {
                        "username": "SumitVerma9005",
                        "content": "1. store the frequency of each string .\\n2. iterate through the given arr vector and  print the kth  string which  count is =1 ."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        l = []\\n        for i in arr:\\n            if arr.count(i) == 1:\\n                l.append(i)\\n        if len(l) >= k:\\n            return l[k - 1]\\n        return \"\""
                    },
                    {
                        "username": "Rhythm_1383",
                        "content": "can someone tell why its failing for [\"b\",\"a\",\"c\",\"a\"]\\n\\n        unordered_map<string,int> mp;\\n        for(auto i:arr)\\n        {\\n            mp[i]++;\\n        }\\n        string s=\"\";\\n        int count=0;\\n        for(auto i:arr)\\n        {\\n            if(mp[i]==1)\\n            {\\n                count++;\\n            }\\n            if(count==k)\\n            {\\n                s=i;\\n            }\\n        }\\n        return s;\\n"
                    },
                    {
                        "username": "Harsh0786",
                        "content": "the problem is even after kth value is matched to count you\\'re just keep running the program which is causing the problem use \\nif(mp[i]==1){\\n                count++;  \\n                if(k==count) return i; \\n            }\\n}\\nreturn \"\";"
                    },
                    {
                        "username": "shubham_kewat",
                        "content": "does anyone know? on uncommenting the line it gives wrong output for the test case [\"aaa\",\"aa\",\"a\"]\\n\\npublic String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String,Integer> map = new LinkedHashMap<>();\\n        String ans=\"\";\\n        for(String s : arr){\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n\\n        for(Map.Entry<String,Integer> entry : map.entrySet()){\\n            if(k>0&&entry.getValue()==1){\\n                k--;\\n            }\\n            if(k==0){\\n                ans = entry.getKey();\\n               //return ans;// HERE ON UNCOMMENTING IT GIVING THE WRONG OUTPUT\\n            }\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "It works correct for me, if uncommented. "
                    },
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<arr.size();i++){\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(mp[arr[i]]==1){\\n                k--;\\n            }\\n            if(k==0){\\n                return arr[i];\\n            }\\n\\n        }\\n        return \"\";\\n    }\\n};"
                    },
                    {
                        "username": "topswe",
                        "content": "Use frequency counter to filter the array."
                    }
                ]
            },
            {
                "id": 1780451,
                "content": [
                    {
                        "username": "Farhan_313",
                        "content": "tip :1. store counts in hashmap\\n      initialise count=0;\\n       2. iterate the array  , if its mapped value is 1 then (count++)\\n       3. if count==k return string\\n      "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Thanks!"
                    },
                    {
                        "username": "SumitVerma9005",
                        "content": "1. store the frequency of each string .\\n2. iterate through the given arr vector and  print the kth  string which  count is =1 ."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        l = []\\n        for i in arr:\\n            if arr.count(i) == 1:\\n                l.append(i)\\n        if len(l) >= k:\\n            return l[k - 1]\\n        return \"\""
                    },
                    {
                        "username": "Rhythm_1383",
                        "content": "can someone tell why its failing for [\"b\",\"a\",\"c\",\"a\"]\\n\\n        unordered_map<string,int> mp;\\n        for(auto i:arr)\\n        {\\n            mp[i]++;\\n        }\\n        string s=\"\";\\n        int count=0;\\n        for(auto i:arr)\\n        {\\n            if(mp[i]==1)\\n            {\\n                count++;\\n            }\\n            if(count==k)\\n            {\\n                s=i;\\n            }\\n        }\\n        return s;\\n"
                    },
                    {
                        "username": "Harsh0786",
                        "content": "the problem is even after kth value is matched to count you\\'re just keep running the program which is causing the problem use \\nif(mp[i]==1){\\n                count++;  \\n                if(k==count) return i; \\n            }\\n}\\nreturn \"\";"
                    },
                    {
                        "username": "shubham_kewat",
                        "content": "does anyone know? on uncommenting the line it gives wrong output for the test case [\"aaa\",\"aa\",\"a\"]\\n\\npublic String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String,Integer> map = new LinkedHashMap<>();\\n        String ans=\"\";\\n        for(String s : arr){\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n\\n        for(Map.Entry<String,Integer> entry : map.entrySet()){\\n            if(k>0&&entry.getValue()==1){\\n                k--;\\n            }\\n            if(k==0){\\n                ans = entry.getKey();\\n               //return ans;// HERE ON UNCOMMENTING IT GIVING THE WRONG OUTPUT\\n            }\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "It works correct for me, if uncommented. "
                    },
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<arr.size();i++){\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(mp[arr[i]]==1){\\n                k--;\\n            }\\n            if(k==0){\\n                return arr[i];\\n            }\\n\\n        }\\n        return \"\";\\n    }\\n};"
                    },
                    {
                        "username": "topswe",
                        "content": "Use frequency counter to filter the array."
                    }
                ]
            },
            {
                "id": 1732969,
                "content": [
                    {
                        "username": "Farhan_313",
                        "content": "tip :1. store counts in hashmap\\n      initialise count=0;\\n       2. iterate the array  , if its mapped value is 1 then (count++)\\n       3. if count==k return string\\n      "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Thanks!"
                    },
                    {
                        "username": "SumitVerma9005",
                        "content": "1. store the frequency of each string .\\n2. iterate through the given arr vector and  print the kth  string which  count is =1 ."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        l = []\\n        for i in arr:\\n            if arr.count(i) == 1:\\n                l.append(i)\\n        if len(l) >= k:\\n            return l[k - 1]\\n        return \"\""
                    },
                    {
                        "username": "Rhythm_1383",
                        "content": "can someone tell why its failing for [\"b\",\"a\",\"c\",\"a\"]\\n\\n        unordered_map<string,int> mp;\\n        for(auto i:arr)\\n        {\\n            mp[i]++;\\n        }\\n        string s=\"\";\\n        int count=0;\\n        for(auto i:arr)\\n        {\\n            if(mp[i]==1)\\n            {\\n                count++;\\n            }\\n            if(count==k)\\n            {\\n                s=i;\\n            }\\n        }\\n        return s;\\n"
                    },
                    {
                        "username": "Harsh0786",
                        "content": "the problem is even after kth value is matched to count you\\'re just keep running the program which is causing the problem use \\nif(mp[i]==1){\\n                count++;  \\n                if(k==count) return i; \\n            }\\n}\\nreturn \"\";"
                    },
                    {
                        "username": "shubham_kewat",
                        "content": "does anyone know? on uncommenting the line it gives wrong output for the test case [\"aaa\",\"aa\",\"a\"]\\n\\npublic String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String,Integer> map = new LinkedHashMap<>();\\n        String ans=\"\";\\n        for(String s : arr){\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n\\n        for(Map.Entry<String,Integer> entry : map.entrySet()){\\n            if(k>0&&entry.getValue()==1){\\n                k--;\\n            }\\n            if(k==0){\\n                ans = entry.getKey();\\n               //return ans;// HERE ON UNCOMMENTING IT GIVING THE WRONG OUTPUT\\n            }\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "It works correct for me, if uncommented. "
                    },
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<arr.size();i++){\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(mp[arr[i]]==1){\\n                k--;\\n            }\\n            if(k==0){\\n                return arr[i];\\n            }\\n\\n        }\\n        return \"\";\\n    }\\n};"
                    },
                    {
                        "username": "topswe",
                        "content": "Use frequency counter to filter the array."
                    }
                ]
            },
            {
                "id": 1693380,
                "content": [
                    {
                        "username": "Farhan_313",
                        "content": "tip :1. store counts in hashmap\\n      initialise count=0;\\n       2. iterate the array  , if its mapped value is 1 then (count++)\\n       3. if count==k return string\\n      "
                    },
                    {
                        "username": "DamianIvanochko",
                        "content": "Thanks!"
                    },
                    {
                        "username": "SumitVerma9005",
                        "content": "1. store the frequency of each string .\\n2. iterate through the given arr vector and  print the kth  string which  count is =1 ."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def kthDistinct(self, arr: List[str], k: int) -> str:\\n        l = []\\n        for i in arr:\\n            if arr.count(i) == 1:\\n                l.append(i)\\n        if len(l) >= k:\\n            return l[k - 1]\\n        return \"\""
                    },
                    {
                        "username": "Rhythm_1383",
                        "content": "can someone tell why its failing for [\"b\",\"a\",\"c\",\"a\"]\\n\\n        unordered_map<string,int> mp;\\n        for(auto i:arr)\\n        {\\n            mp[i]++;\\n        }\\n        string s=\"\";\\n        int count=0;\\n        for(auto i:arr)\\n        {\\n            if(mp[i]==1)\\n            {\\n                count++;\\n            }\\n            if(count==k)\\n            {\\n                s=i;\\n            }\\n        }\\n        return s;\\n"
                    },
                    {
                        "username": "Harsh0786",
                        "content": "the problem is even after kth value is matched to count you\\'re just keep running the program which is causing the problem use \\nif(mp[i]==1){\\n                count++;  \\n                if(k==count) return i; \\n            }\\n}\\nreturn \"\";"
                    },
                    {
                        "username": "shubham_kewat",
                        "content": "does anyone know? on uncommenting the line it gives wrong output for the test case [\"aaa\",\"aa\",\"a\"]\\n\\npublic String kthDistinct(String[] arr, int k) {\\n        LinkedHashMap<String,Integer> map = new LinkedHashMap<>();\\n        String ans=\"\";\\n        for(String s : arr){\\n            map.put(s,map.getOrDefault(s,0)+1);\\n        }\\n\\n        for(Map.Entry<String,Integer> entry : map.entrySet()){\\n            if(k>0&&entry.getValue()==1){\\n                k--;\\n            }\\n            if(k==0){\\n                ans = entry.getKey();\\n               //return ans;// HERE ON UNCOMMENTING IT GIVING THE WRONG OUTPUT\\n            }\\n        }\\n        return ans;\\n    }"
                    },
                    {
                        "username": "askold_ilvento",
                        "content": "It works correct for me, if uncommented. "
                    },
                    {
                        "username": "Nitish-Devarshi",
                        "content": "class Solution {\\npublic:\\n    string kthDistinct(vector<string>& arr, int k) {\\n        unordered_map<string,int>mp;\\n        for(int i=0;i<arr.size();i++){\\n            mp[arr[i]]++;\\n        }\\n        for(int i=0;i<arr.size();i++){\\n            if(mp[arr[i]]==1){\\n                k--;\\n            }\\n            if(k==0){\\n                return arr[i];\\n            }\\n\\n        }\\n        return \"\";\\n    }\\n};"
                    },
                    {
                        "username": "topswe",
                        "content": "Use frequency counter to filter the array."
                    }
                ]
            }
        ]
    }
]