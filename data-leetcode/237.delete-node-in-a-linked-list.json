[
    {
        "title": "Delete Node in a Linked List",
        "question_content": "There is a singly-linked list head and we want to delete a node node in it.\nYou are given the node to be deleted node. You will not be given access to the first node of head.\nAll the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.\nDelete the given node. Note that by deleting the node, we do not mean removing it from memory. We mean:\n\n\tThe value of the given node should not exist in the linked list.\n\tThe number of nodes in the linked list should decrease by one.\n\tAll the values before node should be in the same order.\n\tAll the values after node should be in the same order.\n\nCustom testing:\n\n\tFor the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.\n\tWe will build the linked list and pass the node to your function.\n\tThe output will be the entire list after calling your function.\n\n&nbsp;\nExample 1:\n\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n\nExample 2:\n\nInput: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n\n&nbsp;\nConstraints:\n\n\tThe number of the nodes in the given list is in the range [2, 1000].\n\t-1000 <= Node.val <= 1000\n\tThe value of each node in the list is unique.\n\tThe node to be deleted is in the list and is not a tail node.",
        "solutions": [
            {
                "id": 65455,
                "title": "1-3-lines-c-java-python-c-c-javascript-ruby",
                "content": "We can't really delete the node, but we can kinda achieve the same effect by instead removing the **next** node after copying its data into the node that we were asked to delete.\\n\\n**C++**\\n\\n    void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }\\n\\nBut better properly delete the next node:\\n\\n    void deleteNode(ListNode* node) {\\n        auto next = node->next;\\n        *node = *next;\\n        delete next;\\n    }\\n\\n**Java and C#**\\n\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n\\n**Python**\\n\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n\\n**C**\\n\\n    void deleteNode(struct ListNode* node) {\\n        *node = *node->next;\\n    }\\n\\nBut better properly free the next node's memory:\\n\\n    void deleteNode(struct ListNode* node) {\\n        struct ListNode* next = node->next;\\n        *node = *next;\\n        free(next);\\n    }\\n\\n**JavaScript**\\n\\n    var deleteNode = function(node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    };\\n\\n**Ruby**\\n\\n    def delete_node(node)\\n        node.val = node.next.val\\n        node.next = node.next.next\\n        nil\\n    end",
                "solutionTags": [],
                "code": "We can't really delete the node, but we can kinda achieve the same effect by instead removing the **next** node after copying its data into the node that we were asked to delete.\\n\\n**C++**\\n\\n    void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }\\n\\nBut better properly delete the next node:\\n\\n    void deleteNode(ListNode* node) {\\n        auto next = node->next;\\n        *node = *next;\\n        delete next;\\n    }\\n\\n**Java and C#**\\n\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n\\n**Python**\\n\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n\\n**C**\\n\\n    void deleteNode(struct ListNode* node) {\\n        *node = *node->next;\\n    }\\n\\nBut better properly free the next node's memory:\\n\\n    void deleteNode(struct ListNode* node) {\\n        struct ListNode* next = node->next;\\n        *node = *next;\\n        free(next);\\n    }\\n\\n**JavaScript**\\n\\n    var deleteNode = function(node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    };\\n\\n**Ruby**\\n\\n    def delete_node(node)\\n        node.val = node.next.val\\n        node.next = node.next.next\\n        nil\\n    end",
                "codeTag": "Python3"
            },
            {
                "id": 65464,
                "title": "easy-solution-in-java",
                "content": "    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n\\nSince we couldn't enter the preceding node, we can not delete the given node. We can just copy the next node to the given node and delete the next one.",
                "solutionTags": [],
                "code": "    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n\\nSince we couldn't enter the preceding node, we can not delete the given node. We can just copy the next node to the given node and delete the next one.",
                "codeTag": "Unknown"
            },
            {
                "id": 3364017,
                "title": "explained-2-lines-cpp-code",
                "content": "# **Please UPVOTE \\uD83D\\uDC4D**\\n\\n# Approach\\nCopy the next node to given node and then we can delete the next node easily.\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val; //copying the next node value\\n        node->next = node->next->next; // deleting the next node\\n    }\\n};\\n\\n```\\n\\n![e2515d84-99cf-4499-80fb-fe458e1bbae2_1678932606.8004954.png](https://assets.leetcode.com/users/images/d7f0064b-27ef-46ec-b16b-22e23fee257b_1680317707.1202745.png)\\n",
                "solutionTags": [
                    "C++",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val; //copying the next node value\\n        node->next = node->next->next; // deleting the next node\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 65461,
                "title": "this-question-is-wrong-you-cannot-delete-the-node",
                "content": "    post the answer first:\\n    class Solution {\\n    public:\\n        void deleteNode(ListNode* node) {\\n            node->val = node->next->val;\\n            node->next = node->next->next;\\n        }\\n    };\\n\\nHowever, this question is INCORRECT for sure, since you don't really \"delete\" a node, you are replacing the value. In fact, this is a terrible design leading to memory leaks almost for sure.\\n\\nI wonder what company gives such misleading question. It's better called \"modify\" a node, instead of \"deleting\". Deleting means free the memory, and the incorrect description will mislead any person with slight experience on C++.",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        void deleteNode(ListNode* node) {\\n            node->val = node->next->val;\\n            node->next = node->next->next;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1354873,
                "title": "c-easy-explanation-o-1-solution",
                "content": "Basically we are just copying node\\'s next value to itself\\nInput: 1->2->3->4->5 ->6\\ngiven node = 4\\noutput: 1->2->3->5->6\\n\\n**1.** in first step:  node->val becomes node\\'s next ki value i.e 4 becomes 5\\n1->2->3->5->5->6\\n**2.** in 2nd step: node points to node\\'s next next i.e 5->6\\n1->2->3->5->6\\n\\n\\n\\n\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 65547,
                "title": "my-c-solution-in-1-line",
                "content": "\\n\\n    class Solution {\\n    public:\\n        void deleteNode(ListNode* node) {\\n            *node = *(node->next);\\n        }\\n    };\\n\\nif the node should be freed, we need 3 lines: \\n\\n    class Solution {\\n    public:\\n        void deleteNode(ListNode* node) {\\n            ListNode* temp = node->next;\\n            *node = *temp;\\n            delete temp;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        void deleteNode(ListNode* node) {\\n            *node = *(node->next);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 65456,
                "title": "python-two-lines-solution-copy-value-and-then-delete-the-next-node",
                "content": "    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next",
                "solutionTags": [
                    "Python"
                ],
                "code": "    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next",
                "codeTag": "Python3"
            },
            {
                "id": 65482,
                "title": "easy-question-easy-solution-java",
                "content": "```\\npublic class Solution {\\n        public void deleteNode(ListNode node) {\\n            if(node != null && node.next != null) {\\n                node.val = node.next.val;\\n                node.next = node.next.next;\\n            }\\n        }\\n    }\\n\\t\\n```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Solution {\\n        public void deleteNode(ListNode node) {\\n            if(node != null && node.next != null) {\\n                node.val = node.next.val;\\n                node.next = node.next.next;\\n            }\\n        }\\n    }\\n\\t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 354949,
                "title": "python3-change-value-and-change-pointer",
                "content": "* We delete the node by \"replacing\" the node with node.next. \\n* node.val change to node.next.val\\n* node.next change to node.next.next\\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        \"\"\"\\n\\t   # goal : delete node 2.\\n\\t\\t\\n        1  ->  2 -> 3       -> 4\\n               ^    ^\\n               |    |\\n              node  node.next\\n         #step one:  change the node value to 3\\n         1  ->  3   3           4\\n               ^    ^           ^\\n               |    |           |\\n              node  node.next   node.next.next\\n              \\n          #step two: change the next pointer to point to node.next.next\\n         1  ->  3   ->          4\\n               ^    ^           ^\\n               |    |           |\\n              node  node.next   node.next.next\\n\\t\\t\\t  \\n\\t    1 ->3 ->4\\n        \"\"\"\\n        # Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\\n**Complexity Analysis**\\n* Time complexity: O(1)\\n\\tThe algorithm only needs two assignment operations.\\n*  Space complexity: O(1)\\n\\tThe algorithm doesn\\'t need extra memory.",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        \"\"\"\\n\\t   # goal : delete node 2.\\n\\t\\t\\n        1  ->  2 -> 3       -> 4\\n               ^    ^\\n               |    |\\n              node  node.next\\n         #step one:  change the node value to 3\\n         1  ->  3   3           4\\n               ^    ^           ^\\n               |    |           |\\n              node  node.next   node.next.next\\n              \\n          #step two: change the next pointer to point to node.next.next\\n         1  ->  3   ->          4\\n               ^    ^           ^\\n               |    |           |\\n              node  node.next   node.next.next\\n\\t\\t\\t  \\n\\t    1 ->3 ->4\\n        \"\"\"\\n        # Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696260,
                "title": "c-don-t-be-that-person-that-leaks-memory-clean-code",
                "content": "### Approach 1: copy next node\\n\\nBefore looking at different implementation let me briefly touch on the intiution. Usually for a linked list if we want to remove a ListNode we would update the previous node to point the the node after the one we want to remove. For this problem we don\\'t know the previous node, we are only given the address of the node we want to remove. The approach is to overwrite the node we want to remove with the content of the next node and then remove the next node. The problem description states that we can expect that the node we should remove is never the last node, otherwise the problem can\\'t be solved.\\n\\n#### Variant 1: C style code\\n\\nInstead of assigning ```node->val``` and ```node->next``` we can just assign the entire node.\\n\\n```cpp\\n    static void deleteNode(ListNode* node) {\\n        ListNode* next = node->next;\\n        *node = *next;\\n        // Don\\'t be that person that leaks memory.\\n        delete next;\\n    }\\n```\\n\\n**Complexity Analysis**\\n  * Time Complexity: left as an exercise to the reader.\\n  * Space Complexity: Is negative space complexity a thing, since we are freeing memory here? :D\\n\\n#### Variant 2: std::unique_ptr\\n\\nInstead of calling ```delete``` on the \"next\" node, we can also use ```std::unique_ptr``` which take owner ship of the node we want to delete. As soon as this ```std::unique_ptr``` goes out of scope it will delete the owned node. This approach has the benefit if we have a function with multiple ```returns``` the object will be destroyed, i.e. we can not forget to call ```delete``` on it.\\n\\n```cpp\\n    static void deleteNode(ListNode* node) {\\n        std::unique_ptr<ListNode> to_be_deleted(node->next);\\n        *node = *node->next;\\n    }\\n```\\n\\n#### Variant 3: std::exchange (just for fun, not recommended)\\n\\nWith ```std::exchange``` we can turn approach 1 into a oneliner. I don\\'t recommend actually doing this.\\n\\n```cpp\\n    static void deleteNode(ListNode* node) {\\n        delete std::exchange(*node, *node->next).next;\\n    }\\n```\\n\\n### Appendix: Looking at the generated assembly\\n\\nJust for fun I looked the generated assembly ([using clang x86-64 (trunk)](https://godbolt.org/z/WPz1cW98x))\\n\\nVariant 1:\\n\\n```asm\\ndeleteNode(ListNode*):               # @deleteNode(ListNode*)\\n        mov     rax, qword ptr [rdi + 8]\\n        vmovups xmm0, xmmword ptr [rax]\\n        vmovups xmmword ptr [rdi], xmm0\\n        mov     rdi, rax\\n        jmp     operator delete(void*)@PLT                      # TAILCALL\\n```\\n\\nVariant 2: Is exactly the same as Variant 1\\n\\n```asm\\ndeleteNode(ListNode*):               # @deleteNode(ListNode*)\\n        mov     rax, qword ptr [rdi + 8]\\n        vmovups xmm0, xmmword ptr [rax]\\n        vmovups xmmword ptr [rdi], xmm0\\n        mov     rdi, rax\\n        jmp     operator delete(void*)@PLT                      # TAILCALL\\n```\\n\\n... and it looks like clang can see through all of this, and Variant 3 generates the same code as well:\\n\\n```asm\\ndeleteNode(ListNode*):               # @deleteNode(ListNode*)\\n        mov     rax, qword ptr [rdi + 8]\\n        vmovups xmm0, xmmword ptr [rax]\\n        vmovups xmmword ptr [rdi], xmm0\\n        mov     rdi, rax\\n        jmp     operator delete(void*)@PLT                      # TAILCALL\\n```\\n\\n_As always: Feedback, questions, and comments are welcome. Leaving an upvote sparks  joy! :)_\\n\\n**p.s. Join us on the [LeetCode The Hard Way Discord Server](https://discord.gg/hFUyVyWy2E)!**\\n",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```node->val```\n```node->next```\n```cpp\\n    static void deleteNode(ListNode* node) {\\n        ListNode* next = node->next;\\n        *node = *next;\\n        // Don\\'t be that person that leaks memory.\\n        delete next;\\n    }\\n```\n```delete```\n```std::unique_ptr```\n```std::unique_ptr```\n```returns```\n```delete```\n```cpp\\n    static void deleteNode(ListNode* node) {\\n        std::unique_ptr<ListNode> to_be_deleted(node->next);\\n        *node = *node->next;\\n    }\\n```\n```std::exchange```\n```cpp\\n    static void deleteNode(ListNode* node) {\\n        delete std::exchange(*node, *node->next).next;\\n    }\\n```\n```asm\\ndeleteNode(ListNode*):               # @deleteNode(ListNode*)\\n        mov     rax, qword ptr [rdi + 8]\\n        vmovups xmm0, xmmword ptr [rax]\\n        vmovups xmmword ptr [rdi], xmm0\\n        mov     rdi, rax\\n        jmp     operator delete(void*)@PLT                      # TAILCALL\\n```\n```asm\\ndeleteNode(ListNode*):               # @deleteNode(ListNode*)\\n        mov     rax, qword ptr [rdi + 8]\\n        vmovups xmm0, xmmword ptr [rax]\\n        vmovups xmmword ptr [rdi], xmm0\\n        mov     rdi, rax\\n        jmp     operator delete(void*)@PLT                      # TAILCALL\\n```\n```asm\\ndeleteNode(ListNode*):               # @deleteNode(ListNode*)\\n        mov     rax, qword ptr [rdi + 8]\\n        vmovups xmm0, xmmword ptr [rax]\\n        vmovups xmmword ptr [rdi], xmm0\\n        mov     rdi, rax\\n        jmp     operator delete(void*)@PLT                      # TAILCALL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2696743,
                "title": "java-easy-solution-with-explanation-100-faster-code-2-line-solution",
                "content": "\\tPLEASE UPVOTE IF YOU LIKE.\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n     \\n        // Step 1: Set value of current node as value of next node\\n        node.val = node.next.val;\\n        \\n        // Step 2: Delete the next node from list\\n        node.next = node.next.next;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n     \\n        // Step 1: Set value of current node as value of next node\\n        node.val = node.next.val;\\n        \\n        // Step 2: Delete the next node from list\\n        node.next = node.next.next;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 665803,
                "title": "python-2-lines-easy-modify-values-in-your-list",
                "content": "If you never saw this problem it can seems quite difficult, how you can delete node, if you are given only access to that node? You need to find previous node first? No, the trick is a modification of values in our list! If you have this type of quesitions on real interview, it is the first question you must ask your interviewer. If we can modify data, solution becomes very easy, only two lines: change value of node with value of next node and then change next element for next of next element.\\n\\n**Complexity.** Both time and space comlexity is `O(1)`.\\n\\n```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 516040,
                "title": "javascript-easy",
                "content": "```\\nvar deleteNode = function(node) {\\n    // copy next node\\'s val into current node\\n    // delete next node\\n    \\n    node.val = node.next.val;\\n    node.next = node.next.next;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar deleteNode = function(node) {\\n    // copy next node\\'s val into current node\\n    // delete next node\\n    \\n    node.val = node.next.val;\\n    node.next = node.next.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 140910,
                "title": "python",
                "content": "\\u5176\\u5B9E\\u4E0D\\u80FD\\u771F\\u6B63\\u610F\\u4E49\\u4E0A\\u7684\\u5220\\u9664\\u6307\\u5B9A\\u7684Node\\uFF0C\\u56E0\\u4E3A\\u6CA1\\u6709\\u7ED9\\u4E0EPrevious Node\\u3002\\n\\u6240\\u4EE5\\u4ECE\\u6839\\u672C\\u610F\\u4E49\\u4E0A\\uFF0C\\u53EA\\u80FD\\u53D6\\u5DE7\\u7684\\u89E3\\u51B3\\u8FD9\\u4E2A\\u95EE\\u9898\\u3002\\u9898\\u76EE\\u523B\\u610F\\u7ED9\\u4E86\\u5F88\\u591A\\u9644\\u4EF6\\u7684\\u6761\\u4EF6\\uFF0C\\u6BD4\\u5982\\u94FE\\u8868value\\u6CA1\\u6709\\u91CD\\u590D\\uFF0C\\u5E76\\u4E14\\u6307\\u5B9ANode\\u4E0D\\u662FTail\\uFF0C\\u5176\\u5B9E\\u90FD\\u662F\\u5728\\u7ED9\\u6B63\\u89E3\\u505A\\u94FA\\u57AB\\uFF0C\\u4EE3\\u7801\\u5982\\u4E0B\\n\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\\n\\n\\u6211\\u4EEC\\u771F\\u6B63\\u5220\\u9664\\u7684\\u662F\\u6307\\u5B9ANode\\u7684\\u4E0B\\u4E00\\u4E2ANode\\uFF0C\\u7136\\u540E\\u628A\\u6307\\u5B9ANode\\u7684Value\\u66F4\\u6539\\u6210\\u4E0B\\u4E00\\u4E2ANode\\u7684\\u503C\\u7F62\\u4E86\\u3002\\n\\u4E3A\\u4EC0\\u4E48\\u8FD9\\u4E2Anode.next.next\\u5728\\u8FD9\\u91CC\\u662F\\u6CA1\\u95EE\\u9898\\u7684\\uFF0C\\u56E0\\u4E3A\\u9898\\u76EE\\u544A\\u8BC9\\u4E86\\u8BF4\\u6307\\u5B9A\\u7684Node\\u4E0D\\u4E3ATail\\uFF0C\\u6240\\u4EE5\\u6211\\u4EEC\\u4E0D\\u7528\\u62C5\\u5FC3\\u8FD9\\u4E2AEdge Case\\u3002",
                "solutionTags": [],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1433918,
                "title": "best-explanation-for-two-line-code-solution-java-100-faster",
                "content": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```\\nSo, this is our code.\\nWe don\\'t have the access to the previous node of the to be deleted node.\\nBut we have the access to the next node, which makes deletion of next node possible.\\nSo, we copy the value of the next node to this node and delete the next node (i.e connecting our current node to the next node\\'s next)\\n\\nHopefully you understood, Thank you \\uD83D\\uDE00",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696481,
                "title": "2-lines-easy-to-understand-o-1-time-complexity-and-space-complexity",
                "content": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val=node.next.val\\n        node.next=node.next.next\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val=node.next.val\\n        node.next=node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 65575,
                "title": "4ms-c-solution-with-explanation",
                "content": "/* Here's my simple 4ms solution\\nWe have been given a pointer to the node to be deleted. \\nWe know that while deleting a node from the linked list, we have to fix the links between the previous and the next node. The following are the steps to achieve this:\\n\\n 1. Find out the next node of the pointer to the node that we have.\\n 2. Copy the data from the next node to the node to be deleted.\\n 3. Fix the link and delete the next node\\n\\n*/\\n\\n    void deleteNode(struct ListNode* node) {\\n        struct ListNode* nextNode = node->next;\\n        node->val = nextNode->val;\\n        node->next = nextNode->next;\\n        free(nextNode);\\n    }",
                "solutionTags": [],
                "code": "/* Here's my simple 4ms solution\\nWe have been given a pointer to the node to be deleted. \\nWe know that while deleting a node from the linked list, we have to fix the links between the previous and the next node. The following are the steps to achieve this:\\n\\n 1. Find out the next node of the pointer to the node that we have.\\n 2. Copy the data from the next node to the node to be deleted.\\n 3. Fix the link and delete the next node\\n\\n*/\\n\\n    void deleteNode(struct ListNode* node) {\\n        struct ListNode* nextNode = node->next;\\n        node->val = nextNode->val;\\n        node->next = nextNode->next;\\n        free(nextNode);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2696943,
                "title": "c-o-1-short-simple-code",
                "content": "***DO UPVOTE IF IT HELPS !!!!***\\n\\t\\n\\tvoid deleteNode(ListNode* curr) {\\n        \\n        ListNode *temp = curr->next;      //store address of curr node\\'s next\\n        curr->val = temp->val;            //update curr->val with temp->val\\n        curr->next = temp->next;          //update connections \\n        delete temp;                      //delete temp\\n    }",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "***DO UPVOTE IF IT HELPS !!!!***\\n\\t\\n\\tvoid deleteNode(ListNode* curr) {\\n        \\n        ListNode *temp = curr->next;      //store address of curr node\\'s next\\n        curr->val = temp->val;            //update curr->val with temp->val\\n        curr->next = temp->next;          //update connections \\n        delete temp;                      //delete temp\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2696325,
                "title": "python-3-3-lines-w-diagram-t-m-99-48",
                "content": "![image](https://assets.leetcode.com/users/images/7562b928-f92f-4e7e-a362-2995c9d1d282_1665622039.5094635.jpeg)\\n```\\nclass Solution:\\n    def deleteNode(self, node:ListNode):\\n        node.val  = node.next.val\\n        node.next = node.next.next\\n        return\\n```\\n[https://leetcode.com/submissions/detail/586646496/](http://)\\n\\t\\t",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node:ListNode):\\n        node.val  = node.next.val\\n        node.next = node.next.next\\n        return\\n```",
                "codeTag": "Java"
            },
            {
                "id": 802169,
                "title": "python-2-liner-solution",
                "content": "One of the most important things in any Linked List solution is to have a pointer to the head. In the absence of that we need to ask ourselves what is the information that we have, which can help us iterate the part of the list that the question is asking for. \\n\\nHere, we are interested in removing the current node. We do not have a head pointer with which we can access the node prev to the curr node and jump to the next node. However , we can alway morph the list to get to the solution that we are looking for. To do that , we copy the data from the next node to the current node, effectively deleting the data from the current node and update the link to point to the node after next (effectvely removing the next node, data of which we already have copied into the current node). \\n\\n```\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "solutionTags": [
                    "Python",
                    "Linked List"
                ],
                "code": "```\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 65542,
                "title": "simple-java-solution-1ms",
                "content": "    public class Solution {\\n    public void deleteNode(ListNode node) {\\n       ListNode n1 = null;\\n\\t\\tn1 = node.next;\\n\\t\\tif (n1 != null) {\\n\\t\\t\\tnode.val = n1.val;\\n\\t\\t\\tnode.next = n1.next;\\n\\t\\t}\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public void deleteNode(ListNode node) {\\n       ListNode n1 = null;\\n\\t\\tn1 = node.next;\\n\\t\\tif (n1 != null) {\\n\\t\\t\\tnode.val = n1.val;\\n\\t\\t\\tnode.next = n1.next;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1450145,
                "title": "c-simple-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tvoid deleteNode(ListNode* node) {\\n\\t\\t\\tListNode* temp = node -> next;\\n\\t\\t\\tnode -> val = temp -> val;\\n\\t\\t\\tnode -> next = temp -> next;\\n\\t\\t\\tdelete temp;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tvoid deleteNode(ListNode* node) {\\n\\t\\t\\tListNode* temp = node -> next;\\n\\t\\t\\tnode -> val = temp -> val;\\n\\t\\t\\tnode -> next = temp -> next;\\n\\t\\t\\tdelete temp;\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 469072,
                "title": "python-java-js-go-c-by-victim-node-operation-w-visualization",
                "content": "Solution based on victim node operation\\n\\n---\\n\\n**Visualization & Diagram**:\\n\\n![image](https://assets.leetcode.com/users/brianchiang_tw/image_1588600048.png)\\n\\n![image](https://assets.leetcode.com/users/brianchiang_tw/image_1588600135.png)\\n\\n---\\n\\n**Implementation** in Python:\\n\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        \\n        # locate victim node\\n        victim_node = node.next\\n        \\n        # overwrite node\\'s value by victim node\\'s value\\n        node.val = victim_node.val\\n        \\n        # break the linkage of victim node\\n        node.next = victim_node.next\\n        \\n        # release victim node\\n        del victim_node\\n        \\n        return\\n```\\n\\n---\\n\\n**Implementation** by Java:\\n\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        \\n        // Locate victim node\\n        ListNode victimNode = node.next;\\n        \\n        // Copy value of victim node\\n        node.val = victimNode.val;\\n        \\n        // Make node.next pointes to next node of victim node\\n        node.next = victimNode.next;\\n        \\n        // Let Java GC automaticlly release victimNode in the background\\n        victimNode = null;\\n        \\n        return;\\n    }\\n}\\n```\\n\\n---\\n\\n**Implementation** in Javascript:\\n\\n```\\nvar deleteNode = function(node) {\\n    \\n    // copy object from victim node\\n    node = Object.assign(node, node.next);\\n    \\n\\t// Let JS GC automaticlly release victimNode in the background\\n    node = null;\\n\\t\\n\\treturn;\\n};\\n```\\n\\nor\\n\\n```\\nvar deleteNode = function(node) {\\n    \\n    // copy data from victim node\\n    node.val = node.next.val;\\n    \\n    // update linkage\\n    node.next = node.next.next;\\n    \\n\\t// Let JS GC automaticlly release victimNode in the background\\n    node = null;\\n\\t\\n    return;\\n};\\n```\\n\\n---\\n\\n**Implementation** in Golang:\\n\\n```\\nfunc deleteNode(node *ListNode) {\\n    \\n    // locate victim node\\n    victimNode := node.Next\\n    \\n    // overwrite node\\'s value by victim node\\'s value\\n    node.Val = victimNode.Val\\n    \\n    // break the linkage of victim node\\n    node.Next = victimNode.Next\\n    \\n    // release victim node\\n    victimNode = nil\\n    \\n    \\n}\\n```\\n\\n---\\n\\n**Implementation** in C++\\n\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        // locate victim node\\n        ListNode *victimNode = node->next;\\n        \\n        // copy data from victim node\\n        *node = *(node->next);\\n        \\n        // release memory of victim node\\n        delete victimNode;\\n        \\n        return;\\n    }\\n};\\n```\\n\\n---\\n\\n**Implementation** by concise victim node operation in Python:\\n\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        \\n        # concise version of victim node operation\\n        \\n        node.val, node.next = node.next.val, node.next.next\\n```\\n\\n---\\n\\n**Implementation** by concise victim node operation in Golang:\\n\\n```\\nfunc deleteNode(node *ListNode) {\\n    \\n    node.Val = node.Next.Val\\n    node.Next = node.Next.Next\\n    \\n}\\n```\\n\\nor\\n\\n\\n```\\n\\nfunc deleteNode(node *ListNode) {\\n    \\n    // direct update linkage to next node\\n    *node = *(node.Next)\\n    return\\n}\\n\\n```\\n---",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Python3",
                    "C",
                    "JavaScript",
                    "Go"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        \\n        # locate victim node\\n        victim_node = node.next\\n        \\n        # overwrite node\\'s value by victim node\\'s value\\n        node.val = victim_node.val\\n        \\n        # break the linkage of victim node\\n        node.next = victim_node.next\\n        \\n        # release victim node\\n        del victim_node\\n        \\n        return\\n```\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        \\n        // Locate victim node\\n        ListNode victimNode = node.next;\\n        \\n        // Copy value of victim node\\n        node.val = victimNode.val;\\n        \\n        // Make node.next pointes to next node of victim node\\n        node.next = victimNode.next;\\n        \\n        // Let Java GC automaticlly release victimNode in the background\\n        victimNode = null;\\n        \\n        return;\\n    }\\n}\\n```\n```\\nvar deleteNode = function(node) {\\n    \\n    // copy object from victim node\\n    node = Object.assign(node, node.next);\\n    \\n\\t// Let JS GC automaticlly release victimNode in the background\\n    node = null;\\n\\t\\n\\treturn;\\n};\\n```\n```\\nvar deleteNode = function(node) {\\n    \\n    // copy data from victim node\\n    node.val = node.next.val;\\n    \\n    // update linkage\\n    node.next = node.next.next;\\n    \\n\\t// Let JS GC automaticlly release victimNode in the background\\n    node = null;\\n\\t\\n    return;\\n};\\n```\n```\\nfunc deleteNode(node *ListNode) {\\n    \\n    // locate victim node\\n    victimNode := node.Next\\n    \\n    // overwrite node\\'s value by victim node\\'s value\\n    node.Val = victimNode.Val\\n    \\n    // break the linkage of victim node\\n    node.Next = victimNode.Next\\n    \\n    // release victim node\\n    victimNode = nil\\n    \\n    \\n}\\n```\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        // locate victim node\\n        ListNode *victimNode = node->next;\\n        \\n        // copy data from victim node\\n        *node = *(node->next);\\n        \\n        // release memory of victim node\\n        delete victimNode;\\n        \\n        return;\\n    }\\n};\\n```\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        \\n        # concise version of victim node operation\\n        \\n        node.val, node.next = node.next.val, node.next.next\\n```\n```\\nfunc deleteNode(node *ListNode) {\\n    \\n    node.Val = node.Next.Val\\n    node.Next = node.Next.Next\\n    \\n}\\n```\n```\\n\\nfunc deleteNode(node *ListNode) {\\n    \\n    // direct update linkage to next node\\n    *node = *(node.Next)\\n    return\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 285385,
                "title": "golang-1-line-solution",
                "content": "Easiest golang solution:\\n\\n```\\n/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc deleteNode(node *ListNode) {\\n    *node = *node.Next\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * type ListNode struct {\\n *     Val int\\n *     Next *ListNode\\n * }\\n */\\nfunc deleteNode(node *ListNode) {\\n    *node = *node.Next\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2697538,
                "title": "20-lines",
                "content": "\\n##### Java\\n```java\\npublic void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n```\\n\\n##### C++\\n```\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n```\\n\\n\\n##### Python\\n```python\\ndef deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\\n\\n##### JS\\n```js\\nvar deleteNode = function(node) {\\n    node.val = node.next.val\\n    node.next = node.next.next\\n};\\n```\\n\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C",
                    "JavaScript"
                ],
                "code": "```java\\npublic void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n```\n```\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n```\n```python\\ndef deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\n```js\\nvar deleteNode = function(node) {\\n    node.val = node.next.val\\n    node.next = node.next.next\\n};\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1667568,
                "title": "c-easy-solutions-2-approaches-with-explanation-and-illustration",
                "content": "*Please upvote if you liked this solution or found it useful.\\nFor any clarifications, suggestions or doubts please comment down below.*\\n\\n__Clarification:__ \\nThe problem expects us to shift values in order to achieve deletion\\nGiven below are 2 solutions (_Brute force and optimal_)\\n\\n__Approach:__\\n\\n__1. Brute Force__:\\nConsider an example : 1->2->3->4->5\\n1. We are supposed to delete say __2__ i.e. __node points to 2__ initially\\n2. We will do the following steps until __current->next->next!=NULL__\\n\\t2a. __current->val = current->next->val__\\n\\t2b. __current = current->next__\\n3. By doing this we will get\\n\\t1->2->3->4->5\\n\\t...... *\\n\\t1->3->3->4->5\\n\\t...............*\\n\\t1->3->4->4->5 (__current->next->next is NULL so break__)\\n\\t.......................*\\t\\n4. Finally we will do the following 2 steps\\n\\t4a. __current->data = current->next->data__\\n\\t4b. __current->next = NULL__\\n\\t1->3->4->5->5\\n\\t......................*\\n\\t1->3->4->5->X\\n\\t .....................*\\n\\t \\n__2. Optimal__\\nInvolves 3 steps, \\n1. let current= node\\n2.  current->val = current->next->val\\n3.  current->next = current->next->next\\n\\n__Code:__\\n\\n__1. Brute force code__\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        ListNode* current = node;\\n        while(current->next->next!=nullptr){\\n            current->val = current->next->val;\\n            current = current->next;\\n        }\\n        current->val = current->next->val;\\n        current->next = nullptr;\\n    }\\n};\\n```\\n__2. Optimal solution code__\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        ListNode* current = node;\\n        current->val = current->next->val;\\n        current->next = current->next->next;\\n    }\\n};\\n```\\n\\n__Complexity__\\n1. Brute force\\n\\t1a. Time : O(size_of_list) = O(n)\\n\\t1b. Space : O(1)\\n2. Optimal\\n\\t2a. Time : O(2 steps) = O(1)\\n\\t2b. Space : O(1)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        ListNode* current = node;\\n        while(current->next->next!=nullptr){\\n            current->val = current->next->val;\\n            current = current->next;\\n        }\\n        current->val = current->next->val;\\n        current->next = nullptr;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        ListNode* current = node;\\n        current->val = current->next->val;\\n        current->next = current->next->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1298366,
                "title": "c-three-soln-simple",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        //1st method\\n        //we don\\'t delete the node we move it forward\\n        *node=*node->next; \\n        \\n        \\n        //2nd method;\\n        //we copy the value of next varibale and move the pointer to next\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n        \\n        //3rd method\\n        //we copy the value of next varibale and move the pointer to next\\n        //also remove the node so to escape memory leak\\n        struct ListNode *temp=node->next;\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n        delete temp;\\n        \\n        \\n        \\n    }\\n};\\n```\\n\\nIf you find any issue in understanding the solutions then comment below, will try to help you.\\nIf you found my solution useful.\\nSo please do upvote and encourage me to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        //1st method\\n        //we don\\'t delete the node we move it forward\\n        *node=*node->next; \\n        \\n        \\n        //2nd method;\\n        //we copy the value of next varibale and move the pointer to next\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n        \\n        //3rd method\\n        //we copy the value of next varibale and move the pointer to next\\n        //also remove the node so to escape memory leak\\n        struct ListNode *temp=node->next;\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n        delete temp;\\n        \\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 800231,
                "title": "javascript-solution-237",
                "content": "```\\nlet deleteNode = function(node) {\\n    node.val = node.next.val;\\n    node.next = node.next.next;\\n};\\n```\\n\\n**Runtime: 84 ms, faster than 57.78% of JavaScript online submissions for Delete Node in a Linked List.**\\n\\n**Memory Usage: 38.6 MB, less than 25.18% of JavaScript online submissions for Delete Node in a Linked List.**\\n\\n**Feedback Appreciated**",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet deleteNode = function(node) {\\n    node.val = node.next.val;\\n    node.next = node.next.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 65553,
                "title": "c-16ms-simple-solution",
                "content": "    class Solution {\\n    public:\\n    void deleteNode(ListNode* node) {\\n        if(node == NULL) return;\\n        ListNode *tmp = node->next;\\n        node->val = tmp->val;\\n        node->next = tmp->next;\\n        delete tmp;\\n    }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    public:\\n    void deleteNode(ListNode* node) {\\n        if(node == NULL) return;\\n        ListNode *tmp = node->next;\\n        node->val = tmp->val;\\n        node->next = tmp->next;\\n        delete tmp;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 65565,
                "title": "solution-in-java-in-2-lines",
                "content": "The idea is to copy the data of next node to current node and then delete the next node.\\n\\n\\n    public class Solution {\\n        public void deleteNode(ListNode node) {\\n            \\n            node.val = node.next.val;\\n            node.next = node.next.next;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public void deleteNode(ListNode node) {\\n            \\n            node.val = node.next.val;\\n            node.next = node.next.next;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 665790,
                "title": "java-c-python3-with-explanation-2-line-code",
                "content": "```\\nEXPLANATION:-\\n   The idea behind this solution is we have only access to node to be deleted.\\n   So, copy the contents of next node and delete the next node.\\n   \\n   time:- O(1)\\n   space:- O(1)\\n   \\n   IF YOU HAVE ANY DOUBTS, FEEL FREE TO ASK\\n   IF YOU UNDERSTAND, DON\\'T FORGET TO UPVOTE.\\n```\\n```\\nJava :-\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n\\nPython3:-\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n\\nC++:-\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nEXPLANATION:-\\n   The idea behind this solution is we have only access to node to be deleted.\\n   So, copy the contents of next node and delete the next node.\\n   \\n   time:- O(1)\\n   space:- O(1)\\n   \\n   IF YOU HAVE ANY DOUBTS, FEEL FREE TO ASK\\n   IF YOU UNDERSTAND, DON\\'T FORGET TO UPVOTE.\\n```\n```\\nJava :-\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n\\nPython3:-\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n\\nC++:-\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 65621,
                "title": "simple-c-solution",
                "content": "    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        ListNode* t = node->next;\\n        node->next = t->next;\\n        delete t;\\n    }",
                "solutionTags": [],
                "code": "    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        ListNode* t = node->next;\\n        node->next = t->next;\\n        delete t;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3417332,
                "title": "c-java-python-javascript-2-lines-of-code-linked-list",
                "content": "# Intuition:\\nTo delete a node in a singly-linked list, we can simply modify the current node\\'s value with the value of its next node and then skip the next node.\\n\\n---\\n\\n\\n# Approach:\\nWe first update the value of the current node with the value of its next node, and then we skip the next node by pointing the current node\\'s next pointer to its next node\\'s next pointer.\\n\\n---\\n\\n\\n# Complexity:\\n- Time complexity: Since we are only modifying the value and next pointer of the given node, the time complexity of this algorithm is O(1).\\n\\n- Space complexity: As we are not using any extra space, the space complexity of this algorithm is O(1).\\n\\n---\\n\\n# Code : C++\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next= node->next->next;\\n    }\\n};\\n```\\n\\n---\\n# Code : JAVA\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```\\n---\\n# Code : Python\\n```\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\\n---\\n# Code : JavaScript\\n```\\nvar deleteNode = function(node) {\\n    node.val = node.next.val;\\n    node.next = node.next.next;\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "JavaScript",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next= node->next->next;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```\n```\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\n```\\nvar deleteNode = function(node) {\\n    node.val = node.next.val;\\n    node.next = node.next.next;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2697472,
                "title": "java-better-than-100-2-approaches-fully-explained",
                "content": "![image](https://assets.leetcode.com/users/images/88b3c563-d774-467a-85c1-33fe79ed0143_1665646090.4154038.png)\\n\\n\\n# Intuition\\nWe are given any node in a linked list and we must remove that node.\\n\\nThe first thing that comes to mind is mutating/changing the previous\\' node reference to point to the next node. We can immediately see that it\\'s not possible because we can\\'t access the reference of the previous node.\\n\\nThe only choice we have left is to shift the values of the sublist that we have to the left. For example our list is `1 -> 2 -> 3 -> 4` and we wan\\'t to delete node `2` then we will shift from that node, i.e.: `1 -> 3 -> 4 -> null`. And that\\'s how we remove the node.\\n\\n# Code\\n```\\nclass Solution {\\n    /**\\n    * We can\\'t change the reference of the previous node to pointer to the next node.\\n    * Hence, we must shift the values of the nodes that we have access to.\\n    */\\n    public void deleteNode(ListNode node) {\\n        ListNode currentPointer = node;\\n        ListNode nextPointer = node.next;\\n        \\n        while (nextPointer != null) {\\n            currentPointer.val = nextPointer.val;\\n            currentPointer = nextPointer;\\n            nextPointer = nextPointer.next;\\n        }\\n        \\n        \\n        // We must remove the last node after the shift.\\n        currentPointer = node;\\n        while (currentPointer.next.next != null) {\\n            currentPointer = currentPointer.next;\\n        }\\n        currentPointer.next = null;\\n    }\\n}\\n```\\n\\n# Reference change\\nWe know we can\\'t get access of the previous node. Instead of changing the reference of the previous node to point to the next node, we can \"skip\" a node by marking the current node with the value of the next node, and skpping the duplicate.\\n\\nExample: Delete node `2`\\nList: `1->2->3->4`\\nMark current with next value: `1->3->3->4`\\nDelete the duplicate (next) reference: `1->3->4`\\n\\n# Code\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        ListNode currentPointer = node;\\n        ListNode nextPointer = node.next;\\n        \\n        // Mark current with next\\'s value\\n        currentPointer.val = nextPointer.val;\\n        \\n        // Skip the duplicate (delete)\\n        currentPointer.next = nextPointer.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    /**\\n    * We can\\'t change the reference of the previous node to pointer to the next node.\\n    * Hence, we must shift the values of the nodes that we have access to.\\n    */\\n    public void deleteNode(ListNode node) {\\n        ListNode currentPointer = node;\\n        ListNode nextPointer = node.next;\\n        \\n        while (nextPointer != null) {\\n            currentPointer.val = nextPointer.val;\\n            currentPointer = nextPointer;\\n            nextPointer = nextPointer.next;\\n        }\\n        \\n        \\n        // We must remove the last node after the shift.\\n        currentPointer = node;\\n        while (currentPointer.next.next != null) {\\n            currentPointer = currentPointer.next;\\n        }\\n        currentPointer.next = null;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        ListNode currentPointer = node;\\n        ListNode nextPointer = node.next;\\n        \\n        // Mark current with next\\'s value\\n        currentPointer.val = nextPointer.val;\\n        \\n        // Skip the duplicate (delete)\\n        currentPointer.next = nextPointer.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1514068,
                "title": "c-simple-solution",
                "content": "**C++ :**\\n\\n```\\nvoid deleteNode(ListNode* node) {\\n\\tnode -> val = node -> next -> val;\\n\\tnode -> next = node -> next -> next;\\n}\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nvoid deleteNode(ListNode* node) {\\n\\tnode -> val = node -> next -> val;\\n\\tnode -> next = node -> next -> next;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 65567,
                "title": "my-java-easy-answer",
                "content": "**Notice :**  In this problem, we can't delete the last node with java code , so the problem says \"except the tail\". If I'm wrong, please tell me :) \\n\\n    public void deleteNode(ListNode node) {\\n        \\n        if(node.next==null || node==null )\\n\\t\\t\\treturn ;\\n\\n        node.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\t\\t\\n    }",
                "solutionTags": [],
                "code": "**Notice :**  In this problem, we can't delete the last node with java code , so the problem says \"except the tail\". If I'm wrong, please tell me :) \\n\\n    public void deleteNode(ListNode node) {\\n        \\n        if(node.next==null || node==null )\\n\\t\\t\\treturn ;\\n\\n        node.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\t\\t\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2696757,
                "title": "java-solution-0ms-faster-than-100",
                "content": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2635131,
                "title": "0ms-faster-than-100-java",
                "content": "**Copy the value of the next node in the given node.\\nThen make the given node point to the node to the next of the next of the given node.**\\n\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        \\n        node.val = node.next.val;\\n        \\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        \\n        node.val = node.next.val;\\n        \\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 65516,
                "title": "java-1ms-solution",
                "content": "    public class Solution {\\n        public void deleteNode(ListNode node) {\\n    \\t\\tif (node.next != null) {\\n    \\t\\t\\tnode.val = node.next.val;\\n    \\t\\t\\tnode.next = node.next.next;\\n    \\t\\t}\\n    \\t}\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public void deleteNode(ListNode node) {\\n    \\t\\tif (node.next != null) {\\n    \\t\\t\\tnode.val = node.next.val;\\n    \\t\\t\\tnode.next = node.next.next;\\n    \\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3565877,
                "title": "c-one-line-solution-o-1-beats-100-without-declaring-any-variable",
                "content": "\\n# Approach\\nUpdate the memory container of ```node``` by replacing current ```node``` instance with the instance of next ```ListNode```\\n\\n**NOTE:** ```*node``` returns the value of memory address where that particular *node* is stored\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        *node=*node->next;\\n    }\\n};\\n```\\n\\n**Please upvote if you like the solution!\\uD83E\\uDD79**",
                "solutionTags": [
                    "C++",
                    "Linked List"
                ],
                "code": "```node```\n```node```\n```ListNode```\n```*node```\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        *node=*node->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1957043,
                "title": "js-simple-explained-98-faster-recursively",
                "content": "# 237. Delete Node in a Linked List \\uD83D\\uDE80\\n***\\n### Solution Developed In:\\n![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\\n\\n<!-- ### Index:\\n1. [Explaining the Question](#explaining-the-question)\\n2. [Recommended Knowledge](#what-do-we-know)\\n3. [What do we know](#recommended-knowledge)\\n4. [Solution Explanation](#how-were-going-to-do-it)\\n5. [Big *O* Notation](#big-o-notation)\\n6. [Leetcode Results](#leetcode-results)\\n7. [Solution](#the-solution) -->\\n\\n## Explaining The Question\\nThis Question is rated **Easy**. Which I think is ***extremely*** inaccurate. I think it is more of a **Medium** question. The question and its description is ***highly misleading ***.\\n\\n***This is a trick question***. We\\'re told that the node we\\'re given, is the node that we will be deleting. Which is ***wrong***. ***We can never delete the node*** we\\'re given. The reason for this is that we\\'re never given access to the head of the linked list, which maintains the `next` pointer to the node that we\\'re going to delete. \\nWhat this means is we\\'re going to fully break the list if we delete the node we\\'re given.\\n\\n***So what do we do?***\\nGiven our limitations to deleting the given node, we\\'re instead going to move the values of our nodes backwards. Meaning we\\'re going to shift all the values we have one node back. Then we\\'re going to ***delete the last node*** of the list.\\n\\n***What? That makes no sense!?***\\nI know it sounds confusing. But it\\'s really simple. See the example below\\n\\nNode to delete: `5`\\nLinked List: `1->2->3->4->5->6->7->8->9`\\nNote: We can only see `(5->6->7->8->9)` Because we\\'re not given access to the `head`\\n\\nNow ***let\\'s start shifting the values backwards***:\\nCycle 1:\\nNote: This is where we start, on node `5`. So what we do is Make node `5` become node `6`\\nWhat we see `(6->6->7->8->9)`\\nLinked List: `1->2->3->4->6->6->7->8->9`\\n\\nCycle 2:\\nNote: We\\'ve now changed node `5` to become `6` so let\\'s change `6` to become `7`\\nWhat we see `(6->7->7->8->9)`\\nLinked List: `1->2->3->4->6->7->7->8->9`\\n\\nCycle 3:\\nNote: We\\'ve now changed node `6` to become `7` so let\\'s change `7` to become `8`\\nWhat we see `(6->7->8->8->9)`\\nLinked List: `1->2->3->4->6->7->8->8->9`\\n\\nRepeat this until we reach the very last node. \\nOnce at the last node we should have a linked list like this:\\nLinked List: `1->2->3->4->6->7->8->9->9`\\n\\nNow all we have to do, is remove the last duplicate node and we would have effectively deleted the given node.\\n\\n##  Recommended Knowledge\\n1. Linked Lists\\n2. Linked List Traversal\\n3. Linked List Traversal (Recursively) * ***Not needed but recommened***\\n4. How to changed linked list values\\n\\n## What do we know?\\n1. We have been given a trick question. See above.\\n2. We need to shift all the given values in the linked list backwards\\n\\n## How we\\'re going to do it:\\n1. At each node, we\\'re going to set the current nodes value to whatever the next value is.\\n2. We will have a prev pointer, keeping track of the last node we visited, which we update at every node\\n3. Once we have changed all of these values and we have reached the end of the list, we will remove the last node of the list as that is a dupe.\\n\\n## Big O Notation:\\n* Time Complexity:   *O(**n**)* | Where ***n*** is the list length | As we will traverse them all\\n* Space Complexity: *O(**1**)* | As we never allocate extra space\\n\\n## Leetcode Results:\\n\\nSee Submission Link: \\n\\n* Runtime: 63 ms, faster than ***97.49%*** of JavaScript online submissions for Delete Node in a Linked List\\n* Memory Usage: 44.7 MB, less than ***18.59%*** of JavaScript online submissions for Delete Node in a Linked List\\n\\n[![LeetCode](https://img.shields.io/badge/LeetCode-000000?style=for-the-badge&logo=LeetCode&logoColor=#d16c06)](https://leetcode.com/submissions/detail/682104375/)\\n\\n\\n***\\n\\n# The Solution\\nvar deleteNode = function (node, prev) {\\n    \\n\\t/* -------------------------------------------------------------------------- */\\n\\t/*                      237. Delete Node in a Linked List                     */\\n\\t/* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @author  Samuel Hinchliffe\\n     * @see    {@link linkedin.com/in/samuel-hinchliffe-\\uD83D\\uDE80-2bb5801a5/ | Author\\'s Linkedin }\\n     * @see    {@link github.com/Samuel-Hinchliffe}\\n     */\\n\\n\\t// NOTE: This is not a easy problem.\\n\\t// It would be easy, if this was JUST deleting a node.\\n\\t// But as we never have the head of the linked list, this is a trick question.\\n\\t// So instead, we shift all the values backwards and remove the last node.\\n\\n\\t// We\\'re going to do this recursively, meaning, that we\\'re going to apply the same\\n\\t// rules for every node we encounter. So this must mean, we\\'re going to have to prepare\\n\\t// ourselves for every outcome possible. Starting with:\\n\\n\\t// Does the next node exist?\\n\\t// IF NOT: We\\'re at the end of the list, so\\n\\t// we nullify the prev node\\'s next pointer. (As that pointer is on the last node)\\n\\t// IF the next node does exist:\\n\\tif (node.next) {\\n\\t\\t// We update our prev node pointer, to be this current node (We do this because we need to always know the previous node)\\n\\t\\t// Because we will nullify it\\'s next in the end.\\n\\t\\tprev = node;\\n\\n\\t\\t// We now set our current nodes value to the next node\\'s value. (Shifting the values)\\n\\t\\t// Because we\\'re going to shift all the values backwards. The reason for this is because we cannot just\\n\\t\\t// delete the node, as the unaccessible head will still point towards it. (This is what makes this a trick question)\\n\\t\\tnode.val = node.next.val;\\n\\n\\t\\t// Now recursively call this function, with the next node.\\n\\t\\t// Keep doing the above until we reach the very end of the list\\n\\t\\tdeleteNode(node.next, prev);\\n\\t} else {\\n\\t\\tprev.next = null;\\n\\t}\\n\\n\\t// Don\\'t worry if you\\'re just starting our on linked lists and don\\'t understand this.\\n\\t// Leetcode has marked this as easy, but it\\'s not. They make it look simple, but it\\'s a trick question.\\n\\t// If you don\\'t understand, you\\'re all good. It\\'s just a trick question.\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Linked List",
                    "Recursion"
                ],
                "code": "# 237. Delete Node in a Linked List \\uD83D\\uDE80\\n***\\n### Solution Developed In:\\n![JavaScript](https://img.shields.io/badge/javascript-%23323330.svg?style=for-the-badge&logo=javascript&logoColor=%23F7DF1E)\\n\\n<!-- ### Index:\\n1. [Explaining the Question](#explaining-the-question)\\n2. [Recommended Knowledge](#what-do-we-know)\\n3. [What do we know](#recommended-knowledge)\\n4. [Solution Explanation](#how-were-going-to-do-it)\\n5. [Big *O* Notation](#big-o-notation)\\n6. [Leetcode Results](#leetcode-results)\\n7. [Solution](#the-solution) -->\\n\\n## Explaining The Question\\nThis Question is rated **Easy**. Which I think is ***extremely*** inaccurate. I think it is more of a **Medium** question. The question and its description is ***highly misleading ***.\\n\\n***This is a trick question***. We\\'re told that the node we\\'re given, is the node that we will be deleting. Which is ***wrong***. ***We can never delete the node*** we\\'re given. The reason for this is that we\\'re never given access to the head of the linked list, which maintains the `next` pointer to the node that we\\'re going to delete. \\nWhat this means is we\\'re going to fully break the list if we delete the node we\\'re given.\\n\\n***So what do we do?***\\nGiven our limitations to deleting the given node, we\\'re instead going to move the values of our nodes backwards. Meaning we\\'re going to shift all the values we have one node back. Then we\\'re going to ***delete the last node*** of the list.\\n\\n***What? That makes no sense!?***\\nI know it sounds confusing. But it\\'s really simple. See the example below\\n\\nNode to delete: `5`\\nLinked List: `1->2->3->4->5->6->7->8->9`\\nNote: We can only see `(5->6->7->8->9)` Because we\\'re not given access to the `head`\\n\\nNow ***let\\'s start shifting the values backwards***:\\nCycle 1:\\nNote: This is where we start, on node `5`. So what we do is Make node `5` become node `6`\\nWhat we see `(6->6->7->8->9)`\\nLinked List: `1->2->3->4->6->6->7->8->9`\\n\\nCycle 2:\\nNote: We\\'ve now changed node `5` to become `6` so let\\'s change `6` to become `7`\\nWhat we see `(6->7->7->8->9)`\\nLinked List: `1->2->3->4->6->7->7->8->9`\\n\\nCycle 3:\\nNote: We\\'ve now changed node `6` to become `7` so let\\'s change `7` to become `8`\\nWhat we see `(6->7->8->8->9)`\\nLinked List: `1->2->3->4->6->7->8->8->9`\\n\\nRepeat this until we reach the very last node. \\nOnce at the last node we should have a linked list like this:\\nLinked List: `1->2->3->4->6->7->8->9->9`\\n\\nNow all we have to do, is remove the last duplicate node and we would have effectively deleted the given node.\\n\\n##  Recommended Knowledge\\n1. Linked Lists\\n2. Linked List Traversal\\n3. Linked List Traversal (Recursively) * ***Not needed but recommened***\\n4. How to changed linked list values\\n\\n## What do we know?\\n1. We have been given a trick question. See above.\\n2. We need to shift all the given values in the linked list backwards\\n\\n## How we\\'re going to do it:\\n1. At each node, we\\'re going to set the current nodes value to whatever the next value is.\\n2. We will have a prev pointer, keeping track of the last node we visited, which we update at every node\\n3. Once we have changed all of these values and we have reached the end of the list, we will remove the last node of the list as that is a dupe.\\n\\n## Big O Notation:\\n* Time Complexity:   *O(**n**)* | Where ***n*** is the list length | As we will traverse them all\\n* Space Complexity: *O(**1**)* | As we never allocate extra space\\n\\n## Leetcode Results:\\n\\nSee Submission Link: \\n\\n* Runtime: 63 ms, faster than ***97.49%*** of JavaScript online submissions for Delete Node in a Linked List\\n* Memory Usage: 44.7 MB, less than ***18.59%*** of JavaScript online submissions for Delete Node in a Linked List\\n\\n[![LeetCode](https://img.shields.io/badge/LeetCode-000000?style=for-the-badge&logo=LeetCode&logoColor=#d16c06)](https://leetcode.com/submissions/detail/682104375/)\\n\\n\\n***\\n\\n# The Solution\\nvar deleteNode = function (node, prev) {\\n    \\n\\t/* -------------------------------------------------------------------------- */\\n\\t/*                      237. Delete Node in a Linked List                     */\\n\\t/* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @author  Samuel Hinchliffe\\n     * @see    {@link linkedin.com/in/samuel-hinchliffe-\\uD83D\\uDE80-2bb5801a5/ | Author\\'s Linkedin }\\n     * @see    {@link github.com/Samuel-Hinchliffe}\\n     */\\n\\n\\t// NOTE: This is not a easy problem.\\n\\t// It would be easy, if this was JUST deleting a node.\\n\\t// But as we never have the head of the linked list, this is a trick question.\\n\\t// So instead, we shift all the values backwards and remove the last node.\\n\\n\\t// We\\'re going to do this recursively, meaning, that we\\'re going to apply the same\\n\\t// rules for every node we encounter. So this must mean, we\\'re going to have to prepare\\n\\t// ourselves for every outcome possible. Starting with:\\n\\n\\t// Does the next node exist?\\n\\t// IF NOT: We\\'re at the end of the list, so\\n\\t// we nullify the prev node\\'s next pointer. (As that pointer is on the last node)\\n\\t// IF the next node does exist:\\n\\tif (node.next) {\\n\\t\\t// We update our prev node pointer, to be this current node (We do this because we need to always know the previous node)\\n\\t\\t// Because we will nullify it\\'s next in the end.\\n\\t\\tprev = node;\\n\\n\\t\\t// We now set our current nodes value to the next node\\'s value. (Shifting the values)\\n\\t\\t// Because we\\'re going to shift all the values backwards. The reason for this is because we cannot just\\n\\t\\t// delete the node, as the unaccessible head will still point towards it. (This is what makes this a trick question)\\n\\t\\tnode.val = node.next.val;\\n\\n\\t\\t// Now recursively call this function, with the next node.\\n\\t\\t// Keep doing the above until we reach the very end of the list\\n\\t\\tdeleteNode(node.next, prev);\\n\\t} else {\\n\\t\\tprev.next = null;\\n\\t}\\n\\n\\t// Don\\'t worry if you\\'re just starting our on linked lists and don\\'t understand this.\\n\\t// Leetcode has marked this as easy, but it\\'s not. They make it look simple, but it\\'s a trick question.\\n\\t// If you don\\'t understand, you\\'re all good. It\\'s just a trick question.\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1389536,
                "title": "very-easy-solution",
                "content": "```\\nvar deleteNode = function(node) {\\n    node.val = node.next.val;\\n    node.next = node.next.next;\\n};\\n```",
                "solutionTags": [
                    "Java",
                    "JavaScript",
                    "Linked List"
                ],
                "code": "```\\nvar deleteNode = function(node) {\\n    node.val = node.next.val;\\n    node.next = node.next.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 666589,
                "title": "c-1-line-code-simple-and-short",
                "content": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n\\t    *node = *(node->next);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n\\t    *node = *(node->next);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 666519,
                "title": "c-python-illustration-of-linked-list",
                "content": "Note, this post is a modified version of the following post:\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/discuss/65547/My-C%2B%2B-solution-in-1-line \\n\\nNote: The tricky point is that we can not use: \\n    node=node->next\\nBecause we have not change the address content stored in the previous node.\\nIt just likes that you change your room number but remains everything in the room, isn\\u2019t it\\n\\nIn fact , a linked list will be stored like this:\\n\\n**head ->  {val1,   address2}    {val2, address3}  {val3, address4}   {val4, NULL}**\\n\\nSo, if we are given access to the *cur = {val3, address4}\\n\\nIf we want to delete the *cur, we have to change the content stored in *cur.\\n\\nIf we use cur=cur->next, what happens ?\\n\\nOOPS ! nothing happens ... because the \"address#\" stored in the linked list keeps no changing!\\n\\nSo \"cur=cur->next\" makes no impact on the linked list.\\n\\nC++\\n```\\nclass Solution {// BEST1:\\npublic:\\n    void deleteNode(ListNode* node) {\\n        *node = *(node->next);\\n    }\\n};\\n```\\nExplanation:\\nRecall the definition of ListNode:\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\n ```\\n Let\\'s imagaing each List Node as something like folllowing in the memory:\\n {val, address_to_next}\\n  So \\n  ```\\n   *node = *(node->next);\\n   ```\\n   means you copy EVERYTHING from one (the obejct pointed by node->next) to another (the object pointed by node)\\n   So its function is the  same as:\\n   ```\\n\\t node->val = node->next->val;\\n     node->next = node->next->next; \\n```\\n\\n```\\nclass Solution { //BEST3: Same as BEST1\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val = node->next->val;\\n       node->next = node->next->next; \\n    }\\n};\\n```\\n\\n```\\nclass Solution { // BEST2:\\npublic: // if the node should be freed, we need 3 lines\\n    void deleteNode(ListNode* node) {\\n        ListNode* temp = node->next;\\n        *node = *temp;\\n        delete temp;\\n    }\\n};\\n```\\n\\nPython:\\n```\\ndef deleteNode(self, node):\\n    node.val = node.next.val\\n    node.next = node.next.next\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {// BEST1:\\npublic:\\n    void deleteNode(ListNode* node) {\\n        *node = *(node->next);\\n    }\\n};\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\n ```\n```\\n   *node = *(node->next);\\n   ```\n```\\n\\t node->val = node->next->val;\\n     node->next = node->next->next; \\n```\n```\\nclass Solution { //BEST3: Same as BEST1\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val = node->next->val;\\n       node->next = node->next->next; \\n    }\\n};\\n```\n```\\nclass Solution { // BEST2:\\npublic: // if the node should be freed, we need 3 lines\\n    void deleteNode(ListNode* node) {\\n        ListNode* temp = node->next;\\n        *node = *temp;\\n        delete temp;\\n    }\\n};\\n```\n```\\ndef deleteNode(self, node):\\n    node.val = node.next.val\\n    node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 65532,
                "title": "simple-4ms-c-solution",
                "content": "    void deleteNode(struct ListNode* node) {\\n        struct ListNode* temp;\\n        temp=node->next;\\n        node->val=temp->val;\\n        node->next=temp->next;\\n        free(temp);\\n    }\\n\\nEg.a->b->c->d->e->....->z->NULL\\nNow suppose we wan't to delete node 'c',we can't directly do b->d and free(c) as we have access only to the node to be deleted,i.e.,'c'.But we can access d via c, so we copy d's info into c's info and make c point e, in short, c is now the same as d and so we delete d and get the desired result.",
                "solutionTags": [],
                "code": "    void deleteNode(struct ListNode* node) {\\n        struct ListNode* temp;\\n        temp=node->next;\\n        node->val=temp->val;\\n        node->next=temp->next;\\n        free(temp);\\n    }\\n\\nEg.a->b->c->d->e->....->z->NULL\\nNow suppose we wan't to delete node 'c',we can't directly do b->d and free(c) as we have access only to the node to be deleted,i.e.,'c'.But we can access d via c, so we copy d's info into c's info and make c point e, in short, c is now the same as d and so we delete d and get the desired result.",
                "codeTag": "Unknown"
            },
            {
                "id": 65559,
                "title": "a-js-solution",
                "content": "    var deleteNode = function(node) {\\n        \\n        if(node.val !== undefined && node.next !== undefined){\\n            //copy the next node to this node\\n            node.val = node.next.val;\\n            node.next = node.next.next;\\n        }\\n    };",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "    var deleteNode = function(node) {\\n        \\n        if(node.val !== undefined && node.next !== undefined){\\n            //copy the next node to this node\\n            node.val = node.next.val;\\n            node.next = node.next.next;\\n        }\\n    };",
                "codeTag": "Unknown"
            },
            {
                "id": 3222696,
                "title": "c-beginner-friendly-solutions-beats-92-97",
                "content": "# Intuition\\n***Head is not given in this question so we have to go through another way, so here is the basic approach...***\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n 1. Just copy the next node val to the current node val & the copy the next to next node address to the current node(the node the is given)\\n 2. now take another ListNode type pointer that points to the node that is copied.\\n 3. delete that node using **delete POINTER_NAME** it prevents memoryleak\\nListNode* t;\\n        t=node->next;\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n        delete t;\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# \\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       \\n        ListNode* t;\\n        t=node->next;\\n\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n        delete t;\\n\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       \\n        ListNode* t;\\n        t=node->next;\\n\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n        delete t;\\n\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2246383,
                "title": "java-in-depth-explanation-easy-to-implement",
                "content": "We don\\'t need to consider the case that node is tail node. Hence, it\\'s simple. \\n  \\n  ```\\n  class Solution \\n{\\n    public void deleteNode(ListNode node) \\n    {\\n        // O(1) time | O(1) space\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n  class Solution \\n{\\n    public void deleteNode(ListNode node) \\n    {\\n        // O(1) time | O(1) space\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1851654,
                "title": "c-easy-90-faster-linked-list",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node)\\n    {\\n        //since it is given the element needed to be deleted is not the last node\\n        //so we do not need to care for that case.\\n        \\n        swap(node->val,node->next->val); //swaping the target node and the next of the target node\\n\\t\\t\\n        ListNode* temp = node->next;\\n        node->next = node->next->next;\\n        delete temp; \\n    }\\n};\\n```\\nNote: \\n\\n\\t\\t\\tListNode* temp = node->next;\\n\\t\\t\\tdelete temp; \\n\\t\\t\\t\\n***Skipping the above lines won\\'t give you error. The program will run perfectly fine but i have used these lines because it is very important and very good practice  to free the space from memoy,since in real world it can lead to memory leakage.***\\n\\n* **Try to understand the code rather than coping the code or reposting the code.**\\n* **Upvote my solution if you liked it.**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node)\\n    {\\n        //since it is given the element needed to be deleted is not the last node\\n        //so we do not need to care for that case.\\n        \\n        swap(node->val,node->next->val); //swaping the target node and the next of the target node\\n\\t\\t\\n        ListNode* temp = node->next;\\n        node->next = node->next->next;\\n        delete temp; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1454184,
                "title": "95-96-faster-and-simpler-solution-with-explanation",
                "content": "The solution is simply to copy the data from the next node over to the current node, and then to delete the node. \\n\\n\\n```\\nclass Solution:\\n    def deleteNode(self, node):\\n\\n        nextNode = node.next\\n        node.val = nextNode.val\\n        node.next = nextNode.next\\n```\\nRuntime: 32 ms, faster than 95.96% of Python3 online submissions for Delete Node in a Linked List.\\nMemory Usage: 14.8 MB, less than 61.46% of Python3 online submissions for Delete Node in a Linked List.",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n\\n        nextNode = node.next\\n        node.val = nextNode.val\\n        node.next = nextNode.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1405716,
                "title": "python-beginner-friendly",
                "content": "Do upvote if this helped you,\\nhappy learning :)\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        if not node:\\n            return\\n        node.val = node.next.val #new node value is the value of next node\\n        node.next = node.next.next \\n        \\n",
                "solutionTags": [],
                "code": "Do upvote if this helped you,\\nhappy learning :)\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        if not node:\\n            return\\n        node.val = node.next.val #new node value is the value of next node\\n        node.next = node.next.next \\n        \\n",
                "codeTag": "Java"
            },
            {
                "id": 808803,
                "title": "c-short-solution-with-freeing-memory-most-posts-don-t-and-it-s-wrong",
                "content": "```\\nvoid deleteNode(struct ListNode* node) \\n{\\n    node->val = node->next->val;\\n    struct ListNode* temp = node->next;\\n    node->next = node->next->next;\\n    free(temp);\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nvoid deleteNode(struct ListNode* node) \\n{\\n    node->val = node->next->val;\\n    struct ListNode* temp = node->next;\\n    node->next = node->next->next;\\n    free(temp);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 666376,
                "title": "c-o-1-simple-solution",
                "content": "```\\npublic class Solution {\\n    public void DeleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Linked List"
                ],
                "code": "```\\npublic class Solution {\\n    public void DeleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 297138,
                "title": "python-faster-than-97-24-ms",
                "content": "```\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        cur = node\\n        while node.next!=None:\\n            node.val = node.next.val\\n            cur = node\\n            node = node.next\\n        cur.next = None\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        cur = node\\n        while node.next!=None:\\n            node.val = node.next.val\\n            cur = node\\n            node = node.next\\n        cur.next = None\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3231739,
                "title": "237-time-95-56-and-space-86-81-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThis solution is for deleting a node in a singly-linked list without being given the head of the list. The solution takes in a node to be deleted as its input and modifies the list by deleting that node.\\n\\nHere\\'s a step-by-step explanation of the code:\\n\\n1. The ListNode class is defined with val and next attributes.\\n2. The Solution class is defined with a deleteNode method which takes in a node of type ListNode as input and returns None.\\n3. Inside the deleteNode method, the value of the given node is updated to the value of its next node using node.val = node.next.val. Essentially, the value of the node to be deleted is overwritten by the value of its next node.\\n4. Then, the next pointer of the given node is updated to skip over the next node and point to the node after that using node.next = node.next.next. This effectively removes the next node from the list and connects the current node to the node after it.\\n5. The modified linked list is returned. Since the input list is modified in-place, the method does not explicitly return anything.\\nOverall, this solution has a time complexity of O(1) since it only updates the pointers of the given node and its next node, and does not require any traversal of the list.\\n\\n# Complexity\\n- Time complexity:\\n95.56%\\n\\n- Space complexity:\\n86.81%\\n\\n# Code\\n```\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def deleteNode(self, node: ListNode) -> None:\\n        node.val = node.next.val\\n        node.next = node.next.next\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\nclass Solution:\\n    def deleteNode(self, node: ListNode) -> None:\\n        node.val = node.next.val\\n        node.next = node.next.next\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3132058,
                "title": "best-o-1-solution",
                "content": "# Approach 1\\nBrute-Force\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$ \\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        ListNode* curr = node, * nxt = node->next;\\n        while (nxt->next != NULL) {\\n            curr->val = nxt->val;\\n            curr = curr->next;\\n            nxt = nxt->next;\\n        }\\n        curr->val = nxt->val;\\n        curr->next = NULL;\\n    }\\n};\\n```\\n\\n# Approach 2\\nOptimal \\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$ \\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        ListNode* curr = node, * nxt = node->next;\\n        while (nxt->next != NULL) {\\n            curr->val = nxt->val;\\n            curr = curr->next;\\n            nxt = nxt->next;\\n        }\\n        curr->val = nxt->val;\\n        curr->next = NULL;\\n    }\\n};\\n```\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2775186,
                "title": "1-line-java-0ms-solution-using-for-loop",
                "content": "O(1) Solution in a single line. Java using for loop\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        for(boolean b=true; b; b=false, node.val = node.next.val, node.next = node.next.next);\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        for(boolean b=true; b; b=false, node.val = node.next.val, node.next = node.next.next);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2699687,
                "title": "python3-one-liner-o-o-holly-shch-explained",
                "content": "**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**\\n\\nSince we do not have the access to the previous node, we can simply turn the current node into the next node by copying the value, and then delete the next node instead of the current. Do not forget delete the link of the next node to the `next.next` node by assigning the `None` to prevent memory leak.\\n\\n```\\nclass Solution:\\n    def deleteNode(self, node):\\n\\t\\tnode.val, node.next.next, node.next = node.next.val, None, node.next.next\\n```\\n\\n**UPVOTE if you like (\\uD83C\\uDF38\\u25E0\\u203F\\u25E0), If you have any question, feel free to ask.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n\\t\\tnode.val, node.next.next, node.next = node.next.val, None, node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696332,
                "title": "3-approach-c-no-memory-leak-tc-1-space-1",
                "content": "**Approach :1**\\n\\n\\n\\n        *node=*node->next; //just copy\\n\\n\\n**Approach : 2**\\n\\n        node->val = node->next->val; //delete node given next value\\n        node->next = node->next->next; //making link\\n\\t\\t\\n\\t\\t\\n**Approach : 3**\\n     \\n\\t    ListNode *temp=node->next; //store delete node in temp\\n        node->val=node->next->val; //copy the data\\n        node->next=node->next->next; //making link also break link\\n        delete temp; //delet the data because don\\'t want memeory leak\\n\\t\\t\\n\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "**Approach :1**\\n\\n\\n\\n        *node=*node->next; //just copy\\n\\n\\n**Approach : 2**\\n\\n        node->val = node->next->val; //delete node given next value\\n        node->next = node->next->next; //making link\\n\\t\\t\\n\\t\\t\\n**Approach : 3**\\n     \\n\\t    ListNode *temp=node->next; //store delete node in temp\\n        node->val=node->next->val; //copy the data\\n        node->next=node->next->next; //making link also break link\\n        delete temp; //delet the data because don\\'t want memeory leak\\n\\t\\t\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2586845,
                "title": "python-99-23-faster-simplest-solution-with-visual-explanation-beg-to-adv-linked-list",
                "content": "***Found helpful, Do upvote!!***\\nHow do we normally remove/ delete node from a linked list when head is provided:\\n```python\\nwhile head is not None and head.val == val: # head node should not be empty and we are checking if head value is identical to the value given.\\n            head = head.next # # updating the head node to the next one. \\n        current = head # if not equal then we are assiging the head to current var.\\n        while current is not None: # cheking for head not be a empty one.\\n            if current.next is not None and current.next.val == val: # checking for next node value is it equal to the given value.\\n                current.next = current.next.next # if yes, then we remove the next one by skipping it & assiging the next as next to next node\\n            else:\\n                current = current.next # else we`ll just assign the next node to current.\\n        return head \\n```\\n**Problem statement link :-** https://leetcode.com/problems/remove-linked-list-elements/\\n\\n**Approach we are following to solve this question:-**\\n1. We`ll copy the value of next node in the current node.(node.value = node.next.val)\\n2. Then will remove the next node by pointing the current node next to the next node of current next node (i.e node.next.next)\\n\\nWhy we used this approach is :\\n1. We are not given with head node.\\n2. Also it is guaranteed that they wouldn`t ask us to remove the last node of the provided linked list.\\n\\n**Visual explantion:**\\nFor example below is the given linked list and node that needs ot be deleted is 3.\\n![image](https://assets.leetcode.com/users/images/3a7582cd-95c2-4035-ac90-f8acce4c8d86_1663409764.8280253.png)\\nAfter coping the next node it`d look like :\\n![image](https://assets.leetcode.com/users/images/7411b0bc-8922-417c-a10a-0f1af0483412_1663409898.5257802.png)\\nNow we have to update the next pointer i.e node.next.next\\n![image](https://assets.leetcode.com/users/images/0d98c204-8971-49da-ada5-a3fc6b9b8ce5_1663409956.5019855.png)\\nFinally we have the desired list:\\n![image](https://assets.leetcode.com/users/images/2abdb5d2-5f9c-44f4-8980-f50ec64a20a0_1663410001.386711.png)\\n\\n\\n**Lets checkout the code now**\\n**1. Without using temp pointer:**\\n```python\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        \\n        node.val = node.next.val # copying next node value in the currernt node.\\n        node.next = node.next.next # to delete the next node that we copied, we are updating the reference of the node to next to next node.\\n```\\n**2. With using temp pointer:**\\n```python\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        \\n        temp = node.next # making a temp pointer to save the next node.\\n        node.val = temp.val # copying the value of next node value to the current node.\\n        node.next = temp.next # update the reference to the next to next node.\\n```\\n\\n***Found helpful, Do upvote!!***",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```python\\nwhile head is not None and head.val == val: # head node should not be empty and we are checking if head value is identical to the value given.\\n            head = head.next # # updating the head node to the next one. \\n        current = head # if not equal then we are assiging the head to current var.\\n        while current is not None: # cheking for head not be a empty one.\\n            if current.next is not None and current.next.val == val: # checking for next node value is it equal to the given value.\\n                current.next = current.next.next # if yes, then we remove the next one by skipping it & assiging the next as next to next node\\n            else:\\n                current = current.next # else we`ll just assign the next node to current.\\n        return head \\n```\n```python\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        \\n        node.val = node.next.val # copying next node value in the currernt node.\\n        node.next = node.next.next # to delete the next node that we copied, we are updating the reference of the node to next to next node.\\n```\n```python\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        \\n        temp = node.next # making a temp pointer to save the next node.\\n        node.val = temp.val # copying the value of next node value to the current node.\\n        node.next = temp.next # update the reference to the next to next node.\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2040372,
                "title": "java-100-fast-explained",
                "content": "\\'\\'\\'\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        \\n        // now as we can\\'t go in reverse direction our approach would be manipulation of \\n        // a. links\\n        // b. values of the node\\n        \\n        // only link change would not be sufficient as we do not have access to the prev node\\n        \\n        // we can swap the value of 5, 1 (as in example)\\n        // and then delete the 5 valued node\\n        \\n        if(node != null && node.next != null)\\n        {\\n            // putting the value of next node into our current node\\n            node.val = node.next.val;\\n            \\n            // our list looks like:\\n            // 4->1->1->9->null\\n            \\n            // connecting node to 9, deleting the mid 1\\n            node.next = node.next.next;\\n        }\\n        \\n    }\\n}\\n\\'\\'\\'",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        \\n        // now as we can\\'t go in reverse direction our approach would be manipulation of \\n        // a. links\\n        // b. values of the node\\n        \\n        // only link change would not be sufficient as we do not have access to the prev node\\n        \\n        // we can swap the value of 5, 1 (as in example)\\n        // and then delete the 5 valued node\\n        \\n        if(node != null && node.next != null)\\n        {\\n            // putting the value of next node into our current node\\n            node.val = node.next.val;\\n            \\n            // our list looks like:\\n            // 4->1->1->9->null\\n            \\n            // connecting node to 9, deleting the mid 1\\n            node.next = node.next.next;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1554468,
                "title": "5-lines-code-very-easy-c",
                "content": "```\\n\\n```class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        ListNode*temp,*todelete;\\n        node->val=node->next->val;\\n        todelete=node->next;\\n        node->next=node->next->next;\\n        delete todelete;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1533555,
                "title": "c-easy-solution-even-example-not-needed",
                "content": "\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        int x= node->next->val;\\n        ListNode *ptr=node->next->next;\\n        node->val=x;\\n        node->next=ptr;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        int x= node->next->val;\\n        ListNode *ptr=node->next->next;\\n        node->val=x;\\n        node->next=ptr;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1517762,
                "title": "super-easy-c-code-with-explaination",
                "content": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) \\n    {\\n        ListNode* p = node->next;       //pointer to the node which is next to the deleting node\\n        node->val = p->val;             //copy the value of next node to the value of deleting node\\n        node->next = p->next;           //copy the address of next-to-next node to the next of deleting node\\n        delete p;                       //delete the next node\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) \\n    {\\n        ListNode* p = node->next;       //pointer to the node which is next to the deleting node\\n        node->val = p->val;             //copy the value of next node to the value of deleting node\\n        node->next = p->next;           //copy the address of next-to-next node to the next of deleting node\\n        delete p;                       //delete the next node\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1484786,
                "title": "easy-problem",
                "content": "If you want to read more about LeetCode Notes,you can follow my Blog [iamyqhp.com](http://iamyqhp.com/)\\n# 237. Delete Node in a Linked List\\n\\nThis is a very easy problem.We can draw a picture to understand it.\\n\\n![](https://assets.leetcode.com/users/images/157daca0-0287-48b4-9107-28355855212c_1632556194.4572675.png)\\n\\n\\n**Solution**\\n\\n```java\\n  public void deleteNode(ListNode node) {\\n    //copy the next node value\\n    node.val = node.next.val;\\n    //delete the next node\\n    node.next = node.next.next;\\n  }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\n  public void deleteNode(ListNode node) {\\n    //copy the next node value\\n    node.val = node.next.val;\\n    //delete the next node\\n    node.next = node.next.next;\\n  }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1399648,
                "title": "c-very-very-easy-solution-in-2-line",
                "content": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val=node->next->val;  //node value is equal to node next val\\n        node->next=node->next->next; //now point next to next\\n        \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val=node->next->val;  //node value is equal to node next val\\n        node->next=node->next->next; //now point next to next\\n        \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1289393,
                "title": "easy-o-1-solution-with-explanation",
                "content": "**Please Upvote if you Liked the Post**\\n\\n```\\n/* The only trick here is to make a pointer point next to node to be deleted  \\n(call that pointer to be temp)and copy its value to\\nthe given node and now change the link from this node(given node) to temp.next , by this way we \\nremoved the node to be deleted.*/\\n\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        ListNode temp = node.next;\\n        \\n        node.val = temp.val;\\n        node.next = temp.next;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n/* The only trick here is to make a pointer point next to node to be deleted  \\n(call that pointer to be temp)and copy its value to\\nthe given node and now change the link from this node(given node) to temp.next , by this way we \\nremoved the node to be deleted.*/\\n\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        ListNode temp = node.next;\\n        \\n        node.val = temp.val;\\n        node.next = temp.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1123350,
                "title": "single-line-code-in-c",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    void deleteNode(ListNode* node) \\n    {\\n        *node=(*(node->next));\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    void deleteNode(ListNode* node) \\n    {\\n        *node=(*(node->next));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1097986,
                "title": "kotlin-simple",
                "content": "```\\n    fun deleteNode(node: ListNode?) {\\n        node!!.`val` = node.next.`val`\\n        node!!.next = node.next.next\\n    }\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\n    fun deleteNode(node: ListNode?) {\\n        node!!.`val` = node.next.`val`\\n        node!!.next = node.next.next\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1087547,
                "title": "delete-node-without-head-pointer-easy-c-c-solution-with-steps",
                "content": "1. Take a temporary pointer i.e. temp.\\n2. Store the address of the next node to the given node in the temp i.e. ListNode *temp = node->next.\\n3. Copy the data (val) of the next node to the given node into the data (val)  field of the given node i.e. node->val = temp->val OR node->val = node->next->val.\\n4. Now we have to delete the next node to the given node, hence change the next field of the given node to the next to next node i.e  node->next = temp->next OR node->next = node->next->next.\\n5. Make next field of the node to be deleted as NULL i.e temp->next = NULL (To disconnect the link).\\n6. Delete that node i.e delete temp.\\n\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        ListNode *temp = node->next;\\n        node->val = temp->val;\\n\\t\\t//node->val = node->next->val;\\n        node->next = temp->next;\\n\\t\\t//node->next = node->next->next;\\n        temp->next = NULL;\\n        \\n        delete temp;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        ListNode *temp = node->next;\\n        node->val = temp->val;\\n\\t\\t//node->val = node->next->val;\\n        node->next = temp->next;\\n\\t\\t//node->next = node->next->next;\\n        temp->next = NULL;\\n        \\n        delete temp;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1004800,
                "title": "python-easy-cool-solution-o-1-time-o-1-space",
                "content": "\\tclass Solution:\\n\\t\\tdef deleteNode(self, node):\\n\\t\\t\\tnode.val = node.next.val\\n\\t\\t\\tnode.next = node.next.next",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef deleteNode(self, node):\\n\\t\\t\\tnode.val = node.next.val\\n\\t\\t\\tnode.next = node.next.next",
                "codeTag": "Java"
            },
            {
                "id": 964012,
                "title": "go-one-liner",
                "content": "\\n```\\nfunc deleteNode(node *ListNode) {\\n    *node = *node.Next\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc deleteNode(node *ListNode) {\\n    *node = *node.Next\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 962428,
                "title": "c-o-1-solution",
                "content": "# Approach\\nIt\\'s difficult to delete the given node under given conditions. So instead of deleting the node, we assign the value of current node to its next node, then delete the next node.\\n\\n```\\npublic class Solution {\\n    public void DeleteNode(ListNode node) {\\n        \\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```\\n\\n# Complexity\\n* Time complexity: O(1)\\n* Space complexity: O(1)",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public void DeleteNode(ListNode node) {\\n        \\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 665839,
                "title": "c-o-1-with-no-memory-leak",
                "content": "Copy the value of node next to target node to the target node.\\nAnd delete the next node.\\n\\nNote: Often the intension behind asking these questions is to see how you handle the memory. [applies only to c++]\\n```\\nvoid deleteNode( ListNode* node ) {\\n\\tListNode *tmp = node->next;\\n\\tnode->val = tmp->val;\\n\\tnode->next = tmp->next;\\n\\tdelete tmp;\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\nvoid deleteNode( ListNode* node ) {\\n\\tListNode *tmp = node->next;\\n\\tnode->val = tmp->val;\\n\\tnode->next = tmp->next;\\n\\tdelete tmp;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 544339,
                "title": "c-solution",
                "content": "Runtime: 4 ms, faster than 95.39% of C online submissions for Delete Node in a Linked List.\\nMemory Usage: 6 MB, less than 100.00% of C online submissions for Delete Node in a Linked List.\\n```\\nvoid deleteNode(struct ListNode* node) \\n{\\n    struct ListNode *temp,*q=NULL;\\n    temp=node;\\n    while(temp->next!=NULL)\\n    {\\n        q=temp;\\n        temp->val=temp->next->val;\\n        temp=temp->next;\\n    }\\n    q->next=NULL;\\n    free(temp);   \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvoid deleteNode(struct ListNode* node) \\n{\\n    struct ListNode *temp,*q=NULL;\\n    temp=node;\\n    while(temp->next!=NULL)\\n    {\\n        q=temp;\\n        temp->val=temp->next->val;\\n        temp=temp->next;\\n    }\\n    q->next=NULL;\\n    free(temp);   \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 381260,
                "title": "easy-c-solution-2-lines",
                "content": "Runtime: 8 ms, faster than 98.89% of C++ online submissions for Delete Node in a Linked List.\\nMemory Usage: 9.2 MB, less than 92.31% of C++ online submissions for Delete Node in a Linked List.\\n\\n```\\nvoid deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "Runtime: 8 ms, faster than 98.89% of C++ online submissions for Delete Node in a Linked List.\\nMemory Usage: 9.2 MB, less than 92.31% of C++ online submissions for Delete Node in a Linked List.\\n\\n```\\nvoid deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 65505,
                "title": "java-solution",
                "content": "```\\npublic void deleteNode(ListNode node) {\\n        if(node == null) {\\n            return;\\n        }\\n        if(node.next == null) {\\n            node = null;\\n            return;\\n        }\\n        \\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }",
                "solutionTags": [],
                "code": "```\\npublic void deleteNode(ListNode node) {\\n        if(node == null) {\\n            return;\\n        }\\n        if(node.next == null) {\\n            node = null;\\n            return;\\n        }\\n        \\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4004985,
                "title": "as-easy-as-erasing-with-eraser-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        while(node) {\\n            node->val = node->next->val;\\n            if(node->next != NULL && node->next->next == NULL) node->next = NULL;\\n            node = node->next;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        while(node) {\\n            node->val = node->next->val;\\n            if(node->next != NULL && node->next->next == NULL) node->next = NULL;\\n            node = node->next;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3484671,
                "title": "100-java-solution-easy-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n-----------100%--------\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\nListNode temp =new ListNode();\\n        while(node.next !=null)        {\\n            node.val = node.next.val;\\n             temp = node;\\n            node= node.next;\\n        }\\n\\n        temp.next = null;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\nListNode temp =new ListNode();\\n        while(node.next !=null)        {\\n            node.val = node.next.val;\\n             temp = node;\\n            node= node.next;\\n        }\\n\\n        temp.next = null;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3358604,
                "title": "delete-node-in-ll",
                "content": "\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n     node.val=node.next.val;\\n     node.next=node.next.next;\\n      \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n     node.val=node.next.val;\\n     node.next=node.next.next;\\n      \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3204311,
                "title": "two-line-code-c",
                "content": "```\\nvoid deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List"
                ],
                "code": "```\\nvoid deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3052213,
                "title": "c-solution-in-just-2-lines",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs its given in question we just have to remove it from th list not from the memory. So we do it only that\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nselect the next node and put its values(data and next) in current node,\\nthis will nonnect the current node to the 2nd next node of list\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nvoid deleteNode(struct ListNode* node) {\\n    node->val=node->next->val;\\n    node->next=node->next->next;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nvoid deleteNode(struct ListNode* node) {\\n    node->val=node->next->val;\\n    node->next=node->next->next;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2699951,
                "title": "c-one-line-solution-pointers-clean-code",
                "content": "Play with the pointers and it will become a very easy problem.\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2697280,
                "title": "python-c-java-javascript-faster-than-100-simple-short-solution-2-line-solution",
                "content": "***Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome*.**\\n___________________\\n_________________\\n***Q237. Delete Node in a Linked List***\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **Python  Code** :\\n```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\n\\u2705 **Java Code** :\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```\\n\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **C++  Code** :\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        ListNode *t=node->next;\\n        *node=*(node->next);\\n        delete t;\\n    }\\n};\\n```\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\n\\u2705 **JavaScript  Code** :\\n```\\nvar deleteNode = function(node) {\\n    node.val=node.next.val;\\n    node.next=node.next.next;\\n};\\n```\\n____________________________________________________________________________________________________________________\\n____________________________________________________________________________________________________________________\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        ListNode *t=node->next;\\n        *node=*(node->next);\\n        delete t;\\n    }\\n};\\n```\n```\\nvar deleteNode = function(node) {\\n    node.val=node.next.val;\\n    node.next=node.next.next;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696866,
                "title": "2-line-solution-in-c",
                "content": "```\\nclass Solution {\\npublic:\\n\\tvoid deleteNode(ListNode* node) {\\n\\t\\tnode->val=node->next->val;\\n\\t\\tnode->next=node->next->next;\\n\\t}\\n};\\n```\\nInstead of Deleting that Node Just assign Next node value to that node and Skip the next node",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\tvoid deleteNode(ListNode* node) {\\n\\t\\tnode->val=node->next->val;\\n\\t\\tnode->next=node->next->next;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696852,
                "title": "python-easy-solution-in-5-lines",
                "content": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val=node.next.val\\n        if node.next.next:\\n            node.next=node.next.next\\n        else:\\n            node.next=None\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val=node.next.val\\n        if node.next.next:\\n            node.next=node.next.next\\n        else:\\n            node.next=None\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696849,
                "title": "0ms-100-faster-java-solution",
                "content": "Upvote if it helped :)\\n\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n          ListNode nextNode = node.next;\\n\\n        node.val = nextNode.val;\\n\\n        node.next = nextNode.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n          ListNode nextNode = node.next;\\n\\n        node.val = nextNode.val;\\n\\n        node.next = nextNode.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2658492,
                "title": "my-2-line-easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        node -> val = node -> next -> val;\\n        node -> next = node -> next -> next;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        node -> val = node -> next -> val;\\n        node -> next = node -> next -> next;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2585650,
                "title": "100-best-solution-explained-for-interview-purpose",
                "content": "\\u2714\\uFE0F 100% Best Solution Explained For Interview Purpose\\n\\nPLEASE UPVOTE !!! if you think it is benificial\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        if(node==NULL)delete node;\\n        else\\n        {\\n            swap(node->val,node->next->val);\\n            ListNode*temp=node->next;\\n            node->next=temp->next;\\n            delete temp;\\n        }\\n    }\\n};\\n```\\nHope you like the solution",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        if(node==NULL)delete node;\\n        else\\n        {\\n            swap(node->val,node->next->val);\\n            ListNode*temp=node->next;\\n            node->next=temp->next;\\n            delete temp;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2096080,
                "title": "delete-node-without-head-pointer-easiest-approach-with-explanation",
                "content": "See our task is to delete the given node and generally the head pointer is given and we perform deletion.**But what to do when the head pointer isn\\'t provided?** In that case you just need to store the next node somewhere and update the value of the node to be deleted by the next node and then connect the node to be deleted and next -> next.\\n```\\nclass Solution\\n{\\n    public:\\n        void deleteNode(ListNode *node)\\n        {\\n            ListNode *temp = node->next;\\n            node->val = temp->val;\\n            node->next = temp->next;\\n        }\\n};\\n```\\n\\nDo upvote the solution if you liked it.",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "```\\nclass Solution\\n{\\n    public:\\n        void deleteNode(ListNode *node)\\n        {\\n            ListNode *temp = node->next;\\n            node->val = temp->val;\\n            node->next = temp->next;\\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2035766,
                "title": "2-lines-swift-solution",
                "content": "```\\nclass Solution {\\n    func deleteNode(_ node: ListNode?) {\\n        node?.val = node?.next?.val ?? 0\\n        node?.next = node?.next?.next   \\n    }\\n}",
                "solutionTags": [
                    "Swift"
                ],
                "code": "class Solution {\\n    func deleteNode(_ node: ListNode?) {\\n        node?.val = node?.next?.val ?? 0\\n        node?.next = node?.next?.next   \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2024807,
                "title": "python-simple-o-1-solution",
                "content": "```\\n\\'\\'\\'\\nWe are given only the node. the head is not given.\\nSo instead of deleting the given node delete the next node of change the value of\\nthe given node with the next node\\'s value. \\nBut this approach only change the value of the given node not link with previous node.\\n\\'\\'\\'\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        node.val = node.next.val\\n        node.next = node.next.next\\n\\n# Time: O(1)\\n# Space: O(1)\\n        \\n```\\n\\n**https://github.com/SamirPaul1/DSAlgo**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\n\\'\\'\\'\\nWe are given only the node. the head is not given.\\nSo instead of deleting the given node delete the next node of change the value of\\nthe given node with the next node\\'s value. \\nBut this approach only change the value of the given node not link with previous node.\\n\\'\\'\\'\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        node.val = node.next.val\\n        node.next = node.next.next\\n\\n# Time: O(1)\\n# Space: O(1)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2021562,
                "title": "very-easy-and-simple-cpp-solution",
                "content": "```\\nvoid deleteNode(ListNode* node) {\\n        ListNode* temp = node->next;\\n        node->val = temp->val;\\n        node->next = temp->next;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nvoid deleteNode(ListNode* node) {\\n        ListNode* temp = node->next;\\n        node->val = temp->val;\\n        node->next = temp->next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1973572,
                "title": "python-two-line-code",
                "content": "Upvote if it was usefull for you \\uD83D\\uDE42\\n\\n```\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n\\t\\tnode.val = node.next.val\\n\\t\\tnode.next = node.next.next",
                "solutionTags": [
                    "Python"
                ],
                "code": "Upvote if it was usefull for you \\uD83D\\uDE42\\n\\n```\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n\\t\\tnode.val = node.next.val\\n\\t\\tnode.next = node.next.next",
                "codeTag": "Java"
            },
            {
                "id": 1614830,
                "title": "c-very-very-easy-solution-faster-than-98",
                "content": "Please upvote, if you like... Happy Coding :-)\\n```\\n\\nvoid deleteNode(ListNode* node) {\\n        \\n        ListNode* temp = node->next;\\n        node->val = temp->val;\\n        node->next = temp->next;\\n    \\n        delete temp;\\n    }\\n```\\n\\n**Explanation:**\\n\\nSince we have the access to the node to be deleted and don\\'t have the access to head node of the list as per the problem description.\\nSo we are doing small trick here to delete the given node.\\n\\n***Example***: Try to delete 2 from below list.\\n1->2->3->4->NULL.\\n\\nLets consider the node\\'s address start from 100 like this **1(100)->2(101)->3(102)->4(103)->NULL**.\\n\\n```\\n//Here we are storing the address of the next node of 2 (to be deleted) to temporary variable (that is node 3).\\nListNode* temp = node->next; // temp will have node at address 102.\\n```\\n\\n```\\n//Then storing the value from the next node to current node.\\n//Now the list will look like \"1(100)->3(101)->3(102)->4(103)->NULL\"\\nnode->val = temp->val;\\n```\\n\\n```\\n// Now linking the 4th node\\'s address to the second node\\'s next pointer and ignoring the third node(\"3(102)\").\\n// Now the list will look like \"1(100)->3(101)->4(103)->NULL\"\\nnode->next = temp->next;\\n```\\n\\n```\\n// Finaly deleting the third node (\"3(102)\") wich is initially stored in the temp variable.\\ndelete temp;\\n```\\n\\nIf you have any suggesion or query, feel free to drop a comment...",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\n\\nvoid deleteNode(ListNode* node) {\\n        \\n        ListNode* temp = node->next;\\n        node->val = temp->val;\\n        node->next = temp->next;\\n    \\n        delete temp;\\n    }\\n```\n```\\n//Here we are storing the address of the next node of 2 (to be deleted) to temporary variable (that is node 3).\\nListNode* temp = node->next; // temp will have node at address 102.\\n```\n```\\n//Then storing the value from the next node to current node.\\n//Now the list will look like \"1(100)->3(101)->3(102)->4(103)->NULL\"\\nnode->val = temp->val;\\n```\n```\\n// Now linking the 4th node\\'s address to the second node\\'s next pointer and ignoring the third node(\"3(102)\").\\n// Now the list will look like \"1(100)->3(101)->4(103)->NULL\"\\nnode->next = temp->next;\\n```\n```\\n// Finaly deleting the third node (\"3(102)\") wich is initially stored in the temp variable.\\ndelete temp;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1613525,
                "title": "100-fastest-solution-in-java",
                "content": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        ListNode prev = null;\\n        while(node.next != null){\\n            node.val = node.next.val;\\n            prev = node;\\n            node = node.next;\\n        }\\n        prev.next = null;\\n    }\\n}\\n```\\nComment the better way or more concise solution..",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        ListNode prev = null;\\n        while(node.next != null){\\n            node.val = node.next.val;\\n            prev = node;\\n            node = node.next;\\n        }\\n        prev.next = null;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1565800,
                "title": "python-o-1-simple-two-line-solution",
                "content": "O(1)\\n```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\\nI hope that you\\'ve found the solution useful.\\nIn that case, please do upvote and encourage me to on my quest to document all leetcode problems\\uD83D\\uDE03",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1357493,
                "title": "delete-given-node-o-1-explained",
                "content": "```\\n/*\\nRuntime: 0 ms, faster than 100.00% of Java online submissions for Delete Node in a Linked List.\\nMemory Usage: 38.4 MB, less than 49.67% of Java online submissions for Delete Node in a Linked List.\\n\\nGiven 4 -> 5 -> 1-> 9\\nNode to delete = 5\\n\\nstep 1 :  4 -> 1 -> 1-> 9\\nstep 2 :  4 -> 1 -> 9\\n\\nstep 1 :  4 -> 1 -> 1 -> 9\\nwe delete this------^\\n*/\\nclass Solution {\\n    public void deleteNode(ListNode node) \\n    {\\n       node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\n/*\\nRuntime: 0 ms, faster than 100.00% of Java online submissions for Delete Node in a Linked List.\\nMemory Usage: 38.4 MB, less than 49.67% of Java online submissions for Delete Node in a Linked List.\\n\\nGiven 4 -> 5 -> 1-> 9\\nNode to delete = 5\\n\\nstep 1 :  4 -> 1 -> 1-> 9\\nstep 2 :  4 -> 1 -> 9\\n\\nstep 1 :  4 -> 1 -> 1 -> 9\\nwe delete this------^\\n*/\\nclass Solution {\\n    public void deleteNode(ListNode node) \\n    {\\n       node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1255341,
                "title": "c-solution-in-2-lines",
                "content": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 923143,
                "title": "easy-python-4-lines-solution-o-1",
                "content": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        node.val = node.next.val\\n        to_be_del = node.next\\n        node.next = node.next.next\\n        del(to_be_del)\\n        \\n```\\nFor more such questions: https://github.com/vanigupta20024/Programming-Challenges",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        node.val = node.next.val\\n        to_be_del = node.next\\n        node.next = node.next.next\\n        del(to_be_del)\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 808328,
                "title": "c-solution",
                "content": "```\\nvoid deleteNode(struct ListNode* node) \\n{\\n    node->val = node->next->val;\\n    struct ListNode* temp = node->next;\\n    node->next = node->next->next;\\n    free(temp);\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvoid deleteNode(struct ListNode* node) \\n{\\n    node->val = node->next->val;\\n    struct ListNode* temp = node->next;\\n    node->next = node->next->next;\\n    free(temp);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 786156,
                "title": "simplest-js-solution",
                "content": "```\\nvar deleteNode = function(node) {\\n    Object.assign(node, node.next);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar deleteNode = function(node) {\\n    Object.assign(node, node.next);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 678293,
                "title": "one-solution-c-struct-pointer-you-should-know",
                "content": "```\\n*(node)=*(node->next)\\n```\\nThe val and pointer of node->next replace node\\'s.",
                "solutionTags": [],
                "code": "```\\n*(node)=*(node->next)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 654837,
                "title": "listnode-class-implementation-for-java",
                "content": "Sharing a class that I found useful while coding.\\n\\n1. `equals` and `hashCode` are useful to run comparisons from unit tests (e.g. `assertEquals(head1,head2)`)\\n2. `ListNode.createList(1,2,3,4)` will create a list for you given a list of numbers\\n3. `head.filter(x -> x.val == 5)` will return the `node` with the given value or `null` (in case of node not found) \\n\\n**Usage examples**\\n\\n```\\n    @Test\\n    public void filter() {\\n        ListNode list = createList(1, 2, 3);\\n        assertEquals(2, list.filter(x -> x.val == 2).val);\\n    }\\n\\n    @Test\\n    public void notFoundFilter() {\\n        ListNode list = createList(1, 2, 3);\\n        assertNull( list.filter(x -> x.val == 4));\\n    }\\n\\n    @Test\\n    public void test1() {\\n        ListNode actual = createList(4, 5, 1, 9);\\n        ListNode expected = createList(4, 1, 9);\\n        new DeleteNodeInALinkedList().deleteNode(actual.filter(x -> x.val == 5));\\n        assertEquals(expected, actual);\\n    }\\n\\n```\\n**Implementation**\\n```\\npublic class ListNode {\\n    int val;\\n    ListNode next;\\n\\n    ListNode(int x) {\\n        val = x;\\n    }\\n\\n    public static ListNode createList(int... values) {\\n        ListNode head = new ListNode(values[0]);\\n        ListNode prev = head;\\n        for (int i = 1; i < values.length; i++) {\\n            prev.next = new ListNode(values[i]);\\n            prev = prev.next;\\n        }\\n        return head;\\n    }\\n\\n    public ListNode filter(Predicate<ListNode> f) {\\n\\n        ListNode node = this;\\n        while (node != null && !f.test(node)) {\\n            node = node.next;\\n        }\\n        return node;\\n    }\\n\\n    @Override\\n    public String toString() {\\n\\n        return val + \"->\" + next;\\n    }\\n\\n    @Override\\n    public boolean equals(Object o) {\\n        if (this == o) return true;\\n        if (o == null || getClass() != o.getClass()) return false;\\n        ListNode listNode = (ListNode) o;\\n        return val == listNode.val &&\\n                Objects.equals(next, listNode.next);\\n    }\\n\\n    @Override\\n    public int hashCode() {\\n        return Objects.hash(val, next);\\n    }\\n}\\n```\\n\\n",
                "solutionTags": [],
                "code": "```\\n    @Test\\n    public void filter() {\\n        ListNode list = createList(1, 2, 3);\\n        assertEquals(2, list.filter(x -> x.val == 2).val);\\n    }\\n\\n    @Test\\n    public void notFoundFilter() {\\n        ListNode list = createList(1, 2, 3);\\n        assertNull( list.filter(x -> x.val == 4));\\n    }\\n\\n    @Test\\n    public void test1() {\\n        ListNode actual = createList(4, 5, 1, 9);\\n        ListNode expected = createList(4, 1, 9);\\n        new DeleteNodeInALinkedList().deleteNode(actual.filter(x -> x.val == 5));\\n        assertEquals(expected, actual);\\n    }\\n\\n```\n```\\npublic class ListNode {\\n    int val;\\n    ListNode next;\\n\\n    ListNode(int x) {\\n        val = x;\\n    }\\n\\n    public static ListNode createList(int... values) {\\n        ListNode head = new ListNode(values[0]);\\n        ListNode prev = head;\\n        for (int i = 1; i < values.length; i++) {\\n            prev.next = new ListNode(values[i]);\\n            prev = prev.next;\\n        }\\n        return head;\\n    }\\n\\n    public ListNode filter(Predicate<ListNode> f) {\\n\\n        ListNode node = this;\\n        while (node != null && !f.test(node)) {\\n            node = node.next;\\n        }\\n        return node;\\n    }\\n\\n    @Override\\n    public String toString() {\\n\\n        return val + \"->\" + next;\\n    }\\n\\n    @Override\\n    public boolean equals(Object o) {\\n        if (this == o) return true;\\n        if (o == null || getClass() != o.getClass()) return false;\\n        ListNode listNode = (ListNode) o;\\n        return val == listNode.val &&\\n                Objects.equals(next, listNode.next);\\n    }\\n\\n    @Override\\n    public int hashCode() {\\n        return Objects.hash(val, next);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 596086,
                "title": "swift",
                "content": "```\\nclass Solution {\\n    func deleteNode(_ node: ListNode?) {\\n        guard let nextNode = node?.next else { return }\\n            \\n        node?.val = nextNode.val\\n        node?.next = nextNode.next\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func deleteNode(_ node: ListNode?) {\\n        guard let nextNode = node?.next else { return }\\n            \\n        node?.val = nextNode.val\\n        node?.next = nextNode.next\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 487679,
                "title": "java-solution-to-delete-the-node-without-head-pointer",
                "content": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;          // copy the next node\\'s value into the current node\\n        node.next=node.next.next;       // connect the current node to the next of next node\\n        \\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;          // copy the next node\\'s value into the current node\\n        node.next=node.next.next;       // connect the current node to the next of next node\\n        \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 351974,
                "title": "node-actually-deleted",
                "content": "```\\nvar deleteNode = function(node) {\\n    if (!node.next) return;\\n    \\n    // If we reach here, we have at least 2 nodes\\n    // We stop on the 2nd to last node\\n    while (node.next.next) {\\n        node.val = node.next.val;\\n        node = node.next;\\n    }\\n    // Get value of last node and delete last node\\n    node.val = node.next.val\\n    node.next = null;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar deleteNode = function(node) {\\n    if (!node.next) return;\\n    \\n    // If we reach here, we have at least 2 nodes\\n    // We stop on the 2nd to last node\\n    while (node.next.next) {\\n        node.val = node.next.val;\\n        node = node.next;\\n    }\\n    // Get value of last node and delete last node\\n    node.val = node.next.val\\n    node.next = null;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 147118,
                "title": "javascript-simple-solution",
                "content": "```\\nvar deleteNode = function(node) {\\n  node.val = node.next.val;\\n  node.next = node.next.next;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar deleteNode = function(node) {\\n  node.val = node.next.val;\\n  node.next = node.next.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 65619,
                "title": "ac-java-solution",
                "content": "    public void deleteNode(ListNode node) {\\n      if (node == null) return;\\n      node.val = node.next.val;\\n      node.next = node.next.next;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "    public void deleteNode(ListNode node) {\\n      if (node == null) return;\\n      node.val = node.next.val;\\n      node.next = node.next.next;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 4057957,
                "title": "easy-solution-for-better-understanding",
                "content": "# **Please Upvote\\uD83D\\uDC4D**\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n      \\n        if(node==NULL || node->next==NULL){\\n            //it will not delete if linkedlist is empty or it is last node\\n            return;\\n        }\\n        ListNode *nextNode=node->next;\\n        node->val=nextNode->val;\\n        node->next=nextNode->next;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n      \\n        if(node==NULL || node->next==NULL){\\n            //it will not delete if linkedlist is empty or it is last node\\n            return;\\n        }\\n        ListNode *nextNode=node->next;\\n        node->val=nextNode->val;\\n        node->next=nextNode->next;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3484669,
                "title": "100-java-solution-easy-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n-----------100%--------\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\nListNode temp =new ListNode();\\n        while(node.next !=null)        {\\n            node.val = node.next.val;\\n             temp = node;\\n            node= node.next;\\n        }\\n\\n        temp.next = null;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\nListNode temp =new ListNode();\\n        while(node.next !=null)        {\\n            node.val = node.next.val;\\n             temp = node;\\n            node= node.next;\\n        }\\n\\n        temp.next = null;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3435707,
                "title": "2-lines-simple-code-full-explanation-begginers-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nCopy the node->next->value to node and then link node->next to node->next->next.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLet us take an example-:\\n**4 5 1 9**   *Node to be deleted(node)= 5*\\n- First we will copy the data of node->next to node  i.e **node->val=node->next->val**\\nAfter this the LL will look like\\n**4 1 1 9**\\n- Then we will connect **node->next = node->next->next**\\nAfter this the LL will look like\\n**4 1 9**\\n\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3268116,
                "title": "o-1-best-explanation-beginner-friendly",
                "content": "# Intuition\\nLet us understand with a example:\\nhead= 4,5,1,9\\nnode=5\\n1.First of all we will give the data of the node\\'s next element(i.e 1) to the  node(i.e 5).\\nAt this stage our list will look like:\\n4,5,5,9\\n2.Now we will change node\\'s next to node\\'s next\\'s next(i.e node ke next ka next) \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n O(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val; \\n        node->next=node->next->next;\\n        \\n    }\\n};\\nDO Upvote if you got the solution\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val; \\n        node->next=node->next->next;\\n        \\n    }\\n};\\nDO Upvote if you got the solution\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3222267,
                "title": "solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3211165,
                "title": "easy-python-solution-99-40-run-time",
                "content": "![image.png](https://assets.leetcode.com/users/images/6c9ca834-2a30-44ad-ba2a-952f54371d3e_1676915275.049323.png)\\n\\n# Code\\n```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        while node:\\n            val=node.next.val\\n            node.val=val\\n            node.next=node.next.next\\n            break\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List",
                    "Doubly-Linked List"
                ],
                "code": "```\\n# Definition for singly-linked list.\\n# class ListNode(object):\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        while node:\\n            val=node.next.val\\n            node.val=val\\n            node.next=node.next.next\\n            break\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3173433,
                "title": "java-with-visualization-faster-than-100",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n![WhatsApp Image 2023-02-12 at 1.56.21 AM.jpeg](https://assets.leetcode.com/users/images/1fdc87ff-4cdb-4572-a923-93dfe5bffbc2_1676147393.3905125.jpeg)\\n\\n# Complexity\\n- Time complexity: `O(1)`\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: `O(1)`\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val= node.next.val;\\n        node.next= node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Linked List",
                    "Brainteaser"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val= node.next.val;\\n        node.next= node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3140461,
                "title": "simple-js-solution-o-1-time-o-1-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nDeleting a node in a singly linked list is to manipulate the values and references of the nodes in the list, instead of physically removing the node from memory.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Check if the input node is null, if so return as there is nothing to delete.\\n- If the node is not null, update its value to be the value of its next node and its next reference to be the next reference of its next node.\\n- This effectively removes the next node and connects the current node to the node after the next node, thus deleting the current node.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this function is O(1)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this function is O(1)\\n# Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} node\\n * @return {void} Do not return anything, modify node in-place instead.\\n */\\nvar deleteNode = function(node) {\\n    \\n    if(node ===  null) return;\\n    \\n       else{\\n           if(node.next!==null){\\n                node.val = node.next.val;\\n                node.next =  node.next.next;\\n           }\\n       }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * function ListNode(val) {\\n *     this.val = val;\\n *     this.next = null;\\n * }\\n */\\n/**\\n * @param {ListNode} node\\n * @return {void} Do not return anything, modify node in-place instead.\\n */\\nvar deleteNode = function(node) {\\n    \\n    if(node ===  null) return;\\n    \\n       else{\\n           if(node.next!==null){\\n                node.val = node.next.val;\\n                node.next =  node.next.next;\\n           }\\n       }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2741677,
                "title": "c-3-different-approach",
                "content": "This was my initial thought, however after submitting, I realised that my runtime was longer, after which the approach 2 code below immediately entered my head.\\n* Approach 1\\n```\\n#define fast ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        fast\\n        while(node->next->next){\\n            node->val = node->next->val;\\n            node = node->next;\\n        }\\n        node->val = node->next->val;\\n        node->next = NULL;\\n    }\\n};\\n```\\n<br>\\n\\nThis is O(1) sol. \\n* Approach 2\\n```\\n#define fast ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        fast \\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};\\n```\\n<br>\\n\\nThis is O(1) sol. Only 1 line by making address of node and its next node same.\\n* Approach 3 \\n\\n```\\n#define fast ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        fast \\n        *node=*node->next;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List"
                ],
                "code": "```\\n#define fast ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        fast\\n        while(node->next->next){\\n            node->val = node->next->val;\\n            node = node->next;\\n        }\\n        node->val = node->next->val;\\n        node->next = NULL;\\n    }\\n};\\n```\n```\\n#define fast ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        fast \\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n    }\\n};\\n```\n```\\n#define fast ios_base::sync_with_stdio(0); cin.tie(0);cout.tie(0);\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        fast \\n        *node=*node->next;\\n    }\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2712604,
                "title": "c-easy-to-understand-don-t-be-that-person-that-leaks-memory-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        if(node->next == NULL){\\n            delete node;\\n        }\\n        swap(node->val,node->next->val);\\n        ListNode* temp = node->next;\\n        node->next=node->next->next;\\n        delete temp;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        if(node->next == NULL){\\n            delete node;\\n        }\\n        swap(node->val,node->next->val);\\n        ListNode* temp = node->next;\\n        node->next=node->next->next;\\n        delete temp;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2700053,
                "title": "js-simple-2-step-solution-o-1-javascript",
                "content": "```\\nvar deleteNode = function(node) {\\n    node.val = node.next.val;\\n    node.next = node.next.next;\\n};\\n```\\n\\n**please upvote**",
                "solutionTags": [
                    "JavaScript",
                    "Linked List"
                ],
                "code": "```\\nvar deleteNode = function(node) {\\n    node.val = node.next.val;\\n    node.next = node.next.next;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2699758,
                "title": "2-lines-of-code-o-1",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n      node->val = node->next->val;\\n      node->next = node->next->next;\\n    }\\n};\\n\\n```\\nI hope that you\\'ve found the solution useful.\\nIn that case, please do upvote. Happy Coding :)",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n      node->val = node->next->val;\\n      node->next = node->next->next;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2698943,
                "title": "java-2-lines-solution",
                "content": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2698077,
                "title": "runtime-0-ms-faster-than-100-00-of-java-online-submissions",
                "content": "\\n\\n\\n\\t\\t\\t\\t            class Solution {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpublic void deleteNode(ListNode node) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnode.val = node.next.val;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnode.next = node.next.next;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "class Solution {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpublic void deleteNode(ListNode node) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnode.val = node.next.val;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnode.next = node.next.next;\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2697307,
                "title": "2-line-c-python-solution-with-visualization",
                "content": "We set the value of the current node to that of the next node and connect this node to it\\'s following node, thus removing the next node.\\n![linkedListremoval_visualization.png](https://assets.leetcode.com/users/images/71d54f44-96cf-440e-8cf1-0545046bce7b_1665642524.3168318.png)\\n\\n*Please upvote to motivate me to write more solutions*\\n\\n# C++ Code\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n    }\\n};\\n```\\n\\n# Python code\\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "solutionTags": [
                    "C++",
                    "Python",
                    "Python3"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n    }\\n};\\n```\n```\\n# Definition for singly-linked list.\\n# class ListNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.next = None\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2697265,
                "title": "java-2-lines-code-easy-solution",
                "content": "IF YOU LIKE THE SOLUTION \\nMAKE SURE TO UPVOTE IT !\\n\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n\\t\\n        // just swap the data with the node.next node and delete the next node because we copied the data already\\n\\t\\t//We can delete next node safely.\\n        // it was given that node never be the tail of Linked List\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```\\n\\n\\t",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n\\t\\n        // just swap the data with the node.next node and delete the next node because we copied the data already\\n\\t\\t//We can delete next node safely.\\n        // it was given that node never be the tail of Linked List\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2697119,
                "title": "python3",
                "content": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val \\n        node.next = node.next.next\\n```",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val \\n        node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696650,
                "title": "c-faster-easy-to-understand",
                "content": "* ***Linked List***\\n\\n* ***Time Complexity :- O(1)***\\n\\n* ***Space Complexity :- O(1)***\\n\\n```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        // swap the value of node and node -> next\\n        \\n        swap(node -> val, node -> next -> val);\\n        \\n        // now point the node -> next to node -> next -> next\\n        \\n        node -> next = node -> next -> next;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List"
                ],
                "code": "```\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode(int x) : val(x), next(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        // swap the value of node and node -> next\\n        \\n        swap(node -> val, node -> next -> val);\\n        \\n        // now point the node -> next to node -> next -> next\\n        \\n        node -> next = node -> next -> next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2696413,
                "title": "c-o-1-2-lines-of-code",
                "content": "```\\nvoid deleteNode(ListNode* node) {\\n\\tnode -> val = node -> next -> val;\\n\\tnode -> next = node -> next -> next;\\n}\\n```",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "```\\nvoid deleteNode(ListNode* node) {\\n\\tnode -> val = node -> next -> val;\\n\\tnode -> next = node -> next -> next;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2696209,
                "title": "daily-leetcoding-challenge-october-day-13",
                "content": "This problem is the Daily LeetCoding Challenge for October, Day 13.\n\nFeel free to share anything related to this problem here!\n\nYou can ask questions, discuss what you've learned from this problem, or show off how many days of streak you've made!\n\n---\n\nIf you'd like to share a detailed solution to the problem, please create a new post in the discuss section and provide\n- **Detailed Explanations**: Describe the algorithm you used to solve this problem. Include any insights you used to solve this problem.\n- **Images** that help explain the algorithm.\n- **Language and Code** you used to pass the problem.\n- **Time and Space complexity analysis**.\n\n---\n\n  **📌 Do you want to learn the problem thoroughly?**\n  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/delete-node-in-a-linked-list/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\n  <details>\n  <summary> Spoiler Alert! We'll explain this 0 approach in the official solution</summary>\n\n  \n</details>\n\n\n\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n\n\n---\n\n<br>\n\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />\n</a>\n</p>\n\n<br>",
                "solutionTags": [],
                "code": "  Read [**⭐  LeetCode Official Solution⭐**](https://leetcode.com/problems/delete-node-in-a-linked-list/solution) to learn the 3 approaches to the problem with detailed explanations to the algorithms, codes, and complexity analysis.\nIf you're new to Daily LeetCoding Challenge, [**check out this post**](https://leetcode.com/discuss/general-discussion/655704/)!\n<p align=\"center\">\n<a href=\"https://leetcode.com/subscribe/?ref=ex_dc\" target=\"_blank\">\n  <img src=\"https://assets.leetcode.com/static_assets/marketing/daily_leetcoding_banner.png\" width=\"560px\" />",
                "codeTag": "Unknown"
            },
            {
                "id": 2489424,
                "title": "easy-solution-c",
                "content": "// simple easy // and very fast solution \\n\\nApproach : instead of deleting the node given we delete next node and copy its data to the node given \\n\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        // here we are not given the head we have only given a node \\n        // we dont have previous we only have is next \\n        \\n        node->val = node->next->val ; // we copy the data of next node \\n        \\n        // and point the next node to its next \\n        \\n        node->next = node->next->next ; \\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List"
                ],
                "code": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        \\n        // here we are not given the head we have only given a node \\n        // we dont have previous we only have is next \\n        \\n        node->val = node->next->val ; // we copy the data of next node \\n        \\n        // and point the next node to its next \\n        \\n        node->next = node->next->next ; \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2457174,
                "title": "easy-python-code-o-1",
                "content": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```\\n\\n**please upvote, if this helped**",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2358670,
                "title": "c-easiest-o-1-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       ListNode* next=node->next;\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n        delete next; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       ListNode* next=node->next;\\n        node->val=node->next->val;\\n        node->next=node->next->next;\\n        delete next; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2153669,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2133762,
                "title": "easy-2-line-code-100-0ms",
                "content": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2079913,
                "title": "2-line-easy-python-solution",
                "content": "```\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def deleteNode(self, node):\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2058015,
                "title": "javascript-solution",
                "content": "WE DON\\'T DELETE THE NODE, WE ACTUALLY REPLACE THE VALUE OF THE NODE WITH THE NEXT NODE VALUE AND THEN SKIP THE NODE\\n```\\nvar deleteNode = function(node) {\\n    node.val = node.next.val\\n    node.next = node.next.next\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar deleteNode = function(node) {\\n    node.val = node.next.val\\n    node.next = node.next.next\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2057234,
                "title": "two-lines-of-code-in-java-0ms-100-faster",
                "content": "You really don\\'t need a loop or anything for this type of question. All you have to do is to copy the value of the node next to node to be deleted. After that you can skip over the next node entirely by just change the ```next``` value to one after the current next\\'s value\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```next```\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1836168,
                "title": "easy-solution-in-c",
                "content": "```**Easier solution  faster than 95.04%\\nI am changing value of next node with this current node then and then deleting the next node**\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nvoid deleteNode(struct ListNode* node) {\\n    struct ListNode *prev=node;\\n    node=node->next;\\n    prev->val=node->val;\\n    prev->next=node->next;\\n    free (node);\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```**Easier solution  faster than 95.04%\\nI am changing value of next node with this current node then and then deleting the next node**\\n/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     struct ListNode *next;\\n * };\\n */\\nvoid deleteNode(struct ListNode* node) {\\n    struct ListNode *prev=node;\\n    node=node->next;\\n    prev->val=node->val;\\n    prev->next=node->next;\\n    free (node);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1810763,
                "title": "delete-node-in-a-linked-list-in-c-2-lines-sol",
                "content": "class Solution {\\npublic:\\n\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n        \\n        \\n    }\\n};",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "class Solution {\\npublic:\\n\\n    void deleteNode(ListNode* node) {\\n        node->val = node->next->val;\\n        node->next = node->next->next;\\n        \\n        \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1791901,
                "title": "2-lines-solution-in-java-100-faster-solution",
                "content": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1789664,
                "title": "my-2-lines-of-java-code-0ms-time-o-1-time-complexity-easy-to-understand",
                "content": "Runtime: 0 ms, faster than 100.00% of Java online submissions for Delete Node in a Linked List.\\nMemory Usage: 43.5 MB, less than 27.80% of Java online submissions for Delete Node in a Linked List.\\n\\n```\\npublic void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n}\\n```\\n\\n## Explanation:\\n\\nExample Testcase: 1 -> 2 -> 3 -> 4 -> null\\n\\nIf you want to delete the node that is given, in this example we need to delete \"2\" from the list, so we can easily store the 3\\'s value in 2.\\n\\n* if we use, 2.data = 2.next.data; // means we are storing 3\\'s data in 2\\n* and if we use, 2.next = 2.next.next // means we are pointing to the 3\\'s next through 2\\'s next\\n\\nIn this process we can store 3\\'s data and next in the 2\\'s place and we can simply vanish 2 from the list. As because 1 is pointing to the 2, so we replaced the 2 with 3, so now 1 is directly pointing to the 3 instead of 2.\\n\\nSo simple and easy to understand. Have fun! :)",
                "solutionTags": [],
                "code": "```\\npublic void deleteNode(ListNode node) {\\n        node.val=node.next.val;\\n        node.next=node.next.next;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1760390,
                "title": "easy-1-line-c-solution-with-pointer-explanation",
                "content": "A pointer is a variable that holds memory address of another variable. \\nHere, node is a pointer of type ListNode.\\nA pointer is dereferenced with * operator to access the memory location. \\nHere, \\\\*node refers to the memory location that node is pointing to.\\n\\n Thus, this code overwrites the memory location of node with the memory location of node->next;\\n\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        *node=*node->next; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Linked List"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n        *node=*node->next; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1737237,
                "title": "java-2line-0ms-explained",
                "content": "**Go through code Dry Run it once and you will get it for sure.**`\\nWe know that the refrence to the node is not given to us.\\nSo the only thing we can do is Assign the value of next next node to  \\nthe node to be deleted and then point the node to next of the next node to be deleted.\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        // 1.Assigned node the next node value.\\n        node.val=node.next.val;\\n\\t\\t// 2.Break connection .\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        // 1.Assigned node the next node value.\\n        node.val=node.next.val;\\n\\t\\t// 2.Break connection .\\n        node.next=node.next.next;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1675070,
                "title": "java-simple-solution-with-explanation",
                "content": "**\\'\\'\\'\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n\\t    // Copy the value from the next node into the current one\\n\\t\\t// Then, skip to the next node\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }\\n}**",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "class Solution {\\n    public void deleteNode(ListNode node) {\\n\\t    // Copy the value from the next node into the current one\\n\\t\\t// Then, skip to the next node\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1664129,
                "title": "minimal-complication-two-line-python-solution",
                "content": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "solutionTags": [
                    "Python",
                    "Linked List"
                ],
                "code": "```\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n        node.val = node.next.val\\n        node.next = node.next.next\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1639823,
                "title": "java-100-fast-solution-basic-operation",
                "content": "\"\"\"\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node == null) return;\\n        node.val=node.next.val;\\n        node.next = node.next.next;\\n    }\\n    \\n}\\n\"\"\"",
                "solutionTags": [
                    "Java",
                    "Linked List"
                ],
                "code": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node == null) return;\\n        node.val=node.next.val;\\n        node.next = node.next.next;\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1631597,
                "title": "java-easy-solution",
                "content": "\"\\'\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next=node.next.next;\\n        \\n        \\n    }\\n}\\n\"\\'",
                "solutionTags": [
                    "Linked List"
                ],
                "code": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next=node.next.next;\\n        \\n        \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1609824,
                "title": "very-easy-java-solution-o-1-with-explanation",
                "content": "The trick is, you copy from next node to current node and then delete the next node from the chain.\\n\\n```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1560899,
                "title": "c-3-lines-of-code-wtith-explanation-o-1",
                "content": "**This can be easily understood by analysing the pointers**\\n\\n- Linked list basic node structure:  **{value, address of next node}**\\n- So, linked list is something similar to this\\n\\t- **(head_value, addr_2)---->(val_2, addr_3)---->(val_3, addr_4)---->(val_4, addr_5)---->NULL**\\n\\t        \\n- Let\\'s say Node to be deleted is **2nd node** pointed by a pointer *node = (val_2, addr_3)\\n- Now, we take another pointer to point to next node\\n``` \\nListNode* nextNode = node->next;\\n```\\n- Then we copy the next node to current node\\n```\\n// here, we are deferecing pointers \\n// so we are copying the next node content to current node i.e. (node_value, address_of_next_node)\\n//now current node has nextNode\\'s value and it has address of (node->next->next) node\\n// so we updated current node next pointer, by pointing it to (node->next->next) node\\n*node = *nextNode; \\n\\n// after copying node it looks something like this\\n// - (head_value, addr_2)---->(val_3, addr_4)        (val_3, addr_4)---->(val_4, addr_5)---->NULL\\n//                                     |___________________________________________^\\n\\n\\n// second node has node_value of 3rd node\\n// also second node has address of 4th node so, 2nd node next pointer point to 4th node\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\n```\\n- and finally delete the  node pointed by **temp pointer**  because we have already copy it\\'s content to current node\\n\\n#### Here\\'s the final code. Time and Space: O(1)\\n#### Upvote if it has helped you. Thanks:)\\n```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       ListNode* nextNode = node->next;\\n       *node = *nextNode;\\n       delete nextNode;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "``` \\nListNode* nextNode = node->next;\\n```\n```\\n// here, we are deferecing pointers \\n// so we are copying the next node content to current node i.e. (node_value, address_of_next_node)\\n//now current node has nextNode\\'s value and it has address of (node->next->next) node\\n// so we updated current node next pointer, by pointing it to (node->next->next) node\\n*node = *nextNode; \\n\\n// after copying node it looks something like this\\n// - (head_value, addr_2)---->(val_3, addr_4)        (val_3, addr_4)---->(val_4, addr_5)---->NULL\\n//                                     |___________________________________________^\\n\\n\\n// second node has node_value of 3rd node\\n// also second node has address of 4th node so, 2nd node next pointer point to 4th node\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1399790,
                "title": "c-2-lines-easy-o-1-time",
                "content": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* &node) { \\n        node->val= node->next->val;  //setting value of node to next node\\'s value\\n        node->next= node->next->next;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    void deleteNode(ListNode* &node) { \\n        node->val= node->next->val;  //setting value of node to next node\\'s value\\n        node->next= node->next->next;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1565043,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565706,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565837,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565325,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1564538,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565866,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1566353,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565970,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1566347,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1643550,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565043,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565706,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565837,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565325,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1564538,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565866,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1566353,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1565970,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1566347,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1643550,
                "content": [
                    {
                        "username": "siva9144",
                        "content": "The API contains only one parameter, but don\\'t we require at least two parameters, one being the list itself, one being the node to delete/or the node with the value to delete? Can someone explain?"
                    },
                    {
                        "username": "d1v_",
                        "content": "I\\'ve explained all queries about this problem \\uD83D\\uDC49 [Click here](https://leetcode.com/problems/delete-node-in-a-linked-list/description/comments/1961065)"
                    },
                    {
                        "username": "timopheykor",
                        "content": "The node to delete is already part of the list. The question is phrased poorly, but that\\'s the challenge. The problem doesn\\'t check if a specific memory address was deleted - it just checks the values of the nodes. This information should have been much more clear. Using this information, you can \"delete\" the node using only the passed node parameter."
                    },
                    {
                        "username": "designAndCode",
                        "content": "This problem should be described as removing the value at that corresponding index in the linkedin list, \\nNOT delete the node, no one can delete the fucking node correctly without access to its predecessor."
                    },
                    {
                        "username": "d1v_",
                        "content": "you are correct that node can\\'t be deleted without access to its predecessor `But we can delete the next node`."
                    },
                    {
                        "username": "rajAbhinav",
                        "content": "[@bhanu_reddy007](/bhanu_reddy007) but we are not provided with head\\n"
                    },
                    {
                        "username": "bhanu_reddy007",
                        "content": "copy the the next node in to current node and delete the next node1"
                    },
                    {
                        "username": "mo10",
                        "content": "Since the node is guarentee not to be the tail, the following code works. Move the value and skip the next node.\\n\\n    public void deleteNode(ListNode node) {\\n\\n\\t\\tnode.val = node.next.val;\\n\\t\\tnode.next = node.next.next;\\n\\n\\t}"
                    },
                    {
                        "username": "harshvardhan1483",
                        "content": "wtf , you should be reported . You fucking destroyed a ques"
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "DONT POST SOLUTIONS HERE!"
                    },
                    {
                        "username": "nihil_johnson",
                        "content": "Give your brain to me :)"
                    },
                    {
                        "username": "AasheeshLikePanner",
                        "content": " W solution."
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "[@Fanie](/Fanie) read the posted date before speaking "
                    },
                    {
                        "username": "AlgoNoobie",
                        "content": "that post is from 2015,  just as you should analyze a problem before starting your solution, you can chill out before blaming someone.[@Bingo_o](/Bingo_o) "
                    },
                    {
                        "username": "Fanie",
                        "content": "No solutions here. "
                    },
                    {
                        "username": "leorts",
                        "content": "or *node = *(node->next)"
                    },
                    {
                        "username": "_akash_kukreti_73",
                        "content": "wtf bro no solutions dudee."
                    },
                    {
                        "username": "Bingo_o",
                        "content": "Why do you paste solution here?\\nYou have Solutions tab for this."
                    },
                    {
                        "username": "sidhT",
                        "content": "In the example, they are predicting two parameters and in the given method, only one parameter is added. Hope it is not intentional."
                    },
                    {
                        "username": "smfwuxiao",
                        "content": "This question is stupid and should be deleted intermediately."
                    },
                    {
                        "username": "d1v_",
                        "content": "Question is not stupid. It\\'s just a little bit tricky."
                    },
                    {
                        "username": "csgerber",
                        "content": "Not to mention that LC cant seem to consistently benchmark the correct answer and automatically assign two lines of code as the _only_ solution to the question...."
                    },
                    {
                        "username": "kingfighters",
                        "content": "[@godshiva](/godshiva) indeed"
                    },
                    {
                        "username": "godshiva",
                        "content": "Or at least marked as easy"
                    },
                    {
                        "username": "ieuphonos",
                        "content": "Judged from the info given, the function should take two paramters -- (ListNode head, int val). \\n\\nWith some revision this problem could still be of some use ;)"
                    },
                    {
                        "username": "sameerkali",
                        "content": "everyone is asking questions no one is answering."
                    },
                    {
                        "username": "leaping_tiger",
                        "content": "From the description it appears that you need to know the head of the Linked List in order to traverse it and then delete the node. But in reality you are given a node to delete and you just need to copy the value and pointer from the next node."
                    },
                    {
                        "username": "ahmad88me",
                        "content": "For the python code, it doesn\\'t show how the list will be passed. Passing only the node to be deleted without passing the node is strange. Something is missing.\\n"
                    },
                    {
                        "username": "yangdu",
                        "content": "Emmm.... I think, this operation needs 2 params: head of list,  and node to be removed.\\n\\n....\\n...\\n...\\nSome guys change  value and next of node....That is awesome,  they are really smart guys.\\n\\nBut teamleader may kill me.....hahaha  , so  stupid question."
                    },
                    {
                        "username": "sameerkali",
                        "content": "what happens next \\uD83D\\uDE02"
                    },
                    {
                        "username": "skyhaoshen",
                        "content": "How to become another person in the world? Two steps.\\nOne, change your appearance to whom you want to be.\\nTwo, kill that person."
                    },
                    {
                        "username": "2030019",
                        "content": "lmao"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "That is the key!"
                    }
                ]
            },
            {
                "id": 1566251,
                "content": [
                    {
                        "username": "nikita",
                        "content": "For \"Delete Node in a Linked List\", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/"
                    },
                    {
                        "username": "raju9525",
                        "content": "Are you mad baby? give same link of same question"
                    },
                    {
                        "username": "davidseek",
                        "content": "Hey guys, \\n\\nfor everyone having problem with this challenge,\\nI wrote here a detailed explanation on how to tackle it in Swift:\\n\\nhttps://medium.com/@davidseek/leetcode-237-delete-node-in-a-linked-list-8944138d1513"
                    },
                    {
                        "username": "wufengxuan1230",
                        "content": "![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372645.png)\\n![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372707.png)\\n\\n"
                    },
                    {
                        "username": "tanu-bluecode",
                        "content": "The funciton definition is not matching the input. Strange..!!"
                    },
                    {
                        "username": "cccbean",
                        "content": "I am kind new to Java. Can anyone answer my question ? Thanks!\\n\\nnode = node.next; \\n\\nWhy this doesn't work?"
                    },
                    {
                        "username": "m-d-f",
                        "content": "\\tvoid deleteNode(struct ListNode* node) {\\n\\t\\tnode->val = node->next->val;\\n\\t\\tnode->next = node->next->next;\\n\\t}"
                    },
                    {
                        "username": "danielwong2268",
                        "content": "How can you delete a node from a linked list, given only the node, when you do not have a variable pointing at the linked list from which you want to delete the node? Maybe I am missing something here.\\n\\nNote: I'm using Javascript."
                    },
                    {
                        "username": "nikhilvaibhav545",
                        "content": "I don\\'t know why this question has been accepted at the first place. Such a stupid question. *deleting node* is highly misleading when we are not doing the same.\\nRemove this question or atleast add proper description to the question."
                    },
                    {
                        "username": "littlefishes",
                        "content": "DELECT CURRENT NODE \\nwill be more intuitive"
                    },
                    {
                        "username": "Maor-Busk",
                        "content": "How am i suppose to write a function to magically remove a random number or node without knowing its index or value...somethings like \"RemoveKFromList\", and not just remove something....i can\\'t seem to understand the purpose here."
                    }
                ]
            },
            {
                "id": 1566947,
                "content": [
                    {
                        "username": "nikita",
                        "content": "For \"Delete Node in a Linked List\", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/"
                    },
                    {
                        "username": "raju9525",
                        "content": "Are you mad baby? give same link of same question"
                    },
                    {
                        "username": "davidseek",
                        "content": "Hey guys, \\n\\nfor everyone having problem with this challenge,\\nI wrote here a detailed explanation on how to tackle it in Swift:\\n\\nhttps://medium.com/@davidseek/leetcode-237-delete-node-in-a-linked-list-8944138d1513"
                    },
                    {
                        "username": "wufengxuan1230",
                        "content": "![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372645.png)\\n![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372707.png)\\n\\n"
                    },
                    {
                        "username": "tanu-bluecode",
                        "content": "The funciton definition is not matching the input. Strange..!!"
                    },
                    {
                        "username": "cccbean",
                        "content": "I am kind new to Java. Can anyone answer my question ? Thanks!\\n\\nnode = node.next; \\n\\nWhy this doesn't work?"
                    },
                    {
                        "username": "m-d-f",
                        "content": "\\tvoid deleteNode(struct ListNode* node) {\\n\\t\\tnode->val = node->next->val;\\n\\t\\tnode->next = node->next->next;\\n\\t}"
                    },
                    {
                        "username": "danielwong2268",
                        "content": "How can you delete a node from a linked list, given only the node, when you do not have a variable pointing at the linked list from which you want to delete the node? Maybe I am missing something here.\\n\\nNote: I'm using Javascript."
                    },
                    {
                        "username": "nikhilvaibhav545",
                        "content": "I don\\'t know why this question has been accepted at the first place. Such a stupid question. *deleting node* is highly misleading when we are not doing the same.\\nRemove this question or atleast add proper description to the question."
                    },
                    {
                        "username": "littlefishes",
                        "content": "DELECT CURRENT NODE \\nwill be more intuitive"
                    },
                    {
                        "username": "Maor-Busk",
                        "content": "How am i suppose to write a function to magically remove a random number or node without knowing its index or value...somethings like \"RemoveKFromList\", and not just remove something....i can\\'t seem to understand the purpose here."
                    }
                ]
            },
            {
                "id": 1567423,
                "content": [
                    {
                        "username": "nikita",
                        "content": "For \"Delete Node in a Linked List\", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/"
                    },
                    {
                        "username": "raju9525",
                        "content": "Are you mad baby? give same link of same question"
                    },
                    {
                        "username": "davidseek",
                        "content": "Hey guys, \\n\\nfor everyone having problem with this challenge,\\nI wrote here a detailed explanation on how to tackle it in Swift:\\n\\nhttps://medium.com/@davidseek/leetcode-237-delete-node-in-a-linked-list-8944138d1513"
                    },
                    {
                        "username": "wufengxuan1230",
                        "content": "![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372645.png)\\n![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372707.png)\\n\\n"
                    },
                    {
                        "username": "tanu-bluecode",
                        "content": "The funciton definition is not matching the input. Strange..!!"
                    },
                    {
                        "username": "cccbean",
                        "content": "I am kind new to Java. Can anyone answer my question ? Thanks!\\n\\nnode = node.next; \\n\\nWhy this doesn't work?"
                    },
                    {
                        "username": "m-d-f",
                        "content": "\\tvoid deleteNode(struct ListNode* node) {\\n\\t\\tnode->val = node->next->val;\\n\\t\\tnode->next = node->next->next;\\n\\t}"
                    },
                    {
                        "username": "danielwong2268",
                        "content": "How can you delete a node from a linked list, given only the node, when you do not have a variable pointing at the linked list from which you want to delete the node? Maybe I am missing something here.\\n\\nNote: I'm using Javascript."
                    },
                    {
                        "username": "nikhilvaibhav545",
                        "content": "I don\\'t know why this question has been accepted at the first place. Such a stupid question. *deleting node* is highly misleading when we are not doing the same.\\nRemove this question or atleast add proper description to the question."
                    },
                    {
                        "username": "littlefishes",
                        "content": "DELECT CURRENT NODE \\nwill be more intuitive"
                    },
                    {
                        "username": "Maor-Busk",
                        "content": "How am i suppose to write a function to magically remove a random number or node without knowing its index or value...somethings like \"RemoveKFromList\", and not just remove something....i can\\'t seem to understand the purpose here."
                    }
                ]
            },
            {
                "id": 1566826,
                "content": [
                    {
                        "username": "nikita",
                        "content": "For \"Delete Node in a Linked List\", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/"
                    },
                    {
                        "username": "raju9525",
                        "content": "Are you mad baby? give same link of same question"
                    },
                    {
                        "username": "davidseek",
                        "content": "Hey guys, \\n\\nfor everyone having problem with this challenge,\\nI wrote here a detailed explanation on how to tackle it in Swift:\\n\\nhttps://medium.com/@davidseek/leetcode-237-delete-node-in-a-linked-list-8944138d1513"
                    },
                    {
                        "username": "wufengxuan1230",
                        "content": "![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372645.png)\\n![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372707.png)\\n\\n"
                    },
                    {
                        "username": "tanu-bluecode",
                        "content": "The funciton definition is not matching the input. Strange..!!"
                    },
                    {
                        "username": "cccbean",
                        "content": "I am kind new to Java. Can anyone answer my question ? Thanks!\\n\\nnode = node.next; \\n\\nWhy this doesn't work?"
                    },
                    {
                        "username": "m-d-f",
                        "content": "\\tvoid deleteNode(struct ListNode* node) {\\n\\t\\tnode->val = node->next->val;\\n\\t\\tnode->next = node->next->next;\\n\\t}"
                    },
                    {
                        "username": "danielwong2268",
                        "content": "How can you delete a node from a linked list, given only the node, when you do not have a variable pointing at the linked list from which you want to delete the node? Maybe I am missing something here.\\n\\nNote: I'm using Javascript."
                    },
                    {
                        "username": "nikhilvaibhav545",
                        "content": "I don\\'t know why this question has been accepted at the first place. Such a stupid question. *deleting node* is highly misleading when we are not doing the same.\\nRemove this question or atleast add proper description to the question."
                    },
                    {
                        "username": "littlefishes",
                        "content": "DELECT CURRENT NODE \\nwill be more intuitive"
                    },
                    {
                        "username": "Maor-Busk",
                        "content": "How am i suppose to write a function to magically remove a random number or node without knowing its index or value...somethings like \"RemoveKFromList\", and not just remove something....i can\\'t seem to understand the purpose here."
                    }
                ]
            },
            {
                "id": 1567235,
                "content": [
                    {
                        "username": "nikita",
                        "content": "For \"Delete Node in a Linked List\", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/"
                    },
                    {
                        "username": "raju9525",
                        "content": "Are you mad baby? give same link of same question"
                    },
                    {
                        "username": "davidseek",
                        "content": "Hey guys, \\n\\nfor everyone having problem with this challenge,\\nI wrote here a detailed explanation on how to tackle it in Swift:\\n\\nhttps://medium.com/@davidseek/leetcode-237-delete-node-in-a-linked-list-8944138d1513"
                    },
                    {
                        "username": "wufengxuan1230",
                        "content": "![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372645.png)\\n![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372707.png)\\n\\n"
                    },
                    {
                        "username": "tanu-bluecode",
                        "content": "The funciton definition is not matching the input. Strange..!!"
                    },
                    {
                        "username": "cccbean",
                        "content": "I am kind new to Java. Can anyone answer my question ? Thanks!\\n\\nnode = node.next; \\n\\nWhy this doesn't work?"
                    },
                    {
                        "username": "m-d-f",
                        "content": "\\tvoid deleteNode(struct ListNode* node) {\\n\\t\\tnode->val = node->next->val;\\n\\t\\tnode->next = node->next->next;\\n\\t}"
                    },
                    {
                        "username": "danielwong2268",
                        "content": "How can you delete a node from a linked list, given only the node, when you do not have a variable pointing at the linked list from which you want to delete the node? Maybe I am missing something here.\\n\\nNote: I'm using Javascript."
                    },
                    {
                        "username": "nikhilvaibhav545",
                        "content": "I don\\'t know why this question has been accepted at the first place. Such a stupid question. *deleting node* is highly misleading when we are not doing the same.\\nRemove this question or atleast add proper description to the question."
                    },
                    {
                        "username": "littlefishes",
                        "content": "DELECT CURRENT NODE \\nwill be more intuitive"
                    },
                    {
                        "username": "Maor-Busk",
                        "content": "How am i suppose to write a function to magically remove a random number or node without knowing its index or value...somethings like \"RemoveKFromList\", and not just remove something....i can\\'t seem to understand the purpose here."
                    }
                ]
            },
            {
                "id": 1565632,
                "content": [
                    {
                        "username": "nikita",
                        "content": "For \"Delete Node in a Linked List\", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/"
                    },
                    {
                        "username": "raju9525",
                        "content": "Are you mad baby? give same link of same question"
                    },
                    {
                        "username": "davidseek",
                        "content": "Hey guys, \\n\\nfor everyone having problem with this challenge,\\nI wrote here a detailed explanation on how to tackle it in Swift:\\n\\nhttps://medium.com/@davidseek/leetcode-237-delete-node-in-a-linked-list-8944138d1513"
                    },
                    {
                        "username": "wufengxuan1230",
                        "content": "![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372645.png)\\n![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372707.png)\\n\\n"
                    },
                    {
                        "username": "tanu-bluecode",
                        "content": "The funciton definition is not matching the input. Strange..!!"
                    },
                    {
                        "username": "cccbean",
                        "content": "I am kind new to Java. Can anyone answer my question ? Thanks!\\n\\nnode = node.next; \\n\\nWhy this doesn't work?"
                    },
                    {
                        "username": "m-d-f",
                        "content": "\\tvoid deleteNode(struct ListNode* node) {\\n\\t\\tnode->val = node->next->val;\\n\\t\\tnode->next = node->next->next;\\n\\t}"
                    },
                    {
                        "username": "danielwong2268",
                        "content": "How can you delete a node from a linked list, given only the node, when you do not have a variable pointing at the linked list from which you want to delete the node? Maybe I am missing something here.\\n\\nNote: I'm using Javascript."
                    },
                    {
                        "username": "nikhilvaibhav545",
                        "content": "I don\\'t know why this question has been accepted at the first place. Such a stupid question. *deleting node* is highly misleading when we are not doing the same.\\nRemove this question or atleast add proper description to the question."
                    },
                    {
                        "username": "littlefishes",
                        "content": "DELECT CURRENT NODE \\nwill be more intuitive"
                    },
                    {
                        "username": "Maor-Busk",
                        "content": "How am i suppose to write a function to magically remove a random number or node without knowing its index or value...somethings like \"RemoveKFromList\", and not just remove something....i can\\'t seem to understand the purpose here."
                    }
                ]
            },
            {
                "id": 1565667,
                "content": [
                    {
                        "username": "nikita",
                        "content": "For \"Delete Node in a Linked List\", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/"
                    },
                    {
                        "username": "raju9525",
                        "content": "Are you mad baby? give same link of same question"
                    },
                    {
                        "username": "davidseek",
                        "content": "Hey guys, \\n\\nfor everyone having problem with this challenge,\\nI wrote here a detailed explanation on how to tackle it in Swift:\\n\\nhttps://medium.com/@davidseek/leetcode-237-delete-node-in-a-linked-list-8944138d1513"
                    },
                    {
                        "username": "wufengxuan1230",
                        "content": "![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372645.png)\\n![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372707.png)\\n\\n"
                    },
                    {
                        "username": "tanu-bluecode",
                        "content": "The funciton definition is not matching the input. Strange..!!"
                    },
                    {
                        "username": "cccbean",
                        "content": "I am kind new to Java. Can anyone answer my question ? Thanks!\\n\\nnode = node.next; \\n\\nWhy this doesn't work?"
                    },
                    {
                        "username": "m-d-f",
                        "content": "\\tvoid deleteNode(struct ListNode* node) {\\n\\t\\tnode->val = node->next->val;\\n\\t\\tnode->next = node->next->next;\\n\\t}"
                    },
                    {
                        "username": "danielwong2268",
                        "content": "How can you delete a node from a linked list, given only the node, when you do not have a variable pointing at the linked list from which you want to delete the node? Maybe I am missing something here.\\n\\nNote: I'm using Javascript."
                    },
                    {
                        "username": "nikhilvaibhav545",
                        "content": "I don\\'t know why this question has been accepted at the first place. Such a stupid question. *deleting node* is highly misleading when we are not doing the same.\\nRemove this question or atleast add proper description to the question."
                    },
                    {
                        "username": "littlefishes",
                        "content": "DELECT CURRENT NODE \\nwill be more intuitive"
                    },
                    {
                        "username": "Maor-Busk",
                        "content": "How am i suppose to write a function to magically remove a random number or node without knowing its index or value...somethings like \"RemoveKFromList\", and not just remove something....i can\\'t seem to understand the purpose here."
                    }
                ]
            },
            {
                "id": 1567697,
                "content": [
                    {
                        "username": "nikita",
                        "content": "For \"Delete Node in a Linked List\", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/"
                    },
                    {
                        "username": "raju9525",
                        "content": "Are you mad baby? give same link of same question"
                    },
                    {
                        "username": "davidseek",
                        "content": "Hey guys, \\n\\nfor everyone having problem with this challenge,\\nI wrote here a detailed explanation on how to tackle it in Swift:\\n\\nhttps://medium.com/@davidseek/leetcode-237-delete-node-in-a-linked-list-8944138d1513"
                    },
                    {
                        "username": "wufengxuan1230",
                        "content": "![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372645.png)\\n![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372707.png)\\n\\n"
                    },
                    {
                        "username": "tanu-bluecode",
                        "content": "The funciton definition is not matching the input. Strange..!!"
                    },
                    {
                        "username": "cccbean",
                        "content": "I am kind new to Java. Can anyone answer my question ? Thanks!\\n\\nnode = node.next; \\n\\nWhy this doesn't work?"
                    },
                    {
                        "username": "m-d-f",
                        "content": "\\tvoid deleteNode(struct ListNode* node) {\\n\\t\\tnode->val = node->next->val;\\n\\t\\tnode->next = node->next->next;\\n\\t}"
                    },
                    {
                        "username": "danielwong2268",
                        "content": "How can you delete a node from a linked list, given only the node, when you do not have a variable pointing at the linked list from which you want to delete the node? Maybe I am missing something here.\\n\\nNote: I'm using Javascript."
                    },
                    {
                        "username": "nikhilvaibhav545",
                        "content": "I don\\'t know why this question has been accepted at the first place. Such a stupid question. *deleting node* is highly misleading when we are not doing the same.\\nRemove this question or atleast add proper description to the question."
                    },
                    {
                        "username": "littlefishes",
                        "content": "DELECT CURRENT NODE \\nwill be more intuitive"
                    },
                    {
                        "username": "Maor-Busk",
                        "content": "How am i suppose to write a function to magically remove a random number or node without knowing its index or value...somethings like \"RemoveKFromList\", and not just remove something....i can\\'t seem to understand the purpose here."
                    }
                ]
            },
            {
                "id": 1570130,
                "content": [
                    {
                        "username": "nikita",
                        "content": "For \"Delete Node in a Linked List\", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/"
                    },
                    {
                        "username": "raju9525",
                        "content": "Are you mad baby? give same link of same question"
                    },
                    {
                        "username": "davidseek",
                        "content": "Hey guys, \\n\\nfor everyone having problem with this challenge,\\nI wrote here a detailed explanation on how to tackle it in Swift:\\n\\nhttps://medium.com/@davidseek/leetcode-237-delete-node-in-a-linked-list-8944138d1513"
                    },
                    {
                        "username": "wufengxuan1230",
                        "content": "![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372645.png)\\n![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372707.png)\\n\\n"
                    },
                    {
                        "username": "tanu-bluecode",
                        "content": "The funciton definition is not matching the input. Strange..!!"
                    },
                    {
                        "username": "cccbean",
                        "content": "I am kind new to Java. Can anyone answer my question ? Thanks!\\n\\nnode = node.next; \\n\\nWhy this doesn't work?"
                    },
                    {
                        "username": "m-d-f",
                        "content": "\\tvoid deleteNode(struct ListNode* node) {\\n\\t\\tnode->val = node->next->val;\\n\\t\\tnode->next = node->next->next;\\n\\t}"
                    },
                    {
                        "username": "danielwong2268",
                        "content": "How can you delete a node from a linked list, given only the node, when you do not have a variable pointing at the linked list from which you want to delete the node? Maybe I am missing something here.\\n\\nNote: I'm using Javascript."
                    },
                    {
                        "username": "nikhilvaibhav545",
                        "content": "I don\\'t know why this question has been accepted at the first place. Such a stupid question. *deleting node* is highly misleading when we are not doing the same.\\nRemove this question or atleast add proper description to the question."
                    },
                    {
                        "username": "littlefishes",
                        "content": "DELECT CURRENT NODE \\nwill be more intuitive"
                    },
                    {
                        "username": "Maor-Busk",
                        "content": "How am i suppose to write a function to magically remove a random number or node without knowing its index or value...somethings like \"RemoveKFromList\", and not just remove something....i can\\'t seem to understand the purpose here."
                    }
                ]
            },
            {
                "id": 1568264,
                "content": [
                    {
                        "username": "nikita",
                        "content": "For \"Delete Node in a Linked List\", the soln is expecting only the node to be deleted and not the original list. Without the head of the list how are we expected to traverse the singly linked list to get to the previous node to delete in place? Please see https://leetcode.com/problems/delete-node-in-a-linked-list/"
                    },
                    {
                        "username": "raju9525",
                        "content": "Are you mad baby? give same link of same question"
                    },
                    {
                        "username": "davidseek",
                        "content": "Hey guys, \\n\\nfor everyone having problem with this challenge,\\nI wrote here a detailed explanation on how to tackle it in Swift:\\n\\nhttps://medium.com/@davidseek/leetcode-237-delete-node-in-a-linked-list-8944138d1513"
                    },
                    {
                        "username": "wufengxuan1230",
                        "content": "![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372645.png)\\n![image](https://assets.leetcode.com/users/wufengxuan1230/image_1574372707.png)\\n\\n"
                    },
                    {
                        "username": "tanu-bluecode",
                        "content": "The funciton definition is not matching the input. Strange..!!"
                    },
                    {
                        "username": "cccbean",
                        "content": "I am kind new to Java. Can anyone answer my question ? Thanks!\\n\\nnode = node.next; \\n\\nWhy this doesn't work?"
                    },
                    {
                        "username": "m-d-f",
                        "content": "\\tvoid deleteNode(struct ListNode* node) {\\n\\t\\tnode->val = node->next->val;\\n\\t\\tnode->next = node->next->next;\\n\\t}"
                    },
                    {
                        "username": "danielwong2268",
                        "content": "How can you delete a node from a linked list, given only the node, when you do not have a variable pointing at the linked list from which you want to delete the node? Maybe I am missing something here.\\n\\nNote: I'm using Javascript."
                    },
                    {
                        "username": "nikhilvaibhav545",
                        "content": "I don\\'t know why this question has been accepted at the first place. Such a stupid question. *deleting node* is highly misleading when we are not doing the same.\\nRemove this question or atleast add proper description to the question."
                    },
                    {
                        "username": "littlefishes",
                        "content": "DELECT CURRENT NODE \\nwill be more intuitive"
                    },
                    {
                        "username": "Maor-Busk",
                        "content": "How am i suppose to write a function to magically remove a random number or node without knowing its index or value...somethings like \"RemoveKFromList\", and not just remove something....i can\\'t seem to understand the purpose here."
                    }
                ]
            },
            {
                "id": 1567308,
                "content": [
                    {
                        "username": "ampilogov",
                        "content": "Add Swift please for this problem"
                    },
                    {
                        "username": "lovchanel",
                        "content": "This might sound so dumb, but wouldn't node=node.next work?"
                    },
                    {
                        "username": "d1v_",
                        "content": "  `EVERYTHING IS CORRECT IN THIS PROBLEM.`\n`Let me help you if you're finding any difficulty in understanding or solving the problem.`\nMost of the people are saying that `Problem statement and function definition with only one parameter are wrong`. \nJust read the problem statement properly and then you'll get to know that Problem statement and function definition with only one parameter are totally correct. `THERE  IS NO REQUIREMENT OF 2 PARAMETERS`.\n\n`Explanation :`\nAccording to the problem statement, we've to remove the value of given node and decrease the number of nodes by one.\n\n`Note:` It is given that-\n\n`1-` Given node can't be the last node of the linked list.\n`2-` All the values before node should be in the same order.\nAll the values after node should be in the same order.\n`Steps:`\n`1-` In order to remove the value of given node, we'll repalce the value of given node with the value of next node.\n`2-` connect the given node with next to next node to decrease the number of nodes by one.\n\nOrder of values will be same after performing above steps."
                    },
                    {
                        "username": "mirandanathan",
                        "content": "90% Reading Comprehension, 10% Basic Python Gramma, 0% Algrethem! It is a wordy question. \\n\\n        if node.next: node.val, node.next = node.next.val, node.next.next"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "What does this problem description mean?\\nWhy no enough parameters in the function definition?\\n\\nShouldn\\'t it be \\n\\n`public void deleteNode(ListNode head, ListNode node){}`\\n\\n?"
                    },
                    {
                        "username": "LynxSumit",
                        "content": "if there would be head isn\\'t this would be an easy one ?\\n"
                    },
                    {
                        "username": "liaotl10",
                        "content": "\\u53EA\\u60F3\\u5410\\u4E2A\\u69FD\\u3002\\u672C\\u6765\\u8FD8\\u5728\\u627Ehead\\u3002\\u3002\\u3002\\u3002"
                    },
                    {
                        "username": "ymymrydzh",
                        "content": "\\u6709\\u6BDB\\u75C5\\u5427\\uFF0C\\u51FA\\u8FD9\\u79CD\\u9898\\uFF0C\\u6CA1\\u9898\\u76EE\\u4E86\\u53EF\\u4EE5\\u4E0D\\u51FA"
                    },
                    {
                        "username": "kumar14",
                        "content": "    *node= *node->next;              //just write it into given code"
                    },
                    {
                        "username": "roshan172",
                        "content": "Runtime: 8 ms, faster than 99.02% of C++ online submissions for Delete Node in a Linked List."
                    },
                    {
                        "username": "Rebv18",
                        "content": "terribly written question....you're asking me to create a memory leak. This question is like me saying, clean my car, but DON'T remove any of the dirt, but clean my car. \n\n\"Delete\" the node but don't remove it from heap memory and create a memory leak, but \"delete\" the node."
                    }
                ]
            },
            {
                "id": 1567234,
                "content": [
                    {
                        "username": "ampilogov",
                        "content": "Add Swift please for this problem"
                    },
                    {
                        "username": "lovchanel",
                        "content": "This might sound so dumb, but wouldn't node=node.next work?"
                    },
                    {
                        "username": "d1v_",
                        "content": "  `EVERYTHING IS CORRECT IN THIS PROBLEM.`\n`Let me help you if you're finding any difficulty in understanding or solving the problem.`\nMost of the people are saying that `Problem statement and function definition with only one parameter are wrong`. \nJust read the problem statement properly and then you'll get to know that Problem statement and function definition with only one parameter are totally correct. `THERE  IS NO REQUIREMENT OF 2 PARAMETERS`.\n\n`Explanation :`\nAccording to the problem statement, we've to remove the value of given node and decrease the number of nodes by one.\n\n`Note:` It is given that-\n\n`1-` Given node can't be the last node of the linked list.\n`2-` All the values before node should be in the same order.\nAll the values after node should be in the same order.\n`Steps:`\n`1-` In order to remove the value of given node, we'll repalce the value of given node with the value of next node.\n`2-` connect the given node with next to next node to decrease the number of nodes by one.\n\nOrder of values will be same after performing above steps."
                    },
                    {
                        "username": "mirandanathan",
                        "content": "90% Reading Comprehension, 10% Basic Python Gramma, 0% Algrethem! It is a wordy question. \\n\\n        if node.next: node.val, node.next = node.next.val, node.next.next"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "What does this problem description mean?\\nWhy no enough parameters in the function definition?\\n\\nShouldn\\'t it be \\n\\n`public void deleteNode(ListNode head, ListNode node){}`\\n\\n?"
                    },
                    {
                        "username": "LynxSumit",
                        "content": "if there would be head isn\\'t this would be an easy one ?\\n"
                    },
                    {
                        "username": "liaotl10",
                        "content": "\\u53EA\\u60F3\\u5410\\u4E2A\\u69FD\\u3002\\u672C\\u6765\\u8FD8\\u5728\\u627Ehead\\u3002\\u3002\\u3002\\u3002"
                    },
                    {
                        "username": "ymymrydzh",
                        "content": "\\u6709\\u6BDB\\u75C5\\u5427\\uFF0C\\u51FA\\u8FD9\\u79CD\\u9898\\uFF0C\\u6CA1\\u9898\\u76EE\\u4E86\\u53EF\\u4EE5\\u4E0D\\u51FA"
                    },
                    {
                        "username": "kumar14",
                        "content": "    *node= *node->next;              //just write it into given code"
                    },
                    {
                        "username": "roshan172",
                        "content": "Runtime: 8 ms, faster than 99.02% of C++ online submissions for Delete Node in a Linked List."
                    },
                    {
                        "username": "Rebv18",
                        "content": "terribly written question....you're asking me to create a memory leak. This question is like me saying, clean my car, but DON'T remove any of the dirt, but clean my car. \n\n\"Delete\" the node but don't remove it from heap memory and create a memory leak, but \"delete\" the node."
                    }
                ]
            },
            {
                "id": 1961065,
                "content": [
                    {
                        "username": "ampilogov",
                        "content": "Add Swift please for this problem"
                    },
                    {
                        "username": "lovchanel",
                        "content": "This might sound so dumb, but wouldn't node=node.next work?"
                    },
                    {
                        "username": "d1v_",
                        "content": "  `EVERYTHING IS CORRECT IN THIS PROBLEM.`\n`Let me help you if you're finding any difficulty in understanding or solving the problem.`\nMost of the people are saying that `Problem statement and function definition with only one parameter are wrong`. \nJust read the problem statement properly and then you'll get to know that Problem statement and function definition with only one parameter are totally correct. `THERE  IS NO REQUIREMENT OF 2 PARAMETERS`.\n\n`Explanation :`\nAccording to the problem statement, we've to remove the value of given node and decrease the number of nodes by one.\n\n`Note:` It is given that-\n\n`1-` Given node can't be the last node of the linked list.\n`2-` All the values before node should be in the same order.\nAll the values after node should be in the same order.\n`Steps:`\n`1-` In order to remove the value of given node, we'll repalce the value of given node with the value of next node.\n`2-` connect the given node with next to next node to decrease the number of nodes by one.\n\nOrder of values will be same after performing above steps."
                    },
                    {
                        "username": "mirandanathan",
                        "content": "90% Reading Comprehension, 10% Basic Python Gramma, 0% Algrethem! It is a wordy question. \\n\\n        if node.next: node.val, node.next = node.next.val, node.next.next"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "What does this problem description mean?\\nWhy no enough parameters in the function definition?\\n\\nShouldn\\'t it be \\n\\n`public void deleteNode(ListNode head, ListNode node){}`\\n\\n?"
                    },
                    {
                        "username": "LynxSumit",
                        "content": "if there would be head isn\\'t this would be an easy one ?\\n"
                    },
                    {
                        "username": "liaotl10",
                        "content": "\\u53EA\\u60F3\\u5410\\u4E2A\\u69FD\\u3002\\u672C\\u6765\\u8FD8\\u5728\\u627Ehead\\u3002\\u3002\\u3002\\u3002"
                    },
                    {
                        "username": "ymymrydzh",
                        "content": "\\u6709\\u6BDB\\u75C5\\u5427\\uFF0C\\u51FA\\u8FD9\\u79CD\\u9898\\uFF0C\\u6CA1\\u9898\\u76EE\\u4E86\\u53EF\\u4EE5\\u4E0D\\u51FA"
                    },
                    {
                        "username": "kumar14",
                        "content": "    *node= *node->next;              //just write it into given code"
                    },
                    {
                        "username": "roshan172",
                        "content": "Runtime: 8 ms, faster than 99.02% of C++ online submissions for Delete Node in a Linked List."
                    },
                    {
                        "username": "Rebv18",
                        "content": "terribly written question....you're asking me to create a memory leak. This question is like me saying, clean my car, but DON'T remove any of the dirt, but clean my car. \n\n\"Delete\" the node but don't remove it from heap memory and create a memory leak, but \"delete\" the node."
                    }
                ]
            },
            {
                "id": 1568339,
                "content": [
                    {
                        "username": "ampilogov",
                        "content": "Add Swift please for this problem"
                    },
                    {
                        "username": "lovchanel",
                        "content": "This might sound so dumb, but wouldn't node=node.next work?"
                    },
                    {
                        "username": "d1v_",
                        "content": "  `EVERYTHING IS CORRECT IN THIS PROBLEM.`\n`Let me help you if you're finding any difficulty in understanding or solving the problem.`\nMost of the people are saying that `Problem statement and function definition with only one parameter are wrong`. \nJust read the problem statement properly and then you'll get to know that Problem statement and function definition with only one parameter are totally correct. `THERE  IS NO REQUIREMENT OF 2 PARAMETERS`.\n\n`Explanation :`\nAccording to the problem statement, we've to remove the value of given node and decrease the number of nodes by one.\n\n`Note:` It is given that-\n\n`1-` Given node can't be the last node of the linked list.\n`2-` All the values before node should be in the same order.\nAll the values after node should be in the same order.\n`Steps:`\n`1-` In order to remove the value of given node, we'll repalce the value of given node with the value of next node.\n`2-` connect the given node with next to next node to decrease the number of nodes by one.\n\nOrder of values will be same after performing above steps."
                    },
                    {
                        "username": "mirandanathan",
                        "content": "90% Reading Comprehension, 10% Basic Python Gramma, 0% Algrethem! It is a wordy question. \\n\\n        if node.next: node.val, node.next = node.next.val, node.next.next"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "What does this problem description mean?\\nWhy no enough parameters in the function definition?\\n\\nShouldn\\'t it be \\n\\n`public void deleteNode(ListNode head, ListNode node){}`\\n\\n?"
                    },
                    {
                        "username": "LynxSumit",
                        "content": "if there would be head isn\\'t this would be an easy one ?\\n"
                    },
                    {
                        "username": "liaotl10",
                        "content": "\\u53EA\\u60F3\\u5410\\u4E2A\\u69FD\\u3002\\u672C\\u6765\\u8FD8\\u5728\\u627Ehead\\u3002\\u3002\\u3002\\u3002"
                    },
                    {
                        "username": "ymymrydzh",
                        "content": "\\u6709\\u6BDB\\u75C5\\u5427\\uFF0C\\u51FA\\u8FD9\\u79CD\\u9898\\uFF0C\\u6CA1\\u9898\\u76EE\\u4E86\\u53EF\\u4EE5\\u4E0D\\u51FA"
                    },
                    {
                        "username": "kumar14",
                        "content": "    *node= *node->next;              //just write it into given code"
                    },
                    {
                        "username": "roshan172",
                        "content": "Runtime: 8 ms, faster than 99.02% of C++ online submissions for Delete Node in a Linked List."
                    },
                    {
                        "username": "Rebv18",
                        "content": "terribly written question....you're asking me to create a memory leak. This question is like me saying, clean my car, but DON'T remove any of the dirt, but clean my car. \n\n\"Delete\" the node but don't remove it from heap memory and create a memory leak, but \"delete\" the node."
                    }
                ]
            },
            {
                "id": 1568254,
                "content": [
                    {
                        "username": "ampilogov",
                        "content": "Add Swift please for this problem"
                    },
                    {
                        "username": "lovchanel",
                        "content": "This might sound so dumb, but wouldn't node=node.next work?"
                    },
                    {
                        "username": "d1v_",
                        "content": "  `EVERYTHING IS CORRECT IN THIS PROBLEM.`\n`Let me help you if you're finding any difficulty in understanding or solving the problem.`\nMost of the people are saying that `Problem statement and function definition with only one parameter are wrong`. \nJust read the problem statement properly and then you'll get to know that Problem statement and function definition with only one parameter are totally correct. `THERE  IS NO REQUIREMENT OF 2 PARAMETERS`.\n\n`Explanation :`\nAccording to the problem statement, we've to remove the value of given node and decrease the number of nodes by one.\n\n`Note:` It is given that-\n\n`1-` Given node can't be the last node of the linked list.\n`2-` All the values before node should be in the same order.\nAll the values after node should be in the same order.\n`Steps:`\n`1-` In order to remove the value of given node, we'll repalce the value of given node with the value of next node.\n`2-` connect the given node with next to next node to decrease the number of nodes by one.\n\nOrder of values will be same after performing above steps."
                    },
                    {
                        "username": "mirandanathan",
                        "content": "90% Reading Comprehension, 10% Basic Python Gramma, 0% Algrethem! It is a wordy question. \\n\\n        if node.next: node.val, node.next = node.next.val, node.next.next"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "What does this problem description mean?\\nWhy no enough parameters in the function definition?\\n\\nShouldn\\'t it be \\n\\n`public void deleteNode(ListNode head, ListNode node){}`\\n\\n?"
                    },
                    {
                        "username": "LynxSumit",
                        "content": "if there would be head isn\\'t this would be an easy one ?\\n"
                    },
                    {
                        "username": "liaotl10",
                        "content": "\\u53EA\\u60F3\\u5410\\u4E2A\\u69FD\\u3002\\u672C\\u6765\\u8FD8\\u5728\\u627Ehead\\u3002\\u3002\\u3002\\u3002"
                    },
                    {
                        "username": "ymymrydzh",
                        "content": "\\u6709\\u6BDB\\u75C5\\u5427\\uFF0C\\u51FA\\u8FD9\\u79CD\\u9898\\uFF0C\\u6CA1\\u9898\\u76EE\\u4E86\\u53EF\\u4EE5\\u4E0D\\u51FA"
                    },
                    {
                        "username": "kumar14",
                        "content": "    *node= *node->next;              //just write it into given code"
                    },
                    {
                        "username": "roshan172",
                        "content": "Runtime: 8 ms, faster than 99.02% of C++ online submissions for Delete Node in a Linked List."
                    },
                    {
                        "username": "Rebv18",
                        "content": "terribly written question....you're asking me to create a memory leak. This question is like me saying, clean my car, but DON'T remove any of the dirt, but clean my car. \n\n\"Delete\" the node but don't remove it from heap memory and create a memory leak, but \"delete\" the node."
                    }
                ]
            },
            {
                "id": 1568205,
                "content": [
                    {
                        "username": "ampilogov",
                        "content": "Add Swift please for this problem"
                    },
                    {
                        "username": "lovchanel",
                        "content": "This might sound so dumb, but wouldn't node=node.next work?"
                    },
                    {
                        "username": "d1v_",
                        "content": "  `EVERYTHING IS CORRECT IN THIS PROBLEM.`\n`Let me help you if you're finding any difficulty in understanding or solving the problem.`\nMost of the people are saying that `Problem statement and function definition with only one parameter are wrong`. \nJust read the problem statement properly and then you'll get to know that Problem statement and function definition with only one parameter are totally correct. `THERE  IS NO REQUIREMENT OF 2 PARAMETERS`.\n\n`Explanation :`\nAccording to the problem statement, we've to remove the value of given node and decrease the number of nodes by one.\n\n`Note:` It is given that-\n\n`1-` Given node can't be the last node of the linked list.\n`2-` All the values before node should be in the same order.\nAll the values after node should be in the same order.\n`Steps:`\n`1-` In order to remove the value of given node, we'll repalce the value of given node with the value of next node.\n`2-` connect the given node with next to next node to decrease the number of nodes by one.\n\nOrder of values will be same after performing above steps."
                    },
                    {
                        "username": "mirandanathan",
                        "content": "90% Reading Comprehension, 10% Basic Python Gramma, 0% Algrethem! It is a wordy question. \\n\\n        if node.next: node.val, node.next = node.next.val, node.next.next"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "What does this problem description mean?\\nWhy no enough parameters in the function definition?\\n\\nShouldn\\'t it be \\n\\n`public void deleteNode(ListNode head, ListNode node){}`\\n\\n?"
                    },
                    {
                        "username": "LynxSumit",
                        "content": "if there would be head isn\\'t this would be an easy one ?\\n"
                    },
                    {
                        "username": "liaotl10",
                        "content": "\\u53EA\\u60F3\\u5410\\u4E2A\\u69FD\\u3002\\u672C\\u6765\\u8FD8\\u5728\\u627Ehead\\u3002\\u3002\\u3002\\u3002"
                    },
                    {
                        "username": "ymymrydzh",
                        "content": "\\u6709\\u6BDB\\u75C5\\u5427\\uFF0C\\u51FA\\u8FD9\\u79CD\\u9898\\uFF0C\\u6CA1\\u9898\\u76EE\\u4E86\\u53EF\\u4EE5\\u4E0D\\u51FA"
                    },
                    {
                        "username": "kumar14",
                        "content": "    *node= *node->next;              //just write it into given code"
                    },
                    {
                        "username": "roshan172",
                        "content": "Runtime: 8 ms, faster than 99.02% of C++ online submissions for Delete Node in a Linked List."
                    },
                    {
                        "username": "Rebv18",
                        "content": "terribly written question....you're asking me to create a memory leak. This question is like me saying, clean my car, but DON'T remove any of the dirt, but clean my car. \n\n\"Delete\" the node but don't remove it from heap memory and create a memory leak, but \"delete\" the node."
                    }
                ]
            },
            {
                "id": 1569393,
                "content": [
                    {
                        "username": "ampilogov",
                        "content": "Add Swift please for this problem"
                    },
                    {
                        "username": "lovchanel",
                        "content": "This might sound so dumb, but wouldn't node=node.next work?"
                    },
                    {
                        "username": "d1v_",
                        "content": "  `EVERYTHING IS CORRECT IN THIS PROBLEM.`\n`Let me help you if you're finding any difficulty in understanding or solving the problem.`\nMost of the people are saying that `Problem statement and function definition with only one parameter are wrong`. \nJust read the problem statement properly and then you'll get to know that Problem statement and function definition with only one parameter are totally correct. `THERE  IS NO REQUIREMENT OF 2 PARAMETERS`.\n\n`Explanation :`\nAccording to the problem statement, we've to remove the value of given node and decrease the number of nodes by one.\n\n`Note:` It is given that-\n\n`1-` Given node can't be the last node of the linked list.\n`2-` All the values before node should be in the same order.\nAll the values after node should be in the same order.\n`Steps:`\n`1-` In order to remove the value of given node, we'll repalce the value of given node with the value of next node.\n`2-` connect the given node with next to next node to decrease the number of nodes by one.\n\nOrder of values will be same after performing above steps."
                    },
                    {
                        "username": "mirandanathan",
                        "content": "90% Reading Comprehension, 10% Basic Python Gramma, 0% Algrethem! It is a wordy question. \\n\\n        if node.next: node.val, node.next = node.next.val, node.next.next"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "What does this problem description mean?\\nWhy no enough parameters in the function definition?\\n\\nShouldn\\'t it be \\n\\n`public void deleteNode(ListNode head, ListNode node){}`\\n\\n?"
                    },
                    {
                        "username": "LynxSumit",
                        "content": "if there would be head isn\\'t this would be an easy one ?\\n"
                    },
                    {
                        "username": "liaotl10",
                        "content": "\\u53EA\\u60F3\\u5410\\u4E2A\\u69FD\\u3002\\u672C\\u6765\\u8FD8\\u5728\\u627Ehead\\u3002\\u3002\\u3002\\u3002"
                    },
                    {
                        "username": "ymymrydzh",
                        "content": "\\u6709\\u6BDB\\u75C5\\u5427\\uFF0C\\u51FA\\u8FD9\\u79CD\\u9898\\uFF0C\\u6CA1\\u9898\\u76EE\\u4E86\\u53EF\\u4EE5\\u4E0D\\u51FA"
                    },
                    {
                        "username": "kumar14",
                        "content": "    *node= *node->next;              //just write it into given code"
                    },
                    {
                        "username": "roshan172",
                        "content": "Runtime: 8 ms, faster than 99.02% of C++ online submissions for Delete Node in a Linked List."
                    },
                    {
                        "username": "Rebv18",
                        "content": "terribly written question....you're asking me to create a memory leak. This question is like me saying, clean my car, but DON'T remove any of the dirt, but clean my car. \n\n\"Delete\" the node but don't remove it from heap memory and create a memory leak, but \"delete\" the node."
                    }
                ]
            },
            {
                "id": 1567928,
                "content": [
                    {
                        "username": "ampilogov",
                        "content": "Add Swift please for this problem"
                    },
                    {
                        "username": "lovchanel",
                        "content": "This might sound so dumb, but wouldn't node=node.next work?"
                    },
                    {
                        "username": "d1v_",
                        "content": "  `EVERYTHING IS CORRECT IN THIS PROBLEM.`\n`Let me help you if you're finding any difficulty in understanding or solving the problem.`\nMost of the people are saying that `Problem statement and function definition with only one parameter are wrong`. \nJust read the problem statement properly and then you'll get to know that Problem statement and function definition with only one parameter are totally correct. `THERE  IS NO REQUIREMENT OF 2 PARAMETERS`.\n\n`Explanation :`\nAccording to the problem statement, we've to remove the value of given node and decrease the number of nodes by one.\n\n`Note:` It is given that-\n\n`1-` Given node can't be the last node of the linked list.\n`2-` All the values before node should be in the same order.\nAll the values after node should be in the same order.\n`Steps:`\n`1-` In order to remove the value of given node, we'll repalce the value of given node with the value of next node.\n`2-` connect the given node with next to next node to decrease the number of nodes by one.\n\nOrder of values will be same after performing above steps."
                    },
                    {
                        "username": "mirandanathan",
                        "content": "90% Reading Comprehension, 10% Basic Python Gramma, 0% Algrethem! It is a wordy question. \\n\\n        if node.next: node.val, node.next = node.next.val, node.next.next"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "What does this problem description mean?\\nWhy no enough parameters in the function definition?\\n\\nShouldn\\'t it be \\n\\n`public void deleteNode(ListNode head, ListNode node){}`\\n\\n?"
                    },
                    {
                        "username": "LynxSumit",
                        "content": "if there would be head isn\\'t this would be an easy one ?\\n"
                    },
                    {
                        "username": "liaotl10",
                        "content": "\\u53EA\\u60F3\\u5410\\u4E2A\\u69FD\\u3002\\u672C\\u6765\\u8FD8\\u5728\\u627Ehead\\u3002\\u3002\\u3002\\u3002"
                    },
                    {
                        "username": "ymymrydzh",
                        "content": "\\u6709\\u6BDB\\u75C5\\u5427\\uFF0C\\u51FA\\u8FD9\\u79CD\\u9898\\uFF0C\\u6CA1\\u9898\\u76EE\\u4E86\\u53EF\\u4EE5\\u4E0D\\u51FA"
                    },
                    {
                        "username": "kumar14",
                        "content": "    *node= *node->next;              //just write it into given code"
                    },
                    {
                        "username": "roshan172",
                        "content": "Runtime: 8 ms, faster than 99.02% of C++ online submissions for Delete Node in a Linked List."
                    },
                    {
                        "username": "Rebv18",
                        "content": "terribly written question....you're asking me to create a memory leak. This question is like me saying, clean my car, but DON'T remove any of the dirt, but clean my car. \n\n\"Delete\" the node but don't remove it from heap memory and create a memory leak, but \"delete\" the node."
                    }
                ]
            },
            {
                "id": 1564868,
                "content": [
                    {
                        "username": "ampilogov",
                        "content": "Add Swift please for this problem"
                    },
                    {
                        "username": "lovchanel",
                        "content": "This might sound so dumb, but wouldn't node=node.next work?"
                    },
                    {
                        "username": "d1v_",
                        "content": "  `EVERYTHING IS CORRECT IN THIS PROBLEM.`\n`Let me help you if you're finding any difficulty in understanding or solving the problem.`\nMost of the people are saying that `Problem statement and function definition with only one parameter are wrong`. \nJust read the problem statement properly and then you'll get to know that Problem statement and function definition with only one parameter are totally correct. `THERE  IS NO REQUIREMENT OF 2 PARAMETERS`.\n\n`Explanation :`\nAccording to the problem statement, we've to remove the value of given node and decrease the number of nodes by one.\n\n`Note:` It is given that-\n\n`1-` Given node can't be the last node of the linked list.\n`2-` All the values before node should be in the same order.\nAll the values after node should be in the same order.\n`Steps:`\n`1-` In order to remove the value of given node, we'll repalce the value of given node with the value of next node.\n`2-` connect the given node with next to next node to decrease the number of nodes by one.\n\nOrder of values will be same after performing above steps."
                    },
                    {
                        "username": "mirandanathan",
                        "content": "90% Reading Comprehension, 10% Basic Python Gramma, 0% Algrethem! It is a wordy question. \\n\\n        if node.next: node.val, node.next = node.next.val, node.next.next"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "What does this problem description mean?\\nWhy no enough parameters in the function definition?\\n\\nShouldn\\'t it be \\n\\n`public void deleteNode(ListNode head, ListNode node){}`\\n\\n?"
                    },
                    {
                        "username": "LynxSumit",
                        "content": "if there would be head isn\\'t this would be an easy one ?\\n"
                    },
                    {
                        "username": "liaotl10",
                        "content": "\\u53EA\\u60F3\\u5410\\u4E2A\\u69FD\\u3002\\u672C\\u6765\\u8FD8\\u5728\\u627Ehead\\u3002\\u3002\\u3002\\u3002"
                    },
                    {
                        "username": "ymymrydzh",
                        "content": "\\u6709\\u6BDB\\u75C5\\u5427\\uFF0C\\u51FA\\u8FD9\\u79CD\\u9898\\uFF0C\\u6CA1\\u9898\\u76EE\\u4E86\\u53EF\\u4EE5\\u4E0D\\u51FA"
                    },
                    {
                        "username": "kumar14",
                        "content": "    *node= *node->next;              //just write it into given code"
                    },
                    {
                        "username": "roshan172",
                        "content": "Runtime: 8 ms, faster than 99.02% of C++ online submissions for Delete Node in a Linked List."
                    },
                    {
                        "username": "Rebv18",
                        "content": "terribly written question....you're asking me to create a memory leak. This question is like me saying, clean my car, but DON'T remove any of the dirt, but clean my car. \n\n\"Delete\" the node but don't remove it from heap memory and create a memory leak, but \"delete\" the node."
                    }
                ]
            },
            {
                "id": 1830886,
                "content": [
                    {
                        "username": "ampilogov",
                        "content": "Add Swift please for this problem"
                    },
                    {
                        "username": "lovchanel",
                        "content": "This might sound so dumb, but wouldn't node=node.next work?"
                    },
                    {
                        "username": "d1v_",
                        "content": "  `EVERYTHING IS CORRECT IN THIS PROBLEM.`\n`Let me help you if you're finding any difficulty in understanding or solving the problem.`\nMost of the people are saying that `Problem statement and function definition with only one parameter are wrong`. \nJust read the problem statement properly and then you'll get to know that Problem statement and function definition with only one parameter are totally correct. `THERE  IS NO REQUIREMENT OF 2 PARAMETERS`.\n\n`Explanation :`\nAccording to the problem statement, we've to remove the value of given node and decrease the number of nodes by one.\n\n`Note:` It is given that-\n\n`1-` Given node can't be the last node of the linked list.\n`2-` All the values before node should be in the same order.\nAll the values after node should be in the same order.\n`Steps:`\n`1-` In order to remove the value of given node, we'll repalce the value of given node with the value of next node.\n`2-` connect the given node with next to next node to decrease the number of nodes by one.\n\nOrder of values will be same after performing above steps."
                    },
                    {
                        "username": "mirandanathan",
                        "content": "90% Reading Comprehension, 10% Basic Python Gramma, 0% Algrethem! It is a wordy question. \\n\\n        if node.next: node.val, node.next = node.next.val, node.next.next"
                    },
                    {
                        "username": "ByteBeats",
                        "content": "What does this problem description mean?\\nWhy no enough parameters in the function definition?\\n\\nShouldn\\'t it be \\n\\n`public void deleteNode(ListNode head, ListNode node){}`\\n\\n?"
                    },
                    {
                        "username": "LynxSumit",
                        "content": "if there would be head isn\\'t this would be an easy one ?\\n"
                    },
                    {
                        "username": "liaotl10",
                        "content": "\\u53EA\\u60F3\\u5410\\u4E2A\\u69FD\\u3002\\u672C\\u6765\\u8FD8\\u5728\\u627Ehead\\u3002\\u3002\\u3002\\u3002"
                    },
                    {
                        "username": "ymymrydzh",
                        "content": "\\u6709\\u6BDB\\u75C5\\u5427\\uFF0C\\u51FA\\u8FD9\\u79CD\\u9898\\uFF0C\\u6CA1\\u9898\\u76EE\\u4E86\\u53EF\\u4EE5\\u4E0D\\u51FA"
                    },
                    {
                        "username": "kumar14",
                        "content": "    *node= *node->next;              //just write it into given code"
                    },
                    {
                        "username": "roshan172",
                        "content": "Runtime: 8 ms, faster than 99.02% of C++ online submissions for Delete Node in a Linked List."
                    },
                    {
                        "username": "Rebv18",
                        "content": "terribly written question....you're asking me to create a memory leak. This question is like me saying, clean my car, but DON'T remove any of the dirt, but clean my car. \n\n\"Delete\" the node but don't remove it from heap memory and create a memory leak, but \"delete\" the node."
                    }
                ]
            },
            {
                "id": 1570459,
                "content": [
                    {
                        "username": "noo6programmer",
                        "content": "void deleteNode(struct ListNode* node) \\n{ \\n    node->val = (node->next)->val;\\n    node->next = (node->next)->next;\\n}"
                    },
                    {
                        "username": "nirbhayluthra",
                        "content": "void deleteNode(ListNode* node) {\\n      node->val=node->next->val;\\n        node->next=node->next->next;\\n\\n    }"
                    },
                    {
                        "username": "boycao",
                        "content": "Thought this problem has a very misleading description. Deleting a node to me sounds like we want to remove the current node, in value but also physically in memory. So i would think of to remove it through changing the linkedlist, and later let the node get garbage collected. Instead of simply copying the next one over..."
                    },
                    {
                        "username": "jeyam95",
                        "content": "public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }"
                    },
                    {
                        "username": "GavynB",
                        "content": "It would be a relatively simple question, but where are we deleting the node from? We don\\'t really have a reference to a list that we\\'re deleting the individual node from. And if the entire list is being passed through the parameter, then how do we know which value to delete? There\\'s nothing to reference in memory so I can\\'t \"delete\" the node from anything."
                    },
                    {
                        "username": "lydhr",
                        "content": "C++\\n\\nWhy `node=node->next; ` is incorrect while `*node=*node->next;` is correct?"
                    },
                    {
                        "username": "tamajit",
                        "content": "The questions asks to delete the node. But basically in this problem the next node will be  deleted. But removing the next node does not mean that the node is deleted. Though visually the linkedlist will be same but the memory of the node that has to be deleted is still there. So,I have a doubt about the correctness of the problem."
                    },
                    {
                        "username": "Wenzhu_Zhao",
                        "content": "For singly linked list, we can only know the current node and its next, we cannot know its previous, so how can we change the relation between its previous and the node itself? And I don't think change the value of the node is a good idea, the operation unit is the node, if change the value in the node, we need to change all nodes after the deleted node. So dose this problem just want us solve the example or for general singly linked list?"
                    },
                    {
                        "username": "tf_",
                        "content": " node.val = node.next.val;\\n node.next = node.next.next;"
                    },
                    {
                        "username": "sahil2311sharma",
                        "content": "node = (node->next);"
                    }
                ]
            },
            {
                "id": 1570431,
                "content": [
                    {
                        "username": "noo6programmer",
                        "content": "void deleteNode(struct ListNode* node) \\n{ \\n    node->val = (node->next)->val;\\n    node->next = (node->next)->next;\\n}"
                    },
                    {
                        "username": "nirbhayluthra",
                        "content": "void deleteNode(ListNode* node) {\\n      node->val=node->next->val;\\n        node->next=node->next->next;\\n\\n    }"
                    },
                    {
                        "username": "boycao",
                        "content": "Thought this problem has a very misleading description. Deleting a node to me sounds like we want to remove the current node, in value but also physically in memory. So i would think of to remove it through changing the linkedlist, and later let the node get garbage collected. Instead of simply copying the next one over..."
                    },
                    {
                        "username": "jeyam95",
                        "content": "public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }"
                    },
                    {
                        "username": "GavynB",
                        "content": "It would be a relatively simple question, but where are we deleting the node from? We don\\'t really have a reference to a list that we\\'re deleting the individual node from. And if the entire list is being passed through the parameter, then how do we know which value to delete? There\\'s nothing to reference in memory so I can\\'t \"delete\" the node from anything."
                    },
                    {
                        "username": "lydhr",
                        "content": "C++\\n\\nWhy `node=node->next; ` is incorrect while `*node=*node->next;` is correct?"
                    },
                    {
                        "username": "tamajit",
                        "content": "The questions asks to delete the node. But basically in this problem the next node will be  deleted. But removing the next node does not mean that the node is deleted. Though visually the linkedlist will be same but the memory of the node that has to be deleted is still there. So,I have a doubt about the correctness of the problem."
                    },
                    {
                        "username": "Wenzhu_Zhao",
                        "content": "For singly linked list, we can only know the current node and its next, we cannot know its previous, so how can we change the relation between its previous and the node itself? And I don't think change the value of the node is a good idea, the operation unit is the node, if change the value in the node, we need to change all nodes after the deleted node. So dose this problem just want us solve the example or for general singly linked list?"
                    },
                    {
                        "username": "tf_",
                        "content": " node.val = node.next.val;\\n node.next = node.next.next;"
                    },
                    {
                        "username": "sahil2311sharma",
                        "content": "node = (node->next);"
                    }
                ]
            },
            {
                "id": 1570286,
                "content": [
                    {
                        "username": "noo6programmer",
                        "content": "void deleteNode(struct ListNode* node) \\n{ \\n    node->val = (node->next)->val;\\n    node->next = (node->next)->next;\\n}"
                    },
                    {
                        "username": "nirbhayluthra",
                        "content": "void deleteNode(ListNode* node) {\\n      node->val=node->next->val;\\n        node->next=node->next->next;\\n\\n    }"
                    },
                    {
                        "username": "boycao",
                        "content": "Thought this problem has a very misleading description. Deleting a node to me sounds like we want to remove the current node, in value but also physically in memory. So i would think of to remove it through changing the linkedlist, and later let the node get garbage collected. Instead of simply copying the next one over..."
                    },
                    {
                        "username": "jeyam95",
                        "content": "public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }"
                    },
                    {
                        "username": "GavynB",
                        "content": "It would be a relatively simple question, but where are we deleting the node from? We don\\'t really have a reference to a list that we\\'re deleting the individual node from. And if the entire list is being passed through the parameter, then how do we know which value to delete? There\\'s nothing to reference in memory so I can\\'t \"delete\" the node from anything."
                    },
                    {
                        "username": "lydhr",
                        "content": "C++\\n\\nWhy `node=node->next; ` is incorrect while `*node=*node->next;` is correct?"
                    },
                    {
                        "username": "tamajit",
                        "content": "The questions asks to delete the node. But basically in this problem the next node will be  deleted. But removing the next node does not mean that the node is deleted. Though visually the linkedlist will be same but the memory of the node that has to be deleted is still there. So,I have a doubt about the correctness of the problem."
                    },
                    {
                        "username": "Wenzhu_Zhao",
                        "content": "For singly linked list, we can only know the current node and its next, we cannot know its previous, so how can we change the relation between its previous and the node itself? And I don't think change the value of the node is a good idea, the operation unit is the node, if change the value in the node, we need to change all nodes after the deleted node. So dose this problem just want us solve the example or for general singly linked list?"
                    },
                    {
                        "username": "tf_",
                        "content": " node.val = node.next.val;\\n node.next = node.next.next;"
                    },
                    {
                        "username": "sahil2311sharma",
                        "content": "node = (node->next);"
                    }
                ]
            },
            {
                "id": 1570056,
                "content": [
                    {
                        "username": "noo6programmer",
                        "content": "void deleteNode(struct ListNode* node) \\n{ \\n    node->val = (node->next)->val;\\n    node->next = (node->next)->next;\\n}"
                    },
                    {
                        "username": "nirbhayluthra",
                        "content": "void deleteNode(ListNode* node) {\\n      node->val=node->next->val;\\n        node->next=node->next->next;\\n\\n    }"
                    },
                    {
                        "username": "boycao",
                        "content": "Thought this problem has a very misleading description. Deleting a node to me sounds like we want to remove the current node, in value but also physically in memory. So i would think of to remove it through changing the linkedlist, and later let the node get garbage collected. Instead of simply copying the next one over..."
                    },
                    {
                        "username": "jeyam95",
                        "content": "public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }"
                    },
                    {
                        "username": "GavynB",
                        "content": "It would be a relatively simple question, but where are we deleting the node from? We don\\'t really have a reference to a list that we\\'re deleting the individual node from. And if the entire list is being passed through the parameter, then how do we know which value to delete? There\\'s nothing to reference in memory so I can\\'t \"delete\" the node from anything."
                    },
                    {
                        "username": "lydhr",
                        "content": "C++\\n\\nWhy `node=node->next; ` is incorrect while `*node=*node->next;` is correct?"
                    },
                    {
                        "username": "tamajit",
                        "content": "The questions asks to delete the node. But basically in this problem the next node will be  deleted. But removing the next node does not mean that the node is deleted. Though visually the linkedlist will be same but the memory of the node that has to be deleted is still there. So,I have a doubt about the correctness of the problem."
                    },
                    {
                        "username": "Wenzhu_Zhao",
                        "content": "For singly linked list, we can only know the current node and its next, we cannot know its previous, so how can we change the relation between its previous and the node itself? And I don't think change the value of the node is a good idea, the operation unit is the node, if change the value in the node, we need to change all nodes after the deleted node. So dose this problem just want us solve the example or for general singly linked list?"
                    },
                    {
                        "username": "tf_",
                        "content": " node.val = node.next.val;\\n node.next = node.next.next;"
                    },
                    {
                        "username": "sahil2311sharma",
                        "content": "node = (node->next);"
                    }
                ]
            },
            {
                "id": 1569700,
                "content": [
                    {
                        "username": "noo6programmer",
                        "content": "void deleteNode(struct ListNode* node) \\n{ \\n    node->val = (node->next)->val;\\n    node->next = (node->next)->next;\\n}"
                    },
                    {
                        "username": "nirbhayluthra",
                        "content": "void deleteNode(ListNode* node) {\\n      node->val=node->next->val;\\n        node->next=node->next->next;\\n\\n    }"
                    },
                    {
                        "username": "boycao",
                        "content": "Thought this problem has a very misleading description. Deleting a node to me sounds like we want to remove the current node, in value but also physically in memory. So i would think of to remove it through changing the linkedlist, and later let the node get garbage collected. Instead of simply copying the next one over..."
                    },
                    {
                        "username": "jeyam95",
                        "content": "public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }"
                    },
                    {
                        "username": "GavynB",
                        "content": "It would be a relatively simple question, but where are we deleting the node from? We don\\'t really have a reference to a list that we\\'re deleting the individual node from. And if the entire list is being passed through the parameter, then how do we know which value to delete? There\\'s nothing to reference in memory so I can\\'t \"delete\" the node from anything."
                    },
                    {
                        "username": "lydhr",
                        "content": "C++\\n\\nWhy `node=node->next; ` is incorrect while `*node=*node->next;` is correct?"
                    },
                    {
                        "username": "tamajit",
                        "content": "The questions asks to delete the node. But basically in this problem the next node will be  deleted. But removing the next node does not mean that the node is deleted. Though visually the linkedlist will be same but the memory of the node that has to be deleted is still there. So,I have a doubt about the correctness of the problem."
                    },
                    {
                        "username": "Wenzhu_Zhao",
                        "content": "For singly linked list, we can only know the current node and its next, we cannot know its previous, so how can we change the relation between its previous and the node itself? And I don't think change the value of the node is a good idea, the operation unit is the node, if change the value in the node, we need to change all nodes after the deleted node. So dose this problem just want us solve the example or for general singly linked list?"
                    },
                    {
                        "username": "tf_",
                        "content": " node.val = node.next.val;\\n node.next = node.next.next;"
                    },
                    {
                        "username": "sahil2311sharma",
                        "content": "node = (node->next);"
                    }
                ]
            },
            {
                "id": 1569039,
                "content": [
                    {
                        "username": "noo6programmer",
                        "content": "void deleteNode(struct ListNode* node) \\n{ \\n    node->val = (node->next)->val;\\n    node->next = (node->next)->next;\\n}"
                    },
                    {
                        "username": "nirbhayluthra",
                        "content": "void deleteNode(ListNode* node) {\\n      node->val=node->next->val;\\n        node->next=node->next->next;\\n\\n    }"
                    },
                    {
                        "username": "boycao",
                        "content": "Thought this problem has a very misleading description. Deleting a node to me sounds like we want to remove the current node, in value but also physically in memory. So i would think of to remove it through changing the linkedlist, and later let the node get garbage collected. Instead of simply copying the next one over..."
                    },
                    {
                        "username": "jeyam95",
                        "content": "public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }"
                    },
                    {
                        "username": "GavynB",
                        "content": "It would be a relatively simple question, but where are we deleting the node from? We don\\'t really have a reference to a list that we\\'re deleting the individual node from. And if the entire list is being passed through the parameter, then how do we know which value to delete? There\\'s nothing to reference in memory so I can\\'t \"delete\" the node from anything."
                    },
                    {
                        "username": "lydhr",
                        "content": "C++\\n\\nWhy `node=node->next; ` is incorrect while `*node=*node->next;` is correct?"
                    },
                    {
                        "username": "tamajit",
                        "content": "The questions asks to delete the node. But basically in this problem the next node will be  deleted. But removing the next node does not mean that the node is deleted. Though visually the linkedlist will be same but the memory of the node that has to be deleted is still there. So,I have a doubt about the correctness of the problem."
                    },
                    {
                        "username": "Wenzhu_Zhao",
                        "content": "For singly linked list, we can only know the current node and its next, we cannot know its previous, so how can we change the relation between its previous and the node itself? And I don't think change the value of the node is a good idea, the operation unit is the node, if change the value in the node, we need to change all nodes after the deleted node. So dose this problem just want us solve the example or for general singly linked list?"
                    },
                    {
                        "username": "tf_",
                        "content": " node.val = node.next.val;\\n node.next = node.next.next;"
                    },
                    {
                        "username": "sahil2311sharma",
                        "content": "node = (node->next);"
                    }
                ]
            },
            {
                "id": 1567626,
                "content": [
                    {
                        "username": "noo6programmer",
                        "content": "void deleteNode(struct ListNode* node) \\n{ \\n    node->val = (node->next)->val;\\n    node->next = (node->next)->next;\\n}"
                    },
                    {
                        "username": "nirbhayluthra",
                        "content": "void deleteNode(ListNode* node) {\\n      node->val=node->next->val;\\n        node->next=node->next->next;\\n\\n    }"
                    },
                    {
                        "username": "boycao",
                        "content": "Thought this problem has a very misleading description. Deleting a node to me sounds like we want to remove the current node, in value but also physically in memory. So i would think of to remove it through changing the linkedlist, and later let the node get garbage collected. Instead of simply copying the next one over..."
                    },
                    {
                        "username": "jeyam95",
                        "content": "public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }"
                    },
                    {
                        "username": "GavynB",
                        "content": "It would be a relatively simple question, but where are we deleting the node from? We don\\'t really have a reference to a list that we\\'re deleting the individual node from. And if the entire list is being passed through the parameter, then how do we know which value to delete? There\\'s nothing to reference in memory so I can\\'t \"delete\" the node from anything."
                    },
                    {
                        "username": "lydhr",
                        "content": "C++\\n\\nWhy `node=node->next; ` is incorrect while `*node=*node->next;` is correct?"
                    },
                    {
                        "username": "tamajit",
                        "content": "The questions asks to delete the node. But basically in this problem the next node will be  deleted. But removing the next node does not mean that the node is deleted. Though visually the linkedlist will be same but the memory of the node that has to be deleted is still there. So,I have a doubt about the correctness of the problem."
                    },
                    {
                        "username": "Wenzhu_Zhao",
                        "content": "For singly linked list, we can only know the current node and its next, we cannot know its previous, so how can we change the relation between its previous and the node itself? And I don't think change the value of the node is a good idea, the operation unit is the node, if change the value in the node, we need to change all nodes after the deleted node. So dose this problem just want us solve the example or for general singly linked list?"
                    },
                    {
                        "username": "tf_",
                        "content": " node.val = node.next.val;\\n node.next = node.next.next;"
                    },
                    {
                        "username": "sahil2311sharma",
                        "content": "node = (node->next);"
                    }
                ]
            },
            {
                "id": 1567233,
                "content": [
                    {
                        "username": "noo6programmer",
                        "content": "void deleteNode(struct ListNode* node) \\n{ \\n    node->val = (node->next)->val;\\n    node->next = (node->next)->next;\\n}"
                    },
                    {
                        "username": "nirbhayluthra",
                        "content": "void deleteNode(ListNode* node) {\\n      node->val=node->next->val;\\n        node->next=node->next->next;\\n\\n    }"
                    },
                    {
                        "username": "boycao",
                        "content": "Thought this problem has a very misleading description. Deleting a node to me sounds like we want to remove the current node, in value but also physically in memory. So i would think of to remove it through changing the linkedlist, and later let the node get garbage collected. Instead of simply copying the next one over..."
                    },
                    {
                        "username": "jeyam95",
                        "content": "public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }"
                    },
                    {
                        "username": "GavynB",
                        "content": "It would be a relatively simple question, but where are we deleting the node from? We don\\'t really have a reference to a list that we\\'re deleting the individual node from. And if the entire list is being passed through the parameter, then how do we know which value to delete? There\\'s nothing to reference in memory so I can\\'t \"delete\" the node from anything."
                    },
                    {
                        "username": "lydhr",
                        "content": "C++\\n\\nWhy `node=node->next; ` is incorrect while `*node=*node->next;` is correct?"
                    },
                    {
                        "username": "tamajit",
                        "content": "The questions asks to delete the node. But basically in this problem the next node will be  deleted. But removing the next node does not mean that the node is deleted. Though visually the linkedlist will be same but the memory of the node that has to be deleted is still there. So,I have a doubt about the correctness of the problem."
                    },
                    {
                        "username": "Wenzhu_Zhao",
                        "content": "For singly linked list, we can only know the current node and its next, we cannot know its previous, so how can we change the relation between its previous and the node itself? And I don't think change the value of the node is a good idea, the operation unit is the node, if change the value in the node, we need to change all nodes after the deleted node. So dose this problem just want us solve the example or for general singly linked list?"
                    },
                    {
                        "username": "tf_",
                        "content": " node.val = node.next.val;\\n node.next = node.next.next;"
                    },
                    {
                        "username": "sahil2311sharma",
                        "content": "node = (node->next);"
                    }
                ]
            },
            {
                "id": 1566250,
                "content": [
                    {
                        "username": "noo6programmer",
                        "content": "void deleteNode(struct ListNode* node) \\n{ \\n    node->val = (node->next)->val;\\n    node->next = (node->next)->next;\\n}"
                    },
                    {
                        "username": "nirbhayluthra",
                        "content": "void deleteNode(ListNode* node) {\\n      node->val=node->next->val;\\n        node->next=node->next->next;\\n\\n    }"
                    },
                    {
                        "username": "boycao",
                        "content": "Thought this problem has a very misleading description. Deleting a node to me sounds like we want to remove the current node, in value but also physically in memory. So i would think of to remove it through changing the linkedlist, and later let the node get garbage collected. Instead of simply copying the next one over..."
                    },
                    {
                        "username": "jeyam95",
                        "content": "public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }"
                    },
                    {
                        "username": "GavynB",
                        "content": "It would be a relatively simple question, but where are we deleting the node from? We don\\'t really have a reference to a list that we\\'re deleting the individual node from. And if the entire list is being passed through the parameter, then how do we know which value to delete? There\\'s nothing to reference in memory so I can\\'t \"delete\" the node from anything."
                    },
                    {
                        "username": "lydhr",
                        "content": "C++\\n\\nWhy `node=node->next; ` is incorrect while `*node=*node->next;` is correct?"
                    },
                    {
                        "username": "tamajit",
                        "content": "The questions asks to delete the node. But basically in this problem the next node will be  deleted. But removing the next node does not mean that the node is deleted. Though visually the linkedlist will be same but the memory of the node that has to be deleted is still there. So,I have a doubt about the correctness of the problem."
                    },
                    {
                        "username": "Wenzhu_Zhao",
                        "content": "For singly linked list, we can only know the current node and its next, we cannot know its previous, so how can we change the relation between its previous and the node itself? And I don't think change the value of the node is a good idea, the operation unit is the node, if change the value in the node, we need to change all nodes after the deleted node. So dose this problem just want us solve the example or for general singly linked list?"
                    },
                    {
                        "username": "tf_",
                        "content": " node.val = node.next.val;\\n node.next = node.next.next;"
                    },
                    {
                        "username": "sahil2311sharma",
                        "content": "node = (node->next);"
                    }
                ]
            },
            {
                "id": 1568475,
                "content": [
                    {
                        "username": "noo6programmer",
                        "content": "void deleteNode(struct ListNode* node) \\n{ \\n    node->val = (node->next)->val;\\n    node->next = (node->next)->next;\\n}"
                    },
                    {
                        "username": "nirbhayluthra",
                        "content": "void deleteNode(ListNode* node) {\\n      node->val=node->next->val;\\n        node->next=node->next->next;\\n\\n    }"
                    },
                    {
                        "username": "boycao",
                        "content": "Thought this problem has a very misleading description. Deleting a node to me sounds like we want to remove the current node, in value but also physically in memory. So i would think of to remove it through changing the linkedlist, and later let the node get garbage collected. Instead of simply copying the next one over..."
                    },
                    {
                        "username": "jeyam95",
                        "content": "public void deleteNode(ListNode node) {\\n        node.val = node.next.val;\\n        node.next = node.next.next;\\n    }"
                    },
                    {
                        "username": "GavynB",
                        "content": "It would be a relatively simple question, but where are we deleting the node from? We don\\'t really have a reference to a list that we\\'re deleting the individual node from. And if the entire list is being passed through the parameter, then how do we know which value to delete? There\\'s nothing to reference in memory so I can\\'t \"delete\" the node from anything."
                    },
                    {
                        "username": "lydhr",
                        "content": "C++\\n\\nWhy `node=node->next; ` is incorrect while `*node=*node->next;` is correct?"
                    },
                    {
                        "username": "tamajit",
                        "content": "The questions asks to delete the node. But basically in this problem the next node will be  deleted. But removing the next node does not mean that the node is deleted. Though visually the linkedlist will be same but the memory of the node that has to be deleted is still there. So,I have a doubt about the correctness of the problem."
                    },
                    {
                        "username": "Wenzhu_Zhao",
                        "content": "For singly linked list, we can only know the current node and its next, we cannot know its previous, so how can we change the relation between its previous and the node itself? And I don't think change the value of the node is a good idea, the operation unit is the node, if change the value in the node, we need to change all nodes after the deleted node. So dose this problem just want us solve the example or for general singly linked list?"
                    },
                    {
                        "username": "tf_",
                        "content": " node.val = node.next.val;\\n node.next = node.next.next;"
                    },
                    {
                        "username": "sahil2311sharma",
                        "content": "node = (node->next);"
                    }
                ]
            },
            {
                "id": 1997558,
                "content": [
                    {
                        "username": "kashyapsupriya61275",
                        "content": "please can someone answer this? if the node to be deleted is the second last node than will  node.next=node.next.next; throw an exception?"
                    },
                    {
                        "username": "d1v_",
                        "content": "no, it will not throw any exception in this case.\\nnode.next = next to second last node i.e. \\'last node\\'\\nnode.next.next = NULL ; which is totally fine\\nI hope, this will help u."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "you can just change the value of current node to the next node, no need to delete a node, as their is no access of head"
                    },
                    {
                        "username": "nerdstv",
                        "content": "This is the easiest leet code problem, I have ever solved."
                    },
                    {
                        "username": "shevan05",
                        "content": "Hint: You don\\'t need access to the previous element. You can copy the value from the next node to the current value. Do it recursively and then eliminate the last node.\\n\\nExample:\\n4 -> 1 -> None  =>  1 -> 1 -> None  =>  1 -> None (replace 1 -> None with None)"
                    },
                    {
                        "username": "bulakhov",
                        "content": "I don\\'t even understand why it\\'s medium. It\\'s easy. 1-2 minutes to implement basic code. More 2 minutes to realize you can short it to 2 lines."
                    },
                    {
                        "username": "rajender7",
                        "content": "Please remove this question immediately.  \\uD83D\\uDCCC\\uD83D\\uDCCC\\uD83D\\uDCCC"
                    },
                    {
                        "username": "gkeepa",
                        "content": "can anyone explain why cant i do\\nnode=node.next"
                    },
                    {
                        "username": "Veejnas7",
                        "content": "![image](https://assets.leetcode.com/users/images/e479abf0-1961-474f-b7cf-4cf041f4b9d1_1651598186.8547819.png)\\n"
                    },
                    {
                        "username": "singhabhay11",
                        "content": "node.val=node.next.val;\\n            node.next=node.next.next;"
                    },
                    {
                        "username": "Anubrata447",
                        "content": "\\nvoid deleteNode(struct ListNode* node) {\\n\\n    node->val=node->next->val;   \\n\\t\\n    node->next=node->next->next;\\n}"
                    },
                    {
                        "username": "sumitkhopkar25",
                        "content": "Can someone please tell me why doesn\\'t node = node.next work?"
                    },
                    {
                        "username": "mohdbilal7825",
                        "content": "because it will modify node only not the head, so we change it by going at the address that is by reference not by value.\\nhope you undertoooooooooooooooooooooooooooooooooood :)"
                    }
                ]
            },
            {
                "id": 1950218,
                "content": [
                    {
                        "username": "kashyapsupriya61275",
                        "content": "please can someone answer this? if the node to be deleted is the second last node than will  node.next=node.next.next; throw an exception?"
                    },
                    {
                        "username": "d1v_",
                        "content": "no, it will not throw any exception in this case.\\nnode.next = next to second last node i.e. \\'last node\\'\\nnode.next.next = NULL ; which is totally fine\\nI hope, this will help u."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "you can just change the value of current node to the next node, no need to delete a node, as their is no access of head"
                    },
                    {
                        "username": "nerdstv",
                        "content": "This is the easiest leet code problem, I have ever solved."
                    },
                    {
                        "username": "shevan05",
                        "content": "Hint: You don\\'t need access to the previous element. You can copy the value from the next node to the current value. Do it recursively and then eliminate the last node.\\n\\nExample:\\n4 -> 1 -> None  =>  1 -> 1 -> None  =>  1 -> None (replace 1 -> None with None)"
                    },
                    {
                        "username": "bulakhov",
                        "content": "I don\\'t even understand why it\\'s medium. It\\'s easy. 1-2 minutes to implement basic code. More 2 minutes to realize you can short it to 2 lines."
                    },
                    {
                        "username": "rajender7",
                        "content": "Please remove this question immediately.  \\uD83D\\uDCCC\\uD83D\\uDCCC\\uD83D\\uDCCC"
                    },
                    {
                        "username": "gkeepa",
                        "content": "can anyone explain why cant i do\\nnode=node.next"
                    },
                    {
                        "username": "Veejnas7",
                        "content": "![image](https://assets.leetcode.com/users/images/e479abf0-1961-474f-b7cf-4cf041f4b9d1_1651598186.8547819.png)\\n"
                    },
                    {
                        "username": "singhabhay11",
                        "content": "node.val=node.next.val;\\n            node.next=node.next.next;"
                    },
                    {
                        "username": "Anubrata447",
                        "content": "\\nvoid deleteNode(struct ListNode* node) {\\n\\n    node->val=node->next->val;   \\n\\t\\n    node->next=node->next->next;\\n}"
                    },
                    {
                        "username": "sumitkhopkar25",
                        "content": "Can someone please tell me why doesn\\'t node = node.next work?"
                    },
                    {
                        "username": "mohdbilal7825",
                        "content": "because it will modify node only not the head, so we change it by going at the address that is by reference not by value.\\nhope you undertoooooooooooooooooooooooooooooooooood :)"
                    }
                ]
            },
            {
                "id": 1873753,
                "content": [
                    {
                        "username": "kashyapsupriya61275",
                        "content": "please can someone answer this? if the node to be deleted is the second last node than will  node.next=node.next.next; throw an exception?"
                    },
                    {
                        "username": "d1v_",
                        "content": "no, it will not throw any exception in this case.\\nnode.next = next to second last node i.e. \\'last node\\'\\nnode.next.next = NULL ; which is totally fine\\nI hope, this will help u."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "you can just change the value of current node to the next node, no need to delete a node, as their is no access of head"
                    },
                    {
                        "username": "nerdstv",
                        "content": "This is the easiest leet code problem, I have ever solved."
                    },
                    {
                        "username": "shevan05",
                        "content": "Hint: You don\\'t need access to the previous element. You can copy the value from the next node to the current value. Do it recursively and then eliminate the last node.\\n\\nExample:\\n4 -> 1 -> None  =>  1 -> 1 -> None  =>  1 -> None (replace 1 -> None with None)"
                    },
                    {
                        "username": "bulakhov",
                        "content": "I don\\'t even understand why it\\'s medium. It\\'s easy. 1-2 minutes to implement basic code. More 2 minutes to realize you can short it to 2 lines."
                    },
                    {
                        "username": "rajender7",
                        "content": "Please remove this question immediately.  \\uD83D\\uDCCC\\uD83D\\uDCCC\\uD83D\\uDCCC"
                    },
                    {
                        "username": "gkeepa",
                        "content": "can anyone explain why cant i do\\nnode=node.next"
                    },
                    {
                        "username": "Veejnas7",
                        "content": "![image](https://assets.leetcode.com/users/images/e479abf0-1961-474f-b7cf-4cf041f4b9d1_1651598186.8547819.png)\\n"
                    },
                    {
                        "username": "singhabhay11",
                        "content": "node.val=node.next.val;\\n            node.next=node.next.next;"
                    },
                    {
                        "username": "Anubrata447",
                        "content": "\\nvoid deleteNode(struct ListNode* node) {\\n\\n    node->val=node->next->val;   \\n\\t\\n    node->next=node->next->next;\\n}"
                    },
                    {
                        "username": "sumitkhopkar25",
                        "content": "Can someone please tell me why doesn\\'t node = node.next work?"
                    },
                    {
                        "username": "mohdbilal7825",
                        "content": "because it will modify node only not the head, so we change it by going at the address that is by reference not by value.\\nhope you undertoooooooooooooooooooooooooooooooooood :)"
                    }
                ]
            },
            {
                "id": 1732798,
                "content": [
                    {
                        "username": "kashyapsupriya61275",
                        "content": "please can someone answer this? if the node to be deleted is the second last node than will  node.next=node.next.next; throw an exception?"
                    },
                    {
                        "username": "d1v_",
                        "content": "no, it will not throw any exception in this case.\\nnode.next = next to second last node i.e. \\'last node\\'\\nnode.next.next = NULL ; which is totally fine\\nI hope, this will help u."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "you can just change the value of current node to the next node, no need to delete a node, as their is no access of head"
                    },
                    {
                        "username": "nerdstv",
                        "content": "This is the easiest leet code problem, I have ever solved."
                    },
                    {
                        "username": "shevan05",
                        "content": "Hint: You don\\'t need access to the previous element. You can copy the value from the next node to the current value. Do it recursively and then eliminate the last node.\\n\\nExample:\\n4 -> 1 -> None  =>  1 -> 1 -> None  =>  1 -> None (replace 1 -> None with None)"
                    },
                    {
                        "username": "bulakhov",
                        "content": "I don\\'t even understand why it\\'s medium. It\\'s easy. 1-2 minutes to implement basic code. More 2 minutes to realize you can short it to 2 lines."
                    },
                    {
                        "username": "rajender7",
                        "content": "Please remove this question immediately.  \\uD83D\\uDCCC\\uD83D\\uDCCC\\uD83D\\uDCCC"
                    },
                    {
                        "username": "gkeepa",
                        "content": "can anyone explain why cant i do\\nnode=node.next"
                    },
                    {
                        "username": "Veejnas7",
                        "content": "![image](https://assets.leetcode.com/users/images/e479abf0-1961-474f-b7cf-4cf041f4b9d1_1651598186.8547819.png)\\n"
                    },
                    {
                        "username": "singhabhay11",
                        "content": "node.val=node.next.val;\\n            node.next=node.next.next;"
                    },
                    {
                        "username": "Anubrata447",
                        "content": "\\nvoid deleteNode(struct ListNode* node) {\\n\\n    node->val=node->next->val;   \\n\\t\\n    node->next=node->next->next;\\n}"
                    },
                    {
                        "username": "sumitkhopkar25",
                        "content": "Can someone please tell me why doesn\\'t node = node.next work?"
                    },
                    {
                        "username": "mohdbilal7825",
                        "content": "because it will modify node only not the head, so we change it by going at the address that is by reference not by value.\\nhope you undertoooooooooooooooooooooooooooooooooood :)"
                    }
                ]
            },
            {
                "id": 1712291,
                "content": [
                    {
                        "username": "kashyapsupriya61275",
                        "content": "please can someone answer this? if the node to be deleted is the second last node than will  node.next=node.next.next; throw an exception?"
                    },
                    {
                        "username": "d1v_",
                        "content": "no, it will not throw any exception in this case.\\nnode.next = next to second last node i.e. \\'last node\\'\\nnode.next.next = NULL ; which is totally fine\\nI hope, this will help u."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "you can just change the value of current node to the next node, no need to delete a node, as their is no access of head"
                    },
                    {
                        "username": "nerdstv",
                        "content": "This is the easiest leet code problem, I have ever solved."
                    },
                    {
                        "username": "shevan05",
                        "content": "Hint: You don\\'t need access to the previous element. You can copy the value from the next node to the current value. Do it recursively and then eliminate the last node.\\n\\nExample:\\n4 -> 1 -> None  =>  1 -> 1 -> None  =>  1 -> None (replace 1 -> None with None)"
                    },
                    {
                        "username": "bulakhov",
                        "content": "I don\\'t even understand why it\\'s medium. It\\'s easy. 1-2 minutes to implement basic code. More 2 minutes to realize you can short it to 2 lines."
                    },
                    {
                        "username": "rajender7",
                        "content": "Please remove this question immediately.  \\uD83D\\uDCCC\\uD83D\\uDCCC\\uD83D\\uDCCC"
                    },
                    {
                        "username": "gkeepa",
                        "content": "can anyone explain why cant i do\\nnode=node.next"
                    },
                    {
                        "username": "Veejnas7",
                        "content": "![image](https://assets.leetcode.com/users/images/e479abf0-1961-474f-b7cf-4cf041f4b9d1_1651598186.8547819.png)\\n"
                    },
                    {
                        "username": "singhabhay11",
                        "content": "node.val=node.next.val;\\n            node.next=node.next.next;"
                    },
                    {
                        "username": "Anubrata447",
                        "content": "\\nvoid deleteNode(struct ListNode* node) {\\n\\n    node->val=node->next->val;   \\n\\t\\n    node->next=node->next->next;\\n}"
                    },
                    {
                        "username": "sumitkhopkar25",
                        "content": "Can someone please tell me why doesn\\'t node = node.next work?"
                    },
                    {
                        "username": "mohdbilal7825",
                        "content": "because it will modify node only not the head, so we change it by going at the address that is by reference not by value.\\nhope you undertoooooooooooooooooooooooooooooooooood :)"
                    }
                ]
            },
            {
                "id": 1643685,
                "content": [
                    {
                        "username": "kashyapsupriya61275",
                        "content": "please can someone answer this? if the node to be deleted is the second last node than will  node.next=node.next.next; throw an exception?"
                    },
                    {
                        "username": "d1v_",
                        "content": "no, it will not throw any exception in this case.\\nnode.next = next to second last node i.e. \\'last node\\'\\nnode.next.next = NULL ; which is totally fine\\nI hope, this will help u."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "you can just change the value of current node to the next node, no need to delete a node, as their is no access of head"
                    },
                    {
                        "username": "nerdstv",
                        "content": "This is the easiest leet code problem, I have ever solved."
                    },
                    {
                        "username": "shevan05",
                        "content": "Hint: You don\\'t need access to the previous element. You can copy the value from the next node to the current value. Do it recursively and then eliminate the last node.\\n\\nExample:\\n4 -> 1 -> None  =>  1 -> 1 -> None  =>  1 -> None (replace 1 -> None with None)"
                    },
                    {
                        "username": "bulakhov",
                        "content": "I don\\'t even understand why it\\'s medium. It\\'s easy. 1-2 minutes to implement basic code. More 2 minutes to realize you can short it to 2 lines."
                    },
                    {
                        "username": "rajender7",
                        "content": "Please remove this question immediately.  \\uD83D\\uDCCC\\uD83D\\uDCCC\\uD83D\\uDCCC"
                    },
                    {
                        "username": "gkeepa",
                        "content": "can anyone explain why cant i do\\nnode=node.next"
                    },
                    {
                        "username": "Veejnas7",
                        "content": "![image](https://assets.leetcode.com/users/images/e479abf0-1961-474f-b7cf-4cf041f4b9d1_1651598186.8547819.png)\\n"
                    },
                    {
                        "username": "singhabhay11",
                        "content": "node.val=node.next.val;\\n            node.next=node.next.next;"
                    },
                    {
                        "username": "Anubrata447",
                        "content": "\\nvoid deleteNode(struct ListNode* node) {\\n\\n    node->val=node->next->val;   \\n\\t\\n    node->next=node->next->next;\\n}"
                    },
                    {
                        "username": "sumitkhopkar25",
                        "content": "Can someone please tell me why doesn\\'t node = node.next work?"
                    },
                    {
                        "username": "mohdbilal7825",
                        "content": "because it will modify node only not the head, so we change it by going at the address that is by reference not by value.\\nhope you undertoooooooooooooooooooooooooooooooooood :)"
                    }
                ]
            },
            {
                "id": 1576706,
                "content": [
                    {
                        "username": "kashyapsupriya61275",
                        "content": "please can someone answer this? if the node to be deleted is the second last node than will  node.next=node.next.next; throw an exception?"
                    },
                    {
                        "username": "d1v_",
                        "content": "no, it will not throw any exception in this case.\\nnode.next = next to second last node i.e. \\'last node\\'\\nnode.next.next = NULL ; which is totally fine\\nI hope, this will help u."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "you can just change the value of current node to the next node, no need to delete a node, as their is no access of head"
                    },
                    {
                        "username": "nerdstv",
                        "content": "This is the easiest leet code problem, I have ever solved."
                    },
                    {
                        "username": "shevan05",
                        "content": "Hint: You don\\'t need access to the previous element. You can copy the value from the next node to the current value. Do it recursively and then eliminate the last node.\\n\\nExample:\\n4 -> 1 -> None  =>  1 -> 1 -> None  =>  1 -> None (replace 1 -> None with None)"
                    },
                    {
                        "username": "bulakhov",
                        "content": "I don\\'t even understand why it\\'s medium. It\\'s easy. 1-2 minutes to implement basic code. More 2 minutes to realize you can short it to 2 lines."
                    },
                    {
                        "username": "rajender7",
                        "content": "Please remove this question immediately.  \\uD83D\\uDCCC\\uD83D\\uDCCC\\uD83D\\uDCCC"
                    },
                    {
                        "username": "gkeepa",
                        "content": "can anyone explain why cant i do\\nnode=node.next"
                    },
                    {
                        "username": "Veejnas7",
                        "content": "![image](https://assets.leetcode.com/users/images/e479abf0-1961-474f-b7cf-4cf041f4b9d1_1651598186.8547819.png)\\n"
                    },
                    {
                        "username": "singhabhay11",
                        "content": "node.val=node.next.val;\\n            node.next=node.next.next;"
                    },
                    {
                        "username": "Anubrata447",
                        "content": "\\nvoid deleteNode(struct ListNode* node) {\\n\\n    node->val=node->next->val;   \\n\\t\\n    node->next=node->next->next;\\n}"
                    },
                    {
                        "username": "sumitkhopkar25",
                        "content": "Can someone please tell me why doesn\\'t node = node.next work?"
                    },
                    {
                        "username": "mohdbilal7825",
                        "content": "because it will modify node only not the head, so we change it by going at the address that is by reference not by value.\\nhope you undertoooooooooooooooooooooooooooooooooood :)"
                    }
                ]
            },
            {
                "id": 1576703,
                "content": [
                    {
                        "username": "kashyapsupriya61275",
                        "content": "please can someone answer this? if the node to be deleted is the second last node than will  node.next=node.next.next; throw an exception?"
                    },
                    {
                        "username": "d1v_",
                        "content": "no, it will not throw any exception in this case.\\nnode.next = next to second last node i.e. \\'last node\\'\\nnode.next.next = NULL ; which is totally fine\\nI hope, this will help u."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "you can just change the value of current node to the next node, no need to delete a node, as their is no access of head"
                    },
                    {
                        "username": "nerdstv",
                        "content": "This is the easiest leet code problem, I have ever solved."
                    },
                    {
                        "username": "shevan05",
                        "content": "Hint: You don\\'t need access to the previous element. You can copy the value from the next node to the current value. Do it recursively and then eliminate the last node.\\n\\nExample:\\n4 -> 1 -> None  =>  1 -> 1 -> None  =>  1 -> None (replace 1 -> None with None)"
                    },
                    {
                        "username": "bulakhov",
                        "content": "I don\\'t even understand why it\\'s medium. It\\'s easy. 1-2 minutes to implement basic code. More 2 minutes to realize you can short it to 2 lines."
                    },
                    {
                        "username": "rajender7",
                        "content": "Please remove this question immediately.  \\uD83D\\uDCCC\\uD83D\\uDCCC\\uD83D\\uDCCC"
                    },
                    {
                        "username": "gkeepa",
                        "content": "can anyone explain why cant i do\\nnode=node.next"
                    },
                    {
                        "username": "Veejnas7",
                        "content": "![image](https://assets.leetcode.com/users/images/e479abf0-1961-474f-b7cf-4cf041f4b9d1_1651598186.8547819.png)\\n"
                    },
                    {
                        "username": "singhabhay11",
                        "content": "node.val=node.next.val;\\n            node.next=node.next.next;"
                    },
                    {
                        "username": "Anubrata447",
                        "content": "\\nvoid deleteNode(struct ListNode* node) {\\n\\n    node->val=node->next->val;   \\n\\t\\n    node->next=node->next->next;\\n}"
                    },
                    {
                        "username": "sumitkhopkar25",
                        "content": "Can someone please tell me why doesn\\'t node = node.next work?"
                    },
                    {
                        "username": "mohdbilal7825",
                        "content": "because it will modify node only not the head, so we change it by going at the address that is by reference not by value.\\nhope you undertoooooooooooooooooooooooooooooooooood :)"
                    }
                ]
            },
            {
                "id": 1576681,
                "content": [
                    {
                        "username": "kashyapsupriya61275",
                        "content": "please can someone answer this? if the node to be deleted is the second last node than will  node.next=node.next.next; throw an exception?"
                    },
                    {
                        "username": "d1v_",
                        "content": "no, it will not throw any exception in this case.\\nnode.next = next to second last node i.e. \\'last node\\'\\nnode.next.next = NULL ; which is totally fine\\nI hope, this will help u."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "you can just change the value of current node to the next node, no need to delete a node, as their is no access of head"
                    },
                    {
                        "username": "nerdstv",
                        "content": "This is the easiest leet code problem, I have ever solved."
                    },
                    {
                        "username": "shevan05",
                        "content": "Hint: You don\\'t need access to the previous element. You can copy the value from the next node to the current value. Do it recursively and then eliminate the last node.\\n\\nExample:\\n4 -> 1 -> None  =>  1 -> 1 -> None  =>  1 -> None (replace 1 -> None with None)"
                    },
                    {
                        "username": "bulakhov",
                        "content": "I don\\'t even understand why it\\'s medium. It\\'s easy. 1-2 minutes to implement basic code. More 2 minutes to realize you can short it to 2 lines."
                    },
                    {
                        "username": "rajender7",
                        "content": "Please remove this question immediately.  \\uD83D\\uDCCC\\uD83D\\uDCCC\\uD83D\\uDCCC"
                    },
                    {
                        "username": "gkeepa",
                        "content": "can anyone explain why cant i do\\nnode=node.next"
                    },
                    {
                        "username": "Veejnas7",
                        "content": "![image](https://assets.leetcode.com/users/images/e479abf0-1961-474f-b7cf-4cf041f4b9d1_1651598186.8547819.png)\\n"
                    },
                    {
                        "username": "singhabhay11",
                        "content": "node.val=node.next.val;\\n            node.next=node.next.next;"
                    },
                    {
                        "username": "Anubrata447",
                        "content": "\\nvoid deleteNode(struct ListNode* node) {\\n\\n    node->val=node->next->val;   \\n\\t\\n    node->next=node->next->next;\\n}"
                    },
                    {
                        "username": "sumitkhopkar25",
                        "content": "Can someone please tell me why doesn\\'t node = node.next work?"
                    },
                    {
                        "username": "mohdbilal7825",
                        "content": "because it will modify node only not the head, so we change it by going at the address that is by reference not by value.\\nhope you undertoooooooooooooooooooooooooooooooooood :)"
                    }
                ]
            },
            {
                "id": 1576367,
                "content": [
                    {
                        "username": "kashyapsupriya61275",
                        "content": "please can someone answer this? if the node to be deleted is the second last node than will  node.next=node.next.next; throw an exception?"
                    },
                    {
                        "username": "d1v_",
                        "content": "no, it will not throw any exception in this case.\\nnode.next = next to second last node i.e. \\'last node\\'\\nnode.next.next = NULL ; which is totally fine\\nI hope, this will help u."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "you can just change the value of current node to the next node, no need to delete a node, as their is no access of head"
                    },
                    {
                        "username": "nerdstv",
                        "content": "This is the easiest leet code problem, I have ever solved."
                    },
                    {
                        "username": "shevan05",
                        "content": "Hint: You don\\'t need access to the previous element. You can copy the value from the next node to the current value. Do it recursively and then eliminate the last node.\\n\\nExample:\\n4 -> 1 -> None  =>  1 -> 1 -> None  =>  1 -> None (replace 1 -> None with None)"
                    },
                    {
                        "username": "bulakhov",
                        "content": "I don\\'t even understand why it\\'s medium. It\\'s easy. 1-2 minutes to implement basic code. More 2 minutes to realize you can short it to 2 lines."
                    },
                    {
                        "username": "rajender7",
                        "content": "Please remove this question immediately.  \\uD83D\\uDCCC\\uD83D\\uDCCC\\uD83D\\uDCCC"
                    },
                    {
                        "username": "gkeepa",
                        "content": "can anyone explain why cant i do\\nnode=node.next"
                    },
                    {
                        "username": "Veejnas7",
                        "content": "![image](https://assets.leetcode.com/users/images/e479abf0-1961-474f-b7cf-4cf041f4b9d1_1651598186.8547819.png)\\n"
                    },
                    {
                        "username": "singhabhay11",
                        "content": "node.val=node.next.val;\\n            node.next=node.next.next;"
                    },
                    {
                        "username": "Anubrata447",
                        "content": "\\nvoid deleteNode(struct ListNode* node) {\\n\\n    node->val=node->next->val;   \\n\\t\\n    node->next=node->next->next;\\n}"
                    },
                    {
                        "username": "sumitkhopkar25",
                        "content": "Can someone please tell me why doesn\\'t node = node.next work?"
                    },
                    {
                        "username": "mohdbilal7825",
                        "content": "because it will modify node only not the head, so we change it by going at the address that is by reference not by value.\\nhope you undertoooooooooooooooooooooooooooooooooood :)"
                    }
                ]
            },
            {
                "id": 1576060,
                "content": [
                    {
                        "username": "Huds0n",
                        "content": "I would really appreciate. But not able to understand the question in first go. :>"
                    },
                    {
                        "username": "almagest9110",
                        "content": "I understand what they were trying to do here, but this seems hella weird to pop up for interviews. Thoughts?"
                    },
                    {
                        "username": "peterx123",
                        "content": "LOL. Changing the value instead of deleting the node is interesting."
                    },
                    {
                        "username": "dongersgg",
                        "content": "Fast and easy to follow solution for my fellow colleagues.\\nhttps://youtu.be/2tVXWX-VM34?rel=0"
                    },
                    {
                        "username": "Krishnaabhi1",
                        "content": "var deleteNode = function(node) {\\n  // copy next node value to existing node.\\n  node.val = node.next.val;\\n  // copy next node reference to existing node.\\n  node.next = node.next.next;\\n};"
                    },
                    {
                        "username": "ivabby",
                        "content": "Checkout this link : https://codingsolutions1.blogspot.com/2020/06/delete-node-in-linked-list.html"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[https://youtu.be/fEbeRjHbrm8](https://youtu.be/fEbeRjHbrm8)"
                    },
                    {
                        "username": "Abhishek_Majety",
                        "content": "Almost everyone came up with the same solution:\\n\\'\\'\\' **node.val = node.next.val \\nnode.next = node.next.next**\\'\\'\\'\\nIn this regard, how come the same solution has a minimum of 20 ms and a maximum of 40+ ms.\\nJust curious to know the reason behind it!"
                    },
                    {
                        "username": "fengvang24",
                        "content": "Runtime depends on internet connection as well."
                    },
                    {
                        "username": "laodasb",
                        "content": "idiot problem\\n\\u7B54\\u6848\\u662F\\u7528\\u628A\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\u7684\\u503C\\u653E\\u5230\\u5F53\\u524D\\u8282\\u70B9\\u3002\\u3002\\u7136\\u540E\\u5220\\u4E86\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\n\\u771FTM\\u6492\\u5E01\\u7684\\u4E00\\u9053\\u9898"
                    },
                    {
                        "username": "JarryChen",
                        "content": "Maybe delete node in a linked list isn\\'t difficult, but what this problem confused me is the parameter, where is the delete node?\\nonly one parameter?"
                    }
                ]
            },
            {
                "id": 1575230,
                "content": [
                    {
                        "username": "Huds0n",
                        "content": "I would really appreciate. But not able to understand the question in first go. :>"
                    },
                    {
                        "username": "almagest9110",
                        "content": "I understand what they were trying to do here, but this seems hella weird to pop up for interviews. Thoughts?"
                    },
                    {
                        "username": "peterx123",
                        "content": "LOL. Changing the value instead of deleting the node is interesting."
                    },
                    {
                        "username": "dongersgg",
                        "content": "Fast and easy to follow solution for my fellow colleagues.\\nhttps://youtu.be/2tVXWX-VM34?rel=0"
                    },
                    {
                        "username": "Krishnaabhi1",
                        "content": "var deleteNode = function(node) {\\n  // copy next node value to existing node.\\n  node.val = node.next.val;\\n  // copy next node reference to existing node.\\n  node.next = node.next.next;\\n};"
                    },
                    {
                        "username": "ivabby",
                        "content": "Checkout this link : https://codingsolutions1.blogspot.com/2020/06/delete-node-in-linked-list.html"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[https://youtu.be/fEbeRjHbrm8](https://youtu.be/fEbeRjHbrm8)"
                    },
                    {
                        "username": "Abhishek_Majety",
                        "content": "Almost everyone came up with the same solution:\\n\\'\\'\\' **node.val = node.next.val \\nnode.next = node.next.next**\\'\\'\\'\\nIn this regard, how come the same solution has a minimum of 20 ms and a maximum of 40+ ms.\\nJust curious to know the reason behind it!"
                    },
                    {
                        "username": "fengvang24",
                        "content": "Runtime depends on internet connection as well."
                    },
                    {
                        "username": "laodasb",
                        "content": "idiot problem\\n\\u7B54\\u6848\\u662F\\u7528\\u628A\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\u7684\\u503C\\u653E\\u5230\\u5F53\\u524D\\u8282\\u70B9\\u3002\\u3002\\u7136\\u540E\\u5220\\u4E86\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\n\\u771FTM\\u6492\\u5E01\\u7684\\u4E00\\u9053\\u9898"
                    },
                    {
                        "username": "JarryChen",
                        "content": "Maybe delete node in a linked list isn\\'t difficult, but what this problem confused me is the parameter, where is the delete node?\\nonly one parameter?"
                    }
                ]
            },
            {
                "id": 1575227,
                "content": [
                    {
                        "username": "Huds0n",
                        "content": "I would really appreciate. But not able to understand the question in first go. :>"
                    },
                    {
                        "username": "almagest9110",
                        "content": "I understand what they were trying to do here, but this seems hella weird to pop up for interviews. Thoughts?"
                    },
                    {
                        "username": "peterx123",
                        "content": "LOL. Changing the value instead of deleting the node is interesting."
                    },
                    {
                        "username": "dongersgg",
                        "content": "Fast and easy to follow solution for my fellow colleagues.\\nhttps://youtu.be/2tVXWX-VM34?rel=0"
                    },
                    {
                        "username": "Krishnaabhi1",
                        "content": "var deleteNode = function(node) {\\n  // copy next node value to existing node.\\n  node.val = node.next.val;\\n  // copy next node reference to existing node.\\n  node.next = node.next.next;\\n};"
                    },
                    {
                        "username": "ivabby",
                        "content": "Checkout this link : https://codingsolutions1.blogspot.com/2020/06/delete-node-in-linked-list.html"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[https://youtu.be/fEbeRjHbrm8](https://youtu.be/fEbeRjHbrm8)"
                    },
                    {
                        "username": "Abhishek_Majety",
                        "content": "Almost everyone came up with the same solution:\\n\\'\\'\\' **node.val = node.next.val \\nnode.next = node.next.next**\\'\\'\\'\\nIn this regard, how come the same solution has a minimum of 20 ms and a maximum of 40+ ms.\\nJust curious to know the reason behind it!"
                    },
                    {
                        "username": "fengvang24",
                        "content": "Runtime depends on internet connection as well."
                    },
                    {
                        "username": "laodasb",
                        "content": "idiot problem\\n\\u7B54\\u6848\\u662F\\u7528\\u628A\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\u7684\\u503C\\u653E\\u5230\\u5F53\\u524D\\u8282\\u70B9\\u3002\\u3002\\u7136\\u540E\\u5220\\u4E86\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\n\\u771FTM\\u6492\\u5E01\\u7684\\u4E00\\u9053\\u9898"
                    },
                    {
                        "username": "JarryChen",
                        "content": "Maybe delete node in a linked list isn\\'t difficult, but what this problem confused me is the parameter, where is the delete node?\\nonly one parameter?"
                    }
                ]
            },
            {
                "id": 1574825,
                "content": [
                    {
                        "username": "Huds0n",
                        "content": "I would really appreciate. But not able to understand the question in first go. :>"
                    },
                    {
                        "username": "almagest9110",
                        "content": "I understand what they were trying to do here, but this seems hella weird to pop up for interviews. Thoughts?"
                    },
                    {
                        "username": "peterx123",
                        "content": "LOL. Changing the value instead of deleting the node is interesting."
                    },
                    {
                        "username": "dongersgg",
                        "content": "Fast and easy to follow solution for my fellow colleagues.\\nhttps://youtu.be/2tVXWX-VM34?rel=0"
                    },
                    {
                        "username": "Krishnaabhi1",
                        "content": "var deleteNode = function(node) {\\n  // copy next node value to existing node.\\n  node.val = node.next.val;\\n  // copy next node reference to existing node.\\n  node.next = node.next.next;\\n};"
                    },
                    {
                        "username": "ivabby",
                        "content": "Checkout this link : https://codingsolutions1.blogspot.com/2020/06/delete-node-in-linked-list.html"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[https://youtu.be/fEbeRjHbrm8](https://youtu.be/fEbeRjHbrm8)"
                    },
                    {
                        "username": "Abhishek_Majety",
                        "content": "Almost everyone came up with the same solution:\\n\\'\\'\\' **node.val = node.next.val \\nnode.next = node.next.next**\\'\\'\\'\\nIn this regard, how come the same solution has a minimum of 20 ms and a maximum of 40+ ms.\\nJust curious to know the reason behind it!"
                    },
                    {
                        "username": "fengvang24",
                        "content": "Runtime depends on internet connection as well."
                    },
                    {
                        "username": "laodasb",
                        "content": "idiot problem\\n\\u7B54\\u6848\\u662F\\u7528\\u628A\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\u7684\\u503C\\u653E\\u5230\\u5F53\\u524D\\u8282\\u70B9\\u3002\\u3002\\u7136\\u540E\\u5220\\u4E86\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\n\\u771FTM\\u6492\\u5E01\\u7684\\u4E00\\u9053\\u9898"
                    },
                    {
                        "username": "JarryChen",
                        "content": "Maybe delete node in a linked list isn\\'t difficult, but what this problem confused me is the parameter, where is the delete node?\\nonly one parameter?"
                    }
                ]
            },
            {
                "id": 1573966,
                "content": [
                    {
                        "username": "Huds0n",
                        "content": "I would really appreciate. But not able to understand the question in first go. :>"
                    },
                    {
                        "username": "almagest9110",
                        "content": "I understand what they were trying to do here, but this seems hella weird to pop up for interviews. Thoughts?"
                    },
                    {
                        "username": "peterx123",
                        "content": "LOL. Changing the value instead of deleting the node is interesting."
                    },
                    {
                        "username": "dongersgg",
                        "content": "Fast and easy to follow solution for my fellow colleagues.\\nhttps://youtu.be/2tVXWX-VM34?rel=0"
                    },
                    {
                        "username": "Krishnaabhi1",
                        "content": "var deleteNode = function(node) {\\n  // copy next node value to existing node.\\n  node.val = node.next.val;\\n  // copy next node reference to existing node.\\n  node.next = node.next.next;\\n};"
                    },
                    {
                        "username": "ivabby",
                        "content": "Checkout this link : https://codingsolutions1.blogspot.com/2020/06/delete-node-in-linked-list.html"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[https://youtu.be/fEbeRjHbrm8](https://youtu.be/fEbeRjHbrm8)"
                    },
                    {
                        "username": "Abhishek_Majety",
                        "content": "Almost everyone came up with the same solution:\\n\\'\\'\\' **node.val = node.next.val \\nnode.next = node.next.next**\\'\\'\\'\\nIn this regard, how come the same solution has a minimum of 20 ms and a maximum of 40+ ms.\\nJust curious to know the reason behind it!"
                    },
                    {
                        "username": "fengvang24",
                        "content": "Runtime depends on internet connection as well."
                    },
                    {
                        "username": "laodasb",
                        "content": "idiot problem\\n\\u7B54\\u6848\\u662F\\u7528\\u628A\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\u7684\\u503C\\u653E\\u5230\\u5F53\\u524D\\u8282\\u70B9\\u3002\\u3002\\u7136\\u540E\\u5220\\u4E86\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\n\\u771FTM\\u6492\\u5E01\\u7684\\u4E00\\u9053\\u9898"
                    },
                    {
                        "username": "JarryChen",
                        "content": "Maybe delete node in a linked list isn\\'t difficult, but what this problem confused me is the parameter, where is the delete node?\\nonly one parameter?"
                    }
                ]
            },
            {
                "id": 1573911,
                "content": [
                    {
                        "username": "Huds0n",
                        "content": "I would really appreciate. But not able to understand the question in first go. :>"
                    },
                    {
                        "username": "almagest9110",
                        "content": "I understand what they were trying to do here, but this seems hella weird to pop up for interviews. Thoughts?"
                    },
                    {
                        "username": "peterx123",
                        "content": "LOL. Changing the value instead of deleting the node is interesting."
                    },
                    {
                        "username": "dongersgg",
                        "content": "Fast and easy to follow solution for my fellow colleagues.\\nhttps://youtu.be/2tVXWX-VM34?rel=0"
                    },
                    {
                        "username": "Krishnaabhi1",
                        "content": "var deleteNode = function(node) {\\n  // copy next node value to existing node.\\n  node.val = node.next.val;\\n  // copy next node reference to existing node.\\n  node.next = node.next.next;\\n};"
                    },
                    {
                        "username": "ivabby",
                        "content": "Checkout this link : https://codingsolutions1.blogspot.com/2020/06/delete-node-in-linked-list.html"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[https://youtu.be/fEbeRjHbrm8](https://youtu.be/fEbeRjHbrm8)"
                    },
                    {
                        "username": "Abhishek_Majety",
                        "content": "Almost everyone came up with the same solution:\\n\\'\\'\\' **node.val = node.next.val \\nnode.next = node.next.next**\\'\\'\\'\\nIn this regard, how come the same solution has a minimum of 20 ms and a maximum of 40+ ms.\\nJust curious to know the reason behind it!"
                    },
                    {
                        "username": "fengvang24",
                        "content": "Runtime depends on internet connection as well."
                    },
                    {
                        "username": "laodasb",
                        "content": "idiot problem\\n\\u7B54\\u6848\\u662F\\u7528\\u628A\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\u7684\\u503C\\u653E\\u5230\\u5F53\\u524D\\u8282\\u70B9\\u3002\\u3002\\u7136\\u540E\\u5220\\u4E86\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\n\\u771FTM\\u6492\\u5E01\\u7684\\u4E00\\u9053\\u9898"
                    },
                    {
                        "username": "JarryChen",
                        "content": "Maybe delete node in a linked list isn\\'t difficult, but what this problem confused me is the parameter, where is the delete node?\\nonly one parameter?"
                    }
                ]
            },
            {
                "id": 1573858,
                "content": [
                    {
                        "username": "Huds0n",
                        "content": "I would really appreciate. But not able to understand the question in first go. :>"
                    },
                    {
                        "username": "almagest9110",
                        "content": "I understand what they were trying to do here, but this seems hella weird to pop up for interviews. Thoughts?"
                    },
                    {
                        "username": "peterx123",
                        "content": "LOL. Changing the value instead of deleting the node is interesting."
                    },
                    {
                        "username": "dongersgg",
                        "content": "Fast and easy to follow solution for my fellow colleagues.\\nhttps://youtu.be/2tVXWX-VM34?rel=0"
                    },
                    {
                        "username": "Krishnaabhi1",
                        "content": "var deleteNode = function(node) {\\n  // copy next node value to existing node.\\n  node.val = node.next.val;\\n  // copy next node reference to existing node.\\n  node.next = node.next.next;\\n};"
                    },
                    {
                        "username": "ivabby",
                        "content": "Checkout this link : https://codingsolutions1.blogspot.com/2020/06/delete-node-in-linked-list.html"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[https://youtu.be/fEbeRjHbrm8](https://youtu.be/fEbeRjHbrm8)"
                    },
                    {
                        "username": "Abhishek_Majety",
                        "content": "Almost everyone came up with the same solution:\\n\\'\\'\\' **node.val = node.next.val \\nnode.next = node.next.next**\\'\\'\\'\\nIn this regard, how come the same solution has a minimum of 20 ms and a maximum of 40+ ms.\\nJust curious to know the reason behind it!"
                    },
                    {
                        "username": "fengvang24",
                        "content": "Runtime depends on internet connection as well."
                    },
                    {
                        "username": "laodasb",
                        "content": "idiot problem\\n\\u7B54\\u6848\\u662F\\u7528\\u628A\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\u7684\\u503C\\u653E\\u5230\\u5F53\\u524D\\u8282\\u70B9\\u3002\\u3002\\u7136\\u540E\\u5220\\u4E86\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\n\\u771FTM\\u6492\\u5E01\\u7684\\u4E00\\u9053\\u9898"
                    },
                    {
                        "username": "JarryChen",
                        "content": "Maybe delete node in a linked list isn\\'t difficult, but what this problem confused me is the parameter, where is the delete node?\\nonly one parameter?"
                    }
                ]
            },
            {
                "id": 1573853,
                "content": [
                    {
                        "username": "Huds0n",
                        "content": "I would really appreciate. But not able to understand the question in first go. :>"
                    },
                    {
                        "username": "almagest9110",
                        "content": "I understand what they were trying to do here, but this seems hella weird to pop up for interviews. Thoughts?"
                    },
                    {
                        "username": "peterx123",
                        "content": "LOL. Changing the value instead of deleting the node is interesting."
                    },
                    {
                        "username": "dongersgg",
                        "content": "Fast and easy to follow solution for my fellow colleagues.\\nhttps://youtu.be/2tVXWX-VM34?rel=0"
                    },
                    {
                        "username": "Krishnaabhi1",
                        "content": "var deleteNode = function(node) {\\n  // copy next node value to existing node.\\n  node.val = node.next.val;\\n  // copy next node reference to existing node.\\n  node.next = node.next.next;\\n};"
                    },
                    {
                        "username": "ivabby",
                        "content": "Checkout this link : https://codingsolutions1.blogspot.com/2020/06/delete-node-in-linked-list.html"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[https://youtu.be/fEbeRjHbrm8](https://youtu.be/fEbeRjHbrm8)"
                    },
                    {
                        "username": "Abhishek_Majety",
                        "content": "Almost everyone came up with the same solution:\\n\\'\\'\\' **node.val = node.next.val \\nnode.next = node.next.next**\\'\\'\\'\\nIn this regard, how come the same solution has a minimum of 20 ms and a maximum of 40+ ms.\\nJust curious to know the reason behind it!"
                    },
                    {
                        "username": "fengvang24",
                        "content": "Runtime depends on internet connection as well."
                    },
                    {
                        "username": "laodasb",
                        "content": "idiot problem\\n\\u7B54\\u6848\\u662F\\u7528\\u628A\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\u7684\\u503C\\u653E\\u5230\\u5F53\\u524D\\u8282\\u70B9\\u3002\\u3002\\u7136\\u540E\\u5220\\u4E86\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\n\\u771FTM\\u6492\\u5E01\\u7684\\u4E00\\u9053\\u9898"
                    },
                    {
                        "username": "JarryChen",
                        "content": "Maybe delete node in a linked list isn\\'t difficult, but what this problem confused me is the parameter, where is the delete node?\\nonly one parameter?"
                    }
                ]
            },
            {
                "id": 1573533,
                "content": [
                    {
                        "username": "Huds0n",
                        "content": "I would really appreciate. But not able to understand the question in first go. :>"
                    },
                    {
                        "username": "almagest9110",
                        "content": "I understand what they were trying to do here, but this seems hella weird to pop up for interviews. Thoughts?"
                    },
                    {
                        "username": "peterx123",
                        "content": "LOL. Changing the value instead of deleting the node is interesting."
                    },
                    {
                        "username": "dongersgg",
                        "content": "Fast and easy to follow solution for my fellow colleagues.\\nhttps://youtu.be/2tVXWX-VM34?rel=0"
                    },
                    {
                        "username": "Krishnaabhi1",
                        "content": "var deleteNode = function(node) {\\n  // copy next node value to existing node.\\n  node.val = node.next.val;\\n  // copy next node reference to existing node.\\n  node.next = node.next.next;\\n};"
                    },
                    {
                        "username": "ivabby",
                        "content": "Checkout this link : https://codingsolutions1.blogspot.com/2020/06/delete-node-in-linked-list.html"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[https://youtu.be/fEbeRjHbrm8](https://youtu.be/fEbeRjHbrm8)"
                    },
                    {
                        "username": "Abhishek_Majety",
                        "content": "Almost everyone came up with the same solution:\\n\\'\\'\\' **node.val = node.next.val \\nnode.next = node.next.next**\\'\\'\\'\\nIn this regard, how come the same solution has a minimum of 20 ms and a maximum of 40+ ms.\\nJust curious to know the reason behind it!"
                    },
                    {
                        "username": "fengvang24",
                        "content": "Runtime depends on internet connection as well."
                    },
                    {
                        "username": "laodasb",
                        "content": "idiot problem\\n\\u7B54\\u6848\\u662F\\u7528\\u628A\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\u7684\\u503C\\u653E\\u5230\\u5F53\\u524D\\u8282\\u70B9\\u3002\\u3002\\u7136\\u540E\\u5220\\u4E86\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\n\\u771FTM\\u6492\\u5E01\\u7684\\u4E00\\u9053\\u9898"
                    },
                    {
                        "username": "JarryChen",
                        "content": "Maybe delete node in a linked list isn\\'t difficult, but what this problem confused me is the parameter, where is the delete node?\\nonly one parameter?"
                    }
                ]
            },
            {
                "id": 1572918,
                "content": [
                    {
                        "username": "Huds0n",
                        "content": "I would really appreciate. But not able to understand the question in first go. :>"
                    },
                    {
                        "username": "almagest9110",
                        "content": "I understand what they were trying to do here, but this seems hella weird to pop up for interviews. Thoughts?"
                    },
                    {
                        "username": "peterx123",
                        "content": "LOL. Changing the value instead of deleting the node is interesting."
                    },
                    {
                        "username": "dongersgg",
                        "content": "Fast and easy to follow solution for my fellow colleagues.\\nhttps://youtu.be/2tVXWX-VM34?rel=0"
                    },
                    {
                        "username": "Krishnaabhi1",
                        "content": "var deleteNode = function(node) {\\n  // copy next node value to existing node.\\n  node.val = node.next.val;\\n  // copy next node reference to existing node.\\n  node.next = node.next.next;\\n};"
                    },
                    {
                        "username": "ivabby",
                        "content": "Checkout this link : https://codingsolutions1.blogspot.com/2020/06/delete-node-in-linked-list.html"
                    },
                    {
                        "username": "gsethi2409",
                        "content": "[https://youtu.be/fEbeRjHbrm8](https://youtu.be/fEbeRjHbrm8)"
                    },
                    {
                        "username": "Abhishek_Majety",
                        "content": "Almost everyone came up with the same solution:\\n\\'\\'\\' **node.val = node.next.val \\nnode.next = node.next.next**\\'\\'\\'\\nIn this regard, how come the same solution has a minimum of 20 ms and a maximum of 40+ ms.\\nJust curious to know the reason behind it!"
                    },
                    {
                        "username": "fengvang24",
                        "content": "Runtime depends on internet connection as well."
                    },
                    {
                        "username": "laodasb",
                        "content": "idiot problem\\n\\u7B54\\u6848\\u662F\\u7528\\u628A\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\u7684\\u503C\\u653E\\u5230\\u5F53\\u524D\\u8282\\u70B9\\u3002\\u3002\\u7136\\u540E\\u5220\\u4E86\\u4E0B\\u4E00\\u4E2A\\u8282\\u70B9\\n\\u771FTM\\u6492\\u5E01\\u7684\\u4E00\\u9053\\u9898"
                    },
                    {
                        "username": "JarryChen",
                        "content": "Maybe delete node in a linked list isn\\'t difficult, but what this problem confused me is the parameter, where is the delete node?\\nonly one parameter?"
                    }
                ]
            },
            {
                "id": 1572664,
                "content": [
                    {
                        "username": "Nathaniscoding",
                        "content": "this is a MDZZ question"
                    },
                    {
                        "username": "prisci1la",
                        "content": "There is literally an one-line solution. lmao"
                    },
                    {
                        "username": "Art0rias",
                        "content": "when deleting the node or sth comes to us ,we always potentially take it that we shoude be given a listnode head and a node value.but this time the problem only gives us the node pointer to which should be deleted .that is very amusing right?solution is simple,but unexpected thinking route can be really valuable.Thanks leetcode!"
                    },
                    {
                        "username": "jshore",
                        "content": "This question has a subtle complexity to it that isn't easily appreciated with a quick glance. \n\nA good question to ask is \"*Why* would we want to design a linked list's delete method to work in this fashion?\". Specifically, why not develop a method that can iterate through the list, keep track of the previous node, and set the previous node's `next` field to reference the node after the one being deleted? After all, that is a commonly conceived way of deleting a node.\n\nThe answer to this proposed questioning is that we can separate functionality and increase efficiency with some clever thinking. \n\nFirst, the internal implemention of a linked list should be private. We wouldn't be writing this method outside of our linked list, because we can't create nodes outside of the list... unless the design is **very** poor. The only way to delete a node is to find it first, and the only way to find it is with a value, which is either a primitive type or object reference. Hence, we'd need to either iterate through the list to find the correct node and then update pointers like the question above—impossible in this scenario—or we have to cleverly update the pointers to get the same effect.\n\nA **very critical assumption** in this problem is that some form a `find()` helper method—to return the first node that contains the passed *value*—already exists. In that `find()` method, we would iterate through the list until we find the first occurance of a node with the supplied value, and then return it. Why iterate through the list again to delete a node if we've already found it? Well, we don't need to, and we can simply operate on the node's fields to get the same effect. See the increased efficiency here?\n\nSo, by using clever means of deleting the node—I won't spoil it here, see some community submissions if you're stuck—we can separate `find()` and `delete()` functionality. `delete()` reuses our code to find a node, and can delete said node without iterating through a list of values to find it. Note that the `delete()` that accepts a node should be private to the linked list class, and the `delete()` that accepts an object/value would be publicly accessible.\n\nFinally, you might ask \"Why would the `find()` method be a helper (private)? Wouldn't we want to include that as a public method on our list?\" Good question. Yes, you may want to include a find method of some sort, probably written as `contains()` to indicate with a boolean whether the value/object is in the list. In that public `contains()` method you can use a check against the result of `find()`, again reusing that find functionality and keeping contains functionality separate.\n\n"
                    },
                    {
                        "username": "ziddletwix",
                        "content": "I feel like if node.next is null (i.e. we are deleting the last node in the list), then node.next.next should cause an error. Why does it not? Total python novice, was surprised my solution worked."
                    },
                    {
                        "username": "Garlicala",
                        "content": "After reading the answer, I was like... speechless. This is not deleting the node, this is fxxking swapping the value!!!"
                    },
                    {
                        "username": "KeshriRajj",
                        "content": "\\n\\n\\n\\nnode.val=node.next.val;\\nnode.next=node.next.next;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "prolifick1",
                        "content": "this should probably be the introductory problem for everyone new to leetcode."
                    },
                    {
                        "username": "amberk2001",
                        "content": "Simplest Java Solution:\\n\\t\\n\\t    node.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "rheau04",
                        "content": "node.val = node.next.val\\n        node.next = node.next.next"
                    }
                ]
            },
            {
                "id": 1572365,
                "content": [
                    {
                        "username": "Nathaniscoding",
                        "content": "this is a MDZZ question"
                    },
                    {
                        "username": "prisci1la",
                        "content": "There is literally an one-line solution. lmao"
                    },
                    {
                        "username": "Art0rias",
                        "content": "when deleting the node or sth comes to us ,we always potentially take it that we shoude be given a listnode head and a node value.but this time the problem only gives us the node pointer to which should be deleted .that is very amusing right?solution is simple,but unexpected thinking route can be really valuable.Thanks leetcode!"
                    },
                    {
                        "username": "jshore",
                        "content": "This question has a subtle complexity to it that isn't easily appreciated with a quick glance. \n\nA good question to ask is \"*Why* would we want to design a linked list's delete method to work in this fashion?\". Specifically, why not develop a method that can iterate through the list, keep track of the previous node, and set the previous node's `next` field to reference the node after the one being deleted? After all, that is a commonly conceived way of deleting a node.\n\nThe answer to this proposed questioning is that we can separate functionality and increase efficiency with some clever thinking. \n\nFirst, the internal implemention of a linked list should be private. We wouldn't be writing this method outside of our linked list, because we can't create nodes outside of the list... unless the design is **very** poor. The only way to delete a node is to find it first, and the only way to find it is with a value, which is either a primitive type or object reference. Hence, we'd need to either iterate through the list to find the correct node and then update pointers like the question above—impossible in this scenario—or we have to cleverly update the pointers to get the same effect.\n\nA **very critical assumption** in this problem is that some form a `find()` helper method—to return the first node that contains the passed *value*—already exists. In that `find()` method, we would iterate through the list until we find the first occurance of a node with the supplied value, and then return it. Why iterate through the list again to delete a node if we've already found it? Well, we don't need to, and we can simply operate on the node's fields to get the same effect. See the increased efficiency here?\n\nSo, by using clever means of deleting the node—I won't spoil it here, see some community submissions if you're stuck—we can separate `find()` and `delete()` functionality. `delete()` reuses our code to find a node, and can delete said node without iterating through a list of values to find it. Note that the `delete()` that accepts a node should be private to the linked list class, and the `delete()` that accepts an object/value would be publicly accessible.\n\nFinally, you might ask \"Why would the `find()` method be a helper (private)? Wouldn't we want to include that as a public method on our list?\" Good question. Yes, you may want to include a find method of some sort, probably written as `contains()` to indicate with a boolean whether the value/object is in the list. In that public `contains()` method you can use a check against the result of `find()`, again reusing that find functionality and keeping contains functionality separate.\n\n"
                    },
                    {
                        "username": "ziddletwix",
                        "content": "I feel like if node.next is null (i.e. we are deleting the last node in the list), then node.next.next should cause an error. Why does it not? Total python novice, was surprised my solution worked."
                    },
                    {
                        "username": "Garlicala",
                        "content": "After reading the answer, I was like... speechless. This is not deleting the node, this is fxxking swapping the value!!!"
                    },
                    {
                        "username": "KeshriRajj",
                        "content": "\\n\\n\\n\\nnode.val=node.next.val;\\nnode.next=node.next.next;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "prolifick1",
                        "content": "this should probably be the introductory problem for everyone new to leetcode."
                    },
                    {
                        "username": "amberk2001",
                        "content": "Simplest Java Solution:\\n\\t\\n\\t    node.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "rheau04",
                        "content": "node.val = node.next.val\\n        node.next = node.next.next"
                    }
                ]
            },
            {
                "id": 1572145,
                "content": [
                    {
                        "username": "Nathaniscoding",
                        "content": "this is a MDZZ question"
                    },
                    {
                        "username": "prisci1la",
                        "content": "There is literally an one-line solution. lmao"
                    },
                    {
                        "username": "Art0rias",
                        "content": "when deleting the node or sth comes to us ,we always potentially take it that we shoude be given a listnode head and a node value.but this time the problem only gives us the node pointer to which should be deleted .that is very amusing right?solution is simple,but unexpected thinking route can be really valuable.Thanks leetcode!"
                    },
                    {
                        "username": "jshore",
                        "content": "This question has a subtle complexity to it that isn't easily appreciated with a quick glance. \n\nA good question to ask is \"*Why* would we want to design a linked list's delete method to work in this fashion?\". Specifically, why not develop a method that can iterate through the list, keep track of the previous node, and set the previous node's `next` field to reference the node after the one being deleted? After all, that is a commonly conceived way of deleting a node.\n\nThe answer to this proposed questioning is that we can separate functionality and increase efficiency with some clever thinking. \n\nFirst, the internal implemention of a linked list should be private. We wouldn't be writing this method outside of our linked list, because we can't create nodes outside of the list... unless the design is **very** poor. The only way to delete a node is to find it first, and the only way to find it is with a value, which is either a primitive type or object reference. Hence, we'd need to either iterate through the list to find the correct node and then update pointers like the question above—impossible in this scenario—or we have to cleverly update the pointers to get the same effect.\n\nA **very critical assumption** in this problem is that some form a `find()` helper method—to return the first node that contains the passed *value*—already exists. In that `find()` method, we would iterate through the list until we find the first occurance of a node with the supplied value, and then return it. Why iterate through the list again to delete a node if we've already found it? Well, we don't need to, and we can simply operate on the node's fields to get the same effect. See the increased efficiency here?\n\nSo, by using clever means of deleting the node—I won't spoil it here, see some community submissions if you're stuck—we can separate `find()` and `delete()` functionality. `delete()` reuses our code to find a node, and can delete said node without iterating through a list of values to find it. Note that the `delete()` that accepts a node should be private to the linked list class, and the `delete()` that accepts an object/value would be publicly accessible.\n\nFinally, you might ask \"Why would the `find()` method be a helper (private)? Wouldn't we want to include that as a public method on our list?\" Good question. Yes, you may want to include a find method of some sort, probably written as `contains()` to indicate with a boolean whether the value/object is in the list. In that public `contains()` method you can use a check against the result of `find()`, again reusing that find functionality and keeping contains functionality separate.\n\n"
                    },
                    {
                        "username": "ziddletwix",
                        "content": "I feel like if node.next is null (i.e. we are deleting the last node in the list), then node.next.next should cause an error. Why does it not? Total python novice, was surprised my solution worked."
                    },
                    {
                        "username": "Garlicala",
                        "content": "After reading the answer, I was like... speechless. This is not deleting the node, this is fxxking swapping the value!!!"
                    },
                    {
                        "username": "KeshriRajj",
                        "content": "\\n\\n\\n\\nnode.val=node.next.val;\\nnode.next=node.next.next;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "prolifick1",
                        "content": "this should probably be the introductory problem for everyone new to leetcode."
                    },
                    {
                        "username": "amberk2001",
                        "content": "Simplest Java Solution:\\n\\t\\n\\t    node.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "rheau04",
                        "content": "node.val = node.next.val\\n        node.next = node.next.next"
                    }
                ]
            },
            {
                "id": 1571874,
                "content": [
                    {
                        "username": "Nathaniscoding",
                        "content": "this is a MDZZ question"
                    },
                    {
                        "username": "prisci1la",
                        "content": "There is literally an one-line solution. lmao"
                    },
                    {
                        "username": "Art0rias",
                        "content": "when deleting the node or sth comes to us ,we always potentially take it that we shoude be given a listnode head and a node value.but this time the problem only gives us the node pointer to which should be deleted .that is very amusing right?solution is simple,but unexpected thinking route can be really valuable.Thanks leetcode!"
                    },
                    {
                        "username": "jshore",
                        "content": "This question has a subtle complexity to it that isn't easily appreciated with a quick glance. \n\nA good question to ask is \"*Why* would we want to design a linked list's delete method to work in this fashion?\". Specifically, why not develop a method that can iterate through the list, keep track of the previous node, and set the previous node's `next` field to reference the node after the one being deleted? After all, that is a commonly conceived way of deleting a node.\n\nThe answer to this proposed questioning is that we can separate functionality and increase efficiency with some clever thinking. \n\nFirst, the internal implemention of a linked list should be private. We wouldn't be writing this method outside of our linked list, because we can't create nodes outside of the list... unless the design is **very** poor. The only way to delete a node is to find it first, and the only way to find it is with a value, which is either a primitive type or object reference. Hence, we'd need to either iterate through the list to find the correct node and then update pointers like the question above—impossible in this scenario—or we have to cleverly update the pointers to get the same effect.\n\nA **very critical assumption** in this problem is that some form a `find()` helper method—to return the first node that contains the passed *value*—already exists. In that `find()` method, we would iterate through the list until we find the first occurance of a node with the supplied value, and then return it. Why iterate through the list again to delete a node if we've already found it? Well, we don't need to, and we can simply operate on the node's fields to get the same effect. See the increased efficiency here?\n\nSo, by using clever means of deleting the node—I won't spoil it here, see some community submissions if you're stuck—we can separate `find()` and `delete()` functionality. `delete()` reuses our code to find a node, and can delete said node without iterating through a list of values to find it. Note that the `delete()` that accepts a node should be private to the linked list class, and the `delete()` that accepts an object/value would be publicly accessible.\n\nFinally, you might ask \"Why would the `find()` method be a helper (private)? Wouldn't we want to include that as a public method on our list?\" Good question. Yes, you may want to include a find method of some sort, probably written as `contains()` to indicate with a boolean whether the value/object is in the list. In that public `contains()` method you can use a check against the result of `find()`, again reusing that find functionality and keeping contains functionality separate.\n\n"
                    },
                    {
                        "username": "ziddletwix",
                        "content": "I feel like if node.next is null (i.e. we are deleting the last node in the list), then node.next.next should cause an error. Why does it not? Total python novice, was surprised my solution worked."
                    },
                    {
                        "username": "Garlicala",
                        "content": "After reading the answer, I was like... speechless. This is not deleting the node, this is fxxking swapping the value!!!"
                    },
                    {
                        "username": "KeshriRajj",
                        "content": "\\n\\n\\n\\nnode.val=node.next.val;\\nnode.next=node.next.next;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "prolifick1",
                        "content": "this should probably be the introductory problem for everyone new to leetcode."
                    },
                    {
                        "username": "amberk2001",
                        "content": "Simplest Java Solution:\\n\\t\\n\\t    node.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "rheau04",
                        "content": "node.val = node.next.val\\n        node.next = node.next.next"
                    }
                ]
            },
            {
                "id": 1571478,
                "content": [
                    {
                        "username": "Nathaniscoding",
                        "content": "this is a MDZZ question"
                    },
                    {
                        "username": "prisci1la",
                        "content": "There is literally an one-line solution. lmao"
                    },
                    {
                        "username": "Art0rias",
                        "content": "when deleting the node or sth comes to us ,we always potentially take it that we shoude be given a listnode head and a node value.but this time the problem only gives us the node pointer to which should be deleted .that is very amusing right?solution is simple,but unexpected thinking route can be really valuable.Thanks leetcode!"
                    },
                    {
                        "username": "jshore",
                        "content": "This question has a subtle complexity to it that isn't easily appreciated with a quick glance. \n\nA good question to ask is \"*Why* would we want to design a linked list's delete method to work in this fashion?\". Specifically, why not develop a method that can iterate through the list, keep track of the previous node, and set the previous node's `next` field to reference the node after the one being deleted? After all, that is a commonly conceived way of deleting a node.\n\nThe answer to this proposed questioning is that we can separate functionality and increase efficiency with some clever thinking. \n\nFirst, the internal implemention of a linked list should be private. We wouldn't be writing this method outside of our linked list, because we can't create nodes outside of the list... unless the design is **very** poor. The only way to delete a node is to find it first, and the only way to find it is with a value, which is either a primitive type or object reference. Hence, we'd need to either iterate through the list to find the correct node and then update pointers like the question above—impossible in this scenario—or we have to cleverly update the pointers to get the same effect.\n\nA **very critical assumption** in this problem is that some form a `find()` helper method—to return the first node that contains the passed *value*—already exists. In that `find()` method, we would iterate through the list until we find the first occurance of a node with the supplied value, and then return it. Why iterate through the list again to delete a node if we've already found it? Well, we don't need to, and we can simply operate on the node's fields to get the same effect. See the increased efficiency here?\n\nSo, by using clever means of deleting the node—I won't spoil it here, see some community submissions if you're stuck—we can separate `find()` and `delete()` functionality. `delete()` reuses our code to find a node, and can delete said node without iterating through a list of values to find it. Note that the `delete()` that accepts a node should be private to the linked list class, and the `delete()` that accepts an object/value would be publicly accessible.\n\nFinally, you might ask \"Why would the `find()` method be a helper (private)? Wouldn't we want to include that as a public method on our list?\" Good question. Yes, you may want to include a find method of some sort, probably written as `contains()` to indicate with a boolean whether the value/object is in the list. In that public `contains()` method you can use a check against the result of `find()`, again reusing that find functionality and keeping contains functionality separate.\n\n"
                    },
                    {
                        "username": "ziddletwix",
                        "content": "I feel like if node.next is null (i.e. we are deleting the last node in the list), then node.next.next should cause an error. Why does it not? Total python novice, was surprised my solution worked."
                    },
                    {
                        "username": "Garlicala",
                        "content": "After reading the answer, I was like... speechless. This is not deleting the node, this is fxxking swapping the value!!!"
                    },
                    {
                        "username": "KeshriRajj",
                        "content": "\\n\\n\\n\\nnode.val=node.next.val;\\nnode.next=node.next.next;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "prolifick1",
                        "content": "this should probably be the introductory problem for everyone new to leetcode."
                    },
                    {
                        "username": "amberk2001",
                        "content": "Simplest Java Solution:\\n\\t\\n\\t    node.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "rheau04",
                        "content": "node.val = node.next.val\\n        node.next = node.next.next"
                    }
                ]
            },
            {
                "id": 1570801,
                "content": [
                    {
                        "username": "Nathaniscoding",
                        "content": "this is a MDZZ question"
                    },
                    {
                        "username": "prisci1la",
                        "content": "There is literally an one-line solution. lmao"
                    },
                    {
                        "username": "Art0rias",
                        "content": "when deleting the node or sth comes to us ,we always potentially take it that we shoude be given a listnode head and a node value.but this time the problem only gives us the node pointer to which should be deleted .that is very amusing right?solution is simple,but unexpected thinking route can be really valuable.Thanks leetcode!"
                    },
                    {
                        "username": "jshore",
                        "content": "This question has a subtle complexity to it that isn't easily appreciated with a quick glance. \n\nA good question to ask is \"*Why* would we want to design a linked list's delete method to work in this fashion?\". Specifically, why not develop a method that can iterate through the list, keep track of the previous node, and set the previous node's `next` field to reference the node after the one being deleted? After all, that is a commonly conceived way of deleting a node.\n\nThe answer to this proposed questioning is that we can separate functionality and increase efficiency with some clever thinking. \n\nFirst, the internal implemention of a linked list should be private. We wouldn't be writing this method outside of our linked list, because we can't create nodes outside of the list... unless the design is **very** poor. The only way to delete a node is to find it first, and the only way to find it is with a value, which is either a primitive type or object reference. Hence, we'd need to either iterate through the list to find the correct node and then update pointers like the question above—impossible in this scenario—or we have to cleverly update the pointers to get the same effect.\n\nA **very critical assumption** in this problem is that some form a `find()` helper method—to return the first node that contains the passed *value*—already exists. In that `find()` method, we would iterate through the list until we find the first occurance of a node with the supplied value, and then return it. Why iterate through the list again to delete a node if we've already found it? Well, we don't need to, and we can simply operate on the node's fields to get the same effect. See the increased efficiency here?\n\nSo, by using clever means of deleting the node—I won't spoil it here, see some community submissions if you're stuck—we can separate `find()` and `delete()` functionality. `delete()` reuses our code to find a node, and can delete said node without iterating through a list of values to find it. Note that the `delete()` that accepts a node should be private to the linked list class, and the `delete()` that accepts an object/value would be publicly accessible.\n\nFinally, you might ask \"Why would the `find()` method be a helper (private)? Wouldn't we want to include that as a public method on our list?\" Good question. Yes, you may want to include a find method of some sort, probably written as `contains()` to indicate with a boolean whether the value/object is in the list. In that public `contains()` method you can use a check against the result of `find()`, again reusing that find functionality and keeping contains functionality separate.\n\n"
                    },
                    {
                        "username": "ziddletwix",
                        "content": "I feel like if node.next is null (i.e. we are deleting the last node in the list), then node.next.next should cause an error. Why does it not? Total python novice, was surprised my solution worked."
                    },
                    {
                        "username": "Garlicala",
                        "content": "After reading the answer, I was like... speechless. This is not deleting the node, this is fxxking swapping the value!!!"
                    },
                    {
                        "username": "KeshriRajj",
                        "content": "\\n\\n\\n\\nnode.val=node.next.val;\\nnode.next=node.next.next;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "prolifick1",
                        "content": "this should probably be the introductory problem for everyone new to leetcode."
                    },
                    {
                        "username": "amberk2001",
                        "content": "Simplest Java Solution:\\n\\t\\n\\t    node.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "rheau04",
                        "content": "node.val = node.next.val\\n        node.next = node.next.next"
                    }
                ]
            },
            {
                "id": 1576251,
                "content": [
                    {
                        "username": "Nathaniscoding",
                        "content": "this is a MDZZ question"
                    },
                    {
                        "username": "prisci1la",
                        "content": "There is literally an one-line solution. lmao"
                    },
                    {
                        "username": "Art0rias",
                        "content": "when deleting the node or sth comes to us ,we always potentially take it that we shoude be given a listnode head and a node value.but this time the problem only gives us the node pointer to which should be deleted .that is very amusing right?solution is simple,but unexpected thinking route can be really valuable.Thanks leetcode!"
                    },
                    {
                        "username": "jshore",
                        "content": "This question has a subtle complexity to it that isn't easily appreciated with a quick glance. \n\nA good question to ask is \"*Why* would we want to design a linked list's delete method to work in this fashion?\". Specifically, why not develop a method that can iterate through the list, keep track of the previous node, and set the previous node's `next` field to reference the node after the one being deleted? After all, that is a commonly conceived way of deleting a node.\n\nThe answer to this proposed questioning is that we can separate functionality and increase efficiency with some clever thinking. \n\nFirst, the internal implemention of a linked list should be private. We wouldn't be writing this method outside of our linked list, because we can't create nodes outside of the list... unless the design is **very** poor. The only way to delete a node is to find it first, and the only way to find it is with a value, which is either a primitive type or object reference. Hence, we'd need to either iterate through the list to find the correct node and then update pointers like the question above—impossible in this scenario—or we have to cleverly update the pointers to get the same effect.\n\nA **very critical assumption** in this problem is that some form a `find()` helper method—to return the first node that contains the passed *value*—already exists. In that `find()` method, we would iterate through the list until we find the first occurance of a node with the supplied value, and then return it. Why iterate through the list again to delete a node if we've already found it? Well, we don't need to, and we can simply operate on the node's fields to get the same effect. See the increased efficiency here?\n\nSo, by using clever means of deleting the node—I won't spoil it here, see some community submissions if you're stuck—we can separate `find()` and `delete()` functionality. `delete()` reuses our code to find a node, and can delete said node without iterating through a list of values to find it. Note that the `delete()` that accepts a node should be private to the linked list class, and the `delete()` that accepts an object/value would be publicly accessible.\n\nFinally, you might ask \"Why would the `find()` method be a helper (private)? Wouldn't we want to include that as a public method on our list?\" Good question. Yes, you may want to include a find method of some sort, probably written as `contains()` to indicate with a boolean whether the value/object is in the list. In that public `contains()` method you can use a check against the result of `find()`, again reusing that find functionality and keeping contains functionality separate.\n\n"
                    },
                    {
                        "username": "ziddletwix",
                        "content": "I feel like if node.next is null (i.e. we are deleting the last node in the list), then node.next.next should cause an error. Why does it not? Total python novice, was surprised my solution worked."
                    },
                    {
                        "username": "Garlicala",
                        "content": "After reading the answer, I was like... speechless. This is not deleting the node, this is fxxking swapping the value!!!"
                    },
                    {
                        "username": "KeshriRajj",
                        "content": "\\n\\n\\n\\nnode.val=node.next.val;\\nnode.next=node.next.next;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "prolifick1",
                        "content": "this should probably be the introductory problem for everyone new to leetcode."
                    },
                    {
                        "username": "amberk2001",
                        "content": "Simplest Java Solution:\\n\\t\\n\\t    node.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "rheau04",
                        "content": "node.val = node.next.val\\n        node.next = node.next.next"
                    }
                ]
            },
            {
                "id": 1575448,
                "content": [
                    {
                        "username": "Nathaniscoding",
                        "content": "this is a MDZZ question"
                    },
                    {
                        "username": "prisci1la",
                        "content": "There is literally an one-line solution. lmao"
                    },
                    {
                        "username": "Art0rias",
                        "content": "when deleting the node or sth comes to us ,we always potentially take it that we shoude be given a listnode head and a node value.but this time the problem only gives us the node pointer to which should be deleted .that is very amusing right?solution is simple,but unexpected thinking route can be really valuable.Thanks leetcode!"
                    },
                    {
                        "username": "jshore",
                        "content": "This question has a subtle complexity to it that isn't easily appreciated with a quick glance. \n\nA good question to ask is \"*Why* would we want to design a linked list's delete method to work in this fashion?\". Specifically, why not develop a method that can iterate through the list, keep track of the previous node, and set the previous node's `next` field to reference the node after the one being deleted? After all, that is a commonly conceived way of deleting a node.\n\nThe answer to this proposed questioning is that we can separate functionality and increase efficiency with some clever thinking. \n\nFirst, the internal implemention of a linked list should be private. We wouldn't be writing this method outside of our linked list, because we can't create nodes outside of the list... unless the design is **very** poor. The only way to delete a node is to find it first, and the only way to find it is with a value, which is either a primitive type or object reference. Hence, we'd need to either iterate through the list to find the correct node and then update pointers like the question above—impossible in this scenario—or we have to cleverly update the pointers to get the same effect.\n\nA **very critical assumption** in this problem is that some form a `find()` helper method—to return the first node that contains the passed *value*—already exists. In that `find()` method, we would iterate through the list until we find the first occurance of a node with the supplied value, and then return it. Why iterate through the list again to delete a node if we've already found it? Well, we don't need to, and we can simply operate on the node's fields to get the same effect. See the increased efficiency here?\n\nSo, by using clever means of deleting the node—I won't spoil it here, see some community submissions if you're stuck—we can separate `find()` and `delete()` functionality. `delete()` reuses our code to find a node, and can delete said node without iterating through a list of values to find it. Note that the `delete()` that accepts a node should be private to the linked list class, and the `delete()` that accepts an object/value would be publicly accessible.\n\nFinally, you might ask \"Why would the `find()` method be a helper (private)? Wouldn't we want to include that as a public method on our list?\" Good question. Yes, you may want to include a find method of some sort, probably written as `contains()` to indicate with a boolean whether the value/object is in the list. In that public `contains()` method you can use a check against the result of `find()`, again reusing that find functionality and keeping contains functionality separate.\n\n"
                    },
                    {
                        "username": "ziddletwix",
                        "content": "I feel like if node.next is null (i.e. we are deleting the last node in the list), then node.next.next should cause an error. Why does it not? Total python novice, was surprised my solution worked."
                    },
                    {
                        "username": "Garlicala",
                        "content": "After reading the answer, I was like... speechless. This is not deleting the node, this is fxxking swapping the value!!!"
                    },
                    {
                        "username": "KeshriRajj",
                        "content": "\\n\\n\\n\\nnode.val=node.next.val;\\nnode.next=node.next.next;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "prolifick1",
                        "content": "this should probably be the introductory problem for everyone new to leetcode."
                    },
                    {
                        "username": "amberk2001",
                        "content": "Simplest Java Solution:\\n\\t\\n\\t    node.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "rheau04",
                        "content": "node.val = node.next.val\\n        node.next = node.next.next"
                    }
                ]
            },
            {
                "id": 1575062,
                "content": [
                    {
                        "username": "Nathaniscoding",
                        "content": "this is a MDZZ question"
                    },
                    {
                        "username": "prisci1la",
                        "content": "There is literally an one-line solution. lmao"
                    },
                    {
                        "username": "Art0rias",
                        "content": "when deleting the node or sth comes to us ,we always potentially take it that we shoude be given a listnode head and a node value.but this time the problem only gives us the node pointer to which should be deleted .that is very amusing right?solution is simple,but unexpected thinking route can be really valuable.Thanks leetcode!"
                    },
                    {
                        "username": "jshore",
                        "content": "This question has a subtle complexity to it that isn't easily appreciated with a quick glance. \n\nA good question to ask is \"*Why* would we want to design a linked list's delete method to work in this fashion?\". Specifically, why not develop a method that can iterate through the list, keep track of the previous node, and set the previous node's `next` field to reference the node after the one being deleted? After all, that is a commonly conceived way of deleting a node.\n\nThe answer to this proposed questioning is that we can separate functionality and increase efficiency with some clever thinking. \n\nFirst, the internal implemention of a linked list should be private. We wouldn't be writing this method outside of our linked list, because we can't create nodes outside of the list... unless the design is **very** poor. The only way to delete a node is to find it first, and the only way to find it is with a value, which is either a primitive type or object reference. Hence, we'd need to either iterate through the list to find the correct node and then update pointers like the question above—impossible in this scenario—or we have to cleverly update the pointers to get the same effect.\n\nA **very critical assumption** in this problem is that some form a `find()` helper method—to return the first node that contains the passed *value*—already exists. In that `find()` method, we would iterate through the list until we find the first occurance of a node with the supplied value, and then return it. Why iterate through the list again to delete a node if we've already found it? Well, we don't need to, and we can simply operate on the node's fields to get the same effect. See the increased efficiency here?\n\nSo, by using clever means of deleting the node—I won't spoil it here, see some community submissions if you're stuck—we can separate `find()` and `delete()` functionality. `delete()` reuses our code to find a node, and can delete said node without iterating through a list of values to find it. Note that the `delete()` that accepts a node should be private to the linked list class, and the `delete()` that accepts an object/value would be publicly accessible.\n\nFinally, you might ask \"Why would the `find()` method be a helper (private)? Wouldn't we want to include that as a public method on our list?\" Good question. Yes, you may want to include a find method of some sort, probably written as `contains()` to indicate with a boolean whether the value/object is in the list. In that public `contains()` method you can use a check against the result of `find()`, again reusing that find functionality and keeping contains functionality separate.\n\n"
                    },
                    {
                        "username": "ziddletwix",
                        "content": "I feel like if node.next is null (i.e. we are deleting the last node in the list), then node.next.next should cause an error. Why does it not? Total python novice, was surprised my solution worked."
                    },
                    {
                        "username": "Garlicala",
                        "content": "After reading the answer, I was like... speechless. This is not deleting the node, this is fxxking swapping the value!!!"
                    },
                    {
                        "username": "KeshriRajj",
                        "content": "\\n\\n\\n\\nnode.val=node.next.val;\\nnode.next=node.next.next;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "prolifick1",
                        "content": "this should probably be the introductory problem for everyone new to leetcode."
                    },
                    {
                        "username": "amberk2001",
                        "content": "Simplest Java Solution:\\n\\t\\n\\t    node.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "rheau04",
                        "content": "node.val = node.next.val\\n        node.next = node.next.next"
                    }
                ]
            },
            {
                "id": 1574681,
                "content": [
                    {
                        "username": "Nathaniscoding",
                        "content": "this is a MDZZ question"
                    },
                    {
                        "username": "prisci1la",
                        "content": "There is literally an one-line solution. lmao"
                    },
                    {
                        "username": "Art0rias",
                        "content": "when deleting the node or sth comes to us ,we always potentially take it that we shoude be given a listnode head and a node value.but this time the problem only gives us the node pointer to which should be deleted .that is very amusing right?solution is simple,but unexpected thinking route can be really valuable.Thanks leetcode!"
                    },
                    {
                        "username": "jshore",
                        "content": "This question has a subtle complexity to it that isn't easily appreciated with a quick glance. \n\nA good question to ask is \"*Why* would we want to design a linked list's delete method to work in this fashion?\". Specifically, why not develop a method that can iterate through the list, keep track of the previous node, and set the previous node's `next` field to reference the node after the one being deleted? After all, that is a commonly conceived way of deleting a node.\n\nThe answer to this proposed questioning is that we can separate functionality and increase efficiency with some clever thinking. \n\nFirst, the internal implemention of a linked list should be private. We wouldn't be writing this method outside of our linked list, because we can't create nodes outside of the list... unless the design is **very** poor. The only way to delete a node is to find it first, and the only way to find it is with a value, which is either a primitive type or object reference. Hence, we'd need to either iterate through the list to find the correct node and then update pointers like the question above—impossible in this scenario—or we have to cleverly update the pointers to get the same effect.\n\nA **very critical assumption** in this problem is that some form a `find()` helper method—to return the first node that contains the passed *value*—already exists. In that `find()` method, we would iterate through the list until we find the first occurance of a node with the supplied value, and then return it. Why iterate through the list again to delete a node if we've already found it? Well, we don't need to, and we can simply operate on the node's fields to get the same effect. See the increased efficiency here?\n\nSo, by using clever means of deleting the node—I won't spoil it here, see some community submissions if you're stuck—we can separate `find()` and `delete()` functionality. `delete()` reuses our code to find a node, and can delete said node without iterating through a list of values to find it. Note that the `delete()` that accepts a node should be private to the linked list class, and the `delete()` that accepts an object/value would be publicly accessible.\n\nFinally, you might ask \"Why would the `find()` method be a helper (private)? Wouldn't we want to include that as a public method on our list?\" Good question. Yes, you may want to include a find method of some sort, probably written as `contains()` to indicate with a boolean whether the value/object is in the list. In that public `contains()` method you can use a check against the result of `find()`, again reusing that find functionality and keeping contains functionality separate.\n\n"
                    },
                    {
                        "username": "ziddletwix",
                        "content": "I feel like if node.next is null (i.e. we are deleting the last node in the list), then node.next.next should cause an error. Why does it not? Total python novice, was surprised my solution worked."
                    },
                    {
                        "username": "Garlicala",
                        "content": "After reading the answer, I was like... speechless. This is not deleting the node, this is fxxking swapping the value!!!"
                    },
                    {
                        "username": "KeshriRajj",
                        "content": "\\n\\n\\n\\nnode.val=node.next.val;\\nnode.next=node.next.next;\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "prolifick1",
                        "content": "this should probably be the introductory problem for everyone new to leetcode."
                    },
                    {
                        "username": "amberk2001",
                        "content": "Simplest Java Solution:\\n\\t\\n\\t    node.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "rheau04",
                        "content": "node.val = node.next.val\\n        node.next = node.next.next"
                    }
                ]
            },
            {
                "id": 1572228,
                "content": [
                    {
                        "username": "yaleeter",
                        "content": "void deleteNode(struct ListNode* node) {\\n    *node = *(node->next);\\n}"
                    },
                    {
                        "username": "haoguoxuan",
                        "content": "this is ridiculous, the question itself is just stupid"
                    },
                    {
                        "username": "startupveteran",
                        "content": "SPOILER ALERT!!!\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n\\nI see the solutions, but I don\\'t understand it.\\n\\nWhy can\\'t I just have:\\n\\n`node = node.next\\n`\\n?\\n\\nWouldn\\'t that carry over both the value and the .next linkage to subsequent nodes?\\n"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The only thing making this problem medium is its description. Please make it concise and put the problem in the easy category.\n\n`Feedback`"
                    },
                    {
                        "username": "fireship_2004",
                        "content": "This is the perfect example of how we complicate things by overthinking it."
                    },
                    {
                        "username": "sufiyan052",
                        "content": "Here, need to delete a node from Singly Linked List.\\nThis is very easy. You just think that how previous node will connect next to that node which want to delete.\\n\\nApproach\\n1- Previous node of Target node should be connected to next of target node.\\n2- And the value of previous should be mapped to next one."
                    },
                    {
                        "username": "alokv0521",
                        "content": "i am using a temporary node temp for exchanging the  nodes. no problem occurred during execution of program without deleting the temp node. but when i delete the node, i got runtime error ....plzz  explain why?"
                    },
                    {
                        "username": "dinesh2003s",
                        "content": "worst question i am ever seen...."
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "If you want to type comment about how stupid this question is, because you litteraly reversed linked list and still could not access the head, but simple \"removing\" the node to the next pointer is the answer, then you dont have to do it, i commented"
                    },
                    {
                        "username": "AryanP45",
                        "content": "Should be labelled Easy"
                    }
                ]
            },
            {
                "id": 1572153,
                "content": [
                    {
                        "username": "yaleeter",
                        "content": "void deleteNode(struct ListNode* node) {\\n    *node = *(node->next);\\n}"
                    },
                    {
                        "username": "haoguoxuan",
                        "content": "this is ridiculous, the question itself is just stupid"
                    },
                    {
                        "username": "startupveteran",
                        "content": "SPOILER ALERT!!!\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n\\nI see the solutions, but I don\\'t understand it.\\n\\nWhy can\\'t I just have:\\n\\n`node = node.next\\n`\\n?\\n\\nWouldn\\'t that carry over both the value and the .next linkage to subsequent nodes?\\n"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The only thing making this problem medium is its description. Please make it concise and put the problem in the easy category.\n\n`Feedback`"
                    },
                    {
                        "username": "fireship_2004",
                        "content": "This is the perfect example of how we complicate things by overthinking it."
                    },
                    {
                        "username": "sufiyan052",
                        "content": "Here, need to delete a node from Singly Linked List.\\nThis is very easy. You just think that how previous node will connect next to that node which want to delete.\\n\\nApproach\\n1- Previous node of Target node should be connected to next of target node.\\n2- And the value of previous should be mapped to next one."
                    },
                    {
                        "username": "alokv0521",
                        "content": "i am using a temporary node temp for exchanging the  nodes. no problem occurred during execution of program without deleting the temp node. but when i delete the node, i got runtime error ....plzz  explain why?"
                    },
                    {
                        "username": "dinesh2003s",
                        "content": "worst question i am ever seen...."
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "If you want to type comment about how stupid this question is, because you litteraly reversed linked list and still could not access the head, but simple \"removing\" the node to the next pointer is the answer, then you dont have to do it, i commented"
                    },
                    {
                        "username": "AryanP45",
                        "content": "Should be labelled Easy"
                    }
                ]
            },
            {
                "id": 2063984,
                "content": [
                    {
                        "username": "yaleeter",
                        "content": "void deleteNode(struct ListNode* node) {\\n    *node = *(node->next);\\n}"
                    },
                    {
                        "username": "haoguoxuan",
                        "content": "this is ridiculous, the question itself is just stupid"
                    },
                    {
                        "username": "startupveteran",
                        "content": "SPOILER ALERT!!!\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n\\nI see the solutions, but I don\\'t understand it.\\n\\nWhy can\\'t I just have:\\n\\n`node = node.next\\n`\\n?\\n\\nWouldn\\'t that carry over both the value and the .next linkage to subsequent nodes?\\n"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The only thing making this problem medium is its description. Please make it concise and put the problem in the easy category.\n\n`Feedback`"
                    },
                    {
                        "username": "fireship_2004",
                        "content": "This is the perfect example of how we complicate things by overthinking it."
                    },
                    {
                        "username": "sufiyan052",
                        "content": "Here, need to delete a node from Singly Linked List.\\nThis is very easy. You just think that how previous node will connect next to that node which want to delete.\\n\\nApproach\\n1- Previous node of Target node should be connected to next of target node.\\n2- And the value of previous should be mapped to next one."
                    },
                    {
                        "username": "alokv0521",
                        "content": "i am using a temporary node temp for exchanging the  nodes. no problem occurred during execution of program without deleting the temp node. but when i delete the node, i got runtime error ....plzz  explain why?"
                    },
                    {
                        "username": "dinesh2003s",
                        "content": "worst question i am ever seen...."
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "If you want to type comment about how stupid this question is, because you litteraly reversed linked list and still could not access the head, but simple \"removing\" the node to the next pointer is the answer, then you dont have to do it, i commented"
                    },
                    {
                        "username": "AryanP45",
                        "content": "Should be labelled Easy"
                    }
                ]
            },
            {
                "id": 2061722,
                "content": [
                    {
                        "username": "yaleeter",
                        "content": "void deleteNode(struct ListNode* node) {\\n    *node = *(node->next);\\n}"
                    },
                    {
                        "username": "haoguoxuan",
                        "content": "this is ridiculous, the question itself is just stupid"
                    },
                    {
                        "username": "startupveteran",
                        "content": "SPOILER ALERT!!!\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n\\nI see the solutions, but I don\\'t understand it.\\n\\nWhy can\\'t I just have:\\n\\n`node = node.next\\n`\\n?\\n\\nWouldn\\'t that carry over both the value and the .next linkage to subsequent nodes?\\n"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The only thing making this problem medium is its description. Please make it concise and put the problem in the easy category.\n\n`Feedback`"
                    },
                    {
                        "username": "fireship_2004",
                        "content": "This is the perfect example of how we complicate things by overthinking it."
                    },
                    {
                        "username": "sufiyan052",
                        "content": "Here, need to delete a node from Singly Linked List.\\nThis is very easy. You just think that how previous node will connect next to that node which want to delete.\\n\\nApproach\\n1- Previous node of Target node should be connected to next of target node.\\n2- And the value of previous should be mapped to next one."
                    },
                    {
                        "username": "alokv0521",
                        "content": "i am using a temporary node temp for exchanging the  nodes. no problem occurred during execution of program without deleting the temp node. but when i delete the node, i got runtime error ....plzz  explain why?"
                    },
                    {
                        "username": "dinesh2003s",
                        "content": "worst question i am ever seen...."
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "If you want to type comment about how stupid this question is, because you litteraly reversed linked list and still could not access the head, but simple \"removing\" the node to the next pointer is the answer, then you dont have to do it, i commented"
                    },
                    {
                        "username": "AryanP45",
                        "content": "Should be labelled Easy"
                    }
                ]
            },
            {
                "id": 2059510,
                "content": [
                    {
                        "username": "yaleeter",
                        "content": "void deleteNode(struct ListNode* node) {\\n    *node = *(node->next);\\n}"
                    },
                    {
                        "username": "haoguoxuan",
                        "content": "this is ridiculous, the question itself is just stupid"
                    },
                    {
                        "username": "startupveteran",
                        "content": "SPOILER ALERT!!!\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n\\nI see the solutions, but I don\\'t understand it.\\n\\nWhy can\\'t I just have:\\n\\n`node = node.next\\n`\\n?\\n\\nWouldn\\'t that carry over both the value and the .next linkage to subsequent nodes?\\n"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The only thing making this problem medium is its description. Please make it concise and put the problem in the easy category.\n\n`Feedback`"
                    },
                    {
                        "username": "fireship_2004",
                        "content": "This is the perfect example of how we complicate things by overthinking it."
                    },
                    {
                        "username": "sufiyan052",
                        "content": "Here, need to delete a node from Singly Linked List.\\nThis is very easy. You just think that how previous node will connect next to that node which want to delete.\\n\\nApproach\\n1- Previous node of Target node should be connected to next of target node.\\n2- And the value of previous should be mapped to next one."
                    },
                    {
                        "username": "alokv0521",
                        "content": "i am using a temporary node temp for exchanging the  nodes. no problem occurred during execution of program without deleting the temp node. but when i delete the node, i got runtime error ....plzz  explain why?"
                    },
                    {
                        "username": "dinesh2003s",
                        "content": "worst question i am ever seen...."
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "If you want to type comment about how stupid this question is, because you litteraly reversed linked list and still could not access the head, but simple \"removing\" the node to the next pointer is the answer, then you dont have to do it, i commented"
                    },
                    {
                        "username": "AryanP45",
                        "content": "Should be labelled Easy"
                    }
                ]
            },
            {
                "id": 2047869,
                "content": [
                    {
                        "username": "yaleeter",
                        "content": "void deleteNode(struct ListNode* node) {\\n    *node = *(node->next);\\n}"
                    },
                    {
                        "username": "haoguoxuan",
                        "content": "this is ridiculous, the question itself is just stupid"
                    },
                    {
                        "username": "startupveteran",
                        "content": "SPOILER ALERT!!!\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n\\nI see the solutions, but I don\\'t understand it.\\n\\nWhy can\\'t I just have:\\n\\n`node = node.next\\n`\\n?\\n\\nWouldn\\'t that carry over both the value and the .next linkage to subsequent nodes?\\n"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The only thing making this problem medium is its description. Please make it concise and put the problem in the easy category.\n\n`Feedback`"
                    },
                    {
                        "username": "fireship_2004",
                        "content": "This is the perfect example of how we complicate things by overthinking it."
                    },
                    {
                        "username": "sufiyan052",
                        "content": "Here, need to delete a node from Singly Linked List.\\nThis is very easy. You just think that how previous node will connect next to that node which want to delete.\\n\\nApproach\\n1- Previous node of Target node should be connected to next of target node.\\n2- And the value of previous should be mapped to next one."
                    },
                    {
                        "username": "alokv0521",
                        "content": "i am using a temporary node temp for exchanging the  nodes. no problem occurred during execution of program without deleting the temp node. but when i delete the node, i got runtime error ....plzz  explain why?"
                    },
                    {
                        "username": "dinesh2003s",
                        "content": "worst question i am ever seen...."
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "If you want to type comment about how stupid this question is, because you litteraly reversed linked list and still could not access the head, but simple \"removing\" the node to the next pointer is the answer, then you dont have to do it, i commented"
                    },
                    {
                        "username": "AryanP45",
                        "content": "Should be labelled Easy"
                    }
                ]
            },
            {
                "id": 2043087,
                "content": [
                    {
                        "username": "yaleeter",
                        "content": "void deleteNode(struct ListNode* node) {\\n    *node = *(node->next);\\n}"
                    },
                    {
                        "username": "haoguoxuan",
                        "content": "this is ridiculous, the question itself is just stupid"
                    },
                    {
                        "username": "startupveteran",
                        "content": "SPOILER ALERT!!!\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n\\nI see the solutions, but I don\\'t understand it.\\n\\nWhy can\\'t I just have:\\n\\n`node = node.next\\n`\\n?\\n\\nWouldn\\'t that carry over both the value and the .next linkage to subsequent nodes?\\n"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The only thing making this problem medium is its description. Please make it concise and put the problem in the easy category.\n\n`Feedback`"
                    },
                    {
                        "username": "fireship_2004",
                        "content": "This is the perfect example of how we complicate things by overthinking it."
                    },
                    {
                        "username": "sufiyan052",
                        "content": "Here, need to delete a node from Singly Linked List.\\nThis is very easy. You just think that how previous node will connect next to that node which want to delete.\\n\\nApproach\\n1- Previous node of Target node should be connected to next of target node.\\n2- And the value of previous should be mapped to next one."
                    },
                    {
                        "username": "alokv0521",
                        "content": "i am using a temporary node temp for exchanging the  nodes. no problem occurred during execution of program without deleting the temp node. but when i delete the node, i got runtime error ....plzz  explain why?"
                    },
                    {
                        "username": "dinesh2003s",
                        "content": "worst question i am ever seen...."
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "If you want to type comment about how stupid this question is, because you litteraly reversed linked list and still could not access the head, but simple \"removing\" the node to the next pointer is the answer, then you dont have to do it, i commented"
                    },
                    {
                        "username": "AryanP45",
                        "content": "Should be labelled Easy"
                    }
                ]
            },
            {
                "id": 2037886,
                "content": [
                    {
                        "username": "yaleeter",
                        "content": "void deleteNode(struct ListNode* node) {\\n    *node = *(node->next);\\n}"
                    },
                    {
                        "username": "haoguoxuan",
                        "content": "this is ridiculous, the question itself is just stupid"
                    },
                    {
                        "username": "startupveteran",
                        "content": "SPOILER ALERT!!!\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n\\nI see the solutions, but I don\\'t understand it.\\n\\nWhy can\\'t I just have:\\n\\n`node = node.next\\n`\\n?\\n\\nWouldn\\'t that carry over both the value and the .next linkage to subsequent nodes?\\n"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The only thing making this problem medium is its description. Please make it concise and put the problem in the easy category.\n\n`Feedback`"
                    },
                    {
                        "username": "fireship_2004",
                        "content": "This is the perfect example of how we complicate things by overthinking it."
                    },
                    {
                        "username": "sufiyan052",
                        "content": "Here, need to delete a node from Singly Linked List.\\nThis is very easy. You just think that how previous node will connect next to that node which want to delete.\\n\\nApproach\\n1- Previous node of Target node should be connected to next of target node.\\n2- And the value of previous should be mapped to next one."
                    },
                    {
                        "username": "alokv0521",
                        "content": "i am using a temporary node temp for exchanging the  nodes. no problem occurred during execution of program without deleting the temp node. but when i delete the node, i got runtime error ....plzz  explain why?"
                    },
                    {
                        "username": "dinesh2003s",
                        "content": "worst question i am ever seen...."
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "If you want to type comment about how stupid this question is, because you litteraly reversed linked list and still could not access the head, but simple \"removing\" the node to the next pointer is the answer, then you dont have to do it, i commented"
                    },
                    {
                        "username": "AryanP45",
                        "content": "Should be labelled Easy"
                    }
                ]
            },
            {
                "id": 2036051,
                "content": [
                    {
                        "username": "yaleeter",
                        "content": "void deleteNode(struct ListNode* node) {\\n    *node = *(node->next);\\n}"
                    },
                    {
                        "username": "haoguoxuan",
                        "content": "this is ridiculous, the question itself is just stupid"
                    },
                    {
                        "username": "startupveteran",
                        "content": "SPOILER ALERT!!!\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n\\nI see the solutions, but I don\\'t understand it.\\n\\nWhy can\\'t I just have:\\n\\n`node = node.next\\n`\\n?\\n\\nWouldn\\'t that carry over both the value and the .next linkage to subsequent nodes?\\n"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The only thing making this problem medium is its description. Please make it concise and put the problem in the easy category.\n\n`Feedback`"
                    },
                    {
                        "username": "fireship_2004",
                        "content": "This is the perfect example of how we complicate things by overthinking it."
                    },
                    {
                        "username": "sufiyan052",
                        "content": "Here, need to delete a node from Singly Linked List.\\nThis is very easy. You just think that how previous node will connect next to that node which want to delete.\\n\\nApproach\\n1- Previous node of Target node should be connected to next of target node.\\n2- And the value of previous should be mapped to next one."
                    },
                    {
                        "username": "alokv0521",
                        "content": "i am using a temporary node temp for exchanging the  nodes. no problem occurred during execution of program without deleting the temp node. but when i delete the node, i got runtime error ....plzz  explain why?"
                    },
                    {
                        "username": "dinesh2003s",
                        "content": "worst question i am ever seen...."
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "If you want to type comment about how stupid this question is, because you litteraly reversed linked list and still could not access the head, but simple \"removing\" the node to the next pointer is the answer, then you dont have to do it, i commented"
                    },
                    {
                        "username": "AryanP45",
                        "content": "Should be labelled Easy"
                    }
                ]
            },
            {
                "id": 2011173,
                "content": [
                    {
                        "username": "yaleeter",
                        "content": "void deleteNode(struct ListNode* node) {\\n    *node = *(node->next);\\n}"
                    },
                    {
                        "username": "haoguoxuan",
                        "content": "this is ridiculous, the question itself is just stupid"
                    },
                    {
                        "username": "startupveteran",
                        "content": "SPOILER ALERT!!!\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n.\\n\\nI see the solutions, but I don\\'t understand it.\\n\\nWhy can\\'t I just have:\\n\\n`node = node.next\\n`\\n?\\n\\nWouldn\\'t that carry over both the value and the .next linkage to subsequent nodes?\\n"
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "The only thing making this problem medium is its description. Please make it concise and put the problem in the easy category.\n\n`Feedback`"
                    },
                    {
                        "username": "fireship_2004",
                        "content": "This is the perfect example of how we complicate things by overthinking it."
                    },
                    {
                        "username": "sufiyan052",
                        "content": "Here, need to delete a node from Singly Linked List.\\nThis is very easy. You just think that how previous node will connect next to that node which want to delete.\\n\\nApproach\\n1- Previous node of Target node should be connected to next of target node.\\n2- And the value of previous should be mapped to next one."
                    },
                    {
                        "username": "alokv0521",
                        "content": "i am using a temporary node temp for exchanging the  nodes. no problem occurred during execution of program without deleting the temp node. but when i delete the node, i got runtime error ....plzz  explain why?"
                    },
                    {
                        "username": "dinesh2003s",
                        "content": "worst question i am ever seen...."
                    },
                    {
                        "username": "aykhan_eng",
                        "content": "If you want to type comment about how stupid this question is, because you litteraly reversed linked list and still could not access the head, but simple \"removing\" the node to the next pointer is the answer, then you dont have to do it, i commented"
                    },
                    {
                        "username": "AryanP45",
                        "content": "Should be labelled Easy"
                    }
                ]
            },
            {
                "id": 2009850,
                "content": [
                    {
                        "username": "yashbhargava_cs21",
                        "content": "when leet code wants to play with you\\uD83D\\uDE02"
                    },
                    {
                        "username": "Akhil_Tomar",
                        "content": "To delete the node we need two parameters whereas we are provided just one , instead of deleting to solve this one can assign the value pointer of the next node to the given node.\\n\\n `node->val=node->next->val;`\\n  `node->next=node->next->next;`\\n\\nThis should do. Leetcode should change this question."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "We can change the value of current node to the value of next node until we reach the end, and if the next node is equal to NULL then we can set current node to NULL"
                    },
                    {
                        "username": "psionl0",
                        "content": "Once I got out of the mind set that I had to delete the node itself the problem became easy. Just copy the next node\\'s val to the current node\\'s val then delete the next node (for which you have a pointer to)."
                    },
                    {
                        "username": "Rahul_Kaper",
                        "content": "is it possible to solve this via recursion?"
                    },
                    {
                        "username": "besseddrest",
                        "content": "given the easy solution (which shall not be posted here), can someone explain why it cannot be simplified further to:\\n `node = node.next`"
                    },
                    {
                        "username": "ishita_gupta21",
                        "content": "This should be marked as Easy."
                    },
                    {
                        "username": "hemanthraaj31",
                        "content": "The problems\\'s title would have been mentioned as \"Delete node value in Linked list\" instead of the actual one. But in the description, it is clear that we should remove the value of given node."
                    },
                    {
                        "username": "spookie886",
                        "content": "I actually do not know how to solve this"
                    },
                    {
                        "username": "uma_gadde",
                        "content": "Can\\'t believe this is a leetcode question!! That too medium level ;)"
                    }
                ]
            },
            {
                "id": 2008313,
                "content": [
                    {
                        "username": "yashbhargava_cs21",
                        "content": "when leet code wants to play with you\\uD83D\\uDE02"
                    },
                    {
                        "username": "Akhil_Tomar",
                        "content": "To delete the node we need two parameters whereas we are provided just one , instead of deleting to solve this one can assign the value pointer of the next node to the given node.\\n\\n `node->val=node->next->val;`\\n  `node->next=node->next->next;`\\n\\nThis should do. Leetcode should change this question."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "We can change the value of current node to the value of next node until we reach the end, and if the next node is equal to NULL then we can set current node to NULL"
                    },
                    {
                        "username": "psionl0",
                        "content": "Once I got out of the mind set that I had to delete the node itself the problem became easy. Just copy the next node\\'s val to the current node\\'s val then delete the next node (for which you have a pointer to)."
                    },
                    {
                        "username": "Rahul_Kaper",
                        "content": "is it possible to solve this via recursion?"
                    },
                    {
                        "username": "besseddrest",
                        "content": "given the easy solution (which shall not be posted here), can someone explain why it cannot be simplified further to:\\n `node = node.next`"
                    },
                    {
                        "username": "ishita_gupta21",
                        "content": "This should be marked as Easy."
                    },
                    {
                        "username": "hemanthraaj31",
                        "content": "The problems\\'s title would have been mentioned as \"Delete node value in Linked list\" instead of the actual one. But in the description, it is clear that we should remove the value of given node."
                    },
                    {
                        "username": "spookie886",
                        "content": "I actually do not know how to solve this"
                    },
                    {
                        "username": "uma_gadde",
                        "content": "Can\\'t believe this is a leetcode question!! That too medium level ;)"
                    }
                ]
            },
            {
                "id": 1993432,
                "content": [
                    {
                        "username": "yashbhargava_cs21",
                        "content": "when leet code wants to play with you\\uD83D\\uDE02"
                    },
                    {
                        "username": "Akhil_Tomar",
                        "content": "To delete the node we need two parameters whereas we are provided just one , instead of deleting to solve this one can assign the value pointer of the next node to the given node.\\n\\n `node->val=node->next->val;`\\n  `node->next=node->next->next;`\\n\\nThis should do. Leetcode should change this question."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "We can change the value of current node to the value of next node until we reach the end, and if the next node is equal to NULL then we can set current node to NULL"
                    },
                    {
                        "username": "psionl0",
                        "content": "Once I got out of the mind set that I had to delete the node itself the problem became easy. Just copy the next node\\'s val to the current node\\'s val then delete the next node (for which you have a pointer to)."
                    },
                    {
                        "username": "Rahul_Kaper",
                        "content": "is it possible to solve this via recursion?"
                    },
                    {
                        "username": "besseddrest",
                        "content": "given the easy solution (which shall not be posted here), can someone explain why it cannot be simplified further to:\\n `node = node.next`"
                    },
                    {
                        "username": "ishita_gupta21",
                        "content": "This should be marked as Easy."
                    },
                    {
                        "username": "hemanthraaj31",
                        "content": "The problems\\'s title would have been mentioned as \"Delete node value in Linked list\" instead of the actual one. But in the description, it is clear that we should remove the value of given node."
                    },
                    {
                        "username": "spookie886",
                        "content": "I actually do not know how to solve this"
                    },
                    {
                        "username": "uma_gadde",
                        "content": "Can\\'t believe this is a leetcode question!! That too medium level ;)"
                    }
                ]
            },
            {
                "id": 1979647,
                "content": [
                    {
                        "username": "yashbhargava_cs21",
                        "content": "when leet code wants to play with you\\uD83D\\uDE02"
                    },
                    {
                        "username": "Akhil_Tomar",
                        "content": "To delete the node we need two parameters whereas we are provided just one , instead of deleting to solve this one can assign the value pointer of the next node to the given node.\\n\\n `node->val=node->next->val;`\\n  `node->next=node->next->next;`\\n\\nThis should do. Leetcode should change this question."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "We can change the value of current node to the value of next node until we reach the end, and if the next node is equal to NULL then we can set current node to NULL"
                    },
                    {
                        "username": "psionl0",
                        "content": "Once I got out of the mind set that I had to delete the node itself the problem became easy. Just copy the next node\\'s val to the current node\\'s val then delete the next node (for which you have a pointer to)."
                    },
                    {
                        "username": "Rahul_Kaper",
                        "content": "is it possible to solve this via recursion?"
                    },
                    {
                        "username": "besseddrest",
                        "content": "given the easy solution (which shall not be posted here), can someone explain why it cannot be simplified further to:\\n `node = node.next`"
                    },
                    {
                        "username": "ishita_gupta21",
                        "content": "This should be marked as Easy."
                    },
                    {
                        "username": "hemanthraaj31",
                        "content": "The problems\\'s title would have been mentioned as \"Delete node value in Linked list\" instead of the actual one. But in the description, it is clear that we should remove the value of given node."
                    },
                    {
                        "username": "spookie886",
                        "content": "I actually do not know how to solve this"
                    },
                    {
                        "username": "uma_gadde",
                        "content": "Can\\'t believe this is a leetcode question!! That too medium level ;)"
                    }
                ]
            },
            {
                "id": 1966418,
                "content": [
                    {
                        "username": "yashbhargava_cs21",
                        "content": "when leet code wants to play with you\\uD83D\\uDE02"
                    },
                    {
                        "username": "Akhil_Tomar",
                        "content": "To delete the node we need two parameters whereas we are provided just one , instead of deleting to solve this one can assign the value pointer of the next node to the given node.\\n\\n `node->val=node->next->val;`\\n  `node->next=node->next->next;`\\n\\nThis should do. Leetcode should change this question."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "We can change the value of current node to the value of next node until we reach the end, and if the next node is equal to NULL then we can set current node to NULL"
                    },
                    {
                        "username": "psionl0",
                        "content": "Once I got out of the mind set that I had to delete the node itself the problem became easy. Just copy the next node\\'s val to the current node\\'s val then delete the next node (for which you have a pointer to)."
                    },
                    {
                        "username": "Rahul_Kaper",
                        "content": "is it possible to solve this via recursion?"
                    },
                    {
                        "username": "besseddrest",
                        "content": "given the easy solution (which shall not be posted here), can someone explain why it cannot be simplified further to:\\n `node = node.next`"
                    },
                    {
                        "username": "ishita_gupta21",
                        "content": "This should be marked as Easy."
                    },
                    {
                        "username": "hemanthraaj31",
                        "content": "The problems\\'s title would have been mentioned as \"Delete node value in Linked list\" instead of the actual one. But in the description, it is clear that we should remove the value of given node."
                    },
                    {
                        "username": "spookie886",
                        "content": "I actually do not know how to solve this"
                    },
                    {
                        "username": "uma_gadde",
                        "content": "Can\\'t believe this is a leetcode question!! That too medium level ;)"
                    }
                ]
            },
            {
                "id": 1966304,
                "content": [
                    {
                        "username": "yashbhargava_cs21",
                        "content": "when leet code wants to play with you\\uD83D\\uDE02"
                    },
                    {
                        "username": "Akhil_Tomar",
                        "content": "To delete the node we need two parameters whereas we are provided just one , instead of deleting to solve this one can assign the value pointer of the next node to the given node.\\n\\n `node->val=node->next->val;`\\n  `node->next=node->next->next;`\\n\\nThis should do. Leetcode should change this question."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "We can change the value of current node to the value of next node until we reach the end, and if the next node is equal to NULL then we can set current node to NULL"
                    },
                    {
                        "username": "psionl0",
                        "content": "Once I got out of the mind set that I had to delete the node itself the problem became easy. Just copy the next node\\'s val to the current node\\'s val then delete the next node (for which you have a pointer to)."
                    },
                    {
                        "username": "Rahul_Kaper",
                        "content": "is it possible to solve this via recursion?"
                    },
                    {
                        "username": "besseddrest",
                        "content": "given the easy solution (which shall not be posted here), can someone explain why it cannot be simplified further to:\\n `node = node.next`"
                    },
                    {
                        "username": "ishita_gupta21",
                        "content": "This should be marked as Easy."
                    },
                    {
                        "username": "hemanthraaj31",
                        "content": "The problems\\'s title would have been mentioned as \"Delete node value in Linked list\" instead of the actual one. But in the description, it is clear that we should remove the value of given node."
                    },
                    {
                        "username": "spookie886",
                        "content": "I actually do not know how to solve this"
                    },
                    {
                        "username": "uma_gadde",
                        "content": "Can\\'t believe this is a leetcode question!! That too medium level ;)"
                    }
                ]
            },
            {
                "id": 1964293,
                "content": [
                    {
                        "username": "yashbhargava_cs21",
                        "content": "when leet code wants to play with you\\uD83D\\uDE02"
                    },
                    {
                        "username": "Akhil_Tomar",
                        "content": "To delete the node we need two parameters whereas we are provided just one , instead of deleting to solve this one can assign the value pointer of the next node to the given node.\\n\\n `node->val=node->next->val;`\\n  `node->next=node->next->next;`\\n\\nThis should do. Leetcode should change this question."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "We can change the value of current node to the value of next node until we reach the end, and if the next node is equal to NULL then we can set current node to NULL"
                    },
                    {
                        "username": "psionl0",
                        "content": "Once I got out of the mind set that I had to delete the node itself the problem became easy. Just copy the next node\\'s val to the current node\\'s val then delete the next node (for which you have a pointer to)."
                    },
                    {
                        "username": "Rahul_Kaper",
                        "content": "is it possible to solve this via recursion?"
                    },
                    {
                        "username": "besseddrest",
                        "content": "given the easy solution (which shall not be posted here), can someone explain why it cannot be simplified further to:\\n `node = node.next`"
                    },
                    {
                        "username": "ishita_gupta21",
                        "content": "This should be marked as Easy."
                    },
                    {
                        "username": "hemanthraaj31",
                        "content": "The problems\\'s title would have been mentioned as \"Delete node value in Linked list\" instead of the actual one. But in the description, it is clear that we should remove the value of given node."
                    },
                    {
                        "username": "spookie886",
                        "content": "I actually do not know how to solve this"
                    },
                    {
                        "username": "uma_gadde",
                        "content": "Can\\'t believe this is a leetcode question!! That too medium level ;)"
                    }
                ]
            },
            {
                "id": 1964100,
                "content": [
                    {
                        "username": "yashbhargava_cs21",
                        "content": "when leet code wants to play with you\\uD83D\\uDE02"
                    },
                    {
                        "username": "Akhil_Tomar",
                        "content": "To delete the node we need two parameters whereas we are provided just one , instead of deleting to solve this one can assign the value pointer of the next node to the given node.\\n\\n `node->val=node->next->val;`\\n  `node->next=node->next->next;`\\n\\nThis should do. Leetcode should change this question."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "We can change the value of current node to the value of next node until we reach the end, and if the next node is equal to NULL then we can set current node to NULL"
                    },
                    {
                        "username": "psionl0",
                        "content": "Once I got out of the mind set that I had to delete the node itself the problem became easy. Just copy the next node\\'s val to the current node\\'s val then delete the next node (for which you have a pointer to)."
                    },
                    {
                        "username": "Rahul_Kaper",
                        "content": "is it possible to solve this via recursion?"
                    },
                    {
                        "username": "besseddrest",
                        "content": "given the easy solution (which shall not be posted here), can someone explain why it cannot be simplified further to:\\n `node = node.next`"
                    },
                    {
                        "username": "ishita_gupta21",
                        "content": "This should be marked as Easy."
                    },
                    {
                        "username": "hemanthraaj31",
                        "content": "The problems\\'s title would have been mentioned as \"Delete node value in Linked list\" instead of the actual one. But in the description, it is clear that we should remove the value of given node."
                    },
                    {
                        "username": "spookie886",
                        "content": "I actually do not know how to solve this"
                    },
                    {
                        "username": "uma_gadde",
                        "content": "Can\\'t believe this is a leetcode question!! That too medium level ;)"
                    }
                ]
            },
            {
                "id": 1957584,
                "content": [
                    {
                        "username": "yashbhargava_cs21",
                        "content": "when leet code wants to play with you\\uD83D\\uDE02"
                    },
                    {
                        "username": "Akhil_Tomar",
                        "content": "To delete the node we need two parameters whereas we are provided just one , instead of deleting to solve this one can assign the value pointer of the next node to the given node.\\n\\n `node->val=node->next->val;`\\n  `node->next=node->next->next;`\\n\\nThis should do. Leetcode should change this question."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "We can change the value of current node to the value of next node until we reach the end, and if the next node is equal to NULL then we can set current node to NULL"
                    },
                    {
                        "username": "psionl0",
                        "content": "Once I got out of the mind set that I had to delete the node itself the problem became easy. Just copy the next node\\'s val to the current node\\'s val then delete the next node (for which you have a pointer to)."
                    },
                    {
                        "username": "Rahul_Kaper",
                        "content": "is it possible to solve this via recursion?"
                    },
                    {
                        "username": "besseddrest",
                        "content": "given the easy solution (which shall not be posted here), can someone explain why it cannot be simplified further to:\\n `node = node.next`"
                    },
                    {
                        "username": "ishita_gupta21",
                        "content": "This should be marked as Easy."
                    },
                    {
                        "username": "hemanthraaj31",
                        "content": "The problems\\'s title would have been mentioned as \"Delete node value in Linked list\" instead of the actual one. But in the description, it is clear that we should remove the value of given node."
                    },
                    {
                        "username": "spookie886",
                        "content": "I actually do not know how to solve this"
                    },
                    {
                        "username": "uma_gadde",
                        "content": "Can\\'t believe this is a leetcode question!! That too medium level ;)"
                    }
                ]
            },
            {
                "id": 1954561,
                "content": [
                    {
                        "username": "yashbhargava_cs21",
                        "content": "when leet code wants to play with you\\uD83D\\uDE02"
                    },
                    {
                        "username": "Akhil_Tomar",
                        "content": "To delete the node we need two parameters whereas we are provided just one , instead of deleting to solve this one can assign the value pointer of the next node to the given node.\\n\\n `node->val=node->next->val;`\\n  `node->next=node->next->next;`\\n\\nThis should do. Leetcode should change this question."
                    },
                    {
                        "username": "Abhijeet21o9",
                        "content": "We can change the value of current node to the value of next node until we reach the end, and if the next node is equal to NULL then we can set current node to NULL"
                    },
                    {
                        "username": "psionl0",
                        "content": "Once I got out of the mind set that I had to delete the node itself the problem became easy. Just copy the next node\\'s val to the current node\\'s val then delete the next node (for which you have a pointer to)."
                    },
                    {
                        "username": "Rahul_Kaper",
                        "content": "is it possible to solve this via recursion?"
                    },
                    {
                        "username": "besseddrest",
                        "content": "given the easy solution (which shall not be posted here), can someone explain why it cannot be simplified further to:\\n `node = node.next`"
                    },
                    {
                        "username": "ishita_gupta21",
                        "content": "This should be marked as Easy."
                    },
                    {
                        "username": "hemanthraaj31",
                        "content": "The problems\\'s title would have been mentioned as \"Delete node value in Linked list\" instead of the actual one. But in the description, it is clear that we should remove the value of given node."
                    },
                    {
                        "username": "spookie886",
                        "content": "I actually do not know how to solve this"
                    },
                    {
                        "username": "uma_gadde",
                        "content": "Can\\'t believe this is a leetcode question!! That too medium level ;)"
                    }
                ]
            },
            {
                "id": 1950220,
                "content": [
                    {
                        "username": "vyomverma",
                        "content": "easy for a medium level problem"
                    },
                    {
                        "username": "lizzler",
                        "content": "this should be marked as easy!"
                    },
                    {
                        "username": "santhoshsk32",
                        "content": "Why the problem is given with a description that all the values of the linked lists are unique ? Does that have anything to do with the logic for solving this problem??"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "The problem in itself is very easy. But understand what I must do was very hard for me, because of this word \"delete'. In fact, we don't delete this node, we just change its value. The unique node that must be deleted it's the tail node."
                    },
                    {
                        "username": "Hisenberg123",
                        "content": "It took me a while to understand this question right.\\nExample : \\nhead - [1,2,3,4,5,6,7,8,9] , node - 6\\nwe will have access to the linked list from 6, [6,7,8,9]\\n"
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val=node->next->val;\\n       node->next=node->next->next;\\n    }\\n};"
                    },
                    {
                        "username": "Abhi_More",
                        "content": "Node is not to be deleted from memory, and the given node is not last node,\nso, we have to change the val of node and node.next as follows,\n        node.val = node.next.val;\n        node.next = node.next.next; "
                    },
                    {
                        "username": "DosU",
                        "content": "yeap, a medium one"
                    },
                    {
                        "username": "Vithesh",
                        "content": "Bruhh why is this a medium level. Please make it easy one. Question is too straight forward."
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be mark as easy"
                    }
                ]
            },
            {
                "id": 1942038,
                "content": [
                    {
                        "username": "vyomverma",
                        "content": "easy for a medium level problem"
                    },
                    {
                        "username": "lizzler",
                        "content": "this should be marked as easy!"
                    },
                    {
                        "username": "santhoshsk32",
                        "content": "Why the problem is given with a description that all the values of the linked lists are unique ? Does that have anything to do with the logic for solving this problem??"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "The problem in itself is very easy. But understand what I must do was very hard for me, because of this word \"delete'. In fact, we don't delete this node, we just change its value. The unique node that must be deleted it's the tail node."
                    },
                    {
                        "username": "Hisenberg123",
                        "content": "It took me a while to understand this question right.\\nExample : \\nhead - [1,2,3,4,5,6,7,8,9] , node - 6\\nwe will have access to the linked list from 6, [6,7,8,9]\\n"
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val=node->next->val;\\n       node->next=node->next->next;\\n    }\\n};"
                    },
                    {
                        "username": "Abhi_More",
                        "content": "Node is not to be deleted from memory, and the given node is not last node,\nso, we have to change the val of node and node.next as follows,\n        node.val = node.next.val;\n        node.next = node.next.next; "
                    },
                    {
                        "username": "DosU",
                        "content": "yeap, a medium one"
                    },
                    {
                        "username": "Vithesh",
                        "content": "Bruhh why is this a medium level. Please make it easy one. Question is too straight forward."
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be mark as easy"
                    }
                ]
            },
            {
                "id": 1930789,
                "content": [
                    {
                        "username": "vyomverma",
                        "content": "easy for a medium level problem"
                    },
                    {
                        "username": "lizzler",
                        "content": "this should be marked as easy!"
                    },
                    {
                        "username": "santhoshsk32",
                        "content": "Why the problem is given with a description that all the values of the linked lists are unique ? Does that have anything to do with the logic for solving this problem??"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "The problem in itself is very easy. But understand what I must do was very hard for me, because of this word \"delete'. In fact, we don't delete this node, we just change its value. The unique node that must be deleted it's the tail node."
                    },
                    {
                        "username": "Hisenberg123",
                        "content": "It took me a while to understand this question right.\\nExample : \\nhead - [1,2,3,4,5,6,7,8,9] , node - 6\\nwe will have access to the linked list from 6, [6,7,8,9]\\n"
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val=node->next->val;\\n       node->next=node->next->next;\\n    }\\n};"
                    },
                    {
                        "username": "Abhi_More",
                        "content": "Node is not to be deleted from memory, and the given node is not last node,\nso, we have to change the val of node and node.next as follows,\n        node.val = node.next.val;\n        node.next = node.next.next; "
                    },
                    {
                        "username": "DosU",
                        "content": "yeap, a medium one"
                    },
                    {
                        "username": "Vithesh",
                        "content": "Bruhh why is this a medium level. Please make it easy one. Question is too straight forward."
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be mark as easy"
                    }
                ]
            },
            {
                "id": 1908532,
                "content": [
                    {
                        "username": "vyomverma",
                        "content": "easy for a medium level problem"
                    },
                    {
                        "username": "lizzler",
                        "content": "this should be marked as easy!"
                    },
                    {
                        "username": "santhoshsk32",
                        "content": "Why the problem is given with a description that all the values of the linked lists are unique ? Does that have anything to do with the logic for solving this problem??"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "The problem in itself is very easy. But understand what I must do was very hard for me, because of this word \"delete'. In fact, we don't delete this node, we just change its value. The unique node that must be deleted it's the tail node."
                    },
                    {
                        "username": "Hisenberg123",
                        "content": "It took me a while to understand this question right.\\nExample : \\nhead - [1,2,3,4,5,6,7,8,9] , node - 6\\nwe will have access to the linked list from 6, [6,7,8,9]\\n"
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val=node->next->val;\\n       node->next=node->next->next;\\n    }\\n};"
                    },
                    {
                        "username": "Abhi_More",
                        "content": "Node is not to be deleted from memory, and the given node is not last node,\nso, we have to change the val of node and node.next as follows,\n        node.val = node.next.val;\n        node.next = node.next.next; "
                    },
                    {
                        "username": "DosU",
                        "content": "yeap, a medium one"
                    },
                    {
                        "username": "Vithesh",
                        "content": "Bruhh why is this a medium level. Please make it easy one. Question is too straight forward."
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be mark as easy"
                    }
                ]
            },
            {
                "id": 1867013,
                "content": [
                    {
                        "username": "vyomverma",
                        "content": "easy for a medium level problem"
                    },
                    {
                        "username": "lizzler",
                        "content": "this should be marked as easy!"
                    },
                    {
                        "username": "santhoshsk32",
                        "content": "Why the problem is given with a description that all the values of the linked lists are unique ? Does that have anything to do with the logic for solving this problem??"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "The problem in itself is very easy. But understand what I must do was very hard for me, because of this word \"delete'. In fact, we don't delete this node, we just change its value. The unique node that must be deleted it's the tail node."
                    },
                    {
                        "username": "Hisenberg123",
                        "content": "It took me a while to understand this question right.\\nExample : \\nhead - [1,2,3,4,5,6,7,8,9] , node - 6\\nwe will have access to the linked list from 6, [6,7,8,9]\\n"
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val=node->next->val;\\n       node->next=node->next->next;\\n    }\\n};"
                    },
                    {
                        "username": "Abhi_More",
                        "content": "Node is not to be deleted from memory, and the given node is not last node,\nso, we have to change the val of node and node.next as follows,\n        node.val = node.next.val;\n        node.next = node.next.next; "
                    },
                    {
                        "username": "DosU",
                        "content": "yeap, a medium one"
                    },
                    {
                        "username": "Vithesh",
                        "content": "Bruhh why is this a medium level. Please make it easy one. Question is too straight forward."
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be mark as easy"
                    }
                ]
            },
            {
                "id": 1844349,
                "content": [
                    {
                        "username": "vyomverma",
                        "content": "easy for a medium level problem"
                    },
                    {
                        "username": "lizzler",
                        "content": "this should be marked as easy!"
                    },
                    {
                        "username": "santhoshsk32",
                        "content": "Why the problem is given with a description that all the values of the linked lists are unique ? Does that have anything to do with the logic for solving this problem??"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "The problem in itself is very easy. But understand what I must do was very hard for me, because of this word \"delete'. In fact, we don't delete this node, we just change its value. The unique node that must be deleted it's the tail node."
                    },
                    {
                        "username": "Hisenberg123",
                        "content": "It took me a while to understand this question right.\\nExample : \\nhead - [1,2,3,4,5,6,7,8,9] , node - 6\\nwe will have access to the linked list from 6, [6,7,8,9]\\n"
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val=node->next->val;\\n       node->next=node->next->next;\\n    }\\n};"
                    },
                    {
                        "username": "Abhi_More",
                        "content": "Node is not to be deleted from memory, and the given node is not last node,\nso, we have to change the val of node and node.next as follows,\n        node.val = node.next.val;\n        node.next = node.next.next; "
                    },
                    {
                        "username": "DosU",
                        "content": "yeap, a medium one"
                    },
                    {
                        "username": "Vithesh",
                        "content": "Bruhh why is this a medium level. Please make it easy one. Question is too straight forward."
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be mark as easy"
                    }
                ]
            },
            {
                "id": 1842748,
                "content": [
                    {
                        "username": "vyomverma",
                        "content": "easy for a medium level problem"
                    },
                    {
                        "username": "lizzler",
                        "content": "this should be marked as easy!"
                    },
                    {
                        "username": "santhoshsk32",
                        "content": "Why the problem is given with a description that all the values of the linked lists are unique ? Does that have anything to do with the logic for solving this problem??"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "The problem in itself is very easy. But understand what I must do was very hard for me, because of this word \"delete'. In fact, we don't delete this node, we just change its value. The unique node that must be deleted it's the tail node."
                    },
                    {
                        "username": "Hisenberg123",
                        "content": "It took me a while to understand this question right.\\nExample : \\nhead - [1,2,3,4,5,6,7,8,9] , node - 6\\nwe will have access to the linked list from 6, [6,7,8,9]\\n"
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val=node->next->val;\\n       node->next=node->next->next;\\n    }\\n};"
                    },
                    {
                        "username": "Abhi_More",
                        "content": "Node is not to be deleted from memory, and the given node is not last node,\nso, we have to change the val of node and node.next as follows,\n        node.val = node.next.val;\n        node.next = node.next.next; "
                    },
                    {
                        "username": "DosU",
                        "content": "yeap, a medium one"
                    },
                    {
                        "username": "Vithesh",
                        "content": "Bruhh why is this a medium level. Please make it easy one. Question is too straight forward."
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be mark as easy"
                    }
                ]
            },
            {
                "id": 1841981,
                "content": [
                    {
                        "username": "vyomverma",
                        "content": "easy for a medium level problem"
                    },
                    {
                        "username": "lizzler",
                        "content": "this should be marked as easy!"
                    },
                    {
                        "username": "santhoshsk32",
                        "content": "Why the problem is given with a description that all the values of the linked lists are unique ? Does that have anything to do with the logic for solving this problem??"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "The problem in itself is very easy. But understand what I must do was very hard for me, because of this word \"delete'. In fact, we don't delete this node, we just change its value. The unique node that must be deleted it's the tail node."
                    },
                    {
                        "username": "Hisenberg123",
                        "content": "It took me a while to understand this question right.\\nExample : \\nhead - [1,2,3,4,5,6,7,8,9] , node - 6\\nwe will have access to the linked list from 6, [6,7,8,9]\\n"
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val=node->next->val;\\n       node->next=node->next->next;\\n    }\\n};"
                    },
                    {
                        "username": "Abhi_More",
                        "content": "Node is not to be deleted from memory, and the given node is not last node,\nso, we have to change the val of node and node.next as follows,\n        node.val = node.next.val;\n        node.next = node.next.next; "
                    },
                    {
                        "username": "DosU",
                        "content": "yeap, a medium one"
                    },
                    {
                        "username": "Vithesh",
                        "content": "Bruhh why is this a medium level. Please make it easy one. Question is too straight forward."
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be mark as easy"
                    }
                ]
            },
            {
                "id": 1838265,
                "content": [
                    {
                        "username": "vyomverma",
                        "content": "easy for a medium level problem"
                    },
                    {
                        "username": "lizzler",
                        "content": "this should be marked as easy!"
                    },
                    {
                        "username": "santhoshsk32",
                        "content": "Why the problem is given with a description that all the values of the linked lists are unique ? Does that have anything to do with the logic for solving this problem??"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "The problem in itself is very easy. But understand what I must do was very hard for me, because of this word \"delete'. In fact, we don't delete this node, we just change its value. The unique node that must be deleted it's the tail node."
                    },
                    {
                        "username": "Hisenberg123",
                        "content": "It took me a while to understand this question right.\\nExample : \\nhead - [1,2,3,4,5,6,7,8,9] , node - 6\\nwe will have access to the linked list from 6, [6,7,8,9]\\n"
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val=node->next->val;\\n       node->next=node->next->next;\\n    }\\n};"
                    },
                    {
                        "username": "Abhi_More",
                        "content": "Node is not to be deleted from memory, and the given node is not last node,\nso, we have to change the val of node and node.next as follows,\n        node.val = node.next.val;\n        node.next = node.next.next; "
                    },
                    {
                        "username": "DosU",
                        "content": "yeap, a medium one"
                    },
                    {
                        "username": "Vithesh",
                        "content": "Bruhh why is this a medium level. Please make it easy one. Question is too straight forward."
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be mark as easy"
                    }
                ]
            },
            {
                "id": 1826613,
                "content": [
                    {
                        "username": "vyomverma",
                        "content": "easy for a medium level problem"
                    },
                    {
                        "username": "lizzler",
                        "content": "this should be marked as easy!"
                    },
                    {
                        "username": "santhoshsk32",
                        "content": "Why the problem is given with a description that all the values of the linked lists are unique ? Does that have anything to do with the logic for solving this problem??"
                    },
                    {
                        "username": "hafid-hub",
                        "content": "The problem in itself is very easy. But understand what I must do was very hard for me, because of this word \"delete'. In fact, we don't delete this node, we just change its value. The unique node that must be deleted it's the tail node."
                    },
                    {
                        "username": "Hisenberg123",
                        "content": "It took me a while to understand this question right.\\nExample : \\nhead - [1,2,3,4,5,6,7,8,9] , node - 6\\nwe will have access to the linked list from 6, [6,7,8,9]\\n"
                    },
                    {
                        "username": "nitishrawat2002",
                        "content": "class Solution {\\npublic:\\n    void deleteNode(ListNode* node) {\\n       node->val=node->next->val;\\n       node->next=node->next->next;\\n    }\\n};"
                    },
                    {
                        "username": "Abhi_More",
                        "content": "Node is not to be deleted from memory, and the given node is not last node,\nso, we have to change the val of node and node.next as follows,\n        node.val = node.next.val;\n        node.next = node.next.next; "
                    },
                    {
                        "username": "DosU",
                        "content": "yeap, a medium one"
                    },
                    {
                        "username": "Vithesh",
                        "content": "Bruhh why is this a medium level. Please make it easy one. Question is too straight forward."
                    },
                    {
                        "username": "Michael_Teng6",
                        "content": "This should be mark as easy"
                    }
                ]
            },
            {
                "id": 1807883,
                "content": [
                    {
                        "username": "bortengineer",
                        "content": "Trick question :/\\nRename it from \"Delete a node\" to \"Remove a value from a list\"."
                    },
                    {
                        "username": "vikashkumarmishra14",
                        "content": "why is this medium ??"
                    },
                    {
                        "username": "Saurabhgiriltp",
                        "content": "interesting , if you are confused with that question then print the given note at a time , then you can able to understand , why this question consist only one parameter .................................. "
                    },
                    {
                        "username": "crazysamurai",
                        "content": "You DON\\'T have to \"Delete\""
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/solutions/3136202/js-two-solution-constant-time-constant-space-explanation/\\n\\nConst Space and Time with 2 solution with explanation"
                    },
                    {
                        "username": "bhaskarsaini",
                        "content": "As the given function is void type so no need to worry about return anything.\\n Just think how you could change things with only given node."
                    },
                    {
                        "username": "contactaditya832126",
                        "content": "So seems like a stupid question, Right?\\nNo it\\'s not, it\\'s an intresting one\\nactually what do we need to do is just swap the values of current node and the next node and take the given node to last and remove it.\\nIt says in Problem that removing node means:-\\n\"The value of the given node should not exist in the linked list.\"\\nalso the number of nodes should reduce by one\\n\\n"
                    },
                    {
                        "username": "RuntimeTerror16",
                        "content": "I don\\'t understood the problem. Second parameter is missing in function"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/237_Delete_Node_in_a_Linked_List.cpp"
                    },
                    {
                        "username": "vyomverma",
                        "content": "Head kaha hai...!!"
                    }
                ]
            },
            {
                "id": 1793693,
                "content": [
                    {
                        "username": "bortengineer",
                        "content": "Trick question :/\\nRename it from \"Delete a node\" to \"Remove a value from a list\"."
                    },
                    {
                        "username": "vikashkumarmishra14",
                        "content": "why is this medium ??"
                    },
                    {
                        "username": "Saurabhgiriltp",
                        "content": "interesting , if you are confused with that question then print the given note at a time , then you can able to understand , why this question consist only one parameter .................................. "
                    },
                    {
                        "username": "crazysamurai",
                        "content": "You DON\\'T have to \"Delete\""
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/solutions/3136202/js-two-solution-constant-time-constant-space-explanation/\\n\\nConst Space and Time with 2 solution with explanation"
                    },
                    {
                        "username": "bhaskarsaini",
                        "content": "As the given function is void type so no need to worry about return anything.\\n Just think how you could change things with only given node."
                    },
                    {
                        "username": "contactaditya832126",
                        "content": "So seems like a stupid question, Right?\\nNo it\\'s not, it\\'s an intresting one\\nactually what do we need to do is just swap the values of current node and the next node and take the given node to last and remove it.\\nIt says in Problem that removing node means:-\\n\"The value of the given node should not exist in the linked list.\"\\nalso the number of nodes should reduce by one\\n\\n"
                    },
                    {
                        "username": "RuntimeTerror16",
                        "content": "I don\\'t understood the problem. Second parameter is missing in function"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/237_Delete_Node_in_a_Linked_List.cpp"
                    },
                    {
                        "username": "vyomverma",
                        "content": "Head kaha hai...!!"
                    }
                ]
            },
            {
                "id": 1789036,
                "content": [
                    {
                        "username": "bortengineer",
                        "content": "Trick question :/\\nRename it from \"Delete a node\" to \"Remove a value from a list\"."
                    },
                    {
                        "username": "vikashkumarmishra14",
                        "content": "why is this medium ??"
                    },
                    {
                        "username": "Saurabhgiriltp",
                        "content": "interesting , if you are confused with that question then print the given note at a time , then you can able to understand , why this question consist only one parameter .................................. "
                    },
                    {
                        "username": "crazysamurai",
                        "content": "You DON\\'T have to \"Delete\""
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/solutions/3136202/js-two-solution-constant-time-constant-space-explanation/\\n\\nConst Space and Time with 2 solution with explanation"
                    },
                    {
                        "username": "bhaskarsaini",
                        "content": "As the given function is void type so no need to worry about return anything.\\n Just think how you could change things with only given node."
                    },
                    {
                        "username": "contactaditya832126",
                        "content": "So seems like a stupid question, Right?\\nNo it\\'s not, it\\'s an intresting one\\nactually what do we need to do is just swap the values of current node and the next node and take the given node to last and remove it.\\nIt says in Problem that removing node means:-\\n\"The value of the given node should not exist in the linked list.\"\\nalso the number of nodes should reduce by one\\n\\n"
                    },
                    {
                        "username": "RuntimeTerror16",
                        "content": "I don\\'t understood the problem. Second parameter is missing in function"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/237_Delete_Node_in_a_Linked_List.cpp"
                    },
                    {
                        "username": "vyomverma",
                        "content": "Head kaha hai...!!"
                    }
                ]
            },
            {
                "id": 1786847,
                "content": [
                    {
                        "username": "bortengineer",
                        "content": "Trick question :/\\nRename it from \"Delete a node\" to \"Remove a value from a list\"."
                    },
                    {
                        "username": "vikashkumarmishra14",
                        "content": "why is this medium ??"
                    },
                    {
                        "username": "Saurabhgiriltp",
                        "content": "interesting , if you are confused with that question then print the given note at a time , then you can able to understand , why this question consist only one parameter .................................. "
                    },
                    {
                        "username": "crazysamurai",
                        "content": "You DON\\'T have to \"Delete\""
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/solutions/3136202/js-two-solution-constant-time-constant-space-explanation/\\n\\nConst Space and Time with 2 solution with explanation"
                    },
                    {
                        "username": "bhaskarsaini",
                        "content": "As the given function is void type so no need to worry about return anything.\\n Just think how you could change things with only given node."
                    },
                    {
                        "username": "contactaditya832126",
                        "content": "So seems like a stupid question, Right?\\nNo it\\'s not, it\\'s an intresting one\\nactually what do we need to do is just swap the values of current node and the next node and take the given node to last and remove it.\\nIt says in Problem that removing node means:-\\n\"The value of the given node should not exist in the linked list.\"\\nalso the number of nodes should reduce by one\\n\\n"
                    },
                    {
                        "username": "RuntimeTerror16",
                        "content": "I don\\'t understood the problem. Second parameter is missing in function"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/237_Delete_Node_in_a_Linked_List.cpp"
                    },
                    {
                        "username": "vyomverma",
                        "content": "Head kaha hai...!!"
                    }
                ]
            },
            {
                "id": 1786024,
                "content": [
                    {
                        "username": "bortengineer",
                        "content": "Trick question :/\\nRename it from \"Delete a node\" to \"Remove a value from a list\"."
                    },
                    {
                        "username": "vikashkumarmishra14",
                        "content": "why is this medium ??"
                    },
                    {
                        "username": "Saurabhgiriltp",
                        "content": "interesting , if you are confused with that question then print the given note at a time , then you can able to understand , why this question consist only one parameter .................................. "
                    },
                    {
                        "username": "crazysamurai",
                        "content": "You DON\\'T have to \"Delete\""
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/solutions/3136202/js-two-solution-constant-time-constant-space-explanation/\\n\\nConst Space and Time with 2 solution with explanation"
                    },
                    {
                        "username": "bhaskarsaini",
                        "content": "As the given function is void type so no need to worry about return anything.\\n Just think how you could change things with only given node."
                    },
                    {
                        "username": "contactaditya832126",
                        "content": "So seems like a stupid question, Right?\\nNo it\\'s not, it\\'s an intresting one\\nactually what do we need to do is just swap the values of current node and the next node and take the given node to last and remove it.\\nIt says in Problem that removing node means:-\\n\"The value of the given node should not exist in the linked list.\"\\nalso the number of nodes should reduce by one\\n\\n"
                    },
                    {
                        "username": "RuntimeTerror16",
                        "content": "I don\\'t understood the problem. Second parameter is missing in function"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/237_Delete_Node_in_a_Linked_List.cpp"
                    },
                    {
                        "username": "vyomverma",
                        "content": "Head kaha hai...!!"
                    }
                ]
            },
            {
                "id": 1783579,
                "content": [
                    {
                        "username": "bortengineer",
                        "content": "Trick question :/\\nRename it from \"Delete a node\" to \"Remove a value from a list\"."
                    },
                    {
                        "username": "vikashkumarmishra14",
                        "content": "why is this medium ??"
                    },
                    {
                        "username": "Saurabhgiriltp",
                        "content": "interesting , if you are confused with that question then print the given note at a time , then you can able to understand , why this question consist only one parameter .................................. "
                    },
                    {
                        "username": "crazysamurai",
                        "content": "You DON\\'T have to \"Delete\""
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/solutions/3136202/js-two-solution-constant-time-constant-space-explanation/\\n\\nConst Space and Time with 2 solution with explanation"
                    },
                    {
                        "username": "bhaskarsaini",
                        "content": "As the given function is void type so no need to worry about return anything.\\n Just think how you could change things with only given node."
                    },
                    {
                        "username": "contactaditya832126",
                        "content": "So seems like a stupid question, Right?\\nNo it\\'s not, it\\'s an intresting one\\nactually what do we need to do is just swap the values of current node and the next node and take the given node to last and remove it.\\nIt says in Problem that removing node means:-\\n\"The value of the given node should not exist in the linked list.\"\\nalso the number of nodes should reduce by one\\n\\n"
                    },
                    {
                        "username": "RuntimeTerror16",
                        "content": "I don\\'t understood the problem. Second parameter is missing in function"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/237_Delete_Node_in_a_Linked_List.cpp"
                    },
                    {
                        "username": "vyomverma",
                        "content": "Head kaha hai...!!"
                    }
                ]
            },
            {
                "id": 1777401,
                "content": [
                    {
                        "username": "bortengineer",
                        "content": "Trick question :/\\nRename it from \"Delete a node\" to \"Remove a value from a list\"."
                    },
                    {
                        "username": "vikashkumarmishra14",
                        "content": "why is this medium ??"
                    },
                    {
                        "username": "Saurabhgiriltp",
                        "content": "interesting , if you are confused with that question then print the given note at a time , then you can able to understand , why this question consist only one parameter .................................. "
                    },
                    {
                        "username": "crazysamurai",
                        "content": "You DON\\'T have to \"Delete\""
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/solutions/3136202/js-two-solution-constant-time-constant-space-explanation/\\n\\nConst Space and Time with 2 solution with explanation"
                    },
                    {
                        "username": "bhaskarsaini",
                        "content": "As the given function is void type so no need to worry about return anything.\\n Just think how you could change things with only given node."
                    },
                    {
                        "username": "contactaditya832126",
                        "content": "So seems like a stupid question, Right?\\nNo it\\'s not, it\\'s an intresting one\\nactually what do we need to do is just swap the values of current node and the next node and take the given node to last and remove it.\\nIt says in Problem that removing node means:-\\n\"The value of the given node should not exist in the linked list.\"\\nalso the number of nodes should reduce by one\\n\\n"
                    },
                    {
                        "username": "RuntimeTerror16",
                        "content": "I don\\'t understood the problem. Second parameter is missing in function"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/237_Delete_Node_in_a_Linked_List.cpp"
                    },
                    {
                        "username": "vyomverma",
                        "content": "Head kaha hai...!!"
                    }
                ]
            },
            {
                "id": 1777189,
                "content": [
                    {
                        "username": "bortengineer",
                        "content": "Trick question :/\\nRename it from \"Delete a node\" to \"Remove a value from a list\"."
                    },
                    {
                        "username": "vikashkumarmishra14",
                        "content": "why is this medium ??"
                    },
                    {
                        "username": "Saurabhgiriltp",
                        "content": "interesting , if you are confused with that question then print the given note at a time , then you can able to understand , why this question consist only one parameter .................................. "
                    },
                    {
                        "username": "crazysamurai",
                        "content": "You DON\\'T have to \"Delete\""
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/solutions/3136202/js-two-solution-constant-time-constant-space-explanation/\\n\\nConst Space and Time with 2 solution with explanation"
                    },
                    {
                        "username": "bhaskarsaini",
                        "content": "As the given function is void type so no need to worry about return anything.\\n Just think how you could change things with only given node."
                    },
                    {
                        "username": "contactaditya832126",
                        "content": "So seems like a stupid question, Right?\\nNo it\\'s not, it\\'s an intresting one\\nactually what do we need to do is just swap the values of current node and the next node and take the given node to last and remove it.\\nIt says in Problem that removing node means:-\\n\"The value of the given node should not exist in the linked list.\"\\nalso the number of nodes should reduce by one\\n\\n"
                    },
                    {
                        "username": "RuntimeTerror16",
                        "content": "I don\\'t understood the problem. Second parameter is missing in function"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/237_Delete_Node_in_a_Linked_List.cpp"
                    },
                    {
                        "username": "vyomverma",
                        "content": "Head kaha hai...!!"
                    }
                ]
            },
            {
                "id": 1772543,
                "content": [
                    {
                        "username": "bortengineer",
                        "content": "Trick question :/\\nRename it from \"Delete a node\" to \"Remove a value from a list\"."
                    },
                    {
                        "username": "vikashkumarmishra14",
                        "content": "why is this medium ??"
                    },
                    {
                        "username": "Saurabhgiriltp",
                        "content": "interesting , if you are confused with that question then print the given note at a time , then you can able to understand , why this question consist only one parameter .................................. "
                    },
                    {
                        "username": "crazysamurai",
                        "content": "You DON\\'T have to \"Delete\""
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/solutions/3136202/js-two-solution-constant-time-constant-space-explanation/\\n\\nConst Space and Time with 2 solution with explanation"
                    },
                    {
                        "username": "bhaskarsaini",
                        "content": "As the given function is void type so no need to worry about return anything.\\n Just think how you could change things with only given node."
                    },
                    {
                        "username": "contactaditya832126",
                        "content": "So seems like a stupid question, Right?\\nNo it\\'s not, it\\'s an intresting one\\nactually what do we need to do is just swap the values of current node and the next node and take the given node to last and remove it.\\nIt says in Problem that removing node means:-\\n\"The value of the given node should not exist in the linked list.\"\\nalso the number of nodes should reduce by one\\n\\n"
                    },
                    {
                        "username": "RuntimeTerror16",
                        "content": "I don\\'t understood the problem. Second parameter is missing in function"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/237_Delete_Node_in_a_Linked_List.cpp"
                    },
                    {
                        "username": "vyomverma",
                        "content": "Head kaha hai...!!"
                    }
                ]
            },
            {
                "id": 1770150,
                "content": [
                    {
                        "username": "bortengineer",
                        "content": "Trick question :/\\nRename it from \"Delete a node\" to \"Remove a value from a list\"."
                    },
                    {
                        "username": "vikashkumarmishra14",
                        "content": "why is this medium ??"
                    },
                    {
                        "username": "Saurabhgiriltp",
                        "content": "interesting , if you are confused with that question then print the given note at a time , then you can able to understand , why this question consist only one parameter .................................. "
                    },
                    {
                        "username": "crazysamurai",
                        "content": "You DON\\'T have to \"Delete\""
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/solutions/3136202/js-two-solution-constant-time-constant-space-explanation/\\n\\nConst Space and Time with 2 solution with explanation"
                    },
                    {
                        "username": "bhaskarsaini",
                        "content": "As the given function is void type so no need to worry about return anything.\\n Just think how you could change things with only given node."
                    },
                    {
                        "username": "contactaditya832126",
                        "content": "So seems like a stupid question, Right?\\nNo it\\'s not, it\\'s an intresting one\\nactually what do we need to do is just swap the values of current node and the next node and take the given node to last and remove it.\\nIt says in Problem that removing node means:-\\n\"The value of the given node should not exist in the linked list.\"\\nalso the number of nodes should reduce by one\\n\\n"
                    },
                    {
                        "username": "RuntimeTerror16",
                        "content": "I don\\'t understood the problem. Second parameter is missing in function"
                    },
                    {
                        "username": "AnkushR10",
                        "content": "https://github.com/AnkushRawat10601/Leetcode/blob/main/237_Delete_Node_in_a_Linked_List.cpp"
                    },
                    {
                        "username": "vyomverma",
                        "content": "Head kaha hai...!!"
                    }
                ]
            },
            {
                "id": 1766951,
                "content": [
                    {
                        "username": "shekharshashank",
                        "content": "How is this questions marked as a medium level question. "
                    },
                    {
                        "username": "aditya_sharma_024",
                        "content": "two parameters should be given in the question. this question is not understable"
                    },
                    {
                        "username": "mars_999",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/comments/1746990"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "hrishavratan",
                        "content": "Do not try to remove the node , in fact copy value of next node to this node and remove next node."
                    },
                    {
                        "username": "Goro_Majima",
                        "content": "Think Like this, If we can\\'t delete the node physically(I mean the way we traditionally do), can we do something with copying the elements.\\nMost important Hint -> Think in terms of tail While solving this question like what will become of the new tail.\\nGood Luck!"
                    },
                    {
                        "username": "Roshan_04",
                        "content": "What if the given node is last node?"
                    },
                    {
                        "username": "mars_999",
                        "content": "1. If the given node(to delete) is last node, then we need to make the previous node\\'s next to be null . Without providing head of the singly linked list, there is no other way we can reach the previous node."
                    },
                    {
                        "username": "mars_999",
                        "content": "Although tricky, this problem should be tagged as easy.  Actually a good question , it is not deleting the node. But the description of the question explains everything."
                    },
                    {
                        "username": "user5822gZ",
                        "content": "The fact that it's Medium made me think longer than I should on this, and I came up with the exact same solution I would've done if it was marked Easy. Weird difficulty, I probably am missing something, but not in the task itself, but in the perception of it."
                    },
                    {
                        "username": "rohan-zende",
                        "content": "Logical Question ."
                    },
                    {
                        "username": "shivanigam",
                        "content": "since node was not a tail \\nwe can use \\n     node.val=node.next.val;\\n        node.next=node.next.next;\\n\\nand if node was a tail we gett a error here because node.next wouldnt be existed if it was not a tail.."
                    }
                ]
            },
            {
                "id": 1765175,
                "content": [
                    {
                        "username": "shekharshashank",
                        "content": "How is this questions marked as a medium level question. "
                    },
                    {
                        "username": "aditya_sharma_024",
                        "content": "two parameters should be given in the question. this question is not understable"
                    },
                    {
                        "username": "mars_999",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/comments/1746990"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "hrishavratan",
                        "content": "Do not try to remove the node , in fact copy value of next node to this node and remove next node."
                    },
                    {
                        "username": "Goro_Majima",
                        "content": "Think Like this, If we can\\'t delete the node physically(I mean the way we traditionally do), can we do something with copying the elements.\\nMost important Hint -> Think in terms of tail While solving this question like what will become of the new tail.\\nGood Luck!"
                    },
                    {
                        "username": "Roshan_04",
                        "content": "What if the given node is last node?"
                    },
                    {
                        "username": "mars_999",
                        "content": "1. If the given node(to delete) is last node, then we need to make the previous node\\'s next to be null . Without providing head of the singly linked list, there is no other way we can reach the previous node."
                    },
                    {
                        "username": "mars_999",
                        "content": "Although tricky, this problem should be tagged as easy.  Actually a good question , it is not deleting the node. But the description of the question explains everything."
                    },
                    {
                        "username": "user5822gZ",
                        "content": "The fact that it's Medium made me think longer than I should on this, and I came up with the exact same solution I would've done if it was marked Easy. Weird difficulty, I probably am missing something, but not in the task itself, but in the perception of it."
                    },
                    {
                        "username": "rohan-zende",
                        "content": "Logical Question ."
                    },
                    {
                        "username": "shivanigam",
                        "content": "since node was not a tail \\nwe can use \\n     node.val=node.next.val;\\n        node.next=node.next.next;\\n\\nand if node was a tail we gett a error here because node.next wouldnt be existed if it was not a tail.."
                    }
                ]
            },
            {
                "id": 1761837,
                "content": [
                    {
                        "username": "shekharshashank",
                        "content": "How is this questions marked as a medium level question. "
                    },
                    {
                        "username": "aditya_sharma_024",
                        "content": "two parameters should be given in the question. this question is not understable"
                    },
                    {
                        "username": "mars_999",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/comments/1746990"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "hrishavratan",
                        "content": "Do not try to remove the node , in fact copy value of next node to this node and remove next node."
                    },
                    {
                        "username": "Goro_Majima",
                        "content": "Think Like this, If we can\\'t delete the node physically(I mean the way we traditionally do), can we do something with copying the elements.\\nMost important Hint -> Think in terms of tail While solving this question like what will become of the new tail.\\nGood Luck!"
                    },
                    {
                        "username": "Roshan_04",
                        "content": "What if the given node is last node?"
                    },
                    {
                        "username": "mars_999",
                        "content": "1. If the given node(to delete) is last node, then we need to make the previous node\\'s next to be null . Without providing head of the singly linked list, there is no other way we can reach the previous node."
                    },
                    {
                        "username": "mars_999",
                        "content": "Although tricky, this problem should be tagged as easy.  Actually a good question , it is not deleting the node. But the description of the question explains everything."
                    },
                    {
                        "username": "user5822gZ",
                        "content": "The fact that it's Medium made me think longer than I should on this, and I came up with the exact same solution I would've done if it was marked Easy. Weird difficulty, I probably am missing something, but not in the task itself, but in the perception of it."
                    },
                    {
                        "username": "rohan-zende",
                        "content": "Logical Question ."
                    },
                    {
                        "username": "shivanigam",
                        "content": "since node was not a tail \\nwe can use \\n     node.val=node.next.val;\\n        node.next=node.next.next;\\n\\nand if node was a tail we gett a error here because node.next wouldnt be existed if it was not a tail.."
                    }
                ]
            },
            {
                "id": 1761593,
                "content": [
                    {
                        "username": "shekharshashank",
                        "content": "How is this questions marked as a medium level question. "
                    },
                    {
                        "username": "aditya_sharma_024",
                        "content": "two parameters should be given in the question. this question is not understable"
                    },
                    {
                        "username": "mars_999",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/comments/1746990"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "hrishavratan",
                        "content": "Do not try to remove the node , in fact copy value of next node to this node and remove next node."
                    },
                    {
                        "username": "Goro_Majima",
                        "content": "Think Like this, If we can\\'t delete the node physically(I mean the way we traditionally do), can we do something with copying the elements.\\nMost important Hint -> Think in terms of tail While solving this question like what will become of the new tail.\\nGood Luck!"
                    },
                    {
                        "username": "Roshan_04",
                        "content": "What if the given node is last node?"
                    },
                    {
                        "username": "mars_999",
                        "content": "1. If the given node(to delete) is last node, then we need to make the previous node\\'s next to be null . Without providing head of the singly linked list, there is no other way we can reach the previous node."
                    },
                    {
                        "username": "mars_999",
                        "content": "Although tricky, this problem should be tagged as easy.  Actually a good question , it is not deleting the node. But the description of the question explains everything."
                    },
                    {
                        "username": "user5822gZ",
                        "content": "The fact that it's Medium made me think longer than I should on this, and I came up with the exact same solution I would've done if it was marked Easy. Weird difficulty, I probably am missing something, but not in the task itself, but in the perception of it."
                    },
                    {
                        "username": "rohan-zende",
                        "content": "Logical Question ."
                    },
                    {
                        "username": "shivanigam",
                        "content": "since node was not a tail \\nwe can use \\n     node.val=node.next.val;\\n        node.next=node.next.next;\\n\\nand if node was a tail we gett a error here because node.next wouldnt be existed if it was not a tail.."
                    }
                ]
            },
            {
                "id": 1760468,
                "content": [
                    {
                        "username": "shekharshashank",
                        "content": "How is this questions marked as a medium level question. "
                    },
                    {
                        "username": "aditya_sharma_024",
                        "content": "two parameters should be given in the question. this question is not understable"
                    },
                    {
                        "username": "mars_999",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/comments/1746990"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "hrishavratan",
                        "content": "Do not try to remove the node , in fact copy value of next node to this node and remove next node."
                    },
                    {
                        "username": "Goro_Majima",
                        "content": "Think Like this, If we can\\'t delete the node physically(I mean the way we traditionally do), can we do something with copying the elements.\\nMost important Hint -> Think in terms of tail While solving this question like what will become of the new tail.\\nGood Luck!"
                    },
                    {
                        "username": "Roshan_04",
                        "content": "What if the given node is last node?"
                    },
                    {
                        "username": "mars_999",
                        "content": "1. If the given node(to delete) is last node, then we need to make the previous node\\'s next to be null . Without providing head of the singly linked list, there is no other way we can reach the previous node."
                    },
                    {
                        "username": "mars_999",
                        "content": "Although tricky, this problem should be tagged as easy.  Actually a good question , it is not deleting the node. But the description of the question explains everything."
                    },
                    {
                        "username": "user5822gZ",
                        "content": "The fact that it's Medium made me think longer than I should on this, and I came up with the exact same solution I would've done if it was marked Easy. Weird difficulty, I probably am missing something, but not in the task itself, but in the perception of it."
                    },
                    {
                        "username": "rohan-zende",
                        "content": "Logical Question ."
                    },
                    {
                        "username": "shivanigam",
                        "content": "since node was not a tail \\nwe can use \\n     node.val=node.next.val;\\n        node.next=node.next.next;\\n\\nand if node was a tail we gett a error here because node.next wouldnt be existed if it was not a tail.."
                    }
                ]
            },
            {
                "id": 1748435,
                "content": [
                    {
                        "username": "shekharshashank",
                        "content": "How is this questions marked as a medium level question. "
                    },
                    {
                        "username": "aditya_sharma_024",
                        "content": "two parameters should be given in the question. this question is not understable"
                    },
                    {
                        "username": "mars_999",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/comments/1746990"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "hrishavratan",
                        "content": "Do not try to remove the node , in fact copy value of next node to this node and remove next node."
                    },
                    {
                        "username": "Goro_Majima",
                        "content": "Think Like this, If we can\\'t delete the node physically(I mean the way we traditionally do), can we do something with copying the elements.\\nMost important Hint -> Think in terms of tail While solving this question like what will become of the new tail.\\nGood Luck!"
                    },
                    {
                        "username": "Roshan_04",
                        "content": "What if the given node is last node?"
                    },
                    {
                        "username": "mars_999",
                        "content": "1. If the given node(to delete) is last node, then we need to make the previous node\\'s next to be null . Without providing head of the singly linked list, there is no other way we can reach the previous node."
                    },
                    {
                        "username": "mars_999",
                        "content": "Although tricky, this problem should be tagged as easy.  Actually a good question , it is not deleting the node. But the description of the question explains everything."
                    },
                    {
                        "username": "user5822gZ",
                        "content": "The fact that it's Medium made me think longer than I should on this, and I came up with the exact same solution I would've done if it was marked Easy. Weird difficulty, I probably am missing something, but not in the task itself, but in the perception of it."
                    },
                    {
                        "username": "rohan-zende",
                        "content": "Logical Question ."
                    },
                    {
                        "username": "shivanigam",
                        "content": "since node was not a tail \\nwe can use \\n     node.val=node.next.val;\\n        node.next=node.next.next;\\n\\nand if node was a tail we gett a error here because node.next wouldnt be existed if it was not a tail.."
                    }
                ]
            },
            {
                "id": 1746990,
                "content": [
                    {
                        "username": "shekharshashank",
                        "content": "How is this questions marked as a medium level question. "
                    },
                    {
                        "username": "aditya_sharma_024",
                        "content": "two parameters should be given in the question. this question is not understable"
                    },
                    {
                        "username": "mars_999",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/comments/1746990"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "hrishavratan",
                        "content": "Do not try to remove the node , in fact copy value of next node to this node and remove next node."
                    },
                    {
                        "username": "Goro_Majima",
                        "content": "Think Like this, If we can\\'t delete the node physically(I mean the way we traditionally do), can we do something with copying the elements.\\nMost important Hint -> Think in terms of tail While solving this question like what will become of the new tail.\\nGood Luck!"
                    },
                    {
                        "username": "Roshan_04",
                        "content": "What if the given node is last node?"
                    },
                    {
                        "username": "mars_999",
                        "content": "1. If the given node(to delete) is last node, then we need to make the previous node\\'s next to be null . Without providing head of the singly linked list, there is no other way we can reach the previous node."
                    },
                    {
                        "username": "mars_999",
                        "content": "Although tricky, this problem should be tagged as easy.  Actually a good question , it is not deleting the node. But the description of the question explains everything."
                    },
                    {
                        "username": "user5822gZ",
                        "content": "The fact that it's Medium made me think longer than I should on this, and I came up with the exact same solution I would've done if it was marked Easy. Weird difficulty, I probably am missing something, but not in the task itself, but in the perception of it."
                    },
                    {
                        "username": "rohan-zende",
                        "content": "Logical Question ."
                    },
                    {
                        "username": "shivanigam",
                        "content": "since node was not a tail \\nwe can use \\n     node.val=node.next.val;\\n        node.next=node.next.next;\\n\\nand if node was a tail we gett a error here because node.next wouldnt be existed if it was not a tail.."
                    }
                ]
            },
            {
                "id": 1741311,
                "content": [
                    {
                        "username": "shekharshashank",
                        "content": "How is this questions marked as a medium level question. "
                    },
                    {
                        "username": "aditya_sharma_024",
                        "content": "two parameters should be given in the question. this question is not understable"
                    },
                    {
                        "username": "mars_999",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/comments/1746990"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "hrishavratan",
                        "content": "Do not try to remove the node , in fact copy value of next node to this node and remove next node."
                    },
                    {
                        "username": "Goro_Majima",
                        "content": "Think Like this, If we can\\'t delete the node physically(I mean the way we traditionally do), can we do something with copying the elements.\\nMost important Hint -> Think in terms of tail While solving this question like what will become of the new tail.\\nGood Luck!"
                    },
                    {
                        "username": "Roshan_04",
                        "content": "What if the given node is last node?"
                    },
                    {
                        "username": "mars_999",
                        "content": "1. If the given node(to delete) is last node, then we need to make the previous node\\'s next to be null . Without providing head of the singly linked list, there is no other way we can reach the previous node."
                    },
                    {
                        "username": "mars_999",
                        "content": "Although tricky, this problem should be tagged as easy.  Actually a good question , it is not deleting the node. But the description of the question explains everything."
                    },
                    {
                        "username": "user5822gZ",
                        "content": "The fact that it's Medium made me think longer than I should on this, and I came up with the exact same solution I would've done if it was marked Easy. Weird difficulty, I probably am missing something, but not in the task itself, but in the perception of it."
                    },
                    {
                        "username": "rohan-zende",
                        "content": "Logical Question ."
                    },
                    {
                        "username": "shivanigam",
                        "content": "since node was not a tail \\nwe can use \\n     node.val=node.next.val;\\n        node.next=node.next.next;\\n\\nand if node was a tail we gett a error here because node.next wouldnt be existed if it was not a tail.."
                    }
                ]
            },
            {
                "id": 1731683,
                "content": [
                    {
                        "username": "shekharshashank",
                        "content": "How is this questions marked as a medium level question. "
                    },
                    {
                        "username": "aditya_sharma_024",
                        "content": "two parameters should be given in the question. this question is not understable"
                    },
                    {
                        "username": "mars_999",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/comments/1746990"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "hrishavratan",
                        "content": "Do not try to remove the node , in fact copy value of next node to this node and remove next node."
                    },
                    {
                        "username": "Goro_Majima",
                        "content": "Think Like this, If we can\\'t delete the node physically(I mean the way we traditionally do), can we do something with copying the elements.\\nMost important Hint -> Think in terms of tail While solving this question like what will become of the new tail.\\nGood Luck!"
                    },
                    {
                        "username": "Roshan_04",
                        "content": "What if the given node is last node?"
                    },
                    {
                        "username": "mars_999",
                        "content": "1. If the given node(to delete) is last node, then we need to make the previous node\\'s next to be null . Without providing head of the singly linked list, there is no other way we can reach the previous node."
                    },
                    {
                        "username": "mars_999",
                        "content": "Although tricky, this problem should be tagged as easy.  Actually a good question , it is not deleting the node. But the description of the question explains everything."
                    },
                    {
                        "username": "user5822gZ",
                        "content": "The fact that it's Medium made me think longer than I should on this, and I came up with the exact same solution I would've done if it was marked Easy. Weird difficulty, I probably am missing something, but not in the task itself, but in the perception of it."
                    },
                    {
                        "username": "rohan-zende",
                        "content": "Logical Question ."
                    },
                    {
                        "username": "shivanigam",
                        "content": "since node was not a tail \\nwe can use \\n     node.val=node.next.val;\\n        node.next=node.next.next;\\n\\nand if node was a tail we gett a error here because node.next wouldnt be existed if it was not a tail.."
                    }
                ]
            },
            {
                "id": 1715844,
                "content": [
                    {
                        "username": "shekharshashank",
                        "content": "How is this questions marked as a medium level question. "
                    },
                    {
                        "username": "aditya_sharma_024",
                        "content": "two parameters should be given in the question. this question is not understable"
                    },
                    {
                        "username": "mars_999",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/comments/1746990"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/8N_L_c71avU"
                    },
                    {
                        "username": "hrishavratan",
                        "content": "Do not try to remove the node , in fact copy value of next node to this node and remove next node."
                    },
                    {
                        "username": "Goro_Majima",
                        "content": "Think Like this, If we can\\'t delete the node physically(I mean the way we traditionally do), can we do something with copying the elements.\\nMost important Hint -> Think in terms of tail While solving this question like what will become of the new tail.\\nGood Luck!"
                    },
                    {
                        "username": "Roshan_04",
                        "content": "What if the given node is last node?"
                    },
                    {
                        "username": "mars_999",
                        "content": "1. If the given node(to delete) is last node, then we need to make the previous node\\'s next to be null . Without providing head of the singly linked list, there is no other way we can reach the previous node."
                    },
                    {
                        "username": "mars_999",
                        "content": "Although tricky, this problem should be tagged as easy.  Actually a good question , it is not deleting the node. But the description of the question explains everything."
                    },
                    {
                        "username": "user5822gZ",
                        "content": "The fact that it's Medium made me think longer than I should on this, and I came up with the exact same solution I would've done if it was marked Easy. Weird difficulty, I probably am missing something, but not in the task itself, but in the perception of it."
                    },
                    {
                        "username": "rohan-zende",
                        "content": "Logical Question ."
                    },
                    {
                        "username": "shivanigam",
                        "content": "since node was not a tail \\nwe can use \\n     node.val=node.next.val;\\n        node.next=node.next.next;\\n\\nand if node was a tail we gett a error here because node.next wouldnt be existed if it was not a tail.."
                    }
                ]
            },
            {
                "id": 1715831,
                "content": [
                    {
                        "username": "shivanigam",
                        "content": "     \\n\\n\\n\\nvery easy java solution\\n\\n\\n\\nnode.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(1) Soln. [ FAANG\\uD83D\\uDE31 Interview Optimized code ]\\n\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/solutions/2863165/easy-c-o-1-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "dhuratj915",
                        "content": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node.next==null)\\n        {\\n            node=null;\\n        }\\n        else\\n        {\\n           node.val=node.next.val;\\n           node.next=node.next.next;\\n        }\\n    }\\n} "
                    },
                    {
                        "username": "Qyum",
                        "content": "Dumbest questions like me"
                    },
                    {
                        "username": "sd98754",
                        "content": "LeetCode should have a review system before posting a  question so that this kind of question could be delted right away."
                    },
                    {
                        "username": "SteveBronder",
                        "content": "It would be nice if the problem could check if you actually deleted the node and not just swapped it and left it hanging. Otherwise a lot of solutions here are just removing the node and not actually deleting it, causing a memory leak."
                    },
                    {
                        "username": "acbthisisit",
                        "content": "imagine a person coming to LC and sees the problem . He will not come back :)"
                    },
                    {
                        "username": "acbthisisit",
                        "content": "where is the head;"
                    },
                    {
                        "username": "KHARSH",
                        "content": "In this, we are not actually deleting the node we are just swapping the values and changing pointers and actually, this does not seem possible with one node also in the case of a single linked list."
                    },
                    {
                        "username": "Mallikarjun_K",
                        "content": "The answer is very simple if we understand the algorithm that is we should copy the next node\\'s value to current node/given node and delete the next node"
                    }
                ]
            },
            {
                "id": 1701044,
                "content": [
                    {
                        "username": "shivanigam",
                        "content": "     \\n\\n\\n\\nvery easy java solution\\n\\n\\n\\nnode.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(1) Soln. [ FAANG\\uD83D\\uDE31 Interview Optimized code ]\\n\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/solutions/2863165/easy-c-o-1-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "dhuratj915",
                        "content": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node.next==null)\\n        {\\n            node=null;\\n        }\\n        else\\n        {\\n           node.val=node.next.val;\\n           node.next=node.next.next;\\n        }\\n    }\\n} "
                    },
                    {
                        "username": "Qyum",
                        "content": "Dumbest questions like me"
                    },
                    {
                        "username": "sd98754",
                        "content": "LeetCode should have a review system before posting a  question so that this kind of question could be delted right away."
                    },
                    {
                        "username": "SteveBronder",
                        "content": "It would be nice if the problem could check if you actually deleted the node and not just swapped it and left it hanging. Otherwise a lot of solutions here are just removing the node and not actually deleting it, causing a memory leak."
                    },
                    {
                        "username": "acbthisisit",
                        "content": "imagine a person coming to LC and sees the problem . He will not come back :)"
                    },
                    {
                        "username": "acbthisisit",
                        "content": "where is the head;"
                    },
                    {
                        "username": "KHARSH",
                        "content": "In this, we are not actually deleting the node we are just swapping the values and changing pointers and actually, this does not seem possible with one node also in the case of a single linked list."
                    },
                    {
                        "username": "Mallikarjun_K",
                        "content": "The answer is very simple if we understand the algorithm that is we should copy the next node\\'s value to current node/given node and delete the next node"
                    }
                ]
            },
            {
                "id": 1687337,
                "content": [
                    {
                        "username": "shivanigam",
                        "content": "     \\n\\n\\n\\nvery easy java solution\\n\\n\\n\\nnode.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(1) Soln. [ FAANG\\uD83D\\uDE31 Interview Optimized code ]\\n\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/solutions/2863165/easy-c-o-1-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "dhuratj915",
                        "content": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node.next==null)\\n        {\\n            node=null;\\n        }\\n        else\\n        {\\n           node.val=node.next.val;\\n           node.next=node.next.next;\\n        }\\n    }\\n} "
                    },
                    {
                        "username": "Qyum",
                        "content": "Dumbest questions like me"
                    },
                    {
                        "username": "sd98754",
                        "content": "LeetCode should have a review system before posting a  question so that this kind of question could be delted right away."
                    },
                    {
                        "username": "SteveBronder",
                        "content": "It would be nice if the problem could check if you actually deleted the node and not just swapped it and left it hanging. Otherwise a lot of solutions here are just removing the node and not actually deleting it, causing a memory leak."
                    },
                    {
                        "username": "acbthisisit",
                        "content": "imagine a person coming to LC and sees the problem . He will not come back :)"
                    },
                    {
                        "username": "acbthisisit",
                        "content": "where is the head;"
                    },
                    {
                        "username": "KHARSH",
                        "content": "In this, we are not actually deleting the node we are just swapping the values and changing pointers and actually, this does not seem possible with one node also in the case of a single linked list."
                    },
                    {
                        "username": "Mallikarjun_K",
                        "content": "The answer is very simple if we understand the algorithm that is we should copy the next node\\'s value to current node/given node and delete the next node"
                    }
                ]
            },
            {
                "id": 1682754,
                "content": [
                    {
                        "username": "shivanigam",
                        "content": "     \\n\\n\\n\\nvery easy java solution\\n\\n\\n\\nnode.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(1) Soln. [ FAANG\\uD83D\\uDE31 Interview Optimized code ]\\n\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/solutions/2863165/easy-c-o-1-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "dhuratj915",
                        "content": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node.next==null)\\n        {\\n            node=null;\\n        }\\n        else\\n        {\\n           node.val=node.next.val;\\n           node.next=node.next.next;\\n        }\\n    }\\n} "
                    },
                    {
                        "username": "Qyum",
                        "content": "Dumbest questions like me"
                    },
                    {
                        "username": "sd98754",
                        "content": "LeetCode should have a review system before posting a  question so that this kind of question could be delted right away."
                    },
                    {
                        "username": "SteveBronder",
                        "content": "It would be nice if the problem could check if you actually deleted the node and not just swapped it and left it hanging. Otherwise a lot of solutions here are just removing the node and not actually deleting it, causing a memory leak."
                    },
                    {
                        "username": "acbthisisit",
                        "content": "imagine a person coming to LC and sees the problem . He will not come back :)"
                    },
                    {
                        "username": "acbthisisit",
                        "content": "where is the head;"
                    },
                    {
                        "username": "KHARSH",
                        "content": "In this, we are not actually deleting the node we are just swapping the values and changing pointers and actually, this does not seem possible with one node also in the case of a single linked list."
                    },
                    {
                        "username": "Mallikarjun_K",
                        "content": "The answer is very simple if we understand the algorithm that is we should copy the next node\\'s value to current node/given node and delete the next node"
                    }
                ]
            },
            {
                "id": 1651608,
                "content": [
                    {
                        "username": "shivanigam",
                        "content": "     \\n\\n\\n\\nvery easy java solution\\n\\n\\n\\nnode.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(1) Soln. [ FAANG\\uD83D\\uDE31 Interview Optimized code ]\\n\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/solutions/2863165/easy-c-o-1-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "dhuratj915",
                        "content": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node.next==null)\\n        {\\n            node=null;\\n        }\\n        else\\n        {\\n           node.val=node.next.val;\\n           node.next=node.next.next;\\n        }\\n    }\\n} "
                    },
                    {
                        "username": "Qyum",
                        "content": "Dumbest questions like me"
                    },
                    {
                        "username": "sd98754",
                        "content": "LeetCode should have a review system before posting a  question so that this kind of question could be delted right away."
                    },
                    {
                        "username": "SteveBronder",
                        "content": "It would be nice if the problem could check if you actually deleted the node and not just swapped it and left it hanging. Otherwise a lot of solutions here are just removing the node and not actually deleting it, causing a memory leak."
                    },
                    {
                        "username": "acbthisisit",
                        "content": "imagine a person coming to LC and sees the problem . He will not come back :)"
                    },
                    {
                        "username": "acbthisisit",
                        "content": "where is the head;"
                    },
                    {
                        "username": "KHARSH",
                        "content": "In this, we are not actually deleting the node we are just swapping the values and changing pointers and actually, this does not seem possible with one node also in the case of a single linked list."
                    },
                    {
                        "username": "Mallikarjun_K",
                        "content": "The answer is very simple if we understand the algorithm that is we should copy the next node\\'s value to current node/given node and delete the next node"
                    }
                ]
            },
            {
                "id": 1644999,
                "content": [
                    {
                        "username": "shivanigam",
                        "content": "     \\n\\n\\n\\nvery easy java solution\\n\\n\\n\\nnode.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(1) Soln. [ FAANG\\uD83D\\uDE31 Interview Optimized code ]\\n\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/solutions/2863165/easy-c-o-1-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "dhuratj915",
                        "content": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node.next==null)\\n        {\\n            node=null;\\n        }\\n        else\\n        {\\n           node.val=node.next.val;\\n           node.next=node.next.next;\\n        }\\n    }\\n} "
                    },
                    {
                        "username": "Qyum",
                        "content": "Dumbest questions like me"
                    },
                    {
                        "username": "sd98754",
                        "content": "LeetCode should have a review system before posting a  question so that this kind of question could be delted right away."
                    },
                    {
                        "username": "SteveBronder",
                        "content": "It would be nice if the problem could check if you actually deleted the node and not just swapped it and left it hanging. Otherwise a lot of solutions here are just removing the node and not actually deleting it, causing a memory leak."
                    },
                    {
                        "username": "acbthisisit",
                        "content": "imagine a person coming to LC and sees the problem . He will not come back :)"
                    },
                    {
                        "username": "acbthisisit",
                        "content": "where is the head;"
                    },
                    {
                        "username": "KHARSH",
                        "content": "In this, we are not actually deleting the node we are just swapping the values and changing pointers and actually, this does not seem possible with one node also in the case of a single linked list."
                    },
                    {
                        "username": "Mallikarjun_K",
                        "content": "The answer is very simple if we understand the algorithm that is we should copy the next node\\'s value to current node/given node and delete the next node"
                    }
                ]
            },
            {
                "id": 1644032,
                "content": [
                    {
                        "username": "shivanigam",
                        "content": "     \\n\\n\\n\\nvery easy java solution\\n\\n\\n\\nnode.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(1) Soln. [ FAANG\\uD83D\\uDE31 Interview Optimized code ]\\n\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/solutions/2863165/easy-c-o-1-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "dhuratj915",
                        "content": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node.next==null)\\n        {\\n            node=null;\\n        }\\n        else\\n        {\\n           node.val=node.next.val;\\n           node.next=node.next.next;\\n        }\\n    }\\n} "
                    },
                    {
                        "username": "Qyum",
                        "content": "Dumbest questions like me"
                    },
                    {
                        "username": "sd98754",
                        "content": "LeetCode should have a review system before posting a  question so that this kind of question could be delted right away."
                    },
                    {
                        "username": "SteveBronder",
                        "content": "It would be nice if the problem could check if you actually deleted the node and not just swapped it and left it hanging. Otherwise a lot of solutions here are just removing the node and not actually deleting it, causing a memory leak."
                    },
                    {
                        "username": "acbthisisit",
                        "content": "imagine a person coming to LC and sees the problem . He will not come back :)"
                    },
                    {
                        "username": "acbthisisit",
                        "content": "where is the head;"
                    },
                    {
                        "username": "KHARSH",
                        "content": "In this, we are not actually deleting the node we are just swapping the values and changing pointers and actually, this does not seem possible with one node also in the case of a single linked list."
                    },
                    {
                        "username": "Mallikarjun_K",
                        "content": "The answer is very simple if we understand the algorithm that is we should copy the next node\\'s value to current node/given node and delete the next node"
                    }
                ]
            },
            {
                "id": 1644030,
                "content": [
                    {
                        "username": "shivanigam",
                        "content": "     \\n\\n\\n\\nvery easy java solution\\n\\n\\n\\nnode.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(1) Soln. [ FAANG\\uD83D\\uDE31 Interview Optimized code ]\\n\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/solutions/2863165/easy-c-o-1-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "dhuratj915",
                        "content": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node.next==null)\\n        {\\n            node=null;\\n        }\\n        else\\n        {\\n           node.val=node.next.val;\\n           node.next=node.next.next;\\n        }\\n    }\\n} "
                    },
                    {
                        "username": "Qyum",
                        "content": "Dumbest questions like me"
                    },
                    {
                        "username": "sd98754",
                        "content": "LeetCode should have a review system before posting a  question so that this kind of question could be delted right away."
                    },
                    {
                        "username": "SteveBronder",
                        "content": "It would be nice if the problem could check if you actually deleted the node and not just swapped it and left it hanging. Otherwise a lot of solutions here are just removing the node and not actually deleting it, causing a memory leak."
                    },
                    {
                        "username": "acbthisisit",
                        "content": "imagine a person coming to LC and sees the problem . He will not come back :)"
                    },
                    {
                        "username": "acbthisisit",
                        "content": "where is the head;"
                    },
                    {
                        "username": "KHARSH",
                        "content": "In this, we are not actually deleting the node we are just swapping the values and changing pointers and actually, this does not seem possible with one node also in the case of a single linked list."
                    },
                    {
                        "username": "Mallikarjun_K",
                        "content": "The answer is very simple if we understand the algorithm that is we should copy the next node\\'s value to current node/given node and delete the next node"
                    }
                ]
            },
            {
                "id": 1643733,
                "content": [
                    {
                        "username": "shivanigam",
                        "content": "     \\n\\n\\n\\nvery easy java solution\\n\\n\\n\\nnode.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(1) Soln. [ FAANG\\uD83D\\uDE31 Interview Optimized code ]\\n\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/solutions/2863165/easy-c-o-1-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "dhuratj915",
                        "content": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node.next==null)\\n        {\\n            node=null;\\n        }\\n        else\\n        {\\n           node.val=node.next.val;\\n           node.next=node.next.next;\\n        }\\n    }\\n} "
                    },
                    {
                        "username": "Qyum",
                        "content": "Dumbest questions like me"
                    },
                    {
                        "username": "sd98754",
                        "content": "LeetCode should have a review system before posting a  question so that this kind of question could be delted right away."
                    },
                    {
                        "username": "SteveBronder",
                        "content": "It would be nice if the problem could check if you actually deleted the node and not just swapped it and left it hanging. Otherwise a lot of solutions here are just removing the node and not actually deleting it, causing a memory leak."
                    },
                    {
                        "username": "acbthisisit",
                        "content": "imagine a person coming to LC and sees the problem . He will not come back :)"
                    },
                    {
                        "username": "acbthisisit",
                        "content": "where is the head;"
                    },
                    {
                        "username": "KHARSH",
                        "content": "In this, we are not actually deleting the node we are just swapping the values and changing pointers and actually, this does not seem possible with one node also in the case of a single linked list."
                    },
                    {
                        "username": "Mallikarjun_K",
                        "content": "The answer is very simple if we understand the algorithm that is we should copy the next node\\'s value to current node/given node and delete the next node"
                    }
                ]
            },
            {
                "id": 1643580,
                "content": [
                    {
                        "username": "shivanigam",
                        "content": "     \\n\\n\\n\\nvery easy java solution\\n\\n\\n\\nnode.val=node.next.val;\\n        node.next=node.next.next;"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "# \\uD83D\\uDEA9Easy C++ O(1) Soln. [ FAANG\\uD83D\\uDE31 Interview Optimized code ]\\n\\nhttps://leetcode.com/problems/delete-node-in-a-linked-list/solutions/2863165/easy-c-o-1-soln-faang-interview-optimized-code/"
                    },
                    {
                        "username": "dhuratj915",
                        "content": "class Solution {\\n    public void deleteNode(ListNode node) {\\n        if(node.next==null)\\n        {\\n            node=null;\\n        }\\n        else\\n        {\\n           node.val=node.next.val;\\n           node.next=node.next.next;\\n        }\\n    }\\n} "
                    },
                    {
                        "username": "Qyum",
                        "content": "Dumbest questions like me"
                    },
                    {
                        "username": "sd98754",
                        "content": "LeetCode should have a review system before posting a  question so that this kind of question could be delted right away."
                    },
                    {
                        "username": "SteveBronder",
                        "content": "It would be nice if the problem could check if you actually deleted the node and not just swapped it and left it hanging. Otherwise a lot of solutions here are just removing the node and not actually deleting it, causing a memory leak."
                    },
                    {
                        "username": "acbthisisit",
                        "content": "imagine a person coming to LC and sees the problem . He will not come back :)"
                    },
                    {
                        "username": "acbthisisit",
                        "content": "where is the head;"
                    },
                    {
                        "username": "KHARSH",
                        "content": "In this, we are not actually deleting the node we are just swapping the values and changing pointers and actually, this does not seem possible with one node also in the case of a single linked list."
                    },
                    {
                        "username": "Mallikarjun_K",
                        "content": "The answer is very simple if we understand the algorithm that is we should copy the next node\\'s value to current node/given node and delete the next node"
                    }
                ]
            },
            {
                "id": 1643358,
                "content": [
                    {
                        "username": "Vasanthvivi",
                        "content": "where is the node param to be deleted?"
                    },
                    {
                        "username": "Jiganesh",
                        "content": "I think this problem should be marked as easy\\n"
                    },
                    {
                        "username": "avinash2678",
                        "content": "       ` 1. here we have the node that need to be deleted.\\n         2. we don\\'t have access to the entire linked list\\n         3. Delete the given node. Note that by deleting the node, we do not mean removing it from memory value should not exist in the list \\n         4. So here we can set current node value = next node value\\n        5.  current node.next point to next node.next `"
                    },
                    {
                        "username": "bajrang11082002",
                        "content": "  void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }"
                    },
                    {
                        "username": "coder481",
                        "content": "Why this question is medium level?"
                    },
                    {
                        "username": "Shivgup_2000",
                        "content": "Here in this question as only the node that is to be deleted is given and it is clearly mentioned that the nodes value needs to be removed not the memory so, the simple idea to do so is by just updating the nodes value and address."
                    },
                    {
                        "username": "aserian",
                        "content": "Python solution using gc:\\n\\n```\\nimport gc\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n\\n        parent = gc.get_referrers(node)\\n\\n        if not parent:\\n            # this case the node is the first in the list\\n            # we know there are at least 2 nodes so we guaranteed have a next\\n            node.val = node.next.val\\n            if node.next.next:\\n                node.next = node.next.next\\n            else:\\n                node.next = None\\n        else:\\n            parent[0][\\'next\\'] = node.next\\n```\\n\\nI assume this problem expects you to use language specific knowledge to use reflection to get the parent of the node you are given. Highly language specific and not a great question overall."
                    },
                    {
                        "username": "dpang06",
                        "content": "This should not be medium. Only two lines of code without any skills."
                    },
                    {
                        "username": "ritikarairitu8",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/"
                    },
                    {
                        "username": "milu",
                        "content": "void deleteNode(struct ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;\\n}"
                    }
                ]
            },
            {
                "id": 1643347,
                "content": [
                    {
                        "username": "Vasanthvivi",
                        "content": "where is the node param to be deleted?"
                    },
                    {
                        "username": "Jiganesh",
                        "content": "I think this problem should be marked as easy\\n"
                    },
                    {
                        "username": "avinash2678",
                        "content": "       ` 1. here we have the node that need to be deleted.\\n         2. we don\\'t have access to the entire linked list\\n         3. Delete the given node. Note that by deleting the node, we do not mean removing it from memory value should not exist in the list \\n         4. So here we can set current node value = next node value\\n        5.  current node.next point to next node.next `"
                    },
                    {
                        "username": "bajrang11082002",
                        "content": "  void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }"
                    },
                    {
                        "username": "coder481",
                        "content": "Why this question is medium level?"
                    },
                    {
                        "username": "Shivgup_2000",
                        "content": "Here in this question as only the node that is to be deleted is given and it is clearly mentioned that the nodes value needs to be removed not the memory so, the simple idea to do so is by just updating the nodes value and address."
                    },
                    {
                        "username": "aserian",
                        "content": "Python solution using gc:\\n\\n```\\nimport gc\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n\\n        parent = gc.get_referrers(node)\\n\\n        if not parent:\\n            # this case the node is the first in the list\\n            # we know there are at least 2 nodes so we guaranteed have a next\\n            node.val = node.next.val\\n            if node.next.next:\\n                node.next = node.next.next\\n            else:\\n                node.next = None\\n        else:\\n            parent[0][\\'next\\'] = node.next\\n```\\n\\nI assume this problem expects you to use language specific knowledge to use reflection to get the parent of the node you are given. Highly language specific and not a great question overall."
                    },
                    {
                        "username": "dpang06",
                        "content": "This should not be medium. Only two lines of code without any skills."
                    },
                    {
                        "username": "ritikarairitu8",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/"
                    },
                    {
                        "username": "milu",
                        "content": "void deleteNode(struct ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;\\n}"
                    }
                ]
            },
            {
                "id": 1643137,
                "content": [
                    {
                        "username": "Vasanthvivi",
                        "content": "where is the node param to be deleted?"
                    },
                    {
                        "username": "Jiganesh",
                        "content": "I think this problem should be marked as easy\\n"
                    },
                    {
                        "username": "avinash2678",
                        "content": "       ` 1. here we have the node that need to be deleted.\\n         2. we don\\'t have access to the entire linked list\\n         3. Delete the given node. Note that by deleting the node, we do not mean removing it from memory value should not exist in the list \\n         4. So here we can set current node value = next node value\\n        5.  current node.next point to next node.next `"
                    },
                    {
                        "username": "bajrang11082002",
                        "content": "  void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }"
                    },
                    {
                        "username": "coder481",
                        "content": "Why this question is medium level?"
                    },
                    {
                        "username": "Shivgup_2000",
                        "content": "Here in this question as only the node that is to be deleted is given and it is clearly mentioned that the nodes value needs to be removed not the memory so, the simple idea to do so is by just updating the nodes value and address."
                    },
                    {
                        "username": "aserian",
                        "content": "Python solution using gc:\\n\\n```\\nimport gc\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n\\n        parent = gc.get_referrers(node)\\n\\n        if not parent:\\n            # this case the node is the first in the list\\n            # we know there are at least 2 nodes so we guaranteed have a next\\n            node.val = node.next.val\\n            if node.next.next:\\n                node.next = node.next.next\\n            else:\\n                node.next = None\\n        else:\\n            parent[0][\\'next\\'] = node.next\\n```\\n\\nI assume this problem expects you to use language specific knowledge to use reflection to get the parent of the node you are given. Highly language specific and not a great question overall."
                    },
                    {
                        "username": "dpang06",
                        "content": "This should not be medium. Only two lines of code without any skills."
                    },
                    {
                        "username": "ritikarairitu8",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/"
                    },
                    {
                        "username": "milu",
                        "content": "void deleteNode(struct ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;\\n}"
                    }
                ]
            },
            {
                "id": 1643122,
                "content": [
                    {
                        "username": "Vasanthvivi",
                        "content": "where is the node param to be deleted?"
                    },
                    {
                        "username": "Jiganesh",
                        "content": "I think this problem should be marked as easy\\n"
                    },
                    {
                        "username": "avinash2678",
                        "content": "       ` 1. here we have the node that need to be deleted.\\n         2. we don\\'t have access to the entire linked list\\n         3. Delete the given node. Note that by deleting the node, we do not mean removing it from memory value should not exist in the list \\n         4. So here we can set current node value = next node value\\n        5.  current node.next point to next node.next `"
                    },
                    {
                        "username": "bajrang11082002",
                        "content": "  void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }"
                    },
                    {
                        "username": "coder481",
                        "content": "Why this question is medium level?"
                    },
                    {
                        "username": "Shivgup_2000",
                        "content": "Here in this question as only the node that is to be deleted is given and it is clearly mentioned that the nodes value needs to be removed not the memory so, the simple idea to do so is by just updating the nodes value and address."
                    },
                    {
                        "username": "aserian",
                        "content": "Python solution using gc:\\n\\n```\\nimport gc\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n\\n        parent = gc.get_referrers(node)\\n\\n        if not parent:\\n            # this case the node is the first in the list\\n            # we know there are at least 2 nodes so we guaranteed have a next\\n            node.val = node.next.val\\n            if node.next.next:\\n                node.next = node.next.next\\n            else:\\n                node.next = None\\n        else:\\n            parent[0][\\'next\\'] = node.next\\n```\\n\\nI assume this problem expects you to use language specific knowledge to use reflection to get the parent of the node you are given. Highly language specific and not a great question overall."
                    },
                    {
                        "username": "dpang06",
                        "content": "This should not be medium. Only two lines of code without any skills."
                    },
                    {
                        "username": "ritikarairitu8",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/"
                    },
                    {
                        "username": "milu",
                        "content": "void deleteNode(struct ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;\\n}"
                    }
                ]
            },
            {
                "id": 1643092,
                "content": [
                    {
                        "username": "Vasanthvivi",
                        "content": "where is the node param to be deleted?"
                    },
                    {
                        "username": "Jiganesh",
                        "content": "I think this problem should be marked as easy\\n"
                    },
                    {
                        "username": "avinash2678",
                        "content": "       ` 1. here we have the node that need to be deleted.\\n         2. we don\\'t have access to the entire linked list\\n         3. Delete the given node. Note that by deleting the node, we do not mean removing it from memory value should not exist in the list \\n         4. So here we can set current node value = next node value\\n        5.  current node.next point to next node.next `"
                    },
                    {
                        "username": "bajrang11082002",
                        "content": "  void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }"
                    },
                    {
                        "username": "coder481",
                        "content": "Why this question is medium level?"
                    },
                    {
                        "username": "Shivgup_2000",
                        "content": "Here in this question as only the node that is to be deleted is given and it is clearly mentioned that the nodes value needs to be removed not the memory so, the simple idea to do so is by just updating the nodes value and address."
                    },
                    {
                        "username": "aserian",
                        "content": "Python solution using gc:\\n\\n```\\nimport gc\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n\\n        parent = gc.get_referrers(node)\\n\\n        if not parent:\\n            # this case the node is the first in the list\\n            # we know there are at least 2 nodes so we guaranteed have a next\\n            node.val = node.next.val\\n            if node.next.next:\\n                node.next = node.next.next\\n            else:\\n                node.next = None\\n        else:\\n            parent[0][\\'next\\'] = node.next\\n```\\n\\nI assume this problem expects you to use language specific knowledge to use reflection to get the parent of the node you are given. Highly language specific and not a great question overall."
                    },
                    {
                        "username": "dpang06",
                        "content": "This should not be medium. Only two lines of code without any skills."
                    },
                    {
                        "username": "ritikarairitu8",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/"
                    },
                    {
                        "username": "milu",
                        "content": "void deleteNode(struct ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;\\n}"
                    }
                ]
            },
            {
                "id": 1643091,
                "content": [
                    {
                        "username": "Vasanthvivi",
                        "content": "where is the node param to be deleted?"
                    },
                    {
                        "username": "Jiganesh",
                        "content": "I think this problem should be marked as easy\\n"
                    },
                    {
                        "username": "avinash2678",
                        "content": "       ` 1. here we have the node that need to be deleted.\\n         2. we don\\'t have access to the entire linked list\\n         3. Delete the given node. Note that by deleting the node, we do not mean removing it from memory value should not exist in the list \\n         4. So here we can set current node value = next node value\\n        5.  current node.next point to next node.next `"
                    },
                    {
                        "username": "bajrang11082002",
                        "content": "  void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }"
                    },
                    {
                        "username": "coder481",
                        "content": "Why this question is medium level?"
                    },
                    {
                        "username": "Shivgup_2000",
                        "content": "Here in this question as only the node that is to be deleted is given and it is clearly mentioned that the nodes value needs to be removed not the memory so, the simple idea to do so is by just updating the nodes value and address."
                    },
                    {
                        "username": "aserian",
                        "content": "Python solution using gc:\\n\\n```\\nimport gc\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n\\n        parent = gc.get_referrers(node)\\n\\n        if not parent:\\n            # this case the node is the first in the list\\n            # we know there are at least 2 nodes so we guaranteed have a next\\n            node.val = node.next.val\\n            if node.next.next:\\n                node.next = node.next.next\\n            else:\\n                node.next = None\\n        else:\\n            parent[0][\\'next\\'] = node.next\\n```\\n\\nI assume this problem expects you to use language specific knowledge to use reflection to get the parent of the node you are given. Highly language specific and not a great question overall."
                    },
                    {
                        "username": "dpang06",
                        "content": "This should not be medium. Only two lines of code without any skills."
                    },
                    {
                        "username": "ritikarairitu8",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/"
                    },
                    {
                        "username": "milu",
                        "content": "void deleteNode(struct ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;\\n}"
                    }
                ]
            },
            {
                "id": 1642896,
                "content": [
                    {
                        "username": "Vasanthvivi",
                        "content": "where is the node param to be deleted?"
                    },
                    {
                        "username": "Jiganesh",
                        "content": "I think this problem should be marked as easy\\n"
                    },
                    {
                        "username": "avinash2678",
                        "content": "       ` 1. here we have the node that need to be deleted.\\n         2. we don\\'t have access to the entire linked list\\n         3. Delete the given node. Note that by deleting the node, we do not mean removing it from memory value should not exist in the list \\n         4. So here we can set current node value = next node value\\n        5.  current node.next point to next node.next `"
                    },
                    {
                        "username": "bajrang11082002",
                        "content": "  void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }"
                    },
                    {
                        "username": "coder481",
                        "content": "Why this question is medium level?"
                    },
                    {
                        "username": "Shivgup_2000",
                        "content": "Here in this question as only the node that is to be deleted is given and it is clearly mentioned that the nodes value needs to be removed not the memory so, the simple idea to do so is by just updating the nodes value and address."
                    },
                    {
                        "username": "aserian",
                        "content": "Python solution using gc:\\n\\n```\\nimport gc\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n\\n        parent = gc.get_referrers(node)\\n\\n        if not parent:\\n            # this case the node is the first in the list\\n            # we know there are at least 2 nodes so we guaranteed have a next\\n            node.val = node.next.val\\n            if node.next.next:\\n                node.next = node.next.next\\n            else:\\n                node.next = None\\n        else:\\n            parent[0][\\'next\\'] = node.next\\n```\\n\\nI assume this problem expects you to use language specific knowledge to use reflection to get the parent of the node you are given. Highly language specific and not a great question overall."
                    },
                    {
                        "username": "dpang06",
                        "content": "This should not be medium. Only two lines of code without any skills."
                    },
                    {
                        "username": "ritikarairitu8",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/"
                    },
                    {
                        "username": "milu",
                        "content": "void deleteNode(struct ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;\\n}"
                    }
                ]
            },
            {
                "id": 1642854,
                "content": [
                    {
                        "username": "Vasanthvivi",
                        "content": "where is the node param to be deleted?"
                    },
                    {
                        "username": "Jiganesh",
                        "content": "I think this problem should be marked as easy\\n"
                    },
                    {
                        "username": "avinash2678",
                        "content": "       ` 1. here we have the node that need to be deleted.\\n         2. we don\\'t have access to the entire linked list\\n         3. Delete the given node. Note that by deleting the node, we do not mean removing it from memory value should not exist in the list \\n         4. So here we can set current node value = next node value\\n        5.  current node.next point to next node.next `"
                    },
                    {
                        "username": "bajrang11082002",
                        "content": "  void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }"
                    },
                    {
                        "username": "coder481",
                        "content": "Why this question is medium level?"
                    },
                    {
                        "username": "Shivgup_2000",
                        "content": "Here in this question as only the node that is to be deleted is given and it is clearly mentioned that the nodes value needs to be removed not the memory so, the simple idea to do so is by just updating the nodes value and address."
                    },
                    {
                        "username": "aserian",
                        "content": "Python solution using gc:\\n\\n```\\nimport gc\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n\\n        parent = gc.get_referrers(node)\\n\\n        if not parent:\\n            # this case the node is the first in the list\\n            # we know there are at least 2 nodes so we guaranteed have a next\\n            node.val = node.next.val\\n            if node.next.next:\\n                node.next = node.next.next\\n            else:\\n                node.next = None\\n        else:\\n            parent[0][\\'next\\'] = node.next\\n```\\n\\nI assume this problem expects you to use language specific knowledge to use reflection to get the parent of the node you are given. Highly language specific and not a great question overall."
                    },
                    {
                        "username": "dpang06",
                        "content": "This should not be medium. Only two lines of code without any skills."
                    },
                    {
                        "username": "ritikarairitu8",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/"
                    },
                    {
                        "username": "milu",
                        "content": "void deleteNode(struct ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;\\n}"
                    }
                ]
            },
            {
                "id": 1631958,
                "content": [
                    {
                        "username": "Vasanthvivi",
                        "content": "where is the node param to be deleted?"
                    },
                    {
                        "username": "Jiganesh",
                        "content": "I think this problem should be marked as easy\\n"
                    },
                    {
                        "username": "avinash2678",
                        "content": "       ` 1. here we have the node that need to be deleted.\\n         2. we don\\'t have access to the entire linked list\\n         3. Delete the given node. Note that by deleting the node, we do not mean removing it from memory value should not exist in the list \\n         4. So here we can set current node value = next node value\\n        5.  current node.next point to next node.next `"
                    },
                    {
                        "username": "bajrang11082002",
                        "content": "  void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }"
                    },
                    {
                        "username": "coder481",
                        "content": "Why this question is medium level?"
                    },
                    {
                        "username": "Shivgup_2000",
                        "content": "Here in this question as only the node that is to be deleted is given and it is clearly mentioned that the nodes value needs to be removed not the memory so, the simple idea to do so is by just updating the nodes value and address."
                    },
                    {
                        "username": "aserian",
                        "content": "Python solution using gc:\\n\\n```\\nimport gc\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n\\n        parent = gc.get_referrers(node)\\n\\n        if not parent:\\n            # this case the node is the first in the list\\n            # we know there are at least 2 nodes so we guaranteed have a next\\n            node.val = node.next.val\\n            if node.next.next:\\n                node.next = node.next.next\\n            else:\\n                node.next = None\\n        else:\\n            parent[0][\\'next\\'] = node.next\\n```\\n\\nI assume this problem expects you to use language specific knowledge to use reflection to get the parent of the node you are given. Highly language specific and not a great question overall."
                    },
                    {
                        "username": "dpang06",
                        "content": "This should not be medium. Only two lines of code without any skills."
                    },
                    {
                        "username": "ritikarairitu8",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/"
                    },
                    {
                        "username": "milu",
                        "content": "void deleteNode(struct ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;\\n}"
                    }
                ]
            },
            {
                "id": 1567927,
                "content": [
                    {
                        "username": "Vasanthvivi",
                        "content": "where is the node param to be deleted?"
                    },
                    {
                        "username": "Jiganesh",
                        "content": "I think this problem should be marked as easy\\n"
                    },
                    {
                        "username": "avinash2678",
                        "content": "       ` 1. here we have the node that need to be deleted.\\n         2. we don\\'t have access to the entire linked list\\n         3. Delete the given node. Note that by deleting the node, we do not mean removing it from memory value should not exist in the list \\n         4. So here we can set current node value = next node value\\n        5.  current node.next point to next node.next `"
                    },
                    {
                        "username": "bajrang11082002",
                        "content": "  void deleteNode(ListNode* node) {\\n        *node = *node->next;\\n    }"
                    },
                    {
                        "username": "coder481",
                        "content": "Why this question is medium level?"
                    },
                    {
                        "username": "Shivgup_2000",
                        "content": "Here in this question as only the node that is to be deleted is given and it is clearly mentioned that the nodes value needs to be removed not the memory so, the simple idea to do so is by just updating the nodes value and address."
                    },
                    {
                        "username": "aserian",
                        "content": "Python solution using gc:\\n\\n```\\nimport gc\\n\\nclass Solution:\\n    def deleteNode(self, node):\\n        \"\"\"\\n        :type node: ListNode\\n        :rtype: void Do not return anything, modify node in-place instead.\\n        \"\"\"\\n\\n        parent = gc.get_referrers(node)\\n\\n        if not parent:\\n            # this case the node is the first in the list\\n            # we know there are at least 2 nodes so we guaranteed have a next\\n            node.val = node.next.val\\n            if node.next.next:\\n                node.next = node.next.next\\n            else:\\n                node.next = None\\n        else:\\n            parent[0][\\'next\\'] = node.next\\n```\\n\\nI assume this problem expects you to use language specific knowledge to use reflection to get the parent of the node you are given. Highly language specific and not a great question overall."
                    },
                    {
                        "username": "dpang06",
                        "content": "This should not be medium. Only two lines of code without any skills."
                    },
                    {
                        "username": "ritikarairitu8",
                        "content": "https://leetcode.com/problems/delete-node-in-a-linked-list/discussion/"
                    },
                    {
                        "username": "milu",
                        "content": "void deleteNode(struct ListNode* node) {\\n    node->val = node->next->val;\\n    node->next = node->next->next;\\n}"
                    }
                ]
            }
        ]
    }
]